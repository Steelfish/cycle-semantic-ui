/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/cycle-semantic-ui/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 220);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var symbol_observable_1 = __webpack_require__(144);
var NO = {};
exports.NO = NO;
function noop() { }
function cp(a) {
    var l = a.length;
    var b = Array(l);
    for (var i = 0; i < l; ++i)
        b[i] = a[i];
    return b;
}
function and(f1, f2) {
    return function andFn(t) {
        return f1(t) && f2(t);
    };
}
function _try(c, t, u) {
    try {
        return c.f(t);
    }
    catch (e) {
        u._e(e);
        return NO;
    }
}
var NO_IL = {
    _n: noop,
    _e: noop,
    _c: noop,
};
exports.NO_IL = NO_IL;
// mutates the input
function internalizeProducer(producer) {
    producer._start = function _start(il) {
        il.next = il._n;
        il.error = il._e;
        il.complete = il._c;
        this.start(il);
    };
    producer._stop = producer.stop;
}
var StreamSub = (function () {
    function StreamSub(_stream, _listener) {
        this._stream = _stream;
        this._listener = _listener;
    }
    StreamSub.prototype.unsubscribe = function () {
        this._stream.removeListener(this._listener);
    };
    return StreamSub;
}());
var Observer = (function () {
    function Observer(_listener) {
        this._listener = _listener;
    }
    Observer.prototype.next = function (value) {
        this._listener._n(value);
    };
    Observer.prototype.error = function (err) {
        this._listener._e(err);
    };
    Observer.prototype.complete = function () {
        this._listener._c();
    };
    return Observer;
}());
var FromObservable = (function () {
    function FromObservable(observable) {
        this.type = 'fromObservable';
        this.ins = observable;
        this.active = false;
    }
    FromObservable.prototype._start = function (out) {
        this.out = out;
        this.active = true;
        this._sub = this.ins.subscribe(new Observer(out));
        if (!this.active)
            this._sub.unsubscribe();
    };
    FromObservable.prototype._stop = function () {
        if (this._sub)
            this._sub.unsubscribe();
        this.active = false;
    };
    return FromObservable;
}());
var Merge = (function () {
    function Merge(insArr) {
        this.type = 'merge';
        this.insArr = insArr;
        this.out = NO;
        this.ac = 0;
    }
    Merge.prototype._start = function (out) {
        this.out = out;
        var s = this.insArr;
        var L = s.length;
        this.ac = L;
        for (var i = 0; i < L; i++)
            s[i]._add(this);
    };
    Merge.prototype._stop = function () {
        var s = this.insArr;
        var L = s.length;
        for (var i = 0; i < L; i++)
            s[i]._remove(this);
        this.out = NO;
    };
    Merge.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    Merge.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Merge.prototype._c = function () {
        if (--this.ac <= 0) {
            var u = this.out;
            if (u === NO)
                return;
            u._c();
        }
    };
    return Merge;
}());
var CombineListener = (function () {
    function CombineListener(i, out, p) {
        this.i = i;
        this.out = out;
        this.p = p;
        p.ils.push(this);
    }
    CombineListener.prototype._n = function (t) {
        var p = this.p, out = this.out;
        if (out === NO)
            return;
        if (p.up(t, this.i))
            out._n(p.vals);
    };
    CombineListener.prototype._e = function (err) {
        var out = this.out;
        if (out === NO)
            return;
        out._e(err);
    };
    CombineListener.prototype._c = function () {
        var p = this.p;
        if (p.out === NO)
            return;
        if (--p.Nc === 0)
            p.out._c();
    };
    return CombineListener;
}());
var Combine = (function () {
    function Combine(insArr) {
        this.type = 'combine';
        this.insArr = insArr;
        this.out = NO;
        this.ils = [];
        this.Nc = this.Nn = 0;
        this.vals = [];
    }
    Combine.prototype.up = function (t, i) {
        var v = this.vals[i];
        var Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;
        this.vals[i] = t;
        return Nn === 0;
    };
    Combine.prototype._start = function (out) {
        this.out = out;
        var s = this.insArr;
        var n = this.Nc = this.Nn = s.length;
        var vals = this.vals = new Array(n);
        if (n === 0) {
            out._n([]);
            out._c();
        }
        else {
            for (var i = 0; i < n; i++) {
                vals[i] = NO;
                s[i]._add(new CombineListener(i, out, this));
            }
        }
    };
    Combine.prototype._stop = function () {
        var s = this.insArr;
        var n = s.length;
        var ils = this.ils;
        for (var i = 0; i < n; i++)
            s[i]._remove(ils[i]);
        this.out = NO;
        this.ils = [];
        this.vals = [];
    };
    return Combine;
}());
var FromArray = (function () {
    function FromArray(a) {
        this.type = 'fromArray';
        this.a = a;
    }
    FromArray.prototype._start = function (out) {
        var a = this.a;
        for (var i = 0, n = a.length; i < n; i++)
            out._n(a[i]);
        out._c();
    };
    FromArray.prototype._stop = function () {
    };
    return FromArray;
}());
var FromPromise = (function () {
    function FromPromise(p) {
        this.type = 'fromPromise';
        this.on = false;
        this.p = p;
    }
    FromPromise.prototype._start = function (out) {
        var prod = this;
        this.on = true;
        this.p.then(function (v) {
            if (prod.on) {
                out._n(v);
                out._c();
            }
        }, function (e) {
            out._e(e);
        }).then(noop, function (err) {
            setTimeout(function () { throw err; });
        });
    };
    FromPromise.prototype._stop = function () {
        this.on = false;
    };
    return FromPromise;
}());
var Periodic = (function () {
    function Periodic(period) {
        this.type = 'periodic';
        this.period = period;
        this.intervalID = -1;
        this.i = 0;
    }
    Periodic.prototype._start = function (out) {
        var self = this;
        function intervalHandler() { out._n(self.i++); }
        this.intervalID = setInterval(intervalHandler, this.period);
    };
    Periodic.prototype._stop = function () {
        if (this.intervalID !== -1)
            clearInterval(this.intervalID);
        this.intervalID = -1;
        this.i = 0;
    };
    return Periodic;
}());
var Debug = (function () {
    function Debug(ins, arg) {
        this.type = 'debug';
        this.ins = ins;
        this.out = NO;
        this.s = noop;
        this.l = '';
        if (typeof arg === 'string')
            this.l = arg;
        else if (typeof arg === 'function')
            this.s = arg;
    }
    Debug.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    Debug.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Debug.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var s = this.s, l = this.l;
        if (s !== noop) {
            try {
                s(t);
            }
            catch (e) {
                u._e(e);
            }
        }
        else if (l)
            console.log(l + ':', t);
        else
            console.log(t);
        u._n(t);
    };
    Debug.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Debug.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Debug;
}());
var Drop = (function () {
    function Drop(max, ins) {
        this.type = 'drop';
        this.ins = ins;
        this.out = NO;
        this.max = max;
        this.dropped = 0;
    }
    Drop.prototype._start = function (out) {
        this.out = out;
        this.dropped = 0;
        this.ins._add(this);
    };
    Drop.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Drop.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        if (this.dropped++ >= this.max)
            u._n(t);
    };
    Drop.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Drop.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Drop;
}());
var EndWhenListener = (function () {
    function EndWhenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    EndWhenListener.prototype._n = function () {
        this.op.end();
    };
    EndWhenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    EndWhenListener.prototype._c = function () {
        this.op.end();
    };
    return EndWhenListener;
}());
var EndWhen = (function () {
    function EndWhen(o, ins) {
        this.type = 'endWhen';
        this.ins = ins;
        this.out = NO;
        this.o = o;
        this.oil = NO_IL;
    }
    EndWhen.prototype._start = function (out) {
        this.out = out;
        this.o._add(this.oil = new EndWhenListener(out, this));
        this.ins._add(this);
    };
    EndWhen.prototype._stop = function () {
        this.ins._remove(this);
        this.o._remove(this.oil);
        this.out = NO;
        this.oil = NO_IL;
    };
    EndWhen.prototype.end = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    EndWhen.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    EndWhen.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    EndWhen.prototype._c = function () {
        this.end();
    };
    return EndWhen;
}());
var Filter = (function () {
    function Filter(passes, ins) {
        this.type = 'filter';
        this.ins = ins;
        this.out = NO;
        this.f = passes;
    }
    Filter.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    Filter.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Filter.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO || !r)
            return;
        u._n(t);
    };
    Filter.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Filter.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Filter;
}());
var FlattenListener = (function () {
    function FlattenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    FlattenListener.prototype._n = function (t) {
        this.out._n(t);
    };
    FlattenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    FlattenListener.prototype._c = function () {
        this.op.inner = NO;
        this.op.less();
    };
    return FlattenListener;
}());
var Flatten = (function () {
    function Flatten(ins) {
        this.type = 'flatten';
        this.ins = ins;
        this.out = NO;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
    }
    Flatten.prototype._start = function (out) {
        this.out = out;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
        this.ins._add(this);
    };
    Flatten.prototype._stop = function () {
        this.ins._remove(this);
        if (this.inner !== NO)
            this.inner._remove(this.il);
        this.out = NO;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
    };
    Flatten.prototype.less = function () {
        var u = this.out;
        if (u === NO)
            return;
        if (!this.open && this.inner === NO)
            u._c();
    };
    Flatten.prototype._n = function (s) {
        var u = this.out;
        if (u === NO)
            return;
        var _a = this, inner = _a.inner, il = _a.il;
        if (inner !== NO && il !== NO_IL)
            inner._remove(il);
        (this.inner = s)._add(this.il = new FlattenListener(u, this));
    };
    Flatten.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Flatten.prototype._c = function () {
        this.open = false;
        this.less();
    };
    return Flatten;
}());
var Fold = (function () {
    function Fold(f, seed, ins) {
        var _this = this;
        this.type = 'fold';
        this.ins = ins;
        this.out = NO;
        this.f = function (t) { return f(_this.acc, t); };
        this.acc = this.seed = seed;
    }
    Fold.prototype._start = function (out) {
        this.out = out;
        this.acc = this.seed;
        out._n(this.acc);
        this.ins._add(this);
    };
    Fold.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
        this.acc = this.seed;
    };
    Fold.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(this.acc = r);
    };
    Fold.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Fold.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Fold;
}());
var Last = (function () {
    function Last(ins) {
        this.type = 'last';
        this.ins = ins;
        this.out = NO;
        this.has = false;
        this.val = NO;
    }
    Last.prototype._start = function (out) {
        this.out = out;
        this.has = false;
        this.ins._add(this);
    };
    Last.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
        this.val = NO;
    };
    Last.prototype._n = function (t) {
        this.has = true;
        this.val = t;
    };
    Last.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Last.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        if (this.has) {
            u._n(this.val);
            u._c();
        }
        else
            u._e(new Error('last() failed because input stream completed'));
    };
    return Last;
}());
var MapFlattenListener = (function () {
    function MapFlattenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    MapFlattenListener.prototype._n = function (r) {
        this.out._n(r);
    };
    MapFlattenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    MapFlattenListener.prototype._c = function () {
        this.op.inner = NO;
        this.op.less();
    };
    return MapFlattenListener;
}());
var MapFlatten = (function () {
    function MapFlatten(mapOp) {
        this.type = mapOp.type + "+flatten";
        this.ins = mapOp.ins;
        this.out = NO;
        this.mapOp = mapOp;
        this.inner = NO;
        this.il = NO_IL;
        this.open = true;
    }
    MapFlatten.prototype._start = function (out) {
        this.out = out;
        this.inner = NO;
        this.il = NO_IL;
        this.open = true;
        this.mapOp.ins._add(this);
    };
    MapFlatten.prototype._stop = function () {
        this.mapOp.ins._remove(this);
        if (this.inner !== NO)
            this.inner._remove(this.il);
        this.out = NO;
        this.inner = NO;
        this.il = NO_IL;
    };
    MapFlatten.prototype.less = function () {
        if (!this.open && this.inner === NO) {
            var u = this.out;
            if (u === NO)
                return;
            u._c();
        }
    };
    MapFlatten.prototype._n = function (v) {
        var u = this.out;
        if (u === NO)
            return;
        var _a = this, inner = _a.inner, il = _a.il;
        var s = _try(this.mapOp, v, u);
        if (s === NO)
            return;
        if (inner !== NO && il !== NO_IL)
            inner._remove(il);
        (this.inner = s)._add(this.il = new MapFlattenListener(u, this));
    };
    MapFlatten.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    MapFlatten.prototype._c = function () {
        this.open = false;
        this.less();
    };
    return MapFlatten;
}());
var MapOp = (function () {
    function MapOp(project, ins) {
        this.type = 'map';
        this.ins = ins;
        this.out = NO;
        this.f = project;
    }
    MapOp.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    MapOp.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    MapOp.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(r);
    };
    MapOp.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    MapOp.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return MapOp;
}());
var FilterMapFusion = (function (_super) {
    __extends(FilterMapFusion, _super);
    function FilterMapFusion(passes, project, ins) {
        var _this = _super.call(this, project, ins) || this;
        _this.type = 'filter+map';
        _this.passes = passes;
        return _this;
    }
    FilterMapFusion.prototype._n = function (t) {
        if (!this.passes(t))
            return;
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(r);
    };
    return FilterMapFusion;
}(MapOp));
var Remember = (function () {
    function Remember(ins) {
        this.type = 'remember';
        this.ins = ins;
        this.out = NO;
    }
    Remember.prototype._start = function (out) {
        this.out = out;
        this.ins._add(out);
    };
    Remember.prototype._stop = function () {
        this.ins._remove(this.out);
        this.out = NO;
    };
    return Remember;
}());
var ReplaceError = (function () {
    function ReplaceError(replacer, ins) {
        this.type = 'replaceError';
        this.ins = ins;
        this.out = NO;
        this.f = replacer;
    }
    ReplaceError.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    ReplaceError.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    ReplaceError.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    ReplaceError.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        try {
            this.ins._remove(this);
            (this.ins = this.f(err))._add(this);
        }
        catch (e) {
            u._e(e);
        }
    };
    ReplaceError.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return ReplaceError;
}());
var StartWith = (function () {
    function StartWith(ins, val) {
        this.type = 'startWith';
        this.ins = ins;
        this.out = NO;
        this.val = val;
    }
    StartWith.prototype._start = function (out) {
        this.out = out;
        this.out._n(this.val);
        this.ins._add(out);
    };
    StartWith.prototype._stop = function () {
        this.ins._remove(this.out);
        this.out = NO;
    };
    return StartWith;
}());
var Take = (function () {
    function Take(max, ins) {
        this.type = 'take';
        this.ins = ins;
        this.out = NO;
        this.max = max;
        this.taken = 0;
    }
    Take.prototype._start = function (out) {
        this.out = out;
        this.taken = 0;
        if (this.max <= 0)
            out._c();
        else
            this.ins._add(this);
    };
    Take.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Take.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var m = ++this.taken;
        if (m < this.max)
            u._n(t);
        else if (m === this.max) {
            u._n(t);
            u._c();
        }
    };
    Take.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Take.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Take;
}());
var Stream = (function () {
    function Stream(producer) {
        this._prod = producer || NO;
        this._ils = [];
        this._stopID = NO;
        this._dl = NO;
        this._d = false;
        this._target = NO;
        this._err = NO;
    }
    Stream.prototype._n = function (t) {
        var a = this._ils;
        var L = a.length;
        if (this._d)
            this._dl._n(t);
        if (L == 1)
            a[0]._n(t);
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._n(t);
        }
    };
    Stream.prototype._e = function (err) {
        if (this._err !== NO)
            return;
        this._err = err;
        var a = this._ils;
        var L = a.length;
        this._x();
        if (this._d)
            this._dl._e(err);
        if (L == 1)
            a[0]._e(err);
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._e(err);
        }
        if (!this._d && L == 0)
            throw this._err;
    };
    Stream.prototype._c = function () {
        var a = this._ils;
        var L = a.length;
        this._x();
        if (this._d)
            this._dl._c();
        if (L == 1)
            a[0]._c();
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._c();
        }
    };
    Stream.prototype._x = function () {
        if (this._ils.length === 0)
            return;
        if (this._prod !== NO)
            this._prod._stop();
        this._err = NO;
        this._ils = [];
    };
    Stream.prototype._stopNow = function () {
        // WARNING: code that calls this method should
        // first check if this._prod is valid (not `NO`)
        this._prod._stop();
        this._err = NO;
        this._stopID = NO;
    };
    Stream.prototype._add = function (il) {
        var ta = this._target;
        if (ta !== NO)
            return ta._add(il);
        var a = this._ils;
        a.push(il);
        if (a.length > 1)
            return;
        if (this._stopID !== NO) {
            clearTimeout(this._stopID);
            this._stopID = NO;
        }
        else {
            var p = this._prod;
            if (p !== NO)
                p._start(this);
        }
    };
    Stream.prototype._remove = function (il) {
        var _this = this;
        var ta = this._target;
        if (ta !== NO)
            return ta._remove(il);
        var a = this._ils;
        var i = a.indexOf(il);
        if (i > -1) {
            a.splice(i, 1);
            if (this._prod !== NO && a.length <= 0) {
                this._err = NO;
                this._stopID = setTimeout(function () { return _this._stopNow(); });
            }
            else if (a.length === 1) {
                this._pruneCycles();
            }
        }
    };
    // If all paths stemming from `this` stream eventually end at `this`
    // stream, then we remove the single listener of `this` stream, to
    // force it to end its execution and dispose resources. This method
    // assumes as a precondition that this._ils has just one listener.
    Stream.prototype._pruneCycles = function () {
        if (this._hasNoSinks(this, []))
            this._remove(this._ils[0]);
    };
    // Checks whether *there is no* path starting from `x` that leads to an end
    // listener (sink) in the stream graph, following edges A->B where B is a
    // listener of A. This means these paths constitute a cycle somehow. Is given
    // a trace of all visited nodes so far.
    Stream.prototype._hasNoSinks = function (x, trace) {
        if (trace.indexOf(x) !== -1)
            return true;
        else if (x.out === this)
            return true;
        else if (x.out && x.out !== NO)
            return this._hasNoSinks(x.out, trace.concat(x));
        else if (x._ils) {
            for (var i = 0, N = x._ils.length; i < N; i++)
                if (!this._hasNoSinks(x._ils[i], trace.concat(x)))
                    return false;
            return true;
        }
        else
            return false;
    };
    Stream.prototype.ctor = function () {
        return this instanceof MemoryStream ? MemoryStream : Stream;
    };
    /**
     * Adds a Listener to the Stream.
     *
     * @param {Listener} listener
     */
    Stream.prototype.addListener = function (listener) {
        listener._n = listener.next || noop;
        listener._e = listener.error || noop;
        listener._c = listener.complete || noop;
        this._add(listener);
    };
    /**
     * Removes a Listener from the Stream, assuming the Listener was added to it.
     *
     * @param {Listener<T>} listener
     */
    Stream.prototype.removeListener = function (listener) {
        this._remove(listener);
    };
    /**
     * Adds a Listener to the Stream returning a Subscription to remove that
     * listener.
     *
     * @param {Listener} listener
     * @returns {Subscription}
     */
    Stream.prototype.subscribe = function (listener) {
        this.addListener(listener);
        return new StreamSub(this, listener);
    };
    /**
     * Add interop between most.js and RxJS 5
     *
     * @returns {Stream}
     */
    Stream.prototype[symbol_observable_1.default] = function () {
        return this;
    };
    /**
     * Creates a new Stream given a Producer.
     *
     * @factory true
     * @param {Producer} producer An optional Producer that dictates how to
     * start, generate events, and stop the Stream.
     * @return {Stream}
     */
    Stream.create = function (producer) {
        if (producer) {
            if (typeof producer.start !== 'function'
                || typeof producer.stop !== 'function')
                throw new Error('producer requires both start and stop functions');
            internalizeProducer(producer); // mutates the input
        }
        return new Stream(producer);
    };
    /**
     * Creates a new MemoryStream given a Producer.
     *
     * @factory true
     * @param {Producer} producer An optional Producer that dictates how to
     * start, generate events, and stop the Stream.
     * @return {MemoryStream}
     */
    Stream.createWithMemory = function (producer) {
        if (producer)
            internalizeProducer(producer); // mutates the input
        return new MemoryStream(producer);
    };
    /**
     * Creates a Stream that does nothing when started. It never emits any event.
     *
     * Marble diagram:
     *
     * ```text
     *          never
     * -----------------------
     * ```
     *
     * @factory true
     * @return {Stream}
     */
    Stream.never = function () {
        return new Stream({ _start: noop, _stop: noop });
    };
    /**
     * Creates a Stream that immediately emits the "complete" notification when
     * started, and that's it.
     *
     * Marble diagram:
     *
     * ```text
     * empty
     * -|
     * ```
     *
     * @factory true
     * @return {Stream}
     */
    Stream.empty = function () {
        return new Stream({
            _start: function (il) { il._c(); },
            _stop: noop,
        });
    };
    /**
     * Creates a Stream that immediately emits an "error" notification with the
     * value you passed as the `error` argument when the stream starts, and that's
     * it.
     *
     * Marble diagram:
     *
     * ```text
     * throw(X)
     * -X
     * ```
     *
     * @factory true
     * @param error The error event to emit on the created stream.
     * @return {Stream}
     */
    Stream.throw = function (error) {
        return new Stream({
            _start: function (il) { il._e(error); },
            _stop: noop,
        });
    };
    /**
     * Creates a stream from an Array, Promise, or an Observable.
     *
     * @factory true
     * @param {Array|Promise|Observable} input The input to make a stream from.
     * @return {Stream}
     */
    Stream.from = function (input) {
        if (typeof input[symbol_observable_1.default] === 'function')
            return Stream.fromObservable(input);
        else if (typeof input.then === 'function')
            return Stream.fromPromise(input);
        else if (Array.isArray(input))
            return Stream.fromArray(input);
        throw new TypeError("Type of input to from() must be an Array, Promise, or Observable");
    };
    /**
     * Creates a Stream that immediately emits the arguments that you give to
     * *of*, then completes.
     *
     * Marble diagram:
     *
     * ```text
     * of(1,2,3)
     * 123|
     * ```
     *
     * @factory true
     * @param a The first value you want to emit as an event on the stream.
     * @param b The second value you want to emit as an event on the stream. One
     * or more of these values may be given as arguments.
     * @return {Stream}
     */
    Stream.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return Stream.fromArray(items);
    };
    /**
     * Converts an array to a stream. The returned stream will emit synchronously
     * all the items in the array, and then complete.
     *
     * Marble diagram:
     *
     * ```text
     * fromArray([1,2,3])
     * 123|
     * ```
     *
     * @factory true
     * @param {Array} array The array to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromArray = function (array) {
        return new Stream(new FromArray(array));
    };
    /**
     * Converts a promise to a stream. The returned stream will emit the resolved
     * value of the promise, and then complete. However, if the promise is
     * rejected, the stream will emit the corresponding error.
     *
     * Marble diagram:
     *
     * ```text
     * fromPromise( ----42 )
     * -----------------42|
     * ```
     *
     * @factory true
     * @param {Promise} promise The promise to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromPromise = function (promise) {
        return new Stream(new FromPromise(promise));
    };
    /**
     * Converts an Observable into a Stream.
     *
     * @factory true
     * @param {any} observable The observable to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromObservable = function (obs) {
        if (obs.endWhen)
            return obs;
        return new Stream(new FromObservable(obs));
    };
    /**
     * Creates a stream that periodically emits incremental numbers, every
     * `period` milliseconds.
     *
     * Marble diagram:
     *
     * ```text
     *     periodic(1000)
     * ---0---1---2---3---4---...
     * ```
     *
     * @factory true
     * @param {number} period The interval in milliseconds to use as a rate of
     * emission.
     * @return {Stream}
     */
    Stream.periodic = function (period) {
        return new Stream(new Periodic(period));
    };
    Stream.prototype._map = function (project) {
        var p = this._prod;
        var ctor = this.ctor();
        if (p instanceof Filter)
            return new ctor(new FilterMapFusion(p.f, project, p.ins));
        return new ctor(new MapOp(project, this));
    };
    /**
     * Transforms each event from the input Stream through a `project` function,
     * to get a Stream that emits those transformed events.
     *
     * Marble diagram:
     *
     * ```text
     * --1---3--5-----7------
     *    map(i => i * 10)
     * --10--30-50----70-----
     * ```
     *
     * @param {Function} project A function of type `(t: T) => U` that takes event
     * `t` of type `T` from the input Stream and produces an event of type `U`, to
     * be emitted on the output Stream.
     * @return {Stream}
     */
    Stream.prototype.map = function (project) {
        return this._map(project);
    };
    /**
     * It's like `map`, but transforms each input event to always the same
     * constant value on the output Stream.
     *
     * Marble diagram:
     *
     * ```text
     * --1---3--5-----7-----
     *       mapTo(10)
     * --10--10-10----10----
     * ```
     *
     * @param projectedValue A value to emit on the output Stream whenever the
     * input Stream emits any value.
     * @return {Stream}
     */
    Stream.prototype.mapTo = function (projectedValue) {
        var s = this.map(function () { return projectedValue; });
        var op = s._prod;
        op.type = op.type.replace('map', 'mapTo');
        return s;
    };
    /**
     * Only allows events that pass the test given by the `passes` argument.
     *
     * Each event from the input stream is given to the `passes` function. If the
     * function returns `true`, the event is forwarded to the output stream,
     * otherwise it is ignored and not forwarded.
     *
     * Marble diagram:
     *
     * ```text
     * --1---2--3-----4-----5---6--7-8--
     *     filter(i => i % 2 === 0)
     * ------2--------4---------6----8--
     * ```
     *
     * @param {Function} passes A function of type `(t: T) +> boolean` that takes
     * an event from the input stream and checks if it passes, by returning a
     * boolean.
     * @return {Stream}
     */
    Stream.prototype.filter = function (passes) {
        var p = this._prod;
        if (p instanceof Filter)
            return new Stream(new Filter(and(p.f, passes), p.ins));
        return new Stream(new Filter(passes, this));
    };
    /**
     * Lets the first `amount` many events from the input stream pass to the
     * output stream, then makes the output stream complete.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c----d---e--
     *    take(3)
     * --a---b--c|
     * ```
     *
     * @param {number} amount How many events to allow from the input stream
     * before completing the output stream.
     * @return {Stream}
     */
    Stream.prototype.take = function (amount) {
        return new (this.ctor())(new Take(amount, this));
    };
    /**
     * Ignores the first `amount` many events from the input stream, and then
     * after that starts forwarding events from the input stream to the output
     * stream.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c----d---e--
     *       drop(3)
     * --------------d---e--
     * ```
     *
     * @param {number} amount How many events to ignore from the input stream
     * before forwarding all events from the input stream to the output stream.
     * @return {Stream}
     */
    Stream.prototype.drop = function (amount) {
        return new Stream(new Drop(amount, this));
    };
    /**
     * When the input stream completes, the output stream will emit the last event
     * emitted by the input stream, and then will also complete.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c--d----|
     *       last()
     * -----------------d|
     * ```
     *
     * @return {Stream}
     */
    Stream.prototype.last = function () {
        return new Stream(new Last(this));
    };
    /**
     * Prepends the given `initial` value to the sequence of events emitted by the
     * input stream. The returned stream is a MemoryStream, which means it is
     * already `remember()`'d.
     *
     * Marble diagram:
     *
     * ```text
     * ---1---2-----3---
     *   startWith(0)
     * 0--1---2-----3---
     * ```
     *
     * @param initial The value or event to prepend.
     * @return {MemoryStream}
     */
    Stream.prototype.startWith = function (initial) {
        return new MemoryStream(new StartWith(this, initial));
    };
    /**
     * Uses another stream to determine when to complete the current stream.
     *
     * When the given `other` stream emits an event or completes, the output
     * stream will complete. Before that happens, the output stream will behaves
     * like the input stream.
     *
     * Marble diagram:
     *
     * ```text
     * ---1---2-----3--4----5----6---
     *   endWhen( --------a--b--| )
     * ---1---2-----3--4--|
     * ```
     *
     * @param other Some other stream that is used to know when should the output
     * stream of this operator complete.
     * @return {Stream}
     */
    Stream.prototype.endWhen = function (other) {
        return new (this.ctor())(new EndWhen(other, this));
    };
    /**
     * "Folds" the stream onto itself.
     *
     * Combines events from the past throughout
     * the entire execution of the input stream, allowing you to accumulate them
     * together. It's essentially like `Array.prototype.reduce`. The returned
     * stream is a MemoryStream, which means it is already `remember()`'d.
     *
     * The output stream starts by emitting the `seed` which you give as argument.
     * Then, when an event happens on the input stream, it is combined with that
     * seed value through the `accumulate` function, and the output value is
     * emitted on the output stream. `fold` remembers that output value as `acc`
     * ("accumulator"), and then when a new input event `t` happens, `acc` will be
     * combined with that to produce the new `acc` and so forth.
     *
     * Marble diagram:
     *
     * ```text
     * ------1-----1--2----1----1------
     *   fold((acc, x) => acc + x, 3)
     * 3-----4-----5--7----8----9------
     * ```
     *
     * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that
     * takes the previous accumulated value `acc` and the incoming event from the
     * input stream and produces the new accumulated value.
     * @param seed The initial accumulated value, of type `R`.
     * @return {MemoryStream}
     */
    Stream.prototype.fold = function (accumulate, seed) {
        return new MemoryStream(new Fold(accumulate, seed, this));
    };
    /**
     * Replaces an error with another stream.
     *
     * When (and if) an error happens on the input stream, instead of forwarding
     * that error to the output stream, *replaceError* will call the `replace`
     * function which returns the stream that the output stream will replicate.
     * And, in case that new stream also emits an error, `replace` will be called
     * again to get another stream to start replicating.
     *
     * Marble diagram:
     *
     * ```text
     * --1---2-----3--4-----X
     *   replaceError( () => --10--| )
     * --1---2-----3--4--------10--|
     * ```
     *
     * @param {Function} replace A function of type `(err) => Stream` that takes
     * the error that occurred on the input stream or on the previous replacement
     * stream and returns a new stream. The output stream will behave like the
     * stream that this function returns.
     * @return {Stream}
     */
    Stream.prototype.replaceError = function (replace) {
        return new (this.ctor())(new ReplaceError(replace, this));
    };
    /**
     * Flattens a "stream of streams", handling only one nested stream at a time
     * (no concurrency).
     *
     * If the input stream is a stream that emits streams, then this operator will
     * return an output stream which is a flat stream: emits regular events. The
     * flattening happens without concurrency. It works like this: when the input
     * stream emits a nested stream, *flatten* will start imitating that nested
     * one. However, as soon as the next nested stream is emitted on the input
     * stream, *flatten* will forget the previous nested one it was imitating, and
     * will start imitating the new nested one.
     *
     * Marble diagram:
     *
     * ```text
     * --+--------+---------------
     *   \        \
     *    \       ----1----2---3--
     *    --a--b----c----d--------
     *           flatten
     * -----a--b------1----2---3--
     * ```
     *
     * @return {Stream}
     */
    Stream.prototype.flatten = function () {
        var p = this._prod;
        return new Stream(p instanceof MapOp && !(p instanceof FilterMapFusion) ?
            new MapFlatten(p) :
            new Flatten(this));
    };
    /**
     * Passes the input stream to a custom operator, to produce an output stream.
     *
     * *compose* is a handy way of using an existing function in a chained style.
     * Instead of writing `outStream = f(inStream)` you can write
     * `outStream = inStream.compose(f)`.
     *
     * @param {function} operator A function that takes a stream as input and
     * returns a stream as well.
     * @return {Stream}
     */
    Stream.prototype.compose = function (operator) {
        return operator(this);
    };
    /**
     * Returns an output stream that behaves like the input stream, but also
     * remembers the most recent event that happens on the input stream, so that a
     * newly added listener will immediately receive that memorised event.
     *
     * @return {MemoryStream}
     */
    Stream.prototype.remember = function () {
        return new MemoryStream(new Remember(this));
    };
    /**
     * Returns an output stream that identically behaves like the input stream,
     * but also runs a `spy` function fo each event, to help you debug your app.
     *
     * *debug* takes a `spy` function as argument, and runs that for each event
     * happening on the input stream. If you don't provide the `spy` argument,
     * then *debug* will just `console.log` each event. This helps you to
     * understand the flow of events through some operator chain.
     *
     * Please note that if the output stream has no listeners, then it will not
     * start, which means `spy` will never run because no actual event happens in
     * that case.
     *
     * Marble diagram:
     *
     * ```text
     * --1----2-----3-----4--
     *         debug
     * --1----2-----3-----4--
     * ```
     *
     * @param {function} labelOrSpy A string to use as the label when printing
     * debug information on the console, or a 'spy' function that takes an event
     * as argument, and does not need to return anything.
     * @return {Stream}
     */
    Stream.prototype.debug = function (labelOrSpy) {
        return new (this.ctor())(new Debug(this, labelOrSpy));
    };
    /**
     * *imitate* changes this current Stream to emit the same events that the
     * `other` given Stream does. This method returns nothing.
     *
     * This method exists to allow one thing: **circular dependency of streams**.
     * For instance, let's imagine that for some reason you need to create a
     * circular dependency where stream `first$` depends on stream `second$`
     * which in turn depends on `first$`:
     *
     * <!-- skip-example -->
     * ```js
     * import delay from 'xstream/extra/delay'
     *
     * var first$ = second$.map(x => x * 10).take(3);
     * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));
     * ```
     *
     * However, that is invalid JavaScript, because `second$` is undefined
     * on the first line. This is how *imitate* can help solve it:
     *
     * ```js
     * import delay from 'xstream/extra/delay'
     *
     * var secondProxy$ = xs.create();
     * var first$ = secondProxy$.map(x => x * 10).take(3);
     * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));
     * secondProxy$.imitate(second$);
     * ```
     *
     * We create `secondProxy$` before the others, so it can be used in the
     * declaration of `first$`. Then, after both `first$` and `second$` are
     * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell
     * that they are "the same". `imitate` will not trigger the start of any
     * stream, it just binds `secondProxy$` and `second$` together.
     *
     * The following is an example where `imitate()` is important in Cycle.js
     * applications. A parent component contains some child components. A child
     * has an action stream which is given to the parent to define its state:
     *
     * <!-- skip-example -->
     * ```js
     * const childActionProxy$ = xs.create();
     * const parent = Parent({...sources, childAction$: childActionProxy$});
     * const childAction$ = parent.state$.map(s => s.child.action$).flatten();
     * childActionProxy$.imitate(childAction$);
     * ```
     *
     * Note, though, that **`imitate()` does not support MemoryStreams**. If we
     * would attempt to imitate a MemoryStream in a circular dependency, we would
     * either get a race condition (where the symptom would be "nothing happens")
     * or an infinite cyclic emission of values. It's useful to think about
     * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to
     * define a spreadsheet cell `A1` with a formula that depends on `B1` and
     * cell `B1` defined with a formula that depends on `A1`.
     *
     * If you find yourself wanting to use `imitate()` with a
     * MemoryStream, you should rework your code around `imitate()` to use a
     * Stream instead. Look for the stream in the circular dependency that
     * represents an event stream, and that would be a candidate for creating a
     * proxy Stream which then imitates the target Stream.
     *
     * @param {Stream} target The other stream to imitate on the current one. Must
     * not be a MemoryStream.
     */
    Stream.prototype.imitate = function (target) {
        if (target instanceof MemoryStream)
            throw new Error('A MemoryStream was given to imitate(), but it only ' +
                'supports a Stream. Read more about this restriction here: ' +
                'https://github.com/staltz/xstream#faq');
        this._target = target;
        for (var ils = this._ils, N = ils.length, i = 0; i < N; i++)
            target._add(ils[i]);
        this._ils = [];
    };
    /**
     * Forces the Stream to emit the given value to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     *
     * @param value The "next" value you want to broadcast to all listeners of
     * this Stream.
     */
    Stream.prototype.shamefullySendNext = function (value) {
        this._n(value);
    };
    /**
     * Forces the Stream to emit the given error to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     *
     * @param {any} error The error you want to broadcast to all the listeners of
     * this Stream.
     */
    Stream.prototype.shamefullySendError = function (error) {
        this._e(error);
    };
    /**
     * Forces the Stream to emit the "completed" event to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     */
    Stream.prototype.shamefullySendComplete = function () {
        this._c();
    };
    /**
     * Adds a "debug" listener to the stream. There can only be one debug
     * listener, that's why this is 'setDebugListener'. To remove the debug
     * listener, just call setDebugListener(null).
     *
     * A debug listener is like any other listener. The only difference is that a
     * debug listener is "stealthy": its presence/absence does not trigger the
     * start/stop of the stream (or the producer inside the stream). This is
     * useful so you can inspect what is going on without changing the behavior
     * of the program. If you have an idle stream and you add a normal listener to
     * it, the stream will start executing. But if you set a debug listener on an
     * idle stream, it won't start executing (not until the first normal listener
     * is added).
     *
     * As the name indicates, we don't recommend using this method to build app
     * logic. In fact, in most cases the debug operator works just fine. Only use
     * this one if you know what you're doing.
     *
     * @param {Listener<T>} listener
     */
    Stream.prototype.setDebugListener = function (listener) {
        if (!listener) {
            this._d = false;
            this._dl = NO;
        }
        else {
            this._d = true;
            listener._n = listener.next || noop;
            listener._e = listener.error || noop;
            listener._c = listener.complete || noop;
            this._dl = listener;
        }
    };
    return Stream;
}());
/**
 * Blends multiple streams together, emitting events from all of them
 * concurrently.
 *
 * *merge* takes multiple streams as arguments, and creates a stream that
 * behaves like each of the argument streams, in parallel.
 *
 * Marble diagram:
 *
 * ```text
 * --1----2-----3--------4---
 * ----a-----b----c---d------
 *            merge
 * --1-a--2--b--3-c---d--4---
 * ```
 *
 * @factory true
 * @param {Stream} stream1 A stream to merge together with other streams.
 * @param {Stream} stream2 A stream to merge together with other streams. Two
 * or more streams may be given as arguments.
 * @return {Stream}
 */
Stream.merge = function merge() {
    var streams = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        streams[_i] = arguments[_i];
    }
    return new Stream(new Merge(streams));
};
/**
 * Combines multiple input streams together to return a stream whose events
 * are arrays that collect the latest events from each input stream.
 *
 * *combine* internally remembers the most recent event from each of the input
 * streams. When any of the input streams emits an event, that event together
 * with all the other saved events are combined into an array. That array will
 * be emitted on the output stream. It's essentially a way of joining together
 * the events from multiple streams.
 *
 * Marble diagram:
 *
 * ```text
 * --1----2-----3--------4---
 * ----a-----b-----c--d------
 *          combine
 * ----1a-2a-2b-3b-3c-3d-4d--
 * ```
 *
 * Note: to minimize garbage collection, *combine* uses the same array
 * instance for each emission.  If you need to compare emissions over time,
 * cache the values with `map` first:
 *
 * ```js
 * import pairwise from 'xstream/extra/pairwise'
 *
 * const stream1 = xs.of(1);
 * const stream2 = xs.of(2);
 *
 * xs.combine(stream1, stream2).map(
 *   combinedEmissions => ([ ...combinedEmissions ])
 * ).compose(pairwise)
 * ```
 *
 * @factory true
 * @param {Stream} stream1 A stream to combine together with other streams.
 * @param {Stream} stream2 A stream to combine together with other streams.
 * Multiple streams, not just two, may be given as arguments.
 * @return {Stream}
 */
Stream.combine = function combine() {
    var streams = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        streams[_i] = arguments[_i];
    }
    return new Stream(new Combine(streams));
};
exports.Stream = Stream;
var MemoryStream = (function (_super) {
    __extends(MemoryStream, _super);
    function MemoryStream(producer) {
        var _this = _super.call(this, producer) || this;
        _this._has = false;
        return _this;
    }
    MemoryStream.prototype._n = function (x) {
        this._v = x;
        this._has = true;
        _super.prototype._n.call(this, x);
    };
    MemoryStream.prototype._add = function (il) {
        var ta = this._target;
        if (ta !== NO)
            return ta._add(il);
        var a = this._ils;
        a.push(il);
        if (a.length > 1) {
            if (this._has)
                il._n(this._v);
            return;
        }
        if (this._stopID !== NO) {
            if (this._has)
                il._n(this._v);
            clearTimeout(this._stopID);
            this._stopID = NO;
        }
        else if (this._has)
            il._n(this._v);
        else {
            var p = this._prod;
            if (p !== NO)
                p._start(this);
        }
    };
    MemoryStream.prototype._stopNow = function () {
        this._has = false;
        _super.prototype._stopNow.call(this);
    };
    MemoryStream.prototype._x = function () {
        this._has = false;
        _super.prototype._x.call(this);
    };
    MemoryStream.prototype.map = function (project) {
        return this._map(project);
    };
    MemoryStream.prototype.mapTo = function (projectedValue) {
        return _super.prototype.mapTo.call(this, projectedValue);
    };
    MemoryStream.prototype.take = function (amount) {
        return _super.prototype.take.call(this, amount);
    };
    MemoryStream.prototype.endWhen = function (other) {
        return _super.prototype.endWhen.call(this, other);
    };
    MemoryStream.prototype.replaceError = function (replace) {
        return _super.prototype.replaceError.call(this, replace);
    };
    MemoryStream.prototype.remember = function () {
        return this;
    };
    MemoryStream.prototype.debug = function (labelOrSpy) {
        return _super.prototype.debug.call(this, labelOrSpy);
    };
    return MemoryStream;
}(Stream));
exports.MemoryStream = MemoryStream;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Stream;
//# sourceMappingURL=index.js.map

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var thunk_1 = __webpack_require__(53);
exports.thunk = thunk_1.thunk;
var MainDOMSource_1 = __webpack_require__(37);
exports.MainDOMSource = MainDOMSource_1.MainDOMSource;
var HTMLSource_1 = __webpack_require__(36);
exports.HTMLSource = HTMLSource_1.HTMLSource;
/**
 * A factory for the DOM driver function.
 *
 * Takes a `container` to define the target on the existing DOM which this
 * driver will operate on, and an `options` object as the second argument. The
 * input to this driver is a stream of virtual DOM objects, or in other words,
 * Snabbdom "VNode" objects. The output of this driver is a "DOMSource": a
 * collection of Observables queried with the methods `select()` and `events()`.
 *
 * `DOMSource.select(selector)` returns a new DOMSource with scope restricted to
 * the element(s) that matches the CSS `selector` given.
 *
 * `DOMSource.events(eventType, options)` returns a stream of events of
 * `eventType` happening on the elements that match the current DOMSource. The
 * event object contains the `ownerTarget` property that behaves exactly like
 * `currentTarget`. The reason for this is that some browsers doesn't allow
 * `currentTarget` property to be mutated, hence a new property is created. The
 * returned stream is an *xstream* Stream if you use `@cycle/xstream-run` to run
 * your app with this driver, or it is an RxJS Observable if you use
 * `@cycle/rxjs-run`, and so forth. The `options` parameter can have the
 * property `useCapture`, which is by default `false`, except it is `true` for
 * event types that do not bubble. Read more here
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 * about the `useCapture` and its purpose.
 *
 * `DOMSource.elements()` returns a stream of the DOM element(s) matched by the
 * selectors in the DOMSource. Also, `DOMSource.select(':root').elements()`
 * returns a stream of DOM element corresponding to the root (or container) of
 * the app on the DOM.
 *
 * @param {(String|HTMLElement)} container the DOM selector for the element
 * (or the element itself) to contain the rendering of the VTrees.
 * @param {DOMDriverOptions} options an object with two optional properties:
 *
 *   - `modules: array` overrides `@cycle/dom`'s default Snabbdom modules as
 *     as defined in [`src/modules.ts`](./src/modules.ts).
 *   - `transposition: boolean` enables/disables transposition of inner streams
 *     in the virtual DOM tree.
 * @return {Function} the DOM driver function. The function expects a stream of
 * VNode as input, and outputs the DOMSource object.
 * @function makeDOMDriver
 */
var makeDOMDriver_1 = __webpack_require__(69);
exports.makeDOMDriver = makeDOMDriver_1.makeDOMDriver;
/**
 * A factory for the HTML driver function.
 *
 * Takes an `effect` callback function and an `options` object as arguments. The
 * input to this driver is a stream of virtual DOM objects, or in other words,
 * Snabbdom "VNode" objects. The output of this driver is a "DOMSource": a
 * collection of Observables queried with the methods `select()` and `events()`.
 *
 * The HTML Driver is supplementary to the DOM Driver. Instead of producing
 * elements on the DOM, it generates HTML as strings and does a side effect on
 * those HTML strings. That side effect is described by the `effect` callback
 * function. So, if you want to use the HTML Driver on the server-side to render
 * your application as HTML and send as a response (which is the typical use
 * case for the HTML Driver), you need to pass something like the
 * `html => response.send(html)` function as the `effect` argument. This way,
 * the driver knows what side effect to cause based on the HTML string it just
 * rendered.
 *
 * The HTML driver is useful only for that side effect in the `effect` callback.
 * It can be considered a sink-only driver. However, in order to serve as a
 * transparent replacement to the DOM Driver when rendering from the server, the
 * HTML driver returns a source object that behaves just like the DOMSource.
 * This helps reuse the same application that is written for the DOM Driver.
 * This fake DOMSource returns empty streams when you query it, because there
 * are no user events on the server.
 *
 * `DOMSource.select(selector)` returns a new DOMSource with scope restricted to
 * the element(s) that matches the CSS `selector` given.
 *
 * `DOMSource.events(eventType, options)` returns an empty stream. The returned
 * stream is an *xstream* Stream if you use `@cycle/xstream-run` to run your app
 * with this driver, or it is an RxJS Observable if you use `@cycle/rxjs-run`,
 * and so forth.
 *
 * `DOMSource.elements()` returns the stream of HTML string rendered from your
 * sink virtual DOM stream.
 *
 * @param {Function} effect a callback function that takes a string of rendered
 * HTML as input and should run a side effect, returning nothing.
 * @param {HTMLDriverOptions} options an object with one optional property:
 * `transposition: boolean` enables/disables transposition of inner streams in
 * the virtual DOM tree.
 * @return {Function} the HTML driver function. The function expects a stream of
 * VNode as input, and outputs the DOMSource object.
 * @function makeHTMLDriver
 */
var makeHTMLDriver_1 = __webpack_require__(70);
exports.makeHTMLDriver = makeHTMLDriver_1.makeHTMLDriver;
/**
 * A factory function to create mocked DOMSource objects, for testing purposes.
 *
 * Takes a `streamAdapter` and a `mockConfig` object as arguments, and returns
 * a DOMSource that can be given to any Cycle.js app that expects a DOMSource in
 * the sources, for testing.
 *
 * The `streamAdapter` parameter is a package such as `@cycle/xstream-adapter`,
 * `@cycle/rxjs-adapter`, etc. Import it as `import a from '@cycle/rx-adapter`,
 * then provide it to `mockDOMSource. This is important so the DOMSource created
 * knows which stream library should it use to export its streams when you call
 * `DOMSource.events()` for instance.
 *
 * The `mockConfig` parameter is an object specifying selectors, eventTypes and
 * their streams. Example:
 *
 * ```js
 * const domSource = mockDOMSource(RxAdapter, {
 *   '.foo': {
 *     'click': Rx.Observable.of({target: {}}),
 *     'mouseover': Rx.Observable.of({target: {}}),
 *   },
 *   '.bar': {
 *     'scroll': Rx.Observable.of({target: {}}),
 *     elements: Rx.Observable.of({tagName: 'div'}),
 *   }
 * });
 *
 * // Usage
 * const click$ = domSource.select('.foo').events('click');
 * const element$ = domSource.select('.bar').elements();
 * ```
 *
 * The mocked DOM Source supports isolation. It has the functions `isolateSink`
 * and `isolateSource` attached to it, and performs simple isolation using
 * classNames. *isolateSink* with scope `foo` will append the class `___foo` to
 * the stream of virtual DOM nodes, and *isolateSource* with scope `foo` will
 * perform a conventional `mockedDOMSource.select('.__foo')` call.
 *
 * @param {Object} mockConfig an object where keys are selector strings
 * and values are objects. Those nested objects have `eventType` strings as keys
 * and values are streams you created.
 * @return {Object} fake DOM source object, with an API containing `select()`
 * and `events()` and `elements()` which can be used just like the DOM Driver's
 * DOMSource.
 *
 * @function mockDOMSource
 */
var mockDOMSource_1 = __webpack_require__(71);
exports.mockDOMSource = mockDOMSource_1.mockDOMSource;
exports.MockedDOMSource = mockDOMSource_1.MockedDOMSource;
/**
 * The hyperscript function `h()` is a function to create virtual DOM objects,
 * also known as VNodes. Call
 *
 * ```js
 * h('div.myClass', {style: {color: 'red'}}, [])
 * ```
 *
 * to create a VNode that represents a `DIV` element with className `myClass`,
 * styled with red color, and no children because the `[]` array was passed. The
 * API is `h(tagOrSelector, optionalData, optionalChildrenOrText)`.
 *
 * However, usually you should use "hyperscript helpers", which are shortcut
 * functions based on hyperscript. There is one hyperscript helper function for
 * each DOM tagName, such as `h1()`, `h2()`, `div()`, `span()`, `label()`,
 * `input()`. For instance, the previous example could have been written
 * as:
 *
 * ```js
 * div('.myClass', {style: {color: 'red'}}, [])
 * ```
 *
 * There are also SVG helper functions, which apply the appropriate SVG
 * namespace to the resulting elements. `svg()` function creates the top-most
 * SVG element, and `svg.g`, `svg.polygon`, `svg.circle`, `svg.path` are for
 * SVG-specific child elements. Example:
 *
 * ```js
 * svg({width: 150, height: 150}, [
 *   svg.polygon({
 *     attrs: {
 *       class: 'triangle',
 *       points: '20 0 20 150 150 20'
 *     }
 *   })
 * ])
 * ```
 *
 * @function h
 */
var h_1 = __webpack_require__(18);
exports.h = h_1.h;
var hyperscript_helpers_1 = __webpack_require__(67);
exports.svg = hyperscript_helpers_1.default.svg;
exports.a = hyperscript_helpers_1.default.a;
exports.abbr = hyperscript_helpers_1.default.abbr;
exports.address = hyperscript_helpers_1.default.address;
exports.area = hyperscript_helpers_1.default.area;
exports.article = hyperscript_helpers_1.default.article;
exports.aside = hyperscript_helpers_1.default.aside;
exports.audio = hyperscript_helpers_1.default.audio;
exports.b = hyperscript_helpers_1.default.b;
exports.base = hyperscript_helpers_1.default.base;
exports.bdi = hyperscript_helpers_1.default.bdi;
exports.bdo = hyperscript_helpers_1.default.bdo;
exports.blockquote = hyperscript_helpers_1.default.blockquote;
exports.body = hyperscript_helpers_1.default.body;
exports.br = hyperscript_helpers_1.default.br;
exports.button = hyperscript_helpers_1.default.button;
exports.canvas = hyperscript_helpers_1.default.canvas;
exports.caption = hyperscript_helpers_1.default.caption;
exports.cite = hyperscript_helpers_1.default.cite;
exports.code = hyperscript_helpers_1.default.code;
exports.col = hyperscript_helpers_1.default.col;
exports.colgroup = hyperscript_helpers_1.default.colgroup;
exports.dd = hyperscript_helpers_1.default.dd;
exports.del = hyperscript_helpers_1.default.del;
exports.dfn = hyperscript_helpers_1.default.dfn;
exports.dir = hyperscript_helpers_1.default.dir;
exports.div = hyperscript_helpers_1.default.div;
exports.dl = hyperscript_helpers_1.default.dl;
exports.dt = hyperscript_helpers_1.default.dt;
exports.em = hyperscript_helpers_1.default.em;
exports.embed = hyperscript_helpers_1.default.embed;
exports.fieldset = hyperscript_helpers_1.default.fieldset;
exports.figcaption = hyperscript_helpers_1.default.figcaption;
exports.figure = hyperscript_helpers_1.default.figure;
exports.footer = hyperscript_helpers_1.default.footer;
exports.form = hyperscript_helpers_1.default.form;
exports.h1 = hyperscript_helpers_1.default.h1;
exports.h2 = hyperscript_helpers_1.default.h2;
exports.h3 = hyperscript_helpers_1.default.h3;
exports.h4 = hyperscript_helpers_1.default.h4;
exports.h5 = hyperscript_helpers_1.default.h5;
exports.h6 = hyperscript_helpers_1.default.h6;
exports.head = hyperscript_helpers_1.default.head;
exports.header = hyperscript_helpers_1.default.header;
exports.hgroup = hyperscript_helpers_1.default.hgroup;
exports.hr = hyperscript_helpers_1.default.hr;
exports.html = hyperscript_helpers_1.default.html;
exports.i = hyperscript_helpers_1.default.i;
exports.iframe = hyperscript_helpers_1.default.iframe;
exports.img = hyperscript_helpers_1.default.img;
exports.input = hyperscript_helpers_1.default.input;
exports.ins = hyperscript_helpers_1.default.ins;
exports.kbd = hyperscript_helpers_1.default.kbd;
exports.keygen = hyperscript_helpers_1.default.keygen;
exports.label = hyperscript_helpers_1.default.label;
exports.legend = hyperscript_helpers_1.default.legend;
exports.li = hyperscript_helpers_1.default.li;
exports.link = hyperscript_helpers_1.default.link;
exports.main = hyperscript_helpers_1.default.main;
exports.map = hyperscript_helpers_1.default.map;
exports.mark = hyperscript_helpers_1.default.mark;
exports.menu = hyperscript_helpers_1.default.menu;
exports.meta = hyperscript_helpers_1.default.meta;
exports.nav = hyperscript_helpers_1.default.nav;
exports.noscript = hyperscript_helpers_1.default.noscript;
exports.object = hyperscript_helpers_1.default.object;
exports.ol = hyperscript_helpers_1.default.ol;
exports.optgroup = hyperscript_helpers_1.default.optgroup;
exports.option = hyperscript_helpers_1.default.option;
exports.p = hyperscript_helpers_1.default.p;
exports.param = hyperscript_helpers_1.default.param;
exports.pre = hyperscript_helpers_1.default.pre;
exports.progress = hyperscript_helpers_1.default.progress;
exports.q = hyperscript_helpers_1.default.q;
exports.rp = hyperscript_helpers_1.default.rp;
exports.rt = hyperscript_helpers_1.default.rt;
exports.ruby = hyperscript_helpers_1.default.ruby;
exports.s = hyperscript_helpers_1.default.s;
exports.samp = hyperscript_helpers_1.default.samp;
exports.script = hyperscript_helpers_1.default.script;
exports.section = hyperscript_helpers_1.default.section;
exports.select = hyperscript_helpers_1.default.select;
exports.small = hyperscript_helpers_1.default.small;
exports.source = hyperscript_helpers_1.default.source;
exports.span = hyperscript_helpers_1.default.span;
exports.strong = hyperscript_helpers_1.default.strong;
exports.style = hyperscript_helpers_1.default.style;
exports.sub = hyperscript_helpers_1.default.sub;
exports.sup = hyperscript_helpers_1.default.sup;
exports.table = hyperscript_helpers_1.default.table;
exports.tbody = hyperscript_helpers_1.default.tbody;
exports.td = hyperscript_helpers_1.default.td;
exports.textarea = hyperscript_helpers_1.default.textarea;
exports.tfoot = hyperscript_helpers_1.default.tfoot;
exports.th = hyperscript_helpers_1.default.th;
exports.thead = hyperscript_helpers_1.default.thead;
exports.title = hyperscript_helpers_1.default.title;
exports.tr = hyperscript_helpers_1.default.tr;
exports.u = hyperscript_helpers_1.default.u;
exports.ul = hyperscript_helpers_1.default.ul;
exports.video = hyperscript_helpers_1.default.video;
//# sourceMappingURL=index.js.map

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(55));


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(8);
__export(__webpack_require__(208));
var Size;
(function (Size) {
    Size[Size["Mini"] = 0] = "Mini";
    Size[Size["Tiny"] = 1] = "Tiny";
    Size[Size["Small"] = 2] = "Small";
    Size[Size["Medium"] = 3] = "Medium";
    Size[Size["Large"] = 4] = "Large";
    Size[Size["Big"] = 5] = "Big";
    Size[Size["Huge"] = 6] = "Huge";
    Size[Size["Massive"] = 7] = "Massive";
    Size[Size["Fluid"] = 8] = "Fluid";
})(Size = exports.Size || (exports.Size = {}));
(function (Size) {
    function ToEnum(sizeOrString) {
        return typeof (sizeOrString) === "number"
            ? sizeOrString
            : Size[utils_1.capitalize(sizeOrString)];
    }
    Size.ToEnum = ToEnum;
    function ToClassname(size) {
        size = ToEnum(size);
        switch (size) {
            case Size.Mini: return " mini";
            case Size.Tiny: return " tiny";
            case Size.Small: return " small";
            case Size.Medium: return " medium";
            case Size.Large: return " large";
            case Size.Big: return " big";
            case Size.Huge: return " huge";
            case Size.Massive: return " massive";
            case Size.Fluid: return " fluid";
            default: return "";
        }
    }
    Size.ToClassname = ToClassname;
})(Size = exports.Size || (exports.Size = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    VerticalAlignment[VerticalAlignment["Top"] = 0] = "Top";
    VerticalAlignment[VerticalAlignment["Middle"] = 1] = "Middle";
    VerticalAlignment[VerticalAlignment["Bottom"] = 2] = "Bottom";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
(function (VerticalAlignment) {
    function ToEnum(vAlignmentOrString) {
        return typeof (vAlignmentOrString) === "number"
            ? vAlignmentOrString
            : VerticalAlignment[utils_1.capitalize(vAlignmentOrString)];
    }
    VerticalAlignment.ToEnum = ToEnum;
    function ToClassname(alignment) {
        alignment = VerticalAlignment.ToEnum(alignment);
        switch (alignment) {
            case VerticalAlignment.Top: return " top aligned";
            case VerticalAlignment.Middle: return " middle aligned";
            case VerticalAlignment.Bottom: return " bottom aligned";
            default: return "";
        }
    }
    VerticalAlignment.ToClassname = ToClassname;
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var TextAlignment;
(function (TextAlignment) {
    TextAlignment[TextAlignment["Left"] = 0] = "Left";
    TextAlignment[TextAlignment["Right"] = 1] = "Right";
    TextAlignment[TextAlignment["Center"] = 2] = "Center";
    TextAlignment[TextAlignment["Justified"] = 3] = "Justified";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
(function (TextAlignment) {
    function ToEnum(tAlignmentOrString) {
        return typeof (tAlignmentOrString) === "number"
            ? tAlignmentOrString
            : TextAlignment[utils_1.capitalize(tAlignmentOrString)];
    }
    TextAlignment.ToEnum = ToEnum;
    function ToClassname(alignment) {
        alignment = TextAlignment.ToEnum(alignment);
        switch (alignment) {
            case TextAlignment.Left: return " left aligned";
            case TextAlignment.Right: return " right aligned";
            case TextAlignment.Center: return " center aligned";
            case TextAlignment.Justified: return " justified";
            default: return "";
        }
    }
    TextAlignment.ToClassname = ToClassname;
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var Float;
(function (Float) {
    Float[Float["None"] = 0] = "None";
    Float[Float["Right"] = 1] = "Right";
    Float[Float["Left"] = 2] = "Left";
})(Float = exports.Float || (exports.Float = {}));
(function (Float) {
    function ToEnum(floatOrString) {
        return typeof (floatOrString) === "number"
            ? floatOrString
            : Float[utils_1.capitalize(floatOrString)];
    }
    Float.ToEnum = ToEnum;
    function ToClassname(float) {
        float = Float.ToEnum(float);
        switch (float) {
            case Float.Left: return " left floated";
            case Float.Right: return " right floated";
            default: return "";
        }
    }
    Float.ToClassname = ToClassname;
})(Float = exports.Float || (exports.Float = {}));
var Attachment;
(function (Attachment) {
    Attachment[Attachment["None"] = 0] = "None";
    Attachment[Attachment["Top"] = 1] = "Top";
    Attachment[Attachment["Bottom"] = 2] = "Bottom";
})(Attachment = exports.Attachment || (exports.Attachment = {}));
(function (Attachment) {
    function ToEnum(attachmentOrString) {
        return typeof (attachmentOrString) === "number"
            ? attachmentOrString
            : Attachment[utils_1.capitalize(attachmentOrString)];
    }
    Attachment.ToEnum = ToEnum;
    function ToClassname(attachment) {
        attachment = Attachment.ToEnum(attachment);
        switch (attachment) {
            case Attachment.None: return " attached";
            case Attachment.Top: return " top attached";
            case Attachment.Bottom: return " bottom attached";
            default: return "";
        }
    }
    Attachment.ToClassname = ToClassname;
})(Attachment = exports.Attachment || (exports.Attachment = {}));
var Color;
(function (Color) {
    Color[Color["None"] = 0] = "None";
    Color[Color["Primary"] = 1] = "Primary";
    Color[Color["Secondary"] = 2] = "Secondary";
    Color[Color["Success"] = 3] = "Success";
    Color[Color["Info"] = 4] = "Info";
    Color[Color["Warning"] = 5] = "Warning";
    Color[Color["Error"] = 6] = "Error";
})(Color = exports.Color || (exports.Color = {}));
(function (Color) {
    function ToEnum(colorOrString) {
        return typeof (colorOrString) === "number"
            ? colorOrString
            : Color[utils_1.capitalize(colorOrString)];
    }
    Color.ToEnum = ToEnum;
    function ToClassname(color) {
        color = Color.ToEnum(color);
        switch (color) {
            case Color.Primary: return " primaryColored";
            case Color.Secondary: return " secondaryColored";
            case Color.Success: return " successColored";
            case Color.Info: return " infoColored";
            case Color.Warning: return " warningColored";
            case Color.Error: return " errorColored ";
            default: return "";
        }
    }
    Color.ToClassname = ToClassname;
})(Color = exports.Color || (exports.Color = {}));
var Animation;
(function (Animation) {
    Animation[Animation["Browse"] = 0] = "Browse";
    Animation[Animation["Drop"] = 1] = "Drop";
    Animation[Animation["Fade"] = 2] = "Fade";
    Animation[Animation["Flip"] = 3] = "Flip";
    Animation[Animation["Scale"] = 4] = "Scale";
    Animation[Animation["Fly"] = 5] = "Fly";
    Animation[Animation["Slide"] = 6] = "Slide";
    Animation[Animation["Swing"] = 7] = "Swing";
    Animation[Animation["Flash"] = 8] = "Flash";
    Animation[Animation["Shake"] = 9] = "Shake";
    Animation[Animation["Bounce"] = 10] = "Bounce";
    Animation[Animation["Tada"] = 11] = "Tada";
    Animation[Animation["Pulse"] = 12] = "Pulse";
    Animation[Animation["Jiggle"] = 13] = "Jiggle";
    Animation[Animation["None"] = 14] = "None";
})(Animation = exports.Animation || (exports.Animation = {}));
(function (Animation) {
    function ToEnum(animationOrString) {
        return typeof (animationOrString) === "number"
            ? animationOrString
            : Animation[utils_1.capitalize(animationOrString)];
    }
    Animation.ToEnum = ToEnum;
    function ToClassname(anim) {
        anim = Animation.ToEnum(anim);
        switch (anim) {
            case Animation.Browse: return " browse";
            case Animation.Drop: return " drop";
            case Animation.Fade: return " fade";
            case Animation.Flip: return " flip";
            case Animation.Scale: return " scale";
            case Animation.Fly: return " fly";
            case Animation.Slide: return " slide";
            case Animation.Swing: return " swing";
            case Animation.Flash: return " flash";
            case Animation.Shake: return " shake";
            case Animation.Bounce: return " bounce";
            case Animation.Tada: return " tada";
            case Animation.Pulse: return " pulse";
            case Animation.Jiggle: return " jiggle";
        }
    }
    Animation.ToClassname = ToClassname;
    var staticAnimations = [Animation.Flash, Animation.Shake,
        Animation.Bounce, Animation.Tada, Animation.Pulse, Animation.Jiggle];
    function isStatic(anim) {
        return staticAnimations.indexOf(Animation.ToEnum(anim)) !== -1;
    }
    Animation.isStatic = isStatic;
    var directionAnimations = [Animation.Browse, Animation.Fade,
        Animation.Fly, Animation.Slide, Animation.Swing];
    function isDirectional(anim) {
        return directionAnimations.indexOf(Animation.ToEnum(anim)) !== -1;
    }
    Animation.isDirectional = isDirectional;
})(Animation = exports.Animation || (exports.Animation = {}));
var Direction;
(function (Direction) {
    Direction[Direction["In"] = 0] = "In";
    Direction[Direction["Out"] = 1] = "Out";
    Direction[Direction["None"] = 2] = "None";
})(Direction = exports.Direction || (exports.Direction = {}));
(function (Direction) {
    function ToEnum(directionOrString) {
        return typeof (directionOrString) === "number"
            ? directionOrString
            : Direction[utils_1.capitalize(directionOrString)];
    }
    Direction.ToEnum = ToEnum;
    function ToClassname(direction) {
        direction = Direction.ToEnum(direction);
        return direction === Direction.In ? " in" : " out";
    }
    Direction.ToClassname = ToClassname;
})(Direction = exports.Direction || (exports.Direction = {}));
var AnimationDirection;
(function (AnimationDirection) {
    AnimationDirection[AnimationDirection["Up"] = 0] = "Up";
    AnimationDirection[AnimationDirection["Down"] = 1] = "Down";
    AnimationDirection[AnimationDirection["Left"] = 2] = "Left";
    AnimationDirection[AnimationDirection["Right"] = 3] = "Right";
})(AnimationDirection = exports.AnimationDirection || (exports.AnimationDirection = {}));
(function (AnimationDirection) {
    function ToEnum(animationDirectionOrString) {
        return typeof (animationDirectionOrString) === "number"
            ? animationDirectionOrString
            : AnimationDirection[utils_1.capitalize(animationDirectionOrString)];
    }
    AnimationDirection.ToEnum = ToEnum;
    function ToClassname(dir) {
        dir = AnimationDirection.ToEnum(dir);
        switch (dir) {
            case AnimationDirection.Up: return " up";
            case AnimationDirection.Down: return " down";
            case AnimationDirection.Left: return " left";
            case AnimationDirection.Right: return " right";
            default: return "";
        }
    }
    AnimationDirection.ToClassname = ToClassname;
})(AnimationDirection = exports.AnimationDirection || (exports.AnimationDirection = {}));


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(7);
//Common render function for all basic Components
//Reformats the various syntaxes into StyleAndContentArgs 
function renderPropsAndContent(renderFn, isArgs, isB, arg1, arg2) {
    if (isArgs(arg1)) {
        return renderFn(arg1);
    }
    var args = {};
    if (isB(arg1)) {
        args.props = {};
        args.content = arg1;
    }
    else {
        args.props = arg1 || {};
        args.content = arg2;
    }
    return renderFn(args);
}
exports.renderPropsAndContent = renderPropsAndContent;
//Common run function for all basic Components
//Isolates the rendered component and exposes events
function runPropsAndContent(sources, render, selector, scope) {
    function main(sources) {
        sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
        sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of(undefined);
        var vTree$ = xstream_1.default.combine(sources.props$, sources.content$)
            .map(function (_a) {
            var props = _a[0], content = _a[1];
            return render({ props: props, content: content });
        });
        return {
            DOM: vTree$,
            events: function (type) { return sources.DOM.select(selector).events(type); },
        };
    }
    var isolatedMain = isolate_1.default(main, scope);
    return isolatedMain(sources);
}
exports.runPropsAndContent = runPropsAndContent;
function makeIsArgs(isB) {
    return (function (obj) { return isArgs(obj, isB); });
}
exports.makeIsArgs = makeIsArgs;
function isArgs(obj, isB) {
    return obj && (typeof (obj.props) !== "undefined" ||
        (typeof (obj.content) !== "undefined" && (isB(obj.content) || isB(obj.content.main))));
}
exports.isArgs = isArgs;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(216));


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(178));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var counter = 0;
function newScope() {
    return "cycle" + ++counter;
}
function checkIsolateArgs(dataflowComponent, scope) {
    if (typeof dataflowComponent !== "function") {
        throw new Error("First argument given to isolate() must be a " +
            "'dataflowComponent' function");
    }
    if (scope === null) {
        throw new Error("Second argument given to isolate() must not be null");
    }
}
function isolateAllSources(sources, scope) {
    var scopedSources = {};
    for (var key in sources) {
        var source = sources[key];
        if (sources.hasOwnProperty(key)
            && source
            && typeof source.isolateSource === 'function') {
            scopedSources[key] = source.isolateSource(source, scope);
        }
        else if (sources.hasOwnProperty(key)) {
            scopedSources[key] = sources[key];
        }
    }
    return scopedSources;
}
function isolateAllSinks(sources, sinks, scope) {
    var scopedSinks = {};
    for (var key in sinks) {
        var source = sources[key];
        if (sinks.hasOwnProperty(key)
            && source
            && typeof source.isolateSink === 'function') {
            scopedSinks[key] = source.isolateSink(sinks[key], scope);
        }
        else if (sinks.hasOwnProperty(key)) {
            scopedSinks[key] = sinks[key];
        }
    }
    return scopedSinks;
}
/**
 * Takes a `component` function and an optional `scope` string, and returns a
 * scoped version of the `component` function.
 *
 * When the scoped component is invoked, each source provided to the scoped
 * component is isolated to the given `scope` using
 * `source.isolateSource(source, scope)`, if possible. Likewise, the sinks
 * returned from the scoped component are isolated to the `scope` using
 * `source.isolateSink(sink, scope)`.
 *
 * If the `scope` is not provided, a new scope will be automatically created.
 * This means that while **`isolate(component, scope)` is pure**
 * (referentially transparent), **`isolate(component)` is impure**
 * (not referentially transparent). Two calls to `isolate(Foo, bar)` will
 * generate the same component. But, two calls to `isolate(Foo)` will generate
 * two distinct components.
 *
 * Note that both `isolateSource()` and `isolateSink()` are static members of
 * `source`. The reason for this is that drivers produce `source` while the
 * application produces `sink`, and it's the driver's responsibility to
 * implement `isolateSource()` and `isolateSink()`.
 *
 * @param {Function} component a function that takes `sources` as input
 * and outputs a collection of `sinks`.
 * @param {String} scope an optional string that is used to isolate each
 * `sources` and `sinks` when the returned scoped component is invoked.
 * @return {Function} the scoped component function that, as the original
 * `component` function, takes `sources` and returns `sinks`.
 * @function isolate
 */
function isolate(component, scope) {
    if (scope === void 0) { scope = newScope(); }
    checkIsolateArgs(component, scope);
    var convertedScope = typeof scope === 'string' ? scope : scope.toString();
    return function scopedComponent(sources) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        var scopedSources = isolateAllSources(sources, convertedScope);
        var sinks = component.apply(void 0, [scopedSources].concat(rest));
        var scopedSinks = isolateAllSinks(sources, sinks, convertedScope);
        return scopedSinks;
    };
}
isolate.reset = function () { return counter = 0; };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = isolate;
//# sourceMappingURL=index.js.map

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function capitalize(string) {
    return string ? string.charAt(0).toUpperCase() + string.slice(1) : string;
}
exports.capitalize = capitalize;
function patchClassList(target, classes, classesToAdd) {
    var className = "";
    if (target.data) {
        var props = target.data.props ? target.data.props : { className: target.sel.split(".").join(" ") };
        var classList = props.className.split(" ");
        classList.forEach(function (item) {
            if (classes.indexOf(item) === -1) {
                className += item + " ";
            }
        });
    }
    className += classesToAdd;
    return Object.assign({}, target.data, {
        "props": {
            className: className
        }
    });
}
exports.patchClassList = patchClassList;
/**
 * Adds one VNode to another and handles updates for stream by replacing based on the identifier class.
 * @param  {VNode}  element    The element to be added.
 * @param  {VNode}  target     The target for the element
 * @param  {string} identifier The identifying class for the element to be added.
 * @return {Array} The target element's children with the element added.
 */
function addElement(element, target, identifier) {
    var c = [];
    if (target.children) {
        c = target.children;
    }
    if (target.text) {
        c.push(target.text);
    }
    for (var i = 0; i < c.length; i++) {
        var child = c[i];
        var cProps = child.data ? child.data.props ? child.data.props : {} : {};
        if (typeof (child) !== "undefined" && typeof (cProps.className) !== "undefined") {
            var classList = child.data.props.className.split(" ");
            for (var _i = 0, classList_1 = classList; _i < classList_1.length; _i++) {
                var s = classList_1[_i];
                if (s === identifier) {
                    c.splice(i, 1);
                }
            }
        }
    }
    c.push(element);
    return c;
}
exports.addElement = addElement;
/**
 * Converts a natural number between 1-16 to text.
 * @param  {number} num The number to convert.
 * @return {string}     That number as text.
 */
function numToText(num) {
    switch (num) {
        case 1: return " one";
        case 2: return " two";
        case 3: return " three";
        case 4: return " four";
        case 5: return " five";
        case 6: return " six";
        case 7: return " seven";
        case 8: return " eight";
        case 9: return " nine";
        case 10: return " ten";
        case 11: return " eleven";
        case 12: return " twelve";
        case 13: return " thirteen";
        case 14: return " fourteen";
        case 15: return " fifteen";
        case 16: return " sixteen";
        default: return " one";
    }
}
exports.numToText = numToText;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	if (value == null) throw new TypeError("Cannot use null or undefined");
	return value;
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assign        = __webpack_require__(29)
  , normalizeOpts = __webpack_require__(103)
  , isCallable    = __webpack_require__(97)
  , contains      = __webpack_require__(45)

  , d;

d = module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if ((arguments.length < 2) || (typeof dscr !== 'string')) {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (dscr == null) {
		c = w = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
		w = contains.call(dscr, 'w');
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== 'string') {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (get == null) {
		get = undefined;
	} else if (!isCallable(get)) {
		options = get;
		get = set = undefined;
	} else if (set == null) {
		set = undefined;
	} else if (!isCallable(set)) {
		options = set;
		set = undefined;
	}
	if (dscr == null) {
		c = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (fn) {
	if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
	return fn;
};


/***/ }),
/* 12 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(8);
var Transition;
(function (Transition) {
    function run(sources) {
        var evt = function (type) { return sources.DOM.select(".transition").events(type); };
        var animationEnd$ = evt("animationend").map(function (evt) { return ({
            animation: enums_1.Animation.None,
            direction: evt.currentTarget.classList.contains("out") ? enums_1.Direction.Out : enums_1.Direction.In
        }); });
        var animation$ = xstream_1.default.merge(sources.transition$, animationEnd$);
        var vTree$ = xstream_1.default.combine(animation$, sources.target$).map(function (_a) {
            var transition = _a[0], target = _a[1];
            return render(target, transition);
        });
        return {
            DOM: vTree$,
            events: evt
        };
    }
    Transition.run = run;
    function render(target, args) {
        if (args === void 0) { args = { animation: enums_1.Animation.None }; }
        var c;
        var data = utils_1.patchClassList(target, ["hidden", "visible", "animating", "transition"], getClassName(args));
        if (target.children) {
            c = target.children;
        }
        if (target.text) {
            c = target.text;
        }
        return dom_1.h(target.sel, data, c);
    }
    Transition.render = render;
    function getClassName(transition) {
        if (transition.animation === enums_1.Animation.None) {
            return transition.direction === enums_1.Direction.Out ? "transition hidden" : "transition visible";
        }
        var animation = enums_1.Animation.ToClassname(transition.animation);
        if (enums_1.Animation.isStatic(transition.animation)) {
            return "visible animating transition " + animation;
        }
        var direction = enums_1.Direction.ToClassname(transition.direction);
        if (enums_1.Animation.isDirectional(transition.animation)) {
            animation += enums_1.AnimationDirection.ToClassname(transition.animationDirection);
        }
        return "visible transition animating " + direction + animation;
    }
})(Transition = exports.Transition || (exports.Transition = {}));


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isElement(obj) {
    var ELEM_TYPE = 1;
    var FRAG_TYPE = 11;
    return typeof HTMLElement === 'object' ?
        obj instanceof HTMLElement || obj instanceof DocumentFragment :
        obj && typeof obj === 'object' && obj !== null &&
            (obj.nodeType === ELEM_TYPE || obj.nodeType === FRAG_TYPE) &&
            typeof obj.nodeName === 'string';
}
exports.SCOPE_PREFIX = '$$CYCLEDOM$$-';
function getElement(selectors) {
    var domElement = typeof selectors === 'string' ?
        document.querySelector(selectors) :
        selectors;
    if (typeof selectors === 'string' && domElement === null) {
        throw new Error("Cannot render into unknown element `" + selectors + "`");
    }
    else if (!isElement(domElement)) {
        throw new Error('Given container is not a DOM element neither a ' +
            'selector string.');
    }
    return domElement;
}
exports.getElement = getElement;
/**
 * The full scope of a namespace is the "absolute path" of scopes from
 * parent to child. This is extracted from the namespace, filter only for
 * scopes in the namespace.
 */
function getFullScope(namespace) {
    return namespace
        .filter(function (c) { return c.indexOf(exports.SCOPE_PREFIX) > -1; })
        .map(function (c) { return c.replace(exports.SCOPE_PREFIX, ''); })
        .join('-');
}
exports.getFullScope = getFullScope;
function getSelectors(namespace) {
    return namespace.filter(function (c) { return c.indexOf(exports.SCOPE_PREFIX) === -1; }).join(' ');
}
exports.getSelectors = getSelectors;
//# sourceMappingURL=utils.js.map

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};

var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};

var stripPrefix = exports.stripPrefix = function stripPrefix(path, prefix) {
  return path.indexOf(prefix) === 0 ? path.substr(prefix.length) : path;
};

var parsePath = exports.parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var createPath = exports.createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;


  var path = pathname || '/';

  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

  return path;
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var adaptStream = function (x) { return x; };
function setAdapt(f) {
    adaptStream = f;
}
exports.setAdapt = setAdapt;
function adapt(stream) {
    return adaptStream(stream);
}
exports.adapt = adapt;
//# sourceMappingURL=adapt.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(117)() ? Symbol : __webpack_require__(119);


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var vnode_1 = __webpack_require__(33);
var is = __webpack_require__(52);
function addNS(data, children, sel) {
    data.ns = 'http://www.w3.org/2000/svg';
    if (sel !== 'foreignObject' && children !== undefined) {
        for (var i = 0; i < children.length; ++i) {
            var childData = children[i].data;
            if (childData !== undefined) {
                addNS(childData, children[i].children, children[i].sel);
            }
        }
    }
}
function h(sel, b, c) {
    var data = {}, children, text, i;
    if (c !== undefined) {
        data = b;
        if (is.array(c)) {
            children = c;
        }
        else if (is.primitive(c)) {
            text = c;
        }
        else if (c && c.sel) {
            children = [c];
        }
    }
    else if (b !== undefined) {
        if (is.array(b)) {
            children = b;
        }
        else if (is.primitive(b)) {
            text = b;
        }
        else if (b && b.sel) {
            children = [b];
        }
        else {
            data = b;
        }
    }
    if (is.array(children)) {
        for (i = 0; i < children.length; ++i) {
            if (is.primitive(children[i]))
                children[i] = vnode_1.vnode(undefined, undefined, undefined, children[i]);
        }
    }
    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&
        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {
        addNS(data, children, sel);
    }
    return vnode_1.vnode(sel, data, children, text, undefined);
}
exports.h = h;
;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = h;
//# sourceMappingURL=h.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.locationsAreEqual = exports.createLocation = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _resolvePathname = __webpack_require__(127);

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = __webpack_require__(219);

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _PathUtils = __webpack_require__(15);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;
  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = (0, _PathUtils.parsePath)(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);

    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  }

  return location;
};

var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(43)()
	? Object.setPrototypeOf
	: __webpack_require__(44);


/***/ }),
/* 23 */
/***/ (function(module, exports) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forOwn(object, iteratee) {
  return object && baseForOwn(object, typeof iteratee == 'function' ? iteratee : identity);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = forOwn;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Icon;
(function (Icon) {
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, icon, ".icon", scope);
    }
    Icon.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(icon, common_1.makeIsArgs(isIconType), isIconType, arg1, arg2);
    }
    Icon.render = render;
    function icon(args) {
        var props = args.props ? args.props : {};
        var content = typeof (args.content) !== "undefined" ? isIconType(args.content) ? args.content : args.content.main : -1;
        var className = getClassname(props, content);
        return className !== "ui icon" ? dom_1.i({ props: { className: className } }) : undefined;
    }
    function getClassname(props, content) {
        var className = "ui";
        if (props.button) {
            className += " button";
        }
        if (props.bordered) {
            className += " bordered";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.fitted) {
            className += " fitted";
        }
        if (props.link) {
            className += " link";
        }
        if (props.flipped) {
            className += " flipped";
        }
        if (props.rotated) {
            className += " rotated";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += enums_1.IconType.ToClassname(content);
        return className + " icon";
    }
    function isIconType(obj) {
        return typeof (obj) === "string" || typeof (obj) === "number";
    }
})(Icon = exports.Icon || (exports.Icon = {}));


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
function fromEvent(element, eventName, useCapture) {
    if (useCapture === void 0) { useCapture = false; }
    return xstream_1.Stream.create({
        element: element,
        next: null,
        start: function start(listener) {
            this.next = function next(event) { listener.next(event); };
            this.element.addEventListener(eventName, this.next, useCapture);
        },
        stop: function stop() {
            this.element.removeEventListener(eventName, this.next, useCapture);
        },
    });
}
exports.fromEvent = fromEvent;
//# sourceMappingURL=fromEvent.js.map

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var history_1 = __webpack_require__(79);
var createHistory_1 = __webpack_require__(74);
function makeHistoryDriver(options) {
    var history = history_1.createBrowserHistory(options);
    return function historyDriver(sink$) {
        return createHistory_1.createHistory$(history, sink$);
    };
}
exports.makeHistoryDriver = makeHistoryDriver;
function makeServerHistoryDriver(options) {
    var history = history_1.createMemoryHistory(options);
    return function serverHistoryDriver(sink$) {
        return createHistory_1.createHistory$(history, sink$);
    };
}
exports.makeServerHistoryDriver = makeServerHistoryDriver;
function makeHashHistoryDriver(options) {
    var history = history_1.createHashHistory(options);
    return function hashHistoryDriver(sink$) {
        return createHistory_1.createHistory$(history, sink$);
    };
}
exports.makeHashHistoryDriver = makeHashHistoryDriver;
//# sourceMappingURL=drivers.js.map

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _warning = __webpack_require__(21);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time') : void 0;

    prompt = nextPrompt;

    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;

          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);

    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

exports.default = createTransitionManager;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = Object.prototype.toString

  , id = toString.call((function () { return arguments; }()));

module.exports = function (x) { return (toString.call(x) === id); };


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(92)()
	? Object.assign
	: __webpack_require__(93);


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = Object.prototype.toString

  , id = toString.call('');

module.exports = function (x) {
	return (typeof x === 'string') || (x && (typeof x === 'object') &&
		((x instanceof String) || (toString.call(x) === id))) || false;
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear    = __webpack_require__(42)
  , assign   = __webpack_require__(29)
  , callable = __webpack_require__(11)
  , value    = __webpack_require__(9)
  , d        = __webpack_require__(10)
  , autoBind = __webpack_require__(84)
  , Symbol   = __webpack_require__(17)

  , defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , Iterator;

module.exports = Iterator = function (list, context) {
	if (!(this instanceof Iterator)) return new Iterator(list, context);
	defineProperties(this, {
		__list__: d('w', value(list)),
		__context__: d('w', context),
		__nextIndex__: d('w', 0)
	});
	if (!context) return;
	callable(context.on);
	context.on('_add', this._onAdd);
	context.on('_delete', this._onDelete);
	context.on('_clear', this._onClear);
};

defineProperties(Iterator.prototype, assign({
	constructor: d(Iterator),
	_next: d(function () {
		var i;
		if (!this.__list__) return;
		if (this.__redo__) {
			i = this.__redo__.shift();
			if (i !== undefined) return i;
		}
		if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
		this._unBind();
	}),
	next: d(function () { return this._createResult(this._next()); }),
	_createResult: d(function (i) {
		if (i === undefined) return { done: true, value: undefined };
		return { done: false, value: this._resolve(i) };
	}),
	_resolve: d(function (i) { return this.__list__[i]; }),
	_unBind: d(function () {
		this.__list__ = null;
		delete this.__redo__;
		if (!this.__context__) return;
		this.__context__.off('_add', this._onAdd);
		this.__context__.off('_delete', this._onDelete);
		this.__context__.off('_clear', this._onClear);
		this.__context__ = null;
	}),
	toString: d(function () { return '[object Iterator]'; })
}, autoBind({
	_onAdd: d(function (index) {
		if (index >= this.__nextIndex__) return;
		++this.__nextIndex__;
		if (!this.__redo__) {
			defineProperty(this, '__redo__', d('c', [index]));
			return;
		}
		this.__redo__.forEach(function (redo, i) {
			if (redo >= index) this.__redo__[i] = ++redo;
		}, this);
		this.__redo__.push(index);
	}),
	_onDelete: d(function (index) {
		var i;
		if (index >= this.__nextIndex__) return;
		--this.__nextIndex__;
		if (!this.__redo__) return;
		i = this.__redo__.indexOf(index);
		if (i !== -1) this.__redo__.splice(i, 1);
		this.__redo__.forEach(function (redo, i) {
			if (redo > index) this.__redo__[i] = --redo;
		}, this);
	}),
	_onClear: d(function () {
		if (this.__redo__) clear.call(this.__redo__);
		this.__nextIndex__ = 0;
	})
})));

defineProperty(Iterator.prototype, Symbol.iterator, d(function () {
	return this;
}));
defineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match HTML entities and HTML characters. */
var reUnescapedHtml = /[&<>"'`]/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

/** Used to map characters to HTML entities. */
var htmlEscapes = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '`': '&#96;'
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */
var escapeHtmlChar = basePropertyOf(htmlEscapes);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
 * their corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * Backticks are escaped because in IE < 9, they can break out of
 * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
 * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
 * [#133](https://html5sec.org/#133) of the
 * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */
function escape(string) {
  string = toString(string);
  return (string && reHasUnescapedHtml.test(string))
    ? string.replace(reUnescapedHtml, escapeHtmlChar)
    : string;
}

module.exports = escape;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function vnode(sel, data, children, text, elm) {
    var key = data === undefined ? undefined : data.key;
    return { sel: sel, data: data, children: children,
        text: text, elm: elm, key: key };
}
exports.vnode = vnode;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = vnode;
//# sourceMappingURL=vnode.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isolate_1 = __webpack_require__(7);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var transition_1 = __webpack_require__(13);
var utils_1 = __webpack_require__(8);
var enums_1 = __webpack_require__(3);
var types_1 = __webpack_require__(5);
var Dimmer;
(function (Dimmer) {
    function run(sources, scope) {
        function main(sources) {
            var evt = function (type) { return sources.DOM.select(".dimmable").events(type); };
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? c : c.main; }) : xstream_1.default.of([]);
            /*** Create animation$ ***/
            var on$ = sources.args && sources.args.on$ ? sources.args.on$.remember() : onHover(evt);
            var target$ = sources.args && sources.args.target$ ? sources.args.target$.remember() : xstream_1.default.of("page");
            var transition$ = on$
                .fold(function (prevAnim, active) { return prevAnim.direction === enums_1.Direction.None
                ? ({ animation: enums_1.Animation.None, direction: active ? enums_1.Direction.In : enums_1.Direction.Out })
                : {
                    animation: enums_1.Animation.Fade, direction: active ? enums_1.Direction.In : enums_1.Direction.Out
                }; }, ({ animation: enums_1.Animation.None, direction: enums_1.Direction.None }));
            /*** Animate content ***/
            var children$ = xstream_1.default.combine(content$, props$, target$)
                .map(function (_a) {
                var content = _a[0], props = _a[1], target = _a[2];
                return dimmer(content, props, target);
            });
            var animatedContent = transition_1.Transition.run({ DOM: sources.DOM, transition$: transition$, target$: children$ });
            /*** Render view ***/
            var vTree$ = xstream_1.default.combine(target$, animatedContent.DOM, on$)
                .map(function (_a) {
                var target = _a[0], content = _a[1], active = _a[2];
                return dimElement(target, content, active);
            });
            return {
                DOM: vTree$,
                events: function (type) { return sources.DOM.select(".dimmer").events(type); },
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Dimmer.run = run;
    function dimmer(content, props, target) {
        if (target === void 0) { target = "page"; }
        return target === "page"
            ? dom_1.div({ props: { className: "ui " + (props.inverted ? "inverted " : "") + "dimmer modals page dimmer" } }, content)
            : dom_1.div({ props: { className: "ui " + (props.inverted ? "inverted " : "") + "targetted dimmer" } }, [
                dom_1.div({ props: { className: "content" } }, [
                    dom_1.div({ props: { className: "center" } }, content)
                ])
            ]);
    }
    function dimElement(targetOrString, content, active) {
        var isPage = typeof (targetOrString) === "string";
        var target = isPage ? content : targetOrString;
        var className = isPage ? "" : "dimmable", c;
        if (active) {
            className += isPage ? "active" : " dimmed";
        }
        var data = utils_1.patchClassList(target, ["dimmable", "dimmed", "inverted", "active"], className);
        if (isPage) {
            if (target.children) {
                c = target.children;
            }
            else if (target.text) {
                c = target.text;
            }
        }
        else {
            c = utils_1.addElement(content, target, "targetted");
        }
        return dom_1.h(target.sel, data, c);
    }
    function onHover(events) {
        return xstream_1.default.merge(events("mouseenter"), events("mouseleave"))
            .map(function (evt) { return evt.type === "mouseenter"; }).startWith(false);
    }
})(Dimmer = exports.Dimmer || (exports.Dimmer = {}));


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var index_1 = __webpack_require__(0);
var empty = {};
var DropRepeatsOperator = (function () {
    function DropRepeatsOperator(ins, fn) {
        this.ins = ins;
        this.fn = fn;
        this.type = 'dropRepeats';
        this.out = null;
        this.v = empty;
    }
    DropRepeatsOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    DropRepeatsOperator.prototype._stop = function () {
        this.ins._remove(this);
        this.out = null;
        this.v = empty;
    };
    DropRepeatsOperator.prototype.isEq = function (x, y) {
        return this.fn ? this.fn(x, y) : x === y;
    };
    DropRepeatsOperator.prototype._n = function (t) {
        var u = this.out;
        if (!u)
            return;
        var v = this.v;
        if (v !== empty && this.isEq(t, v))
            return;
        this.v = Array.isArray(t) ? t.slice() : t;
        u._n(t);
    };
    DropRepeatsOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        u._e(err);
    };
    DropRepeatsOperator.prototype._c = function () {
        var u = this.out;
        if (!u)
            return;
        u._c();
    };
    return DropRepeatsOperator;
}());
exports.DropRepeatsOperator = DropRepeatsOperator;
/**
 * Drops consecutive duplicate values in a stream.
 *
 * Marble diagram:
 *
 * ```text
 * --1--2--1--1--1--2--3--4--3--3|
 *     dropRepeats
 * --1--2--1--------2--3--4--3---|
 * ```
 *
 * Example:
 *
 * ```js
 * import dropRepeats from 'xstream/extra/dropRepeats'
 *
 * const stream = xs.of(1, 2, 1, 1, 1, 2, 3, 4, 3, 3)
 *   .compose(dropRepeats())
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > 1
 * > 2
 * > 1
 * > 2
 * > 3
 * > 4
 * > 3
 * > completed
 * ```
 *
 * Example with a custom isEqual function:
 *
 * ```js
 * import dropRepeats from 'xstream/extra/dropRepeats'
 *
 * const stream = xs.of('a', 'b', 'a', 'A', 'B', 'b')
 *   .compose(dropRepeats((x, y) => x.toLowerCase() === y.toLowerCase()))
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > a
 * > b
 * > a
 * > B
 * > completed
 * ```
 *
 * @param {Function} isEqual An optional function of type
 * `(x: T, y: T) => boolean` that takes an event from the input stream and
 * checks if it is equal to previous event, by returning a boolean.
 * @return {Stream}
 */
function dropRepeats(isEqual) {
    if (isEqual === void 0) { isEqual = void 0; }
    return function dropRepeatsOperator(ins) {
        return new index_1.Stream(new DropRepeatsOperator(ins, isEqual));
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = dropRepeats;
//# sourceMappingURL=dropRepeats.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(16);
var HTMLSource = (function () {
    function HTMLSource(html$, _name) {
        this._name = _name;
        this._html$ = html$;
        this._empty$ = adapt_1.adapt(xstream_1.default.empty());
    }
    HTMLSource.prototype.elements = function () {
        var out = adapt_1.adapt(this._html$);
        out._isCycleSource = this._name;
        return out;
    };
    HTMLSource.prototype.select = function (selector) {
        return new HTMLSource(xstream_1.default.empty(), this._name);
    };
    HTMLSource.prototype.events = function (eventType, options) {
        var out = this._empty$;
        out._isCycleSource = this._name;
        return out;
    };
    return HTMLSource;
}());
exports.HTMLSource = HTMLSource;
//# sourceMappingURL=HTMLSource.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var adapt_1 = __webpack_require__(16);
var DocumentDOMSource_1 = __webpack_require__(62);
var BodyDOMSource_1 = __webpack_require__(61);
var ElementFinder_1 = __webpack_require__(63);
var fromEvent_1 = __webpack_require__(25);
var isolate_1 = __webpack_require__(68);
var EventDelegator_1 = __webpack_require__(64);
var utils_1 = __webpack_require__(14);
var eventTypesThatDontBubble = [
    "blur",
    "canplay",
    "canplaythrough",
    "change",
    "durationchange",
    "emptied",
    "ended",
    "focus",
    "load",
    "loadeddata",
    "loadedmetadata",
    "mouseenter",
    "mouseleave",
    "pause",
    "play",
    "playing",
    "ratechange",
    "reset",
    "scroll",
    "seeked",
    "seeking",
    "stalled",
    "submit",
    "suspend",
    "timeupdate",
    "unload",
    "volumechange",
    "waiting",
];
function determineUseCapture(eventType, options) {
    var result = false;
    if (typeof options.useCapture === 'boolean') {
        result = options.useCapture;
    }
    if (eventTypesThatDontBubble.indexOf(eventType) !== -1) {
        result = true;
    }
    return result;
}
function filterBasedOnIsolation(domSource, fullScope) {
    return function filterBasedOnIsolationOperator(rootElement$) {
        var initialState = {
            wasIsolated: false,
            shouldPass: false,
            element: null,
        };
        return rootElement$
            .fold(function checkIfShouldPass(state, element) {
            var isIsolated = !!domSource._isolateModule.getElement(fullScope);
            var shouldPass = isIsolated && !state.wasIsolated;
            return { wasIsolated: isIsolated, shouldPass: shouldPass, element: element };
        }, initialState)
            .drop(1)
            .filter(function (s) { return s.shouldPass; })
            .map(function (s) { return s.element; });
    };
}
var MainDOMSource = (function () {
    function MainDOMSource(_rootElement$, _sanitation$, _namespace, _isolateModule, _delegators, _name) {
        if (_namespace === void 0) { _namespace = []; }
        var _this = this;
        this._rootElement$ = _rootElement$;
        this._sanitation$ = _sanitation$;
        this._namespace = _namespace;
        this._isolateModule = _isolateModule;
        this._delegators = _delegators;
        this._name = _name;
        this.isolateSource = isolate_1.isolateSource;
        this.isolateSink = function (sink, scope) {
            var prevFullScope = utils_1.getFullScope(_this._namespace);
            var nextFullScope = [prevFullScope, scope].filter(function (x) { return !!x; }).join('-');
            return isolate_1.isolateSink(sink, nextFullScope);
        };
    }
    MainDOMSource.prototype.elements = function () {
        var output$;
        if (this._namespace.length === 0) {
            output$ = this._rootElement$;
        }
        else {
            var elementFinder_1 = new ElementFinder_1.ElementFinder(this._namespace, this._isolateModule);
            output$ = this._rootElement$.map(function (el) { return elementFinder_1.call(el); });
        }
        var out = adapt_1.adapt(output$.remember());
        out._isCycleSource = this._name;
        return out;
    };
    Object.defineProperty(MainDOMSource.prototype, "namespace", {
        get: function () {
            return this._namespace;
        },
        enumerable: true,
        configurable: true
    });
    MainDOMSource.prototype.select = function (selector) {
        if (typeof selector !== 'string') {
            throw new Error("DOM driver's select() expects the argument to be a " +
                "string as a CSS selector");
        }
        if (selector === 'document') {
            return new DocumentDOMSource_1.DocumentDOMSource(this._name);
        }
        if (selector === 'body') {
            return new BodyDOMSource_1.BodyDOMSource(this._name);
        }
        var trimmedSelector = selector.trim();
        var childNamespace = trimmedSelector === ":root" ?
            this._namespace :
            this._namespace.concat(trimmedSelector);
        return new MainDOMSource(this._rootElement$, this._sanitation$, childNamespace, this._isolateModule, this._delegators, this._name);
    };
    MainDOMSource.prototype.events = function (eventType, options) {
        if (options === void 0) { options = {}; }
        if (typeof eventType !== "string") {
            throw new Error("DOM driver's events() expects argument to be a " +
                "string representing the event type to listen for.");
        }
        var useCapture = determineUseCapture(eventType, options);
        var namespace = this._namespace;
        var fullScope = utils_1.getFullScope(namespace);
        var keyParts = [eventType, useCapture];
        if (fullScope) {
            keyParts.push(fullScope);
        }
        var key = keyParts.join('~');
        var domSource = this;
        var rootElement$;
        if (fullScope) {
            rootElement$ = this._rootElement$
                .compose(filterBasedOnIsolation(domSource, fullScope));
        }
        else {
            rootElement$ = this._rootElement$.take(2);
        }
        var event$ = rootElement$
            .map(function setupEventDelegatorOnTopElement(rootElement) {
            // Event listener just for the root element
            if (!namespace || namespace.length === 0) {
                return fromEvent_1.fromEvent(rootElement, eventType, useCapture);
            }
            // Event listener on the origin element as an EventDelegator
            var delegators = domSource._delegators;
            var origin = domSource._isolateModule.getElement(fullScope) || rootElement;
            var delegator;
            if (delegators.has(key)) {
                delegator = delegators.get(key);
                delegator.updateOrigin(origin);
            }
            else {
                delegator = new EventDelegator_1.EventDelegator(origin, eventType, useCapture, domSource._isolateModule);
                delegators.set(key, delegator);
            }
            if (fullScope) {
                domSource._isolateModule.addEventDelegator(fullScope, delegator);
            }
            var subject = delegator.createDestination(namespace);
            return subject;
        })
            .flatten();
        var out = adapt_1.adapt(event$);
        out._isCycleSource = domSource._name;
        return out;
    };
    MainDOMSource.prototype.dispose = function () {
        this._sanitation$.shamefullySendNext(null);
        this._isolateModule.reset();
    };
    return MainDOMSource;
}());
exports.MainDOMSource = MainDOMSource;
//# sourceMappingURL=MainDOMSource.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ScopeChecker = (function () {
    function ScopeChecker(fullScope, isolateModule) {
        this.fullScope = fullScope;
        this.isolateModule = isolateModule;
    }
    /**
     * Checks whether the given element is *directly* in the scope of this
     * scope checker. Being contained *indirectly* through other scopes
     * is not valid. This is crucial for implementing parent-child isolation,
     * so that the parent selectors don't search inside a child scope.
     */
    ScopeChecker.prototype.isDirectlyInScope = function (leaf) {
        for (var el = leaf; el; el = el.parentElement) {
            var fullScope = this.isolateModule.getFullScope(el);
            if (fullScope && fullScope !== this.fullScope) {
                return false;
            }
            if (fullScope) {
                return true;
            }
        }
        return true;
    };
    return ScopeChecker;
}());
exports.ScopeChecker = ScopeChecker;
//# sourceMappingURL=ScopeChecker.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function createMatchesSelector() {
    var vendor;
    try {
        var proto = Element.prototype;
        vendor = proto.matches
            || proto.matchesSelector
            || proto.webkitMatchesSelector
            || proto.mozMatchesSelector
            || proto.msMatchesSelector
            || proto.oMatchesSelector;
    }
    catch (err) {
        vendor = null;
    }
    return function match(elem, selector) {
        if (vendor) {
            return vendor.call(elem, selector);
        }
        var nodes = elem.parentNode.querySelectorAll(selector);
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i] === elem) {
                return true;
            }
        }
        return false;
    };
}
exports.matchesSelector = createMatchesSelector();
//# sourceMappingURL=matchesSelector.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};

var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};

var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = exports.supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

  return window.history && 'pushState' in window.history;
};

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Inspired by Google Closure:
// http://closure-library.googlecode.com/svn/docs/
// closure_goog_array_array.js.html#goog.array.clear



var value = __webpack_require__(9);

module.exports = function () {
	value(this).length = 0;
	return this;
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = Object.create, getPrototypeOf = Object.getPrototypeOf
  , x = {};

module.exports = function (/*customCreate*/) {
	var setPrototypeOf = Object.setPrototypeOf
	  , customCreate = arguments[0] || create;
	if (typeof setPrototypeOf !== 'function') return false;
	return getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Big thanks to @WebReflection for sorting this out
// https://gist.github.com/WebReflection/5593554



var isObject      = __webpack_require__(98)
  , value         = __webpack_require__(9)

  , isPrototypeOf = Object.prototype.isPrototypeOf
  , defineProperty = Object.defineProperty
  , nullDesc = { configurable: true, enumerable: false, writable: true,
		value: undefined }
  , validate;

validate = function (obj, prototype) {
	value(obj);
	if ((prototype === null) || isObject(prototype)) return obj;
	throw new TypeError('Prototype must be null or an object');
};

module.exports = (function (status) {
	var fn, set;
	if (!status) return null;
	if (status.level === 2) {
		if (status.set) {
			set = status.set;
			fn = function (obj, prototype) {
				set.call(validate(obj, prototype), prototype);
				return obj;
			};
		} else {
			fn = function (obj, prototype) {
				validate(obj, prototype).__proto__ = prototype;
				return obj;
			};
		}
	} else {
		fn = function self(obj, prototype) {
			var isNullBase;
			validate(obj, prototype);
			isNullBase = isPrototypeOf.call(self.nullPolyfill, obj);
			if (isNullBase) delete self.nullPolyfill.__proto__;
			if (prototype === null) prototype = self.nullPolyfill;
			obj.__proto__ = prototype;
			if (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);
			return obj;
		};
	}
	return Object.defineProperty(fn, 'level', { configurable: false,
		enumerable: false, writable: false, value: status.level });
}((function () {
	var x = Object.create(null), y = {}, set
	  , desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');

	if (desc) {
		try {
			set = desc.set; // Opera crashes at this point
			set.call(x, y);
		} catch (ignore) { }
		if (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };
	}

	x.__proto__ = y;
	if (Object.getPrototypeOf(x) === y) return { level: 2 };

	x = {};
	x.__proto__ = y;
	if (Object.getPrototypeOf(x) === y) return { level: 1 };

	return false;
}())));

__webpack_require__(95);


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(105)()
	? String.prototype.contains
	: __webpack_require__(106);


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isIterable = __webpack_require__(110);

module.exports = function (value) {
	if (!isIterable(value)) throw new TypeError(value + " is not iterable");
	return value;
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(112)() ? Map : __webpack_require__(116);


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function selectorParser(_a) {
    var sel = _a.sel;
    var hashIdx = sel.indexOf('#');
    var dotIdx = sel.indexOf('.', hashIdx);
    var hash = hashIdx > 0 ? hashIdx : sel.length;
    var dot = dotIdx > 0 ? dotIdx : sel.length;
    var tagName = hashIdx !== -1 || dotIdx !== -1 ?
        sel.slice(0, Math.min(hash, dot)) :
        sel;
    var id = hash < dot ? sel.slice(hash + 1, dot) : void 0;
    var className = dotIdx > 0 ? sel.slice(dot + 1).replace(/\./g, ' ') : void 0;
    return {
        tagName: tagName,
        id: id,
        className: className,
    };
}
exports.selectorParser = selectorParser;
//# sourceMappingURL=selectorParser.js.map

/***/ }),
/* 50 */
/***/ (function(module, exports) {


// All SVG children elements, not in this list, should self-close

exports.CONTAINER = {
  // http://www.w3.org/TR/SVG/intro.html#TermContainerElement
  'a': true,
  'defs': true,
  'glyph': true,
  'g': true,
  'marker': true,
  'mask': true,
  'missing-glyph': true,
  'pattern': true,
  'svg': true,
  'switch': true,
  'symbol': true,

  // http://www.w3.org/TR/SVG/intro.html#TermDescriptiveElement
  'desc': true,
  'metadata': true,
  'title': true
}

// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements

exports.VOID = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
}


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function createElement(tagName) {
    return document.createElement(tagName);
}
function createElementNS(namespaceURI, qualifiedName) {
    return document.createElementNS(namespaceURI, qualifiedName);
}
function createTextNode(text) {
    return document.createTextNode(text);
}
function createComment(text) {
    return document.createComment(text);
}
function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
    node.removeChild(child);
}
function appendChild(node, child) {
    node.appendChild(child);
}
function parentNode(node) {
    return node.parentNode;
}
function nextSibling(node) {
    return node.nextSibling;
}
function tagName(elm) {
    return elm.tagName;
}
function setTextContent(node, text) {
    node.textContent = text;
}
function getTextContent(node) {
    return node.textContent;
}
function isElement(node) {
    return node.nodeType === 1;
}
function isText(node) {
    return node.nodeType === 3;
}
function isComment(node) {
    return node.nodeType === 8;
}
exports.htmlDomApi = {
    createElement: createElement,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    getTextContent: getTextContent,
    isElement: isElement,
    isText: isText,
    isComment: isComment,
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.htmlDomApi;
//# sourceMappingURL=htmldomapi.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.array = Array.isArray;
function primitive(s) {
    return typeof s === 'string' || typeof s === 'number';
}
exports.primitive = primitive;
//# sourceMappingURL=is.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var h_1 = __webpack_require__(18);
function copyToThunk(vnode, thunk) {
    thunk.elm = vnode.elm;
    vnode.data.fn = thunk.data.fn;
    vnode.data.args = thunk.data.args;
    thunk.data = vnode.data;
    thunk.children = vnode.children;
    thunk.text = vnode.text;
    thunk.elm = vnode.elm;
}
function init(thunk) {
    var cur = thunk.data;
    var vnode = cur.fn.apply(undefined, cur.args);
    copyToThunk(vnode, thunk);
}
function prepatch(oldVnode, thunk) {
    var i, old = oldVnode.data, cur = thunk.data;
    var oldArgs = old.args, args = cur.args;
    if (old.fn !== cur.fn || oldArgs.length !== args.length) {
        copyToThunk(cur.fn.apply(undefined, args), thunk);
    }
    for (i = 0; i < args.length; ++i) {
        if (oldArgs[i] !== args[i]) {
            copyToThunk(cur.fn.apply(undefined, args), thunk);
            return;
        }
    }
    copyToThunk(oldVnode, thunk);
}
exports.thunk = function thunk(sel, key, fn, args) {
    if (args === undefined) {
        args = fn;
        fn = key;
        key = undefined;
    }
    return h_1.h(sel, {
        key: key,
        hook: { init: init, prepatch: prepatch },
        fn: fn,
        args: args
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.thunk;
//# sourceMappingURL=thunk.js.map

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(8);
var isolate_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(1);
var xstream_1 = __webpack_require__(0);
var Menu;
(function (Menu) {
    function render(arg1, arg2) {
        if (arg2 === void 0) { arg2 = []; }
        return common_1.renderPropsAndContent(menu, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    Menu.render = render;
    function run(sources, scope) {
        function main(sources) {
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of([]);
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var click$ = sources.DOM.select(".menu > .item").events("click");
            var items$ = sources.content$.map(function (c) { return isContent(c) ? c : c.main; }).remember();
            var clickedId$ = click$.map(function (ev) { return parseInt(ev.currentTarget.id); })
                .filter(function (n) { return !isNaN(n) && typeof (n) !== "undefined"; });
            var clickedItem$ = items$.map(function (items) { return clickedId$.map(function (id) { return items[id]; }); }).flatten()
                .filter(function (item) { return !item.disabled; });
            var vtree$ = xstream_1.default.combine(sources.props$, items$).map(function (_a) {
                var props = _a[0], content = _a[1];
                return menu({ props: props, content: content });
            });
            return {
                DOM: vtree$,
                events: function (type) { return sources.DOM.select(".menu").events(type); },
                value$: clickedItem$
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Menu.run = run;
    function menu(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props, content.length) } }, content.map(renderItem));
    }
    function getClassname(props, length) {
        var className = "ui";
        if (props.secondary) {
            className += " secondary";
        }
        if (props.fluid) {
            className += " fluid";
        }
        if (props.right) {
            className += " right";
        }
        if (props.pointing) {
            className += " pointing";
        }
        if (props.tabular) {
            className += " tabular";
        }
        if (props.text) {
            className += " text";
        }
        if (props.vertical) {
            className += " vertical";
        }
        if (props.pagination) {
            className += " pagination";
        }
        if (props.fixed) {
            className += " fixed";
        }
        if (props.stackable) {
            className += " stackable";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.icon) {
            className += " icon";
        }
        if (props.labeledIcons) {
            className += " labeled icon";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.borderless) {
            className += " borderless";
        }
        if (props.equalWidth) {
            className += utils_1.numToText(length) + " item";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += " menu";
        if (props.submenu) {
            className = className.substring(3);
        }
        return className;
    }
    function getItemClassname(item) {
        var className = "";
        if (item.active) {
            className += " active";
        }
        if (item.header) {
            className += " header";
        }
        if (item.fitted) {
            className += " fitted";
        }
        if (item.verticallyFitted) {
            className += " vertically fitted";
        }
        if (item.horizontallyFitted) {
            className += " horizontally fitted";
        }
        if (item.link) {
            className += " link";
        }
        if (item.icon) {
            className += " icon";
        }
        if (item.disabled) {
            className += " disabled";
        }
        if (item.dropdown) {
            className += " dropdown";
        }
        if (typeof (item.float) !== "undefined") {
            className += enums_1.Float.ToClassname(item.float);
        }
        if (typeof (item.color) !== "undefined") {
            className += enums_1.Color.ToClassname(item.color);
        }
        className += " item";
        className = className.substring(1);
        return className;
    }
    function renderItem(item, id) {
        if (item.divider) {
            return dom_1.div({ props: { className: "divider" } });
        }
        if (item.headerOnly) {
            return dom_1.div({ props: { className: "header" } }, item.main);
        }
        if (item.rightMenu) {
            return dom_1.div({ props: { className: "right menu" } }, item.main.map(renderItem));
        }
        if (item.dropdown) {
            var content = item.main;
            content.data.props.className += " item";
            return content;
        }
        if (item.href) {
            return dom_1.a({ props: { className: getItemClassname(item), id: id, href: item.href } }, item.main);
        }
        return dom_1.div({ props: { className: getItemClassname(item), id: id } }, item.main);
    }
    function isContent(obj) {
        return obj instanceof Array && (obj.length === 0 ||
            typeof (obj[0].main) !== "undefined" ||
            typeof (obj[0].divider) !== "undefined" ||
            typeof (obj[0].headerOnly) !== "undefined");
    }
})(Menu = exports.Menu || (exports.Menu = {}));


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(193));
__export(__webpack_require__(201));
__export(__webpack_require__(211));
__export(__webpack_require__(217));
__export(__webpack_require__(5));
__export(__webpack_require__(3));


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var index_1 = __webpack_require__(0);
var DebounceOperator = (function () {
    function DebounceOperator(dt, ins) {
        this.dt = dt;
        this.ins = ins;
        this.type = 'debounce';
        this.out = null;
        this.id = null;
    }
    DebounceOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    DebounceOperator.prototype._stop = function () {
        this.ins._remove(this);
        this.out = null;
        this.id = null;
    };
    DebounceOperator.prototype.clearInterval = function () {
        var id = this.id;
        if (id !== null) {
            clearInterval(id);
        }
        this.id = null;
    };
    DebounceOperator.prototype._n = function (t) {
        var _this = this;
        var u = this.out;
        if (!u)
            return;
        this.clearInterval();
        this.id = setInterval(function () {
            _this.clearInterval();
            u._n(t);
        }, this.dt);
    };
    DebounceOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        this.clearInterval();
        u._e(err);
    };
    DebounceOperator.prototype._c = function () {
        var u = this.out;
        if (!u)
            return;
        this.clearInterval();
        u._c();
    };
    return DebounceOperator;
}());
/**
 * Delays events until a certain amount of silence has passed. If that timespan
 * of silence is not met the event is dropped.
 *
 * Marble diagram:
 *
 * ```text
 * --1----2--3--4----5|
 *     debounce(60)
 * -----1----------4--|
 * ```
 *
 * Example:
 *
 * ```js
 * import fromDiagram from 'xstream/extra/fromDiagram'
 * import debounce from 'xstream/extra/debounce'
 *
 * const stream = fromDiagram('--1----2--3--4----5|')
 *  .compose(debounce(60))
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > 1
 * > 4
 * > completed
 * ```
 *
 * @param {number} period The amount of silence required in milliseconds.
 * @return {Stream}
 */
function debounce(period) {
    return function debounceOperator(ins) {
        return new index_1.Stream(new DebounceOperator(period, ins));
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var index_1 = __webpack_require__(0);
var DelayOperator = (function () {
    function DelayOperator(dt, ins) {
        this.dt = dt;
        this.ins = ins;
        this.type = 'delay';
        this.out = null;
    }
    DelayOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    DelayOperator.prototype._stop = function () {
        this.ins._remove(this);
        this.out = null;
    };
    DelayOperator.prototype._n = function (t) {
        var u = this.out;
        if (!u)
            return;
        var id = setInterval(function () {
            u._n(t);
            clearInterval(id);
        }, this.dt);
    };
    DelayOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        var id = setInterval(function () {
            u._e(err);
            clearInterval(id);
        }, this.dt);
    };
    DelayOperator.prototype._c = function () {
        var u = this.out;
        if (!u)
            return;
        var id = setInterval(function () {
            u._c();
            clearInterval(id);
        }, this.dt);
    };
    return DelayOperator;
}());
/**
 * Delays periodic events by a given time period.
 *
 * Marble diagram:
 *
 * ```text
 * 1----2--3--4----5|
 *     delay(60)
 * ---1----2--3--4----5|
 * ```
 *
 * Example:
 *
 * ```js
 * import fromDiagram from 'xstream/extra/fromDiagram'
 * import delay from 'xstream/extra/delay'
 *
 * const stream = fromDiagram('1----2--3--4----5|')
 *  .compose(delay(60))
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > 1  (after 60 ms)
 * > 2  (after 160 ms)
 * > 3  (after 220 ms)
 * > 4  (after 280 ms)
 * > 5  (after 380 ms)
 * > completed
 * ```
 *
 * @param {number} period The amount of silence required in milliseconds.
 * @return {Stream}
 */
function delay(period) {
    return function delayOperator(ins) {
        return new index_1.Stream(new DelayOperator(period, ins));
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = delay;
//# sourceMappingURL=delay.js.map

/***/ }),
/* 59 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_run_1 = __webpack_require__(81);
var dom_1 = __webpack_require__(1);
var history_1 = __webpack_require__(75);
var xstream_1 = __webpack_require__(0);
var router_1 = __webpack_require__(182);
var routes_1 = __webpack_require__(183);
var layout_1 = __webpack_require__(180);
function app(drivers) {
    var page = router_1.default(Object.assign({}, drivers, { routes: routes_1.default }));
    var layout = layout_1.Layout.run(drivers, page);
    var sinks = {
        DOM: layout.DOM.map(function (layout) { return dom_1.div("#app.app", layout); }),
        router: xstream_1.default.merge(page.router, layout.router),
    };
    return sinks;
}
xstream_run_1.run(app, {
    DOM: dom_1.makeDOMDriver(".app"),
    router: history_1.captureClicks(history_1.makeHistoryDriver())
});


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(16);
var fromEvent_1 = __webpack_require__(25);
var BodyDOMSource = (function () {
    function BodyDOMSource(_name) {
        this._name = _name;
    }
    BodyDOMSource.prototype.select = function (selector) {
        // This functionality is still undefined/undecided.
        return this;
    };
    BodyDOMSource.prototype.elements = function () {
        var out = adapt_1.adapt(xstream_1.default.of(document.body));
        out._isCycleSource = this._name;
        return out;
    };
    BodyDOMSource.prototype.events = function (eventType, options) {
        if (options === void 0) { options = {}; }
        var stream;
        if (options && typeof options.useCapture === 'boolean') {
            stream = fromEvent_1.fromEvent(document.body, eventType, options.useCapture);
        }
        else {
            stream = fromEvent_1.fromEvent(document.body, eventType);
        }
        var out = adapt_1.adapt(stream);
        out._isCycleSource = this._name;
        return out;
    };
    return BodyDOMSource;
}());
exports.BodyDOMSource = BodyDOMSource;
//# sourceMappingURL=BodyDOMSource.js.map

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(16);
var fromEvent_1 = __webpack_require__(25);
var DocumentDOMSource = (function () {
    function DocumentDOMSource(_name) {
        this._name = _name;
    }
    DocumentDOMSource.prototype.select = function (selector) {
        // This functionality is still undefined/undecided.
        return this;
    };
    DocumentDOMSource.prototype.elements = function () {
        var out = adapt_1.adapt(xstream_1.default.of(document));
        out._isCycleSource = this._name;
        return out;
    };
    DocumentDOMSource.prototype.events = function (eventType, options) {
        if (options === void 0) { options = {}; }
        var stream;
        if (options && typeof options.useCapture === 'boolean') {
            stream = fromEvent_1.fromEvent(document, eventType, options.useCapture);
        }
        else {
            stream = fromEvent_1.fromEvent(document, eventType);
        }
        var out = adapt_1.adapt(stream);
        out._isCycleSource = this._name;
        return out;
    };
    return DocumentDOMSource;
}());
exports.DocumentDOMSource = DocumentDOMSource;
//# sourceMappingURL=DocumentDOMSource.js.map

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ScopeChecker_1 = __webpack_require__(38);
var utils_1 = __webpack_require__(14);
var matchesSelector_1 = __webpack_require__(39);
function toElArray(input) {
    return Array.prototype.slice.call(input);
}
var ElementFinder = (function () {
    function ElementFinder(namespace, isolateModule) {
        this.namespace = namespace;
        this.isolateModule = isolateModule;
    }
    ElementFinder.prototype.call = function (rootElement) {
        var namespace = this.namespace;
        var selector = utils_1.getSelectors(namespace);
        if (!selector) {
            return rootElement;
        }
        var fullScope = utils_1.getFullScope(namespace);
        var scopeChecker = new ScopeChecker_1.ScopeChecker(fullScope, this.isolateModule);
        var topNode = fullScope ?
            this.isolateModule.getElement(fullScope) || rootElement :
            rootElement;
        var topNodeMatchesSelector = !!fullScope && !!selector && matchesSelector_1.matchesSelector(topNode, selector);
        return toElArray(topNode.querySelectorAll(selector))
            .filter(scopeChecker.isDirectlyInScope, scopeChecker)
            .concat(topNodeMatchesSelector ? [topNode] : []);
    };
    return ElementFinder;
}());
exports.ElementFinder = ElementFinder;
//# sourceMappingURL=ElementFinder.js.map

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var ScopeChecker_1 = __webpack_require__(38);
var utils_1 = __webpack_require__(14);
var matchesSelector_1 = __webpack_require__(39);
/**
 * Finds (with binary search) index of the destination that id equal to searchId
 * among the destinations in the given array.
 */
function indexOf(arr, searchId) {
    var minIndex = 0;
    var maxIndex = arr.length - 1;
    var currentIndex;
    var current;
    while (minIndex <= maxIndex) {
        currentIndex = (minIndex + maxIndex) / 2 | 0; // tslint:disable-line:no-bitwise
        current = arr[currentIndex];
        var currentId = current.id;
        if (currentId < searchId) {
            minIndex = currentIndex + 1;
        }
        else if (currentId > searchId) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}
/**
 * Manages "Event delegation", by connecting an origin with multiple
 * destinations.
 *
 * Attaches a DOM event listener to the DOM element called the "origin",
 * and delegates events to "destinations", which are subjects as outputs
 * for the DOMSource. Simulates bubbling or capturing, with regards to
 * isolation boundaries too.
 */
var EventDelegator = (function () {
    function EventDelegator(origin, eventType, useCapture, isolateModule) {
        var _this = this;
        this.origin = origin;
        this.eventType = eventType;
        this.useCapture = useCapture;
        this.isolateModule = isolateModule;
        this.destinations = [];
        this._lastId = 0;
        if (useCapture) {
            this.listener = function (ev) { return _this.capture(ev); };
        }
        else {
            this.listener = function (ev) { return _this.bubble(ev); };
        }
        origin.addEventListener(eventType, this.listener, useCapture);
    }
    EventDelegator.prototype.updateOrigin = function (newOrigin) {
        this.origin.removeEventListener(this.eventType, this.listener, this.useCapture);
        newOrigin.addEventListener(this.eventType, this.listener, this.useCapture);
        this.origin = newOrigin;
    };
    /**
     * Creates a *new* destination given the namespace and returns the subject
     * representing the destination of events. Is not referentially transparent,
     * will always return a different output for the same input.
     */
    EventDelegator.prototype.createDestination = function (namespace) {
        var _this = this;
        var id = this._lastId++;
        var selector = utils_1.getSelectors(namespace);
        var scopeChecker = new ScopeChecker_1.ScopeChecker(utils_1.getFullScope(namespace), this.isolateModule);
        var subject = xstream_1.default.create({
            start: function () { },
            stop: function () {
                if ('requestIdleCallback' in window) {
                    requestIdleCallback(function () {
                        _this.removeDestination(id);
                    });
                }
                else {
                    _this.removeDestination(id);
                }
            },
        });
        var destination = { id: id, selector: selector, scopeChecker: scopeChecker, subject: subject };
        this.destinations.push(destination);
        return subject;
    };
    /**
     * Removes the destination that has the given id.
     */
    EventDelegator.prototype.removeDestination = function (id) {
        var i = indexOf(this.destinations, id);
        i >= 0 && this.destinations.splice(i, 1); // tslint:disable-line:no-unused-expression
    };
    EventDelegator.prototype.capture = function (ev) {
        var n = this.destinations.length;
        for (var i = 0; i < n; i++) {
            var dest = this.destinations[i];
            if (matchesSelector_1.matchesSelector(ev.target, dest.selector)) {
                dest.subject._n(ev);
            }
        }
    };
    EventDelegator.prototype.bubble = function (rawEvent) {
        var origin = this.origin;
        if (!origin.contains(rawEvent.currentTarget)) {
            return;
        }
        var roof = origin.parentElement;
        var ev = this.patchEvent(rawEvent);
        for (var el = ev.target; el && el !== roof; el = el.parentElement) {
            if (!origin.contains(el)) {
                ev.stopPropagation();
            }
            if (ev.propagationHasBeenStopped) {
                return;
            }
            this.matchEventAgainstDestinations(el, ev);
        }
    };
    EventDelegator.prototype.patchEvent = function (event) {
        var pEvent = event;
        pEvent.propagationHasBeenStopped = false;
        var oldStopPropagation = pEvent.stopPropagation;
        pEvent.stopPropagation = function stopPropagation() {
            oldStopPropagation.call(this);
            this.propagationHasBeenStopped = true;
        };
        return pEvent;
    };
    EventDelegator.prototype.matchEventAgainstDestinations = function (el, ev) {
        var n = this.destinations.length;
        for (var i = 0; i < n; i++) {
            var dest = this.destinations[i];
            if (!dest.scopeChecker.isDirectlyInScope(el)) {
                continue;
            }
            if (matchesSelector_1.matchesSelector(el, dest.selector)) {
                this.mutateEventCurrentTarget(ev, el);
                dest.subject._n(ev);
            }
        }
    };
    EventDelegator.prototype.mutateEventCurrentTarget = function (event, currentTargetElement) {
        try {
            Object.defineProperty(event, "currentTarget", {
                value: currentTargetElement,
                configurable: true,
            });
        }
        catch (err) {
            console.log("please use event.ownerTarget");
        }
        event.ownerTarget = currentTargetElement;
    };
    return EventDelegator;
}());
exports.EventDelegator = EventDelegator;
//# sourceMappingURL=EventDelegator.js.map

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var MapPolyfill = __webpack_require__(47);
var IsolateModule = (function () {
    function IsolateModule() {
        this.elementsByFullScope = new MapPolyfill();
        this.delegatorsByFullScope = new MapPolyfill();
        this.fullScopesBeingUpdated = [];
    }
    IsolateModule.prototype.cleanupVNode = function (_a) {
        var data = _a.data, elm = _a.elm;
        var fullScope = (data || {}).isolate || '';
        var isCurrentElm = this.elementsByFullScope.get(fullScope) === elm;
        var isScopeBeingUpdated = this.fullScopesBeingUpdated.indexOf(fullScope) >= 0;
        if (fullScope && isCurrentElm && !isScopeBeingUpdated) {
            this.elementsByFullScope.delete(fullScope);
            this.delegatorsByFullScope.delete(fullScope);
        }
    };
    IsolateModule.prototype.getElement = function (fullScope) {
        return this.elementsByFullScope.get(fullScope);
    };
    IsolateModule.prototype.getFullScope = function (elm) {
        var iterator = this.elementsByFullScope.entries();
        for (var result = iterator.next(); !!result.value; result = iterator.next()) {
            var _a = result.value, fullScope = _a[0], element = _a[1];
            if (elm === element) {
                return fullScope;
            }
        }
        return '';
    };
    IsolateModule.prototype.addEventDelegator = function (fullScope, eventDelegator) {
        var delegators = this.delegatorsByFullScope.get(fullScope);
        if (!delegators) {
            delegators = [];
            this.delegatorsByFullScope.set(fullScope, delegators);
        }
        delegators[delegators.length] = eventDelegator;
    };
    IsolateModule.prototype.reset = function () {
        this.elementsByFullScope.clear();
        this.delegatorsByFullScope.clear();
        this.fullScopesBeingUpdated = [];
    };
    IsolateModule.prototype.createModule = function () {
        var self = this;
        return {
            create: function (oldVNode, vNode) {
                var _a = oldVNode.data, oldData = _a === void 0 ? {} : _a;
                var elm = vNode.elm, _b = vNode.data, data = _b === void 0 ? {} : _b;
                var oldFullScope = oldData.isolate || '';
                var fullScope = data.isolate || '';
                // Update data structures with the newly-created element
                if (fullScope) {
                    self.fullScopesBeingUpdated.push(fullScope);
                    if (oldFullScope) {
                        self.elementsByFullScope.delete(oldFullScope);
                    }
                    self.elementsByFullScope.set(fullScope, elm);
                    // Update delegators for this scope
                    var delegators = self.delegatorsByFullScope.get(fullScope);
                    if (delegators) {
                        var len = delegators.length;
                        for (var i = 0; i < len; ++i) {
                            delegators[i].updateOrigin(elm);
                        }
                    }
                }
                if (oldFullScope && !fullScope) {
                    self.elementsByFullScope.delete(fullScope);
                }
            },
            update: function (oldVNode, vNode) {
                var _a = oldVNode.data, oldData = _a === void 0 ? {} : _a;
                var elm = vNode.elm, _b = vNode.data, data = _b === void 0 ? {} : _b;
                var oldFullScope = oldData.isolate || '';
                var fullScope = data.isolate || '';
                // Same element, but different scope, so update the data structures
                if (fullScope && fullScope !== oldFullScope) {
                    if (oldFullScope) {
                        self.elementsByFullScope.delete(oldFullScope);
                    }
                    self.elementsByFullScope.set(fullScope, elm);
                    var delegators = self.delegatorsByFullScope.get(oldFullScope);
                    if (delegators) {
                        self.delegatorsByFullScope.delete(oldFullScope);
                        self.delegatorsByFullScope.set(fullScope, delegators);
                    }
                }
                // Same element, but lost the scope, so update the data structures
                if (oldFullScope && !fullScope) {
                    self.elementsByFullScope.delete(oldFullScope);
                    self.delegatorsByFullScope.delete(oldFullScope);
                }
            },
            destroy: function (vNode) {
                self.cleanupVNode(vNode);
            },
            remove: function (vNode, cb) {
                self.cleanupVNode(vNode);
                cb();
            },
            post: function () {
                self.fullScopesBeingUpdated = [];
            },
        };
    };
    return IsolateModule;
}());
exports.IsolateModule = IsolateModule;
//# sourceMappingURL=IsolateModule.js.map

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var h_1 = __webpack_require__(18);
var classNameFromVNode_1 = __webpack_require__(128);
var selectorParser_1 = __webpack_require__(49);
var VNodeWrapper = (function () {
    function VNodeWrapper(rootElement) {
        this.rootElement = rootElement;
    }
    VNodeWrapper.prototype.call = function (vnode) {
        if (vnode === null) {
            return this.wrap([]);
        }
        var _a = selectorParser_1.selectorParser(vnode), selTagName = _a.tagName, selId = _a.id;
        var vNodeClassName = classNameFromVNode_1.classNameFromVNode(vnode);
        var vNodeData = vnode.data || {};
        var vNodeDataProps = vNodeData.props || {};
        var _b = vNodeDataProps.id, vNodeId = _b === void 0 ? selId : _b;
        var isVNodeAndRootElementIdentical = typeof vNodeId === 'string' &&
            vNodeId.toUpperCase() === this.rootElement.id.toUpperCase() &&
            selTagName.toUpperCase() === this.rootElement.tagName.toUpperCase() &&
            vNodeClassName.toUpperCase() === this.rootElement.className.toUpperCase();
        if (isVNodeAndRootElementIdentical) {
            return vnode;
        }
        return this.wrap([vnode]);
    };
    VNodeWrapper.prototype.wrap = function (children) {
        var _a = this.rootElement, tagName = _a.tagName, id = _a.id, className = _a.className;
        var selId = id ? "#" + id : '';
        var selClass = className ?
            "." + className.split(" ").join(".") : '';
        return h_1.h("" + tagName.toLowerCase() + selId + selClass, {}, children);
    };
    return VNodeWrapper;
}());
exports.VNodeWrapper = VNodeWrapper;
//# sourceMappingURL=VNodeWrapper.js.map

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var h_1 = __webpack_require__(18);
function isValidString(param) {
    return typeof param === 'string' && param.length > 0;
}
function isSelector(param) {
    return isValidString(param) && (param[0] === '.' || param[0] === '#');
}
function createTagFunction(tagName) {
    return function hyperscript(a, b, c) {
        var hasA = typeof a !== 'undefined';
        var hasB = typeof b !== 'undefined';
        var hasC = typeof c !== 'undefined';
        if (isSelector(a)) {
            if (hasB && hasC) {
                return h_1.h(tagName + a, b, c);
            }
            else if (hasB) {
                return h_1.h(tagName + a, b);
            }
            else {
                return h_1.h(tagName + a, {});
            }
        }
        else if (hasC) {
            return h_1.h(tagName + a, b, c);
        }
        else if (hasB) {
            return h_1.h(tagName, a, b);
        }
        else if (hasA) {
            return h_1.h(tagName, a);
        }
        else {
            return h_1.h(tagName, {});
        }
    };
}
var SVG_TAG_NAMES = [
    'a', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor',
    'animateMotion', 'animateTransform', 'circle', 'clipPath', 'colorProfile',
    'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',
    'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting',
    'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB',
    'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode',
    'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting',
    'feSpotlight', 'feTile', 'feTurbulence', 'filter', 'font', 'fontFace',
    'fontFaceFormat', 'fontFaceName', 'fontFaceSrc', 'fontFaceUri',
    'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image', 'line',
    'linearGradient', 'marker', 'mask', 'metadata', 'missingGlyph', 'mpath',
    'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'script',
    'set', 'stop', 'style', 'switch', 'symbol', 'text', 'textPath', 'title',
    'tref', 'tspan', 'use', 'view', 'vkern',
];
var svg = createTagFunction('svg');
SVG_TAG_NAMES.forEach(function (tag) {
    svg[tag] = createTagFunction(tag);
});
var TAG_NAMES = [
    'a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base',
    'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption',
    'cite', 'code', 'col', 'colgroup', 'dd', 'del', 'dfn', 'dir', 'div', 'dl',
    'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html',
    'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend',
    'li', 'link', 'main', 'map', 'mark', 'menu', 'meta', 'nav', 'noscript',
    'object', 'ol', 'optgroup', 'option', 'p', 'param', 'pre', 'progress', 'q',
    'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small',
    'source', 'span', 'strong', 'style', 'sub', 'sup', 'table', 'tbody', 'td',
    'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'u', 'ul', 'video',
];
var exported = { SVG_TAG_NAMES: SVG_TAG_NAMES, TAG_NAMES: TAG_NAMES, svg: svg, isSelector: isSelector, createTagFunction: createTagFunction };
TAG_NAMES.forEach(function (n) {
    exported[n] = createTagFunction(n);
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exported;
//# sourceMappingURL=hyperscript-helpers.js.map

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var utils_1 = __webpack_require__(14);
function isolateSource(source, scope) {
    return source.select(utils_1.SCOPE_PREFIX + scope);
}
exports.isolateSource = isolateSource;
function isolateSink(sink, fullScope) {
    return sink.map(function (vnode) {
        // Ignore if already had up-to-date full scope in vnode.data.isolate
        if (vnode.data && vnode.data.isolate) {
            var isolateData = vnode.data.isolate;
            var prevFullScopeNum = isolateData.replace(/(cycle|\-)/g, '');
            var fullScopeNum = fullScope.replace(/(cycle|\-)/g, '');
            if (isNaN(parseInt(prevFullScopeNum))
                || isNaN(parseInt(fullScopeNum))
                || prevFullScopeNum > fullScopeNum) {
                return vnode;
            }
        }
        // Insert up-to-date full scope in vnode.data.isolate, and also a key if needed
        vnode.data = vnode.data || {};
        vnode.data.isolate = fullScope;
        if (typeof vnode.key === 'undefined') {
            vnode.key = utils_1.SCOPE_PREFIX + fullScope;
        }
        return vnode;
    });
}
exports.isolateSink = isolateSink;
//# sourceMappingURL=isolate.js.map

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var snabbdom_1 = __webpack_require__(140);
var xstream_1 = __webpack_require__(0);
var MainDOMSource_1 = __webpack_require__(37);
var tovnode_1 = __webpack_require__(141);
var VNodeWrapper_1 = __webpack_require__(66);
var utils_1 = __webpack_require__(14);
var modules_1 = __webpack_require__(72);
var IsolateModule_1 = __webpack_require__(65);
var MapPolyfill = __webpack_require__(47);
function makeDOMDriverInputGuard(modules) {
    if (!Array.isArray(modules)) {
        throw new Error("Optional modules option must be " +
            "an array for snabbdom modules");
    }
}
function domDriverInputGuard(view$) {
    if (!view$
        || typeof view$.addListener !== "function"
        || typeof view$.fold !== "function") {
        throw new Error("The DOM driver function expects as input a Stream of " +
            "virtual DOM elements");
    }
}
function dropCompletion(input) {
    return xstream_1.default.merge(input, xstream_1.default.never());
}
function unwrapElementFromVNode(vnode) {
    return vnode.elm;
}
function reportSnabbdomError(err) {
    (console.error || console.log)(err);
}
function makeDOMDriver(container, options) {
    if (!options) {
        options = {};
    }
    var modules = options.modules || modules_1.default;
    var isolateModule = new IsolateModule_1.IsolateModule();
    var patch = snabbdom_1.init([isolateModule.createModule()].concat(modules));
    var rootElement = utils_1.getElement(container) || document.body;
    var vnodeWrapper = new VNodeWrapper_1.VNodeWrapper(rootElement);
    var delegators = new MapPolyfill();
    makeDOMDriverInputGuard(modules);
    function DOMDriver(vnode$, name) {
        if (name === void 0) { name = 'DOM'; }
        domDriverInputGuard(vnode$);
        var sanitation$ = xstream_1.default.create();
        var rootElement$ = xstream_1.default.merge(vnode$.endWhen(sanitation$), sanitation$)
            .map(function (vnode) { return vnodeWrapper.call(vnode); })
            .fold(patch, tovnode_1.toVNode(rootElement))
            .drop(1)
            .map(unwrapElementFromVNode)
            .compose(dropCompletion) // don't complete this stream
            .startWith(rootElement);
        // Start the snabbdom patching, over time
        var listener = { error: reportSnabbdomError };
        if (document.readyState === 'loading') {
            document.addEventListener('readystatechange', function () {
                if (document.readyState === 'interactive') {
                    rootElement$.addListener(listener);
                }
            });
        }
        else {
            rootElement$.addListener(listener);
        }
        return new MainDOMSource_1.MainDOMSource(rootElement$, sanitation$, [], isolateModule, delegators, name);
    }
    ;
    return DOMDriver;
}
exports.makeDOMDriver = makeDOMDriver;
//# sourceMappingURL=makeDOMDriver.js.map

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var HTMLSource_1 = __webpack_require__(36);
var init = __webpack_require__(129);
var modulesForHTML = __webpack_require__(132);
var defaultModules = [
    modulesForHTML.attributes,
    modulesForHTML.props,
    modulesForHTML.class,
    modulesForHTML.style,
];
var noop = function () { };
function makeHTMLDriver(effect, options) {
    if (!options) {
        options = {};
    }
    var modules = options.modules || defaultModules;
    var toHTML = init(modules);
    function htmlDriver(vnode$, name) {
        var html$ = vnode$.map(toHTML);
        html$.addListener({
            next: effect || noop,
            error: noop,
            complete: noop,
        });
        return new HTMLSource_1.HTMLSource(html$, name);
    }
    ;
    return htmlDriver;
}
exports.makeHTMLDriver = makeHTMLDriver;
//# sourceMappingURL=makeHTMLDriver.js.map

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(16);
var SCOPE_PREFIX = '___';
var MockedDOMSource = (function () {
    function MockedDOMSource(_mockConfig) {
        this._mockConfig = _mockConfig;
        if (_mockConfig['elements']) {
            this._elements = _mockConfig['elements'];
        }
        else {
            this._elements = adapt_1.adapt(xstream_1.default.empty());
        }
    }
    MockedDOMSource.prototype.elements = function () {
        var out = this._elements;
        out._isCycleSource = 'MockedDOM';
        return out;
    };
    MockedDOMSource.prototype.events = function (eventType, options) {
        var streamForEventType = this._mockConfig[eventType];
        var out = adapt_1.adapt(streamForEventType || xstream_1.default.empty());
        out._isCycleSource = 'MockedDOM';
        return out;
    };
    MockedDOMSource.prototype.select = function (selector) {
        var mockConfigForSelector = this._mockConfig[selector] || {};
        return new MockedDOMSource(mockConfigForSelector);
    };
    MockedDOMSource.prototype.isolateSource = function (source, scope) {
        return source.select('.' + SCOPE_PREFIX + scope);
    };
    MockedDOMSource.prototype.isolateSink = function (sink, scope) {
        return sink.map(function (vnode) {
            if (vnode.sel && vnode.sel.indexOf(SCOPE_PREFIX + scope) !== -1) {
                return vnode;
            }
            else {
                vnode.sel += "." + SCOPE_PREFIX + scope;
                return vnode;
            }
        });
    };
    return MockedDOMSource;
}());
exports.MockedDOMSource = MockedDOMSource;
function mockDOMSource(mockConfig) {
    return new MockedDOMSource(mockConfig);
}
exports.mockDOMSource = mockDOMSource;
//# sourceMappingURL=mockDOMSource.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var class_1 = __webpack_require__(136);
exports.ClassModule = class_1.default;
var props_1 = __webpack_require__(138);
exports.PropsModule = props_1.default;
var attributes_1 = __webpack_require__(135);
exports.AttrsModule = attributes_1.default;
var style_1 = __webpack_require__(139);
exports.StyleModule = style_1.default;
var dataset_1 = __webpack_require__(137);
exports.DatasetModule = dataset_1.default;
var modules = [style_1.default, class_1.default, props_1.default, attributes_1.default, dataset_1.default];
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = modules;
//# sourceMappingURL=modules.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var CLICK_EVENT = typeof document !== 'undefined' && document.ontouchstart ?
    'touchstart' :
    'click';
function which(ev) {
    if (typeof window === 'undefined') {
        return false;
    }
    var e = ev || window.event;
    return e.which === null ? e.button : e.which;
}
function sameOrigin(href) {
    if (typeof window === 'undefined') {
        return false;
    }
    return href && href.indexOf(window.location.origin) === 0;
}
function makeClickListener(push) {
    return function clickListener(event) {
        if (which(event) !== 1) {
            return;
        }
        if (event.metaKey || event.ctrlKey || event.shiftKey) {
            return;
        }
        if (event.defaultPrevented) {
            return;
        }
        var element = event.target;
        while (element && element.nodeName !== 'A') {
            element = element.parentNode;
        }
        if (!element || element.nodeName !== 'A') {
            return;
        }
        if (element.hasAttribute('download') ||
            element.getAttribute('rel') === 'external') {
            return;
        }
        if (element.target) {
            return;
        }
        var link = element.getAttribute('href');
        if (link && link.indexOf('mailto:') > -1 || link.charAt(0) === '#') {
            return;
        }
        if (!sameOrigin(element.href)) {
            return;
        }
        event.preventDefault();
        var pathname = element.pathname, search = element.search, _a = element.hash, hash = _a === void 0 ? '' : _a;
        push(pathname + search + hash);
    };
}
function captureAnchorClicks(push) {
    var listener = makeClickListener(push);
    if (typeof window !== 'undefined') {
        document.addEventListener(CLICK_EVENT, listener, false);
    }
}
function captureClicks(historyDriver) {
    return function historyDriverWithClickCapture(sink$) {
        var internalSink$ = xstream_1.default.create();
        captureAnchorClicks(function (pathname) {
            internalSink$._n({ type: 'push', pathname: pathname });
        });
        sink$._add(internalSink$);
        return historyDriver(internalSink$);
    };
}
exports.captureClicks = captureClicks;
//# sourceMappingURL=captureClicks.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
function createHistory$(history, sink$) {
    var history$ = xstream_1.default.createWithMemory().startWith(history.location);
    var call = makeCallOnHistory(history);
    var unlisten = history.listen(function (loc) { history$._n(loc); });
    var sub = sink$.subscribe(createObserver(call, unlisten));
    history$.dispose = function () { sub.unsubscribe(); unlisten(); };
    return history$;
}
exports.createHistory$ = createHistory$;
;
function makeCallOnHistory(history) {
    return function call(input) {
        if (input.type === 'push') {
            history.push(input.pathname, input.state);
        }
        if (input.type === 'replace') {
            history.replace(input.pathname, input.state);
        }
        if (input.type === 'go') {
            history.go(input.amount);
        }
        if (input.type === 'goBack') {
            history.goBack();
        }
        if (input.type === 'goForward') {
            history.goForward();
        }
    };
}
function createObserver(call, unlisten) {
    return {
        next: function (input) {
            if (typeof input === 'string') {
                call({ type: 'push', pathname: input });
            }
            else {
                call(input);
            }
        },
        error: function (err) { unlisten(); },
        complete: function () { setTimeout(unlisten); },
    };
}
//# sourceMappingURL=createHistory$.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Wraps a History Driver to add "click capturing" functionality.
 *
 * If you want to intercept and handle any click event that leads to a link,
 * like on an `<a>` element, you pass your existing driver (e.g. created from
 * `makeHistoryDriver()`) as argument and this function will return another
 * driver of the same nature, but including click capturing logic.
 *
 * @param {Function} driver an existing History Driver function.
 * @return {Function} a History Driver function
 * @function captureClicks
 */
var captureClicks_1 = __webpack_require__(73);
exports.captureClicks = captureClicks_1.captureClicks;
/**
 * Create a History Driver to be used in the browser.
 *
 * This is a function which, when called, returns a History Driver for Cycle.js
 * apps. The driver is also a function, and it takes a stream of new locations
 * (strings representing pathnames or location objects) as input, and outputs
 * another stream of locations that were applied.
 *
 * @param {object} options an object with some options specific to
 * this driver. These options are the same as for the corresponding
 * `createBrowserHistory()` function in History v4. Check its
 * [docs](https://github.com/mjackson/history/tree/v4.5.1#usage) for a good
 * description on the options.
 * @return {Function} the History Driver function
 * @function makeHistoryDriver
 */
var drivers_1 = __webpack_require__(26);
exports.makeHistoryDriver = drivers_1.makeHistoryDriver;
/**
 * Create a History Driver for older browsers using hash routing.
 *
 * This is a function which, when called, returns a History Driver for Cycle.js
 * apps. The driver is also a function, and it takes a stream of new locations
 * (strings representing pathnames or location objects) as input, and outputs
 * another stream of locations that were applied.
 *
 * @param {object} options an object with some options specific to
 * this driver. These options are the same as for the corresponding
 * `createHashHistory()` function in History v4. Check its
 * [docs](https://github.com/mjackson/history/tree/v4.5.1#usage) for a good
 * description on the options.
 * @return {Function} the History Driver function
 * @function makeHashHistoryDriver
 */
var drivers_2 = __webpack_require__(26);
exports.makeHashHistoryDriver = drivers_2.makeHashHistoryDriver;
/**
 * Create a History Driver to be used in non-browser enviroments such as
 * server-side Node.js.
 *
 * This is a function which, when called, returns a History Driver for Cycle.js
 * apps. The driver is also a function, and it takes a stream of new locations
 * (strings representing pathnames or location objects) as input, and outputs
 * another stream of locations that were applied.
 *
 * @param {object} options an object with some options specific to
 * this driver. These options are the same as for the corresponding
 * `createMemoryHistory()` function in History v4. Check its
 * [docs](https://github.com/mjackson/history/tree/v4.5.1#usage) for a good
 * description on the options.
 * @return {Function} the History Driver function
 * @function makeHashHistoryDriver
 */
var drivers_3 = __webpack_require__(26);
exports.makeServerHistoryDriver = drivers_3.makeServerHistoryDriver;
//# sourceMappingURL=index.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(21);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(48);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(20);

var _PathUtils = __webpack_require__(15);

var _createTransitionManager = __webpack_require__(27);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _ExecutionEnvironment = __webpack_require__(41);

var _DOMUtils = __webpack_require__(40);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

var getHistoryState = function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/mjackson/history/pull/289
    return {};
  }
};

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;

  var globalHistory = window.history;
  var canUseHistory = (0, _DOMUtils.supportsHistory)();
  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

  var _props$basename = props.basename,
      basename = _props$basename === undefined ? '' : _props$basename,
      _props$forceRefresh = props.forceRefresh,
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


  var getDOMLocation = function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;


    var path = pathname + search + hash;

    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);

    return _extends({}, (0, _PathUtils.parsePath)(path), {
      state: state,
      key: key
    });
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var handlePopState = function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

    handlePop(getDOMLocation(event.state));
  };

  var handleHashChange = function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  };

  var forceNextPop = false;

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      (function () {
        var action = 'POP';

        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({ action: action, location: location });
          } else {
            revertPop(location);
          }
        });
      })();
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allKeys.indexOf(fromLocation.key);

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];

  // Public interface

  var createHref = function createHref(location) {
    return basename + (0, _PathUtils.createPath)(location);
  };

  var push = function push(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.pushState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

          nextKeys.push(location.key);
          allKeys = nextKeys;

          setState({ action: action, location: location });
        }
      } else {
        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;

        window.location.href = href;
      }
    });
  };

  var replace = function replace(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.replaceState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);

          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

          setState({ action: action, location: location });
        }
      } else {
        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;

        window.location.replace(href);
      }
    });
  };

  var go = function go(n) {
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      return unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createBrowserHistory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(21);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(48);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(20);

var _PathUtils = __webpack_require__(15);

var _createTransitionManager = __webpack_require__(27);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _ExecutionEnvironment = __webpack_require__(41);

var _DOMUtils = __webpack_require__(40);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HashChangeEvent = 'hashchange';

var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: _PathUtils.stripLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  },
  slash: {
    encodePath: _PathUtils.addLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  }
};

var getHashPath = function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};

var pushHashPath = function pushHashPath(path) {
  return window.location.hash = path;
};

var replaceHashPath = function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');

  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};

var createHashHistory = function createHashHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Hash history needs a DOM') : (0, _invariant2.default)(false) : void 0;

  var globalHistory = window.history;
  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

  var _props$basename = props.basename,
      basename = _props$basename === undefined ? '' : _props$basename,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$hashType = props.hashType,
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;


  var getDOMLocation = function getDOMLocation() {
    var path = decodePath(getHashPath());

    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);

    return (0, _PathUtils.parsePath)(path);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var forceNextPop = false;
  var ignorePath = null;

  var handleHashChange = function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;

      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;

      handlePop(location);
    }
  };

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      (function () {
        var action = 'POP';

        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({ action: action, location: location });
          } else {
            revertPop(location);
          }
        });
      })();
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  // Ensure the hash is encoded properly before doing anything else.
  var path = getHashPath();
  var encodedPath = encodePath(path);

  if (path !== encodedPath) replaceHashPath(encodedPath);

  var initialLocation = getDOMLocation();
  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

  // Public interface

  var createHref = function createHref(location) {
    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
  };

  var push = function push(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);

        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

        nextPaths.push(path);
        allPaths = nextPaths;

        setState({ action: action, location: location });
      } else {
        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;

        setState();
      }
    });
  };

  var replace = function replace(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

      if (prevIndex !== -1) allPaths[prevIndex] = path;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;

    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      return unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createHashHistory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(21);

var _warning2 = _interopRequireDefault(_warning);

var _PathUtils = __webpack_require__(15);

var _LocationUtils = __webpack_require__(20);

var _createTransitionManager = __webpack_require__(27);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clamp = function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
};

/**
 * Creates a history object that stores locations in memory.
 */
var createMemoryHistory = function createMemoryHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getUserConfirmation = props.getUserConfirmation,
      _props$initialEntries = props.initialEntries,
      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
      _props$initialIndex = props.initialIndex,
      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry, index) {
    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, index ? createKey() : undefined) : (0, _LocationUtils.createLocation)(entry, undefined, index ? entry.key || createKey() : undefined);
  });

  // Public interface

  var createHref = _PathUtils.createPath;

  var push = function push(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;

      var nextEntries = history.entries.slice(0);
      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  };

  var replace = function replace(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      history.entries[history.index] = location;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

    var action = 'POP';
    var location = history.entries[nextIndex];

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var canGo = function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  };

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return transitionManager.setPrompt(prompt);
  };

  var listen = function listen(listener) {
    return transitionManager.appendListener(listener);
  };

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createMemoryHistory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

var _LocationUtils = __webpack_require__(20);

Object.defineProperty(exports, 'createLocation', {
  enumerable: true,
  get: function get() {
    return _LocationUtils.createLocation;
  }
});
Object.defineProperty(exports, 'locationsAreEqual', {
  enumerable: true,
  get: function get() {
    return _LocationUtils.locationsAreEqual;
  }
});

var _PathUtils = __webpack_require__(15);

Object.defineProperty(exports, 'parsePath', {
  enumerable: true,
  get: function get() {
    return _PathUtils.parsePath;
  }
});
Object.defineProperty(exports, 'createPath', {
  enumerable: true,
  get: function get() {
    return _PathUtils.createPath;
  }
});

var _createBrowserHistory2 = __webpack_require__(76);

var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);

var _createHashHistory2 = __webpack_require__(77);

var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

var _createMemoryHistory2 = __webpack_require__(78);

var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.createBrowserHistory = _createBrowserHistory3.default;
exports.createHashHistory = _createHashHistory3.default;
exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var XStreamAdapter = {
    adapt: function (originStream, originStreamSubscribe) {
        if (XStreamAdapter.isValidStream(originStream)) {
            return originStream;
        }
        ;
        var dispose = null;
        return xstream_1.default.create({
            start: function (out) {
                var observer = out;
                dispose = originStreamSubscribe(originStream, observer);
            },
            stop: function () {
                if (typeof dispose === 'function') {
                    dispose();
                }
            },
        });
    },
    makeSubject: function () {
        var stream = xstream_1.default.create();
        var observer = {
            next: function (x) { stream.shamefullySendNext(x); },
            error: function (err) { stream.shamefullySendError(err); },
            complete: function () { stream.shamefullySendComplete(); },
        };
        return { observer: observer, stream: stream };
    },
    remember: function (stream) {
        return stream.remember();
    },
    isValidStream: function (stream) {
        return (typeof stream.addListener === 'function' &&
            typeof stream.shamefullySendNext === 'function');
    },
    streamSubscribe: function (stream, observer) {
        stream.addListener(observer);
        return function () { return stream.removeListener(observer); };
    },
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = XStreamAdapter;
//# sourceMappingURL=index.js.map

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var base_1 = __webpack_require__(82);
var xstream_adapter_1 = __webpack_require__(80);
/**
 * Takes a `main` function and circularly connects it to the given collection
 * of driver functions.
 *
 * **Example:**
 * ```js
 * import {run} from '@cycle/xstream-run';
 * const dispose = run(main, drivers);
 * // ...
 * dispose();
 * ```
 *
 * The `main` function expects a collection of "source" streams (returned from
 * drivers) as input, and should return a collection of "sink" streams (to be
 * given to drivers). A "collection of streams" is a JavaScript object where
 * keys match the driver names registered by the `drivers` object, and values
 * are the streams. Refer to the documentation of each driver to see more
 * details on what types of sources it outputs and sinks it receives.
 *
 * @param {Function} main a function that takes `sources` as input and outputs
 * `sinks`.
 * @param {Object} drivers an object where keys are driver names and values
 * are driver functions.
 * @return {Function} a dispose function, used to terminate the execution of the
 * Cycle.js program, cleaning up resources used.
 * @function run
 */
function run(main, drivers) {
    var _a = base_1.default(main, drivers, { streamAdapter: xstream_adapter_1.default }), run = _a.run, sinks = _a.sinks;
    if (typeof window !== 'undefined' && window['CyclejsDevTool_startGraphSerializer']) {
        window['CyclejsDevTool_startGraphSerializer'](sinks);
    }
    return run();
}
exports.run = run;
/**
 * A function that prepares the Cycle application to be executed. Takes a `main`
 * function and prepares to circularly connects it to the given collection of
 * driver functions. As an output, `Cycle()` returns an object with three
 * properties: `sources`, `sinks` and `run`. Only when `run()` is called will
 * the application actually execute. Refer to the documentation of `run()` for
 * more details.
 *
 * **Example:**
 * ```js
 * import Cycle from '@cycle/xstream-run';
 * const {sources, sinks, run} = Cycle(main, drivers);
 * // ...
 * const dispose = run(); // Executes the application
 * // ...
 * dispose();
 * ```
 *
 * @param {Function} main a function that takes `sources` as input and outputs
 * `sinks`.
 * @param {Object} drivers an object where keys are driver names and values
 * are driver functions.
 * @return {Object} an object with three properties: `sources`, `sinks` and
 * `run`. `sources` is the collection of driver sources, `sinks` is the
 * collection of driver sinks, these can be used for debugging or testing. `run`
 * is the function that once called will execute the application.
 * @function Cycle
 */
var Cycle = function (main, drivers) {
    var out = base_1.default(main, drivers, { streamAdapter: xstream_adapter_1.default });
    if (typeof window !== 'undefined' && window['CyclejsDevTool_startGraphSerializer']) {
        window['CyclejsDevTool_startGraphSerializer'](out.sinks);
    }
    return out;
};
Cycle.run = run;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Cycle;
//# sourceMappingURL=index.js.map

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function logToConsoleError(err) {
    var target = err.stack || err;
    if (console && console.error) {
        console.error(target);
    }
    else if (console && console.log) {
        console.log(target);
    }
}
function makeSinkProxies(drivers, streamAdapter) {
    var sinkProxies = {};
    for (var name_1 in drivers) {
        if (drivers.hasOwnProperty(name_1)) {
            var subject = streamAdapter.makeSubject();
            var driverStreamAdapter = drivers[name_1].streamAdapter || streamAdapter;
            var stream = driverStreamAdapter.adapt(subject.stream, streamAdapter.streamSubscribe);
            sinkProxies[name_1] = {
                stream: stream,
                observer: subject.observer,
            };
        }
    }
    return sinkProxies;
}
function callDrivers(drivers, sinkProxies, streamAdapter) {
    var sources = {};
    for (var name_2 in drivers) {
        if (drivers.hasOwnProperty(name_2)) {
            var driverOutput = drivers[name_2](sinkProxies[name_2].stream, streamAdapter, name_2);
            var driverStreamAdapter = drivers[name_2].streamAdapter;
            if (driverStreamAdapter && driverStreamAdapter.isValidStream(driverOutput)) {
                sources[name_2] = streamAdapter.adapt(driverOutput, driverStreamAdapter.streamSubscribe);
            }
            else {
                sources[name_2] = driverOutput;
            }
            if (sources[name_2] && typeof sources[name_2] === 'object') {
                sources[name_2]._isCycleSource = name_2;
            }
        }
    }
    return sources;
}
function replicateMany(sinks, sinkProxies, streamAdapter) {
    var sinkNames = Object.keys(sinks).filter(function (name) { return !!sinkProxies[name]; });
    var buffers = {};
    var replicators = {};
    sinkNames.forEach(function (name) {
        buffers[name] = { next: [], error: [], complete: [] };
        replicators[name] = {
            next: function (x) { return buffers[name].next.push(x); },
            error: function (x) { return buffers[name].error.push(x); },
            complete: function (x) { return buffers[name].complete.push(x); },
        };
    });
    var subscriptions = sinkNames.map(function (name) {
        return streamAdapter.streamSubscribe(sinks[name], {
            next: function (x) {
                replicators[name].next(x);
            },
            error: function (err) {
                logToConsoleError(err);
                replicators[name].error(err);
            },
            complete: function (x) {
                replicators[name].complete(x);
            },
        });
    });
    var disposeFunctions = subscriptions
        .filter(function (fn) { return typeof fn === 'function'; });
    sinkNames.forEach(function (name) {
        var observer = sinkProxies[name].observer;
        var next = observer.next;
        var error = observer.error;
        var complete = observer.complete;
        buffers[name].next.forEach(next);
        buffers[name].error.forEach(error);
        buffers[name].complete.forEach(complete);
        replicators[name].next = next;
        replicators[name].error = error;
        replicators[name].complete = complete;
    });
    return function () {
        disposeFunctions.forEach(function (dispose) { return dispose(); });
    };
}
function disposeSources(sources) {
    for (var k in sources) {
        if (sources.hasOwnProperty(k) && sources[k]
            && typeof sources[k].dispose === 'function') {
            sources[k].dispose();
        }
    }
}
var isObjectEmpty = function (obj) { return Object.keys(obj).length === 0; };
function Cycle(main, drivers, options) {
    if (typeof main !== "function") {
        throw new Error("First argument given to Cycle must be the 'main' " +
            "function.");
    }
    if (typeof drivers !== "object" || drivers === null) {
        throw new Error("Second argument given to Cycle must be an object " +
            "with driver functions as properties.");
    }
    if (isObjectEmpty(drivers)) {
        throw new Error("Second argument given to Cycle must be an object " +
            "with at least one driver function declared as a property.");
    }
    var streamAdapter = options.streamAdapter;
    if (!streamAdapter || isObjectEmpty(streamAdapter)) {
        throw new Error("Third argument given to Cycle must be an options object " +
            "with the streamAdapter key supplied with a valid stream adapter.");
    }
    var sinkProxies = makeSinkProxies(drivers, streamAdapter);
    var sources = callDrivers(drivers, sinkProxies, streamAdapter);
    var sinks = main(sources);
    if (typeof window !== 'undefined') {
        window.Cyclejs = { sinks: sinks };
    }
    var run = function () {
        var disposeReplication = replicateMany(sinks, sinkProxies, streamAdapter);
        return function () {
            disposeSources(sources);
            disposeReplication();
        };
    };
    return { sinks: sinks, sources: sources, run: run };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Cycle;
//# sourceMappingURL=index.js.map

/***/ }),
/* 83 */
/***/ (function(module, exports) {

/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var copy       = __webpack_require__(94)
  , map        = __webpack_require__(102)
  , callable   = __webpack_require__(11)
  , validValue = __webpack_require__(9)

  , bind = Function.prototype.bind, defineProperty = Object.defineProperty
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , define;

define = function (name, desc, bindTo) {
	var value = validValue(desc) && callable(desc.value), dgs;
	dgs = copy(desc);
	delete dgs.writable;
	delete dgs.value;
	dgs.get = function () {
		if (hasOwnProperty.call(this, name)) return value;
		desc.value = bind.call(value, (bindTo == null) ? this : this[bindTo]);
		defineProperty(this, name, desc);
		return this[name];
	};
	return dgs;
};

module.exports = function (props/*, bindTo*/) {
	var bindTo = arguments[1];
	return map(props, function (desc, name) {
		return define(name, desc, bindTo);
	});
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toPosInt = __webpack_require__(90)
  , value    = __webpack_require__(9)

  , indexOf = Array.prototype.indexOf
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , abs = Math.abs, floor = Math.floor;

module.exports = function (searchElement/*, fromIndex*/) {
	var i, l, fromIndex, val;
	if (searchElement === searchElement) { //jslint: ignore
		return indexOf.apply(this, arguments);
	}

	l = toPosInt(value(this).length);
	fromIndex = arguments[1];
	if (isNaN(fromIndex)) fromIndex = 0;
	else if (fromIndex >= 0) fromIndex = floor(fromIndex);
	else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

	for (i = fromIndex; i < l; ++i) {
		if (hasOwnProperty.call(this, i)) {
			val = this[i];
			if (val !== val) return i; //jslint: ignore
		}
	}
	return -1;
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(87)()
	? Math.sign
	: __webpack_require__(88);


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== 'function') return false;
	return ((sign(10) === 1) && (sign(-20) === -1));
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || (value === 0)) return value;
	return (value > 0) ? 1 : -1;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sign = __webpack_require__(86)

  , abs = Math.abs, floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if ((value === 0) || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(89)

  , max = Math.max;

module.exports = function (value) { return max(0, toInteger(value)); };


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Internal method, used by iteration functions.
// Calls a function for each key-value pair found in object
// Optionally takes compareFn to iterate object in specific order



var callable = __webpack_require__(11)
  , value    = __webpack_require__(9)

  , bind = Function.prototype.bind, call = Function.prototype.call, keys = Object.keys
  , propertyIsEnumerable = Object.prototype.propertyIsEnumerable;

module.exports = function (method, defVal) {
	return function (obj, cb/*, thisArg, compareFn*/) {
		var list, thisArg = arguments[2], compareFn = arguments[3];
		obj = Object(value(obj));
		callable(cb);

		list = keys(obj);
		if (compareFn) {
			list.sort((typeof compareFn === 'function') ? bind.call(compareFn, obj) : undefined);
		}
		if (typeof method !== 'function') method = list[method];
		return call.call(method, list, function (key, index) {
			if (!propertyIsEnumerable.call(obj, key)) return defVal;
			return call.call(cb, thisArg, obj[key], key, obj, index);
		});
	};
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== 'function') return false;
	obj = { foo: 'raz' };
	assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
	return (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys  = __webpack_require__(99)
  , value = __webpack_require__(9)

  , max = Math.max;

module.exports = function (dest, src/*, …srcn*/) {
	var error, i, l = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try { dest[key] = src[key]; } catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < l; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assign = __webpack_require__(29)
  , value  = __webpack_require__(9);

module.exports = function (obj) {
	var copy = Object(value(obj));
	if (copy !== obj) return copy;
	return assign({}, obj);
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Workaround for http://code.google.com/p/v8/issues/detail?id=2804



var create = Object.create, shim;

if (!__webpack_require__(43)()) {
	shim = __webpack_require__(44);
}

module.exports = (function () {
	var nullObject, props, desc;
	if (!shim) return create;
	if (shim.level !== 1) return create;

	nullObject = {};
	props = {};
	desc = { configurable: false, enumerable: false, writable: true,
		value: undefined };
	Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
		if (name === '__proto__') {
			props[name] = { configurable: true, enumerable: false, writable: true,
				value: undefined };
			return;
		}
		props[name] = desc;
	});
	Object.defineProperties(nullObject, props);

	Object.defineProperty(shim, 'nullPolyfill', { configurable: false,
		enumerable: false, writable: false, value: nullObject });

	return function (prototype, props) {
		return create((prototype === null) ? nullObject : prototype, props);
	};
}());


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(91)('forEach');


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Deprecated



module.exports = function (obj) { return typeof obj === 'function'; };


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var map = { function: true, object: true };

module.exports = function (x) {
	return ((x != null) && map[typeof x]) || false;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(100)()
	? Object.keys
	: __webpack_require__(101);


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	try {
		Object.keys('primitive');
		return true;
	} catch (e) { return false; }
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys = Object.keys;

module.exports = function (object) {
	return keys(object == null ? object : Object(object));
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var callable = __webpack_require__(11)
  , forEach  = __webpack_require__(96)

  , call = Function.prototype.call;

module.exports = function (obj, cb/*, thisArg*/) {
	var o = {}, thisArg = arguments[2];
	callable(cb);
	forEach(obj, function (value, key, obj, index) {
		o[key] = call.call(cb, thisArg, value, key, obj, index);
	});
	return o;
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

module.exports = function (options/*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (options == null) return;
		process(Object(options), result);
	});
	return result;
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var forEach = Array.prototype.forEach, create = Object.create;

module.exports = function (arg/*, …args*/) {
	var set = create(null);
	forEach.call(arguments, function (name) { set[name] = true; });
	return set;
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var str = 'razdwatrzy';

module.exports = function () {
	if (typeof str.contains !== 'function') return false;
	return ((str.contains('dwa') === true) && (str.contains('foo') === false));
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = String.prototype.indexOf;

module.exports = function (searchString/*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf = __webpack_require__(22)
  , contains       = __webpack_require__(45)
  , d              = __webpack_require__(10)
  , Iterator       = __webpack_require__(31)

  , defineProperty = Object.defineProperty
  , ArrayIterator;

ArrayIterator = module.exports = function (arr, kind) {
	if (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);
	Iterator.call(this, arr);
	if (!kind) kind = 'value';
	else if (contains.call(kind, 'key+value')) kind = 'key+value';
	else if (contains.call(kind, 'key')) kind = 'key';
	else kind = 'value';
	defineProperty(this, '__kind__', d('', kind));
};
if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

ArrayIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(ArrayIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__list__[i];
		if (this.__kind__ === 'key+value') return [i, this.__list__[i]];
		return i;
	}),
	toString: d(function () { return '[object Array Iterator]'; })
});


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments = __webpack_require__(28)
  , callable    = __webpack_require__(11)
  , isString    = __webpack_require__(30)
  , get         = __webpack_require__(109)

  , isArray = Array.isArray, call = Function.prototype.call
  , some = Array.prototype.some;

module.exports = function (iterable, cb/*, thisArg*/) {
	var mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;
	if (isArray(iterable) || isArguments(iterable)) mode = 'array';
	else if (isString(iterable)) mode = 'string';
	else iterable = get(iterable);

	callable(cb);
	doBreak = function () { broken = true; };
	if (mode === 'array') {
		some.call(iterable, function (value) {
			call.call(cb, thisArg, value, doBreak);
			if (broken) return true;
		});
		return;
	}
	if (mode === 'string') {
		l = iterable.length;
		for (i = 0; i < l; ++i) {
			char = iterable[i];
			if ((i + 1) < l) {
				code = char.charCodeAt(0);
				if ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];
			}
			call.call(cb, thisArg, char, doBreak);
			if (broken) break;
		}
		return;
	}
	result = iterable.next();

	while (!result.done) {
		call.call(cb, thisArg, result.value, doBreak);
		if (broken) return;
		result = iterable.next();
	}
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments    = __webpack_require__(28)
  , isString       = __webpack_require__(30)
  , ArrayIterator  = __webpack_require__(107)
  , StringIterator = __webpack_require__(111)
  , iterable       = __webpack_require__(46)
  , iteratorSymbol = __webpack_require__(17).iterator;

module.exports = function (obj) {
	if (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();
	if (isArguments(obj)) return new ArrayIterator(obj);
	if (isString(obj)) return new StringIterator(obj);
	return new ArrayIterator(obj);
};


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments    = __webpack_require__(28)
  , isString       = __webpack_require__(30)
  , iteratorSymbol = __webpack_require__(17).iterator

  , isArray = Array.isArray;

module.exports = function (value) {
	if (value == null) return false;
	if (isArray(value)) return true;
	if (isString(value)) return true;
	if (isArguments(value)) return true;
	return (typeof value[iteratorSymbol] === 'function');
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Thanks @mathiasbynens
// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols



var setPrototypeOf = __webpack_require__(22)
  , d              = __webpack_require__(10)
  , Iterator       = __webpack_require__(31)

  , defineProperty = Object.defineProperty
  , StringIterator;

StringIterator = module.exports = function (str) {
	if (!(this instanceof StringIterator)) return new StringIterator(str);
	str = String(str);
	Iterator.call(this, str);
	defineProperty(this, '__length__', d('', str.length));

};
if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

StringIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(StringIterator),
	_next: d(function () {
		if (!this.__list__) return;
		if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
		this._unBind();
	}),
	_resolve: d(function (i) {
		var char = this.__list__[i], code;
		if (this.__nextIndex__ === this.__length__) return char;
		code = char.charCodeAt(0);
		if ((code >= 0xD800) && (code <= 0xDBFF)) return char + this.__list__[this.__nextIndex__++];
		return char;
	}),
	toString: d(function () { return '[object String Iterator]'; })
});


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var map, iterator, result;
	if (typeof Map !== 'function') return false;
	try {
		// WebKit doesn't support arguments and crashes
		map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);
	} catch (e) {
		return false;
	}
	if (String(map) !== '[object Map]') return false;
	if (map.size !== 3) return false;
	if (typeof map.clear !== 'function') return false;
	if (typeof map.delete !== 'function') return false;
	if (typeof map.entries !== 'function') return false;
	if (typeof map.forEach !== 'function') return false;
	if (typeof map.get !== 'function') return false;
	if (typeof map.has !== 'function') return false;
	if (typeof map.keys !== 'function') return false;
	if (typeof map.set !== 'function') return false;
	if (typeof map.values !== 'function') return false;

	iterator = map.entries();
	result = iterator.next();
	if (result.done !== false) return false;
	if (!result.value) return false;
	if (result.value[0] !== 'raz') return false;
	if (result.value[1] !== 'one') return false;

	return true;
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Exports true if environment provides native `Map` implementation,
// whatever that is.



module.exports = (function () {
	if (typeof Map === 'undefined') return false;
	return (Object.prototype.toString.call(new Map()) === '[object Map]');
}());


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(104)('key',
	'value', 'key+value');


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf    = __webpack_require__(22)
  , d                 = __webpack_require__(10)
  , Iterator          = __webpack_require__(31)
  , toStringTagSymbol = __webpack_require__(17).toStringTag
  , kinds             = __webpack_require__(114)

  , defineProperties = Object.defineProperties
  , unBind = Iterator.prototype._unBind
  , MapIterator;

MapIterator = module.exports = function (map, kind) {
	if (!(this instanceof MapIterator)) return new MapIterator(map, kind);
	Iterator.call(this, map.__mapKeysData__, map);
	if (!kind || !kinds[kind]) kind = 'key+value';
	defineProperties(this, {
		__kind__: d('', kind),
		__values__: d('w', map.__mapValuesData__)
	});
};
if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);

MapIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(MapIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__values__[i];
		if (this.__kind__ === 'key') return this.__list__[i];
		return [this.__list__[i], this.__values__[i]];
	}),
	_unBind: d(function () {
		this.__values__ = null;
		unBind.call(this);
	}),
	toString: d(function () { return '[object Map Iterator]'; })
});
Object.defineProperty(MapIterator.prototype, toStringTagSymbol,
	d('c', 'Map Iterator'));


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear          = __webpack_require__(42)
  , eIndexOf       = __webpack_require__(85)
  , setPrototypeOf = __webpack_require__(22)
  , callable       = __webpack_require__(11)
  , validValue     = __webpack_require__(9)
  , d              = __webpack_require__(10)
  , ee             = __webpack_require__(121)
  , Symbol         = __webpack_require__(17)
  , iterator       = __webpack_require__(46)
  , forOf          = __webpack_require__(108)
  , Iterator       = __webpack_require__(115)
  , isNative       = __webpack_require__(113)

  , call = Function.prototype.call
  , defineProperties = Object.defineProperties, getPrototypeOf = Object.getPrototypeOf
  , MapPoly;

module.exports = MapPoly = function (/*iterable*/) {
	var iterable = arguments[0], keys, values, self;
	if (!(this instanceof MapPoly)) throw new TypeError('Constructor requires \'new\'');
	if (isNative && setPrototypeOf && (Map !== MapPoly)) {
		self = setPrototypeOf(new Map(), getPrototypeOf(this));
	} else {
		self = this;
	}
	if (iterable != null) iterator(iterable);
	defineProperties(self, {
		__mapKeysData__: d('c', keys = []),
		__mapValuesData__: d('c', values = [])
	});
	if (!iterable) return self;
	forOf(iterable, function (value) {
		var key = validValue(value)[0];
		value = value[1];
		if (eIndexOf.call(keys, key) !== -1) return;
		keys.push(key);
		values.push(value);
	}, self);
	return self;
};

if (isNative) {
	if (setPrototypeOf) setPrototypeOf(MapPoly, Map);
	MapPoly.prototype = Object.create(Map.prototype, {
		constructor: d(MapPoly)
	});
}

ee(defineProperties(MapPoly.prototype, {
	clear: d(function () {
		if (!this.__mapKeysData__.length) return;
		clear.call(this.__mapKeysData__);
		clear.call(this.__mapValuesData__);
		this.emit('_clear');
	}),
	delete: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return false;
		this.__mapKeysData__.splice(index, 1);
		this.__mapValuesData__.splice(index, 1);
		this.emit('_delete', index, key);
		return true;
	}),
	entries: d(function () { return new Iterator(this, 'key+value'); }),
	forEach: d(function (cb/*, thisArg*/) {
		var thisArg = arguments[1], iterator, result;
		callable(cb);
		iterator = this.entries();
		result = iterator._next();
		while (result !== undefined) {
			call.call(cb, thisArg, this.__mapValuesData__[result],
				this.__mapKeysData__[result], this);
			result = iterator._next();
		}
	}),
	get: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return;
		return this.__mapValuesData__[index];
	}),
	has: d(function (key) {
		return (eIndexOf.call(this.__mapKeysData__, key) !== -1);
	}),
	keys: d(function () { return new Iterator(this, 'key'); }),
	set: d(function (key, value) {
		var index = eIndexOf.call(this.__mapKeysData__, key), emit;
		if (index === -1) {
			index = this.__mapKeysData__.push(key) - 1;
			emit = true;
		}
		this.__mapValuesData__[index] = value;
		if (emit) this.emit('_add', index, key);
		return this;
	}),
	size: d.gs(function () { return this.__mapKeysData__.length; }),
	values: d(function () { return new Iterator(this, 'value'); }),
	toString: d(function () { return '[object Map]'; })
}));
Object.defineProperty(MapPoly.prototype, Symbol.iterator, d(function () {
	return this.entries();
}));
Object.defineProperty(MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var validTypes = { object: true, symbol: true };

module.exports = function () {
	var symbol;
	if (typeof Symbol !== 'function') return false;
	symbol = Symbol('test symbol');
	try { String(symbol); } catch (e) { return false; }

	// Return 'true' also for polyfills
	if (!validTypes[typeof Symbol.iterator]) return false;
	if (!validTypes[typeof Symbol.toPrimitive]) return false;
	if (!validTypes[typeof Symbol.toStringTag]) return false;

	return true;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (x) {
	if (!x) return false;
	if (typeof x === 'symbol') return true;
	if (!x.constructor) return false;
	if (x.constructor.name !== 'Symbol') return false;
	return (x[x.constructor.toStringTag] === 'Symbol');
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ES2015 Symbol polyfill for environments that do not support it (or partially support it)



var d              = __webpack_require__(10)
  , validateSymbol = __webpack_require__(120)

  , create = Object.create, defineProperties = Object.defineProperties
  , defineProperty = Object.defineProperty, objPrototype = Object.prototype
  , NativeSymbol, SymbolPolyfill, HiddenSymbol, globalSymbols = create(null)
  , isNativeSafe;

if (typeof Symbol === 'function') {
	NativeSymbol = Symbol;
	try {
		String(NativeSymbol());
		isNativeSafe = true;
	} catch (ignore) {}
}

var generateName = (function () {
	var created = create(null);
	return function (desc) {
		var postfix = 0, name, ie11BugWorkaround;
		while (created[desc + (postfix || '')]) ++postfix;
		desc += (postfix || '');
		created[desc] = true;
		name = '@@' + desc;
		defineProperty(objPrototype, name, d.gs(null, function (value) {
			// For IE11 issue see:
			// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
			//    ie11-broken-getters-on-dom-objects
			// https://github.com/medikoo/es6-symbol/issues/12
			if (ie11BugWorkaround) return;
			ie11BugWorkaround = true;
			defineProperty(this, name, d(value));
			ie11BugWorkaround = false;
		}));
		return name;
	};
}());

// Internal constructor (not one exposed) for creating Symbol instances.
// This one is used to ensure that `someSymbol instanceof Symbol` always return false
HiddenSymbol = function Symbol(description) {
	if (this instanceof HiddenSymbol) throw new TypeError('TypeError: Symbol is not a constructor');
	return SymbolPolyfill(description);
};

// Exposed `Symbol` constructor
// (returns instances of HiddenSymbol)
module.exports = SymbolPolyfill = function Symbol(description) {
	var symbol;
	if (this instanceof Symbol) throw new TypeError('TypeError: Symbol is not a constructor');
	if (isNativeSafe) return NativeSymbol(description);
	symbol = create(HiddenSymbol.prototype);
	description = (description === undefined ? '' : String(description));
	return defineProperties(symbol, {
		__description__: d('', description),
		__name__: d('', generateName(description))
	});
};
defineProperties(SymbolPolyfill, {
	for: d(function (key) {
		if (globalSymbols[key]) return globalSymbols[key];
		return (globalSymbols[key] = SymbolPolyfill(String(key)));
	}),
	keyFor: d(function (s) {
		var key;
		validateSymbol(s);
		for (key in globalSymbols) if (globalSymbols[key] === s) return key;
	}),

	// If there's native implementation of given symbol, let's fallback to it
	// to ensure proper interoperability with other native functions e.g. Array.from
	hasInstance: d('', (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill('hasInstance')),
	isConcatSpreadable: d('', (NativeSymbol && NativeSymbol.isConcatSpreadable) ||
		SymbolPolyfill('isConcatSpreadable')),
	iterator: d('', (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill('iterator')),
	match: d('', (NativeSymbol && NativeSymbol.match) || SymbolPolyfill('match')),
	replace: d('', (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill('replace')),
	search: d('', (NativeSymbol && NativeSymbol.search) || SymbolPolyfill('search')),
	species: d('', (NativeSymbol && NativeSymbol.species) || SymbolPolyfill('species')),
	split: d('', (NativeSymbol && NativeSymbol.split) || SymbolPolyfill('split')),
	toPrimitive: d('', (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill('toPrimitive')),
	toStringTag: d('', (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill('toStringTag')),
	unscopables: d('', (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill('unscopables'))
});

// Internal tweaks for real symbol producer
defineProperties(HiddenSymbol.prototype, {
	constructor: d(SymbolPolyfill),
	toString: d('', function () { return this.__name__; })
});

// Proper implementation of methods exposed on Symbol.prototype
// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
defineProperties(SymbolPolyfill.prototype, {
	toString: d(function () { return 'Symbol (' + validateSymbol(this).__description__ + ')'; }),
	valueOf: d(function () { return validateSymbol(this); })
});
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {
	var symbol = validateSymbol(this);
	if (typeof symbol === 'symbol') return symbol;
	return symbol.toString();
}));
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));

// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
	d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));

// Note: It's important to define `toPrimitive` as last one, as some implementations
// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
// And that may invoke error in definition flow:
// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
	d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isSymbol = __webpack_require__(118);

module.exports = function (value) {
	if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
	return value;
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d        = __webpack_require__(10)
  , callable = __webpack_require__(11)

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    rsComboSymbolsRange = '\\u20d0-\\u20f0',
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
  rsUpper + '+' + rsOptUpperContr,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 'ss'
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */
var kebabCase = createCompounder(function(result, word, index) {
  return result + (index ? '-' : '') + word.toLowerCase();
});

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = kebabCase;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */
function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0,
      lastIndex = length - 1;

  while (length--) {
    var index = indexes[length];
    if (length == lastIndex || index !== previous) {
      var previous = index;
      if (isIndex(index)) {
        splice.call(array, index, 1);
      }
      else if (!isKey(index, array)) {
        var path = castPath(index),
            object = parent(array, path);

        if (object != null) {
          delete object[toKey(last(path))];
        }
      }
      else {
        delete array[toKey(index)];
      }
    }
  }
  return array;
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array ? array.length : 0;
  return length ? array[length - 1] : undefined;
}

/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity]
 *  The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */
function remove(array, predicate) {
  var result = [];
  if (!(array && array.length)) {
    return result;
  }
  var index = -1,
      indexes = [],
      length = array.length;

  predicate = baseIteratee(predicate, 3);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }
  basePullAt(array, indexes);
  return result;
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = remove;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(56)(module)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * Checks if a cache value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    Set = getNative(root, 'Set'),
    nativeCreate = getNative(Object, 'create');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each
 * element is kept.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return (array && array.length)
    ? baseUniq(array)
    : [];
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = uniq;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {


// https://github.com/Matt-Esch/virtual-dom/blob/master/virtual-hyperscript/parse-tag.js

var split = __webpack_require__(83)

var classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/
var notClassId = /^\.|#/

module.exports = function parseSelector (selector, upper) {
  selector = selector || ''
  var tagName
  var id = ''
  var classes = []

  var tagParts = split(selector, classIdSplit)

  if (notClassId.test(tagParts[1]) || selector === '') {
    tagName = 'div'
  }

  var part, type, i

  for (i = 0; i < tagParts.length; i++) {
    part = tagParts[i]

    if (!part) {
      continue
    }

    type = part.charAt(0)

    if (!tagName) {
      tagName = part
    } else if (type === '.') {
      classes.push(part.substring(1, part.length))
    } else if (type === '#') {
      id = part.substring(1, part.length)
    }
  }

  return {
    tagName: upper === true ? tagName.toUpperCase() : tagName,
    id: id,
    className: classes.join(' ')
  }
}


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsolute = function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
};

// About 1.5x faster than the two-arg version of Array#splice()
var spliceOne = function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }list.pop();
};

// This implementation is based heavily on node's url.parse
var resolvePathname = function resolvePathname(to) {
  var from = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
};

module.exports = resolvePathname;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var selectorParser_1 = __webpack_require__(49);
function classNameFromVNode(vNode) {
    var _a = selectorParser_1.selectorParser(vNode).className, cn = _a === void 0 ? '' : _a;
    if (!vNode.data) {
        return cn;
    }
    var _b = vNode.data, dataClass = _b.class, props = _b.props;
    if (dataClass) {
        var c = Object.keys(dataClass)
            .filter(function (cl) { return dataClass[cl]; });
        cn += " " + c.join(" ");
    }
    if (props && props.className) {
        cn += " " + props.className;
    }
    return cn && cn.trim();
}
exports.classNameFromVNode = classNameFromVNode;
//# sourceMappingURL=classNameFromVNode.js.map

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {


var parseSelector = __webpack_require__(126)
var VOID_ELEMENTS = __webpack_require__(50).VOID
var CONTAINER_ELEMENTS = __webpack_require__(50).CONTAINER

module.exports = function init (modules) {
  function parse (vnode, node) {
    var result = []
    var attributes = new Map([
      // These can be overwritten because that’s what happens in snabbdom
      ['id', node.id],
      ['class', node.className]
    ])

    modules.forEach(function (fn, index) {
      fn(vnode, attributes)
    })
    attributes.forEach(function (value, key) {
      if (value && value !== '') {
        result.push(key + '="' + value + '"')
      }
    })

    return result.join(' ')
  }

  return function renderToString (vnode) {
    if (!vnode.sel && vnode.text) {
      return vnode.text
    }

    vnode.data = vnode.data || {}

    // Support thunks
    if (vnode.data.hook &&
      typeof vnode.data.hook.init === 'function' &&
      typeof vnode.data.fn === 'function') {
      vnode.data.hook.init(vnode)
    }

    var node = parseSelector(vnode.sel)
    var tagName = node.tagName
    var attributes = parse(vnode, node)
    var svg = vnode.data.ns === 'http://www.w3.org/2000/svg'
    var tag = []

    // Open tag
    tag.push('<' + tagName)
    if (attributes.length) {
      tag.push(' ' + attributes)
    }
    if (svg && CONTAINER_ELEMENTS[tagName] !== true) {
      tag.push(' /')
    }
    tag.push('>')

    // Close tag, if needed
    if ((VOID_ELEMENTS[tagName] !== true && !svg) ||
        (svg && CONTAINER_ELEMENTS[tagName] === true)) {
      if (vnode.data.props && vnode.data.props.innerHTML) {
        tag.push(vnode.data.props.innerHTML)
      } else if (vnode.text) {
        tag.push(vnode.text)
      } else if (vnode.children) {
        vnode.children.forEach(function (child) {
          tag.push(renderToString(child))
        })
      }
      tag.push('</' + tagName + '>')
    }

    return tag.join('')
  }
}


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {


var forOwn = __webpack_require__(23)
var escape = __webpack_require__(32)

// data.attrs

module.exports = function attrsModule (vnode, attributes) {
  var attrs = vnode.data.attrs || {}

  forOwn(attrs, function (value, key) {
    attributes.set(key, escape(value))
  })
}


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {


var forOwn = __webpack_require__(23)
var remove = __webpack_require__(123)
var uniq = __webpack_require__(124)

// data.class

module.exports = function classModule (vnode, attributes) {
  var values
  var _add = []
  var _remove = []
  var classes = vnode.data.class || {}
  var existing = attributes.get('class')
  existing = existing.length > 0 ? existing.split(' ') : []

  forOwn(classes, function (value, key) {
    if (value === true) {
      _add.push(key)
    } else {
      _remove.push(key)
    }
  })

  values = remove(uniq(existing.concat(_add)), function (value) {
    return _remove.indexOf(value) < 0
  })

  if (values.length) {
    attributes.set('class', values.join(' '))
  }
}


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = {
  class: __webpack_require__(131),
  props: __webpack_require__(133),
  attributes: __webpack_require__(130),
  style: __webpack_require__(134)
}


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {


var forOwn = __webpack_require__(23)
var escape = __webpack_require__(32)

// https://developer.mozilla.org/en-US/docs/Web/API/element
var omit = [
  'attributes',
  'childElementCount',
  'children',
  'classList',
  'clientHeight',
  'clientLeft',
  'clientTop',
  'clientWidth',
  'currentStyle',
  'firstElementChild',
  'innerHTML',
  'lastElementChild',
  'nextElementSibling',
  'ongotpointercapture',
  'onlostpointercapture',
  'onwheel',
  'outerHTML',
  'previousElementSibling',
  'runtimeStyle',
  'scrollHeight',
  'scrollLeft',
  'scrollLeftMax',
  'scrollTop',
  'scrollTopMax',
  'scrollWidth',
  'tabStop',
  'tagName'
]

// data.props

module.exports = function propsModule (vnode, attributes) {
  var props = vnode.data.props || {}

  forOwn(props, function (value, key) {
    if (omit.indexOf(key) > -1) {
      return
    }
    if (key === 'htmlFor') {
      key = 'for'
    }
    if (key === 'className') {
      key = 'class'
    }

    attributes.set(key.toLowerCase(), escape(value))
  })
}


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {


var assign = __webpack_require__(125)
var forOwn = __webpack_require__(23)
var escape = __webpack_require__(32)
var kebabCase = __webpack_require__(122)

// data.style

module.exports = function styleModule (vnode, attributes) {
  var values = []
  var style = vnode.data.style || {}

  // merge in `delayed` properties
  if (style.delayed) {
    assign(style, style.delayed)
  }

  forOwn(style, function (value, key) {
    // omit hook objects
    if (typeof value === 'string' || typeof value === 'number') {
      values.push(kebabCase(key) + ': ' + escape(value))
    }
  })

  if (values.length) {
    attributes.set('style', values.join('; '))
  }
}


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NamespaceURIs = {
    "xlink": "http://www.w3.org/1999/xlink"
};
var booleanAttrs = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "compact", "controls", "declare",
    "default", "defaultchecked", "defaultmuted", "defaultselected", "defer", "disabled", "draggable",
    "enabled", "formnovalidate", "hidden", "indeterminate", "inert", "ismap", "itemscope", "loop", "multiple",
    "muted", "nohref", "noresize", "noshade", "novalidate", "nowrap", "open", "pauseonexit", "readonly",
    "required", "reversed", "scoped", "seamless", "selected", "sortable", "spellcheck", "translate",
    "truespeed", "typemustmatch", "visible"];
var booleanAttrsDict = Object.create(null);
for (var i = 0, len = booleanAttrs.length; i < len; i++) {
    booleanAttrsDict[booleanAttrs[i]] = true;
}
function updateAttrs(oldVnode, vnode) {
    var key, cur, old, elm = vnode.elm, oldAttrs = oldVnode.data.attrs, attrs = vnode.data.attrs, namespaceSplit;
    if (!oldAttrs && !attrs)
        return;
    if (oldAttrs === attrs)
        return;
    oldAttrs = oldAttrs || {};
    attrs = attrs || {};
    // update modified attributes, add new attributes
    for (key in attrs) {
        cur = attrs[key];
        old = oldAttrs[key];
        if (old !== cur) {
            if (!cur && booleanAttrsDict[key])
                elm.removeAttribute(key);
            else {
                namespaceSplit = key.split(":");
                if (namespaceSplit.length > 1 && NamespaceURIs.hasOwnProperty(namespaceSplit[0]))
                    elm.setAttributeNS(NamespaceURIs[namespaceSplit[0]], key, cur);
                else
                    elm.setAttribute(key, cur);
            }
        }
    }
    //remove removed attributes
    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
    // the other option is to remove all attributes with value == undefined
    for (key in oldAttrs) {
        if (!(key in attrs)) {
            elm.removeAttribute(key);
        }
    }
}
exports.attributesModule = { create: updateAttrs, update: updateAttrs };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.attributesModule;
//# sourceMappingURL=attributes.js.map

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function updateClass(oldVnode, vnode) {
    var cur, name, elm = vnode.elm, oldClass = oldVnode.data.class, klass = vnode.data.class;
    if (!oldClass && !klass)
        return;
    if (oldClass === klass)
        return;
    oldClass = oldClass || {};
    klass = klass || {};
    for (name in oldClass) {
        if (!klass[name]) {
            elm.classList.remove(name);
        }
    }
    for (name in klass) {
        cur = klass[name];
        if (cur !== oldClass[name]) {
            elm.classList[cur ? 'add' : 'remove'](name);
        }
    }
}
exports.classModule = { create: updateClass, update: updateClass };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.classModule;
//# sourceMappingURL=class.js.map

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var CAPS_REGEX = /[A-Z]/g;
function updateDataset(oldVnode, vnode) {
    var elm = vnode.elm, oldDataset = oldVnode.data.dataset, dataset = vnode.data.dataset, key;
    if (!oldDataset && !dataset)
        return;
    if (oldDataset === dataset)
        return;
    oldDataset = oldDataset || {};
    dataset = dataset || {};
    var d = elm.dataset;
    for (key in oldDataset) {
        if (!dataset[key]) {
            if (d) {
                delete d[key];
            }
            else {
                elm.removeAttribute('data-' + key.replace(CAPS_REGEX, '-$&').toLowerCase());
            }
        }
    }
    for (key in dataset) {
        if (oldDataset[key] !== dataset[key]) {
            if (d) {
                d[key] = dataset[key];
            }
            else {
                elm.setAttribute('data-' + key.replace(CAPS_REGEX, '-$&').toLowerCase(), dataset[key]);
            }
        }
    }
}
exports.datasetModule = { create: updateDataset, update: updateDataset };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.datasetModule;
//# sourceMappingURL=dataset.js.map

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function updateProps(oldVnode, vnode) {
    var key, cur, old, elm = vnode.elm, oldProps = oldVnode.data.props, props = vnode.data.props;
    if (!oldProps && !props)
        return;
    if (oldProps === props)
        return;
    oldProps = oldProps || {};
    props = props || {};
    for (key in oldProps) {
        if (!props[key]) {
            delete elm[key];
        }
    }
    for (key in props) {
        cur = props[key];
        old = oldProps[key];
        if (old !== cur && (key !== 'value' || elm[key] !== cur)) {
            elm[key] = cur;
        }
    }
}
exports.propsModule = { create: updateProps, update: updateProps };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.propsModule;
//# sourceMappingURL=props.js.map

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var raf = (typeof window !== 'undefined' && window.requestAnimationFrame) || setTimeout;
var nextFrame = function (fn) { raf(function () { raf(fn); }); };
function setNextFrame(obj, prop, val) {
    nextFrame(function () { obj[prop] = val; });
}
function updateStyle(oldVnode, vnode) {
    var cur, name, elm = vnode.elm, oldStyle = oldVnode.data.style, style = vnode.data.style;
    if (!oldStyle && !style)
        return;
    if (oldStyle === style)
        return;
    oldStyle = oldStyle || {};
    style = style || {};
    var oldHasDel = 'delayed' in oldStyle;
    for (name in oldStyle) {
        if (!style[name]) {
            if (name[0] === '-' && name[1] === '-') {
                elm.style.removeProperty(name);
            }
            else {
                elm.style[name] = '';
            }
        }
    }
    for (name in style) {
        cur = style[name];
        if (name === 'delayed') {
            for (name in style.delayed) {
                cur = style.delayed[name];
                if (!oldHasDel || cur !== oldStyle.delayed[name]) {
                    setNextFrame(elm.style, name, cur);
                }
            }
        }
        else if (name !== 'remove' && cur !== oldStyle[name]) {
            if (name[0] === '-' && name[1] === '-') {
                elm.style.setProperty(name, cur);
            }
            else {
                elm.style[name] = cur;
            }
        }
    }
}
function applyDestroyStyle(vnode) {
    var style, name, elm = vnode.elm, s = vnode.data.style;
    if (!s || !(style = s.destroy))
        return;
    for (name in style) {
        elm.style[name] = style[name];
    }
}
function applyRemoveStyle(vnode, rm) {
    var s = vnode.data.style;
    if (!s || !s.remove) {
        rm();
        return;
    }
    var name, elm = vnode.elm, i = 0, compStyle, style = s.remove, amount = 0, applied = [];
    for (name in style) {
        applied.push(name);
        elm.style[name] = style[name];
    }
    compStyle = getComputedStyle(elm);
    var props = compStyle['transition-property'].split(', ');
    for (; i < props.length; ++i) {
        if (applied.indexOf(props[i]) !== -1)
            amount++;
    }
    elm.addEventListener('transitionend', function (ev) {
        if (ev.target === elm)
            --amount;
        if (amount === 0)
            rm();
    });
}
exports.styleModule = {
    create: updateStyle,
    update: updateStyle,
    destroy: applyDestroyStyle,
    remove: applyRemoveStyle
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.styleModule;
//# sourceMappingURL=style.js.map

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var vnode_1 = __webpack_require__(33);
var is = __webpack_require__(52);
var htmldomapi_1 = __webpack_require__(51);
function isUndef(s) { return s === undefined; }
function isDef(s) { return s !== undefined; }
var emptyNode = vnode_1.default('', {}, [], undefined, undefined);
function sameVnode(vnode1, vnode2) {
    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;
}
function isVnode(vnode) {
    return vnode.sel !== undefined;
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, map = {}, key, ch;
    for (i = beginIdx; i <= endIdx; ++i) {
        ch = children[i];
        if (ch != null) {
            key = ch.key;
            if (key !== undefined)
                map[key] = i;
        }
    }
    return map;
}
var hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];
var h_1 = __webpack_require__(18);
exports.h = h_1.h;
var thunk_1 = __webpack_require__(53);
exports.thunk = thunk_1.thunk;
function init(modules, domApi) {
    var i, j, cbs = {};
    var api = domApi !== undefined ? domApi : htmldomapi_1.default;
    for (i = 0; i < hooks.length; ++i) {
        cbs[hooks[i]] = [];
        for (j = 0; j < modules.length; ++j) {
            var hook = modules[j][hooks[i]];
            if (hook !== undefined) {
                cbs[hooks[i]].push(hook);
            }
        }
    }
    function emptyNodeAt(elm) {
        var id = elm.id ? '#' + elm.id : '';
        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';
        return vnode_1.default(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
    }
    function createRmCb(childElm, listeners) {
        return function rmCb() {
            if (--listeners === 0) {
                var parent_1 = api.parentNode(childElm);
                api.removeChild(parent_1, childElm);
            }
        };
    }
    function createElm(vnode, insertedVnodeQueue) {
        var i, data = vnode.data;
        if (data !== undefined) {
            if (isDef(i = data.hook) && isDef(i = i.init)) {
                i(vnode);
                data = vnode.data;
            }
        }
        var children = vnode.children, sel = vnode.sel;
        if (sel === '!') {
            if (isUndef(vnode.text)) {
                vnode.text = '';
            }
            vnode.elm = api.createComment(vnode.text);
        }
        else if (sel !== undefined) {
            // Parse selector
            var hashIdx = sel.indexOf('#');
            var dotIdx = sel.indexOf('.', hashIdx);
            var hash = hashIdx > 0 ? hashIdx : sel.length;
            var dot = dotIdx > 0 ? dotIdx : sel.length;
            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;
            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)
                : api.createElement(tag);
            if (hash < dot)
                elm.id = sel.slice(hash + 1, dot);
            if (dotIdx > 0)
                elm.className = sel.slice(dot + 1).replace(/\./g, ' ');
            for (i = 0; i < cbs.create.length; ++i)
                cbs.create[i](emptyNode, vnode);
            if (is.array(children)) {
                for (i = 0; i < children.length; ++i) {
                    var ch = children[i];
                    if (ch != null) {
                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                    }
                }
            }
            else if (is.primitive(vnode.text)) {
                api.appendChild(elm, api.createTextNode(vnode.text));
            }
            i = vnode.data.hook; // Reuse variable
            if (isDef(i)) {
                if (i.create)
                    i.create(emptyNode, vnode);
                if (i.insert)
                    insertedVnodeQueue.push(vnode);
            }
        }
        else {
            vnode.elm = api.createTextNode(vnode.text);
        }
        return vnode.elm;
    }
    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
        for (; startIdx <= endIdx; ++startIdx) {
            var ch = vnodes[startIdx];
            if (ch != null) {
                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
            }
        }
    }
    function invokeDestroyHook(vnode) {
        var i, j, data = vnode.data;
        if (data !== undefined) {
            if (isDef(i = data.hook) && isDef(i = i.destroy))
                i(vnode);
            for (i = 0; i < cbs.destroy.length; ++i)
                cbs.destroy[i](vnode);
            if (vnode.children !== undefined) {
                for (j = 0; j < vnode.children.length; ++j) {
                    i = vnode.children[j];
                    if (i != null && typeof i !== "string") {
                        invokeDestroyHook(i);
                    }
                }
            }
        }
    }
    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
        for (; startIdx <= endIdx; ++startIdx) {
            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];
            if (ch != null) {
                if (isDef(ch.sel)) {
                    invokeDestroyHook(ch);
                    listeners = cbs.remove.length + 1;
                    rm = createRmCb(ch.elm, listeners);
                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)
                        cbs.remove[i_1](ch, rm);
                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {
                        i_1(ch, rm);
                    }
                    else {
                        rm();
                    }
                }
                else {
                    api.removeChild(parentElm, ch.elm);
                }
            }
        }
    }
    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
        var oldStartIdx = 0, newStartIdx = 0;
        var oldEndIdx = oldCh.length - 1;
        var oldStartVnode = oldCh[0];
        var oldEndVnode = oldCh[oldEndIdx];
        var newEndIdx = newCh.length - 1;
        var newStartVnode = newCh[0];
        var newEndVnode = newCh[newEndIdx];
        var oldKeyToIdx;
        var idxInOld;
        var elmToMove;
        var before;
        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (oldStartVnode == null) {
                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
            }
            else if (oldEndVnode == null) {
                oldEndVnode = oldCh[--oldEndIdx];
            }
            else if (newStartVnode == null) {
                newStartVnode = newCh[++newStartIdx];
            }
            else if (newEndVnode == null) {
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newStartVnode)) {
                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                oldStartVnode = oldCh[++oldStartIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else if (sameVnode(oldEndVnode, newEndVnode)) {
                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                oldEndVnode = oldCh[--oldEndIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newEndVnode)) {
                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                oldStartVnode = oldCh[++oldStartIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldEndVnode, newStartVnode)) {
                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                oldEndVnode = oldCh[--oldEndIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                if (oldKeyToIdx === undefined) {
                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                }
                idxInOld = oldKeyToIdx[newStartVnode.key];
                if (isUndef(idxInOld)) {
                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    newStartVnode = newCh[++newStartIdx];
                }
                else {
                    elmToMove = oldCh[idxInOld];
                    if (elmToMove.sel !== newStartVnode.sel) {
                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    }
                    else {
                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                        oldCh[idxInOld] = undefined;
                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                    }
                    newStartVnode = newCh[++newStartIdx];
                }
            }
        }
        if (oldStartIdx > oldEndIdx) {
            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
        }
        else if (newStartIdx > newEndIdx) {
            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
        }
    }
    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
        var i, hook;
        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {
            i(oldVnode, vnode);
        }
        var elm = vnode.elm = oldVnode.elm;
        var oldCh = oldVnode.children;
        var ch = vnode.children;
        if (oldVnode === vnode)
            return;
        if (vnode.data !== undefined) {
            for (i = 0; i < cbs.update.length; ++i)
                cbs.update[i](oldVnode, vnode);
            i = vnode.data.hook;
            if (isDef(i) && isDef(i = i.update))
                i(oldVnode, vnode);
        }
        if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
                if (oldCh !== ch)
                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);
            }
            else if (isDef(ch)) {
                if (isDef(oldVnode.text))
                    api.setTextContent(elm, '');
                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            }
            else if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            else if (isDef(oldVnode.text)) {
                api.setTextContent(elm, '');
            }
        }
        else if (oldVnode.text !== vnode.text) {
            api.setTextContent(elm, vnode.text);
        }
        if (isDef(hook) && isDef(i = hook.postpatch)) {
            i(oldVnode, vnode);
        }
    }
    return function patch(oldVnode, vnode) {
        var i, elm, parent;
        var insertedVnodeQueue = [];
        for (i = 0; i < cbs.pre.length; ++i)
            cbs.pre[i]();
        if (!isVnode(oldVnode)) {
            oldVnode = emptyNodeAt(oldVnode);
        }
        if (sameVnode(oldVnode, vnode)) {
            patchVnode(oldVnode, vnode, insertedVnodeQueue);
        }
        else {
            elm = oldVnode.elm;
            parent = api.parentNode(elm);
            createElm(vnode, insertedVnodeQueue);
            if (parent !== null) {
                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                removeVnodes(parent, [oldVnode], 0, 0);
            }
        }
        for (i = 0; i < insertedVnodeQueue.length; ++i) {
            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
        }
        for (i = 0; i < cbs.post.length; ++i)
            cbs.post[i]();
        return vnode;
    };
}
exports.init = init;
//# sourceMappingURL=snabbdom.js.map

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var vnode_1 = __webpack_require__(33);
var htmldomapi_1 = __webpack_require__(51);
function toVNode(node, domApi) {
    var api = domApi !== undefined ? domApi : htmldomapi_1.default;
    var text;
    if (api.isElement(node)) {
        var id = node.id ? '#' + node.id : '';
        var cn = node.getAttribute('class');
        var c = cn ? '.' + cn.split(' ').join('.') : '';
        var sel = api.tagName(node).toLowerCase() + id + c;
        var attrs = {};
        var children = [];
        var name_1;
        var i = void 0, n = void 0;
        var elmAttrs = node.attributes;
        var elmChildren = node.childNodes;
        for (i = 0, n = elmAttrs.length; i < n; i++) {
            name_1 = elmAttrs[i].nodeName;
            if (name_1 !== 'id' && name_1 !== 'class') {
                attrs[name_1] = elmAttrs[i].nodeValue;
            }
        }
        for (i = 0, n = elmChildren.length; i < n; i++) {
            children.push(toVNode(elmChildren[i]));
        }
        return vnode_1.default(sel, { attrs: attrs }, children, undefined, node);
    }
    else if (api.isText(node)) {
        text = api.getTextContent(node);
        return vnode_1.default(undefined, undefined, undefined, text, node);
    }
    else if (api.isComment(node)) {
        text = api.getTextContent(node);
        return vnode_1.default('!', undefined, undefined, text, undefined);
    }
    else {
        return vnode_1.default('', {}, [], undefined, undefined);
    }
}
exports.toVNode = toVNode;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = toVNode;
//# sourceMappingURL=tovnode.js.map

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(143);
/* harmony export (immutable) */ __webpack_exports__["default"] = switchPath;

function switchPathInputGuard(path, routes) {
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["a" /* isPattern */])(path)) {
        throw new Error("First parameter to switchPath must be a route path.");
    }
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* isRouteDefinition */])(routes)) {
        throw new Error("Second parameter to switchPath must be an object " +
            "containing route patterns.");
    }
}
function validatePath(sourcePath, matchedPath) {
    var sourceParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(sourcePath);
    var matchedParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(matchedPath);
    for (var i = 0; i < matchedParts.length; ++i) {
        if (matchedParts[i] !== sourceParts[i]) {
            return null;
        }
    }
    return "/" + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* extractPartial */])(sourcePath, matchedPath);
}
function betterMatch(candidate, reference) {
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* isNotNull */])(candidate)) {
        return false;
    }
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* isNotNull */])(reference)) {
        return true;
    }
    if (!validatePath(candidate, reference)) {
        return false;
    }
    return candidate.length >= reference.length;
}
function matchesWithParams(sourcePath, pattern) {
    var sourceParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(sourcePath);
    var patternParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(pattern);
    var params = patternParts
        .map(function (part, i) { return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["f" /* isParam */])(part) ? sourceParts[i] : null; })
        .filter(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* isNotNull */]);
    var matched = patternParts
        .every(function (part, i) { return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["f" /* isParam */])(part) || part === sourceParts[i]; });
    return matched ? params : [];
}
function getParamFnValue(paramFn, params) {
    var _paramFn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* isRouteDefinition */])(paramFn) ? paramFn["/"] : paramFn;
    return typeof _paramFn === "function" ? _paramFn.apply(void 0, params) : _paramFn;
}
function validate(_a) {
    var sourcePath = _a.sourcePath, matchedPath = _a.matchedPath, matchedValue = _a.matchedValue, routes = _a.routes;
    var path = matchedPath ? validatePath(sourcePath, matchedPath) : null;
    var value = matchedValue;
    if (!path) {
        path = routes["*"] ? sourcePath : null;
        value = path ? routes["*"] : null;
    }
    return { path: path, value: value };
}
function switchPath(sourcePath, routes) {
    switchPathInputGuard(sourcePath, routes);
    var matchedPath = null;
    var matchedValue = null;
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* traverseRoutes */])(routes, function matchPattern(pattern) {
        if (sourcePath.search(pattern) === 0 && betterMatch(pattern, matchedPath)) {
            matchedPath = pattern;
            matchedValue = routes[pattern];
        }
        var params = matchesWithParams(sourcePath, pattern).filter(Boolean);
        if (params.length > 0 && betterMatch(sourcePath, matchedPath)) {
            matchedPath = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* extractPartial */])(sourcePath, pattern);
            matchedValue = getParamFnValue(routes[pattern], params);
        }
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* isRouteDefinition */])(routes[pattern]) && params.length === 0) {
            if (sourcePath !== "/") {
                var child = switchPath(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["h" /* unprefixed */])(sourcePath, pattern) || "/", routes[pattern]);
                var nestedPath = pattern + child.path;
                if (child.path !== null &&
                    betterMatch(nestedPath, matchedPath)) {
                    matchedPath = nestedPath;
                    matchedValue = child.value;
                }
            }
        }
    });
    return validate({ sourcePath: sourcePath, matchedPath: matchedPath, matchedValue: matchedValue, routes: routes });
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isPattern;
/* harmony export (immutable) */ __webpack_exports__["b"] = isRouteDefinition;
/* harmony export (immutable) */ __webpack_exports__["g"] = traverseRoutes;
/* harmony export (immutable) */ __webpack_exports__["e"] = isNotNull;
/* harmony export (immutable) */ __webpack_exports__["c"] = splitPath;
/* harmony export (immutable) */ __webpack_exports__["f"] = isParam;
/* harmony export (immutable) */ __webpack_exports__["d"] = extractPartial;
/* harmony export (immutable) */ __webpack_exports__["h"] = unprefixed;
function isPattern(candidate) {
    return candidate.charAt(0) === "/" || candidate === "*";
}
function isRouteDefinition(candidate) {
    return !candidate || typeof candidate !== "object" ?
        false : isPattern(Object.keys(candidate)[0]);
}
function traverseRoutes(routes, callback) {
    var keys = Object.keys(routes);
    for (var i = 0; i < keys.length; ++i) {
        var pattern = keys[i];
        if (pattern === "*")
            continue;
        callback(pattern);
    }
}
function isNotNull(candidate) {
    return candidate !== null;
}
function splitPath(path) {
    return path.split("/").filter(function (s) { return !!s; });
}
function isParam(candidate) {
    return candidate.match(/:\w+/) !== null;
}
function extractPartial(sourcePath, pattern) {
    var patternParts = splitPath(pattern);
    var sourceParts = splitPath(sourcePath);
    var matchedParts = [];
    for (var i = 0; i < patternParts.length; ++i) {
        matchedParts.push(sourceParts[i]);
    }
    return matchedParts.filter(isNotNull).join("/");
}
function unprefixed(fullString, prefix) {
    return fullString.split(prefix)[1];
}
//# sourceMappingURL=util.js.map

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(145);


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = __webpack_require__(146);

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(56)(module)))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether 1.4.0 */

(function(root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    module.exports = factory(require, exports, module);
  } else {
    root.Tether = factory();
  }
}(this, function(require, exports, module) {

'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TetherBase = undefined;
if (typeof TetherBase === 'undefined') {
  TetherBase = { modules: [] };
}

var zeroElement = null;

// Same as native getBoundingClientRect, except it takes into account parent <frame> offsets
// if the element lies within a nested document (<frame> or <iframe>-like).
function getActualBoundingClientRect(node) {
  var boundingRect = node.getBoundingClientRect();

  // The original object returned by getBoundingClientRect is immutable, so we clone it
  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
  var rect = {};
  for (var k in boundingRect) {
    rect[k] = boundingRect[k];
  }

  if (node.ownerDocument !== document) {
    var _frameElement = node.ownerDocument.defaultView.frameElement;
    if (_frameElement) {
      var frameRect = getActualBoundingClientRect(_frameElement);
      rect.top += frameRect.top;
      rect.bottom += frameRect.top;
      rect.left += frameRect.left;
      rect.right += frameRect.left;
    }
  }

  return rect;
}

function getScrollParents(el) {
  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  var computedStyle = getComputedStyle(el) || {};
  var position = computedStyle.position;
  var parents = [];

  if (position === 'fixed') {
    return [el];
  }

  var parent = el;
  while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {
    var style = undefined;
    try {
      style = getComputedStyle(parent);
    } catch (err) {}

    if (typeof style === 'undefined' || style === null) {
      parents.push(parent);
      return parents;
    }

    var _style = style;
    var overflow = _style.overflow;
    var overflowX = _style.overflowX;
    var overflowY = _style.overflowY;

    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
        parents.push(parent);
      }
    }
  }

  parents.push(el.ownerDocument.body);

  // If the node is within a frame, account for the parent window scroll
  if (el.ownerDocument !== document) {
    parents.push(el.ownerDocument.defaultView);
  }

  return parents;
}

var uniqueId = (function () {
  var id = 0;
  return function () {
    return ++id;
  };
})();

var zeroPosCache = {};
var getOrigin = function getOrigin() {
  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
  // jitter as the user scrolls that messes with our ability to detect if two positions
  // are equivilant or not.  We place an element at the top left of the page that will
  // get the same jitter, so we can cancel the two out.
  var node = zeroElement;
  if (!node || !document.body.contains(node)) {
    node = document.createElement('div');
    node.setAttribute('data-tether-id', uniqueId());
    extend(node.style, {
      top: 0,
      left: 0,
      position: 'absolute'
    });

    document.body.appendChild(node);

    zeroElement = node;
  }

  var id = node.getAttribute('data-tether-id');
  if (typeof zeroPosCache[id] === 'undefined') {
    zeroPosCache[id] = getActualBoundingClientRect(node);

    // Clear the cache when this position call is done
    defer(function () {
      delete zeroPosCache[id];
    });
  }

  return zeroPosCache[id];
};

function removeUtilElements() {
  if (zeroElement) {
    document.body.removeChild(zeroElement);
  }
  zeroElement = null;
};

function getBounds(el) {
  var doc = undefined;
  if (el === document) {
    doc = document;
    el = document.documentElement;
  } else {
    doc = el.ownerDocument;
  }

  var docEl = doc.documentElement;

  var box = getActualBoundingClientRect(el);

  var origin = getOrigin();

  box.top -= origin.top;
  box.left -= origin.left;

  if (typeof box.width === 'undefined') {
    box.width = document.body.scrollWidth - box.left - box.right;
  }
  if (typeof box.height === 'undefined') {
    box.height = document.body.scrollHeight - box.top - box.bottom;
  }

  box.top = box.top - docEl.clientTop;
  box.left = box.left - docEl.clientLeft;
  box.right = doc.body.clientWidth - box.width - box.left;
  box.bottom = doc.body.clientHeight - box.height - box.top;

  return box;
}

function getOffsetParent(el) {
  return el.offsetParent || document.documentElement;
}

var _scrollBarSize = null;
function getScrollBarSize() {
  if (_scrollBarSize) {
    return _scrollBarSize;
  }
  var inner = document.createElement('div');
  inner.style.width = '100%';
  inner.style.height = '200px';

  var outer = document.createElement('div');
  extend(outer.style, {
    position: 'absolute',
    top: 0,
    left: 0,
    pointerEvents: 'none',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });

  outer.appendChild(inner);

  document.body.appendChild(outer);

  var widthContained = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var widthScroll = inner.offsetWidth;

  if (widthContained === widthScroll) {
    widthScroll = outer.clientWidth;
  }

  document.body.removeChild(outer);

  var width = widthContained - widthScroll;

  _scrollBarSize = { width: width, height: width };
  return _scrollBarSize;
}

function extend() {
  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var args = [];

  Array.prototype.push.apply(args, arguments);

  args.slice(1).forEach(function (obj) {
    if (obj) {
      for (var key in obj) {
        if (({}).hasOwnProperty.call(obj, key)) {
          out[key] = obj[key];
        }
      }
    }
  });

  return out;
}

function removeClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.remove(cls);
      }
    });
  } else {
    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
    var className = getClassName(el).replace(regex, ' ');
    setClassName(el, className);
  }
}

function addClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.add(cls);
      }
    });
  } else {
    removeClass(el, name);
    var cls = getClassName(el) + (' ' + name);
    setClassName(el, cls);
  }
}

function hasClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    return el.classList.contains(name);
  }
  var className = getClassName(el);
  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
}

function getClassName(el) {
  // Can't use just SVGAnimatedString here since nodes within a Frame in IE have
  // completely separately SVGAnimatedString base classes
  if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {
    return el.className.baseVal;
  }
  return el.className;
}

function setClassName(el, className) {
  el.setAttribute('class', className);
}

function updateClasses(el, add, all) {
  // Of the set of 'all' classes, we need the 'add' classes, and only the
  // 'add' classes to be set.
  all.forEach(function (cls) {
    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
      removeClass(el, cls);
    }
  });

  add.forEach(function (cls) {
    if (!hasClass(el, cls)) {
      addClass(el, cls);
    }
  });
}

var deferred = [];

var defer = function defer(fn) {
  deferred.push(fn);
};

var flush = function flush() {
  var fn = undefined;
  while (fn = deferred.pop()) {
    fn();
  }
};

var Evented = (function () {
  function Evented() {
    _classCallCheck(this, Evented);
  }

  _createClass(Evented, [{
    key: 'on',
    value: function on(event, handler, ctx) {
      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

      if (typeof this.bindings === 'undefined') {
        this.bindings = {};
      }
      if (typeof this.bindings[event] === 'undefined') {
        this.bindings[event] = [];
      }
      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
    }
  }, {
    key: 'once',
    value: function once(event, handler, ctx) {
      this.on(event, handler, ctx, true);
    }
  }, {
    key: 'off',
    value: function off(event, handler) {
      if (typeof this.bindings === 'undefined' || typeof this.bindings[event] === 'undefined') {
        return;
      }

      if (typeof handler === 'undefined') {
        delete this.bindings[event];
      } else {
        var i = 0;
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }, {
    key: 'trigger',
    value: function trigger(event) {
      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
        var i = 0;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        while (i < this.bindings[event].length) {
          var _bindings$event$i = this.bindings[event][i];
          var handler = _bindings$event$i.handler;
          var ctx = _bindings$event$i.ctx;
          var once = _bindings$event$i.once;

          var context = ctx;
          if (typeof context === 'undefined') {
            context = this;
          }

          handler.apply(context, args);

          if (once) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }]);

  return Evented;
})();

TetherBase.Utils = {
  getActualBoundingClientRect: getActualBoundingClientRect,
  getScrollParents: getScrollParents,
  getBounds: getBounds,
  getOffsetParent: getOffsetParent,
  extend: extend,
  addClass: addClass,
  removeClass: removeClass,
  hasClass: hasClass,
  updateClasses: updateClasses,
  defer: defer,
  flush: flush,
  uniqueId: uniqueId,
  Evented: Evented,
  getScrollBarSize: getScrollBarSize,
  removeUtilElements: removeUtilElements
};
/* globals TetherBase, performance */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (typeof TetherBase === 'undefined') {
  throw new Error('You must include the utils.js file before tether.js');
}

var _TetherBase$Utils = TetherBase.Utils;
var getScrollParents = _TetherBase$Utils.getScrollParents;
var getBounds = _TetherBase$Utils.getBounds;
var getOffsetParent = _TetherBase$Utils.getOffsetParent;
var extend = _TetherBase$Utils.extend;
var addClass = _TetherBase$Utils.addClass;
var removeClass = _TetherBase$Utils.removeClass;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;
var flush = _TetherBase$Utils.flush;
var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;
var removeUtilElements = _TetherBase$Utils.removeUtilElements;

function within(a, b) {
  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

  return a + diff >= b && b >= a - diff;
}

var transformKey = (function () {
  if (typeof document === 'undefined') {
    return '';
  }
  var el = document.createElement('div');

  var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
  for (var i = 0; i < transforms.length; ++i) {
    var key = transforms[i];
    if (el.style[key] !== undefined) {
      return key;
    }
  }
})();

var tethers = [];

var position = function position() {
  tethers.forEach(function (tether) {
    tether.position(false);
  });
  flush();
};

function now() {
  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
    return performance.now();
  }
  return +new Date();
}

(function () {
  var lastCall = null;
  var lastDuration = null;
  var pendingTimeout = null;

  var tick = function tick() {
    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
      // We voluntarily throttle ourselves if we can't manage 60fps
      lastDuration = Math.min(lastDuration - 16, 250);

      // Just in case this is the last event, remember to position just once more
      pendingTimeout = setTimeout(tick, 250);
      return;
    }

    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
      // Some browsers call events a little too frequently, refuse to run more than is reasonable
      return;
    }

    if (pendingTimeout != null) {
      clearTimeout(pendingTimeout);
      pendingTimeout = null;
    }

    lastCall = now();
    position();
    lastDuration = now() - lastCall;
  };

  if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {
    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
      window.addEventListener(event, tick);
    });
  }
})();

var MIRROR_LR = {
  center: 'center',
  left: 'right',
  right: 'left'
};

var MIRROR_TB = {
  middle: 'middle',
  top: 'bottom',
  bottom: 'top'
};

var OFFSET_MAP = {
  top: 0,
  left: 0,
  middle: '50%',
  center: '50%',
  bottom: '100%',
  right: '100%'
};

var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (left === 'auto') {
    left = MIRROR_LR[relativeToAttachment.left];
  }

  if (top === 'auto') {
    top = MIRROR_TB[relativeToAttachment.top];
  }

  return { left: left, top: top };
};

var attachmentToOffset = function attachmentToOffset(attachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
    left = OFFSET_MAP[attachment.left];
  }

  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
    top = OFFSET_MAP[attachment.top];
  }

  return { left: left, top: top };
};

function addOffset() {
  var out = { top: 0, left: 0 };

  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
    offsets[_key] = arguments[_key];
  }

  offsets.forEach(function (_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (typeof top === 'string') {
      top = parseFloat(top, 10);
    }
    if (typeof left === 'string') {
      left = parseFloat(left, 10);
    }

    out.top += top;
    out.left += left;
  });

  return out;
}

function offsetToPx(offset, size) {
  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
  }
  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
  }

  return offset;
}

var parseOffset = function parseOffset(value) {
  var _value$split = value.split(' ');

  var _value$split2 = _slicedToArray(_value$split, 2);

  var top = _value$split2[0];
  var left = _value$split2[1];

  return { top: top, left: left };
};
var parseAttachment = parseOffset;

var TetherClass = (function (_Evented) {
  _inherits(TetherClass, _Evented);

  function TetherClass(options) {
    var _this = this;

    _classCallCheck(this, TetherClass);

    _get(Object.getPrototypeOf(TetherClass.prototype), 'constructor', this).call(this);
    this.position = this.position.bind(this);

    tethers.push(this);

    this.history = [];

    this.setOptions(options, false);

    TetherBase.modules.forEach(function (module) {
      if (typeof module.initialize !== 'undefined') {
        module.initialize.call(_this);
      }
    });

    this.position();
  }

  _createClass(TetherClass, [{
    key: 'getClass',
    value: function getClass() {
      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var classes = this.options.classes;

      if (typeof classes !== 'undefined' && classes[key]) {
        return this.options.classes[key];
      } else if (this.options.classPrefix) {
        return this.options.classPrefix + '-' + key;
      } else {
        return key;
      }
    }
  }, {
    key: 'setOptions',
    value: function setOptions(options) {
      var _this2 = this;

      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var defaults = {
        offset: '0 0',
        targetOffset: '0 0',
        targetAttachment: 'auto auto',
        classPrefix: 'tether'
      };

      this.options = extend(defaults, options);

      var _options = this.options;
      var element = _options.element;
      var target = _options.target;
      var targetModifier = _options.targetModifier;

      this.element = element;
      this.target = target;
      this.targetModifier = targetModifier;

      if (this.target === 'viewport') {
        this.target = document.body;
        this.targetModifier = 'visible';
      } else if (this.target === 'scroll-handle') {
        this.target = document.body;
        this.targetModifier = 'scroll-handle';
      }

      ['element', 'target'].forEach(function (key) {
        if (typeof _this2[key] === 'undefined') {
          throw new Error('Tether Error: Both element and target must be defined');
        }

        if (typeof _this2[key].jquery !== 'undefined') {
          _this2[key] = _this2[key][0];
        } else if (typeof _this2[key] === 'string') {
          _this2[key] = document.querySelector(_this2[key]);
        }
      });

      addClass(this.element, this.getClass('element'));
      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('target'));
      }

      if (!this.options.attachment) {
        throw new Error('Tether Error: You must provide an attachment');
      }

      this.targetAttachment = parseAttachment(this.options.targetAttachment);
      this.attachment = parseAttachment(this.options.attachment);
      this.offset = parseOffset(this.options.offset);
      this.targetOffset = parseOffset(this.options.targetOffset);

      if (typeof this.scrollParents !== 'undefined') {
        this.disable();
      }

      if (this.targetModifier === 'scroll-handle') {
        this.scrollParents = [this.target];
      } else {
        this.scrollParents = getScrollParents(this.target);
      }

      if (!(this.options.enabled === false)) {
        this.enable(pos);
      }
    }
  }, {
    key: 'getTargetBounds',
    value: function getTargetBounds() {
      if (typeof this.targetModifier !== 'undefined') {
        if (this.targetModifier === 'visible') {
          if (this.target === document.body) {
            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
          } else {
            var bounds = getBounds(this.target);

            var out = {
              height: bounds.height,
              width: bounds.width,
              top: bounds.top,
              left: bounds.left
            };

            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
            out.height = Math.min(innerHeight, out.height);
            out.height -= 2;

            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
            out.width = Math.min(innerWidth, out.width);
            out.width -= 2;

            if (out.top < pageYOffset) {
              out.top = pageYOffset;
            }
            if (out.left < pageXOffset) {
              out.left = pageXOffset;
            }

            return out;
          }
        } else if (this.targetModifier === 'scroll-handle') {
          var bounds = undefined;
          var target = this.target;
          if (target === document.body) {
            target = document.documentElement;

            bounds = {
              left: pageXOffset,
              top: pageYOffset,
              height: innerHeight,
              width: innerWidth
            };
          } else {
            bounds = getBounds(target);
          }

          var style = getComputedStyle(target);

          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;

          var scrollBottom = 0;
          if (hasBottomScroll) {
            scrollBottom = 15;
          }

          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;

          var out = {
            width: 15,
            height: height * 0.975 * (height / target.scrollHeight),
            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
          };

          var fitAdj = 0;
          if (height < 408 && this.target === document.body) {
            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
          }

          if (this.target !== document.body) {
            out.height = Math.max(out.height, 24);
          }

          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);

          if (this.target === document.body) {
            out.height = Math.max(out.height, 24);
          }

          return out;
        }
      } else {
        return getBounds(this.target);
      }
    }
  }, {
    key: 'clearCache',
    value: function clearCache() {
      this._cache = {};
    }
  }, {
    key: 'cache',
    value: function cache(k, getter) {
      // More than one module will often need the same DOM info, so
      // we keep a cache which is cleared on each position call
      if (typeof this._cache === 'undefined') {
        this._cache = {};
      }

      if (typeof this._cache[k] === 'undefined') {
        this._cache[k] = getter.call(this);
      }

      return this._cache[k];
    }
  }, {
    key: 'enable',
    value: function enable() {
      var _this3 = this;

      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('enabled'));
      }
      addClass(this.element, this.getClass('enabled'));
      this.enabled = true;

      this.scrollParents.forEach(function (parent) {
        if (parent !== _this3.target.ownerDocument) {
          parent.addEventListener('scroll', _this3.position);
        }
      });

      if (pos) {
        this.position();
      }
    }
  }, {
    key: 'disable',
    value: function disable() {
      var _this4 = this;

      removeClass(this.target, this.getClass('enabled'));
      removeClass(this.element, this.getClass('enabled'));
      this.enabled = false;

      if (typeof this.scrollParents !== 'undefined') {
        this.scrollParents.forEach(function (parent) {
          parent.removeEventListener('scroll', _this4.position);
        });
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this5 = this;

      this.disable();

      tethers.forEach(function (tether, i) {
        if (tether === _this5) {
          tethers.splice(i, 1);
        }
      });

      // Remove any elements we were using for convenience from the DOM
      if (tethers.length === 0) {
        removeUtilElements();
      }
    }
  }, {
    key: 'updateAttachClasses',
    value: function updateAttachClasses(elementAttach, targetAttach) {
      var _this6 = this;

      elementAttach = elementAttach || this.attachment;
      targetAttach = targetAttach || this.targetAttachment;
      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];

      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
        // updateAttachClasses can be called more than once in a position call, so
        // we need to clean up after ourselves such that when the last defer gets
        // ran it doesn't add any extra classes from previous calls.
        this._addAttachClasses.splice(0, this._addAttachClasses.length);
      }

      if (typeof this._addAttachClasses === 'undefined') {
        this._addAttachClasses = [];
      }
      var add = this._addAttachClasses;

      if (elementAttach.top) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
      }
      if (elementAttach.left) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
      }
      if (targetAttach.top) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
      }
      if (targetAttach.left) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
      }

      var all = [];
      sides.forEach(function (side) {
        all.push(_this6.getClass('element-attached') + '-' + side);
        all.push(_this6.getClass('target-attached') + '-' + side);
      });

      defer(function () {
        if (!(typeof _this6._addAttachClasses !== 'undefined')) {
          return;
        }

        updateClasses(_this6.element, _this6._addAttachClasses, all);
        if (!(_this6.options.addTargetClasses === false)) {
          updateClasses(_this6.target, _this6._addAttachClasses, all);
        }

        delete _this6._addAttachClasses;
      });
    }
  }, {
    key: 'position',
    value: function position() {
      var _this7 = this;

      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
      // tethers (in which case call Tether.Utils.flush yourself when you're done)

      if (!this.enabled) {
        return;
      }

      this.clearCache();

      // Turn 'auto' attachments into the appropriate corner or edge
      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);

      this.updateAttachClasses(this.attachment, targetAttachment);

      var elementPos = this.cache('element-bounds', function () {
        return getBounds(_this7.element);
      });

      var width = elementPos.width;
      var height = elementPos.height;

      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
        var _lastSize = this.lastSize;

        // We cache the height and width to make it possible to position elements that are
        // getting hidden.
        width = _lastSize.width;
        height = _lastSize.height;
      } else {
        this.lastSize = { width: width, height: height };
      }

      var targetPos = this.cache('target-bounds', function () {
        return _this7.getTargetBounds();
      });
      var targetSize = targetPos;

      // Get an actual px offset from the attachment
      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);

      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);

      // Add the manually provided offset
      offset = addOffset(offset, manualOffset);
      targetOffset = addOffset(targetOffset, manualTargetOffset);

      // It's now our goal to make (element position + offset) == (target position + target offset)
      var left = targetPos.left + targetOffset.left - offset.left;
      var top = targetPos.top + targetOffset.top - offset.top;

      for (var i = 0; i < TetherBase.modules.length; ++i) {
        var _module2 = TetherBase.modules[i];
        var ret = _module2.position.call(this, {
          left: left,
          top: top,
          targetAttachment: targetAttachment,
          targetPos: targetPos,
          elementPos: elementPos,
          offset: offset,
          targetOffset: targetOffset,
          manualOffset: manualOffset,
          manualTargetOffset: manualTargetOffset,
          scrollbarSize: scrollbarSize,
          attachment: this.attachment
        });

        if (ret === false) {
          return false;
        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
          continue;
        } else {
          top = ret.top;
          left = ret.left;
        }
      }

      // We describe the position three different ways to give the optimizer
      // a chance to decide the best possible way to position the element
      // with the fewest repaints.
      var next = {
        // It's position relative to the page (absolute positioning when
        // the element is a child of the body)
        page: {
          top: top,
          left: left
        },

        // It's position relative to the viewport (fixed positioning)
        viewport: {
          top: top - pageYOffset,
          bottom: pageYOffset - top - height + innerHeight,
          left: left - pageXOffset,
          right: pageXOffset - left - width + innerWidth
        }
      };

      var doc = this.target.ownerDocument;
      var win = doc.defaultView;

      var scrollbarSize = undefined;
      if (win.innerHeight > doc.documentElement.clientHeight) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.bottom -= scrollbarSize.height;
      }

      if (win.innerWidth > doc.documentElement.clientWidth) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.right -= scrollbarSize.width;
      }

      if (['', 'static'].indexOf(doc.body.style.position) === -1 || ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {
        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
        next.page.bottom = doc.body.scrollHeight - top - height;
        next.page.right = doc.body.scrollWidth - left - width;
      }

      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
        (function () {
          var offsetParent = _this7.cache('target-offsetparent', function () {
            return getOffsetParent(_this7.target);
          });
          var offsetPosition = _this7.cache('target-offsetparent-bounds', function () {
            return getBounds(offsetParent);
          });
          var offsetParentStyle = getComputedStyle(offsetParent);
          var offsetParentSize = offsetPosition;

          var offsetBorder = {};
          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
          });

          offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
          offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;

          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
              // We're within the visible part of the target's scroll parent
              var scrollTop = offsetParent.scrollTop;
              var scrollLeft = offsetParent.scrollLeft;

              // It's position relative to the target's offset parent (absolute positioning when
              // the element is moved to be a child of the target's offset parent).
              next.offset = {
                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
              };
            }
          }
        })();
      }

      // We could also travel up the DOM and try each containing context, rather than only
      // looking at the body, but we're gonna get diminishing returns.

      this.move(next);

      this.history.unshift(next);

      if (this.history.length > 3) {
        this.history.pop();
      }

      if (flushChanges) {
        flush();
      }

      return true;
    }

    // THE ISSUE
  }, {
    key: 'move',
    value: function move(pos) {
      var _this8 = this;

      if (!(typeof this.element.parentNode !== 'undefined')) {
        return;
      }

      var same = {};

      for (var type in pos) {
        same[type] = {};

        for (var key in pos[type]) {
          var found = false;

          for (var i = 0; i < this.history.length; ++i) {
            var point = this.history[i];
            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
              found = true;
              break;
            }
          }

          if (!found) {
            same[type][key] = true;
          }
        }
      }

      var css = { top: '', left: '', right: '', bottom: '' };

      var transcribe = function transcribe(_same, _pos) {
        var hasOptimizations = typeof _this8.options.optimizations !== 'undefined';
        var gpu = hasOptimizations ? _this8.options.optimizations.gpu : null;
        if (gpu !== false) {
          var yPos = undefined,
              xPos = undefined;
          if (_same.top) {
            css.top = 0;
            yPos = _pos.top;
          } else {
            css.bottom = 0;
            yPos = -_pos.bottom;
          }

          if (_same.left) {
            css.left = 0;
            xPos = _pos.left;
          } else {
            css.right = 0;
            xPos = -_pos.right;
          }

          if (window.matchMedia) {
            // HubSpot/tether#207
            var retina = window.matchMedia('only screen and (min-resolution: 1.3dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3)').matches;
            if (!retina) {
              xPos = Math.round(xPos);
              yPos = Math.round(yPos);
            }
          }

          css[transformKey] = 'translateX(' + xPos + 'px) translateY(' + yPos + 'px)';

          if (transformKey !== 'msTransform') {
            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
            // but IE9 doesn't support 3d transforms and will choke.
            css[transformKey] += " translateZ(0)";
          }
        } else {
          if (_same.top) {
            css.top = _pos.top + 'px';
          } else {
            css.bottom = _pos.bottom + 'px';
          }

          if (_same.left) {
            css.left = _pos.left + 'px';
          } else {
            css.right = _pos.right + 'px';
          }
        }
      };

      var moved = false;
      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
        css.position = 'absolute';
        transcribe(same.page, pos.page);
      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
        css.position = 'fixed';
        transcribe(same.viewport, pos.viewport);
      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
        (function () {
          css.position = 'absolute';
          var offsetParent = _this8.cache('target-offsetparent', function () {
            return getOffsetParent(_this8.target);
          });

          if (getOffsetParent(_this8.element) !== offsetParent) {
            defer(function () {
              _this8.element.parentNode.removeChild(_this8.element);
              offsetParent.appendChild(_this8.element);
            });
          }

          transcribe(same.offset, pos.offset);
          moved = true;
        })();
      } else {
        css.position = 'absolute';
        transcribe({ top: true, left: true }, pos.page);
      }

      if (!moved) {
        if (this.options.bodyElement) {
          this.options.bodyElement.appendChild(this.element);
        } else {
          var offsetParentIsBody = true;
          var currentNode = this.element.parentNode;
          while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {
            if (getComputedStyle(currentNode).position !== 'static') {
              offsetParentIsBody = false;
              break;
            }

            currentNode = currentNode.parentNode;
          }

          if (!offsetParentIsBody) {
            this.element.parentNode.removeChild(this.element);
            this.element.ownerDocument.body.appendChild(this.element);
          }
        }
      }

      // Any css change will trigger a repaint, so let's avoid one if nothing changed
      var writeCSS = {};
      var write = false;
      for (var key in css) {
        var val = css[key];
        var elVal = this.element.style[key];

        if (elVal !== val) {
          write = true;
          writeCSS[key] = val;
        }
      }

      if (write) {
        defer(function () {
          extend(_this8.element.style, writeCSS);
          _this8.trigger('repositioned');
        });
      }
    }
  }]);

  return TetherClass;
})(Evented);

TetherClass.modules = [];

TetherBase.position = position;

var Tether = extend(TetherClass, TetherBase);
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var extend = _TetherBase$Utils.extend;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

function getBoundingRect(tether, to) {
  if (to === 'scrollParent') {
    to = tether.scrollParents[0];
  } else if (to === 'window') {
    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
  }

  if (to === document) {
    to = to.documentElement;
  }

  if (typeof to.nodeType !== 'undefined') {
    (function () {
      var node = to;
      var size = getBounds(to);
      var pos = size;
      var style = getComputedStyle(to);

      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];

      // Account any parent Frames scroll offset
      if (node.ownerDocument !== document) {
        var win = node.ownerDocument.defaultView;
        to[0] += win.pageXOffset;
        to[1] += win.pageYOffset;
        to[2] += win.pageXOffset;
        to[3] += win.pageYOffset;
      }

      BOUNDS_FORMAT.forEach(function (side, i) {
        side = side[0].toUpperCase() + side.substr(1);
        if (side === 'Top' || side === 'Left') {
          to[i] += parseFloat(style['border' + side + 'Width']);
        } else {
          to[i] -= parseFloat(style['border' + side + 'Width']);
        }
      });
    })();
  }

  return to;
}

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;
    var targetAttachment = _ref.targetAttachment;

    if (!this.options.constraints) {
      return true;
    }

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
      var _lastSize = this.lastSize;

      // Handle the item getting hidden as a result of our positioning without glitching
      // the classes in and out
      width = _lastSize.width;
      height = _lastSize.height;
    }

    var targetSize = this.cache('target-bounds', function () {
      return _this.getTargetBounds();
    });

    var targetHeight = targetSize.height;
    var targetWidth = targetSize.width;

    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];

    this.options.constraints.forEach(function (constraint) {
      var outOfBoundsClass = constraint.outOfBoundsClass;
      var pinnedClass = constraint.pinnedClass;

      if (outOfBoundsClass) {
        allClasses.push(outOfBoundsClass);
      }
      if (pinnedClass) {
        allClasses.push(pinnedClass);
      }
    });

    allClasses.forEach(function (cls) {
      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
        allClasses.push(cls + '-' + side);
      });
    });

    var addClasses = [];

    var tAttachment = extend({}, targetAttachment);
    var eAttachment = extend({}, this.attachment);

    this.options.constraints.forEach(function (constraint) {
      var to = constraint.to;
      var attachment = constraint.attachment;
      var pin = constraint.pin;

      if (typeof attachment === 'undefined') {
        attachment = '';
      }

      var changeAttachX = undefined,
          changeAttachY = undefined;
      if (attachment.indexOf(' ') >= 0) {
        var _attachment$split = attachment.split(' ');

        var _attachment$split2 = _slicedToArray(_attachment$split, 2);

        changeAttachY = _attachment$split2[0];
        changeAttachX = _attachment$split2[1];
      } else {
        changeAttachX = changeAttachY = attachment;
      }

      var bounds = getBoundingRect(_this, to);

      if (changeAttachY === 'target' || changeAttachY === 'both') {
        if (top < bounds[1] && tAttachment.top === 'top') {
          top += targetHeight;
          tAttachment.top = 'bottom';
        }

        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
          top -= targetHeight;
          tAttachment.top = 'top';
        }
      }

      if (changeAttachY === 'together') {
        if (tAttachment.top === 'top') {
          if (eAttachment.top === 'bottom' && top < bounds[1]) {
            top += targetHeight;
            tAttachment.top = 'bottom';

            top += height;
            eAttachment.top = 'top';
          } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {
            top -= height - targetHeight;
            tAttachment.top = 'bottom';

            eAttachment.top = 'bottom';
          }
        }

        if (tAttachment.top === 'bottom') {
          if (eAttachment.top === 'top' && top + height > bounds[3]) {
            top -= targetHeight;
            tAttachment.top = 'top';

            top -= height;
            eAttachment.top = 'bottom';
          } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {
            top += height - targetHeight;
            tAttachment.top = 'top';

            eAttachment.top = 'top';
          }
        }

        if (tAttachment.top === 'middle') {
          if (top + height > bounds[3] && eAttachment.top === 'top') {
            top -= height;
            eAttachment.top = 'bottom';
          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
            top += height;
            eAttachment.top = 'top';
          }
        }
      }

      if (changeAttachX === 'target' || changeAttachX === 'both') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          left += targetWidth;
          tAttachment.left = 'right';
        }

        if (left + width > bounds[2] && tAttachment.left === 'right') {
          left -= targetWidth;
          tAttachment.left = 'left';
        }
      }

      if (changeAttachX === 'together') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          if (eAttachment.left === 'right') {
            left += targetWidth;
            tAttachment.left = 'right';

            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'left') {
            left += targetWidth;
            tAttachment.left = 'right';

            left -= width;
            eAttachment.left = 'right';
          }
        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
          if (eAttachment.left === 'left') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'right') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left += width;
            eAttachment.left = 'left';
          }
        } else if (tAttachment.left === 'center') {
          if (left + width > bounds[2] && eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (left < bounds[0] && eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          }
        }
      }

      if (changeAttachY === 'element' || changeAttachY === 'both') {
        if (top < bounds[1] && eAttachment.top === 'bottom') {
          top += height;
          eAttachment.top = 'top';
        }

        if (top + height > bounds[3] && eAttachment.top === 'top') {
          top -= height;
          eAttachment.top = 'bottom';
        }
      }

      if (changeAttachX === 'element' || changeAttachX === 'both') {
        if (left < bounds[0]) {
          if (eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'center') {
            left += width / 2;
            eAttachment.left = 'left';
          }
        }

        if (left + width > bounds[2]) {
          if (eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'center') {
            left -= width / 2;
            eAttachment.left = 'right';
          }
        }
      }

      if (typeof pin === 'string') {
        pin = pin.split(',').map(function (p) {
          return p.trim();
        });
      } else if (pin === true) {
        pin = ['top', 'left', 'right', 'bottom'];
      }

      pin = pin || [];

      var pinned = [];
      var oob = [];

      if (top < bounds[1]) {
        if (pin.indexOf('top') >= 0) {
          top = bounds[1];
          pinned.push('top');
        } else {
          oob.push('top');
        }
      }

      if (top + height > bounds[3]) {
        if (pin.indexOf('bottom') >= 0) {
          top = bounds[3] - height;
          pinned.push('bottom');
        } else {
          oob.push('bottom');
        }
      }

      if (left < bounds[0]) {
        if (pin.indexOf('left') >= 0) {
          left = bounds[0];
          pinned.push('left');
        } else {
          oob.push('left');
        }
      }

      if (left + width > bounds[2]) {
        if (pin.indexOf('right') >= 0) {
          left = bounds[2] - width;
          pinned.push('right');
        } else {
          oob.push('right');
        }
      }

      if (pinned.length) {
        (function () {
          var pinnedClass = undefined;
          if (typeof _this.options.pinnedClass !== 'undefined') {
            pinnedClass = _this.options.pinnedClass;
          } else {
            pinnedClass = _this.getClass('pinned');
          }

          addClasses.push(pinnedClass);
          pinned.forEach(function (side) {
            addClasses.push(pinnedClass + '-' + side);
          });
        })();
      }

      if (oob.length) {
        (function () {
          var oobClass = undefined;
          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
            oobClass = _this.options.outOfBoundsClass;
          } else {
            oobClass = _this.getClass('out-of-bounds');
          }

          addClasses.push(oobClass);
          oob.forEach(function (side) {
            addClasses.push(oobClass + '-' + side);
          });
        })();
      }

      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
        eAttachment.left = tAttachment.left = false;
      }
      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
        eAttachment.top = tAttachment.top = false;
      }

      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
        _this.updateAttachClasses(eAttachment, tAttachment);
        _this.trigger('update', {
          attachment: eAttachment,
          targetAttachment: tAttachment
        });
      }
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return { top: top, left: left };
  }
});
/* globals TetherBase */

'use strict';

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    var targetPos = this.getTargetBounds();

    var bottom = top + height;
    var right = left + width;

    var abutted = [];
    if (top <= targetPos.bottom && bottom >= targetPos.top) {
      ['left', 'right'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === left || targetPosSide === right) {
          abutted.push(side);
        }
      });
    }

    if (left <= targetPos.right && right >= targetPos.left) {
      ['top', 'bottom'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === top || targetPosSide === bottom) {
          abutted.push(side);
        }
      });
    }

    var allClasses = [];
    var addClasses = [];

    var sides = ['left', 'top', 'right', 'bottom'];
    allClasses.push(this.getClass('abutted'));
    sides.forEach(function (side) {
      allClasses.push(_this.getClass('abutted') + '-' + side);
    });

    if (abutted.length) {
      addClasses.push(this.getClass('abutted'));
    }

    abutted.forEach(function (side) {
      addClasses.push(_this.getClass('abutted') + '-' + side);
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return true;
  }
});
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

TetherBase.modules.push({
  position: function position(_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (!this.options.shift) {
      return;
    }

    var shift = this.options.shift;
    if (typeof this.options.shift === 'function') {
      shift = this.options.shift.call(this, { top: top, left: left });
    }

    var shiftTop = undefined,
        shiftLeft = undefined;
    if (typeof shift === 'string') {
      shift = shift.split(' ');
      shift[1] = shift[1] || shift[0];

      var _shift = shift;

      var _shift2 = _slicedToArray(_shift, 2);

      shiftTop = _shift2[0];
      shiftLeft = _shift2[1];

      shiftTop = parseFloat(shiftTop, 10);
      shiftLeft = parseFloat(shiftLeft, 10);
    } else {
      shiftTop = shift.top;
      shiftLeft = shift.left;
    }

    top += shiftTop;
    left += shiftLeft;

    return { top: top, left: left };
  }
});
return Tether;

}));


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Breadcrumb;
(function (Breadcrumb) {
    function run(sources) {
        var basics = createBasicExamples(sources);
        var content = createContentExamples(sources);
        var variations = createVariationExamples(sources);
        var vTree$ = xstream_1.default.combine(basics, content, variations).map(function (_a) {
            var basics = _a[0], content = _a[1], variations = _a[2];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Breadcrumb",
                                subtext: "A breadcrumb is used to show hierarchy between content"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")].concat(basics)),
                    UI.Segment.render({ basic: true }, [UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")].concat(content)),
                    UI.Segment.render({ basic: true }, [UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")].concat(variations))
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Breadcrumb.run = run;
    function createBasicExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render([
                { text: "Home", href: "#" },
                { text: "Store", href: "#" },
                { text: "T-Shirt", active: true }
            ])),
            code: "UI.Breadcrumb.render([\n        { text: \"Home\", href: \"#\" },\n        { text: \"Store\", href: \"#\" },\n        { text: \"T-Shirt\", active: true }\n      ])",
            header: "Breadcrumb",
            description: "A standard breadcrumb."
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.AngleRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Store", href: "#" },
                    { text: "T-Shirt", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.AngleRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Store\", href: \"#\" },\n          { text: \"T-Shirt\", active: true }\n        ]\n      })"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM);
    }
    function createContentExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Divider",
            description: "A breadcrumb can contain a divider to show the relationship between sections, this can be formatted as an icon or text.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: "|" },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: \"|\" },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex3 = components_1.Example.run(sources, {
            header: "Section",
            description: "A breadcrumb can contain sections that can either be formatted as a link or text.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.AngleRight) },
                content: [
                    { text: "Home" },
                    { text: "Search", active: true },
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.AngleRight) },\n        content: [\n          { text: \"Home\" },\n          { text: \"Search\", active: true },\n        ]\n      })"
        });
        var ex4 = components_1.Example.run(sources, {
            header: "Link",
            description: "A section may be linkable or contain a link.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.AngleRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: ["Search for: ", dom_1.a("paper towels")], active: true },
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.AngleRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: [\"Search for: \", a(\"paper towels\")], active: true },\n        ]\n      })"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM, ex3.DOM, ex4.DOM);
    }
    function createVariationExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Size",
            description: "A breadcrumb can vary in size.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Mini, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Mini, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Tiny, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Tiny, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Small, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Small, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Medium, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Medium, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Large, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Large, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex6 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Big, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Big, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex7 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Huge, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Huge, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex8 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Massive, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Massive, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM, ex6.DOM, ex7.DOM, ex8.DOM);
    }
})(Breadcrumb = exports.Breadcrumb || (exports.Breadcrumb = {}));


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var Content;
(function (Content) {
    function run(sources) {
        var fieldExamples = createFieldExamples(sources);
        var fieldsExamples = createFieldsExamples(sources);
        var textareaExamples = createTextAreaExamples(sources);
        var checkboxExamples = createCheckboxExamples(sources);
        var radioCheckboxExamples = createRadioCheckboxExamples(sources);
        var dropdownExamples = createDropdownExamples(sources);
        var multipleSelectExamples = createMultipleSelectExamples(sources);
        var messageExamples = createMessageExamples(sources);
        return xstream_1.default.combine.apply(null, [].concat(fieldExamples, fieldsExamples, textareaExamples, checkboxExamples, radioCheckboxExamples, dropdownExamples, multipleSelectExamples, messageExamples).map(function (x) { return x.DOM; }));
    }
    Content.run = run;
    function createFieldExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Field",
            description: "A field is a form element containing a label and an input",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({ content: { label: "User Input", main: [UI.Textbox.render()] } })
            ])),
            code: "UI.Form.render([\n        UI.Field.render({ content: { label: \"User Input\", main: [UI.Textbox.render()]}})\n      ])"
        });
        return [ex];
    }
    function createFieldsExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Fields",
            description: "A set of fields can appear grouped together",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render([
                    UI.Field.render({ content: { label: "First name", main: [UI.Textbox.render({ placeholder: "First Name" })] } }),
                    UI.Field.render({ content: { label: "Middle name", main: [UI.Textbox.render({ placeholder: "Middle Name" })] } }),
                    UI.Field.render({ content: { label: "Last name", main: [UI.Textbox.render({ placeholder: "Last Name" })] } })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render([\n          UI.Field.render({content: { label: \"First name\", main: [UI.Textbox.render({placeholder: \"First Name\"})]}}),\n          UI.Field.render({content: { label: \"Middle name\", main: [UI.Textbox.render({placeholder: \"Middle Name\"})]}}),\n          UI.Field.render({content: { label: \"Last name\", main: [UI.Textbox.render({placeholder: \"Last Name\"})]}})\n        ])\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({ content: { label: "First name", main: [UI.Textbox.render({ placeholder: "First Name" })] } }),
                    UI.Field.render({ content: { label: "Middle name", main: [UI.Textbox.render({ placeholder: "Middle Name" })] } }),
                    UI.Field.render({ content: { label: "Last name", main: [UI.Textbox.render({ placeholder: "Last Name" })] } })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({content: { label: \"First name\", main: [UI.Textbox.render({placeholder: \"First Name\"})]}}),\n          UI.Field.render({content: { label: \"Middle name\", main: [UI.Textbox.render({placeholder: \"Middle Name\"})]}}),\n          UI.Field.render({content: { label: \"Last name\", main: [UI.Textbox.render({placeholder: \"Last Name\"})]}})\n        ])\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ inline: true }, [
                    UI.Field.render({
                        props: { width: 8 },
                        content: { label: "Name", main: [UI.Textbox.render({ placeholder: "First Name" })] }
                    }),
                    UI.Field.render({
                        props: { width: 3 },
                        content: [UI.Textbox.render({ placeholder: "Middle Name" })]
                    }),
                    UI.Field.render({
                        props: { width: 5 },
                        content: [UI.Textbox.render({ placeholder: "Last Name" })]
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({inline: true}, [\n          UI.Field.render({\n            props: {width: 8},\n            content: { label: \"Name\", main: [UI.Textbox.render({placeholder: \"First Name\"})]}\n          }),\n          UI.Field.render({\n            props: {width: 3},\n            content: [UI.Textbox.render({placeholder: \"Middle Name\"})]\n          }),\n          UI.Field.render({\n            props: {width: 5},\n            content: [UI.Textbox.render({placeholder: \"Last Name\"})]\n          })\n        ])\n      ])"
        });
        return [ex1, ex2, ex3];
    }
    function createTextAreaExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Text Area",
            description: "A textarea can be used to allow for extended user input.",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({
                    content: {
                        label: "Text",
                        main: [UI.Textbox.render({ rows: 10 })]
                    }
                }),
                UI.Field.render({
                    content: {
                        label: "Short text",
                        main: [UI.Textbox.render({ rows: 2 })]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Field.render({content: { \n          label: \"Text\",\n          main: [UI.Textbox.render({rows: 10})]\n        }}),\n        UI.Field.render({content: { \n          label: \"Short text\",\n          main: [UI.Textbox.render({rows: 2})]\n        }})\n      ])"
        });
        return [ex];
    }
    function createCheckboxExamples(sources) {
        var example = components_1.Example.run(sources, {
            header: "Checkbox",
            description: "A form can contain a checkbox",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({ inline: true }, [UI.Checkbox.render("Checkbox")]),
                UI.Field.render({ inline: true }, [UI.Checkbox.render({ slider: true }, "Slider")]),
                UI.Field.render({ inline: true }, [UI.Checkbox.render({ toggle: true }, "Toggle")])
            ])),
            code: "UI.Form.render([\n        UI.Field.render({inline: true}, [UI.Checkbox.render(\"Checkbox\")]),\n        UI.Field.render({inline: true}, [UI.Checkbox.render({slider: true}, \"Slider\")]),\n        UI.Field.render({inline: true}, [UI.Checkbox.render({toggle: true}, \"Toggle\")])\n      ])"
        });
        return [example];
    }
    function createRadioCheckboxExamples(sources) {
        var example = components_1.Example.run(sources, {
            header: "Radio Checkbox",
            description: "A form can contain a radio checkbox",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({
                    props: { inline: true },
                    content: {
                        label: "Select your favourite fruit:",
                        main: [
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Apples")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Oranges")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Pears")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Grapefruit")])
                        ]
                    }
                }),
                UI.Fields.render({
                    props: { grouped: true },
                    content: {
                        label: "Select your favourite fruit:",
                        main: [
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Apples")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Oranges")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Pears")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Grapefruit")])
                        ]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({\n          props: { inline: true },\n          content: {\n            label: \"Select your favourite fruit:\",\n            main: [\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Apples\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Oranges\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Pears\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Grapefruit\")])\n            ]\n          }\n        }),\n        UI.Fields.render({\n          props: { grouped: true },\n          content: {\n            label: \"Select your favourite fruit:\",\n            main: [\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Apples\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Oranges\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Pears\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Grapefruit\")])\n            ]\n          }\n        })\n      ])"
        });
        return [example];
    }
    function createDropdownExamples(sources) {
        var ddlGender = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ default: "Gender", selection: true }),
            content$: xstream_1.default.of([
                { main: "Male", value: "Male" },
                { main: "Female", value: "Female" }
            ])
        });
        var ex1 = components_1.Example.run(sources, {
            header: "Dropdown",
            description: "A form can contain a dropdown",
            VNode$: ddlGender.DOM.map(function (ddlGender) { return UI.Form.render([
                UI.Field.render({ content: { label: "Gender", main: ddlGender } })
            ]); }),
            code: "let ddlGender = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({default: \"Gender\", selection: true}),\n      content$: xs.of([\n        {main: \"Male\", value: \"Male\"},\n        {main: \"Female\", value: \"Female\"}\n      ])\n    });\n    let vTree$ = ddlGender.DOM.map(\n        ddlGender => UI.Form.render([\n        UI.Field.render({content: {label: \"Gender\", main: ddlGender}})\n      ])\n    );"
        });
        var countries = ["United States", "The Netherlands", "Belgium", "Germany", "France"];
        var ddlCountries = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true, search: true }),
            content$: xstream_1.default.of(countries.map(function (country) { return ({ main: country, value: country }); }))
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: ddlCountries.DOM.map(function (ddlCountries) { return UI.Form.render([
                UI.Field.render({ content: { label: "Country", main: ddlCountries } })
            ]); }),
            code: "let countries = [\"United States\", \"The Netherlands\", \"Belgium\", \"Germany\", \"France\"];\n    let ddlCountries = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({ selection: true, search: true }),\n      content$: xs.of(countries.map(country => ({ main: country, value: country })))\n    })\n    let vTree$: ddlCountries.DOM.map(\n      ddlCountries => UI.Form.render([\n        UI.Field.render({content: { label: \"Country\", main: ddlCountries}})\n      ])\n    )"
        });
        return [ex1, ex2];
    }
    function createMultipleSelectExamples(sources) {
        return [];
    }
    function createMessageExamples(sources) {
        var example = components_1.Example.run(sources, {
            header: "Message",
            description: "A form can contain a message",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Message.render({
                    props: { color: UI.Color.Error },
                    content: {
                        header: "We had some issues",
                        body: [UI.List.render({ bulleted: true }, [
                                { main: "Please enter your first name" },
                                { main: "Please enter your last name" }
                            ])]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Message.render({\n          props: { color: UI.Color.Error },\n          content: {\n            header: \"We had some issues\",\n            body: [UI.List.render({ bulleted: true }, [\n              { main: \"Please enter your first name\" },\n              { main: \"Please enter your last name\" }\n            ])]\n          }\n        })\n      ])"
        });
        return [example];
    }
})(Content = exports.Content || (exports.Content = {}));


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var FieldsVariations;
(function (FieldsVariations) {
    function run(sources) {
        var equalWidthEx = components_1.Example.run(sources, {
            header: "Evenly Divided",
            description: "Fields can have their widths divided evenly",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        content: {
                            label: "First name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Middle name",
                            main: [UI.Textbox.render({ placeholder: "Middle Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({ equalWidth: true }, [\n          UI.Field.render({\n            content: {\n              label: \"First name\",\n              main: [UI.Textbox.render({ placeholder: \"First Name\" })]\n            }\n          }),\n          UI.Field.render({\n            content: {\n              label: \"Middle name\",\n              main: [UI.Textbox.render({ placeholder: \"Middle Name\" })]\n            }\n          }),\n          UI.Field.render({\n            content: {\n              label: \"Last name\",\n              main: [UI.Textbox.render({ placeholder: \"Last Name\" })]\n            }\n          })\n        ])\n      ])"
        });
        var groupedEx = components_1.Example.run(sources, {
            header: "Grouped fields",
            description: "Fields can show related choices",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ grouped: true }, [
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Apples")]),
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Oranges")]),
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Pears")]),
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Grapefruit")])
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({ grouped: true }, [\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Apples\")]),\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Oranges\")]),\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Pears\")]),\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Grapefruit\")])\n        ])\n      ])"
        });
        var inlineEx = components_1.Example.run(sources, {
            header: "Inline",
            description: "Multiple fields may be inline in a row",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({
                    props: { inline: true },
                    content: {
                        label: "Phone Number",
                        main: [
                            UI.Field.render([UI.Textbox.render({ placeholder: "(xxx)" })]),
                            UI.Field.render([UI.Textbox.render({ placeholder: "xxx" })]),
                            UI.Field.render([UI.Textbox.render({ placeholder: "xxxx" })])
                        ]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({\n          props: { inline: true },\n          content: {\n            label: \"Phone Number\",\n            main: [\n              UI.Field.render([UI.Textbox.render({placeholder: \"(xxx)\"})]),\n              UI.Field.render([UI.Textbox.render({placeholder: \"xxx\"})]),\n              UI.Field.render([UI.Textbox.render({placeholder: \"xxxx\"})])\n            ]\n          }\n        })\n      ])"
        });
        return xstream_1.default.combine(equalWidthEx.DOM, groupedEx.DOM, inlineEx.DOM);
    }
    FieldsVariations.run = run;
})(FieldsVariations = exports.FieldsVariations || (exports.FieldsVariations = {}));


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var FieldVariations;
(function (FieldVariations) {
    function run(sources) {
        var inlineEx = components_1.Example.run(sources, {
            header: "Inline",
            description: "A field can have its label next to instead of above it.",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({
                    props: { inline: true },
                    content: {
                        label: "Full name",
                        main: [UI.Textbox.render({ placeholder: "Full Name" })]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Field.render({\n          props: {inline: true},\n          content: {\n            label: \"Full name\",\n            main: [UI.Textbox.render({placeholder: \"Full Name\"})]\n          }\n        })\n      ])"
        });
        var widthEx = components_1.Example.run(sources, {
            header: "Width",
            description: "A field can specify its width in grid columns",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render([
                    UI.Field.render({
                        props: { width: 6 },
                        content: {
                            label: "First name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        props: { width: 4 },
                        content: {
                            label: "Middle",
                            main: [UI.Textbox.render({ placeholder: "Middle Name" })]
                        }
                    }),
                    UI.Field.render({
                        props: { width: 6 },
                        content: {
                            label: "Last name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Fields.render([
                    UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: "2 Wide" })]),
                    UI.Field.render({ width: 12 }, [UI.Textbox.render({ placeholder: "12 Wide" })]),
                    UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: "2 Wide" })])
                ]),
                UI.Fields.render([
                    UI.Field.render({ width: 8 }, [UI.Textbox.render({ placeholder: "8 Wide" })]),
                    UI.Field.render({ width: 6 }, [UI.Textbox.render({ placeholder: "6 Wide" })]),
                    UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: "2 Wide" })])
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render([\n          UI.Field.render({\n            props: { width: 6 },\n            content: {\n              label: \"First name\",\n              main: [UI.Textbox.render({ placeholder: \"First Name\" })]\n            }\n          }),\n          UI.Field.render({\n            props: { width: 4 },\n            content: {\n              label: \"Middle\",\n              main: [UI.Textbox.render({ placeholder: \"Middle Name\" })]\n            }\n          }),\n          UI.Field.render({\n            props: { width: 6 },\n            content: {\n              label: \"Last name\",\n              main: [UI.Textbox.render({ placeholder: \"Last Name\" })]\n            }\n          })\n        ]),\n        UI.Fields.render([\n          UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: \"2 Wide\" })]),\n          UI.Field.render({ width: 12 }, [UI.Textbox.render({ placeholder: \"12 Wide\" })]),\n          UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: \"2 Wide\" })])\n        ]),\n        UI.Fields.render([\n          UI.Field.render({ width: 8 }, [UI.Textbox.render({ placeholder: \"8 Wide\" })]),\n          UI.Field.render({ width: 6 }, [UI.Textbox.render({ placeholder: \"6 Wide\" })]),\n          UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: \"2 Wide\" })])\n        ])\n      ])"
        });
        var requiredEx = components_1.Example.run(sources, {
            header: "Required",
            description: "A field can show that input is mandetory",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({
                    props: { required: true },
                    content: {
                        label: "Full name",
                        main: [UI.Textbox.render({ placeholder: "Full Name" })]
                    }
                }),
                UI.Field.render([UI.Checkbox.render("I agree to the Terms and Conditions")])
            ])),
            code: "UI.Form.render([\n        UI.Field.render({\n          props: {required: true},\n          content: {\n            label: \"Full name\",\n            main: [UI.Textbox.render({placeholder: \"Full Name\"})]\n          }\n        }),\n        UI.Field.render([UI.Checkbox.render(\"I agree to the Terms and Conditions\")])\n      ])"
        });
        return xstream_1.default.combine(inlineEx.DOM, widthEx.DOM, requiredEx.DOM);
    }
    FieldVariations.run = run;
})(FieldVariations = exports.FieldVariations || (exports.FieldVariations = {}));


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var FormVariations;
(function (FormVariations) {
    function run(sources) {
        var equalWidthExample = components_1.Example.run(sources, {
            header: "Equal Width",
            description: "Forms can automatically divide fields to be equal width",
            VNode$: xstream_1.default.of(UI.Form.render({ equalWidth: true }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "Username",
                            main: [UI.Textbox.render({ placeholder: "Username" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Password",
                            main: [UI.Textbox.render({ type: "password", placeholder: "Password" })]
                        }
                    })
                ]),
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Middle name",
                            main: [UI.Textbox.render({ placeholder: "Middle Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render({ equalWidth: true}, [\n        UI.Fields.render([\n          UI.Field.render({content: {\n            label: \"Username\",\n            main: [UI.Textbox.render({placeholder: \"Username\"})]\n          }}),\n          UI.Field.render({content: {\n            label: \"Password\",\n            main: [UI.Textbox.render({type: \"password\", placeholder: \"Password\"})]\n          }})\n        ]),\n        UI.Fields.render([\n          UI.Field.render({content: {\n            label: \"First name\",\n            main: [UI.Textbox.render({placeholder: \"First Name\"})]\n          }}),\n          UI.Field.render({content: {\n            label: \"Middle name\",\n            main: [UI.Textbox.render({placeholder: \"Middle Name\"})]\n          }}),\n          UI.Field.render({content: {\n            label: \"Last name\",\n            main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n          }})\n        ])\n      ])"
        });
        var invertedEx = components_1.Example.run(sources, {
            header: "Inverted",
            description: "A form on a dark background may have to invert its color scheme",
            VNode$: xstream_1.default.of(UI.Segment.render({ inverted: true }, [
                UI.Form.render({ inverted: true }, [
                    UI.Fields.render({ equalWidth: true }, [
                        UI.Field.render({
                            content: {
                                label: "First Name",
                                main: [UI.Textbox.render({ placeholder: "First Name" })]
                            }
                        }),
                        UI.Field.render({
                            content: {
                                label: "Last name",
                                main: [UI.Textbox.render({ placeholder: "Last Name" })]
                            }
                        })
                    ]),
                    UI.Field.render({ inline: true }, [UI.Checkbox.render("I agree to the Terms and Conditions")]),
                    UI.Button.render("Submit")
                ])
            ])),
            code: "UI.Segment.render({ inverted: true }, [\n        UI.Form.render({ inverted: true }, [\n          UI.Fields.render({ equalWidth: true }, [\n            UI.Field.render({\n              content: {\n                label: \"First Name\",\n                main: [UI.Textbox.render({ placeholder: \"First Name\" })]\n              }\n            }),\n            UI.Field.render({\n              content: {\n                label: \"Last name\",\n                main: [UI.Textbox.render({ placeholder: \"Last Name\" })]\n              }\n            })\n          ]),\n          UI.Field.render({inline: true}, [UI.Checkbox.render(\"I agree to the Terms and Conditions\")]),\n          UI.Button.render(\"Submit\")\n        ])\n      ])"
        });
        var examples = [].concat(createSizeVariations(sources), equalWidthExample, invertedEx);
        return xstream_1.default.combine.apply(null, examples.map(function (ex) { return ex.DOM; }));
    }
    FormVariations.run = run;
    function createSizeVariations(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Size",
            description: "A form can vary in size",
            VNode$: xstream_1.default.of(UI.Form.render({ size: "mini" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"mini\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "tiny" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"tiny\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "small" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"small\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "medium" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "medium"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "large" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"large\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex6 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "big" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"big\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex7 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "huge" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"huge\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex8 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "massive" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"massive\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        return [ex, ex2, ex3, ex4, ex5, ex6, ex7, ex8];
    }
})(FormVariations = exports.FormVariations || (exports.FormVariations = {}));


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(155);
var content_1 = __webpack_require__(149);
var states_1 = __webpack_require__(154);
var formvariations_1 = __webpack_require__(152);
var fieldvariations_1 = __webpack_require__(151);
var fieldsvariations_1 = __webpack_require__(150);
var Form;
(function (Form) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var content = content_1.Content.run(sources);
        var states = states_1.States.run(sources);
        var formVariations = formvariations_1.FormVariations.run(sources);
        var fieldVariations = fieldvariations_1.FieldVariations.run(sources);
        var fieldsVariations = fieldsvariations_1.FieldsVariations.run(sources);
        var vTree$ = xstream_1.default.combine(types, content, states, formVariations, fieldVariations, fieldsVariations).map(function (_a) {
            var types = _a[0], content = _a[1], states = _a[2], formVariations = _a[3], fieldVariations = _a[4], fieldsVariations = _a[5];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Form",
                                subtext: "A form displays a set of related user input fields in a structured way"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                    ]
                        .concat(types)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")
                    ]
                        .concat(content)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "States")
                    ]
                        .concat(states)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Form Variations")
                    ]
                        .concat(formVariations)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Field Variations")
                    ]
                        .concat(fieldVariations)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Group Variations")
                    ]
                        .concat(fieldsVariations))
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Form.run = run;
})(Form = exports.Form || (exports.Form = {}));


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var States;
(function (States) {
    function run(sources) {
        var loadingEx = components_1.Example.run(sources, {
            header: "Loading",
            description: "If a form is in loading state, it will automatically show a loading indicator.",
            VNode$: xstream_1.default.of(UI.Form.render({ loading: true }, [
                UI.Field.render({ content: { label: "Email", main: [UI.Textbox.render()] } }),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({loading: true}, [\n        UI.Field.render({ content: { label: \"Email\", main: [UI.Textbox.render()] } }),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ddlGender = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ default: "Gender", selection: true }),
            content$: xstream_1.default.of([
                { main: "Male", value: "Male" },
                { main: "Female", value: "Female" }
            ])
        });
        var fieldErrorEx = components_1.Example.run(sources, {
            header: "Field Error",
            description: "Individual fields may display an error state",
            VNode$: ddlGender.DOM.map(function (ddlGender) { return UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        props: { error: true },
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Field.render({
                    props: { error: true },
                    content: { label: "Gender", main: ddlGender }
                }),
                UI.Field.render({
                    props: { error: true },
                    content: [UI.Checkbox.render("I agree to the Terms and Conditions")]
                }),
            ]); }),
            code: "let ddlGender = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({ default: \"Gender\", selection: true }),\n      content$: xs.of([\n        { main: \"Male\", value: \"Male\" },\n        { main: \"Female\", value: \"Female\" }\n      ])\n    });\n    let vTree$ = ddlGender.DOM.map(\n      ddlGender => UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({\n            props: {error: true},\n            content: {\n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: {\n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Field.render({\n          props: {error: true},\n          content: {label: \"Gender\", main: ddlGender}\n        }),\n        UI.Field.render({\n          props: {error: true},\n          content: [UI.Checkbox.render(\"I agree to the Terms and Conditions\")]\n        }),\n      ])\n    )"
        });
        var disabledFieldEx = components_1.Example.run(sources, {
            header: "Disabled Field",
            description: "Individual fields may be disabled",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        props: { disabled: true },
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ disabled: true, placeholder: "Disabled" })]
                        }
                    }),
                    UI.Field.render({
                        props: { disabled: true },
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ disabled: true, placeholder: "Disabled" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({\n            props: { disabled: true},\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({disabled: true, placeholder: \"Disabled\"})]\n            }\n          }),\n          UI.Field.render({\n            props: { disabled: true},\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({disabled: true, placeholder: \"Disabled\"})]\n            }\n          })\n        ])\n      ])"
        });
        var readOnlyEx = components_1.Example.run(sources, {
            header: "Read-Only Field",
            description: "Invidual fields may be read only",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ readonly: true, placeholder: "Read Only" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ readonly: true, placeholder: "Read Only" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({readonly: true, placeholder: \"Read Only\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({readonly: true, placeholder: \"Read Only\"})]\n            }\n          })\n        ])\n      ])"
        });
        return xstream_1.default.combine(loadingEx.DOM, fieldErrorEx.DOM, disabledFieldEx.DOM, readOnlyEx.DOM);
    }
    States.run = run;
})(States = exports.States || (exports.States = {}));


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var Types;
(function (Types) {
    function run(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Form",
            description: "A form",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({ content: { label: "First Name", main: UI.Textbox.render({ placeholder: "First Name" }) } }),
                UI.Field.render({ content: { label: "Last Name", main: UI.Textbox.render({ placeholder: "Last Name" }) } }),
                UI.Field.render([UI.Checkbox.render("I agree to the Terms and Conditions")]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render([\n        UI.Field.render({ content: { label: \"First Name\", main: UI.Textbox.render({ placeholder: \"First Name\" }) } }),\n        UI.Field.render({ content: { label: \"Last Name\", main: UI.Textbox.render({ placeholder: \"Last Name\" }) } }),\n        UI.Field.render([UI.Checkbox.render(\"I agree to the Terms and Conditions\")]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var states = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware"];
        var ddlStates = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true }),
            content$: xstream_1.default.of(states.map(function (state) { return ({ main: state, value: state }); }))
        });
        var countries = ["United States", "The Netherlands", "Belgium", "Germany", "France"];
        var ddlCountries = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true, search: true }),
            content$: xstream_1.default.of(countries.map(function (country) { return ({ main: country, value: country }); }))
        });
        var cards = ["Visa", "American Express", "Discover"];
        var ddlCards = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true }),
            content$: xstream_1.default.of(cards.map(function (card) { return ({ main: card, value: card }); }))
        });
        var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        var ddlMonths = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true, search: true, size: UI.Size.Fluid }),
            content$: xstream_1.default.of(months.map(function (month) { return ({ main: month, value: month }); }))
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.combine(ddlStates.DOM, ddlCountries.DOM, ddlCards.DOM, ddlMonths.DOM).map(function (_a) {
                var ddlStates = _a[0], ddlCountries = _a[1], ddlCards = _a[2], ddlMonths = _a[3];
                return UI.Form.render([
                    UI.Header.render({ dividing: true }, "Shipping Information"),
                    UI.Field.render({
                        content: {
                            label: "Name", main: [
                                UI.Fields.render({ equalWidth: true }, [
                                    UI.Field.render(UI.Textbox.render({ placeholder: "First Name" })),
                                    UI.Field.render(UI.Textbox.render({ placeholder: "Last Name" }))
                                ])
                            ]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Billing adress", main: [
                                UI.Fields.render([
                                    UI.Field.render({ width: 12 }, [UI.Textbox.render({ placeholder: "Street Adress" })]),
                                    UI.Field.render({ width: 4 }, [UI.Textbox.render({ placeholder: "Apt #" })])
                                ])
                            ]
                        }
                    }),
                    UI.Fields.render({ equalWidth: true }, [
                        UI.Field.render({ content: { label: "State", main: ddlStates } }),
                        UI.Field.render({ content: { label: "Country", main: ddlCountries } })
                    ]),
                    UI.Header.render({ dividing: true }, "Billing Information"),
                    UI.Field.render({ content: { label: "Card Type", main: ddlCards } }),
                    UI.Fields.render([
                        UI.Field.render({ props: { width: 7 }, content: { label: "Card Number", main: [UI.Textbox.render({ placeholder: "Card #" })] } }),
                        UI.Field.render({ props: { width: 3 }, content: { label: "CVC", main: [UI.Textbox.render({ placeholder: "CVC" })] } }),
                        UI.Field.render({
                            props: { width: 6 }, content: {
                                label: "Expiration", main: [
                                    UI.Fields.render({ equalWidth: true }, [
                                        UI.Field.render([ddlMonths]),
                                        UI.Field.render([UI.Textbox.render({ placeholder: "Year" })])
                                    ])
                                ]
                            }
                        })
                    ]),
                    UI.Header.render({ dividing: true }, "Receipt"),
                    //TODO Multiple dropdown example,
                    UI.Segment.render([
                        UI.Checkbox.render({ toggle: true }, "Do not include a receipt in the package")
                    ]),
                    UI.Button.render("Submit order")
                ]);
            }),
            code: "let states = [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\"];\n      let ddlStates = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true}),\n        content$: xs.of(states.map(state => ({main: state, value: state})))\n      });\n      let countries = [\"United States\", \"The Netherlands\", \"Belgium\", \"Germany\", \"France\"];\n      let ddlCountries = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true, search: true}),\n        content$: xs.of(countries.map(country => ({main: country, value: country})))\n      });\n      let cards = [\"Visa\", \"American Express\", \"Discover\"];\n      let ddlCards = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true}),\n        content$: xs.of(cards.map(card => ({main: card, value: card})))\n      });\n      let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let ddlMonths = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true, search: true, size: UI.Size.Fluid}),\n        content$: xs.of(months.map(month => ({main: month, value: month})))\n      });\n      let vTree$: xs.combine(ddlStates.DOM, ddlCountries.DOM, ddlCards.DOM, ddlMonths.DOM).map(\n        ([ddlStates, ddlCountries, ddlCards, ddlMonths]) => UI.Form.render([\n          UI.Header.render({dividing: true}, \"Shipping Information\"),\n          UI.Field.render({ content: { label: \"Name\", main: [\n            UI.Fields.render({equalWidth: true}, [\n              UI.Field.render(UI.Textbox.render({placeholder: \"First Name\"})),\n              UI.Field.render(UI.Textbox.render({placeholder: \"Last Name\"}))\n            ])\n          ]}}),\n          UI.Field.render({ content: { label: \"Billing adress\", main: [\n            UI.Fields.render([\n              UI.Field.render({ width: 12}, [UI.Textbox.render({placeholder: \"Street Adress\"})]),\n              UI.Field.render({ width: 4}, [UI.Textbox.render({placeholder: \"Apt #\"})])\n            ])\n          ]}}),\n          UI.Fields.render({equalWidth: true}, [\n            UI.Field.render({content: {label: \"State\", main: ddlStates}}),\n            UI.Field.render({content: {label: \"Country\", main: ddlCountries}})\n          ]),\n          UI.Header.render({dividing: true}, \"Billing Information\"),\n          UI.Field.render({content: { label: \"Card Type\", main: ddlCards}}),\n          UI.Fields.render([\n            UI.Field.render({props: {width: 7}, content: { label: \"Card Number\", main: [UI.Textbox.render({placeholder: \"Card #\"})]}}),\n            UI.Field.render({props: {width: 3}, content: { label: \"CVC\", main: [UI.Textbox.render({placeholder: \"CVC\"})]}}),\n            UI.Field.render({props: {width: 6}, content: { label: \"Expiration\", main: [\n              UI.Fields.render({equalWidth: true}, [\n                UI.Field.render([ddlMonths]),\n                UI.Field.render([UI.Textbox.render({placeholder: \"Year\"})])\n              ])\n            ]}})\n          ]),\n          UI.Header.render({dividing: true}, \"Receipt\"),\n          //TODO Multiple dropdown example,\n          UI.Segment.render([\n            UI.Checkbox.render({toggle: true}, \"Do not include a receipt in the package\")\n          ]),\n          UI.Button.render(\"Submit order\")\n        ])\n      )"
        });
        return xstream_1.default.combine(ex.DOM, ex2.DOM);
    }
    Types.run = run;
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Content;
(function (Content) {
    function run(sources) {
        var rowsEx = components_1.Example.run(sources, {
            header: "Rows",
            description: "A row is a horizontal grouping of columns",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3 }, [
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ]),
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Grid.render({ width: 3 }, [\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render([\n          UI.Column.render(), \n          UI.Column.render(), \n          UI.Column.render()\n        ])\n      ])"
        });
        var columnsEx = components_1.Example.run(sources, {
            header: "Columns",
            description: "Columns each contain gutters giving them equal spacing from other columns.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 8}),\n        UI.Column.render({width: 8}),\n        UI.Column.render({width: 8}),\n        UI.Column.render({width: 8})\n      ])"
        });
        return xstream_1.default.combine(rowsEx.DOM, columnsEx.DOM);
    }
    Content.run = run;
})(Content = exports.Content || (exports.Content = {}));


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var types_1 = __webpack_require__(159);
var content_1 = __webpack_require__(156);
var variations_1 = __webpack_require__(160);
var responsiveVariations_1 = __webpack_require__(158);
var Definition;
(function (Definition) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var content = content_1.Content.run(sources);
        var variations = variations_1.Variations.run(sources);
        var responsive = responsiveVariations_1.ResponsiveVariations.run(sources);
        var vTree$ = xstream_1.default.combine(types, content, variations, responsive).map(function (_a) {
            var types = _a[0], content = _a[1], variations = _a[2], responsive = _a[3];
            return UI.Container.render([
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                ]
                    .concat(types)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")
                ]
                    .concat(content)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")
                ]
                    .concat(variations)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Responsive Variants")
                ]
                    .concat(responsive)),
            ]);
        });
        return vTree$;
    }
    Definition.run = run;
})(Definition = exports.Definition || (exports.Definition = {}));


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var ResponsiveVariations;
(function (ResponsiveVariations) {
    function run(sources) {
        var doublingEx = createDoublingExamples(sources);
        var stackableEx = createStackableExamples(sources);
        var reversedEx = createReversedExamples(sources);
        var deviceVisibilityEx = createDeviceVisiblityExamples(sources);
        var responsiveWidthEx = createResponsiveWithExamples(sources);
        var examples = [].concat(doublingEx, stackableEx, reversedEx, deviceVisibilityEx, responsiveWidthEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    ResponsiveVariations.run = run;
    function createDoublingExamples(sources) {
        var doublingEx = components_1.Example.run(sources, {
            header: "Doubling",
            description: [
                dom_1.p("A grid can double its column width on tablet and mobile sizes"),
                UI.Message.render({ color: UI.Color.Info }, "A grid will round its columns to the closest reasonable value when doubling, for example a five column grid will use 2 mobile, 3 tablet, 5 desktop. To force 1 column on mobile you can add stackable")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 5, doubling: true }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({width: 5, doubling: true}, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        return [doublingEx.DOM];
    }
    function createStackableExamples(sources) {
        var stackableEx = components_1.Example.run(sources, {
            header: "Stackable",
            description: [
                dom_1.p("A grid can have its columns stack on-top of each other after reaching mobile breakpoints"),
                UI.Message.render({ color: UI.Color.Info }, "To see a grid stack, try resizing your browser to a small width")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 2, stackable: true }, [
                UI.Column.render([
                    UI.Segment.render([
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                    ])
                ]),
                UI.Column.render([
                    UI.Segment.render([
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ width: 2, stackable: true }, [\n        UI.Column.render([\n          UI.Segment.render([\n\n          ])\n        ]),\n        UI.Column.render([\n          UI.Segment.render([\n\n          ])\n        ])\n      ])"
        });
        return [stackableEx.DOM];
    }
    function createReversedExamples(sources) {
        var reversedEx = components_1.Example.run(sources, {
            header: "Reversed",
            description: [
                dom_1.p("A grid or row can specify that its columns should reverse order at different device sizes"),
                UI.Message.render({ color: UI.Color.Info }, "Reversed grids are compatible with divided grids and other complex grid types.")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Grid.render({ reversedComputer: true, equalWidth: true }, [
                    UI.Row.render([
                        UI.Column.render("Computer A Fourth"),
                        UI.Column.render("Computer A Third"),
                        UI.Column.render("Computer A Second"),
                        UI.Column.render("Computer A First")
                    ]),
                    UI.Row.render([
                        UI.Column.render("Computer B Fourth"),
                        UI.Column.render("Computer B Third"),
                        UI.Column.render("Computer B Second"),
                        UI.Column.render("Computer B First")
                    ]),
                ]),
                UI.Grid.render({ reversedTablet: true, equalWidth: true }, [
                    UI.Row.render([
                        UI.Column.render("Tablet A Fourth"),
                        UI.Column.render("Tablet A Third"),
                        UI.Column.render("Tablet A Second"),
                        UI.Column.render("Tablet A First")
                    ])
                ]),
                UI.Grid.render({ reversedMobile: true, equalWidth: true }, [
                    UI.Row.render([
                        UI.Column.render("Mobile A Fourth"),
                        UI.Column.render("Mobile A Third"),
                        UI.Column.render("Mobile A Second"),
                        UI.Column.render("Mobile A First")
                    ])
                ]),
            ])),
            code: "UI.Grid.render({ reversedComputer: true, equalWidth: true }, [\n          UI.Row.render([\n            UI.Column.render(\"Computer A Fourth\"),\n            UI.Column.render(\"Computer A Third\"),\n            UI.Column.render(\"Computer A Second\"),\n            UI.Column.render(\"Computer A First\")\n          ]),\n          UI.Row.render([\n            UI.Column.render(\"Computer B Fourth\"),\n            UI.Column.render(\"Computer B Third\"),\n            UI.Column.render(\"Computer B Second\"),\n            UI.Column.render(\"Computer B First\")\n          ]),\n        ]),\n        UI.Grid.render({ reversedTablet: true, equalWidth: true }, [\n          UI.Row.render([\n            UI.Column.render(\"Tablet A Fourth\"),\n            UI.Column.render(\"Tablet A Third\"),\n            UI.Column.render(\"Tablet A Second\"),\n            UI.Column.render(\"Tablet A First\")\n          ])\n        ]),\n        UI.Grid.render({ reversedMobile: true, equalWidth: true }, [\n          UI.Row.render([\n            UI.Column.render(\"Mobile A Fourth\"),\n            UI.Column.render(\"Mobile A Third\"),\n            UI.Column.render(\"Mobile A Second\"),\n            UI.Column.render(\"Mobile A First\")\n          ])\n        ])"
        });
        var reversedEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ vertReversedComputer: true, equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render("Computer Row 4")
                ]),
                UI.Row.render([
                    UI.Column.render("Computer Row 3")
                ]),
                UI.Row.render([
                    UI.Column.render("Computer Row 2")
                ]),
                UI.Row.render([
                    UI.Column.render("Computer Row 1")
                ])
            ])),
            code: "UI.Grid.render({ vertReversedComputer: true, equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 4\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 3\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 2\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 1\")\n        ])\n      ])"
        });
        var reversedEx3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ vertReversedTablet: true, equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render("Tablet Row 4")
                ]),
                UI.Row.render([
                    UI.Column.render("Tablet Row 3")
                ]),
                UI.Row.render([
                    UI.Column.render("Tablet Row 2")
                ]),
                UI.Row.render([
                    UI.Column.render("Tablet Row 1")
                ])
            ])),
            code: "UI.Grid.render({ vertReversedTablet: true, equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 4\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 3\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 2\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 1\")\n        ])\n      ])"
        });
        var reversedEx4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ vertReversedMobile: true, equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render("Mobile Row 4")
                ]),
                UI.Row.render([
                    UI.Column.render("Mobile Row 3")
                ]),
                UI.Row.render([
                    UI.Column.render("Mobile Row 2")
                ]),
                UI.Row.render([
                    UI.Column.render("Mobile Row 1")
                ])
            ])),
            code: "UI.Grid.render({ vertReversedMobile: true, equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 4\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 3\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 2\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 1\")\n        ])\n      ])"
        });
        return [reversedEx.DOM, reversedEx2.DOM, reversedEx3.DOM, reversedEx4.DOM];
    }
    function createDeviceVisiblityExamples(sources) {
        var visibilityEx = components_1.Example.run(sources, {
            header: "Device Visibility",
            description: [
                dom_1.p("A columns or row can appear only for a specific device, or screen sizes"),
                UI.Message.render({ color: UI.Color.Info }, "See container documentation for information on breakpoint calculations")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ width: 2, largescreenOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Large Screen")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Large Screen")
                    ])
                ]),
                UI.Row.render({ width: 2, mobileOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Mobile")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Mobile")
                    ])
                ]),
                UI.Row.render({ width: 3 }, [
                    UI.Column.render({ computerOnly: true }, [
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render({ mobileOnly: true }, [
                        UI.Segment.render("Tablet and Mobile")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("All Sizes")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("All Sizes")
                    ])
                ]),
                UI.Row.render({ width: 4, computerOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ])
                ]),
                UI.Row.render({ width: 3, tabletOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Tablet")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Tablet")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Tablet")
                    ])
                ]),
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ width: 2, largescreenOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Large Screen\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Large Screen\")\n          ])\n        ]),\n        UI.Row.render({ width: 2, mobileOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Mobile\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Mobile\")\n          ])\n        ]),\n        UI.Row.render({ width: 3 }, [\n          UI.Column.render({ computerOnly: true }, [\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render({ mobileOnly: true }, [\n            UI.Segment.render(\"Tablet and Mobile\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"All Sizes\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"All Sizes\")\n          ])\n        ]),\n        UI.Row.render({ width: 4, computerOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ])\n        ]),\n        UI.Row.render({ width: 3, tabletOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Tablet\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Tablet\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Tablet\")\n          ])\n        ]),\n      ])"
        });
        return [visibilityEx.DOM];
    }
    function createResponsiveWithExamples(sources) {
        var widthEx = components_1.Example.run(sources, {
            header: "Responsive Width",
            description: [
                dom_1.p("A column can specify a width for a specific device"),
                UI.Message.render({ color: UI.Color.Info }, "It's recommended to use a responsive pattern like doubling or stackable to reduce complexity when designing responsively, however in some circumstances specifying exact widths for screen sizes may be necessary.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4})\n      ])"
        });
        var widthEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 4, largescreen: 2}),\n        UI.Column.render({width: 4, largescreen: 2}),\n        UI.Column.render({width: 4, largescreen: 2}),\n        UI.Column.render({width: 4, largescreen: 2}),\n      ])"
        });
        return [widthEx.DOM, widthEx2.DOM];
    }
})(ResponsiveVariations = exports.ResponsiveVariations || (exports.ResponsiveVariations = {}));


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Types;
(function (Types) {
    function run(sources) {
        var basicEx = components_1.Example.run(sources, {
            highlighted: true,
            header: ["Grid", UI.Label.render({ color: UI.Color.Primary }, "Flexbox")],
            description: "A basic grid",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render()
            ])),
            code: "UI.Grid.render([\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var dividedEx = components_1.Example.run(sources, {
            header: ["Divided", UI.Label.render({ color: UI.Color.Secondary }, "Requires rows")],
            description: "A grid can have dividers between its columns",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3, divided: true }, [
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                ]),
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                ])
            ])),
            code: "UI.Grid.render({width: 3, divided: true}, [\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var verticalEx = components_1.Example.run(sources, {
            header: ["Vertical Divided", UI.Label.render({ color: UI.Color.Secondary }, "Requires Rows")],
            description: "A grid can have dividers between rows",
            VNode$: xstream_1.default.of(UI.Grid.render({ verticallyDivided: true }, [
                UI.Row.render({ width: 2 }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                ]),
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Grid.render({ verticallyDivided: true }, [\n        UI.Row.render({ width: 2 }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ width: 3 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var celledEx = components_1.Example.run(sources, {
            header: ["Celled", UI.Label.render({ color: UI.Color.Secondary }, "Requires Rows")],
            description: "A grid can have rows divided into cells",
            VNode$: xstream_1.default.of(UI.Grid.render({ celled: true }, [
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 13 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
            ])),
            code: "UI.Grid.render({celled: true}, [\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 13})\n        ]),\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 3})\n        ]),\n      ])"
        });
        var intCelledEx = components_1.Example.run(sources, {
            header: ["Internally Celled", UI.Label.render({ color: UI.Color.Secondary }, "Requires Rows")],
            description: "A grid can have rows divisions only between internal rows",
            VNode$: xstream_1.default.of(UI.Grid.render({ intCelled: true }, [
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ intCelled: true }, [\n        UI.Row.render([\n          UI.Column.render({ width: 3 }),\n          UI.Column.render({ width: 10 }),\n          UI.Column.render({ width: 3 })\n        ]),\n        UI.Row.render([\n          UI.Column.render({ width: 3 }),\n          UI.Column.render({ width: 10 }),\n          UI.Column.render({ width: 3 })\n        ])\n      ])"
        });
        return xstream_1.default.combine(basicEx.DOM, dividedEx.DOM, verticalEx.DOM, celledEx.DOM, intCelledEx.DOM);
    }
    Types.run = run;
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Variations;
(function (Variations) {
    function run(sources) {
        var floatedEx = createFloatedExamples(sources);
        var widthEx = createWidthExamples(sources);
        var countEx = createCountExamples(sources);
        var equalWidthEx = createEqualWidthExamples(sources);
        var stretchedEx = createStretchedExamples(sources);
        var paddedEx = createPaddedExamples(sources);
        var relaxedEx = createRelaxedExamples(sources);
        var centeredEx = createCenteredExamples(sources);
        var textEx = createTextAlignmentExamples(sources);
        var alignmentEx = createAlignmentExamples(sources);
        var examples = [].concat(floatedEx, widthEx, countEx, equalWidthEx, stretchedEx, paddedEx, relaxedEx, centeredEx, textEx, alignmentEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Variations.run = run;
    function createFloatedExamples(sources) {
        var floatedEx = components_1.Example.run(sources, {
            header: "Floated",
            description: "A column can sit flush against the left or right edge of a row",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ float: "left", width: 5 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ float: "right", width: 5 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({float: \"left\", width: 5}),\n        UI.Column.render({float: \"right\", width: 5}),\n      ])"
        });
        return [floatedEx.DOM];
    }
    function createWidthExamples(sources) {
        var widthEx = components_1.Example.run(sources, {
            header: "Column Width",
            description: "A column can vary in width taking up more than a single grid column.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }, [
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render({ width: 9 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 3 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 9}),\n        UI.Column.render({width: 3})\n      ])"
        });
        return [widthEx.DOM];
    }
    function createCountExamples(sources) {
        var countEx = components_1.Example.run(sources, {
            header: "Column Count",
            description: "A grid can have a different number of columns per row",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ width: 4 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ width: 5 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ width: 3 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ width: 4 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ width: 5 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        return [countEx.DOM];
    }
    function createEqualWidthExamples(sources) {
        var equalWidthEx = components_1.Example.run(sources, {
            header: "Equal Width",
            description: "A grid can automatically resize all elements to split the available width evenly",
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Column.render([
                    UI.Segment.render("1")
                ]),
                UI.Column.render({ width: 8 }, [
                    UI.Segment.render("2")
                ]),
                UI.Column.render([
                    UI.Segment.render("3")
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Column.render([\n          UI.Segment.render(\"1\")\n        ]), \n        UI.Column.render({width: 8}, [\n          UI.Segment.render(\"2\")\n        ]), \n        UI.Column.render([\n          UI.Segment.render(\"3\")\n        ])\n      ])"
        });
        var equalWidthEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("3")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("4")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("3")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("2")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"3\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"4\")\n          ])\n        ]),\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"3\")\n          ])\n        ]),\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render( [\n            UI.Segment.render(\"2\")\n          ])\n        ])\n      ])"
        });
        return [equalWidthEx.DOM, equalWidthEx2.DOM];
    }
    function createStretchedExamples(sources) {
        var stretchedEx = components_1.Example.run(sources, {
            header: "Stretched",
            description: "A row can stretch its contents to take up the entire column height",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3, divided: true }, [
                UI.Row.render({ stretched: true }, [
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2"),
                        UI.Segment.render("3")
                    ])
                ])
            ])),
            code: "UI.Grid.render({width: 3, divided: true}, [\n        UI.Row.render({ stretched: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ]), \n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\"),\n            UI.Segment.render(\"3\")\n          ])\n        ])\n      ])"
        });
        var stretchedEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Row.render({ stretched: true }, [
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render({ width: 6 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render({ width: 6 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Row.render({ stretched: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render({ width: 6 }, [\n            UI.Image.render({ size: UI.Size.Fluid })\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ])\n        ]),\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render({ width: 6 }, [\n            UI.Image.render({ size: UI.Size.Fluid })\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ])\n        ])\n      ])"
        });
        return [stretchedEx.DOM, stretchedEx2.DOM];
    }
    function createPaddedExamples(sources) {
        var paddedEx = components_1.Example.run(sources, {
            header: "Padded",
            description: [
                dom_1.p("A grid can preserve its vertical and horizontal gutters on first and last columns"),
                dom_1.p("The following grid has vertical and horizontal gutters")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Divider.render(),
                UI.Grid.render({ width: 2, padded: true }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Divider.render(),\n        UI.Grid.render({ width: 2, padded: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])"
        });
        var paddedEx2 = components_1.Example.run(sources, {
            description: "The following grid has vertical gutters.",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Divider.render(),
                UI.Grid.render({ width: 2, verticallyPadded: true }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Divider.render(),\n        UI.Grid.render({ width: 2, verticallyPadded: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])"
        });
        var paddedEx3 = components_1.Example.run(sources, {
            description: "The following grid has horizontal gutters.",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Divider.render(),
                UI.Grid.render({ width: 2, horizontallyPadded: true }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Divider.render(),\n        UI.Grid.render({ width: 2, horizontallyPadded: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])"
        });
        return [paddedEx.DOM, paddedEx2.DOM, paddedEx3.DOM];
    }
    function createRelaxedExamples(sources) {
        var relaxedEx = components_1.Example.run(sources, {
            header: "Relaxed",
            description: "A grid can increase its gutters to allow for more negative space",
            VNode$: xstream_1.default.of(UI.Grid.render({ relaxed: true, width: 4 }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({relaxed: true, width: 4}, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var relaxedEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ veryRelaxed: true, width: 4 }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({veryRelaxed: true, width: 4}, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        return [relaxedEx.DOM, relaxedEx2.DOM];
    }
    function createCenteredExamples(sources) {
        var centeredEx = components_1.Example.run(sources, {
            header: "Centered",
            description: "A grid can have its columns centered",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 2, centered: true }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Row.render({ width: 4, centered: true }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ width: 4 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({width: 2, centered: true}, [\n        UI.Column.render(),\n        UI.Row.render({width:4, centered: true}, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),        \n        UI.Row.render({width:4}, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        return [centeredEx.DOM];
    }
    function createTextAlignmentExamples(sources) {
        var textEx = components_1.Example.run(sources, {
            header: "Text Alignment",
            description: "A grid, row, or column can specify its text alignment",
            VNode$: xstream_1.default.of(UI.Grid.render({ textAlignment: "center" }, [
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Cats" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Dogs" },
                            { main: "Poodle" },
                            { main: "Cockerspaniel" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Monkeys" }
                        ])
                    ])
                ])
            ])),
            code: "UI.Grid.render({ textAlignment: \"center\"}, [\n        UI.Row.render({width: 3}, [\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Cats\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Dogs\" },\n              { main: \"Poodle\" },\n              { main: \"Cockerspaniel\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Monkeys\" }\n            ])\n          ])\n        ])\n      ])"
        });
        var textEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ textAlignment: "center" }, [
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Cats" }
                        ])
                    ]),
                    UI.Column.render({ textAlignment: "left" }, [
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Dogs" },
                            { main: "Poodle" },
                            { main: "Cockerspaniel" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Monkeys" }
                        ])
                    ])
                ]),
                UI.Row.render({ textAlignment: "justified" }, [
                    UI.Column.render("Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other.")
                ])
            ])),
            code: "UI.Grid.render({ textAlignment: \"center\"}, [\n        UI.Row.render({width: 3}, [\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Cats\" }\n            ])\n          ]),\n          UI.Column.render({textAlignment: \"left\"}, [\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Dogs\" },\n              { main: \"Poodle\" },\n              { main: \"Cockerspaniel\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Monkeys\" }\n            ])\n          ])\n        ]), \n        UI.Row.render({textAlignment: \"justified\"}, [\n          UI.Column.render(\"Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other.\")\n        ])\n      ])"
        });
        var textEx3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ textAlignment: "right", width: 3 }, [
                UI.Row.render([
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Cats" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Dogs" },
                            { main: "Poodle" },
                            { main: "Cockerspaniel" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Monkeys" }
                        ])
                    ])
                ])
            ])),
            code: "UI.Grid.render({ textAlignment: \"right\", width: 3 }, [\n        UI.Row.render([\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Cats\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Dogs\" },\n              { main: \"Poodle\" },\n              { main: \"Cockerspaniel\" }\n            ])\n          ]), \n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Monkeys\" }\n            ])\n          ])\n        ])\n      ])"
        });
        return [textEx.DOM, textEx2.DOM, textEx3.DOM];
    }
    function createAlignmentExamples(sources) {
        var alignmentEx = components_1.Example.run(sources, {
            header: "Vertical Alignment",
            description: "A grid, row, or column can specify its vertical alignment to have all its columns vertically centered.",
            VNode$: xstream_1.default.of(UI.Grid.render({ alignment: "middle", centered: true, width: 4 }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({ alignment: \"middle\", centered: true, width: 4 }, [\n        UI.Column.render([\n          UI.Image.render({ size: UI.Size.Fluid }, \"\")\n        ]),\n        UI.Column.render([\n          UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n          UI.Image.render({ size: UI.Size.Fluid }, \"\")\n        ]),\n        UI.Column.render([\n          UI.Image.render({ size: UI.Size.Fluid }, \"\")\n        ])\n      ])"
        });
        var alignmentEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ centered: true, width: 4 }, [
                UI.Row.render({ alignment: "top" }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ alignment: "middle" }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ alignment: "bottom" }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ centered: true, width: 4 }, [\n        UI.Row.render({ alignment: \"top\" }, [\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ])\n        ]),\n        UI.Row.render({ alignment: \"middle\" }, [\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ])\n        ]),\n        UI.Row.render({ alignment: \"bottom\" }, [\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ])\n        ])\n      ])"
        });
        return [alignmentEx.DOM, alignmentEx2.DOM];
    }
})(Variations = exports.Variations || (exports.Variations = {}));


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var overview_1 = __webpack_require__(163);
var definition_1 = __webpack_require__(157);
var Grid;
(function (Grid) {
    function run(sources) {
        var overview = overview_1.Overview.run(sources);
        var definition = definition_1.Definition.run(sources);
        var tabs = UI.Tabs.run({
            DOM: sources.DOM,
            labels: ["Overview", "Definition"],
            content: [overview.map(function (o) { return [o]; }), definition.map(function (o) { return [o]; })],
            menuProps$: xstream_1.default.of({ equalWidth: true }),
            segmentProps$: xstream_1.default.of({ basic: true })
        });
        var vTree$ = xstream_1.default.combine(tabs.DOM).map(function (_a) {
            var tabs = _a[0];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Grid",
                                subtext: "A grid is used to harmonize negative space in a layout"
                            }
                        })
                    ])
                ]),
                UI.Container.render([
                    UI.Divider.render({ hidden: true }),
                    tabs
                ])
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Grid.run = run;
})(Grid = exports.Grid || (exports.Grid = {}));


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var Columns;
(function (Columns) {
    function run(sources) {
        var flowEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Automatic Flow",
            description: "Most grids do not need to specify rows. Content will automatically flow to the next row when all the grid columns are taken in the current row.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 })
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 })\n      ])"
        });
        var contentEx = components_1.Example.run(sources, {
            header: "Column Content",
            description: "Since columns use padding to create gutters, content stylings should not be applied directly to columns, but to elements inside of columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3 }, [
                UI.Column.render([
                    UI.Segment.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Column.render([
                    UI.Segment.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Column.render([
                    UI.Segment.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render([\n          UI.Segment.render([\n            UI.Image.render(\"\")\n          ])\n        ]),\n        UI.Column.render([\n          UI.Segment.render([\n            UI.Image.render(\"\")\n          ])\n        ]),\n        UI.Column.render([\n          UI.Segment.render([\n            UI.Image.render(\"\")\n          ])\n        ])\n      ])"
        });
        var widthEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Column Widths",
            description: "Column widths can be specified using the width property. If a column cannot fit in a row it will automatically flow to the next row",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 8 }),
                UI.Column.render({ width: 8 }),
                UI.Column.render({ width: 10 }),
                UI.Column.render({ width: 6 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 12 }),
                UI.Column.render({ width: 2 }),
                UI.Column.render({ width: 14 }),
                UI.Column.render({ width: 16 })
            ])),
            code: "UI.Grid.render([\n       UI.Column.render({ width: 8 }),\n        UI.Column.render({ width: 8 }),\n        UI.Column.render({ width: 10 }),\n        UI.Column.render({ width: 6 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 12 }),\n        UI.Column.render({ width: 2}),\n        UI.Column.render({ width: 14 }),\n        UI.Column.render({ width: 16})\n      ])"
        });
        return xstream_1.default.combine(flowEx.DOM, contentEx.DOM, widthEx.DOM);
    }
    Columns.run = run;
})(Columns = exports.Columns || (exports.Columns = {}));


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var introduction_1 = __webpack_require__(164);
var columns_1 = __webpack_require__(162);
var rows_1 = __webpack_require__(166);
var varyingGrids_1 = __webpack_require__(167);
var responsiveGrids_1 = __webpack_require__(165);
var Overview;
(function (Overview) {
    function run(sources) {
        var intro = introduction_1.Introduction.run(sources);
        var columns = columns_1.Columns.run(sources);
        var rows = rows_1.Rows.run(sources);
        var varyingGrids = varyingGrids_1.VaryingGrids.run(sources);
        var responsiveGrids = responsiveGrids_1.ResponsiveGrids.run(sources);
        var vTree$ = xstream_1.default.combine(intro, columns, rows, varyingGrids, responsiveGrids).map(function (_a) {
            var intro = _a[0], columns = _a[1], rows = _a[2], varyingGrids = _a[3], responsiveGrids = _a[4];
            return UI.Container.render([
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Introduction")
                ]
                    .concat(intro)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Columns")
                ]
                    .concat(columns)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Rows")
                ]
                    .concat(rows)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Varying Grids")
                ]
                    .concat(varyingGrids)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Responsive Grids")
                ]
                    .concat(responsiveGrids))
            ]);
        });
        return vTree$;
    }
    Overview.run = run;
})(Overview = exports.Overview || (exports.Overview = {}));


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Introduction;
(function (Introduction) {
    function run(sources) {
        var gridEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Grids",
            description: [dom_1.p(["A grid is a structure with a ", dom_1.a({ attrs: { href: "http://99designs.com/designer-blog/2013/03/21/history-of-the-grid-part-1/" } }, "long history"), " used to align negative space in designs."]),
                dom_1.p("Using a grid makes content appear to flow more naturally on your page.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 })
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 4})\n      ])"
        });
        var columnsEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Columns",
            description: [
                dom_1.p("Grids divide horizontal space into indivisible units called \"columns\". All columns in a grid must specify their width as proportion of the total available row width."),
                dom_1.p("All grid systems chooses an arbitrary column count to allow per row. Semantic's default theme uses 16 columns."),
                dom_1.p(["The example below shows four four wide columns will fit in the first row, ", dom_1.code("16 / 4 = 4"), " and three various sized columns in the second row. ", dom_1.code("2 + 8 + 6 = 16")]),
                dom_1.p("The default column count, and other arbitrary features of grids can be changed by adjusting Semantic UI's underlying theming variables.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 2 }),
                UI.Column.render({ width: 8 }),
                UI.Column.render({ width: 6 }),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 2 }),\n        UI.Column.render({ width: 8 }),\n        UI.Column.render({ width: 6 }),\n      ])"
        });
        var rowsEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Rows",
            description: [
                dom_1.p("Rows are groups of columns which are aligned horizontally."),
                dom_1.p(["Rows can either be ", dom_1.i("explicit"), " marked with an additional row element, or ", dom_1.i("implicit"), ", automatically occurring when no more space is left in a previous row."])
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 4 }, [
                UI.Row.render([
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ]),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
            ])),
            code: "UI.Grid.render({ width: 4 }, [\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n      ])"
        });
        var guttersEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Gutters",
            description: [
                dom_1.p(["Grid columns are separated by areas of white space referred to as \"gutters\". Gutters improve legibility by providing, ",
                    dom_1.a({ attrs: { href: "https://en.wikipedia.org/wiki/Negative_space" } }, "negative space"), " between page elements."]),
                dom_1.p("Gutters remain a constant size regardless of the width of the grid, or how many columns are in a row. To increase the size of gutters in a particular grid, you can use a relaxed grid variation.")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Grid.render([
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                    ]),
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render()
                    ])
                ]),
                UI.Grid.render({ relaxed: true }, [
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                    ]),
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render()
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n          ]),\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render()\n          ])\n        ]),\n        UI.Grid.render({relaxed: true}, [\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n          ]),\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render()\n          ])\n        ])"
        });
        var negMarginsEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Negative margins",
            description: [dom_1.p(["Since all grid columns include gutters, grids use ", dom_1.a({ attrs: { href: "https://csswizardry.com/2011/08/building-better-grid-systems/" } }, "negative margins"),
                    " to make sure that the first and last columns sit flush with content outside the grid."]),
                dom_1.p("In the following example, you can see even though the top row has padding, the attached button still sits flush with the edge of the grid."),
                dom_1.p("In some cases you may want to avoid using negative margins. You can do this by using a padded grid variation.")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Button.render({ attachment: UI.Attachment.Top }, "Button before grid"),
                UI.Grid.render([
                    UI.Column.render({ width: 16 }),
                    UI.Column.render({ width: 10 }),
                    UI.Column.render({ width: 6 })
                ]),
                UI.Grid.render([
                    UI.Column.render({ width: 16 }),
                ]),
                UI.Button.render({ attachment: UI.Attachment.Bottom }, "Button after grid")
            ])),
            code: "UI.Button.render({attachment: UI.Attachment.Top}, \"Button before grid\"),\n        UI.Grid.render([\n          UI.Column.render({width: 16}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 6})\n        ]),\n        UI.Grid.render([\n          UI.Column.render({width: 16}),\n        ]),\n        UI.Button.render({attachment: UI.Attachment.Bottom}, \"Button after grid\")"
        });
        var containerEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Container grids",
            description: [
                dom_1.p("Grids are fluid and will automatically flow in size to take the maximum available width."),
                dom_1.p("Containers are elements designed to limit page content to a reasonable maximum width for display based on the size of the user's screen."),
                dom_1.p("Using a grid container is the best way to include top-level page content inside a grid.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ container: true }, [
                UI.Column.render({ width: 16 })
            ])),
            code: "UI.Grid.render({container: true}, [\n        UI.Column.render({width: 16})\n      ])"
        });
        return xstream_1.default.combine(gridEx.DOM, columnsEx.DOM, rowsEx.DOM, guttersEx.DOM, negMarginsEx.DOM, containerEx.DOM);
    }
    Introduction.run = run;
})(Introduction = exports.Introduction || (exports.Introduction = {}));


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var ResponsiveGrids;
(function (ResponsiveGrids) {
    function run(sources) {
        var containerEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Containers",
            description: "A grid container variant can be used to provide a responsive, fixed width container for wrapping the contents of a page.",
            VNode$: xstream_1.default.of(UI.Grid.render({ container: true }, [
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 })
            ])),
            code: "UI.Grid.render({container: true}, [\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 })\n      ])"
        });
        var stackableEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Stackable",
            description: "A stackable grid will automatically stack rows to a single columns on mobile devices",
            VNode$: xstream_1.default.of(UI.Grid.render({ stackable: true, width: 4 }, [
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render()
            ])),
            code: "UI.Grid.render({ stackable: true, width: 4 }, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var reverseEx = components_1.Example.run(sources, {
            header: "Reverse Order",
            description: "Semantic includes special reversed variations that allow you to reverse the order of columns or rows by device",
            VNode$: xstream_1.default.of(UI.Grid.render({ reversedMobile: true, equalWidth: true }, [
                UI.Column.render("First"),
                UI.Column.render("Second"),
                UI.Column.render("Third"),
            ])),
            code: "UI.Grid.render({ reversedMobile: true, equalWidth: true }, [\n        UI.Column.render(\"First\"),\n        UI.Column.render(\"Second\"),\n        UI.Column.render(\"Third\"),\n      ])"
        });
        var doublingEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Doubling",
            description: "A doubling grid will double column widths for each device jump.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ doubling: true, width: 8 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ]),
                UI.Row.render({ doubling: true, width: 6 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ]),
                UI.Row.render({ doubling: true, width: 4 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ doubling: true, width: 8 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ doubling: true, width: 6 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ doubling: true, width: 4 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var manualEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Manual Tweaks",
            description: "Although design patterns like doubling or stackable are useful at simplifying responsive styling, you can also manually tweak device presentation by specifying the width for a devicetype on columns or setting the device only properties on grids, rows or columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ centered: true }, [
                UI.Row.render({ computerOnly: true }, [
                    UI.Column.render()
                ]),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
            ])),
            code: "UI.Grid.render({centered: true}, [\n        UI.Row.render({computerOnly: true}, [\n          UI.Column.render()\n        ]),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n      ])"
        });
        return xstream_1.default.combine(containerEx.DOM, stackableEx.DOM, reverseEx.DOM, doublingEx.DOM, manualEx.DOM);
    }
    ResponsiveGrids.run = run;
})(ResponsiveGrids = exports.ResponsiveGrids || (exports.ResponsiveGrids = {}));


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Rows;
(function (Rows) {
    function run(sources) {
        var groupingEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Grouping",
            description: "Row wrappers allow you to apply variations to a group of columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 4 }, [
                UI.Row.render({ width: 2 }, [
                    UI.Column.render()
                ]),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render()
            ])),
            code: "UI.Grid.render({width: 4}, [\n        UI.Row.render({width: 2}, [\n          UI.Column.render()\n        ]),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var clearEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Clearing Content",
            description: "Row wrappers will automatically clear previous columns, making them useful when using floated variations.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ width: 4 }, [
                    UI.Column.render({ float: "left" }),
                    UI.Column.render({ float: "right" })
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }),
                    UI.Column.render({ width: 8 }),
                    UI.Column.render({ width: 5 })
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ width: 4 }, [\n          UI.Column.render({ float: \"left\" }),\n          UI.Column.render({ float: \"right\" })\n        ]),\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 8}),\n          UI.Column.render({width: 5})\n        ])\n      ])"
        });
        var specialEx = components_1.Example.run(sources, {
            header: "Special Grids",
            description: "Additionally, some types of grids, like divided or celled require row wrappers to apply formatting correctly.",
            VNode$: xstream_1.default.of(UI.Grid.render({ intCelled: true }, [
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at purus nibh. Cras metus nulla, vestibulum in auctor ac, fermentum vitae tellus. Donec sed aliquam nisl. Sed eu leo id est pretium euismod. Nulla id justo at mi venenatis volutpat. Fusce nisi leo, placerat id condimentum a, accumsan vitae tortor. Nunc magna nunc, venenatis nec elementum eu, ultrices in sem. Maecenas tincidunt semper molestie. Nulla nec neque sit amet libero molestie feugiat. Cras id metus velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam lobortis arcu non leo porta ut euismod ante luctus. Praesent elementum sodales dolor id scelerisque.")
                    ]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at purus nibh. Cras metus nulla, vestibulum in auctor ac, fermentum vitae tellus. Donec sed aliquam nisl. Sed eu leo id est pretium euismod. Nulla id justo at mi venenatis volutpat. Fusce nisi leo, placerat id condimentum a, accumsan vitae tortor. Nunc magna nunc, venenatis nec elementum eu, ultrices in sem. Maecenas tincidunt semper molestie. Nulla nec neque sit amet libero molestie feugiat. Cras id metus velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam lobortis arcu non leo porta ut euismod ante luctus. Praesent elementum sodales dolor id scelerisque.")
                    ]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({intCelled: true}, [\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 3})\n        ]),\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 3})\n        ])\n      ])"
        });
        return xstream_1.default.combine(groupingEx.DOM, clearEx.DOM, specialEx.DOM);
    }
    Rows.run = run;
})(Rows = exports.Rows || (exports.Rows = {}));


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var VaryingGrids;
(function (VaryingGrids) {
    function run(sources) {
        var nestedEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Nesting Grids",
            description: "Grids can be placed inside of other grids, letting you sub-divide columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 2 }, [
                UI.Column.render([
                    UI.Grid.render({ width: 3 }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                    ])
                ]),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render([
                    UI.Grid.render([
                        UI.Column.render({ width: 10 }),
                        UI.Column.render({ width: 6 }),
                    ])
                ]),
            ])),
            code: "UI.Grid.render({ width: 2}, [\n        UI.Column.render({\n          UI.Grid.render({width: 3}, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n          ])\n        }),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render([\n          UI.Grid.render([\n            UI.Column.render({width: 10}),\n            UI.Column.render({width: 6}),\n          ])\n        ]),\n      ])"
        }).DOM.map(function (ex) { return dom_1.div(".special", [ex]); });
        var colCountEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Automatic Column Count",
            description: "The equalWidth variation will automatically divide column width evenly. This is useful with dynamic content where you do not know the column count in advance.",
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Row.render({ equalWidth: true }, [
                    UI.Column.render(),
                    UI.Column.render()
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Row.render({ equalWidth: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var centeringEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Centering Content",
            description: "If a row does not take up all sixteen grid columns, you can use a centered variation to center the column contents inside the grid.",
            VNode$: xstream_1.default.of(UI.Grid.render({ centered: true, width: 2 }, [
                UI.Column.render(),
                UI.Row.render({ width: 4 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                ])
            ])),
            code: "UI.Grid.render({ centered: true, width: 2 }, [\n        UI.Column.render(),\n        UI.Row.render({ width: 4 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n        ])\n      ])"
        });
        return xstream_1.default.combine(nestedEx, colCountEx.DOM, centeringEx.DOM);
    }
    VaryingGrids.run = run;
})(VaryingGrids = exports.VaryingGrids || (exports.VaryingGrids = {}));


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(148));
__export(__webpack_require__(153));
__export(__webpack_require__(161));
__export(__webpack_require__(170));
__export(__webpack_require__(174));


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Content;
(function (Content) {
    function run(sources) {
        var headerEx = createHeaderExamples(sources);
        var textEx = createTextExamples(sources);
        var inputEx = createInputExamples(sources);
        var buttonEx = createButtonExamples(sources);
        var linkEx = createLinkExamples(sources);
        var dropdownEx = createDropdownExamples(sources);
        var popupEx = createPopupExamples(sources);
        var searchEx = createSearchExamples(sources);
        var menuEx = createMenuExamples(sources);
        var subMenuEx = createSubMenuExamples(sources);
        var examples = [].concat(headerEx, textEx, inputEx, buttonEx, linkEx, dropdownEx, popupEx, searchEx, menuEx, subMenuEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Content.run = run;
    function createHeaderExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Header",
            description: "A menu item may include a header or may itself be a header",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { header: true, main: "Our company" },
                { main: "About us" },
                { main: "Jobs" },
                { main: "Locations" }
            ])),
            code: "UI.Menu.render([\n        {header: true, main: \"Our company\"},\n        {main: \"About us\"},\n        {main: \"Jobs\"},\n        {main: \"Locations\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    header: true,
                    main: [
                        "Products",
                        UI.Menu.render({ submenu: true }, [
                            { main: "Enterprise" },
                            { main: "Consumer" }
                        ])
                    ]
                },
                {
                    header: true,
                    main: [
                        "CMS Solutions",
                        UI.Menu.render({ submenu: true }, [
                            { main: "Rails" },
                            { main: "Python" },
                            { main: "PHP" }
                        ])
                    ]
                }, {
                    header: true,
                    main: [
                        "Hosting",
                        UI.Menu.render({ submenu: true }, [
                            { main: "Shared" },
                            { main: "Dedicated" }
                        ])
                    ]
                }, {
                    header: true,
                    main: [
                        "Support",
                        UI.Menu.render({ submenu: true }, [
                            { main: "E-mail Support" },
                            { main: "FAQs" }
                        ])
                    ]
                }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          header: true,\n          main: [\n            \"Products\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"Enterprise\" },\n              { main: \"Consumer\" }\n            ])\n          ]\n        },\n        {\n          header: true,\n          main: [\n            \"CMS Solutions\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"Rails\" },\n              { main: \"Python\" },\n              { main: \"PHP\" }\n            ])\n          ]\n        }, {\n          header: true,\n          main: [\n            \"Hosting\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"Shared\" },\n              { main: \"Dedicated\" }\n            ])\n          ]\n        }, {\n          header: true,\n          main: [\n            \"Support\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"E-mail Support\" },\n              { main: \"FAQs\" }\n            ])\n          ]\n        }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createTextExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Text",
            description: "A vertical menu item can include any type of text content.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    main: [
                        UI.Header.render("Promotions"),
                        dom_1.p("Check out our new promotions"),
                    ]
                },
                {
                    main: [
                        UI.Header.render("Coupons"),
                        dom_1.p("Check out our collection of coupons"),
                    ]
                },
                {
                    main: [
                        UI.Header.render("Rebates"),
                        dom_1.p("Visit our rebate forum for information on claiming rebates"),
                    ]
                }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          main: [\n            UI.Header.render(\"Promotions\"),\n            p(\"Check out our new promotions\"),\n          ]\n        },\n        {\n          main: [\n            UI.Header.render(\"Coupons\"),\n            p(\"Check out our collection of coupons\"),\n          ]\n        },\n        {\n          main: [\n            UI.Header.render(\"Rebates\"),\n            p(\"Visit our rebate forum for information on claiming rebates\"),\n          ]\n        }\n      ])"
        });
        return [ex.DOM];
    }
    function createInputExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Input",
            description: "A menu item can contain an input inside of it",
            VNode$: xstream_1.default.of(UI.Menu.render([
                {
                    main: [
                        UI.Textbox.render({ placeholder: "Search..", icon: true }, [
                            UI.Icon.render(UI.IconType.Search)
                        ])
                    ]
                }, {
                    float: "right", main: [
                        UI.Textbox.render({ placeholder: "Navigate to..", rightContent: true, action: true }, [
                            UI.Button.render("Go")
                        ])
                    ]
                }
            ])),
            code: "UI.Menu.render([\n        {main: [\n          UI.Textbox.render({placeholder: \"Search..\", icon: true}, [\n            UI.Icon.render(UI.IconType.Search)\n          ])\n        ]}, {float: \"right\", main: [\n          UI.Textbox.render({placeholder: \"Navigate to..\", rightContent: true, action: true}, [\n            UI.Button.render(\"Go\")\n          ])\n        ]}\n      ])"
        });
        return [ex.DOM];
    }
    function createButtonExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Button",
            description: "A menu item can contain a button inside of it",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] },
                { main: [UI.Button.render("Log-in")] }
            ])),
            code: "UI.Menu.render([\n        {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]},\n        {main: [UI.Button.render(\"Log-in\")]}\n      ])"
        });
        return [ex.DOM];
    }
    function createLinkExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Link Item",
            description: "A menu may contain a link item, or an item formatted as if it is a link.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                { href: "#", main: "Visit google" },
                { link: true, main: "Javascript link" }
            ])),
            code: "UI.Menu.render({vertical: true}, [\n        {href: \"#\", main: \"Visit google\"},\n        {link: true, main: \"Javascript link\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createDropdownExamples(sources) {
        // let ex = Example.run(sources, {
        //   header: "",
        //   description: "",
        //   VNode$: xs.of(),
        //   code: ``
        // });
        return [];
    }
    function createPopupExamples(sources) {
        // let ex = Example.run(sources, {
        //   header: "",
        //   description: "",
        //   VNode$: xs.of(),
        //   code: ``
        // });
        return [];
    }
    function createSearchExamples(sources) {
        // let ex = Example.run(sources, {
        //   header: "",
        //   description: "",
        //   VNode$: xs.of(),
        //   code: ``
        // });
        return [];
    }
    function createMenuExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Menu",
            description: "A menu may contain another menu group in the same level as menu items.",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { main: "Browse" },
                { main: "Submit" },
                {
                    rightMenu: true, main: [
                        { main: "Sign Up" },
                        { main: "Help" }
                    ]
                }
            ])),
            code: "UI.Menu.render([\n        { main: \"Browse\" },\n        { main: \"Submit\" },\n        {\n          rightMenu: true, main: [\n            { main: \"Sign Up\" },\n            { main: \"Help\" }\n          ]\n        }\n      ])"
        });
        return [ex.DOM];
    }
    function createSubMenuExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Sub Menu",
            description: "A menu item may contain another menu nested inside that acts as a grouped sub-menu.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    main: [
                        UI.Textbox.render({ placeholder: "Search..." })
                    ]
                },
                {
                    main: [
                        "Home",
                        UI.Menu.render({ submenu: true }, [
                            { active: true, main: "Search" },
                            { main: "Add" },
                            { main: "Remove" }
                        ])
                    ]
                },
                { main: [UI.Icon.render(UI.IconType.GridLayout), "Browse"] },
                { main: "Messages" },
                { main: "More" }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          main: [\n            UI.Textbox.render({ placeholder: \"Search...\" })\n          ]\n        },\n        {\n          main: [\n            \"Home\",\n            UI.Menu.render({submenu: true}, [\n              { active: true, main: \"Search\" },\n              { main: \"Add\" },\n              { main: \"Remove\" }\n            ])\n          ]\n        },\n        { main: [UI.Icon.render(UI.IconType.GridLayout), \"Browse\"] },\n        { main: \"Messages\" },\n        { main: \"More\" }\n      ])"
        });
        return [ex.DOM];
    }
})(Content = exports.Content || (exports.Content = {}));


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(172);
var content_1 = __webpack_require__(169);
var states_1 = __webpack_require__(171);
var variations_1 = __webpack_require__(173);
var Menu;
(function (Menu) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var content = content_1.Content.run(sources);
        var states = states_1.States.run(sources);
        var variations = variations_1.Variations.run(sources);
        var vTree$ = xstream_1.default.combine(types, content, states, variations).map(function (_a) {
            var types = _a[0], content = _a[1], states = _a[2], variations = _a[3];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Menu",
                                subtext: "A menu displays grouped navigation actions"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                    ]
                        .concat(types)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")
                    ]
                        .concat(content)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "States")
                    ]
                        .concat(states)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")
                    ]
                        .concat(variations)),
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Menu.run = run;
})(Menu = exports.Menu || (exports.Menu = {}));


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var States;
(function (States) {
    function run(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Hover",
            description: [
                dom_1.p("A menu item can be hovered"),
                UI.Message.render({ color: UI.Color.Warning }, "Menu items are only hoverable if they have the href or link property.")
            ],
            VNode$: xstream_1.default.of(UI.Menu.render({ compact: true }, [
                { href: "#", main: "A link" },
                { link: true, main: "div link" }
            ])),
            code: "UI.Menu.render({compact: true}, [\n        {href: \"#\", main: \"A link\"},\n        {link: true, main: \"div link\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            header: "Active",
            description: "A menu item can be active",
            VNode$: xstream_1.default.of(UI.Menu.render({ compact: true }, [
                { active: true, main: "Link" }
            ])),
            code: "UI.Menu.render({compact: true}, [\n        {active: true, main: \"Link\"}\n      ])"
        });
        return xstream_1.default.combine(ex.DOM, ex2.DOM);
    }
    States.run = run;
})(States = exports.States || (exports.States = {}));


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Types;
(function (Types) {
    function run(sources) {
        var basicEx = createBasicExamples(sources);
        var secondaryEx = createSecondaryExamples(sources);
        var pointingEx = createPointingExamples(sources);
        var tabularEx = createTabularExamples(sources);
        var textEx = createTextExamples(sources);
        var verticalEx = createVerticalExamples(sources);
        var paginationEx = createPaginationExamples(sources);
        var examples = [].concat(basicEx, secondaryEx, pointingEx, tabularEx, textEx, verticalEx, paginationEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Types.run = run;
    function createBasicExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Menu",
            description: "A menu",
            VNode$: xstream_1.default.of(UI.Menu.render({ equalWidth: true }, [
                { active: true, main: "Editorials" },
                { main: "Reviews" },
                { main: "Upcoming Events" }
            ])),
            code: "UI.Menu.render({equalWidth: true}, [\n        {active: true, main: \"Editorials\"},\n        {main: \"Reviews\"},\n        {main: \"Upcoming Events\"}\n      ])"
        });
        //Todo add popup example
        var ddlNavigation = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ static: "More" }),
            content$: xstream_1.default.of([
                { main: "Applications", value: "applications" },
                { main: "International Students", value: "international" },
                { main: "Scholarships", value: "scholarships" }
            ])
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.combine(ddlNavigation.DOM).map(function (_a) {
                var ddlNavigation = _a[0];
                return UI.Menu.render({ text: true }, [
                    { main: [UI.Image.render("https://placeholdit.imgix.net/~text?txtsize=33&txt=Logo&w=80&h=80")] },
                    { float: "right", main: [ddlNavigation] }
                ]);
            }),
            code: "let ddlNavigation = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({static: \"More\"}),\n      content$: xs.of([\n        { main: \"Applications\", value: \"applications\" },\n        { main: \"International Students\", value: \"international\" },\n        { main: \"Scholarships\", value: \"scholarships\" }\n      ])\n    });\n    let vTree$ = xs.combine(ddlNavigation.DOM).map(\n      ([ddlNavigation]) => UI.Menu.render({text: true}, [\n        {main: [UI.Image.render(\"\")]},\n        {float: \"right\", main: [ddlNavigation]}\n      ])\n    )"
        });
        //Todo dropdown menu's
        var ddlNavigation2 = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ simple: true, default: [UI.Icon.render(UI.IconType.Wrench)] }),
            content$: xstream_1.default.of([
                { main: "New...", value: "new" },
                { main: "Open...", value: "open" },
                { main: "Save...", value: "save" },
                { main: "Edit permissions...", value: "permissions" },
                { divider: true },
                { main: "Export", headerOnly: true },
                { main: "Share...", value: "" }
            ]),
            args: {
                static: true
            }
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.combine(ddlNavigation2.DOM).map(function (_a) {
                var ddlNavigation = _a[0];
                return dom_1.div([
                    UI.Menu.render({ attachment: "top" }, [
                        { icon: true, dropdown: true, main: ddlNavigation },
                        {
                            float: "right", main: [UI.Textbox.render({ icon: true, transparent: true }, [
                                    UI.Icon.render(UI.IconType.Search)
                                ])]
                        }
                    ]),
                    UI.Segment.render({ attachment: UI.Attachment.Bottom })
                ]);
            }),
            code: " let ddlNavigation2 = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({ static: [UI.Icon.render(UI.IconType.Wrench)] }),\n      content$: xs.of([\n        { main: \"New...\", value: \"new\" },\n        { main: \"Open...\", value: \"open\" },\n        { main: \"Save...\", value: \"save\" },\n        { main: \"Edit permissions...\", value: \"permissions\" },\n        { divider: true },\n        { main: \"Export\", header: true },\n        { main: \"Share...\", value: \"\" }\n      ])\n    });\n    let vTree$ = xs.combine(ddlNavigation2.DOM).map(\n      ([ddlNavigation]) => div([\n        UI.Menu.render({ attachment: \"top\" }, [\n          { main: [ddlNavigation] },\n          {\n            float: \"right\", main: [UI.Textbox.render({ icon: true, transparent: true }, [\n              UI.Icon.render(UI.IconType.Search)\n            ])]\n          }\n        ]),\n        UI.Segment.render({attachment: UI.Attachment.Bottom})\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM];
    }
    function createSecondaryExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Secondary Menu",
            description: "A menu can adjust its appearance to de-emphasize its contents",
            VNode$: xstream_1.default.of(UI.Menu.render({ secondary: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" },
                {
                    float: "right", main: [
                        UI.Textbox.render({ placeholder: "Search...", icon: true }, [
                            UI.Icon.render(UI.IconType.Search)
                        ])
                    ]
                },
                { float: "right", main: "Logout" }
            ])),
            code: "UI.Menu.render({ secondary: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n        { float: \"right\", main: [\n          UI.Textbox.render({placeholder: \"Search...\", icon: true}, [\n            UI.Icon.render(UI.IconType.Search)\n          ])\n        ]},\n        { float: \"right\", main: \"Logout\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createPointingExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Pointing",
            description: "A menu can point to show its relationship to nearby content",
            VNode$: xstream_1.default.of(dom_1.div([UI.Menu.render({ pointing: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" },
                    {
                        float: "right", main: [
                            UI.Textbox.render({ placeholder: "Search...", icon: true }, [
                                UI.Icon.render(UI.IconType.Search)
                            ])
                        ]
                    }
                ]),
                UI.Segment.render()
            ])),
            code: "UI.Menu.render({ pointing: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n        {\n          float: \"right\", main: [\n            UI.Textbox.render({ placeholder: \"Search...\", icon: true }, [\n              UI.Icon.render(UI.IconType.Search)\n            ])\n          ]\n        }\n      ]),\n      UI.Segment.render()"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([UI.Menu.render({ pointing: true, secondary: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" },
                    { float: "right", main: "Logout" }
                ]),
                UI.Segment.render()
            ])),
            code: "UI.Menu.render({ pointing: true, secondary: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n        { float: \"right\", main: \"Logout\" }\n      ]),\n      UI.Segment.render()"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createTabularExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Tabular",
            description: "A menu can be formatted to show tabs of information",
            VNode$: xstream_1.default.of(UI.Menu.render({ tabular: true }, [
                { main: "Bio", active: true },
                { main: "Photos" }
            ])),
            code: "UI.Menu.render({ tabular: true }, [\n        { main: \"Bio\", active: true },\n        { main: \"Photos\" }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ tabular: true, attachment: "top" }, [
                    { main: "Bio", active: true },
                    { main: "Photos" }
                ]),
                UI.Segment.render({ attachment: UI.Attachment.Bottom })
            ])),
            code: "UI.Menu.render({ tabular: true, attachment: \"top\" }, [\n          { main: \"Bio\", active: true },\n          { main: \"Photos\" }\n        ]),\n        UI.Segment.render({attachment: UI.Attachment.Bottom})"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Segment.render({ attachment: UI.Attachment.Top }),
                UI.Menu.render({ tabular: true, attachment: "bottom" }, [
                    { main: "Active project", active: true },
                    { main: "Project #2" },
                    { main: "Project #3" },
                    { float: "right", main: [UI.Icon.render(UI.IconType.Plus), "New Tab"] }
                ]),
            ])),
            code: "UI.Segment.render({ attachment: UI.Attachment.Top }),\n        UI.Menu.render({ tabular: true, attachment: \"bottom\" }, [\n          { main: \"Active project\", active: true },\n          { main: \"Project #2\" },\n          { main: \"Project #3\" },\n          { float: \"right\", main: [UI.Icon.render(UI.IconType.Plus), \"New Tab\"]}\n        ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }, [
                    UI.Menu.render({ vertical: true, size: "fluid", tabular: true }, [
                        { main: "Bio", active: true },
                        { main: "Pics" },
                        { main: "Companies" },
                        { main: "Links" }
                    ])
                ]),
                UI.Column.render({ width: 12, stretched: true }, [
                    UI.Segment.render("This is an stretched grid column. This segment will always match the tab height")
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({ width: 4 }, [\n          UI.Menu.render({ vertical: true, size: \"fluid\", tabular: true }, [\n            { main: \"Bio\", active: true },\n            { main: \"Pics\" },\n            { main: \"Companies\" },\n            { main: \"Links\" }\n          ])\n        ]),\n        UI.Column.render({width: 12, stretched: true}, [\n          UI.Segment.render(\"This is an stretched grid column. This segment will always match the tab height\")\n        ])\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 12, stretched: true }, [
                    UI.Segment.render("This is an stretched grid column. This segment will always match the tab height")
                ]),
                UI.Column.render({ width: 4 }, [
                    UI.Menu.render({ vertical: true, size: "fluid", tabular: true, right: true }, [
                        { main: "Bio", active: true },
                        { main: "Pics" },
                        { main: "Companies" },
                        { main: "Links" }
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 12, stretched: true}, [\n          UI.Segment.render(\"This is an stretched grid column. This segment will always match the tab height\")\n        ]),\n        UI.Column.render({ width: 4 }, [\n          UI.Menu.render({ vertical: true, size: \"fluid\", tabular: true, right: true }, [\n            { main: \"Bio\", active: true },\n            { main: \"Pics\" },\n            { main: \"Companies\" },\n            { main: \"Links\" }\n          ])\n        ])\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM];
    }
    function createTextExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Text",
            description: "A menu can be formatted for text content",
            VNode$: xstream_1.default.of(UI.Menu.render({ text: true }, [
                { header: true, main: "Sort by" },
                { active: true, main: "Closest" },
                { main: "Most Comments" },
                { main: "Most Popular" }
            ])),
            code: "UI.Menu.render({ text: true }, [\n        { header: true, main: \"Editorials\" },\n        { active: true, main: \"Closest\" },\n        { main: \"Most Comments\" },\n        { main: \"Most Popular\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createVerticalExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Vertical Menu",
            description: "A vertical menu displays elements vertically.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    active: true, color: "primary", main: [
                        "Inbox", UI.Label.render({ leftPointing: true, color: UI.Color.Primary }, "1")
                    ]
                }, {
                    main: [
                        "Spam", UI.Label.render("51")
                    ]
                }, {
                    main: [
                        "Updates", UI.Label.render("1")
                    ]
                }, {
                    main: [
                        UI.Textbox.render({ transparent: true, icon: true, placeholder: "Search mail..." }, [
                            UI.Icon.render(UI.IconType.Search)
                        ])
                    ]
                }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          active: true, color: \"primary\", main: [\n            \"Inbox\", UI.Label.render({ leftPointing: true, color: UI.Color.Primary }, \"1\")\n          ]\n        }, {\n          main: [\n            \"Spam\", UI.Label.render(\"51\")\n          ]\n        },{\n          main: [\n            \"Updates\", UI.Label.render(\"1\")\n          ]\n        }, {\n          main: [\n            UI.Textbox.render({transparent: true, icon: true, placeholder: \"Search mail...\"}, [\n              UI.Icon.render(UI.IconType.Search)\n            ])\n          ]\n        }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ secondary: true, vertical: true }, [
                { active: true, main: "Account" },
                { main: "Settings" },
                { main: "Display Options" },
            ])),
            code: "UI.Menu.render({ secondary: true, vertical: true }, [\n        { active: true, main: \"Account\" },\n        { main: \"Settings\" },\n        { main: \"Display Options\" },\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true, text: true }, [
                { header: true, main: "Sort by" },
                { active: true, main: "Closest" },
                { main: "Most Comments" },
                { main: "Most Popular" }
            ])),
            code: "UI.Menu.render({ vertical: true, text: true }, [\n        { header: true, main: \"Editorials\" },\n        { active: true, main: \"Closest\" },\n        { main: \"Most Comments\" },\n        { main: \"Most Popular\"}\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true, pointing: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" },
            ])),
            code: "UI.Menu.render({ vertical: true, pointing: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ secondary: true, vertical: true, pointing: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" },
            ])),
            code: "UI.Menu.render({ secondary: true, vertical: true, pointing: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM];
    }
    function createPaginationExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Pagination",
            description: "A pagination menu is specially formatted to present links to pages of content",
            VNode$: xstream_1.default.of(UI.Menu.render({ pagination: true }, [
                { active: true, main: "1" },
                { disabled: true, main: "..." },
                { main: "10" },
                { main: "11" },
                { main: "12" }
            ])),
            code: "UI.Menu.render({ pagination: true }, [\n        { active: true, main: \"1\" },\n        { disabled: true, main: \"...\" },\n        { main: \"10\" },\n        { main: \"11\" },\n        { main: \"12\" }\n      ])"
        });
        return [ex.DOM];
    }
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Variations;
(function (Variations) {
    function run(sources) {
        var stackableEx = createStackableExamples(sources);
        var invertedEx = createInvertedExamples(sources);
        var coloredEx = createColoredExamples(sources);
        var iconsEx = createIconsExamples(sources);
        var labelledIconsEx = createLabeledIconsExamples(sources);
        var fluidEx = createFluidExamples(sources);
        var compactEx = createCompactExamples(sources);
        var equalWidthEx = createEqualWidthExamples(sources);
        var pointingEx = createPointingExamples(sources);
        var attachedEx = createAttachedExamples(sources);
        var sizeEx = createSizeExamples(sources);
        var fittedEx = createFittedExamples(sources);
        var borderlessEx = createBorderlessExamples(sources);
        var examples = [].concat(stackableEx, invertedEx, coloredEx, iconsEx, labelledIconsEx, fluidEx, compactEx, equalWidthEx, pointingEx, attachedEx, sizeEx, fittedEx, borderlessEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Variations.run = run;
    function createStackableExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Stackable",
            description: [
                dom_1.p("A menu can stack at mobile resolutions"),
                UI.Message.render({ color: UI.Color.Info }, "Stackable menus are intended to be used with only simple menu content. Stacked menus will not replicate all additional stylings for vertical menus like adjusting dropdown position.")
            ],
            VNode$: xstream_1.default.of(UI.Menu.render([
                { main: "Features" },
                { main: "Testimonials" },
                { main: "Sign-in" }
            ])),
            code: "UI.Menu.render([\n        {main: \"Features\"},\n        {main: \"Testimonials\"},\n        {main: \"Sign-in\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createInvertedExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Inverted",
            description: "A menu may have its colors inverted to show greater contrast",
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" }
            ])),
            code: "UI.Menu.render({inverted: true}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {main: \"Friends\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true, vertical: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" }
            ])),
            code: "UI.Menu.render({inverted: true, vertical: true}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {main: \"Friends\"}\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true, pointing: true, vertical: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" }
            ])),
            code: "UI.Menu.render({inverted: true, pointing: true, vertical: true}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {main: \"Friends\"}\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Segment.render({ inverted: true }, [
                UI.Menu.render({ inverted: true, secondary: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "UI.Segment.render({ inverted: true }, [\n        UI.Menu.render({ inverted: true, secondary: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Segment.render({ inverted: true }, [
                UI.Menu.render({ inverted: true, secondary: true, pointing: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "UI.Segment.render({ inverted: true }, [\n        UI.Menu.render({ inverted: true, secondary: true, pointing: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM];
    }
    function createColoredExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Colored",
            description: "Additional colors can be specified",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { active: true, color: "primary", main: "Primary" },
                { color: "secondary", main: "Secondary" },
                { color: "success", main: "Success" },
                { color: "info", main: "Info" },
                { color: "warning", main: "Warning" },
                { color: "error", main: "Error" }
            ])),
            code: "UI.Menu.render([\n        {active: true, color: \"primary\", main: \"Primary\"},\n        {color: \"secondary\", main: \"Secondary\"},\n        {color: \"success\", main: \"Success\"},\n        {color: \"info\", main: \"Info\"},\n        {color: \"warning\", main: \"Warning\"},\n        {color: \"error\", main: \"Error\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ color: "primary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "secondary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "success", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "info", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "warning", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "error", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "UI.Menu.render({ color: \"primary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"secondary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"success\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"info\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"warning\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"error\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])"
        });
        var ex3 = components_1.Example.run(sources, {
            description: "These colors can also be inverted",
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true }, [
                { active: true, color: "primary", main: "Primary" },
                { color: "secondary", main: "Secondary" },
                { color: "success", main: "Success" },
                { color: "info", main: "Info" },
                { color: "warning", main: "Warning" },
                { color: "error", main: "Error" }
            ])),
            code: "UI.Menu.render({inverted: true}, [\n        { active: true, color: \"primary\", main: \"Primary\" },\n        { color: \"secondary\", main: \"Secondary\" },\n        { color: \"success\", main: \"Success\" },\n        { color: \"info\", main: \"Info\" },\n        { color: \"warning\", main: \"Warning\" },\n        { color: \"error\", main: \"Error\" }\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ inverted: true, color: "primary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "secondary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "success", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "info", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "warning", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "error", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "        UI.Menu.render({ inverted: true, color: \"primary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"secondary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"success\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"info\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"warning\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"error\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM];
    }
    function createIconsExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Icons",
            description: "A menu may have just icons",
            VNode$: xstream_1.default.of(UI.Menu.render({ icon: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad)] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera)] },
                { main: [UI.Icon.render(UI.IconType.Play)] }
            ])),
            code: "UI.Menu.render({icon: true}, [\n        {main: [UI.Icon.render(UI.IconType.Gamepad)]},\n        {main: [UI.Icon.render(UI.IconType.VideoCamera)]},\n        {main: [UI.Icon.render(UI.IconType.Play)]}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ icon: true, vertical: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad)] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera)] },
                { main: [UI.Icon.render(UI.IconType.Play)] }
            ])),
            code: "UI.Menu.render({ icon: true, vertical: true }, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad)] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera)] },\n        { main: [UI.Icon.render(UI.IconType.Play)] }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createLabeledIconsExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Labeled Icon",
            description: "A menu may have labeled icons",
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({labeledIcons: true}, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true, vertical: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({ labeledIcons: true, vertical: true }, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createFluidExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Fluid",
            description: "A vertical menu may take the size of its container.",
            VNode$: xstream_1.default.of(UI.Menu.render({ fluid: true }, [
                { main: "Run" },
                { main: "Walk" },
                { main: "Bike" }
            ])),
            code: "UI.Menu.render({fluid: true}, [\n        {main: \"Run\"},\n        {main: \"Walk\"},\n        {main: \"Bike\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createCompactExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Compact",
            description: "A menu can take up only the space necessary to fit its content",
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true, compact: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({labeledIcons: true, compact: true}, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true, compact: true, vertical: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({labeledIcons: true, compact: true, vertical: true}, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createEqualWidthExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Equal Width",
            description: "A menu may divide its items evenly",
            VNode$: xstream_1.default.of(UI.Menu.render({ equalWidth: true }, [
                { main: "Buy" },
                { main: "Sell" },
                { main: "Rent" }
            ])),
            code: "UI.Menu.render({equalWidth: true}, [\n        {main: \"Buy\"},\n        {main: \"Sell\"},\n        {main: \"Rent\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createPointingExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Pointing",
            description: "A vertical menu can point to content adjacent to itself to show ownership",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true, pointing: true }, [
                { main: "Site Title" },
                {
                    header: true, main: ["Grouped Section", UI.Menu.render({ submenu: true }, [
                            { main: "Subsection 1" },
                            { main: "Subsection 2", active: true },
                            { main: "Subsection 3" }
                        ])]
                }
            ])),
            code: "UI.Menu.render({ vertical: true, pointing: true }, [\n        { main: \"Site Title\" },\n        {\n          header: true, main: [\"Grouped Section\", UI.Menu.render({ submenu: true }, [\n            { main: \"Subsection 1\" },\n            { main: \"Subsection 2\", active: true },\n            { main: \"Subsection 3\" }\n          ])]\n        }\n      ])"
        });
        return [ex.DOM];
    }
    function createAttachedExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Attached",
            description: "A menu may be attached to other content segments",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ attachment: "top", tabular: true }, [
                    { active: true, main: "Tab 1" },
                    { main: "Tab 2" }
                ]),
                UI.Segment.render({ attachment: UI.Attachment.Bottom }, [
                    dom_1.p("There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.")
                ])
            ])),
            code: "UI.Menu.render({ attachment: \"top\", tabular: true }, [\n          { active: true, main: \"Tab 1\" },\n          { main: \"Tab 2\" }\n        ]),\n        UI.Segment.render({ attachment: UI.Attachment.Bottom })"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ attachment: "top" }, [
                    { active: true, main: "Section 1" },
                    { main: "Section 2" }
                ]),
                UI.Segment.render({ attachment: UI.Attachment.None }, [
                    dom_1.p("There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.")
                ]),
                UI.Menu.render({ attachment: "bottom" }, [
                    { active: true, main: "Section 1" },
                    { main: "Section 2" }
                ])
            ])),
            code: "UI.Menu.render({ attachment: \"top\" }, [\n          { active: true, main: \"Section 1\" },\n          { main: \"Section 2\" }\n        ]),\n        UI.Segment.render({ attachment: UI.Attachment.None }),\n        UI.Menu.render({ attachment: \"bottom\" }, [\n          { active: true, main: \"Section 1\" },\n          { main: \"Section 2\" }\n        ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createSizeExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Size",
            description: "A menu can vary in size",
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "mini" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"mini\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "tiny" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"tiny\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "small" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"small\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "medium" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"medium\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "large" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"large\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex7 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "huge" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"huge\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex8 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "massive" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"massive\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM, ex7.DOM, ex8.DOM];
    }
    function createFittedExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Fitted",
            description: "A menu item or menu can remove element padding, vertically or horizontally",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { fitted: true, main: "No padding whatsoever" },
                { horizontallyFitted: true, main: "No horizontal padding" },
                { verticallyFitted: true, main: "No vertical padding" }
            ])),
            code: "UI.Menu.render([\n        {fitted: true, main: \"No padding whatsoever\"},\n        {horizontallyFitted: true, main: \"No horizontal padding\"},\n        {verticallyFitted: true, main: \"No vertical padding\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createBorderlessExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Borderless",
            description: "A menu or menu item can have no borders",
            VNode$: xstream_1.default.of(UI.Menu.render({ borderless: true }, [
                { main: "1" },
                { main: "2" },
                { main: "3" },
                { main: "4" },
                { main: "5" },
                { main: "6" }
            ])),
            code: "UI.Menu.render({borderless: true}, [\n        {main: \"1\"},\n        {main: \"2\"},\n        {main: \"3\"},\n        {main: \"4\"},\n        {main: \"5\"},\n        {main: \"6\"}\n      ])"
        });
        return [ex.DOM];
    }
})(Variations = exports.Variations || (exports.Variations = {}));


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(176);
var states_1 = __webpack_require__(175);
var variations_1 = __webpack_require__(177);
var Message;
(function (Message) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var states = states_1.States.run(sources);
        var variations = variations_1.Variations.run(sources);
        var vTree$ = xstream_1.default.combine(types, states, variations).map(function (_a) {
            var types = _a[0], states = _a[1], variations = _a[2];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Message",
                                subtext: "A message displays information that explains nearby content"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                    ]
                        .concat(types)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "States")
                    ]
                        .concat(states)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")
                    ]
                        .concat(variations))
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Message.run = run;
})(Message = exports.Message || (exports.Message = {}));


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var States;
(function (States) {
    function run(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Hidden",
            description: "A message can be hidden",
            VNode$: xstream_1.default.of(UI.Message.render({ hidden: true }, "You can't see me!")),
            code: "UI.Message.render({hidden: true}, \"You can't see me!\")"
        });
        var ex2 = components_1.Example.run(sources, {
            header: "Visible",
            description: "A message can be set to visible to force itself to be shown.",
            VNode$: xstream_1.default.of(UI.Message.render({ forceVisible: true }, "You can always see me.")),
            code: "UI.Message.render({forceVisible: true}, \"You can always see me.\")"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM);
    }
    States.run = run;
})(States = exports.States || (exports.States = {}));


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(6);
var Types;
(function (Types) {
    function run(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Message",
            description: "A basic message",
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    header: "Changes in Service",
                    main: "We just updated our privacy policy here to better service our customers. We recommend reviewing the changes."
                }
            })),
            code: "UI.Message.render({\n        content: {\n          header: \"Changes in Service\",\n          main: \"We just updated our privacy policy here to better service our customers. We recommend reviewing the changes.\"\n        }\n      })"
        });
        var ex2 = components_1.Example.run(sources, {
            header: "List message",
            description: "A message with a list",
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    header: "New Site Features",
                    main: [
                        UI.List.render({ bulleted: true }, [
                            { main: "You can now have cover images on blog pages" },
                            { main: "Drafts will now auto-save while writing" }
                        ])
                    ]
                }
            })),
            code: "UI.Message.render({\n        content: {\n          header: \"New Site Features\",\n          main: [\n            UI.List.render({bulleted: true}, [\n              {main: \"You can now have cover images on blog pages\"},\n              {main: \"Drafts will now auto-save while writing\"}\n            ])\n          ]\n        }\n      })"
        });
        var ex3 = components_1.Example.run(sources, {
            header: ["Icon Message", UI.Label.render({ color: "primary" }, "flexbox")],
            description: "A message can contain an icon.",
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    icon: [UI.Icon.render("inbox")],
                    header: "Have you heard about our mailing list?",
                    main: "Get the best news in your e-mail every day."
                }
            })),
            code: "UI.Message.render({\n        content: {\n          icon: [UI.Icon.render(\"inbox\")],\n          header: \"Have you heard about our mailing list?\",\n          main: \"Get the best news in your e-mail every day.\"\n        }\n      })"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    icon: [UI.Icon.render({ loading: true }, "notched circle")],
                    header: "Just one second",
                    main: "We're fetching that content for you."
                }
            })),
            code: "UI.Message.render({\n        content: {\n          icon: [UI.Icon.render({loading: true}, \"notched circle\")],\n          header: \"Just one second\",\n          main: \"We're fetching that content for you.\"\n        }\n      })"
        });
        var msg = UI.Message.run({
            DOM: sources.DOM,
            content$: xstream_1.default.of({
                header: "Welcome back!",
                main: "This is a special notification which you can dismiss if you're bored with it."
            }), args: {
                closeable: true
            }
        });
        var ex5 = components_1.Example.run(sources, {
            header: "Dismissable Block",
            description: "A message that the user can choose to hide",
            VNode$: msg.DOM,
            code: "let msg = UI.Message.run({\n        DOM: sources.DOM,\n        content$: xs.of({\n          header: \"Welcome back!\",\n          main: \"This is a special notification which you can dismiss if you're bored with it.\"\n        }), args: {\n          closeable: true\n        }\n      });"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM);
    }
    Types.run = run;
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(6);
var Variations;
(function (Variations) {
    function run(sources) {
        var floatingEx = makeFloatingExamples(sources);
        var compactEx = makeCompactExamples(sources);
        var attachedEx = makeAttachedExamples(sources);
        var coloredEx = makeColoredExamples(sources);
        var sizeEx = makeSizeExamples(sources);
        var examples = [].concat(floatingEx, compactEx, attachedEx, coloredEx, sizeEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Variations.run = run;
    function makeFloatingExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Floating",
            description: "A message can float above content that it is related to",
            VNode$: xstream_1.default.of(UI.Message.render({ floating: true }, "Way to go!")),
            code: "UI.Message.render({floating: true}, \"Way to go!\")"
        });
        return [ex1.DOM];
    }
    function makeCompactExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Compact",
            description: "A message can only take up the width of its content.",
            VNode$: xstream_1.default.of(UI.Message.render({ compact: true }, "Get all the best inventions in your e-mail every day. Sign up now!")),
            code: "UI.Message.render({hidden: true}, \"Get all the best inventions in your e-mail every day. Sign up now!\")"
        });
        return [ex1.DOM];
    }
    function makeAttachedExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Attached",
            description: "A message can be formatted to attach itself to other content",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Message.render({
                    props: { attachment: "top" },
                    content: {
                        header: "Welcome to our site!",
                        main: "Fill out the form below to sign-up for a new account"
                    }
                }),
                UI.Segment.render({ attachment: "none" }, [
                    UI.Form.render([
                        UI.Fields.render({ equalWidth: true }, [
                            UI.Field.render({
                                content: {
                                    label: "First Name",
                                    main: UI.Textbox.render({ placeholder: "First Name" })
                                }
                            }),
                            UI.Field.render({
                                content: {
                                    label: "Last Name",
                                    main: UI.Textbox.render({ placeholder: "Last Name" })
                                }
                            })
                        ]),
                        UI.Field.render({
                            content: {
                                label: "Username",
                                main: UI.Textbox.render({ placeholder: "Username" })
                            }
                        }),
                        UI.Field.render({
                            content: {
                                label: "Password",
                                main: UI.Textbox.render({ type: "password" })
                            }
                        }),
                        UI.Field.render({ inline: true }, [UI.Checkbox.render("I agree to the terms and conditions.")]),
                        UI.Button.render({ color: "primary" }, "Submit")
                    ])
                ]),
                UI.Message.render({
                    props: { attachment: "bottom", color: "warning" },
                    content: {
                        icon: [UI.Icon.render("help")],
                        main: ["Already signed up? ", dom_1.a({ attrs: { href: "#" } }, "Login here"), " instead"]
                    }
                })
            ])),
            code: "UI.Message.render({\n          props: { attachment: \"top\" },\n          content: {\n            header: \"Welcome to our site!\",\n            main: \"Fill out the form below to sign-up for a new account\"\n          }\n        }),\n        UI.Segment.render({ attachment: \"none\" }, [\n          UI.Form.render([\n            UI.Fields.render({ equalWidth: true }, [\n              UI.Field.render({\n                content: {\n                  label: \"First Name\",\n                  main: UI.Textbox.render({ placeholder: \"First Name\" })\n                }\n              }),\n              UI.Field.render({\n                content: {\n                  label: \"Last Name\",\n                  main: UI.Textbox.render({ placeholder: \"Last Name\" })\n                }\n              })\n            ]),\n            UI.Field.render({\n              content: {\n                label: \"Username\",\n                main: UI.Textbox.render({ placeholder: \"Username\" })\n              }\n            }),\n            UI.Field.render({\n              content: {\n                label: \"Password\",\n                main: UI.Textbox.render({ type: \"password\" })\n              }\n            }),\n            UI.Field.render({inline: true}, [UI.Checkbox.render(\"I agree to the terms and conditions.\")]),\n            UI.Button.render({color: \"primary\"}, \"Submit\")\n          ])\n        ]),\n        UI.Message.render({\n          props : {attachment: \"bottom\", color: \"warning\"},\n          content: {\n            icon: [UI.Icon.render(\"help\")],\n            main: [\"Already signed up?\", a({attrs: {href: \"#\"}}, \"Login here\"), \" instead\"]\n          }\n        })\n      ])"
        });
        return [ex1.DOM];
    }
    function makeColoredExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Colored",
            description: "A message can be formatted to be different colors",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Message.render({ color: "primary" }, "Primary"),
                UI.Message.render({ color: "secondary" }, "Secondary"),
                UI.Message.render({ color: "success" }, "Success"),
                UI.Message.render({ color: "info" }, "Info"),
                UI.Message.render({ color: "warning" }, "Warning"),
                UI.Message.render({ color: "error" }, "Error")
            ])),
            code: "\n        UI.Message.render({ color: \"primary\" }, \"Primary\"),\n        UI.Message.render({ color: \"secondary\" }, \"Secondary\"),\n        UI.Message.render({ color: \"success\" }, \"Success\"),\n        UI.Message.render({ color: \"info\" }, \"Info\"),\n        UI.Message.render({ color: \"warning\" }, \"Warning\"),\n        UI.Message.render({ color: \"error\" }, \"Error\")"
        });
        return [ex1.DOM];
    }
    function makeSizeExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Size",
            description: "A message can have different sizes",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Message.render({ size: "mini" }, "This is a mini message"),
                UI.Message.render({ size: "tiny" }, "This is a tiny message"),
                UI.Message.render({ size: "small" }, "This is a small message"),
                UI.Message.render({ size: "medium" }, "This is a medium message"),
                UI.Message.render({ size: "large" }, "This is a large message"),
                UI.Message.render({ size: "big" }, "This is a big message"),
                UI.Message.render({ size: "huge" }, "This is a huge message"),
                UI.Message.render({ size: "massive" }, "This is a massive message")
            ])),
            code: "\n        UI.Message.render({ size: \"mini\" }, \"This is a mini message\"),\n        UI.Message.render({ size: \"tiny\" }, \"This is a tiny message\"),\n        UI.Message.render({ size: \"small\" }, \"This is a small message\"),\n        UI.Message.render({ size: \"medium\" }, \"This is a medium message\"),\n        UI.Message.render({ size: \"large\" }, \"This is a large message\"),\n        UI.Message.render({ size: \"big\" }, \"This is a big message\"),\n        UI.Message.render({ size: \"huge\" }, \"This is a huge message\"),\n        UI.Message.render({ size: \"massive\" }, \"This is a massive message\")"
        });
        return [ex1.DOM];
    }
})(Variations = exports.Variations || (exports.Variations = {}));


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var isolate_1 = __webpack_require__(7);
var Example;
(function (Example) {
    function run(sources, args) {
        function main(sources) {
            //Show code icon
            var btnShow = UI.Icon.run({
                DOM: sources.DOM,
                content$: xstream_1.default.of(UI.IconType.Code)
            });
            var transition$ = btnShow.events("click").fold(function (prev, n) { return !prev; }, false).drop(1).map(function (n) { return ({
                animation: UI.Animation.Slide,
                direction: n ? UI.Direction.In : UI.Direction.Out
            }); }).startWith({
                animation: UI.Animation.None,
                direction: UI.Direction.Out
            });
            //Sliding code view
            var codelines = args.code.split(/\r?\n/);
            //Trim leading whitespace
            var baseWhitespace = codelines.length > 1 ? countLeadingWhitespace(codelines[1]) - 2 : 0;
            codelines = codelines.map(function (line, i) { return i === 0 ? line : line.substring(baseWhitespace); });
            var code$ = xstream_1.default.of(UI.Segment.render({ attachment: UI.Attachment.Bottom }, [dom_1.pre([
                    dom_1.code({
                        props: { className: "javascript" }, hook: {
                            insert: function (vnode) { hljs.highlightBlock(vnode.elm); }
                        }
                    }, codelines.map(function (line) { return [line, dom_1.br()]; }).reduce(function (acc, n) { return acc.concat(n); }, []))
                ])
            ]));
            var animatedCode$ = UI.Transition.run({
                DOM: sources.DOM,
                target$: code$,
                transition$: transition$
            });
            //Example bar
            var top$ = xstream_1.default.combine(transition$, args.VNode$).map(function (_a) {
                var animation = _a[0], obj = _a[1];
                var isActive = animation.direction === UI.Direction.In;
                var elem = dom_1.div({ props: { className: isActive ? "ui top attached segment code" : "code" } }, [
                    isActive ? UI.Label.render({ attachment: UI.Attachment.Top }, [
                        "Example"
                    ]) : dom_1.div({ style: { display: "none" }, props: { className: "" } }),
                    obj
                ]);
                return elem;
            });
            var vTree$ = xstream_1.default.combine(btnShow.DOM, animatedCode$.DOM, top$).map(function (_a) {
                var btnShow = _a[0], code = _a[1], top = _a[2];
                var content = [btnShow, top, code];
                if (typeof (args.description) !== "undefined") {
                    content = typeof (args.description) === "string" ? [dom_1.p(args.description)].concat(content) : [].concat(args.description, content);
                }
                if (typeof (args.header) !== "undefined") {
                    content = [UI.Header.render(args.header)].concat(content);
                }
                return dom_1.div({ props: { className: args.highlighted ? "highlighted example" : "example" } }, content);
            });
            return {
                DOM: vTree$
            };
        }
        var isolatedMain = isolate_1.default(main);
        return isolatedMain(sources);
    }
    Example.run = run;
    function countLeadingWhitespace(string) {
        for (var i = 0; i < string.length; i++) {
            if (string[i] !== " " && string[i] !== "\t") {
                return (i);
            }
        }
        return (string.length);
    }
})(Example = exports.Example || (exports.Example = {}));


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
// tslint:disable-next-line:no-unused-variable
var dom_1 = __webpack_require__(1);
var Index;
(function (Index) {
    function run(sources) {
        var vTree$ = xstream_1.default.of(dom_1.div(".centered", [
            UI.Container.render([
                UI.Grid.render({ centered: true }, [
                    UI.Row.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Welcome.",
                                subtext: "At the moment the docs are a WIP. Planned pages are scaffolded in the sidemenu."
                            }
                        }),
                    ])
                ])
            ])
        ]));
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Index.run = run;
})(Index = exports.Index || (exports.Index = {}));


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-unused-variable
var xstream_1 = __webpack_require__(0);
// tslint:disable-next-line:no-unused-variable
var dom_1 = __webpack_require__(1);
var sidebar_1 = __webpack_require__(181);
var Layout;
(function (Layout) {
    function run(sources, page) {
        /*** Create components ***/
        var sidebar = sidebar_1.Sidebar.run(sources);
        /*** Compose view ***/
        var vTree$ = xstream_1.default.combine(sidebar.DOM, page.DOM)
            .map(function (_a) {
            var sidebar = _a[0], page = _a[1];
            return dom_1.div(".full.height", [
                dom_1.div(".content.pusher", [
                    sidebar,
                    page
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: page.router
        };
    }
    Layout.run = run;
})(Layout = exports.Layout || (exports.Layout = {}));


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(2);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var Sidebar;
(function (Sidebar) {
    function run(sources) {
        var currentPage$ = sources.router.map(function (x) { return x.pathname; });
        var prefix = "/cycle-semantic-ui";
        var vTree$ = currentPage$.map(function (page) {
            return dom_1.div(".left.menu", [
                dom_1.div(".fixed", [
                    UI.Menu.render({
                        vertical: true, inverted: true,
                        attachment: UI.Attachment.None, size: UI.Size.Fluid
                    }, [{
                            header: true,
                            main: ["Introduction", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/", active: page === prefix + "/" || page === prefix + "/home",
                                        main: "About"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Elements", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/elements/button", active: page === prefix + "/elements/button",
                                        main: "Button"
                                    }, {
                                        link: true, href: prefix + "/elements/container", active: page === prefix + "/elements/container",
                                        main: "Container"
                                    }, {
                                        link: true, href: prefix + "/elements/divider", active: page === prefix + "/elements/divider",
                                        main: "Divider"
                                    }, {
                                        link: true, href: prefix + "/elements/header", active: page === prefix + "/elements/header",
                                        main: "Header"
                                    }, {
                                        link: true, href: prefix + "/elements/icon", active: page === prefix + "/elements/icon",
                                        main: "Icon"
                                    }, {
                                        link: true, href: prefix + "/elements/image", active: page === prefix + "/elements/image",
                                        main: "Image"
                                    }, {
                                        link: true, href: prefix + "/elements/label", active: page === prefix + "/elements/label",
                                        main: "Label"
                                    }, {
                                        link: true, href: prefix + "/elements/list", active: page === prefix + "/elements/list",
                                        main: "List"
                                    }, {
                                        link: true, href: prefix + "/elements/loader", active: page === prefix + "/elements/loader",
                                        main: "Loader"
                                    }, {
                                        link: true, href: prefix + "/elements/segment", active: page === prefix + "/elements/segment",
                                        main: "Segment"
                                    }, {
                                        link: true, href: prefix + "/elements/step", active: page === prefix + "/elements/step",
                                        main: "Step"
                                    }, {
                                        link: true, href: prefix + "/elements/textbox", active: page === prefix + "/elements/textbox",
                                        main: "Textbox"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Collections", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/collections/breadcrumb", active: page === prefix + "/collections/breadcrumb",
                                        main: "Breadcrumb"
                                    }, {
                                        link: true, href: prefix + "/collections/form", active: page === prefix + "/collections/form",
                                        main: "Form"
                                    }, {
                                        link: true, href: prefix + "/collections/grid", active: page === prefix + "/collections/grid",
                                        main: "Grid"
                                    }, {
                                        link: true, href: prefix + "/collections/menu", active: page === prefix + "/collections/menu",
                                        main: "Menu"
                                    }, {
                                        link: true, href: prefix + "/collections/message", active: page === prefix + "/collections/message",
                                        main: "Message"
                                    }, {
                                        link: true, href: prefix + "/collections/table", active: page === prefix + "/collections/table",
                                        main: "Table"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Modules", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/modules/checkbox", active: page === prefix + "/modules/checkbox",
                                        main: "Checkbox"
                                    }, {
                                        link: true, href: prefix + "/modules/dimmer", active: page === prefix + "/modules/dimmer",
                                        main: "Dimmer"
                                    }, {
                                        link: true, href: prefix + "/modules/dropdown", active: page === prefix + "/modules/dropdown",
                                        main: "Dropdown"
                                    }, {
                                        link: true, href: prefix + "/modules/modal", active: page === prefix + "/modules/modal",
                                        main: "Modal"
                                    }, {
                                        link: true, href: prefix + "/modules/popup", active: page === prefix + "/modules/popup",
                                        main: "Popup"
                                    }, {
                                        link: true, href: prefix + "/modules/progress", active: page === prefix + "/modules/progress",
                                        main: "Progress"
                                    }, {
                                        link: true, href: prefix + "/modules/transition", active: page === prefix + "/modules/transition",
                                        main: "Transition"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Views", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/views/statistic", active: page === prefix + "/views/statistic",
                                        main: "Statistic"
                                    }])]
                        }])
                ])
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Sidebar.run = run;
})(Sidebar = exports.Sidebar || (exports.Sidebar = {}));


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isolate_1 = __webpack_require__(7);
var xstream_1 = __webpack_require__(0);
var switch_path_1 = __webpack_require__(142);
var callPage = function (sources) {
    return function (_a) {
        var value = _a.value;
        var isolatedPage = isolate_1.default(value)(sources);
        return isolatedPage;
    };
};
function propOrNever(key, x) {
    if (x.hasOwnProperty(key)) {
        return x[key];
    }
    return xstream_1.default.never();
}
function flattenByKey(key, stream) {
    return stream.map(function (x) { return propOrNever(key, x); }).flatten();
}
function ComponentRouter(sources) {
    var component$ = sources.router.map(function (l) { return switch_path_1.default(l.pathname, sources.routes); })
        .map(function (route) { return callPage(sources)(route); })
        .remember();
    var pluck = function (key) { return flattenByKey(key, component$); };
    var sinks = {
        pluck: pluck,
        DOM: pluck("DOM"),
        router: pluck("router"),
    };
    return sinks;
}
exports.default = function (sources) { return isolate_1.default(ComponentRouter)(sources); };


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = __webpack_require__(179);
var collections_1 = __webpack_require__(168);
var prefix = "/cycle-semantic-ui";
var routes = {
    "/": index_1.Index.run,
};
routes[prefix + "/"] = index_1.Index.run;
routes[prefix + "/collections/breadcrumb"] = collections_1.Breadcrumb.run;
routes[prefix + "/collections/form"] = collections_1.Form.run;
routes[prefix + "/collections/grid"] = collections_1.Grid.run;
routes[prefix + "/collections/menu"] = collections_1.Menu.run;
routes[prefix + "/collections/message"] = collections_1.Message.run;
exports.default = routes;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Breadcrumb;
(function (Breadcrumb) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(breadcrumb, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    Breadcrumb.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, breadcrumb, ".breadcrumb", scope);
    }
    Breadcrumb.run = run;
    function breadcrumb(args) {
        var props = args.props ? args.props : { divider: "/" };
        var content = [];
        if (args.content) {
            if (isContent(args.content)) {
                content = args.content;
            }
            else if (isContent(args.content.main)) {
                content = args.content.main;
            }
        }
        if (!props.divider) {
            props.divider = "/";
        }
        var children = content.map(function (c) { return [
            section(c), divider(props)
        ]; }).reduce(function (a, n) { return a.concat(n); }, []);
        children.splice(-1, 1);
        return dom_1.div({ props: { className: getClassName(props) } }, children);
    }
    function getClassName(props) {
        var className = "ui";
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        return className + " breadcrumb";
    }
    function section(section) {
        return section.active
            ? dom_1.div({ props: { className: "active section" } }, section.text)
            : section.href
                ? dom_1.a({ props: { className: "section", href: section.href } }, section.text)
                : dom_1.div({ props: { className: "section" } }, section.text);
    }
    function divider(props) {
        if (typeof (props.divider) === "string") {
            return dom_1.span({ props: { className: "divider" } }, props.divider);
        }
        if (props.divider.data.props.className.indexOf("ui") !== -1) {
            props.divider.data.props.className = props.divider.data.props.className.substring(3);
        }
        if (props.divider.data.props.className.indexOf("divider") === -1) {
            props.divider.data.props.className += " divider";
        }
        return props.divider;
    }
    function isContent(obj) {
        return obj instanceof Array;
    }
})(Breadcrumb = exports.Breadcrumb || (exports.Breadcrumb = {}));


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(8);
var common_1 = __webpack_require__(4);
var Field;
(function (Field) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(field, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Field.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, field, ".field", scope);
    }
    Field.run = run;
    function field(args) {
        var props = typeof (args.props) === "undefined" ? {} : args.props;
        var lbl = "";
        var content = [];
        if (typeof (args.content) !== "undefined") {
            if (types_1.isDOMContent(args.content)) {
                content = args.content;
            }
            else {
                lbl = args.content.label ? args.content.label : "";
                content = args.content.main ? args.content.main : [];
            }
        }
        return dom_1.div({ props: { className: getClassname(props) } }, [].concat(lbl ? dom_1.label(lbl) : [], content));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.width) {
            className += utils_1.numToText(props.width) + " wide";
        }
        if (props.inline) {
            className += " inline";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.error) {
            className += " error";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.required) {
            className += " required";
        }
        className += " field";
        return className;
    }
    function isArgs(obj) {
        return obj && (typeof (obj.props) !== "undefined" ||
            (typeof (obj.content) !== "undefined" &&
                (types_1.isDOMContent(obj.content) || types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.label))));
    }
})(Field = exports.Field || (exports.Field = {}));


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(8);
var common_1 = __webpack_require__(4);
var Fields;
(function (Fields) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(fields, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Fields.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, fields, ".fields", scope);
    }
    Fields.run = run;
    function fields(args) {
        var props = typeof (args.props) === "undefined" ? {} : args.props;
        var lbl = "";
        var content = [];
        if (typeof (args.content) !== "undefined") {
            if (types_1.isDOMContent(args.content)) {
                content = args.content;
            }
            else {
                lbl = args.content.label ? args.content.label : "";
                content = args.content.main ? args.content.main : [];
            }
        }
        return dom_1.div({ props: { className: getClassname(props, content) } }, [].concat(lbl ? dom_1.label(lbl) : [], content));
    }
    function getClassname(props, content) {
        var className = "ui";
        if (props.equalWidth && content.length) {
            className += utils_1.numToText(content.length);
        }
        if (props.inline) {
            className += " inline";
        }
        if (props.grouped) {
            className += " grouped";
        }
        if (props.required) {
            className += " required";
        }
        className += " fields";
        return className;
    }
    function isArgs(obj) {
        return obj && (typeof (obj.props) !== "undefined" ||
            (typeof (obj.content) !== "undefined" &&
                (types_1.isDOMContent(obj.content) || types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.label))));
    }
})(Fields = exports.Fields || (exports.Fields = {}));


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var Form;
(function (Form) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(form, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Form.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, form, ".form", scope);
    }
    Form.run = run;
    function form(args) {
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        var props = typeof (args.props) !== "undefined" ? args.props : {};
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.loading) {
            className += " loading";
        }
        if (props.equalWidth) {
            className += " equal width";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += " form";
        return className;
    }
})(Form = exports.Form || (exports.Form = {}));


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(187));
__export(__webpack_require__(185));
__export(__webpack_require__(186));


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var enums_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(8);
var Column;
(function (Column) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(column, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Column.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, column, ".column", scope);
    }
    Column.run = run;
    function column(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.width) {
            className += utils_1.numToText(props.width) + " wide";
        }
        if (props.mobile) {
            className += utils_1.numToText(props.mobile) + " wide mobile";
        }
        if (props.tablet) {
            className += utils_1.numToText(props.tablet) + " wide tablet";
        }
        if (props.computer) {
            className += utils_1.numToText(props.computer) + " wide computer";
        }
        if (props.largescreen) {
            className += utils_1.numToText(props.largescreen) + " wide large screen";
        }
        if (props.mobileOnly) {
            className += " mobile only";
        }
        if (props.tabletOnly) {
            className += " tablet only";
        }
        if (props.computerOnly) {
            className += " computer only";
        }
        if (props.largescreenOnly) {
            className += " large screen only";
        }
        if (props.stretched) {
            className += " stretched";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        className += " column";
        return className;
    }
})(Column = exports.Column || (exports.Column = {}));


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var enums_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(8);
var Grid;
(function (Grid) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(grid, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Grid.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, grid, ".grid", scope);
    }
    Grid.run = run;
    function grid(args) {
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        var props = typeof (args.props) !== "undefined" ? args.props : {};
        return dom_1.div({ props: { className: getClassname(props, content) } }, content);
    }
    Grid.grid = grid;
    function getClassname(props, content) {
        var className = "ui";
        if (props.equalWidth) {
            className += " equal width";
        }
        if (props.divided) {
            className += " divided";
        }
        if (props.verticallyDivided) {
            className += " vertically divided";
        }
        if (props.container) {
            className += " container";
        }
        if (props.celled) {
            className += " celled";
        }
        if (props.intCelled) {
            className += " internally celled";
        }
        if (props.padded) {
            className += " padded";
        }
        if (props.verticallyPadded) {
            className += " vertically padded";
        }
        if (props.horizontallyPadded) {
            className += " horizontally padded";
        }
        if (props.relaxed) {
            className += " relaxed";
        }
        if (props.veryRelaxed) {
            className += " very relaxed";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.stackable) {
            className += " stackable";
        }
        if (props.doubling) {
            className += " doubling";
        }
        if (props.reversedMobile) {
            className += " mobile reversed";
        }
        if (props.reversedTablet) {
            className += " tablet reversed";
        }
        if (props.reversedComputer) {
            className += " computer reversed";
        }
        if (props.reversedLargescreen) {
            className += " large screen reversed";
        }
        if (props.vertReversedMobile) {
            className += " mobile vertically reversed";
        }
        if (props.vertReversedTablet) {
            className += " tablet vertically reversed";
        }
        if (props.vertReversedComputer) {
            className += " computer vertically reversed";
        }
        if (props.vertReversedLargescreen) {
            className += " large screen vertically reversed";
        }
        if (props.mobileOnly) {
            className += " mobile only";
        }
        if (props.tabletOnly) {
            className += " tablet only";
        }
        if (props.computerOnly) {
            className += " computer only";
        }
        if (props.largescreenOnly) {
            className += " large screen only";
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (props.width) {
            className += utils_1.numToText(props.width) + " column";
        }
        className += " grid";
        return className;
    }
    Grid.getClassname = getClassname;
})(Grid = exports.Grid || (exports.Grid = {}));


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(190));
__export(__webpack_require__(192));
__export(__webpack_require__(189));


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var enums_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(8);
var Row;
(function (Row) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(row, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Row.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, row, ".row", scope);
    }
    Row.run = run;
    function row(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props, content) } }, content);
    }
    Row.row = row;
    function getClassname(props, content) {
        var className = "ui";
        if (props.doubling) {
            className += " doubling";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.stretched) {
            className += " stretched";
        }
        if (props.mobileOnly) {
            className += " mobile only";
        }
        if (props.tabletOnly) {
            className += " tablet only";
        }
        if (props.computerOnly) {
            className += " computer only";
        }
        if (props.largescreenOnly) {
            className += " large screen only";
        }
        if (props.equalWidth) {
            className += " equal width";
        }
        if (props.width) {
            className += utils_1.numToText(props.width) + " column";
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        className += " row";
        return className;
    }
})(Row = exports.Row || (exports.Row = {}));


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(184));
__export(__webpack_require__(188));
__export(__webpack_require__(191));
__export(__webpack_require__(54));
__export(__webpack_require__(194));
__export(__webpack_require__(195));


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(1);
var icon_1 = __webpack_require__(24);
var transition_1 = __webpack_require__(13);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Message;
(function (Message) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(message, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Message.render = render;
    function run(sources, scope) {
        function main(sources) {
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? { main: c } : c; }) : xstream_1.default.of({ main: [] });
            var on$ = sources.args && sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var vTree$, active$;
            if (sources.args && sources.args.closeable) {
                var icon = icon_1.Icon.run({ DOM: sources.DOM, content$: xstream_1.default.of(enums_1.IconType.Close) });
                var close$ = icon.events("click").mapTo(false);
                vTree$ = xstream_1.default.combine(props$, content$, icon.DOM)
                    .map(function (_a) {
                    var props = _a[0], content = _a[1], closeIcon = _a[2];
                    return message({ props: props, content: content }, closeIcon);
                });
                active$ = xstream_1.default.merge(on$, close$);
            }
            else {
                vTree$ = xstream_1.default.combine(props$, content$).map(function (_a) {
                    var props = _a[0], content = _a[1];
                    return message({ props: props, content: content });
                });
                active$ = on$;
            }
            var transition$ = active$.fold(function (prevAnim, active) { return prevAnim.direction === enums_1.Direction.None
                ? { animation: enums_1.Animation.None, direction: active ? enums_1.Direction.In : enums_1.Direction.Out }
                : { animation: enums_1.Animation.Fade, direction: active ? enums_1.Direction.In : enums_1.Direction.Out }; }, { animation: enums_1.Animation.None, direction: enums_1.Direction.None });
            var animatedVTree$ = transition_1.Transition.run({ DOM: sources.DOM, target$: vTree$, transition$: transition$ }).DOM;
            return {
                DOM: animatedVTree$,
                events: function (type) { return sources.DOM.select(".message").events(type); }
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Message.run = run;
    function message(args, closeIcon) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        if (content.icon) {
            props.icon = true;
        }
        if (typeof (content.main) === "string") {
            content.main = [dom_1.p(content.main)];
        }
        return dom_1.div({ props: { className: getClassname(props) } }, [].concat(content.icon ? content.icon : [], closeIcon ? closeIcon : [], dom_1.div({ props: { className: "content" } }, [].concat(content.header ? dom_1.div({ props: { className: "header" } }, content.header) : [], content.main))));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.icon) {
            className += " icon";
        }
        if (props.floating) {
            className += " floating";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.forceVisible) {
            className += " visible";
        }
        if (props.hidden) {
            className += " hidden";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " message";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" || isContent(obj.content) || types_1.isDOMContent(obj.content));
    }
    function isContent(content) {
        return content !== undefined && (types_1.isDOMContent(content.icon) || types_1.isDOMContent(content.header) || types_1.isDOMContent(content.main));
    }
})(Message = exports.Message || (exports.Message = {}));


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Table;
(function (Table) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(tableR, isArgs, isMain, arg1, arg2);
    }
    Table.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, tableR, ".table", scope);
    }
    Table.run = run;
    function tableR(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : { main: args.content } : { main: [] };
        var header = content.header ? dom_1.thead([dom_1.tr(content.header.map(function (h) { return dom_1.th(h); }))]) : [];
        var footer;
        if (types_1.isDOMContent(content.footer)) {
            footer = dom_1.tfoot(content.footer);
        }
        else {
            footer = content.footer ? dom_1.tfoot([dom_1.tr(content.footer.map(function (f) { return dom_1.th(f); }))]) : [];
        }
        return dom_1.table({ props: { className: getClassname(props) } }, [].concat(header, dom_1.tbody(content.main.map(function (r) { return dom_1.tr(r.map(function (c) { return dom_1.td(c); })); })), footer));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.singleLine) {
            className += " single line";
        }
        if (props.fixed) {
            className += " fixed";
        }
        if (props.selectable) {
            className += " selectable";
        }
        if (props.striped) {
            className += " striped";
        }
        if (props.celled) {
            className += " celled";
        }
        if (props.basic) {
            className += " basic";
        }
        if (props.veryBasic) {
            className += " very basic";
        }
        if (props.collapsing) {
            className += " collapsing";
        }
        if (props.padded) {
            className += " padded";
        }
        if (props.veryPadded) {
            className += " very padded";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.veryCompact) {
            className += " very compact";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " table";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            (typeof (obj.content) !== "undefined" && (isContent(obj.content) || isMain(obj.content))));
    }
    function isContent(content) {
        return content !== undefined && (content.main !== undefined ||
            (content.header !== undefined ||
                content.footer !== undefined));
    }
    function isMain(obj) {
        return typeof (obj) !== "undefined" && obj instanceof Array;
    }
})(Table = exports.Table || (exports.Table = {}));


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Button;
(function (Button) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(button, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Button.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, button, ".button", scope);
    }
    Button.run = run;
    function button(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        var children = content.hidden
            ? [dom_1.div({ props: { className: "visible content" } }, content.main),
                dom_1.div({ props: { className: "hidden content" } }, content.hidden)]
            : content.main;
        return props.href
            ? dom_1.a({ props: { href: props.href, className: getClassname(props) } }, children)
            : dom_1.div({ props: { className: getClassname(props) } }, children);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.animated) {
            className += " animated";
        }
        if (props.verticalAnimated) {
            className += " vertical animated";
        }
        if (props.labeled) {
            className += " labeled";
        }
        if (props.rightlabeled) {
            className += " right labeled";
        }
        if (props.icon) {
            className += " icon";
        }
        if (props.basic) {
            className += " basic";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.active) {
            className += " active";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.fluid) {
            className += " fluid";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " button";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            types_1.isDOMContent(obj.content) || (typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.hidden))));
    }
})(Button = exports.Button || (exports.Button = {}));


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var Container;
(function (Container) {
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, container, ".container", scope);
    }
    Container.run = run;
    function render(arg1) {
        return common_1.renderPropsAndContent(container, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1);
    }
    Container.render = render;
    function container(args) {
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: "ui container" } }, content);
    }
})(Container = exports.Container || (exports.Container = {}));


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var Divider;
(function (Divider) {
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, divider, ".divider", scope);
    }
    Divider.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(divider, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Divider.render = render;
    function divider(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassName(props) } }, content);
    }
    function getClassName(props) {
        var className = "ui";
        if (props.vertical) {
            className += " vertical";
        }
        else if (props.horizontal) {
            className += " horizontal";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.fitted) {
            className += " fitted";
        }
        if (props.hidden) {
            className += " hidden";
        }
        if (props.section) {
            className += " section";
        }
        if (props.clearing) {
            className += " clearing";
        }
        if (props.header) {
            className += " header";
        }
        className += " divider";
        return className;
    }
})(Divider = exports.Divider || (exports.Divider = {}));


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Header;
(function (Header) {
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, header, ".header", scope);
    }
    Header.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(header, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Header.render = render;
    function header(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        var children = [].concat(content.main ? content.main : [], content.subtext ? dom_1.div({ props: { className: "sub header" } }, content.subtext) : []);
        return dom_1.div({ props: { className: getClassname(props) } }, content.icon
            ? [].concat(content.icon, dom_1.div({ props: { className: "content" } }, children))
            : children);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.icon) {
            className += " icon";
        }
        if (props.dividing) {
            className += " dividing";
        }
        if (props.divider) {
            className += " divider";
        }
        if (props.block) {
            className += " block";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " header";
        return className;
    }
    function isArgs(obj) {
        return (typeof (obj) !== "undefined") && (typeof (obj.props) !== "undefined" ||
            types_1.isDOMContent(obj.content) || (typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content.main) ||
            types_1.isDOMContent(obj.content.icon) ||
            types_1.isDOMContent(obj.content.subtext))));
    }
})(Header = exports.Header || (exports.Header = {}));


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Image;
(function (Image) {
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, image, ".image", scope);
    }
    Image.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(image, common_1.makeIsArgs(isUrl), isUrl, arg1, arg2);
    }
    Image.render = render;
    function image(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isUrl(args.content) ? args.content : args.content.main : "";
        var image = dom_1.img({ props: { className: getClassname(props), src: content } });
        return props.href ? dom_1.a({ props: { href: props.href } }, image) : image;
    }
    Image.image = image;
    function getClassname(props) {
        var className = "ui";
        if (props.href) {
            className += " link";
        }
        if (props.hidden) {
            className += " hidden";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.avatar) {
            className += " avatar";
        }
        if (props.bordered) {
            className += " bordered";
        }
        if (props.spaced) {
            className += " spaced";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.rounded) {
            className += " rounded";
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        return className + " image";
    }
    function isUrl(obj) {
        return typeof (obj) === "string";
    }
})(Image = exports.Image || (exports.Image = {}));


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(196));
__export(__webpack_require__(197));
__export(__webpack_require__(198));
__export(__webpack_require__(199));
__export(__webpack_require__(24));
__export(__webpack_require__(200));
__export(__webpack_require__(202));
__export(__webpack_require__(203));
__export(__webpack_require__(204));
__export(__webpack_require__(205));
__export(__webpack_require__(206));
__export(__webpack_require__(207));


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var Label;
(function (Label) {
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, label, ".label", scope);
    }
    Label.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(label, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Label.render = render;
    function label(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        var children = [].concat(content.main ? content.main : [], content.detail ? dom_1.div({ props: { className: "detail" } }, content.detail) : []);
        return dom_1.div({ props: { className: getClassname(props) } }, children);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.circular) {
            className += " circular";
        }
        if (props.empty) {
            className += " empty";
        }
        if (props.pointing) {
            className += " pointing";
        }
        if (props.leftPointing) {
            className += " left pointing";
        }
        if (props.rightPointing) {
            className += " right pointing";
        }
        if (props.basic) {
            className += " basic";
        }
        if (props.leftCorner) {
            className += " left corner";
        }
        if (props.rightCorner) {
            className += " right corner";
        }
        if (props.tag) {
            className += " tag";
        }
        if (props.ribbon) {
            className += " ribbon";
        }
        if (props.rightRibbon) {
            className += " right ribbon";
        }
        if (props.horizontal) {
            className += " horizontal";
        }
        if (props.floating) {
            className += " floating";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " label";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content) || (types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.detail))));
    }
})(Label = exports.Label || (exports.Label = {}));


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var List;
(function (List) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(list, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    List.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, list, ".list", scope);
    }
    List.run = run;
    function list(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content.map(function (_a) {
            var header = _a.header, icon = _a.icon, main = _a.main, description = _a.description, href = _a.href, left = _a.left, right = _a.right;
            var l = left ? dom_1.div({ props: { className: "left floated content" } }, left) : [];
            var r = right ? dom_1.div({ props: { className: "right floated content" } }, right) : [];
            var h = header ? dom_1.div({ props: { className: "header" } }, header) : [];
            var d = description ? dom_1.div({ props: { className: "description" } }, description) : [];
            var i = icon ? icon : [];
            var c = (h.length > 0 || d.length > 0)
                ? dom_1.div({ props: { className: "content" } }, [].concat(h, d, main))
                : main;
            var children = [].concat(l, i, c, r);
            return href
                ? dom_1.a({ props: { className: "item", href: href } }, children)
                : dom_1.div({ props: { className: "item" } }, children);
        }));
    }
    List.list = list;
    function getClassname(props) {
        var className = "ui";
        if (props.bulleted) {
            className += " bulleted";
        }
        if (props.ordered) {
            className += " ordered";
        }
        if (props.horizontal) {
            className += " horizontal";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.selection) {
            className += " selection";
        }
        if (props.animated) {
            className += " animated";
        }
        if (props.relaxed) {
            className += " relaxed";
        }
        if (props.divided) {
            className += " divided";
        }
        if (props.celled) {
            className += " celled";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        className += " list";
        return className;
    }
    function isContent(obj) {
        return obj instanceof Array;
    }
})(List = exports.List || (exports.List = {}));


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(1);
var dimmer_1 = __webpack_require__(34);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(8);
var Loader;
(function (Loader) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(loader, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Loader.render = render;
    function run(sources, scope) {
        function main(sources) {
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({ type: LoaderType.Page });
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of(undefined);
            var on$ = sources.args && sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var props$ = sources.props$.remember();
            var vTree$ = xstream_1.default.combine(props$, sources.content$)
                .map(function (_a) {
                var props = _a[0], content = _a[1];
                return loader({ props: props, content: content });
            });
            var target$ = props$.map(function (props) { return props.type === LoaderType.Page ? xstream_1.default.of("page") : sources.args.element$; }).flatten();
            var dimmer = dimmer_1.Dimmer.run({
                DOM: sources.DOM,
                props$: props$.map(function (props) { return ({ inverted: props.inverted }); }),
                content$: vTree$.map(function (v) { return [v]; }),
                args: { on$: on$, target$: target$ }
            });
            var result$ = props$.map(function (props) { return props.type === LoaderType.Inline ? vTree$ : dimmer.DOM; }).flatten();
            return {
                DOM: result$,
                events: function (type) { return sources.DOM.select(".loader").events(type); }
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Loader.run = run;
    function loader(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.active) {
            className += " active";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.indeterminate) {
            className += " indeterminate";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.text) {
            className += " text";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += LoaderType.ToClassname(typeof (props.type) !== "undefined" ? props.type : LoaderType.Page);
        return className;
    }
    var LoaderType;
    (function (LoaderType) {
        LoaderType[LoaderType["Inline"] = 0] = "Inline";
        LoaderType[LoaderType["Page"] = 1] = "Page";
        LoaderType[LoaderType["Content"] = 2] = "Content";
    })(LoaderType = Loader.LoaderType || (Loader.LoaderType = {}));
    (function (LoaderType) {
        function ToEnum(attachmentstring) {
            return typeof (attachmentstring) === "number"
                ? attachmentstring
                : LoaderType[utils_1.capitalize(attachmentstring)];
        }
        LoaderType.ToEnum = ToEnum;
        function ToClassname(type) {
            type = LoaderType.ToEnum(type);
            switch (type) {
                case LoaderType.Inline: return " inline loader";
                case LoaderType.Page: return " loader";
                case LoaderType.Content: return " loader";
            }
        }
        LoaderType.ToClassname = ToClassname;
    })(LoaderType = Loader.LoaderType || (Loader.LoaderType = {}));
})(Loader = exports.Loader || (exports.Loader = {}));


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Segment;
(function (Segment) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(segment, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Segment.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, segment, ".segment", scope);
    }
    Segment.run = run;
    function segment(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.raised) {
            className += " raised";
        }
        if (props.stacked) {
            className += " stacked";
        }
        if (props.tallStacked) {
            className += " tall stacked";
        }
        if (props.piled) {
            className += " piled";
        }
        if (props.vertical) {
            className += " vertical";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.padded) {
            className += " padded";
        }
        if (props.veryPadded) {
            className += " very padded";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.clearing) {
            className += " clearing";
        }
        if (props.basic) {
            className += " basic";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        className += " segment";
        return className;
    }
})(Segment = exports.Segment || (exports.Segment = {}));


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(8);
var common_1 = __webpack_require__(4);
var Steps;
(function (Steps) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(steps, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    Steps.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, steps, ".steps", scope);
    }
    Steps.run = run;
    function steps(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props, content.length) } }, content.map(stepItem));
    }
    function stepItem(item, i) {
        var icon = item.icon ? item.icon : [];
        var header = item.header ? dom_1.div({ props: { className: "title" } }, item.header) : [];
        var description = item.description ? dom_1.div({ props: { className: "description" } }, item.description) : [];
        var content = [].concat(header, description);
        var children = [].concat(icon, content.length > 0 ? [dom_1.div({ props: { className: "content" } }, content)] : []);
        return item.href
            ? dom_1.a({ props: { id: i, className: getStepClassname(item), href: item.href } }, children)
            : dom_1.div({ props: { id: i, className: getStepClassname(item) } }, children);
    }
    function getClassname(props, length) {
        var className = "ui";
        if (props.vertical) {
            className += " vertical";
        }
        if (props.stackable) {
            className += " stackable";
        }
        if (props.fluid) {
            className += " fluid";
        }
        if (props.equalWidth) {
            className += utils_1.numToText(length);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        className += " steps";
        return className;
    }
    function getStepClassname(item) {
        var className = "";
        if (item.active) {
            className += "active";
        }
        if (item.completed) {
            className += " completed";
        }
        if (item.disabled) {
            className += " disabled";
        }
        if (item.link) {
            className += " link";
        }
        className += " step";
        return className;
    }
    function isContent(obj) {
        return obj instanceof Array;
    }
})(Steps = exports.Steps || (exports.Steps = {}));


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var isolate_1 = __webpack_require__(7);
var xstream_1 = __webpack_require__(0);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Textbox;
(function (Textbox) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(textbox, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Textbox.render = render;
    function run(sources, scope) {
        function main(sources) {
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of([]);
            var evt = function (type) { return sources.DOM.select(".input").events(type); };
            var props$ = sources.props$.remember();
            var newValue$ = evt("input").map(function (ev) { return ev.target.value; }).remember();
            var vtree$ = xstream_1.default.combine(props$, sources.content$).map(function (_a) {
                var props = _a[0], content = _a[1];
                return textbox({ props: props, content: content });
            });
            return {
                DOM: vtree$,
                events: evt,
                value$: newValue$
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Textbox.run = run;
    function textbox(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        var textbox = props.rows
            ? dom_1.textarea({ attrs: { rows: props.rows, readonly: props.readonly, value: props.initial, placeholder: props.placeholder } })
            : dom_1.input({ attrs: { readonly: props.readonly, type: props.type ? props.type : "text", value: props.initial, placeholder: props.placeholder } });
        return props.rightContent
            ? dom_1.div({ props: { className: getClassname(props) } }, [].concat(textbox, content))
            : dom_1.div({ props: { className: getClassname(props) } }, [].concat(content, textbox));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.leftContent) {
            className += " left";
        }
        if (props.rightContent) {
            className += " right";
        }
        if (props.icon) {
            className += " icon";
        }
        if (props.labeled) {
            className += " labeled";
        }
        if (props.action) {
            className += " action";
        }
        if (props.transparent) {
            className += " transparent";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.focus) {
            className += " focus";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += " input";
        return className;
    }
})(Textbox = exports.Textbox || (exports.Textbox = {}));


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IconType;
(function (IconType) {
    function ToClassname(type) {
        if (typeof (type) === "string") {
            return " " + type;
        }
        if (type < 0) {
            return "";
        }
        var name = IconType[type];
        return " " + name.match(/[A-Z][a-z]+/g).join(" ").toLowerCase();
    }
    IconType.ToClassname = ToClassname;
})(IconType = exports.IconType || (exports.IconType = {}));
(function (IconType) {
    IconType[IconType["Search"] = 0] = "Search";
    IconType[IconType["MailOutline"] = 1] = "MailOutline";
    IconType[IconType["External"] = 2] = "External";
    IconType[IconType["Signal"] = 3] = "Signal";
    IconType[IconType["Setting"] = 4] = "Setting";
    IconType[IconType["Home"] = 5] = "Home";
    IconType[IconType["Inbox"] = 6] = "Inbox";
    IconType[IconType["Browser"] = 7] = "Browser";
    IconType[IconType["Tag"] = 8] = "Tag";
    IconType[IconType["Tags"] = 9] = "Tags";
    IconType[IconType["Calendar"] = 10] = "Calendar";
    IconType[IconType["Comment"] = 11] = "Comment";
    IconType[IconType["Comments"] = 12] = "Comments";
    IconType[IconType["Shop"] = 13] = "Shop";
    IconType[IconType["Privacy"] = 14] = "Privacy";
    IconType[IconType["Settings"] = 15] = "Settings";
    IconType[IconType["Trophy"] = 16] = "Trophy";
    IconType[IconType["Payment"] = 17] = "Payment";
    IconType[IconType["Feed"] = 18] = "Feed";
    IconType[IconType["AlarmOutline"] = 19] = "AlarmOutline";
    IconType[IconType["Tasks"] = 20] = "Tasks";
    IconType[IconType["Cloud"] = 21] = "Cloud";
    IconType[IconType["Lab"] = 22] = "Lab";
    IconType[IconType["Mail"] = 23] = "Mail";
    IconType[IconType["Idea"] = 24] = "Idea";
    IconType[IconType["Dashboard"] = 25] = "Dashboard";
    IconType[IconType["Sitemap"] = 26] = "Sitemap";
    IconType[IconType["Alarm"] = 27] = "Alarm";
    IconType[IconType["Terminal"] = 28] = "Terminal";
    IconType[IconType["Code"] = 29] = "Code";
    IconType[IconType["Protect"] = 30] = "Protect";
    IconType[IconType["CalendarOutline"] = 31] = "CalendarOutline";
    IconType[IconType["Ticket"] = 32] = "Ticket";
    IconType[IconType["ExternalSquare"] = 33] = "ExternalSquare";
    IconType[IconType["Map"] = 34] = "Map";
    IconType[IconType["Bug"] = 35] = "Bug";
    IconType[IconType["MailSquare"] = 36] = "MailSquare";
    IconType[IconType["History"] = 37] = "History";
    IconType[IconType["Options"] = 38] = "Options";
    IconType[IconType["CommentOutline"] = 39] = "CommentOutline";
    IconType[IconType["CommentsOutline"] = 40] = "CommentsOutline";
    IconType[IconType["TextTelephone"] = 41] = "TextTelephone";
    IconType[IconType["Find"] = 42] = "Find";
    IconType[IconType["Wifi"] = 43] = "Wifi";
    IconType[IconType["AlarmSlash"] = 44] = "AlarmSlash";
    IconType[IconType["AlarmSlashOutline"] = 45] = "AlarmSlashOutline";
    IconType[IconType["Copyright"] = 46] = "Copyright";
    IconType[IconType["At"] = 47] = "At";
    IconType[IconType["Eyedropper"] = 48] = "Eyedropper";
    IconType[IconType["PaintBrush"] = 49] = "PaintBrush";
    IconType[IconType["Heartbeat"] = 50] = "Heartbeat";
    IconType[IconType["Download"] = 51] = "Download";
    IconType[IconType["Repeat"] = 52] = "Repeat";
    IconType[IconType["Refresh"] = 53] = "Refresh";
    IconType[IconType["Lock"] = 54] = "Lock";
    IconType[IconType["Bookmark"] = 55] = "Bookmark";
    IconType[IconType["Print"] = 56] = "Print";
    IconType[IconType["Write"] = 57] = "Write";
    IconType[IconType["Theme"] = 58] = "Theme";
    IconType[IconType["Adjust"] = 59] = "Adjust";
    IconType[IconType["Edit"] = 60] = "Edit";
    IconType[IconType["ExternalShare"] = 61] = "ExternalShare";
    IconType[IconType["Ban"] = 62] = "Ban";
    IconType[IconType["MailForward"] = 63] = "MailForward";
    IconType[IconType["Share"] = 64] = "Share";
    IconType[IconType["Expand"] = 65] = "Expand";
    IconType[IconType["Compress"] = 66] = "Compress";
    IconType[IconType["Unhide"] = 67] = "Unhide";
    IconType[IconType["Hide"] = 68] = "Hide";
    IconType[IconType["Random"] = 69] = "Random";
    IconType[IconType["Retweet"] = 70] = "Retweet";
    IconType[IconType["SignOut"] = 71] = "SignOut";
    IconType[IconType["Pin"] = 72] = "Pin";
    IconType[IconType["SignIn"] = 73] = "SignIn";
    IconType[IconType["Upload"] = 74] = "Upload";
    IconType[IconType["Call"] = 75] = "Call";
    IconType[IconType["CallSquare"] = 76] = "CallSquare";
    IconType[IconType["RemoveBookmark"] = 77] = "RemoveBookmark";
    IconType[IconType["Unlock"] = 78] = "Unlock";
    IconType[IconType["Configure"] = 79] = "Configure";
    IconType[IconType["Filter"] = 80] = "Filter";
    IconType[IconType["Wizard"] = 81] = "Wizard";
    IconType[IconType["Undo"] = 82] = "Undo";
    IconType[IconType["Exchange"] = 83] = "Exchange";
    IconType[IconType["CloudDownload"] = 84] = "CloudDownload";
    IconType[IconType["CloudUpload"] = 85] = "CloudUpload";
    IconType[IconType["Reply"] = 86] = "Reply";
    IconType[IconType["ReplyAll"] = 87] = "ReplyAll";
    IconType[IconType["Erase"] = 88] = "Erase";
    IconType[IconType["UnlockAlternate"] = 89] = "UnlockAlternate";
    IconType[IconType["Archive"] = 90] = "Archive";
    IconType[IconType["Translate"] = 91] = "Translate";
    IconType[IconType["Recycle"] = 92] = "Recycle";
    IconType[IconType["Send"] = 93] = "Send";
    IconType[IconType["SendOutline"] = 94] = "SendOutline";
    IconType[IconType["ShareAlternate"] = 95] = "ShareAlternate";
    IconType[IconType["ShareAlternateSquare"] = 96] = "ShareAlternateSquare";
    IconType[IconType["Wait"] = 97] = "Wait";
    IconType[IconType["WriteSquare"] = 98] = "WriteSquare";
    IconType[IconType["ShareSquare"] = 99] = "ShareSquare";
    IconType[IconType["AddToCart"] = 100] = "AddToCart";
    IconType[IconType["InCart"] = 101] = "InCart";
    IconType[IconType["AddUser"] = 102] = "AddUser";
    IconType[IconType["RemoveUser"] = 103] = "RemoveUser";
    IconType[IconType["HelpCircle"] = 104] = "HelpCircle";
    IconType[IconType["InfoCircle"] = 105] = "InfoCircle";
    IconType[IconType["Warning"] = 106] = "Warning";
    IconType[IconType["WarningCircle"] = 107] = "WarningCircle";
    IconType[IconType["WarningSign"] = 108] = "WarningSign";
    IconType[IconType["Help"] = 109] = "Help";
    IconType[IconType["Info"] = 110] = "Info";
    IconType[IconType["Announcement"] = 111] = "Announcement";
    IconType[IconType["Birthday"] = 112] = "Birthday";
    IconType[IconType["Users"] = 113] = "Users";
    IconType[IconType["Doctor"] = 114] = "Doctor";
    IconType[IconType["Child"] = 115] = "Child";
    IconType[IconType["User"] = 116] = "User";
    IconType[IconType["Handicap"] = 117] = "Handicap";
    IconType[IconType["Student"] = 118] = "Student";
    IconType[IconType["Spy"] = 119] = "Spy";
    IconType[IconType["GridLayout"] = 120] = "GridLayout";
    IconType[IconType["ListLayout"] = 121] = "ListLayout";
    IconType[IconType["BlockLayout"] = 122] = "BlockLayout";
    IconType[IconType["Zoom"] = 123] = "Zoom";
    IconType[IconType["ZoomOut"] = 124] = "ZoomOut";
    IconType[IconType["ResizeVertical"] = 125] = "ResizeVertical";
    IconType[IconType["ResizeHorizontal"] = 126] = "ResizeHorizontal";
    IconType[IconType["Maximize"] = 127] = "Maximize";
    IconType[IconType["Crop"] = 128] = "Crop";
    IconType[IconType["Female"] = 129] = "Female";
    IconType[IconType["Male"] = 130] = "Male";
    IconType[IconType["Woman"] = 131] = "Woman";
    IconType[IconType["Man"] = 132] = "Man";
    IconType[IconType["NonBinaryTransgender"] = 133] = "NonBinaryTransgender";
    IconType[IconType["Intergender"] = 134] = "Intergender";
    IconType[IconType["Transgender"] = 135] = "Transgender";
    IconType[IconType["Lesbian"] = 136] = "Lesbian";
    IconType[IconType["Gay"] = 137] = "Gay";
    IconType[IconType["Heterosexual"] = 138] = "Heterosexual";
    IconType[IconType["OtherGender"] = 139] = "OtherGender";
    IconType[IconType["OtherGenderVertical"] = 140] = "OtherGenderVertical";
    IconType[IconType["OtherGenderHorizontal"] = 141] = "OtherGenderHorizontal";
    IconType[IconType["Neuter"] = 142] = "Neuter";
    IconType[IconType["Cocktail"] = 143] = "Cocktail";
    IconType[IconType["Road"] = 144] = "Road";
    IconType[IconType["Flag"] = 145] = "Flag";
    IconType[IconType["Book"] = 146] = "Book";
    IconType[IconType["Gift"] = 147] = "Gift";
    IconType[IconType["Leaf"] = 148] = "Leaf";
    IconType[IconType["Fire"] = 149] = "Fire";
    IconType[IconType["Plane"] = 150] = "Plane";
    IconType[IconType["Magnet"] = 151] = "Magnet";
    IconType[IconType["Legal"] = 152] = "Legal";
    IconType[IconType["Lemon"] = 153] = "Lemon";
    IconType[IconType["World"] = 154] = "World";
    IconType[IconType["Travel"] = 155] = "Travel";
    IconType[IconType["Shipping"] = 156] = "Shipping";
    IconType[IconType["Money"] = 157] = "Money";
    IconType[IconType["Lightning"] = 158] = "Lightning";
    IconType[IconType["Rain"] = 159] = "Rain";
    IconType[IconType["Treatment"] = 160] = "Treatment";
    IconType[IconType["Suitcase"] = 161] = "Suitcase";
    IconType[IconType["Bar"] = 162] = "Bar";
    IconType[IconType["FlagOutline"] = 163] = "FlagOutline";
    IconType[IconType["FlagCheckered"] = 164] = "FlagCheckered";
    IconType[IconType["Puzzle"] = 165] = "Puzzle";
    IconType[IconType["FireExtinguisher"] = 166] = "FireExtinguisher";
    IconType[IconType["Rocket"] = 167] = "Rocket";
    IconType[IconType["Anchor"] = 168] = "Anchor";
    IconType[IconType["Bullseye"] = 169] = "Bullseye";
    IconType[IconType["Sun"] = 170] = "Sun";
    IconType[IconType["Moon"] = 171] = "Moon";
    IconType[IconType["Fax"] = 172] = "Fax";
    IconType[IconType["LifeRing"] = 173] = "LifeRing";
    IconType[IconType["Bomb"] = 174] = "Bomb";
    IconType[IconType["Soccer"] = 175] = "Soccer";
    IconType[IconType["Calculator"] = 176] = "Calculator";
    IconType[IconType["Diamond"] = 177] = "Diamond";
    IconType[IconType["Crosshairs"] = 178] = "Crosshairs";
    IconType[IconType["Asterisk"] = 179] = "Asterisk";
    IconType[IconType["Certificate"] = 180] = "Certificate";
    IconType[IconType["Circle"] = 181] = "Circle";
    IconType[IconType["QuoteLeft"] = 182] = "QuoteLeft";
    IconType[IconType["QuoteRight"] = 183] = "QuoteRight";
    IconType[IconType["EllipsisHorizontal"] = 184] = "EllipsisHorizontal";
    IconType[IconType["EllipsisVertical"] = 185] = "EllipsisVertical";
    IconType[IconType["Cube"] = 186] = "Cube";
    IconType[IconType["Cubes"] = 187] = "Cubes";
    IconType[IconType["CircleNotched"] = 188] = "CircleNotched";
    IconType[IconType["CircleThin"] = 189] = "CircleThin";
    IconType[IconType["SquareOutline"] = 190] = "SquareOutline";
    IconType[IconType["Square"] = 191] = "Square";
    IconType[IconType["Checkmark"] = 192] = "Checkmark";
    IconType[IconType["Remove"] = 193] = "Remove";
    IconType[IconType["CheckmarkBox"] = 194] = "CheckmarkBox";
    IconType[IconType["Move"] = 195] = "Move";
    IconType[IconType["AddCircle"] = 196] = "AddCircle";
    IconType[IconType["MinusCircle"] = 197] = "MinusCircle";
    IconType[IconType["RemoveCircle"] = 198] = "RemoveCircle";
    IconType[IconType["CheckCircle"] = 199] = "CheckCircle";
    IconType[IconType["RemoveCircleOutline"] = 200] = "RemoveCircleOutline";
    IconType[IconType["CheckCircleOutline"] = 201] = "CheckCircleOutline";
    IconType[IconType["Plus"] = 202] = "Plus";
    IconType[IconType["Minus"] = 203] = "Minus";
    IconType[IconType["AddSquare"] = 204] = "AddSquare";
    IconType[IconType["Radio"] = 205] = "Radio";
    IconType[IconType["SelectedRadio"] = 206] = "SelectedRadio";
    IconType[IconType["MinusSquare"] = 207] = "MinusSquare";
    IconType[IconType["MinusSquareOutline"] = 208] = "MinusSquareOutline";
    IconType[IconType["CheckSquare"] = 209] = "CheckSquare";
    IconType[IconType["PlusSquareOutline"] = 210] = "PlusSquareOutline";
    IconType[IconType["ToggleOff"] = 211] = "ToggleOff";
    IconType[IconType["ToggleOn"] = 212] = "ToggleOn";
    IconType[IconType["Film"] = 213] = "Film";
    IconType[IconType["Sound"] = 214] = "Sound";
    IconType[IconType["Photo"] = 215] = "Photo";
    IconType[IconType["BarChart"] = 216] = "BarChart";
    IconType[IconType["CameraRetro"] = 217] = "CameraRetro";
    IconType[IconType["Newspaper"] = 218] = "Newspaper";
    IconType[IconType["AreaChart"] = 219] = "AreaChart";
    IconType[IconType["PieChart"] = 220] = "PieChart";
    IconType[IconType["LineChart"] = 221] = "LineChart";
    IconType[IconType["ArrowCircleOutlineDown"] = 222] = "ArrowCircleOutlineDown";
    IconType[IconType["ArrowCircleOutlineUp"] = 223] = "ArrowCircleOutlineUp";
    IconType[IconType["ChevronLeft"] = 224] = "ChevronLeft";
    IconType[IconType["ChevronRight"] = 225] = "ChevronRight";
    IconType[IconType["ArrowLeft"] = 226] = "ArrowLeft";
    IconType[IconType["ArrowRight"] = 227] = "ArrowRight";
    IconType[IconType["ArrowUp"] = 228] = "ArrowUp";
    IconType[IconType["ArrowDown"] = 229] = "ArrowDown";
    IconType[IconType["ChevronUp"] = 230] = "ChevronUp";
    IconType[IconType["ChevronDown"] = 231] = "ChevronDown";
    IconType[IconType["PointingRight"] = 232] = "PointingRight";
    IconType[IconType["PointingLeft"] = 233] = "PointingLeft";
    IconType[IconType["PointingUp"] = 234] = "PointingUp";
    IconType[IconType["PointingDown"] = 235] = "PointingDown";
    IconType[IconType["ArrowCircleLeft"] = 236] = "ArrowCircleLeft";
    IconType[IconType["ArrowCircleRight"] = 237] = "ArrowCircleRight";
    IconType[IconType["ArrowCircleUp"] = 238] = "ArrowCircleUp";
    IconType[IconType["ArrowCircleDown"] = 239] = "ArrowCircleDown";
    IconType[IconType["CaretDown"] = 240] = "CaretDown";
    IconType[IconType["CaretUp"] = 241] = "CaretUp";
    IconType[IconType["CaretLeft"] = 242] = "CaretLeft";
    IconType[IconType["CaretRight"] = 243] = "CaretRight";
    IconType[IconType["AngleDoubleLeft"] = 244] = "AngleDoubleLeft";
    IconType[IconType["AngleDoubleRight"] = 245] = "AngleDoubleRight";
    IconType[IconType["AngleDoubleUp"] = 246] = "AngleDoubleUp";
    IconType[IconType["AngleDoubleDown"] = 247] = "AngleDoubleDown";
    IconType[IconType["AngleLeft"] = 248] = "AngleLeft";
    IconType[IconType["AngleRight"] = 249] = "AngleRight";
    IconType[IconType["AngleUp"] = 250] = "AngleUp";
    IconType[IconType["AngleDown"] = 251] = "AngleDown";
    IconType[IconType["ChevronCircleLeft"] = 252] = "ChevronCircleLeft";
    IconType[IconType["ChevronCircleRight"] = 253] = "ChevronCircleRight";
    IconType[IconType["ChevronCircleUp"] = 254] = "ChevronCircleUp";
    IconType[IconType["ChevronCircleDown"] = 255] = "ChevronCircleDown";
    IconType[IconType["ToggleDown"] = 256] = "ToggleDown";
    IconType[IconType["ToggleUp"] = 257] = "ToggleUp";
    IconType[IconType["ToggleRight"] = 258] = "ToggleRight";
    IconType[IconType["LongArrowDown"] = 259] = "LongArrowDown";
    IconType[IconType["LongArrowUp"] = 260] = "LongArrowUp";
    IconType[IconType["LongArrowLeft"] = 261] = "LongArrowLeft";
    IconType[IconType["LongArrowRight"] = 262] = "LongArrowRight";
    IconType[IconType["ArrowCircleOutlineRight"] = 263] = "ArrowCircleOutlineRight";
    IconType[IconType["ArrowCircleOutlineLeft"] = 264] = "ArrowCircleOutlineLeft";
    IconType[IconType["ToggleLeft"] = 265] = "ToggleLeft";
    IconType[IconType["Power"] = 266] = "Power";
    IconType[IconType["Trash"] = 267] = "Trash";
    IconType[IconType["TrashOutline"] = 268] = "TrashOutline";
    IconType[IconType["DiskOutline"] = 269] = "DiskOutline";
    IconType[IconType["Desktop"] = 270] = "Desktop";
    IconType[IconType["Laptop"] = 271] = "Laptop";
    IconType[IconType["Tablet"] = 272] = "Tablet";
    IconType[IconType["Mobile"] = 273] = "Mobile";
    IconType[IconType["Game"] = 274] = "Game";
    IconType[IconType["Keyboard"] = 275] = "Keyboard";
    IconType[IconType["Plug"] = 276] = "Plug";
    IconType[IconType["Folder"] = 277] = "Folder";
    IconType[IconType["FolderOpen"] = 278] = "FolderOpen";
    IconType[IconType["LevelUp"] = 279] = "LevelUp";
    IconType[IconType["LevelDown"] = 280] = "LevelDown";
    IconType[IconType["File"] = 281] = "File";
    IconType[IconType["FileOutline"] = 282] = "FileOutline";
    IconType[IconType["FileText"] = 283] = "FileText";
    IconType[IconType["FileTextOutline"] = 284] = "FileTextOutline";
    IconType[IconType["FolderOutline"] = 285] = "FolderOutline";
    IconType[IconType["FolderOpenOutline"] = 286] = "FolderOpenOutline";
    IconType[IconType["FilePdfOutline"] = 287] = "FilePdfOutline";
    IconType[IconType["FileWordOutline"] = 288] = "FileWordOutline";
    IconType[IconType["FileExcelOutline"] = 289] = "FileExcelOutline";
    IconType[IconType["FilePowerpointOutline"] = 290] = "FilePowerpointOutline";
    IconType[IconType["FileImageOutline"] = 291] = "FileImageOutline";
    IconType[IconType["FileArchiveOutline"] = 292] = "FileArchiveOutline";
    IconType[IconType["FileAudioOutline"] = 293] = "FileAudioOutline";
    IconType[IconType["FileVideoOutline"] = 294] = "FileVideoOutline";
    IconType[IconType["FileCodeOutline"] = 295] = "FileCodeOutline";
    IconType[IconType["Barcode"] = 296] = "Barcode";
    IconType[IconType["Qrcode"] = 297] = "Qrcode";
    IconType[IconType["Fork"] = 298] = "Fork";
    IconType[IconType["Html5"] = 299] = "Html5";
    IconType[IconType["Css3"] = 300] = "Css3";
    IconType[IconType["Rss"] = 301] = "Rss";
    IconType[IconType["RssSquare"] = 302] = "RssSquare";
    IconType[IconType["Openid"] = 303] = "Openid";
    IconType[IconType["Database"] = 304] = "Database";
    IconType[IconType["Server"] = 305] = "Server";
    IconType[IconType["Heart"] = 306] = "Heart";
    IconType[IconType["Star"] = 307] = "Star";
    IconType[IconType["EmptyStar"] = 308] = "EmptyStar";
    IconType[IconType["ThumbsOutlineUp"] = 309] = "ThumbsOutlineUp";
    IconType[IconType["ThumbsOutlineDown"] = 310] = "ThumbsOutlineDown";
    IconType[IconType["StarHalf"] = 311] = "StarHalf";
    IconType[IconType["EmptyHeart"] = 312] = "EmptyHeart";
    IconType[IconType["Smile"] = 313] = "Smile";
    IconType[IconType["Frown"] = 314] = "Frown";
    IconType[IconType["Meh"] = 315] = "Meh";
    IconType[IconType["StarHalfEmpty"] = 316] = "StarHalfEmpty";
    IconType[IconType["ThumbsUp"] = 317] = "ThumbsUp";
    IconType[IconType["ThumbsDown"] = 318] = "ThumbsDown";
    IconType[IconType["Music"] = 319] = "Music";
    IconType[IconType["VideoPlayOutline"] = 320] = "VideoPlayOutline";
    IconType[IconType["VolumeOff"] = 321] = "VolumeOff";
    IconType[IconType["VolumeDown"] = 322] = "VolumeDown";
    IconType[IconType["VolumeUp"] = 323] = "VolumeUp";
    IconType[IconType["Record"] = 324] = "Record";
    IconType[IconType["StepBackward"] = 325] = "StepBackward";
    IconType[IconType["FastBackward"] = 326] = "FastBackward";
    IconType[IconType["Backward"] = 327] = "Backward";
    IconType[IconType["Play"] = 328] = "Play";
    IconType[IconType["Pause"] = 329] = "Pause";
    IconType[IconType["Stop"] = 330] = "Stop";
    IconType[IconType["Forward"] = 331] = "Forward";
    IconType[IconType["FastForward"] = 332] = "FastForward";
    IconType[IconType["StepForward"] = 333] = "StepForward";
    IconType[IconType["Eject"] = 334] = "Eject";
    IconType[IconType["Unmute"] = 335] = "Unmute";
    IconType[IconType["Mute"] = 336] = "Mute";
    IconType[IconType["VideoPlay"] = 337] = "VideoPlay";
    IconType[IconType["ClosedCaptioning"] = 338] = "ClosedCaptioning";
    IconType[IconType["Marker"] = 339] = "Marker";
    IconType[IconType["Coffee"] = 340] = "Coffee";
    IconType[IconType["Food"] = 341] = "Food";
    IconType[IconType["BuildingOutline"] = 342] = "BuildingOutline";
    IconType[IconType["Hospital"] = 343] = "Hospital";
    IconType[IconType["Emergency"] = 344] = "Emergency";
    IconType[IconType["FirstAid"] = 345] = "FirstAid";
    IconType[IconType["Military"] = 346] = "Military";
    IconType[IconType["H"] = 347] = "H";
    IconType[IconType["LocationArrow"] = 348] = "LocationArrow";
    IconType[IconType["SpaceShuttle"] = 349] = "SpaceShuttle";
    IconType[IconType["University"] = 350] = "University";
    IconType[IconType["Building"] = 351] = "Building";
    IconType[IconType["Paw"] = 352] = "Paw";
    IconType[IconType["Spoon"] = 353] = "Spoon";
    IconType[IconType["Car"] = 354] = "Car";
    IconType[IconType["Taxi"] = 355] = "Taxi";
    IconType[IconType["Tree"] = 356] = "Tree";
    IconType[IconType["Bicycle"] = 357] = "Bicycle";
    IconType[IconType["Bus"] = 358] = "Bus";
    IconType[IconType["Ship"] = 359] = "Ship";
    IconType[IconType["Motorcycle"] = 360] = "Motorcycle";
    IconType[IconType["StreetView"] = 361] = "StreetView";
    IconType[IconType["Hotel"] = 362] = "Hotel";
    IconType[IconType["Train"] = 363] = "Train";
    IconType[IconType["Subway"] = 364] = "Subway";
    IconType[IconType["Table"] = 365] = "Table";
    IconType[IconType["Columns"] = 366] = "Columns";
    IconType[IconType["Sort"] = 367] = "Sort";
    IconType[IconType["SortAscending"] = 368] = "SortAscending";
    IconType[IconType["SortDescending"] = 369] = "SortDescending";
    IconType[IconType["SortAlphabetAscending"] = 370] = "SortAlphabetAscending";
    IconType[IconType["SortAlphabetDescending"] = 371] = "SortAlphabetDescending";
    IconType[IconType["SortContentAscending"] = 372] = "SortContentAscending";
    IconType[IconType["SortContentDescending"] = 373] = "SortContentDescending";
    IconType[IconType["SortNumericAscending"] = 374] = "SortNumericAscending";
    IconType[IconType["SortNumericDescending"] = 375] = "SortNumericDescending";
    IconType[IconType["Font"] = 376] = "Font";
    IconType[IconType["Bold"] = 377] = "Bold";
    IconType[IconType["Italic"] = 378] = "Italic";
    IconType[IconType["TextHeight"] = 379] = "TextHeight";
    IconType[IconType["TextWidth"] = 380] = "TextWidth";
    IconType[IconType["AlignLeft"] = 381] = "AlignLeft";
    IconType[IconType["AlignCenter"] = 382] = "AlignCenter";
    IconType[IconType["AlignRight"] = 383] = "AlignRight";
    IconType[IconType["AlignJustify"] = 384] = "AlignJustify";
    IconType[IconType["List"] = 385] = "List";
    IconType[IconType["Outdent"] = 386] = "Outdent";
    IconType[IconType["Indent"] = 387] = "Indent";
    IconType[IconType["Linkify"] = 388] = "Linkify";
    IconType[IconType["Cut"] = 389] = "Cut";
    IconType[IconType["Copy"] = 390] = "Copy";
    IconType[IconType["Attach"] = 391] = "Attach";
    IconType[IconType["Save"] = 392] = "Save";
    IconType[IconType["Content"] = 393] = "Content";
    IconType[IconType["UnorderedList"] = 394] = "UnorderedList";
    IconType[IconType["OrderedList"] = 395] = "OrderedList";
    IconType[IconType["Strikethrough"] = 396] = "Strikethrough";
    IconType[IconType["Underline"] = 397] = "Underline";
    IconType[IconType["Paste"] = 398] = "Paste";
    IconType[IconType["Unlink"] = 399] = "Unlink";
    IconType[IconType["Superscript"] = 400] = "Superscript";
    IconType[IconType["Subscript"] = 401] = "Subscript";
    IconType[IconType["Header"] = 402] = "Header";
    IconType[IconType["Paragraph"] = 403] = "Paragraph";
    IconType[IconType["Euro"] = 404] = "Euro";
    IconType[IconType["Pound"] = 405] = "Pound";
    IconType[IconType["Dollar"] = 406] = "Dollar";
    IconType[IconType["Rupee"] = 407] = "Rupee";
    IconType[IconType["Yen"] = 408] = "Yen";
    IconType[IconType["Ruble"] = 409] = "Ruble";
    IconType[IconType["Won"] = 410] = "Won";
    IconType[IconType["Lira"] = 411] = "Lira";
    IconType[IconType["Shekel"] = 412] = "Shekel";
    IconType[IconType["Paypal"] = 413] = "Paypal";
    IconType[IconType["PaypalCard"] = 414] = "PaypalCard";
    IconType[IconType["GoogleWallet"] = 415] = "GoogleWallet";
    IconType[IconType["Visa"] = 416] = "Visa";
    IconType[IconType["Mastercard"] = 417] = "Mastercard";
    IconType[IconType["Discover"] = 418] = "Discover";
    IconType[IconType["AmericanExpress"] = 419] = "AmericanExpress";
    IconType[IconType["Stripe"] = 420] = "Stripe";
    IconType[IconType["TwitterSquare"] = 421] = "TwitterSquare";
    IconType[IconType["FacebookSquare"] = 422] = "FacebookSquare";
    IconType[IconType["LinkedinSquare"] = 423] = "LinkedinSquare";
    IconType[IconType["GithubSquare"] = 424] = "GithubSquare";
    IconType[IconType["Twitter"] = 425] = "Twitter";
    IconType[IconType["Facebook"] = 426] = "Facebook";
    IconType[IconType["Github"] = 427] = "Github";
    IconType[IconType["Pinterest"] = 428] = "Pinterest";
    IconType[IconType["PinterestSquare"] = 429] = "PinterestSquare";
    IconType[IconType["GooglePlusSquare"] = 430] = "GooglePlusSquare";
    IconType[IconType["GooglePlus"] = 431] = "GooglePlus";
    IconType[IconType["Linkedin"] = 432] = "Linkedin";
    IconType[IconType["GithubAlternate"] = 433] = "GithubAlternate";
    IconType[IconType["Maxcdn"] = 434] = "Maxcdn";
    IconType[IconType["Bitcoin"] = 435] = "Bitcoin";
    IconType[IconType["YoutubeSquare"] = 436] = "YoutubeSquare";
    IconType[IconType["Youtube"] = 437] = "Youtube";
    IconType[IconType["Xing"] = 438] = "Xing";
    IconType[IconType["XingSquare"] = 439] = "XingSquare";
    IconType[IconType["YoutubePlay"] = 440] = "YoutubePlay";
    IconType[IconType["Dropbox"] = 441] = "Dropbox";
    IconType[IconType["StackOverflow"] = 442] = "StackOverflow";
    IconType[IconType["Instagram"] = 443] = "Instagram";
    IconType[IconType["Flickr"] = 444] = "Flickr";
    IconType[IconType["Adn"] = 445] = "Adn";
    IconType[IconType["Bitbucket"] = 446] = "Bitbucket";
    IconType[IconType["BitbucketSquare"] = 447] = "BitbucketSquare";
    IconType[IconType["Tumblr"] = 448] = "Tumblr";
    IconType[IconType["TumblrSquare"] = 449] = "TumblrSquare";
    IconType[IconType["Apple"] = 450] = "Apple";
    IconType[IconType["Windows"] = 451] = "Windows";
    IconType[IconType["Android"] = 452] = "Android";
    IconType[IconType["Linux"] = 453] = "Linux";
    IconType[IconType["Dribbble"] = 454] = "Dribbble";
    IconType[IconType["Skype"] = 455] = "Skype";
    IconType[IconType["Foursquare"] = 456] = "Foursquare";
    IconType[IconType["Trello"] = 457] = "Trello";
    IconType[IconType["Gittip"] = 458] = "Gittip";
    IconType[IconType["Vk"] = 459] = "Vk";
    IconType[IconType["Weibo"] = 460] = "Weibo";
    IconType[IconType["Renren"] = 461] = "Renren";
    IconType[IconType["Pagelines"] = 462] = "Pagelines";
    IconType[IconType["StackExchange"] = 463] = "StackExchange";
    IconType[IconType["Vimeo"] = 464] = "Vimeo";
    IconType[IconType["Slack"] = 465] = "Slack";
    IconType[IconType["Wordpress"] = 466] = "Wordpress";
    IconType[IconType["Yahoo"] = 467] = "Yahoo";
    IconType[IconType["Google"] = 468] = "Google";
    IconType[IconType["Reddit"] = 469] = "Reddit";
    IconType[IconType["RedditSquare"] = 470] = "RedditSquare";
    IconType[IconType["StumbleuponCircle"] = 471] = "StumbleuponCircle";
    IconType[IconType["Stumbleupon"] = 472] = "Stumbleupon";
    IconType[IconType["Delicious"] = 473] = "Delicious";
    IconType[IconType["Digg"] = 474] = "Digg";
    IconType[IconType["PiedPiper"] = 475] = "PiedPiper";
    IconType[IconType["PiedPiperAlternate"] = 476] = "PiedPiperAlternate";
    IconType[IconType["Drupal"] = 477] = "Drupal";
    IconType[IconType["Joomla"] = 478] = "Joomla";
    IconType[IconType["Behance"] = 479] = "Behance";
    IconType[IconType["BehanceSquare"] = 480] = "BehanceSquare";
    IconType[IconType["Steam"] = 481] = "Steam";
    IconType[IconType["SteamSquare"] = 482] = "SteamSquare";
    IconType[IconType["Spotify"] = 483] = "Spotify";
    IconType[IconType["Deviantart"] = 484] = "Deviantart";
    IconType[IconType["Soundcloud"] = 485] = "Soundcloud";
    IconType[IconType["Vine"] = 486] = "Vine";
    IconType[IconType["Codepen"] = 487] = "Codepen";
    IconType[IconType["Jsfiddle"] = 488] = "Jsfiddle";
    IconType[IconType["Rebel"] = 489] = "Rebel";
    IconType[IconType["Empire"] = 490] = "Empire";
    IconType[IconType["GitSquare"] = 491] = "GitSquare";
    IconType[IconType["Git"] = 492] = "Git";
    IconType[IconType["HackerNews"] = 493] = "HackerNews";
    IconType[IconType["TencentWeibo"] = 494] = "TencentWeibo";
    IconType[IconType["Qq"] = 495] = "Qq";
    IconType[IconType["Wechat"] = 496] = "Wechat";
    IconType[IconType["Slideshare"] = 497] = "Slideshare";
    IconType[IconType["Twitch"] = 498] = "Twitch";
    IconType[IconType["Yelp"] = 499] = "Yelp";
    IconType[IconType["Lastfm"] = 500] = "Lastfm";
    IconType[IconType["LastfmSquare"] = 501] = "LastfmSquare";
    IconType[IconType["Ioxhost"] = 502] = "Ioxhost";
    IconType[IconType["Angellist"] = 503] = "Angellist";
    IconType[IconType["Meanpath"] = 504] = "Meanpath";
    IconType[IconType["Buysellads"] = 505] = "Buysellads";
    IconType[IconType["Connectdevelop"] = 506] = "Connectdevelop";
    IconType[IconType["Dashcube"] = 507] = "Dashcube";
    IconType[IconType["Forumbee"] = 508] = "Forumbee";
    IconType[IconType["Leanpub"] = 509] = "Leanpub";
    IconType[IconType["Sellsy"] = 510] = "Sellsy";
    IconType[IconType["Shirtsinbulk"] = 511] = "Shirtsinbulk";
    IconType[IconType["Simplybuilt"] = 512] = "Simplybuilt";
    IconType[IconType["Skyatlas"] = 513] = "Skyatlas";
    IconType[IconType["Whatsapp"] = 514] = "Whatsapp";
    IconType[IconType["Viacoin"] = 515] = "Viacoin";
    IconType[IconType["Medium"] = 516] = "Medium";
    IconType[IconType["Like"] = 517] = "Like";
    IconType[IconType["Favorite"] = 518] = "Favorite";
    IconType[IconType["Video"] = 519] = "Video";
    IconType[IconType["Check"] = 520] = "Check";
    IconType[IconType["Close"] = 521] = "Close";
    IconType[IconType["Cancel"] = 522] = "Cancel";
    IconType[IconType["Delete"] = 523] = "Delete";
    IconType[IconType["X"] = 524] = "X";
    IconType[IconType["UserTimes"] = 525] = "UserTimes";
    IconType[IconType["UserClose"] = 526] = "UserClose";
    IconType[IconType["UserCancel"] = 527] = "UserCancel";
    IconType[IconType["UserDelete"] = 528] = "UserDelete";
    IconType[IconType["UserX"] = 529] = "UserX";
    IconType[IconType["ZoomIn"] = 530] = "ZoomIn";
    IconType[IconType["Magnify"] = 531] = "Magnify";
    IconType[IconType["Shutdown"] = 532] = "Shutdown";
    IconType[IconType["Clock"] = 533] = "Clock";
    IconType[IconType["Time"] = 534] = "Time";
    IconType[IconType["PlayCircleOutline"] = 535] = "PlayCircleOutline";
    IconType[IconType["Headphone"] = 536] = "Headphone";
    IconType[IconType["Camera"] = 537] = "Camera";
    IconType[IconType["VideoCamera"] = 538] = "VideoCamera";
    IconType[IconType["Picture"] = 539] = "Picture";
    IconType[IconType["Pencil"] = 540] = "Pencil";
    IconType[IconType["Compose"] = 541] = "Compose";
    IconType[IconType["Point"] = 542] = "Point";
    IconType[IconType["Tint"] = 543] = "Tint";
    IconType[IconType["Signup"] = 544] = "Signup";
    IconType[IconType["PlusCircle"] = 545] = "PlusCircle";
    IconType[IconType["Dont"] = 546] = "Dont";
    IconType[IconType["Minimize"] = 547] = "Minimize";
    IconType[IconType["Add"] = 548] = "Add";
    IconType[IconType["Eye"] = 549] = "Eye";
    IconType[IconType["Attention"] = 550] = "Attention";
    IconType[IconType["Cart"] = 551] = "Cart";
    IconType[IconType["Shuffle"] = 552] = "Shuffle";
    IconType[IconType["Talk"] = 553] = "Talk";
    IconType[IconType["Chat"] = 554] = "Chat";
    IconType[IconType["ShoppingCart"] = 555] = "ShoppingCart";
    IconType[IconType["BarGraph"] = 556] = "BarGraph";
    IconType[IconType["AreaGraph"] = 557] = "AreaGraph";
    IconType[IconType["PieGraph"] = 558] = "PieGraph";
    IconType[IconType["LineGraph"] = 559] = "LineGraph";
    IconType[IconType["Key"] = 560] = "Key";
    IconType[IconType["Cogs"] = 561] = "Cogs";
    IconType[IconType["Discussions"] = 562] = "Discussions";
    IconType[IconType["LikeOutline"] = 563] = "LikeOutline";
    IconType[IconType["DislikeOutline"] = 564] = "DislikeOutline";
    IconType[IconType["HeartOutline"] = 565] = "HeartOutline";
    IconType[IconType["LogOut"] = 566] = "LogOut";
    IconType[IconType["ThumbTack"] = 567] = "ThumbTack";
    IconType[IconType["Winner"] = 568] = "Winner";
    IconType[IconType["BookmarkOutline"] = 569] = "BookmarkOutline";
    IconType[IconType["Phone"] = 570] = "Phone";
    IconType[IconType["PhoneSquare"] = 571] = "PhoneSquare";
    IconType[IconType["CreditCard"] = 572] = "CreditCard";
    IconType[IconType["HddOutline"] = 573] = "HddOutline";
    IconType[IconType["Bullhorn"] = 574] = "Bullhorn";
    IconType[IconType["Bell"] = 575] = "Bell";
    IconType[IconType["BellOutline"] = 576] = "BellOutline";
    IconType[IconType["BellSlash"] = 577] = "BellSlash";
    IconType[IconType["BellSlashOutline"] = 578] = "BellSlashOutline";
    IconType[IconType["HandOutlineRight"] = 579] = "HandOutlineRight";
    IconType[IconType["HandOutlineLeft"] = 580] = "HandOutlineLeft";
    IconType[IconType["HandOutlineUp"] = 581] = "HandOutlineUp";
    IconType[IconType["HandOutlineDown"] = 582] = "HandOutlineDown";
    IconType[IconType["Globe"] = 583] = "Globe";
    IconType[IconType["Wrench"] = 584] = "Wrench";
    IconType[IconType["Briefcase"] = 585] = "Briefcase";
    IconType[IconType["Group"] = 586] = "Group";
    IconType[IconType["Flask"] = 587] = "Flask";
    IconType[IconType["Sidebar"] = 588] = "Sidebar";
    IconType[IconType["Bars"] = 589] = "Bars";
    IconType[IconType["ListUl"] = 590] = "ListUl";
    IconType[IconType["ListOl"] = 591] = "ListOl";
    IconType[IconType["NumberedList"] = 592] = "NumberedList";
    IconType[IconType["Magic"] = 593] = "Magic";
    IconType[IconType["Truck"] = 594] = "Truck";
    IconType[IconType["Currency"] = 595] = "Currency";
    IconType[IconType["TriangleDown"] = 596] = "TriangleDown";
    IconType[IconType["Dropdown"] = 597] = "Dropdown";
    IconType[IconType["TriangleUp"] = 598] = "TriangleUp";
    IconType[IconType["TriangleLeft"] = 599] = "TriangleLeft";
    IconType[IconType["TriangleRight"] = 600] = "TriangleRight";
    IconType[IconType["Envelope"] = 601] = "Envelope";
    IconType[IconType["Conversation"] = 602] = "Conversation";
    IconType[IconType["Umbrella"] = 603] = "Umbrella";
    IconType[IconType["Clipboard"] = 604] = "Clipboard";
    IconType[IconType["Lightbulb"] = 605] = "Lightbulb";
    IconType[IconType["Ambulance"] = 606] = "Ambulance";
    IconType[IconType["Medkit"] = 607] = "Medkit";
    IconType[IconType["FighterJet"] = 608] = "FighterJet";
    IconType[IconType["Beer"] = 609] = "Beer";
    IconType[IconType["PlusSquare"] = 610] = "PlusSquare";
    IconType[IconType["Computer"] = 611] = "Computer";
    IconType[IconType["CircleOutline"] = 612] = "CircleOutline";
    IconType[IconType["Intersex"] = 613] = "Intersex";
    IconType[IconType["Asexual"] = 614] = "Asexual";
    IconType[IconType["Spinner"] = 615] = "Spinner";
    IconType[IconType["Gamepad"] = 616] = "Gamepad";
    IconType[IconType["StarHalfFull"] = 617] = "StarHalfFull";
    IconType[IconType["Question"] = 618] = "Question";
    IconType[IconType["Eraser"] = 619] = "Eraser";
    IconType[IconType["Microphone"] = 620] = "Microphone";
    IconType[IconType["MicrophoneSlash"] = 621] = "MicrophoneSlash";
    IconType[IconType["Shield"] = 622] = "Shield";
    IconType[IconType["Target"] = 623] = "Target";
    IconType[IconType["PlayCircle"] = 624] = "PlayCircle";
    IconType[IconType["PencilSquare"] = 625] = "PencilSquare";
    IconType[IconType["Compass"] = 626] = "Compass";
    IconType[IconType["Amex"] = 627] = "Amex";
    IconType[IconType["Eur"] = 628] = "Eur";
    IconType[IconType["Gbp"] = 629] = "Gbp";
    IconType[IconType["Usd"] = 630] = "Usd";
    IconType[IconType["Inr"] = 631] = "Inr";
    IconType[IconType["Cny"] = 632] = "Cny";
    IconType[IconType["Rmb"] = 633] = "Rmb";
    IconType[IconType["Jpy"] = 634] = "Jpy";
    IconType[IconType["Rouble"] = 635] = "Rouble";
    IconType[IconType["Rub"] = 636] = "Rub";
    IconType[IconType["Krw"] = 637] = "Krw";
    IconType[IconType["Btc"] = 638] = "Btc";
    IconType[IconType["Sheqel"] = 639] = "Sheqel";
    IconType[IconType["Ils"] = 640] = "Ils";
    IconType[IconType["Try"] = 641] = "Try";
    IconType[IconType["Zip"] = 642] = "Zip";
    IconType[IconType["DotCircleOutline"] = 643] = "DotCircleOutline";
    IconType[IconType["Sliders"] = 644] = "Sliders";
    IconType[IconType["Wi"] = 645] = "Wi";
    IconType[IconType["Graduation"] = 646] = "Graduation";
    IconType[IconType["Weixin"] = 647] = "Weixin";
    IconType[IconType["Binoculars"] = 648] = "Binoculars";
    IconType[IconType["Gratipay"] = 649] = "Gratipay";
    IconType[IconType["Genderless"] = 650] = "Genderless";
    IconType[IconType["Teletype"] = 651] = "Teletype";
    IconType[IconType["PowerCord"] = 652] = "PowerCord";
    IconType[IconType["Tty"] = 653] = "Tty";
    IconType[IconType["Cc"] = 654] = "Cc";
    IconType[IconType["PlusCart"] = 655] = "PlusCart";
    IconType[IconType["ArrowDownCart"] = 656] = "ArrowDownCart";
    IconType[IconType["Detective"] = 657] = "Detective";
    IconType[IconType["Venus"] = 658] = "Venus";
    IconType[IconType["Mars"] = 659] = "Mars";
    IconType[IconType["Mercury"] = 660] = "Mercury";
    IconType[IconType["VenusDouble"] = 661] = "VenusDouble";
    IconType[IconType["FemaleHomosexual"] = 662] = "FemaleHomosexual";
    IconType[IconType["MarsDouble"] = 663] = "MarsDouble";
    IconType[IconType["MaleHomosexual"] = 664] = "MaleHomosexual";
    IconType[IconType["VenusMars"] = 665] = "VenusMars";
    IconType[IconType["MarsStroke"] = 666] = "MarsStroke";
    IconType[IconType["MarsAlternate"] = 667] = "MarsAlternate";
    IconType[IconType["MarsVertical"] = 668] = "MarsVertical";
    IconType[IconType["MarsHorizontal"] = 669] = "MarsHorizontal";
    IconType[IconType["MarsStrokeVertical"] = 670] = "MarsStrokeVertical";
    IconType[IconType["MarsStrokeHorizontal"] = 671] = "MarsStrokeHorizontal";
    IconType[IconType["FacebookOfficial"] = 672] = "FacebookOfficial";
    IconType[IconType["PinterestOfficial"] = 673] = "PinterestOfficial";
    IconType[IconType["Bed"] = 674] = "Bed";
})(IconType = exports.IconType || (exports.IconType = {}));


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var common_1 = __webpack_require__(4);
var Checkbox;
(function (Checkbox) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(checkbox, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Checkbox.render = render;
    function run(sources, scope) {
        function main(sources) {
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of("");
            var evt = function (type) { return sources.DOM.select(".checkbox").events(type); };
            var clicked$ = evt("click");
            var props$ = sources.props$.remember();
            var checked$ = props$.map(function (props) {
                return clicked$.fold(function (acc, evt) { return evt.srcElement.checked; }, props.checked ? true : false);
            }).flatten().remember();
            var vTree$ = xstream_1.default.combine(props$, sources.content$).map(function (_a) {
                var props = _a[0], content = _a[1];
                return checkbox({ props: props, content: content });
            });
            return {
                DOM: vTree$,
                events: evt,
                value$: checked$
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Checkbox.run = run;
    function checkbox(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassName(props) } }, [
            dom_1.input({
                props: {
                    type: props.radio ? "radio" : "checkbox",
                    name: props.name,
                    checked: props.checked,
                    disabled: props.readonly || props.disabled
                }
            }),
            dom_1.label({ props: { for: props.name } }, props.fitted ? "" : content)
        ]);
    }
    function getClassName(props) {
        var className = "ui";
        if (props.readonly) {
            className += " read-only";
        }
        if (props.checked) {
            className += " checked";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.fitted) {
            className += " fitted";
        }
        if (props.radio) {
            className += " radio";
        }
        if (props.toggle) {
            className += " toggle";
        }
        if (props.slider) {
            className += " slider";
        }
        return className + " checkbox";
    }
})(Checkbox = exports.Checkbox || (exports.Checkbox = {}));


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var dropRepeats_1 = __webpack_require__(35);
var debounce_1 = __webpack_require__(57);
var isolate_1 = __webpack_require__(7);
var delay_1 = __webpack_require__(58);
var dom_1 = __webpack_require__(1);
var menu_1 = __webpack_require__(54);
var icon_1 = __webpack_require__(24);
var transition_1 = __webpack_require__(13);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var Dropdown;
(function (Dropdown) {
    function run(sources, scope) {
        function main(sources) {
            /*** Main streams ***/
            var evt = function (type) { return sources.DOM.select(".dropdown").events(type); };
            var content$ = sources.content$ ? sources.content$.map(function (c) { return c instanceof Array ? c : c.main; }) : xstream_1.default.of([]);
            var props$ = sources.props$ ? sources.props$.remember() : xstream_1.default.of({});
            var itemClick$proxy = xstream_1.default.create();
            var itemClick$ = itemClick$proxy.remember();
            var value$proxy = xstream_1.default.create();
            var filter$;
            if (sources.args && sources.args.search) {
                var input$ = sources.DOM.select("input").events("keyup")
                    .map(function (ev) { return ev.target.value; });
                filter$ = xstream_1.default.merge(input$, value$proxy.map(function (v) { return ""; }));
            }
            /*** Compose component ***/
            var transition$ = createTransition$(evt, itemClick$);
            var menu = createMenuComponent(sources, content$, value$proxy, transition$, filter$);
            var initialValue$ = props$.map(function (props) { return props.initial; }).remember();
            value$proxy.imitate(xstream_1.default.merge(initialValue$, menu.value$.map(function (i) { return i.value; })));
            var vTree$ = createView(sources, props$, content$, transition$, menu, filter$);
            return {
                DOM: vTree$,
                events: evt,
                value$: menu.value$.map(function (item) { return item.value; })
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Dropdown.run = run;
    /*** Show dropdown on click, hide on click/mouseleave ***/
    function createTransition$(evt, itemClick$) {
        var dropdownClick$ = evt("click")
            .filter(function (evt) {
            return !evt.srcElement.classList.contains("item") ||
                evt.srcElement.classList.contains("dropdown");
        })
            .mapTo(enums_1.Direction.In);
        var mouseleave$ = xstream_1.default.merge(evt("mouseleave").filter(function (evt) { return evt.srcElement.className.indexOf("icon") === -1; }), evt("mouseenter"))
            .map(function (evt) { return evt.type === "mouseenter" ? enums_1.Direction.In : enums_1.Direction.Out; })
            .compose(debounce_1.default(250))
            .filter(function (dir) { return dir === enums_1.Direction.Out; });
        return xstream_1.default.merge(dropdownClick$, itemClick$.mapTo(enums_1.Direction.Out), mouseleave$)
            .startWith(enums_1.Direction.Out)
            .map(function (dir) { return ({
            animation: enums_1.Animation.Fade,
            direction: dir
        }); })
            .compose(dropRepeats_1.default(function (a, b) { return a.direction === b.direction
            && a.animation === b.animation; }))
            .drop(1)
            .startWith({ animation: enums_1.Animation.None, direction: enums_1.Direction.Out });
    }
    function createMenuComponent(sources, content$, value$proxy, transition$, filter$) {
        /*** Create child menu items ***/
        var menuContent$;
        if (sources.args && sources.args.search) {
            var filteredContent$ = xstream_1.default.combine(content$, filter$).map(function (_a) {
                var content = _a[0], filter = _a[1];
                return content.filter(function (c) { return filterContent(c, filter); });
            }).remember();
            menuContent$ = xstream_1.default.combine(filteredContent$, value$proxy).map(function (_a) {
                var content = _a[0], value = _a[1];
                return content.map(function (item) { return item.value === value ? Object.assign({}, item, { active: true }) : item; });
            }).remember();
        }
        else {
            menuContent$ = xstream_1.default.combine(content$, value$proxy).map(function (_a) {
                var content = _a[0], value = _a[1];
                return content.map(function (item) { return item.value === value ? Object.assign({}, item, { active: true }) : item; });
            });
        }
        var menu = menu_1.Menu.run({ DOM: sources.DOM, props$: xstream_1.default.of({ submenu: true }), content$: menuContent$ });
        var animatedMenu = transition_1.Transition.run({ DOM: sources.DOM, target$: menu.DOM, transition$: transition$ });
        return {
            DOM: animatedMenu.DOM,
            events: menu.events,
            value$: menu.value$
        };
    }
    function createView(sources, props$, content$, transition$, menu, filter$) {
        var active$ = xstream_1.default.merge(transition$.filter(function (x) { return x.direction === enums_1.Direction.In; }).mapTo(true), transition$.filter(function (x) { return x.direction === enums_1.Direction.Out; }).compose(delay_1.default(250)).mapTo(false));
        var activeItem$ = content$.map(function (content) { return content.filter(function (item) { return item.active; })[0]; });
        if (sources.args && sources.args.search) {
            return xstream_1.default.combine(props$, active$, menu.DOM, filter$, activeItem$).map(function (_a) {
                var props = _a[0], isActive = _a[1], menu = _a[2], filter = _a[3], activeItem = _a[4];
                return dom_1.div({ props: { className: getClassName(props, sources.args && sources.args.search, isActive) } }, [].concat(getText(activeItem, props, sources.args && sources.args.static), dom_1.input({ props: { className: "search", value: filter } }), !props.simple ? icon_1.Icon.render(enums_1.IconType.Dropdown) : [], menu));
            });
        }
        else {
            return xstream_1.default.combine(props$, active$, menu.DOM, activeItem$).map(function (_a) {
                var props = _a[0], isActive = _a[1], menu = _a[2], activeItem = _a[3];
                return dom_1.div({ props: { className: getClassName(props, sources.args && sources.args.search, isActive) } }, [].concat(getText(activeItem, props, sources.args && sources.args.static), !props.simple ? icon_1.Icon.render(enums_1.IconType.Dropdown) : [], menu));
            });
        }
    }
    function getClassName(props, search, active) {
        var className = "ui";
        if (props.rightAligned) {
            className += " right";
        }
        if (props.selection) {
            className += " selection";
        }
        if (props.inline) {
            className += " inline";
        }
        if (props.floating) {
            className += " floating";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.scrolling) {
            className += " scrolling";
        }
        if (search) {
            className += " search";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.pointing) {
            className += " pointing";
        }
        if (active || props.active) {
            className += " active";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        return className + " dropdown";
    }
    function getText(item, props, stat) {
        if (typeof (stat) !== "undefined") {
            return dom_1.div({ props: { className: "text" } }, props.default);
        }
        if (item === null || typeof (item) === "undefined") {
            return dom_1.div({ props: { className: "default text" } }, props.default);
        }
        return dom_1.div({ props: { className: "text" } }, item.main);
    }
    function filterContent(item, filter) {
        function f(node) {
            if (typeof (node) === "string") {
                return node === filter;
            }
            if (node.text) {
                return node.text.indexOf(filter) !== -1 || !filter;
            }
            else {
                for (var c in node.children) {
                    if (f(c)) {
                        return true;
                    }
                }
                return false;
            }
        }
        if (typeof (item.main) === "undefined") {
            return true;
        }
        else if (typeof (item.main) === "string") {
            return item.main.indexOf(filter) !== -1 || !filter;
        }
        else if (types_1.isVNode(item.main)) {
            return f(item.main);
        }
        else if (item.main instanceof Array) {
            for (var _i = 0, _a = item.main; _i < _a.length; _i++) {
                var c = _a[_i];
                if (isMenuItem(c)) {
                    return filterContent(c, filter);
                }
                if (f(c)) {
                    return true;
                }
            }
        }
        return false;
    }
    function isMenuItem(obj) {
        return obj && obj.main;
    }
})(Dropdown = exports.Dropdown || (exports.Dropdown = {}));


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(209));
__export(__webpack_require__(34));
__export(__webpack_require__(210));
__export(__webpack_require__(212));
__export(__webpack_require__(213));
__export(__webpack_require__(214));
__export(__webpack_require__(13));
__export(__webpack_require__(215));


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isolate_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(1);
var xstream_1 = __webpack_require__(0);
var enums_1 = __webpack_require__(3);
var dimmer_1 = __webpack_require__(34);
var icon_1 = __webpack_require__(24);
var transition_1 = __webpack_require__(13);
var types_1 = __webpack_require__(5);
var Modal;
(function (Modal) {
    function run(sources, scope) {
        function main(sources) {
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? { main: c } : c; }) : xstream_1.default.of({ main: [] });
            var target$ = sources.args && sources.args.target$ ? sources.args.target$ : xstream_1.default.of("page");
            var show$ = sources.args && sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var closeIcon = icon_1.Icon.run({ DOM: sources.DOM, props$: xstream_1.default.of({ link: true }), content$: xstream_1.default.of(enums_1.IconType.Close) });
            var close$ = closeIcon.events("click").mapTo(false);
            /*** Render modal ***/
            var dimmerclick$proxy = xstream_1.default.create();
            var on$ = xstream_1.default.merge(show$, dimmerclick$proxy, close$).remember();
            var modal$ = xstream_1.default.combine(content$, closeIcon.DOM).map(function (_a) {
                var content = _a[0], icon = _a[1];
                return dom_1.div({ props: { className: "ui scrolling active modal" } }, [].concat(icon, content.header ? dom_1.div({ props: { className: "header" } }, content.header) : [], dom_1.div({ props: { className: "content" } }, content.main), content.actions ? dom_1.div({ props: { className: "actions" } }, content.actions) : []));
            }).remember();
            /*** Animation ***/
            var transition$ = on$
                .fold(function (prevAnim, active) { return prevAnim.direction === enums_1.Direction.None
                ? ({ animation: enums_1.Animation.None, direction: active ? enums_1.Direction.In : enums_1.Direction.Out })
                : {
                    animation: enums_1.Animation.Fade, direction: active ? enums_1.Direction.In : enums_1.Direction.Out
                }; }, ({ animation: enums_1.Animation.None, direction: enums_1.Direction.None }));
            var animatedContent = transition_1.Transition.run({ DOM: sources.DOM, target$: modal$, transition$: transition$ });
            /*** Activate dimmer ***/
            var dimmerContent$ = animatedContent.DOM.map(function (x) { return [x]; });
            var dimmer = dimmer_1.Dimmer.run({
                DOM: sources.DOM,
                props$: props$.map(function (x) { return ({ inverted: x.inverted }); }),
                content$: dimmerContent$,
                args: { target$: target$, on$: on$ }
            }, scope);
            var dimmerclick$ = dimmer.events("mousedown")
                .filter(function (evt) { return evt.srcElement === evt.currentTarget; })
                .mapTo(false);
            dimmerclick$proxy.imitate(dimmerclick$);
            var fadeOutEnd$ = on$.map(function (active) { return !active ? dimmer.events("animationend") : xstream_1.default.never(); }).flatten().mapTo(false);
            // const active$ = xs.merge(sources.on$, fadeOutEnd$).remember();
            return {
                active$: xstream_1.default.merge(show$, fadeOutEnd$),
                DOM: dimmer.DOM,
                events: function (type) { return sources.DOM.select(".modal").events(type); }
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Modal.run = run;
})(Modal = exports.Modal || (exports.Modal = {}));


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(7);
var debounce_1 = __webpack_require__(57);
var dropRepeats_1 = __webpack_require__(35);
var delay_1 = __webpack_require__(58);
var Tether = __webpack_require__(147);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var transition_1 = __webpack_require__(13);
var utils_1 = __webpack_require__(8);
var Popup;
(function (Popup) {
    function run(sources, scope) {
        function main(sources) {
            if (!(sources.args && sources.args.target$)) {
                throw ("Popups must be attached to an element");
            }
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({ attachment: Attachment.BottomLeft });
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? { main: c } : c; }) : xstream_1.default.of({ main: [] });
            var on$ = sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var evt = function (type) { return sources.DOM.select(".popup").events(type); };
            var vTree$ = xstream_1.default.combine(props$, content$, sources.args.target$).map(function (_a) {
                var props = _a[0], content = _a[1], target = _a[2];
                return popup(props, content, target);
            });
            var mouseenter$ = evt("mouseenter");
            var mouseleave$ = xstream_1.default.merge(evt("mouseleave"), mouseenter$)
                .map(function (evt) { return evt.type === "mouseenter" ? enums_1.Direction.In : enums_1.Direction.Out; })
                .compose(debounce_1.default(200))
                .filter(function (dir) { return dir === enums_1.Direction.Out; });
            var active$ = on$.map(function (active) { return active ? enums_1.Direction.In : enums_1.Direction.Out; }).drop(1);
            var timer$ = active$.map(function (dir) { return dir === enums_1.Direction.Out ? xstream_1.default.of(enums_1.Direction.Out)
                : xstream_1.default.of(enums_1.Direction.Out).compose(delay_1.default(1000)).endWhen(mouseenter$); }).flatten();
            var transition$ = xstream_1.default.merge(active$, mouseleave$, timer$)
                .map(function (dir) { return ({
                animation: enums_1.Animation.Fade,
                direction: dir
            }); })
                .compose(dropRepeats_1.default(function (a, b) { return a.direction === b.direction
                && a.animation === b.animation; }))
                .startWith({ animation: enums_1.Animation.None, direction: enums_1.Direction.Out });
            var animatedPopup = transition_1.Transition.run({ DOM: sources.DOM, target$: vTree$, transition$: transition$ });
            return {
                DOM: animatedPopup.DOM,
                events: evt
            };
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Popup.run = run;
    function popup(props, content, target) {
        return dom_1.div({
            props: { className: getClassname(props) }, hook: {
                insert: function (vnode) {
                    new Tether({
                        element: vnode.elm,
                        target: target.hasOwnProperty("elm") ? target["elm"] : target,
                        attachment: Attachment.ToOppositeTether(props.attachment),
                        targetAttachment: Attachment.ToTether(props.attachment)
                    });
                }
            }
        }, [].concat(content.header ? dom_1.div({ props: { className: "header" } }, content.header) : [], content.main));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.wide) {
            className += " wide";
        }
        if (props.veryWide) {
            className += " very wide";
        }
        if (props.flowing) {
            className += " flowing";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += Attachment.ToClassname(props.attachment) + " popup";
        return className;
    }
    var Attachment;
    (function (Attachment) {
        Attachment[Attachment["TopLeft"] = 0] = "TopLeft";
        Attachment[Attachment["TopMiddle"] = 1] = "TopMiddle";
        Attachment[Attachment["TopRight"] = 2] = "TopRight";
        Attachment[Attachment["LeftCenter"] = 3] = "LeftCenter";
        Attachment[Attachment["RightCenter"] = 4] = "RightCenter";
        Attachment[Attachment["BottomLeft"] = 5] = "BottomLeft";
        Attachment[Attachment["BottomMiddle"] = 6] = "BottomMiddle";
        Attachment[Attachment["BottomRight"] = 7] = "BottomRight";
        Attachment[Attachment["Center"] = 8] = "Center";
    })(Attachment = Popup.Attachment || (Popup.Attachment = {}));
    (function (Attachment) {
        function ToEnum(attachmentstring) {
            if (typeof (attachmentstring) === "number") {
                return attachmentstring;
            }
            return Attachment[attachmentstring.split(" ").map(utils_1.capitalize).join("")];
        }
        Attachment.ToEnum = ToEnum;
        function ToClassname(attachment) {
            attachment = Attachment.ToEnum(attachment);
            switch (attachment) {
                case Attachment.TopLeft: return " top left";
                case Attachment.TopMiddle: return " top center";
                case Attachment.TopRight: return " top right";
                case Attachment.LeftCenter: return " left center";
                case Attachment.RightCenter: return " right center";
                case Attachment.BottomLeft: return " bottom left";
                case Attachment.BottomMiddle: return " bottom center";
                case Attachment.BottomRight: return " bottom right";
                case Attachment.Center: return " center";
                default: return " bottom left";
            }
        }
        Attachment.ToClassname = ToClassname;
        function ToTether(attachment) {
            attachment = Attachment.ToEnum(attachment);
            switch (attachment) {
                case Attachment.TopLeft: return "top left";
                case Attachment.TopMiddle: return "top center";
                case Attachment.TopRight: return "top right";
                case Attachment.LeftCenter: return "left middle";
                case Attachment.RightCenter: return "right middle";
                case Attachment.BottomLeft: return "bottom left";
                case Attachment.BottomMiddle: return "bottom center";
                case Attachment.BottomRight: return "bottom right";
                case Attachment.Center: return "center";
                default: return "bottom left";
            }
        }
        Attachment.ToTether = ToTether;
        function ToOppositeTether(attachment) {
            attachment = Attachment.ToEnum(attachment);
            switch (attachment) {
                case Attachment.TopLeft: return "bottom right";
                case Attachment.TopMiddle: return "bottom center";
                case Attachment.TopRight: return "bottom left";
                case Attachment.LeftCenter: return "right middle";
                case Attachment.RightCenter: return "left middle";
                case Attachment.BottomLeft: return "top right";
                case Attachment.BottomMiddle: return "top center";
                case Attachment.BottomRight: return "top left";
                case Attachment.Center: return "center";
                default: return "bottom left";
            }
        }
        Attachment.ToOppositeTether = ToOppositeTether;
    })(Attachment = Popup.Attachment || (Popup.Attachment = {}));
})(Popup = exports.Popup || (exports.Popup = {}));


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Progress;
(function (Progress) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(progress, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Progress.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, progress, ".progress", scope);
    }
    Progress.run = run;
    function progress(args) {
        var props = args.props ? args.props : { progress: 0 };
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, [
            dom_1.div({ props: { className: "bar" }, style: { width: props.progress + "%" } }, [
                dom_1.div({ props: { className: "progress" } }, [props.progress + "%"])
            ]),
            dom_1.div({ props: { className: "label" } }, content)
        ]);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.active) {
            className += " active";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " progress";
        return className;
    }
})(Progress = exports.Progress || (exports.Progress = {}));


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var dropRepeats_1 = __webpack_require__(35);
var dom_1 = __webpack_require__(1);
var index_1 = __webpack_require__(55);
var Tabs;
(function (Tabs) {
    function run(sources) {
        var menuProps$ = sources.menuProps$ ? sources.menuProps$ : xstream_1.default.of({ tabular: true, attachment: index_1.Attachment.Top });
        var segmentProps$ = sources.segmentProps$ ? sources.segmentProps$ : xstream_1.default.of({ attachment: index_1.Attachment.Bottom });
        var menuValue$ = xstream_1.default.create();
        var activeTab$ = menuValue$.startWith(sources.active ? sources.active : sources.labels[0]).compose(dropRepeats_1.default()).remember();
        var menu = index_1.Menu.run({
            DOM: sources.DOM,
            props$: menuProps$,
            content$: activeTab$.map(function (activeTab) {
                return sources.labels.map(function (label) {
                    return ({
                        link: true,
                        active: activeTab === label,
                        main: label
                    });
                });
            })
        });
        menuValue$.imitate(menu.value$.map(function (x) { return x.body; }));
        var tabContent$ = activeTab$.map(function (tab) { return xstream_1.default.merge(xstream_1.default.of([dom_1.div()]), sources.content[sources.labels.indexOf(tab)]); }).flatten();
        var vTree$ = xstream_1.default.combine(menu.DOM, tabContent$, segmentProps$).map(function (_a) {
            var menu = _a[0], tabcontent = _a[1], segmentProps = _a[2];
            return dom_1.div([
                menu,
                index_1.Segment.render(segmentProps, tabcontent)
            ]);
        });
        return {
            DOM: vTree$,
            active$: activeTab$
        };
    }
    Tabs.run = run;
})(Tabs = exports.Tabs || (exports.Tabs = {}));


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isDOMContent(content) {
    if (!content) {
        return false;
    }
    if (typeof (content) === "string") {
        return true;
    }
    if (isVNode(content)) {
        return true;
    }
    if (content instanceof Array) {
        if (content.length === 0) {
            return true;
        }
        else {
            return content[0].sel !== undefined || typeof (content[0]) === "string";
        }
        ;
    }
    return false;
}
exports.isDOMContent = isDOMContent;
function isVNode(obj) {
    return obj && obj.sel !== undefined;
}
exports.isVNode = isVNode;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(218));


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(3);
var common_1 = __webpack_require__(4);
var Statistic;
(function (Statistic) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(statistic, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Statistic.render = render;
    function run(sources, scope) {
        return common_1.runPropsAndContent(sources, statistic, ".statistic", scope);
    }
    Statistic.run = run;
    function statistic(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        return dom_1.div({ props: { className: getClassname(props) } }, [].concat(dom_1.div({ props: { className: props.text ? "text value" : "value" } }, content.main), content.label ? dom_1.div({ props: { className: "label" } }, content.label) : []));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.horizontal) {
            className += " horizontal";
        }
        if (props.text) {
            className += " text";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        className += " statistic";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content) ||
                types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.label)));
    }
})(Statistic = exports.Statistic || (exports.Statistic = {}));


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var valueEqual = function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    if (!Array.isArray(b) || a.length !== b.length) return false;

    return a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
};

exports.default = valueEqual;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(60);
module.exports = __webpack_require__(59);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTBmN2ExMjllMmVlNmI4ZmI4OTgiLCJ3ZWJwYWNrOi8vLy4vfi94c3RyZWFtL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvdWkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudW1zL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3R5cGVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbXBvbmVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvaXNvbGF0ZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2luZGV4LnRzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvdmFsaWQtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdHJhbnNpdGlvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9ydW4vbGliL2FkYXB0LmpzIiwid2VicGFjazovLy8uL34vZXM2LXN5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL2guanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9oaXN0b3J5L34vaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3Rvcnkvfi93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoLmZvcm93bi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvaWNvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9oaXN0b3J5L2xpYi9kcml2ZXJzLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9mdW5jdGlvbi9pcy1hcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L3N0cmluZy9pcy1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtaXRlcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2guZXNjYXBlL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20vdm5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvZGltbWVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL34veHN0cmVhbS9leHRyYS9kcm9wUmVwZWF0cy5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL0hUTUxTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9NYWluRE9NU291cmNlLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvU2NvcGVDaGVja2VyLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvbWF0Y2hlc1NlbGVjdG9yLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9hcnJheS8jL2NsZWFyLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi9pcy1pbXBsZW1lbnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2Yvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtaXRlcmF0b3IvdmFsaWQtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS1zZWxlY3Rvci9saWIvY29tbW9uanMvc2VsZWN0b3JQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS10by1odG1sL2VsZW1lbnRzLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20vaHRtbGRvbWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL2lzLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20vdGh1bmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL21lbnUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi94c3RyZWFtL2V4dHJhL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL34veHN0cmVhbS9leHRyYS9kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9kb2NzLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvYXBwLnRzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvQm9keURPTVNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL0RvY3VtZW50RE9NU291cmNlLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvRWxlbWVudEZpbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL0V2ZW50RGVsZWdhdG9yLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvSXNvbGF0ZU1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL1ZOb2RlV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL2h5cGVyc2NyaXB0LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9pc29sYXRlLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvbWFrZURPTURyaXZlci5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL21ha2VIVE1MRHJpdmVyLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvbW9ja0RPTVNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL21vZHVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvaGlzdG9yeS9saWIvY2FwdHVyZUNsaWNrcy5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9oaXN0b3J5L2xpYi9jcmVhdGVIaXN0b3J5JC5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9oaXN0b3J5L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9oaXN0b3J5L34vaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9oaXN0b3J5L34vaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9oaXN0b3J5L34vaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL3hzdHJlYW0tYWRhcHRlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUveHN0cmVhbS1ydW4vbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL3hzdHJlYW0tcnVuL34vQGN5Y2xlL2Jhc2UvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vYnJvd3Nlci1zcGxpdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2QvYXV0by1iaW5kLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9hcnJheS8jL2UtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L21hdGgvc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvbWF0aC9zaWduL2lzLWltcGxlbWVudGVkLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9tYXRoL3NpZ24vc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvbnVtYmVyL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L251bWJlci90by1wb3MtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L19pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvYXNzaWduL2lzLWltcGxlbWVudGVkLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvYXNzaWduL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9jb3B5LmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9pcy1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2tleXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9rZXlzL2lzLWltcGxlbWVudGVkLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3Qva2V5cy9zaGltLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvbWFwLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9wcmltaXRpdmUtc2V0LmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9pcy1pbXBsZW1lbnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1pdGVyYXRvci9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1pdGVyYXRvci9mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtaXRlcmF0b3IvZ2V0LmpzIiwid2VicGFjazovLy8uL34vZXM2LWl0ZXJhdG9yL2lzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL34vZXM2LWl0ZXJhdG9yL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1tYXAvaXMtaW1wbGVtZW50ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtbWFwL2lzLW5hdGl2ZS1pbXBsZW1lbnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1tYXAvbGliL2l0ZXJhdG9yLWtpbmRzLmpzIiwid2VicGFjazovLy8uL34vZXM2LW1hcC9saWIvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtbWFwL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL34vZXM2LXN5bWJvbC9pcy1pbXBsZW1lbnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1zeW1ib2wvaXMtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL34vZXM2LXN5bWJvbC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1zeW1ib2wvdmFsaWRhdGUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL34vZXZlbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC5rZWJhYmNhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gucmVtb3ZlL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoLnVuaXEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcGFyc2Utc2VsL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tLXNlbGVjdG9yL2xpYi9jb21tb25qcy9jbGFzc05hbWVGcm9tVk5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS10by1odG1sL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvYXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tLXRvLWh0bWwvbW9kdWxlcy9jbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tLXRvLWh0bWwvbW9kdWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tLXRvLWh0bWwvbW9kdWxlcy9wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tLXRvLWh0bWwvbW9kdWxlcy9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL21vZHVsZXMvYXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL21vZHVsZXMvY2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS9tb2R1bGVzL2RhdGFzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS9tb2R1bGVzL3Byb3BzLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20vbW9kdWxlcy9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL3NuYWJiZG9tLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20vdG92bm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3N3aXRjaC1wYXRoL2xpYi9lczIwMTUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zd2l0Y2gtcGF0aC9saWIvZXMyMDE1L3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zeW1ib2wtb2JzZXJ2YWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2xpYi9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3RldGhlci9kaXN0L2pzL3RldGhlci5qcyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9icmVhZGNydW1iLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2Zvcm0vY29udGVudC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL2ZpZWxkc3ZhcmlhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9maWVsZHZhcmlhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9mb3JtdmFyaWF0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2Zvcm0vc3RhdGVzLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2Zvcm0vdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9kZWZpbml0aW9uL2NvbnRlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9kZWZpbml0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi9yZXNwb25zaXZlVmFyaWF0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL2RlZmluaXRpb24vdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9kZWZpbml0aW9uL3ZhcmlhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L2NvbHVtbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9vdmVydmlldy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L2ludHJvZHVjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L3Jlc3BvbnNpdmVHcmlkcy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L3Jvd3MudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9vdmVydmlldy92YXJ5aW5nR3JpZHMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS9jb250ZW50LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lbnUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS9zdGF0ZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS90eXBlcy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZW51L3ZhcmlhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVzc2FnZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL3N0YXRlcy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL3R5cGVzLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lc3NhZ2UvdmFyaWF0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb21wb25lbnRzL2V4YW1wbGUudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvaW5kZXgvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvbGF5b3V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2xheW91dC9zaWRlYmFyL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL3JvdXRlci50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9yb3V0ZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL2JyZWFkY3J1bWIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZmllbGQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZmllbGRzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9mb3JtL2Zvcm0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL2Zvcm0vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL2dyaWQvY29sdW1uLnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9ncmlkL2dyaWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL2dyaWQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL2dyaWQvcm93LnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sbGVjdGlvbnMvbWVzc2FnZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sbGVjdGlvbnMvdGFibGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL2J1dHRvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvY29udGFpbmVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9kaXZpZGVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9oZWFkZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL2ltYWdlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvbGFiZWwvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL2xpc3QvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL2xvYWRlci9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvc2VnbWVudC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvc3RlcHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL3RleHRib3gvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudW1zL2ljb25UeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2NoZWNrYm94L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2Ryb3Bkb3duL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL21vZGFsL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3BvcHVwL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3Byb2dyZXNzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RhYnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3R5cGVzL2RvbWNvbnRlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0aXN0aWMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vfi92YWx1ZS1lcXVhbC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbURBQTJDLGNBQWM7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUNoRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVCxvQ0FBb0MsV0FBVyxFQUFFO0FBQ2pELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxrQkFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix3QkFBd0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELHlCQUF5QixFQUFFO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsT0FBTztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtB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O0FBQ1Q7QUFDQTs7Ozs7Ozs7QUM5REE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNMQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtB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O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxjQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5Qzs7Ozs7OztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixJQUFJO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx3Qzs7Ozs7OztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtCQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkM7Ozs7Ozs7QUM3QkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEU7Ozs7Ozs7QUNwREE7O0FBRUE7QUFDQSwwSDs7Ozs7OztBQ0hBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNYQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNWQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDLDJEQUEyRDtBQUMzRCxDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxHQUFHLGlCQUFpQjtBQUNwQiw4Q0FBOEM7QUFDOUM7O0FBRUE7QUFDQSw2Q0FBNkM7O0FBRTdDO0FBQ0E7QUFDQSw2Q0FBNkM7O0FBRTdDO0FBQ0EsQ0FBQzs7QUFFRDs7Ozs7Ozs7QUN4RUE7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7OztBQ0pBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ1BBOztBQUVBOzs7Ozs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHlCQUF5QixFQUFFO0FBQ3JFO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBOztBQUVBOzs7Ozs7Ozs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQzs7Ozs7OztBQ2xCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0Esc0M7Ozs7Ozs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEI7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUNBQWlDO0FBQ2hEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGlDOzs7Ozs7Ozs7QUM1Q0EscUNBQTZEO0FBQzdELHNDQUFpRTtBQUNqRSxxQ0FBd0M7QUFDeEMsdUNBQXFDO0FBQ3JDLG1DQUEyQztBQUMzQyx1Q0FBeUI7QUFFekIsSUFBaUIsSUFBSSxDQXNOcEI7QUF0TkQsV0FBaUIsSUFBSTtJQThDbkIsZ0JBQXVCLElBQTBDLEVBQUUsSUFBa0I7UUFBbEIsZ0NBQWtCO1FBQ25GLE1BQU0sQ0FBQyw4QkFBcUIsQ0FBQyxJQUFJLEVBQUUsbUJBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFGZSxXQUFNLFNBRXJCO0lBQ0QsYUFBd0MsT0FBb0IsRUFBRSxLQUFjO1FBQzFFLGNBQWMsT0FBb0I7WUFDaEMsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEdBQUcsaUJBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkUsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsaUJBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFN0QsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25FLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQUMsSUFBSSxnQkFBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUF6QixDQUF5QixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDL0UsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFFLElBQUksZUFBUSxDQUFFLEVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQXRDLENBQXNDLENBQUM7aUJBQ3hFLE1BQU0sQ0FBQyxXQUFDLElBQUksUUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO1lBQ3hELElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBSyxJQUFJLGlCQUFVLENBQUMsR0FBRyxDQUFDLFlBQUUsSUFBSSxZQUFLLENBQUMsRUFBRSxDQUFDLEVBQVQsQ0FBUyxDQUFDLEVBQS9CLENBQStCLENBQUMsQ0FBQyxPQUFPLEVBQUU7aUJBQ2hGLE1BQU0sQ0FBQyxjQUFJLElBQUksUUFBQyxJQUFJLENBQUMsUUFBUSxFQUFkLENBQWMsQ0FBQyxDQUFDO1lBRWxDLElBQU0sTUFBTSxHQUFHLGlCQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUNuRCxVQUFDLEVBQWdCO29CQUFmLGFBQUssRUFBRSxlQUFPO2dCQUFNLFdBQUksQ0FBQyxFQUFFLEtBQUssU0FBRSxPQUFPLFdBQUUsQ0FBQztZQUF4QixDQUF3QixDQUMvQyxDQUFDO1lBQ0YsTUFBTSxDQUFDO2dCQUNMLEdBQUcsRUFBRSxNQUFNO2dCQUNYLE1BQU0sRUFBRSxVQUFDLElBQUksSUFBSyxjQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQXhDLENBQXdDO2dCQUMxRCxNQUFNLEVBQUUsWUFBWTthQUNyQixDQUFDO1FBQ0osQ0FBQztRQUNELElBQU0sWUFBWSxHQUFHLGlCQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQXZCZSxRQUFHLE1BdUJsQjtJQUVELGNBQWMsSUFBYztRQUMxQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUM3RixNQUFNLENBQUMsU0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDckcsQ0FBQztJQUVELHNCQUFzQixLQUFxQixFQUFFLE1BQWM7UUFDekQsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLFNBQVMsSUFBSSxZQUFZLENBQUM7UUFDNUIsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLFNBQVMsSUFBSSxRQUFRLENBQUM7UUFDeEIsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLFNBQVMsSUFBSSxRQUFRLENBQUM7UUFDeEIsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ25CLFNBQVMsSUFBSSxXQUFXLENBQUM7UUFDM0IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLFNBQVMsSUFBSSxVQUFVLENBQUM7UUFDMUIsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2YsU0FBUyxJQUFJLE9BQU8sQ0FBQztRQUN2QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckIsU0FBUyxJQUFJLGFBQWEsQ0FBQztRQUM3QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFFBQVEsQ0FBQztRQUN4QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsU0FBUyxJQUFJLFlBQVksQ0FBQztRQUM1QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDZixTQUFTLElBQUksT0FBTyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN2QixTQUFTLElBQUksZUFBZSxDQUFDO1FBQy9CLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNsQixTQUFTLElBQUksVUFBVSxDQUFDO1FBQzFCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNyQixTQUFTLElBQUksYUFBYSxDQUFDO1FBQzdCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNyQixTQUFTLElBQUksaUJBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDM0MsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN6QyxTQUFTLElBQUksYUFBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztZQUM5QyxTQUFTLElBQUksa0JBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDeEMsU0FBUyxJQUFJLFlBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFDRCxTQUFTLElBQUksT0FBTyxDQUFDO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFDRCxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFDRCwwQkFBMEIsSUFBYztRQUN0QyxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDbkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFNBQVMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFNBQVMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFNBQVMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUMxQixTQUFTLElBQUksb0JBQW9CLENBQUM7UUFDcEMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFDNUIsU0FBUyxJQUFJLHNCQUFzQixDQUFDO1FBQ3RDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNkLFNBQVMsSUFBSSxPQUFPLENBQUM7UUFDdkIsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2QsU0FBUyxJQUFJLE9BQU8sQ0FBQztRQUN2QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLFNBQVMsSUFBSSxhQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLFNBQVMsSUFBSSxhQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQ0QsU0FBUyxJQUFJLE9BQU8sQ0FBQztRQUNyQixTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxvQkFBb0IsSUFBYyxFQUFFLEVBQVU7UUFDNUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxDQUFDLFNBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxTQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sQ0FBQyxTQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRyxJQUFJLENBQUMsSUFBYyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzNGLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBYSxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUM7WUFDeEMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNqQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLENBQUMsT0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdGLENBQUM7UUFDRCxNQUFNLENBQUMsU0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxtQkFBbUIsR0FBRztRQUNwQixNQUFNLENBQUMsR0FBRyxZQUFZLEtBQUssSUFBSSxDQUM3QixHQUFHLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxXQUFXO1lBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssV0FBVztZQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLFdBQVcsQ0FDM0MsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLEVBdE5nQixJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUFzTnBCOzs7Ozs7Ozs7Ozs7O0FDOU5ELG1DQUE4QjtBQUM5QixtQ0FBMkI7QUFDM0IsbUNBQTBCO0FBQzFCLG1DQUF3QjtBQUN4QixpQ0FBd0I7QUFDeEIsaUNBQXdCOzs7Ozs7O0FDTHhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG9DOzs7Ozs7O0FDakdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxpQzs7Ozs7O0FDNUZBLHlDOzs7Ozs7Ozs7QUNBQSw0Q0FBeUM7QUFDekMsbUNBQWdEO0FBQ2hELHdDQUFrRTtBQUNsRSx1Q0FBeUI7QUFFekIsd0NBQThCO0FBQzlCLHdDQUE4QjtBQUM5Qix3Q0FBZ0M7QUFDaEMsYUFBYSxPQUFPO0lBQ2xCLElBQU0sSUFBSSxHQUFHLGdCQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUMsTUFBTSxvQkFBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFNLE1BQU0sR0FBRyxlQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxJQUFNLEtBQUssR0FBRztRQUNaLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBTSxJQUFJLGdCQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUF2QixDQUF1QixDQUFDO1FBQ3RELE1BQU0sRUFBRSxpQkFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDN0MsQ0FBQztJQUNGLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsaUJBQUcsQ0FBQyxHQUFHLEVBQUU7SUFDUCxHQUFHLEVBQUUsbUJBQWEsQ0FBQyxNQUFNLENBQUM7SUFDMUIsTUFBTSxFQUFFLHVCQUFhLENBQUMsMkJBQWlCLEVBQUUsQ0FBQztDQUMzQyxDQUFDLENBQUM7Ozs7Ozs7O0FDckJIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxjQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHlDOzs7Ozs7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxjQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDZDOzs7Ozs7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5Qzs7Ozs7OztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLDBCQUEwQjtBQUNyRTtBQUNBO0FBQ0EsMkNBQTJDLHlCQUF5QjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxFQUFFO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxtQkFBbUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMEM7Ozs7Ozs7QUMvSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdCQUFnQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEUsK0VBQStFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFNBQVM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxvRUFBb0U7QUFDcEUsK0VBQStFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EseUM7Ozs7Ozs7QUM5R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHdDOzs7Ozs7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQjtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtB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QTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxFQUFFO0FBQ2IsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7OztBQy8zQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLHNCQUFzQjtBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7OztBQ3hGQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLGFBQWEscUJBQXFCO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDN0NBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaURBQWlELE9BQU87QUFDeEQ7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QixNQUFNO0FBQy9CO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGlDOzs7Ozs7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHNCQUFzQixFQUFFO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Qzs7Ozs7OztBQ2xCQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUN4RUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7Ozs7Ozs7O0FDWEE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ0xBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7Ozs7Ozs7O0FDcERBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLDBDQUEwQztBQUMxQztBQUNBOzs7Ozs7OztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtB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O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxvQkFBb0I7QUFDcEI7QUFDQTs7QUFFQTtBQUNBLG9FQUFvRTs7QUFFcEU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHlDQUF5QztBQUMxRTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtB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QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7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O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7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O3dCQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTt3QkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7d0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTt3QkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7d0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtxQkFDbkIsQ0FBQztpQkFDSCxDQUFDO2dCQUNGLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxFQUFFO29CQUM5QixFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRTt3QkFDbEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7d0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtxQkFDbkIsQ0FBQztvQkFDRixFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRTt3QkFDbEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7d0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTt3QkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7d0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTt3QkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7d0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO3FCQUNuQixDQUFDO2lCQUNILENBQUM7YUFDSCxDQUFDLENBQUM7WUFDSCxJQUFJLEVBQUUsd2lDQWlDRDtTQUNOLENBQUMsQ0FBQztRQUVILElBQUksWUFBWSxHQUFHLG9CQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUN0QyxXQUFXLEVBQUUsSUFBSTtZQUNqQixNQUFNLEVBQUUsa0JBQWtCO1lBQzFCLFdBQVcsRUFBRSxDQUFDLE9BQUMsQ0FBQyxDQUFDLG9EQUFvRCxFQUFFLE9BQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSwrREFBK0QsRUFBQyxFQUFDLEVBQUUsa0JBQWtCLENBQUM7b0JBQzlLLHdGQUF3RixDQUFDLENBQUM7Z0JBQ3hGLE9BQUMsQ0FBQyw0SUFBNEksQ0FBQztnQkFDL0ksT0FBQyxDQUFDLCtHQUErRyxDQUFDO2FBQ25IO1lBQ0QsTUFBTSxFQUFFLGlCQUFFLENBQUMsRUFBRSxDQUFDLFNBQUcsQ0FBQztnQkFDaEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUMsRUFBRSxvQkFBb0IsQ0FBQztnQkFDdkUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQ2IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDLENBQUM7b0JBQzdCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQyxDQUFDO29CQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQztpQkFDN0IsQ0FBQztnQkFDRixFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztvQkFDYixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUMsQ0FBQztpQkFDOUIsQ0FBQztnQkFDRixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBQyxFQUFFLG1CQUFtQixDQUFDO2FBQzFFLENBQUMsQ0FBQztZQUNILElBQUksRUFBRSxxWkFTc0U7U0FDN0UsQ0FBQyxDQUFDO1FBRUgsSUFBSSxXQUFXLEdBQUcsb0JBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFO1lBQ3JDLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE1BQU0sRUFBRSxpQkFBaUI7WUFDekIsV0FBVyxFQUFFO2dCQUNYLE9BQUMsQ0FBQywwRkFBMEYsQ0FBQztnQkFDN0YsT0FBQyxDQUFDLDBJQUEwSSxDQUFDO2dCQUM3SSxPQUFDLENBQUMseUZBQXlGLENBQUM7YUFDN0Y7WUFDRCxNQUFNLEVBQUUsaUJBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLEVBQUU7Z0JBQzlDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQyxDQUFDO2FBQzlCLENBQUMsQ0FBQztZQUNILElBQUksRUFBRSxzRkFFSDtTQUNKLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxpQkFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUFsTmUsZ0JBQUcsTUFrTmxCO0FBQ0gsQ0FBQyxFQXBOZ0IsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFvTjVCOzs7Ozs7Ozs7O0FDek5ELGdDQUFrQztBQUNsQyx1Q0FBcUM7QUFFckMsMENBQThDO0FBRTlDLElBQWlCLGVBQWUsQ0FtSi9CO0FBbkpELFdBQWlCLGVBQWU7SUFDOUIsYUFBb0IsT0FBTztRQUN6QixJQUFJLFdBQVcsR0FBRyxvQkFBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7WUFDckMsV0FBVyxFQUFFLElBQUk7WUFDakIsTUFBTSxFQUFFLFlBQVk7WUFDcEIsV0FBVyxFQUFFLDBIQUEwSDtZQUN2SSxNQUFNLEVBQUUsaUJBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ2hELEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUM5QixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUM5QixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUM5QixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUMvQixDQUFDLENBQUM7WUFDSCxJQUFJLEVBQUUsc1hBU0g7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFJLFdBQVcsR0FBRyxvQkFBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7WUFDckMsV0FBVyxFQUFFLElBQUk7WUFDakIsTUFBTSxFQUFFLFdBQVc7WUFDbkIsV0FBVyxFQUFFLHNGQUFzRjtZQUNuRyxNQUFNLEVBQUUsaUJBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7YUFDbkIsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxFQUFFLDhLQUtIO1NBQ0osQ0FBQyxDQUFDO1FBRUgsSUFBSSxTQUFTLEdBQUcsb0JBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFO1lBQ25DLE1BQU0sRUFBRSxlQUFlO1lBQ3ZCLFdBQVcsRUFBRSxnSEFBZ0g7WUFDN0gsTUFBTSxFQUFFLGlCQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ3ZFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztnQkFDekIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2dCQUMxQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7YUFDMUIsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxFQUFFLDJMQUlIO1NBQ0osQ0FBQyxDQUFDO1FBRUgsSUFBSSxVQUFVLEdBQUcsb0JBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFO1lBQ3BDLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE1BQU0sRUFBRSxVQUFVO1lBQ2xCLFdBQVcsRUFBRSxpRUFBaUU7WUFDOUUsTUFBTSxFQUFFLGlCQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUMzQixFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMxQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtvQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtvQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtvQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7aUJBQ25CLENBQUM7Z0JBQ0YsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDMUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtvQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ2xCLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtpQkFDbkIsQ0FBQztnQkFDRixFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMxQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtvQkFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFN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ckIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckIsU0FBUyxJQUFJLGNBQWMsQ0FBQztRQUM5QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFFBQVEsQ0FBQztRQUN4QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckIsU0FBUyxJQUFJLGFBQWEsQ0FBQztRQUM3QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbEIsU0FBUyxJQUFJLFVBQVUsQ0FBQztRQUMxQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakIsU0FBUyxJQUFJLFNBQVMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFFBQVEsQ0FBQztRQUN4QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsU0FBUyxJQUFJLGFBQWEsQ0FBQztRQUM3QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckIsU0FBUyxJQUFJLGFBQWEsQ0FBQztRQUM3QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakIsU0FBUyxJQUFJLFNBQVMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckIsU0FBUyxJQUFJLGNBQWMsQ0FBQztRQUM5QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9B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Q0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN6QyxTQUFTLElBQUksYUFBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQUNELFNBQVMsSUFBSSxZQUFZLENBQUM7UUFDMUIsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsZ0JBQWdCLEdBQUc7UUFDakIsTUFBTSxDQUFDLE9BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxXQUFXLElBQUksQ0FDcEMsT0FBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXO1lBQ2pDLE9BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssV0FBVyxJQUFJLENBQ3JDLG9CQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztnQkFDekIsb0JBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FDbEUsQ0FDRixDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsRUFwRWdCLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBb0V6Qjs7Ozs7Ozs7QUN6RUQ7O0FBRUE7O0FBRUEsb0dBQW9HLG1CQUFtQixFQUFFLG1CQUFtQiw4SEFBOEg7O0FBRTFRO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBLDZCIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9jeWNsZS1zZW1hbnRpYy11aS9cIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMjApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDUwZjdhMTI5ZTJlZTZiOGZiODk4IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBzeW1ib2xfb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcInN5bWJvbC1vYnNlcnZhYmxlXCIpO1xudmFyIE5PID0ge307XG5leHBvcnRzLk5PID0gTk87XG5mdW5jdGlvbiBub29wKCkgeyB9XG5mdW5jdGlvbiBjcChhKSB7XG4gICAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgICB2YXIgYiA9IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgKytpKVxuICAgICAgICBiW2ldID0gYVtpXTtcbiAgICByZXR1cm4gYjtcbn1cbmZ1bmN0aW9uIGFuZChmMSwgZjIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYW5kRm4odCkge1xuICAgICAgICByZXR1cm4gZjEodCkgJiYgZjIodCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIF90cnkoYywgdCwgdSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjLmYodCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHUuX2UoZSk7XG4gICAgICAgIHJldHVybiBOTztcbiAgICB9XG59XG52YXIgTk9fSUwgPSB7XG4gICAgX246IG5vb3AsXG4gICAgX2U6IG5vb3AsXG4gICAgX2M6IG5vb3AsXG59O1xuZXhwb3J0cy5OT19JTCA9IE5PX0lMO1xuLy8gbXV0YXRlcyB0aGUgaW5wdXRcbmZ1bmN0aW9uIGludGVybmFsaXplUHJvZHVjZXIocHJvZHVjZXIpIHtcbiAgICBwcm9kdWNlci5fc3RhcnQgPSBmdW5jdGlvbiBfc3RhcnQoaWwpIHtcbiAgICAgICAgaWwubmV4dCA9IGlsLl9uO1xuICAgICAgICBpbC5lcnJvciA9IGlsLl9lO1xuICAgICAgICBpbC5jb21wbGV0ZSA9IGlsLl9jO1xuICAgICAgICB0aGlzLnN0YXJ0KGlsKTtcbiAgICB9O1xuICAgIHByb2R1Y2VyLl9zdG9wID0gcHJvZHVjZXIuc3RvcDtcbn1cbnZhciBTdHJlYW1TdWIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0cmVhbVN1Yihfc3RyZWFtLCBfbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fc3RyZWFtID0gX3N0cmVhbTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBfbGlzdGVuZXI7XG4gICAgfVxuICAgIFN0cmVhbVN1Yi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbS5yZW1vdmVMaXN0ZW5lcih0aGlzLl9saXN0ZW5lcik7XG4gICAgfTtcbiAgICByZXR1cm4gU3RyZWFtU3ViO1xufSgpKTtcbnZhciBPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2ZXIoX2xpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyID0gX2xpc3RlbmVyO1xuICAgIH1cbiAgICBPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5fbih2YWx1ZSk7XG4gICAgfTtcbiAgICBPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLl9lKGVycik7XG4gICAgfTtcbiAgICBPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLl9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2ZXI7XG59KCkpO1xudmFyIEZyb21PYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcm9tT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmcm9tT2JzZXJ2YWJsZSc7XG4gICAgICAgIHRoaXMuaW5zID0gb2JzZXJ2YWJsZTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgRnJvbU9ic2VydmFibGUucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc3ViID0gdGhpcy5pbnMuc3Vic2NyaWJlKG5ldyBPYnNlcnZlcihvdXQpKTtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSlcbiAgICAgICAgICAgIHRoaXMuX3N1Yi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRnJvbU9ic2VydmFibGUucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc3ViKVxuICAgICAgICAgICAgdGhpcy5fc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbU9ic2VydmFibGU7XG59KCkpO1xudmFyIE1lcmdlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXJnZShpbnNBcnIpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ21lcmdlJztcbiAgICAgICAgdGhpcy5pbnNBcnIgPSBpbnNBcnI7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuYWMgPSAwO1xuICAgIH1cbiAgICBNZXJnZS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdmFyIHMgPSB0aGlzLmluc0FycjtcbiAgICAgICAgdmFyIEwgPSBzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5hYyA9IEw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKVxuICAgICAgICAgICAgc1tpXS5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgTWVyZ2UucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcyA9IHRoaXMuaW5zQXJyO1xuICAgICAgICB2YXIgTCA9IHMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKylcbiAgICAgICAgICAgIHNbaV0uX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIE1lcmdlLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbih0KTtcbiAgICB9O1xuICAgIE1lcmdlLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBNZXJnZS5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgtLXRoaXMuYWMgPD0gMCkge1xuICAgICAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB1Ll9jKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXJnZTtcbn0oKSk7XG52YXIgQ29tYmluZUxpc3RlbmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21iaW5lTGlzdGVuZXIoaSwgb3V0LCBwKSB7XG4gICAgICAgIHRoaXMuaSA9IGk7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLnAgPSBwO1xuICAgICAgICBwLmlscy5wdXNoKHRoaXMpO1xuICAgIH1cbiAgICBDb21iaW5lTGlzdGVuZXIucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLnAsIG91dCA9IHRoaXMub3V0O1xuICAgICAgICBpZiAob3V0ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHAudXAodCwgdGhpcy5pKSlcbiAgICAgICAgICAgIG91dC5fbihwLnZhbHMpO1xuICAgIH07XG4gICAgQ29tYmluZUxpc3RlbmVyLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIG91dCA9IHRoaXMub3V0O1xuICAgICAgICBpZiAob3V0ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0Ll9lKGVycik7XG4gICAgfTtcbiAgICBDb21iaW5lTGlzdGVuZXIucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcCA9IHRoaXMucDtcbiAgICAgICAgaWYgKHAub3V0ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKC0tcC5OYyA9PT0gMClcbiAgICAgICAgICAgIHAub3V0Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tYmluZUxpc3RlbmVyO1xufSgpKTtcbnZhciBDb21iaW5lID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21iaW5lKGluc0Fycikge1xuICAgICAgICB0aGlzLnR5cGUgPSAnY29tYmluZSc7XG4gICAgICAgIHRoaXMuaW5zQXJyID0gaW5zQXJyO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmlscyA9IFtdO1xuICAgICAgICB0aGlzLk5jID0gdGhpcy5ObiA9IDA7XG4gICAgICAgIHRoaXMudmFscyA9IFtdO1xuICAgIH1cbiAgICBDb21iaW5lLnByb3RvdHlwZS51cCA9IGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgIHZhciB2ID0gdGhpcy52YWxzW2ldO1xuICAgICAgICB2YXIgTm4gPSAhdGhpcy5ObiA/IDAgOiB2ID09PSBOTyA/IC0tdGhpcy5ObiA6IHRoaXMuTm47XG4gICAgICAgIHRoaXMudmFsc1tpXSA9IHQ7XG4gICAgICAgIHJldHVybiBObiA9PT0gMDtcbiAgICB9O1xuICAgIENvbWJpbmUucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHZhciBzID0gdGhpcy5pbnNBcnI7XG4gICAgICAgIHZhciBuID0gdGhpcy5OYyA9IHRoaXMuTm4gPSBzLmxlbmd0aDtcbiAgICAgICAgdmFyIHZhbHMgPSB0aGlzLnZhbHMgPSBuZXcgQXJyYXkobik7XG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgICBvdXQuX24oW10pO1xuICAgICAgICAgICAgb3V0Ll9jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHNbaV0gPSBOTztcbiAgICAgICAgICAgICAgICBzW2ldLl9hZGQobmV3IENvbWJpbmVMaXN0ZW5lcihpLCBvdXQsIHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tYmluZS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5pbnNBcnI7XG4gICAgICAgIHZhciBuID0gcy5sZW5ndGg7XG4gICAgICAgIHZhciBpbHMgPSB0aGlzLmlscztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspXG4gICAgICAgICAgICBzW2ldLl9yZW1vdmUoaWxzW2ldKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5pbHMgPSBbXTtcbiAgICAgICAgdGhpcy52YWxzID0gW107XG4gICAgfTtcbiAgICByZXR1cm4gQ29tYmluZTtcbn0oKSk7XG52YXIgRnJvbUFycmF5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcm9tQXJyYXkoYSkge1xuICAgICAgICB0aGlzLnR5cGUgPSAnZnJvbUFycmF5JztcbiAgICAgICAgdGhpcy5hID0gYTtcbiAgICB9XG4gICAgRnJvbUFycmF5LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5hO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGEubGVuZ3RoOyBpIDwgbjsgaSsrKVxuICAgICAgICAgICAgb3V0Ll9uKGFbaV0pO1xuICAgICAgICBvdXQuX2MoKTtcbiAgICB9O1xuICAgIEZyb21BcnJheS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbUFycmF5O1xufSgpKTtcbnZhciBGcm9tUHJvbWlzZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJvbVByb21pc2UocCkge1xuICAgICAgICB0aGlzLnR5cGUgPSAnZnJvbVByb21pc2UnO1xuICAgICAgICB0aGlzLm9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMucCA9IHA7XG4gICAgfVxuICAgIEZyb21Qcm9taXNlLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHZhciBwcm9kID0gdGhpcztcbiAgICAgICAgdGhpcy5vbiA9IHRydWU7XG4gICAgICAgIHRoaXMucC50aGVuKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBpZiAocHJvZC5vbikge1xuICAgICAgICAgICAgICAgIG91dC5fbih2KTtcbiAgICAgICAgICAgICAgICBvdXQuX2MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIG91dC5fZShlKTtcbiAgICAgICAgfSkudGhlbihub29wLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tUHJvbWlzZS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub24gPSBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBGcm9tUHJvbWlzZTtcbn0oKSk7XG52YXIgUGVyaW9kaWMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBlcmlvZGljKHBlcmlvZCkge1xuICAgICAgICB0aGlzLnR5cGUgPSAncGVyaW9kaWMnO1xuICAgICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZDtcbiAgICAgICAgdGhpcy5pbnRlcnZhbElEID0gLTE7XG4gICAgICAgIHRoaXMuaSA9IDA7XG4gICAgfVxuICAgIFBlcmlvZGljLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgZnVuY3Rpb24gaW50ZXJ2YWxIYW5kbGVyKCkgeyBvdXQuX24oc2VsZi5pKyspOyB9XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxJRCA9IHNldEludGVydmFsKGludGVydmFsSGFuZGxlciwgdGhpcy5wZXJpb2QpO1xuICAgIH07XG4gICAgUGVyaW9kaWMucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pbnRlcnZhbElEICE9PSAtMSlcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElEKTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbElEID0gLTE7XG4gICAgICAgIHRoaXMuaSA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gUGVyaW9kaWM7XG59KCkpO1xudmFyIERlYnVnID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWJ1ZyhpbnMsIGFyZykge1xuICAgICAgICB0aGlzLnR5cGUgPSAnZGVidWcnO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5zID0gbm9vcDtcbiAgICAgICAgdGhpcy5sID0gJyc7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRoaXMubCA9IGFyZztcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRoaXMucyA9IGFyZztcbiAgICB9XG4gICAgRGVidWcucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBEZWJ1Zy5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgfTtcbiAgICBEZWJ1Zy5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzID0gdGhpcy5zLCBsID0gdGhpcy5sO1xuICAgICAgICBpZiAocyAhPT0gbm9vcCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzKHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB1Ll9lKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGwpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhsICsgJzonLCB0KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29uc29sZS5sb2codCk7XG4gICAgICAgIHUuX24odCk7XG4gICAgfTtcbiAgICBEZWJ1Zy5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRGVidWcucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWJ1Zztcbn0oKSk7XG52YXIgRHJvcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRHJvcChtYXgsIGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAnZHJvcCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLm1heCA9IG1heDtcbiAgICAgICAgdGhpcy5kcm9wcGVkID0gMDtcbiAgICB9XG4gICAgRHJvcC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5kcm9wcGVkID0gMDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIERyb3AucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgRHJvcC5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLmRyb3BwZWQrKyA+PSB0aGlzLm1heClcbiAgICAgICAgICAgIHUuX24odCk7XG4gICAgfTtcbiAgICBEcm9wLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBEcm9wLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRHJvcDtcbn0oKSk7XG52YXIgRW5kV2hlbkxpc3RlbmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbmRXaGVuTGlzdGVuZXIob3V0LCBvcCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5vcCA9IG9wO1xuICAgIH1cbiAgICBFbmRXaGVuTGlzdGVuZXIucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9wLmVuZCgpO1xuICAgIH07XG4gICAgRW5kV2hlbkxpc3RlbmVyLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5vdXQuX2UoZXJyKTtcbiAgICB9O1xuICAgIEVuZFdoZW5MaXN0ZW5lci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3AuZW5kKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRW5kV2hlbkxpc3RlbmVyO1xufSgpKTtcbnZhciBFbmRXaGVuID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbmRXaGVuKG8sIGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAnZW5kV2hlbic7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLm8gPSBvO1xuICAgICAgICB0aGlzLm9pbCA9IE5PX0lMO1xuICAgIH1cbiAgICBFbmRXaGVuLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLm8uX2FkZCh0aGlzLm9pbCA9IG5ldyBFbmRXaGVuTGlzdGVuZXIob3V0LCB0aGlzKSk7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBFbmRXaGVuLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vLl9yZW1vdmUodGhpcy5vaWwpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLm9pbCA9IE5PX0lMO1xuICAgIH07XG4gICAgRW5kV2hlbi5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIEVuZFdoZW4ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgRW5kV2hlbi5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRW5kV2hlbi5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW5kKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRW5kV2hlbjtcbn0oKSk7XG52YXIgRmlsdGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaWx0ZXIocGFzc2VzLCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2ZpbHRlcic7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmYgPSBwYXNzZXM7XG4gICAgfVxuICAgIEZpbHRlci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIEZpbHRlci5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgfTtcbiAgICBGaWx0ZXIucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgciA9IF90cnkodGhpcywgdCwgdSk7XG4gICAgICAgIGlmIChyID09PSBOTyB8fCAhcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbih0KTtcbiAgICB9O1xuICAgIEZpbHRlci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRmlsdGVyLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRmlsdGVyO1xufSgpKTtcbnZhciBGbGF0dGVuTGlzdGVuZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZsYXR0ZW5MaXN0ZW5lcihvdXQsIG9wKSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLm9wID0gb3A7XG4gICAgfVxuICAgIEZsYXR0ZW5MaXN0ZW5lci5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLm91dC5fbih0KTtcbiAgICB9O1xuICAgIEZsYXR0ZW5MaXN0ZW5lci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMub3V0Ll9lKGVycik7XG4gICAgfTtcbiAgICBGbGF0dGVuTGlzdGVuZXIucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9wLmlubmVyID0gTk87XG4gICAgICAgIHRoaXMub3AubGVzcygpO1xuICAgIH07XG4gICAgcmV0dXJuIEZsYXR0ZW5MaXN0ZW5lcjtcbn0oKSk7XG52YXIgRmxhdHRlbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmxhdHRlbihpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2ZsYXR0ZW4nO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbm5lciA9IE5PO1xuICAgICAgICB0aGlzLmlsID0gTk9fSUw7XG4gICAgfVxuICAgIEZsYXR0ZW4ucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmlubmVyICE9PSBOTylcbiAgICAgICAgICAgIHRoaXMuaW5uZXIuX3JlbW92ZSh0aGlzLmlsKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbm5lciA9IE5PO1xuICAgICAgICB0aGlzLmlsID0gTk9fSUw7XG4gICAgfTtcbiAgICBGbGF0dGVuLnByb3RvdHlwZS5sZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5vcGVuICYmIHRoaXMuaW5uZXIgPT09IE5PKVxuICAgICAgICAgICAgdS5fYygpO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAocykge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGlubmVyID0gX2EuaW5uZXIsIGlsID0gX2EuaWw7XG4gICAgICAgIGlmIChpbm5lciAhPT0gTk8gJiYgaWwgIT09IE5PX0lMKVxuICAgICAgICAgICAgaW5uZXIuX3JlbW92ZShpbCk7XG4gICAgICAgICh0aGlzLmlubmVyID0gcykuX2FkZCh0aGlzLmlsID0gbmV3IEZsYXR0ZW5MaXN0ZW5lcih1LCB0aGlzKSk7XG4gICAgfTtcbiAgICBGbGF0dGVuLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBGbGF0dGVuLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVzcygpO1xuICAgIH07XG4gICAgcmV0dXJuIEZsYXR0ZW47XG59KCkpO1xudmFyIEZvbGQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZvbGQoZiwgc2VlZCwgaW5zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmb2xkJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuZiA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiBmKF90aGlzLmFjYywgdCk7IH07XG4gICAgICAgIHRoaXMuYWNjID0gdGhpcy5zZWVkID0gc2VlZDtcbiAgICB9XG4gICAgRm9sZC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5hY2MgPSB0aGlzLnNlZWQ7XG4gICAgICAgIG91dC5fbih0aGlzLmFjYyk7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBGb2xkLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5hY2MgPSB0aGlzLnNlZWQ7XG4gICAgfTtcbiAgICBGb2xkLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHIgPSBfdHJ5KHRoaXMsIHQsIHUpO1xuICAgICAgICBpZiAociA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX24odGhpcy5hY2MgPSByKTtcbiAgICB9O1xuICAgIEZvbGQucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIEZvbGQucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBGb2xkO1xufSgpKTtcbnZhciBMYXN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMYXN0KGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAnbGFzdCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmhhcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbCA9IE5PO1xuICAgIH1cbiAgICBMYXN0LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmhhcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgTGFzdC5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMudmFsID0gTk87XG4gICAgfTtcbiAgICBMYXN0LnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHRoaXMuaGFzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52YWwgPSB0O1xuICAgIH07XG4gICAgTGFzdC5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgTGFzdC5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuaGFzKSB7XG4gICAgICAgICAgICB1Ll9uKHRoaXMudmFsKTtcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB1Ll9lKG5ldyBFcnJvcignbGFzdCgpIGZhaWxlZCBiZWNhdXNlIGlucHV0IHN0cmVhbSBjb21wbGV0ZWQnKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTGFzdDtcbn0oKSk7XG52YXIgTWFwRmxhdHRlbkxpc3RlbmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBGbGF0dGVuTGlzdGVuZXIob3V0LCBvcCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5vcCA9IG9wO1xuICAgIH1cbiAgICBNYXBGbGF0dGVuTGlzdGVuZXIucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgdGhpcy5vdXQuX24ocik7XG4gICAgfTtcbiAgICBNYXBGbGF0dGVuTGlzdGVuZXIucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLm91dC5fZShlcnIpO1xuICAgIH07XG4gICAgTWFwRmxhdHRlbkxpc3RlbmVyLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcC5pbm5lciA9IE5PO1xuICAgICAgICB0aGlzLm9wLmxlc3MoKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBGbGF0dGVuTGlzdGVuZXI7XG59KCkpO1xudmFyIE1hcEZsYXR0ZW4gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcEZsYXR0ZW4obWFwT3ApIHtcbiAgICAgICAgdGhpcy50eXBlID0gbWFwT3AudHlwZSArIFwiK2ZsYXR0ZW5cIjtcbiAgICAgICAgdGhpcy5pbnMgPSBtYXBPcC5pbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMubWFwT3AgPSBtYXBPcDtcbiAgICAgICAgdGhpcy5pbm5lciA9IE5PO1xuICAgICAgICB0aGlzLmlsID0gTk9fSUw7XG4gICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG4gICAgfVxuICAgIE1hcEZsYXR0ZW4ucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLm1hcE9wLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgTWFwRmxhdHRlbi5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWFwT3AuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmlubmVyICE9PSBOTylcbiAgICAgICAgICAgIHRoaXMuaW5uZXIuX3JlbW92ZSh0aGlzLmlsKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5pbm5lciA9IE5PO1xuICAgICAgICB0aGlzLmlsID0gTk9fSUw7XG4gICAgfTtcbiAgICBNYXBGbGF0dGVuLnByb3RvdHlwZS5sZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMub3BlbiAmJiB0aGlzLmlubmVyID09PSBOTykge1xuICAgICAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB1Ll9jKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1hcEZsYXR0ZW4ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBpbm5lciA9IF9hLmlubmVyLCBpbCA9IF9hLmlsO1xuICAgICAgICB2YXIgcyA9IF90cnkodGhpcy5tYXBPcCwgdiwgdSk7XG4gICAgICAgIGlmIChzID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGlubmVyICE9PSBOTyAmJiBpbCAhPT0gTk9fSUwpXG4gICAgICAgICAgICBpbm5lci5fcmVtb3ZlKGlsKTtcbiAgICAgICAgKHRoaXMuaW5uZXIgPSBzKS5fYWRkKHRoaXMuaWwgPSBuZXcgTWFwRmxhdHRlbkxpc3RlbmVyKHUsIHRoaXMpKTtcbiAgICB9O1xuICAgIE1hcEZsYXR0ZW4ucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIE1hcEZsYXR0ZW4ucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZXNzKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwRmxhdHRlbjtcbn0oKSk7XG52YXIgTWFwT3AgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcE9wKHByb2plY3QsIGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAnbWFwJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuZiA9IHByb2plY3Q7XG4gICAgfVxuICAgIE1hcE9wLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgTWFwT3AucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgTWFwT3AucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgciA9IF90cnkodGhpcywgdCwgdSk7XG4gICAgICAgIGlmIChyID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbihyKTtcbiAgICB9O1xuICAgIE1hcE9wLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBNYXBPcC5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcE9wO1xufSgpKTtcbnZhciBGaWx0ZXJNYXBGdXNpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGaWx0ZXJNYXBGdXNpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRmlsdGVyTWFwRnVzaW9uKHBhc3NlcywgcHJvamVjdCwgaW5zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb2plY3QsIGlucykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9ICdmaWx0ZXIrbWFwJztcbiAgICAgICAgX3RoaXMucGFzc2VzID0gcGFzc2VzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZpbHRlck1hcEZ1c2lvbi5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICBpZiAoIXRoaXMucGFzc2VzKHQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciByID0gX3RyeSh0aGlzLCB0LCB1KTtcbiAgICAgICAgaWYgKHIgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9uKHIpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlck1hcEZ1c2lvbjtcbn0oTWFwT3ApKTtcbnZhciBSZW1lbWJlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVtZW1iZXIoaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyZW1lbWJlcic7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH1cbiAgICBSZW1lbWJlci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZChvdXQpO1xuICAgIH07XG4gICAgUmVtZW1iZXIucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMub3V0KTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIHJldHVybiBSZW1lbWJlcjtcbn0oKSk7XG52YXIgUmVwbGFjZUVycm9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXBsYWNlRXJyb3IocmVwbGFjZXIsIGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAncmVwbGFjZUVycm9yJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuZiA9IHJlcGxhY2VyO1xuICAgIH1cbiAgICBSZXBsYWNlRXJyb3IucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBSZXBsYWNlRXJyb3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgUmVwbGFjZUVycm9yLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbih0KTtcbiAgICB9O1xuICAgIFJlcGxhY2VFcnJvci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAodGhpcy5pbnMgPSB0aGlzLmYoZXJyKSkuX2FkZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdS5fZShlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVwbGFjZUVycm9yLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwbGFjZUVycm9yO1xufSgpKTtcbnZhciBTdGFydFdpdGggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0YXJ0V2l0aChpbnMsIHZhbCkge1xuICAgICAgICB0aGlzLnR5cGUgPSAnc3RhcnRXaXRoJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMudmFsID0gdmFsO1xuICAgIH1cbiAgICBTdGFydFdpdGgucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMub3V0Ll9uKHRoaXMudmFsKTtcbiAgICAgICAgdGhpcy5pbnMuX2FkZChvdXQpO1xuICAgIH07XG4gICAgU3RhcnRXaXRoLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzLm91dCk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgfTtcbiAgICByZXR1cm4gU3RhcnRXaXRoO1xufSgpKTtcbnZhciBUYWtlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlKG1heCwgaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICd0YWtlJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgICAgICB0aGlzLnRha2VuID0gMDtcbiAgICB9XG4gICAgVGFrZS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy50YWtlbiA9IDA7XG4gICAgICAgIGlmICh0aGlzLm1heCA8PSAwKVxuICAgICAgICAgICAgb3V0Ll9jKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBUYWtlLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIFRha2UucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgbSA9ICsrdGhpcy50YWtlbjtcbiAgICAgICAgaWYgKG0gPCB0aGlzLm1heClcbiAgICAgICAgICAgIHUuX24odCk7XG4gICAgICAgIGVsc2UgaWYgKG0gPT09IHRoaXMubWF4KSB7XG4gICAgICAgICAgICB1Ll9uKHQpO1xuICAgICAgICAgICAgdS5fYygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUYWtlLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBUYWtlLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZTtcbn0oKSk7XG52YXIgU3RyZWFtID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdHJlYW0ocHJvZHVjZXIpIHtcbiAgICAgICAgdGhpcy5fcHJvZCA9IHByb2R1Y2VyIHx8IE5PO1xuICAgICAgICB0aGlzLl9pbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fc3RvcElEID0gTk87XG4gICAgICAgIHRoaXMuX2RsID0gTk87XG4gICAgICAgIHRoaXMuX2QgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gTk87XG4gICAgICAgIHRoaXMuX2VyciA9IE5PO1xuICAgIH1cbiAgICBTdHJlYW0ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGEgPSB0aGlzLl9pbHM7XG4gICAgICAgIHZhciBMID0gYS5sZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLl9kKVxuICAgICAgICAgICAgdGhpcy5fZGwuX24odCk7XG4gICAgICAgIGlmIChMID09IDEpXG4gICAgICAgICAgICBhWzBdLl9uKHQpO1xuICAgICAgICBlbHNlIGlmIChMID09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGIgPSBjcChhKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKVxuICAgICAgICAgICAgICAgIGJbaV0uX24odCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLl9lcnIgIT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9lcnIgPSBlcnI7XG4gICAgICAgIHZhciBhID0gdGhpcy5faWxzO1xuICAgICAgICB2YXIgTCA9IGEubGVuZ3RoO1xuICAgICAgICB0aGlzLl94KCk7XG4gICAgICAgIGlmICh0aGlzLl9kKVxuICAgICAgICAgICAgdGhpcy5fZGwuX2UoZXJyKTtcbiAgICAgICAgaWYgKEwgPT0gMSlcbiAgICAgICAgICAgIGFbMF0uX2UoZXJyKTtcbiAgICAgICAgZWxzZSBpZiAoTCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBiID0gY3AoYSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKylcbiAgICAgICAgICAgICAgICBiW2ldLl9lKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9kICYmIEwgPT0gMClcbiAgICAgICAgICAgIHRocm93IHRoaXMuX2VycjtcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5faWxzO1xuICAgICAgICB2YXIgTCA9IGEubGVuZ3RoO1xuICAgICAgICB0aGlzLl94KCk7XG4gICAgICAgIGlmICh0aGlzLl9kKVxuICAgICAgICAgICAgdGhpcy5fZGwuX2MoKTtcbiAgICAgICAgaWYgKEwgPT0gMSlcbiAgICAgICAgICAgIGFbMF0uX2MoKTtcbiAgICAgICAgZWxzZSBpZiAoTCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBiID0gY3AoYSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKylcbiAgICAgICAgICAgICAgICBiW2ldLl9jKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuX3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5fcHJvZCAhPT0gTk8pXG4gICAgICAgICAgICB0aGlzLl9wcm9kLl9zdG9wKCk7XG4gICAgICAgIHRoaXMuX2VyciA9IE5PO1xuICAgICAgICB0aGlzLl9pbHMgPSBbXTtcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuX3N0b3BOb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFdBUk5JTkc6IGNvZGUgdGhhdCBjYWxscyB0aGlzIG1ldGhvZCBzaG91bGRcbiAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgdGhpcy5fcHJvZCBpcyB2YWxpZCAobm90IGBOT2ApXG4gICAgICAgIHRoaXMuX3Byb2QuX3N0b3AoKTtcbiAgICAgICAgdGhpcy5fZXJyID0gTk87XG4gICAgICAgIHRoaXMuX3N0b3BJRCA9IE5PO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fYWRkID0gZnVuY3Rpb24gKGlsKSB7XG4gICAgICAgIHZhciB0YSA9IHRoaXMuX3RhcmdldDtcbiAgICAgICAgaWYgKHRhICE9PSBOTylcbiAgICAgICAgICAgIHJldHVybiB0YS5fYWRkKGlsKTtcbiAgICAgICAgdmFyIGEgPSB0aGlzLl9pbHM7XG4gICAgICAgIGEucHVzaChpbCk7XG4gICAgICAgIGlmIChhLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9zdG9wSUQgIT09IE5PKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fc3RvcElEKTtcbiAgICAgICAgICAgIHRoaXMuX3N0b3BJRCA9IE5PO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLl9wcm9kO1xuICAgICAgICAgICAgaWYgKHAgIT09IE5PKVxuICAgICAgICAgICAgICAgIHAuX3N0YXJ0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl9yZW1vdmUgPSBmdW5jdGlvbiAoaWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHRhID0gdGhpcy5fdGFyZ2V0O1xuICAgICAgICBpZiAodGEgIT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuIHRhLl9yZW1vdmUoaWwpO1xuICAgICAgICB2YXIgYSA9IHRoaXMuX2lscztcbiAgICAgICAgdmFyIGkgPSBhLmluZGV4T2YoaWwpO1xuICAgICAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgICAgICBhLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcm9kICE9PSBOTyAmJiBhLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyID0gTk87XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RvcElEID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fc3RvcE5vdygpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJ1bmVDeWNsZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gSWYgYWxsIHBhdGhzIHN0ZW1taW5nIGZyb20gYHRoaXNgIHN0cmVhbSBldmVudHVhbGx5IGVuZCBhdCBgdGhpc2BcbiAgICAvLyBzdHJlYW0sIHRoZW4gd2UgcmVtb3ZlIHRoZSBzaW5nbGUgbGlzdGVuZXIgb2YgYHRoaXNgIHN0cmVhbSwgdG9cbiAgICAvLyBmb3JjZSBpdCB0byBlbmQgaXRzIGV4ZWN1dGlvbiBhbmQgZGlzcG9zZSByZXNvdXJjZXMuIFRoaXMgbWV0aG9kXG4gICAgLy8gYXNzdW1lcyBhcyBhIHByZWNvbmRpdGlvbiB0aGF0IHRoaXMuX2lscyBoYXMganVzdCBvbmUgbGlzdGVuZXIuXG4gICAgU3RyZWFtLnByb3RvdHlwZS5fcHJ1bmVDeWNsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNOb1NpbmtzKHRoaXMsIFtdKSlcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZSh0aGlzLl9pbHNbMF0pO1xuICAgIH07XG4gICAgLy8gQ2hlY2tzIHdoZXRoZXIgKnRoZXJlIGlzIG5vKiBwYXRoIHN0YXJ0aW5nIGZyb20gYHhgIHRoYXQgbGVhZHMgdG8gYW4gZW5kXG4gICAgLy8gbGlzdGVuZXIgKHNpbmspIGluIHRoZSBzdHJlYW0gZ3JhcGgsIGZvbGxvd2luZyBlZGdlcyBBLT5CIHdoZXJlIEIgaXMgYVxuICAgIC8vIGxpc3RlbmVyIG9mIEEuIFRoaXMgbWVhbnMgdGhlc2UgcGF0aHMgY29uc3RpdHV0ZSBhIGN5Y2xlIHNvbWVob3cuIElzIGdpdmVuXG4gICAgLy8gYSB0cmFjZSBvZiBhbGwgdmlzaXRlZCBub2RlcyBzbyBmYXIuXG4gICAgU3RyZWFtLnByb3RvdHlwZS5faGFzTm9TaW5rcyA9IGZ1bmN0aW9uICh4LCB0cmFjZSkge1xuICAgICAgICBpZiAodHJhY2UuaW5kZXhPZih4KSAhPT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoeC5vdXQgPT09IHRoaXMpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoeC5vdXQgJiYgeC5vdXQgIT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc05vU2lua3MoeC5vdXQsIHRyYWNlLmNvbmNhdCh4KSk7XG4gICAgICAgIGVsc2UgaWYgKHguX2lscykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIE4gPSB4Ll9pbHMubGVuZ3RoOyBpIDwgTjsgaSsrKVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faGFzTm9TaW5rcyh4Ll9pbHNbaV0sIHRyYWNlLmNvbmNhdCh4KSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuY3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBNZW1vcnlTdHJlYW0gPyBNZW1vcnlTdHJlYW0gOiBTdHJlYW07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgTGlzdGVuZXIgdG8gdGhlIFN0cmVhbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TGlzdGVuZXJ9IGxpc3RlbmVyXG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lci5fbiA9IGxpc3RlbmVyLm5leHQgfHwgbm9vcDtcbiAgICAgICAgbGlzdGVuZXIuX2UgPSBsaXN0ZW5lci5lcnJvciB8fCBub29wO1xuICAgICAgICBsaXN0ZW5lci5fYyA9IGxpc3RlbmVyLmNvbXBsZXRlIHx8IG5vb3A7XG4gICAgICAgIHRoaXMuX2FkZChsaXN0ZW5lcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgTGlzdGVuZXIgZnJvbSB0aGUgU3RyZWFtLCBhc3N1bWluZyB0aGUgTGlzdGVuZXIgd2FzIGFkZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtMaXN0ZW5lcjxUPn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZShsaXN0ZW5lcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgTGlzdGVuZXIgdG8gdGhlIFN0cmVhbSByZXR1cm5pbmcgYSBTdWJzY3JpcHRpb24gdG8gcmVtb3ZlIHRoYXRcbiAgICAgKiBsaXN0ZW5lci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TGlzdGVuZXJ9IGxpc3RlbmVyXG4gICAgICogQHJldHVybnMge1N1YnNjcmlwdGlvbn1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmFkZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW1TdWIodGhpcywgbGlzdGVuZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGludGVyb3AgYmV0d2VlbiBtb3N0LmpzIGFuZCBSeEpTIDVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZVtzeW1ib2xfb2JzZXJ2YWJsZV8xLmRlZmF1bHRdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU3RyZWFtIGdpdmVuIGEgUHJvZHVjZXIuXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtQcm9kdWNlcn0gcHJvZHVjZXIgQW4gb3B0aW9uYWwgUHJvZHVjZXIgdGhhdCBkaWN0YXRlcyBob3cgdG9cbiAgICAgKiBzdGFydCwgZ2VuZXJhdGUgZXZlbnRzLCBhbmQgc3RvcCB0aGUgU3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uY3JlYXRlID0gZnVuY3Rpb24gKHByb2R1Y2VyKSB7XG4gICAgICAgIGlmIChwcm9kdWNlcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9kdWNlci5zdGFydCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgIHx8IHR5cGVvZiBwcm9kdWNlci5zdG9wICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvZHVjZXIgcmVxdWlyZXMgYm90aCBzdGFydCBhbmQgc3RvcCBmdW5jdGlvbnMnKTtcbiAgICAgICAgICAgIGludGVybmFsaXplUHJvZHVjZXIocHJvZHVjZXIpOyAvLyBtdXRhdGVzIHRoZSBpbnB1dFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKHByb2R1Y2VyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgTWVtb3J5U3RyZWFtIGdpdmVuIGEgUHJvZHVjZXIuXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtQcm9kdWNlcn0gcHJvZHVjZXIgQW4gb3B0aW9uYWwgUHJvZHVjZXIgdGhhdCBkaWN0YXRlcyBob3cgdG9cbiAgICAgKiBzdGFydCwgZ2VuZXJhdGUgZXZlbnRzLCBhbmQgc3RvcCB0aGUgU3RyZWFtLlxuICAgICAqIEByZXR1cm4ge01lbW9yeVN0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uY3JlYXRlV2l0aE1lbW9yeSA9IGZ1bmN0aW9uIChwcm9kdWNlcikge1xuICAgICAgICBpZiAocHJvZHVjZXIpXG4gICAgICAgICAgICBpbnRlcm5hbGl6ZVByb2R1Y2VyKHByb2R1Y2VyKTsgLy8gbXV0YXRlcyB0aGUgaW5wdXRcbiAgICAgICAgcmV0dXJuIG5ldyBNZW1vcnlTdHJlYW0ocHJvZHVjZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFN0cmVhbSB0aGF0IGRvZXMgbm90aGluZyB3aGVuIHN0YXJ0ZWQuIEl0IG5ldmVyIGVtaXRzIGFueSBldmVudC5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqICAgICAgICAgIG5ldmVyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLm5ldmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbSh7IF9zdGFydDogbm9vcCwgX3N0b3A6IG5vb3AgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU3RyZWFtIHRoYXQgaW1tZWRpYXRlbHkgZW1pdHMgdGhlIFwiY29tcGxldGVcIiBub3RpZmljYXRpb24gd2hlblxuICAgICAqIHN0YXJ0ZWQsIGFuZCB0aGF0J3MgaXQuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiBlbXB0eVxuICAgICAqIC18XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oe1xuICAgICAgICAgICAgX3N0YXJ0OiBmdW5jdGlvbiAoaWwpIHsgaWwuX2MoKTsgfSxcbiAgICAgICAgICAgIF9zdG9wOiBub29wLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdHJlYW0gdGhhdCBpbW1lZGlhdGVseSBlbWl0cyBhbiBcImVycm9yXCIgbm90aWZpY2F0aW9uIHdpdGggdGhlXG4gICAgICogdmFsdWUgeW91IHBhc3NlZCBhcyB0aGUgYGVycm9yYCBhcmd1bWVudCB3aGVuIHRoZSBzdHJlYW0gc3RhcnRzLCBhbmQgdGhhdCdzXG4gICAgICogaXQuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiB0aHJvdyhYKVxuICAgICAqIC1YXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIGVycm9yIFRoZSBlcnJvciBldmVudCB0byBlbWl0IG9uIHRoZSBjcmVhdGVkIHN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnRocm93ID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKHtcbiAgICAgICAgICAgIF9zdGFydDogZnVuY3Rpb24gKGlsKSB7IGlsLl9lKGVycm9yKTsgfSxcbiAgICAgICAgICAgIF9zdG9wOiBub29wLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdHJlYW0gZnJvbSBhbiBBcnJheSwgUHJvbWlzZSwgb3IgYW4gT2JzZXJ2YWJsZS5cbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fFByb21pc2V8T2JzZXJ2YWJsZX0gaW5wdXQgVGhlIGlucHV0IHRvIG1ha2UgYSBzdHJlYW0gZnJvbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLmZyb20gPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dFtzeW1ib2xfb2JzZXJ2YWJsZV8xLmRlZmF1bHRdID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dC50aGVuID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKVxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tQXJyYXkoaW5wdXQpO1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVHlwZSBvZiBpbnB1dCB0byBmcm9tKCkgbXVzdCBiZSBhbiBBcnJheSwgUHJvbWlzZSwgb3IgT2JzZXJ2YWJsZVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdHJlYW0gdGhhdCBpbW1lZGlhdGVseSBlbWl0cyB0aGUgYXJndW1lbnRzIHRoYXQgeW91IGdpdmUgdG9cbiAgICAgKiAqb2YqLCB0aGVuIGNvbXBsZXRlcy5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIG9mKDEsMiwzKVxuICAgICAqIDEyM3xcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0gYSBUaGUgZmlyc3QgdmFsdWUgeW91IHdhbnQgdG8gZW1pdCBhcyBhbiBldmVudCBvbiB0aGUgc3RyZWFtLlxuICAgICAqIEBwYXJhbSBiIFRoZSBzZWNvbmQgdmFsdWUgeW91IHdhbnQgdG8gZW1pdCBhcyBhbiBldmVudCBvbiB0aGUgc3RyZWFtLiBPbmVcbiAgICAgKiBvciBtb3JlIG9mIHRoZXNlIHZhbHVlcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ub2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaXRlbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyZWFtLmZyb21BcnJheShpdGVtcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbiBhcnJheSB0byBhIHN0cmVhbS4gVGhlIHJldHVybmVkIHN0cmVhbSB3aWxsIGVtaXQgc3luY2hyb25vdXNseVxuICAgICAqIGFsbCB0aGUgaXRlbXMgaW4gdGhlIGFycmF5LCBhbmQgdGhlbiBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIGZyb21BcnJheShbMSwyLDNdKVxuICAgICAqIDEyM3xcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gYmUgY29udmVydGVkIGFzIGEgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGcm9tQXJyYXkoYXJyYXkpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgcHJvbWlzZSB0byBhIHN0cmVhbS4gVGhlIHJldHVybmVkIHN0cmVhbSB3aWxsIGVtaXQgdGhlIHJlc29sdmVkXG4gICAgICogdmFsdWUgb2YgdGhlIHByb21pc2UsIGFuZCB0aGVuIGNvbXBsZXRlLiBIb3dldmVyLCBpZiB0aGUgcHJvbWlzZSBpc1xuICAgICAqIHJlamVjdGVkLCB0aGUgc3RyZWFtIHdpbGwgZW1pdCB0aGUgY29ycmVzcG9uZGluZyBlcnJvci5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIGZyb21Qcm9taXNlKCAtLS0tNDIgKVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tNDJ8XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtQcm9taXNlfSBwcm9taXNlIFRoZSBwcm9taXNlIHRvIGJlIGNvbnZlcnRlZCBhcyBhIHN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLmZyb21Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IEZyb21Qcm9taXNlKHByb21pc2UpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFuIE9ic2VydmFibGUgaW50byBhIFN0cmVhbS5cbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0ge2FueX0gb2JzZXJ2YWJsZSBUaGUgb2JzZXJ2YWJsZSB0byBiZSBjb252ZXJ0ZWQgYXMgYSBzdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5mcm9tT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYnMpIHtcbiAgICAgICAgaWYgKG9icy5lbmRXaGVuKVxuICAgICAgICAgICAgcmV0dXJuIG9icztcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IEZyb21PYnNlcnZhYmxlKG9icykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0cmVhbSB0aGF0IHBlcmlvZGljYWxseSBlbWl0cyBpbmNyZW1lbnRhbCBudW1iZXJzLCBldmVyeVxuICAgICAqIGBwZXJpb2RgIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqICAgICBwZXJpb2RpYygxMDAwKVxuICAgICAqIC0tLTAtLS0xLS0tMi0tLTMtLS00LS0tLi4uXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlcmlvZCBUaGUgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzIHRvIHVzZSBhcyBhIHJhdGUgb2ZcbiAgICAgKiBlbWlzc2lvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnBlcmlvZGljID0gZnVuY3Rpb24gKHBlcmlvZCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgUGVyaW9kaWMocGVyaW9kKSk7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl9tYXAgPSBmdW5jdGlvbiAocHJvamVjdCkge1xuICAgICAgICB2YXIgcCA9IHRoaXMuX3Byb2Q7XG4gICAgICAgIHZhciBjdG9yID0gdGhpcy5jdG9yKCk7XG4gICAgICAgIGlmIChwIGluc3RhbmNlb2YgRmlsdGVyKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKG5ldyBGaWx0ZXJNYXBGdXNpb24ocC5mLCBwcm9qZWN0LCBwLmlucykpO1xuICAgICAgICByZXR1cm4gbmV3IGN0b3IobmV3IE1hcE9wKHByb2plY3QsIHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgZWFjaCBldmVudCBmcm9tIHRoZSBpbnB1dCBTdHJlYW0gdGhyb3VnaCBhIGBwcm9qZWN0YCBmdW5jdGlvbixcbiAgICAgKiB0byBnZXQgYSBTdHJlYW0gdGhhdCBlbWl0cyB0aG9zZSB0cmFuc2Zvcm1lZCBldmVudHMuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLTEtLS0zLS01LS0tLS03LS0tLS0tXG4gICAgICogICAgbWFwKGkgPT4gaSAqIDEwKVxuICAgICAqIC0tMTAtLTMwLTUwLS0tLTcwLS0tLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb2plY3QgQSBmdW5jdGlvbiBvZiB0eXBlIGAodDogVCkgPT4gVWAgdGhhdCB0YWtlcyBldmVudFxuICAgICAqIGB0YCBvZiB0eXBlIGBUYCBmcm9tIHRoZSBpbnB1dCBTdHJlYW0gYW5kIHByb2R1Y2VzIGFuIGV2ZW50IG9mIHR5cGUgYFVgLCB0b1xuICAgICAqIGJlIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBTdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKHByb2plY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChwcm9qZWN0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEl0J3MgbGlrZSBgbWFwYCwgYnV0IHRyYW5zZm9ybXMgZWFjaCBpbnB1dCBldmVudCB0byBhbHdheXMgdGhlIHNhbWVcbiAgICAgKiBjb25zdGFudCB2YWx1ZSBvbiB0aGUgb3V0cHV0IFN0cmVhbS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tMS0tLTMtLTUtLS0tLTctLS0tLVxuICAgICAqICAgICAgIG1hcFRvKDEwKVxuICAgICAqIC0tMTAtLTEwLTEwLS0tLTEwLS0tLVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHByb2plY3RlZFZhbHVlIEEgdmFsdWUgdG8gZW1pdCBvbiB0aGUgb3V0cHV0IFN0cmVhbSB3aGVuZXZlciB0aGVcbiAgICAgKiBpbnB1dCBTdHJlYW0gZW1pdHMgYW55IHZhbHVlLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLm1hcFRvID0gZnVuY3Rpb24gKHByb2plY3RlZFZhbHVlKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvamVjdGVkVmFsdWU7IH0pO1xuICAgICAgICB2YXIgb3AgPSBzLl9wcm9kO1xuICAgICAgICBvcC50eXBlID0gb3AudHlwZS5yZXBsYWNlKCdtYXAnLCAnbWFwVG8nKTtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPbmx5IGFsbG93cyBldmVudHMgdGhhdCBwYXNzIHRoZSB0ZXN0IGdpdmVuIGJ5IHRoZSBgcGFzc2VzYCBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIEVhY2ggZXZlbnQgZnJvbSB0aGUgaW5wdXQgc3RyZWFtIGlzIGdpdmVuIHRvIHRoZSBgcGFzc2VzYCBmdW5jdGlvbi4gSWYgdGhlXG4gICAgICogZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAsIHRoZSBldmVudCBpcyBmb3J3YXJkZWQgdG8gdGhlIG91dHB1dCBzdHJlYW0sXG4gICAgICogb3RoZXJ3aXNlIGl0IGlzIGlnbm9yZWQgYW5kIG5vdCBmb3J3YXJkZWQuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLTEtLS0yLS0zLS0tLS00LS0tLS01LS0tNi0tNy04LS1cbiAgICAgKiAgICAgZmlsdGVyKGkgPT4gaSAlIDIgPT09IDApXG4gICAgICogLS0tLS0tMi0tLS0tLS0tNC0tLS0tLS0tLTYtLS0tOC0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXNzZXMgQSBmdW5jdGlvbiBvZiB0eXBlIGAodDogVCkgKz4gYm9vbGVhbmAgdGhhdCB0YWtlc1xuICAgICAqIGFuIGV2ZW50IGZyb20gdGhlIGlucHV0IHN0cmVhbSBhbmQgY2hlY2tzIGlmIGl0IHBhc3NlcywgYnkgcmV0dXJuaW5nIGFcbiAgICAgKiBib29sZWFuLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChwYXNzZXMpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLl9wcm9kO1xuICAgICAgICBpZiAocCBpbnN0YW5jZW9mIEZpbHRlcilcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGaWx0ZXIoYW5kKHAuZiwgcGFzc2VzKSwgcC5pbnMpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IEZpbHRlcihwYXNzZXMsIHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExldHMgdGhlIGZpcnN0IGBhbW91bnRgIG1hbnkgZXZlbnRzIGZyb20gdGhlIGlucHV0IHN0cmVhbSBwYXNzIHRvIHRoZVxuICAgICAqIG91dHB1dCBzdHJlYW0sIHRoZW4gbWFrZXMgdGhlIG91dHB1dCBzdHJlYW0gY29tcGxldGUuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLWEtLS1iLS1jLS0tLWQtLS1lLS1cbiAgICAgKiAgICB0YWtlKDMpXG4gICAgICogLS1hLS0tYi0tY3xcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSG93IG1hbnkgZXZlbnRzIHRvIGFsbG93IGZyb20gdGhlIGlucHV0IHN0cmVhbVxuICAgICAqIGJlZm9yZSBjb21wbGV0aW5nIHRoZSBvdXRwdXQgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnRha2UgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgKHRoaXMuY3RvcigpKShuZXcgVGFrZShhbW91bnQsIHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIElnbm9yZXMgdGhlIGZpcnN0IGBhbW91bnRgIG1hbnkgZXZlbnRzIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgYW5kIHRoZW5cbiAgICAgKiBhZnRlciB0aGF0IHN0YXJ0cyBmb3J3YXJkaW5nIGV2ZW50cyBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gdG8gdGhlIG91dHB1dFxuICAgICAqIHN0cmVhbS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tYS0tLWItLWMtLS0tZC0tLWUtLVxuICAgICAqICAgICAgIGRyb3AoMylcbiAgICAgKiAtLS0tLS0tLS0tLS0tLWQtLS1lLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSG93IG1hbnkgZXZlbnRzIHRvIGlnbm9yZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW1cbiAgICAgKiBiZWZvcmUgZm9yd2FyZGluZyBhbGwgZXZlbnRzIGZyb20gdGhlIGlucHV0IHN0cmVhbSB0byB0aGUgb3V0cHV0IHN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5kcm9wID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgRHJvcChhbW91bnQsIHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGlucHV0IHN0cmVhbSBjb21wbGV0ZXMsIHRoZSBvdXRwdXQgc3RyZWFtIHdpbGwgZW1pdCB0aGUgbGFzdCBldmVudFxuICAgICAqIGVtaXR0ZWQgYnkgdGhlIGlucHV0IHN0cmVhbSwgYW5kIHRoZW4gd2lsbCBhbHNvIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS1hLS0tYi0tYy0tZC0tLS18XG4gICAgICogICAgICAgbGFzdCgpXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS1kfFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IExhc3QodGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUHJlcGVuZHMgdGhlIGdpdmVuIGBpbml0aWFsYCB2YWx1ZSB0byB0aGUgc2VxdWVuY2Ugb2YgZXZlbnRzIGVtaXR0ZWQgYnkgdGhlXG4gICAgICogaW5wdXQgc3RyZWFtLiBUaGUgcmV0dXJuZWQgc3RyZWFtIGlzIGEgTWVtb3J5U3RyZWFtLCB3aGljaCBtZWFucyBpdCBpc1xuICAgICAqIGFscmVhZHkgYHJlbWVtYmVyKClgJ2QuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLS0xLS0tMi0tLS0tMy0tLVxuICAgICAqICAgc3RhcnRXaXRoKDApXG4gICAgICogMC0tMS0tLTItLS0tLTMtLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbml0aWFsIFRoZSB2YWx1ZSBvciBldmVudCB0byBwcmVwZW5kLlxuICAgICAqIEByZXR1cm4ge01lbW9yeVN0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnN0YXJ0V2l0aCA9IGZ1bmN0aW9uIChpbml0aWFsKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWVtb3J5U3RyZWFtKG5ldyBTdGFydFdpdGgodGhpcywgaW5pdGlhbCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXNlcyBhbm90aGVyIHN0cmVhbSB0byBkZXRlcm1pbmUgd2hlbiB0byBjb21wbGV0ZSB0aGUgY3VycmVudCBzdHJlYW0uXG4gICAgICpcbiAgICAgKiBXaGVuIHRoZSBnaXZlbiBgb3RoZXJgIHN0cmVhbSBlbWl0cyBhbiBldmVudCBvciBjb21wbGV0ZXMsIHRoZSBvdXRwdXRcbiAgICAgKiBzdHJlYW0gd2lsbCBjb21wbGV0ZS4gQmVmb3JlIHRoYXQgaGFwcGVucywgdGhlIG91dHB1dCBzdHJlYW0gd2lsbCBiZWhhdmVzXG4gICAgICogbGlrZSB0aGUgaW5wdXQgc3RyZWFtLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0tMS0tLTItLS0tLTMtLTQtLS0tNS0tLS02LS0tXG4gICAgICogICBlbmRXaGVuKCAtLS0tLS0tLWEtLWItLXwgKVxuICAgICAqIC0tLTEtLS0yLS0tLS0zLS00LS18XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXIgU29tZSBvdGhlciBzdHJlYW0gdGhhdCBpcyB1c2VkIHRvIGtub3cgd2hlbiBzaG91bGQgdGhlIG91dHB1dFxuICAgICAqIHN0cmVhbSBvZiB0aGlzIG9wZXJhdG9yIGNvbXBsZXRlLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmVuZFdoZW4gPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAodGhpcy5jdG9yKCkpKG5ldyBFbmRXaGVuKG90aGVyLCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBcIkZvbGRzXCIgdGhlIHN0cmVhbSBvbnRvIGl0c2VsZi5cbiAgICAgKlxuICAgICAqIENvbWJpbmVzIGV2ZW50cyBmcm9tIHRoZSBwYXN0IHRocm91Z2hvdXRcbiAgICAgKiB0aGUgZW50aXJlIGV4ZWN1dGlvbiBvZiB0aGUgaW5wdXQgc3RyZWFtLCBhbGxvd2luZyB5b3UgdG8gYWNjdW11bGF0ZSB0aGVtXG4gICAgICogdG9nZXRoZXIuIEl0J3MgZXNzZW50aWFsbHkgbGlrZSBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAuIFRoZSByZXR1cm5lZFxuICAgICAqIHN0cmVhbSBpcyBhIE1lbW9yeVN0cmVhbSwgd2hpY2ggbWVhbnMgaXQgaXMgYWxyZWFkeSBgcmVtZW1iZXIoKWAnZC5cbiAgICAgKlxuICAgICAqIFRoZSBvdXRwdXQgc3RyZWFtIHN0YXJ0cyBieSBlbWl0dGluZyB0aGUgYHNlZWRgIHdoaWNoIHlvdSBnaXZlIGFzIGFyZ3VtZW50LlxuICAgICAqIFRoZW4sIHdoZW4gYW4gZXZlbnQgaGFwcGVucyBvbiB0aGUgaW5wdXQgc3RyZWFtLCBpdCBpcyBjb21iaW5lZCB3aXRoIHRoYXRcbiAgICAgKiBzZWVkIHZhbHVlIHRocm91Z2ggdGhlIGBhY2N1bXVsYXRlYCBmdW5jdGlvbiwgYW5kIHRoZSBvdXRwdXQgdmFsdWUgaXNcbiAgICAgKiBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgc3RyZWFtLiBgZm9sZGAgcmVtZW1iZXJzIHRoYXQgb3V0cHV0IHZhbHVlIGFzIGBhY2NgXG4gICAgICogKFwiYWNjdW11bGF0b3JcIiksIGFuZCB0aGVuIHdoZW4gYSBuZXcgaW5wdXQgZXZlbnQgYHRgIGhhcHBlbnMsIGBhY2NgIHdpbGwgYmVcbiAgICAgKiBjb21iaW5lZCB3aXRoIHRoYXQgdG8gcHJvZHVjZSB0aGUgbmV3IGBhY2NgIGFuZCBzbyBmb3J0aC5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tLS0tLTEtLS0tLTEtLTItLS0tMS0tLS0xLS0tLS0tXG4gICAgICogICBmb2xkKChhY2MsIHgpID0+IGFjYyArIHgsIDMpXG4gICAgICogMy0tLS0tNC0tLS0tNS0tNy0tLS04LS0tLTktLS0tLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFjY3VtdWxhdGUgQSBmdW5jdGlvbiBvZiB0eXBlIGAoYWNjOiBSLCB0OiBUKSA9PiBSYCB0aGF0XG4gICAgICogdGFrZXMgdGhlIHByZXZpb3VzIGFjY3VtdWxhdGVkIHZhbHVlIGBhY2NgIGFuZCB0aGUgaW5jb21pbmcgZXZlbnQgZnJvbSB0aGVcbiAgICAgKiBpbnB1dCBzdHJlYW0gYW5kIHByb2R1Y2VzIHRoZSBuZXcgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHNlZWQgVGhlIGluaXRpYWwgYWNjdW11bGF0ZWQgdmFsdWUsIG9mIHR5cGUgYFJgLlxuICAgICAqIEByZXR1cm4ge01lbW9yeVN0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmZvbGQgPSBmdW5jdGlvbiAoYWNjdW11bGF0ZSwgc2VlZCkge1xuICAgICAgICByZXR1cm4gbmV3IE1lbW9yeVN0cmVhbShuZXcgRm9sZChhY2N1bXVsYXRlLCBzZWVkLCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbiBlcnJvciB3aXRoIGFub3RoZXIgc3RyZWFtLlxuICAgICAqXG4gICAgICogV2hlbiAoYW5kIGlmKSBhbiBlcnJvciBoYXBwZW5zIG9uIHRoZSBpbnB1dCBzdHJlYW0sIGluc3RlYWQgb2YgZm9yd2FyZGluZ1xuICAgICAqIHRoYXQgZXJyb3IgdG8gdGhlIG91dHB1dCBzdHJlYW0sICpyZXBsYWNlRXJyb3IqIHdpbGwgY2FsbCB0aGUgYHJlcGxhY2VgXG4gICAgICogZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0aGUgc3RyZWFtIHRoYXQgdGhlIG91dHB1dCBzdHJlYW0gd2lsbCByZXBsaWNhdGUuXG4gICAgICogQW5kLCBpbiBjYXNlIHRoYXQgbmV3IHN0cmVhbSBhbHNvIGVtaXRzIGFuIGVycm9yLCBgcmVwbGFjZWAgd2lsbCBiZSBjYWxsZWRcbiAgICAgKiBhZ2FpbiB0byBnZXQgYW5vdGhlciBzdHJlYW0gdG8gc3RhcnQgcmVwbGljYXRpbmcuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLTEtLS0yLS0tLS0zLS00LS0tLS1YXG4gICAgICogICByZXBsYWNlRXJyb3IoICgpID0+IC0tMTAtLXwgKVxuICAgICAqIC0tMS0tLTItLS0tLTMtLTQtLS0tLS0tLTEwLS18XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXBsYWNlIEEgZnVuY3Rpb24gb2YgdHlwZSBgKGVycikgPT4gU3RyZWFtYCB0aGF0IHRha2VzXG4gICAgICogdGhlIGVycm9yIHRoYXQgb2NjdXJyZWQgb24gdGhlIGlucHV0IHN0cmVhbSBvciBvbiB0aGUgcHJldmlvdXMgcmVwbGFjZW1lbnRcbiAgICAgKiBzdHJlYW0gYW5kIHJldHVybnMgYSBuZXcgc3RyZWFtLiBUaGUgb3V0cHV0IHN0cmVhbSB3aWxsIGJlaGF2ZSBsaWtlIHRoZVxuICAgICAqIHN0cmVhbSB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucy5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5yZXBsYWNlRXJyb3IgPSBmdW5jdGlvbiAocmVwbGFjZSkge1xuICAgICAgICByZXR1cm4gbmV3ICh0aGlzLmN0b3IoKSkobmV3IFJlcGxhY2VFcnJvcihyZXBsYWNlLCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBhIFwic3RyZWFtIG9mIHN0cmVhbXNcIiwgaGFuZGxpbmcgb25seSBvbmUgbmVzdGVkIHN0cmVhbSBhdCBhIHRpbWVcbiAgICAgKiAobm8gY29uY3VycmVuY3kpLlxuICAgICAqXG4gICAgICogSWYgdGhlIGlucHV0IHN0cmVhbSBpcyBhIHN0cmVhbSB0aGF0IGVtaXRzIHN0cmVhbXMsIHRoZW4gdGhpcyBvcGVyYXRvciB3aWxsXG4gICAgICogcmV0dXJuIGFuIG91dHB1dCBzdHJlYW0gd2hpY2ggaXMgYSBmbGF0IHN0cmVhbTogZW1pdHMgcmVndWxhciBldmVudHMuIFRoZVxuICAgICAqIGZsYXR0ZW5pbmcgaGFwcGVucyB3aXRob3V0IGNvbmN1cnJlbmN5LiBJdCB3b3JrcyBsaWtlIHRoaXM6IHdoZW4gdGhlIGlucHV0XG4gICAgICogc3RyZWFtIGVtaXRzIGEgbmVzdGVkIHN0cmVhbSwgKmZsYXR0ZW4qIHdpbGwgc3RhcnQgaW1pdGF0aW5nIHRoYXQgbmVzdGVkXG4gICAgICogb25lLiBIb3dldmVyLCBhcyBzb29uIGFzIHRoZSBuZXh0IG5lc3RlZCBzdHJlYW0gaXMgZW1pdHRlZCBvbiB0aGUgaW5wdXRcbiAgICAgKiBzdHJlYW0sICpmbGF0dGVuKiB3aWxsIGZvcmdldCB0aGUgcHJldmlvdXMgbmVzdGVkIG9uZSBpdCB3YXMgaW1pdGF0aW5nLCBhbmRcbiAgICAgKiB3aWxsIHN0YXJ0IGltaXRhdGluZyB0aGUgbmV3IG5lc3RlZCBvbmUuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLSstLS0tLS0tLSstLS0tLS0tLS0tLS0tLS1cbiAgICAgKiAgIFxcICAgICAgICBcXFxuICAgICAqICAgIFxcICAgICAgIC0tLS0xLS0tLTItLS0zLS1cbiAgICAgKiAgICAtLWEtLWItLS0tYy0tLS1kLS0tLS0tLS1cbiAgICAgKiAgICAgICAgICAgZmxhdHRlblxuICAgICAqIC0tLS0tYS0tYi0tLS0tLTEtLS0tMi0tLTMtLVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuZmxhdHRlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLl9wcm9kO1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShwIGluc3RhbmNlb2YgTWFwT3AgJiYgIShwIGluc3RhbmNlb2YgRmlsdGVyTWFwRnVzaW9uKSA/XG4gICAgICAgICAgICBuZXcgTWFwRmxhdHRlbihwKSA6XG4gICAgICAgICAgICBuZXcgRmxhdHRlbih0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXNzZXMgdGhlIGlucHV0IHN0cmVhbSB0byBhIGN1c3RvbSBvcGVyYXRvciwgdG8gcHJvZHVjZSBhbiBvdXRwdXQgc3RyZWFtLlxuICAgICAqXG4gICAgICogKmNvbXBvc2UqIGlzIGEgaGFuZHkgd2F5IG9mIHVzaW5nIGFuIGV4aXN0aW5nIGZ1bmN0aW9uIGluIGEgY2hhaW5lZCBzdHlsZS5cbiAgICAgKiBJbnN0ZWFkIG9mIHdyaXRpbmcgYG91dFN0cmVhbSA9IGYoaW5TdHJlYW0pYCB5b3UgY2FuIHdyaXRlXG4gICAgICogYG91dFN0cmVhbSA9IGluU3RyZWFtLmNvbXBvc2UoZilgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gb3BlcmF0b3IgQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgc3RyZWFtIGFzIGlucHV0IGFuZFxuICAgICAqIHJldHVybnMgYSBzdHJlYW0gYXMgd2VsbC5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5jb21wb3NlID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih0aGlzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb3V0cHV0IHN0cmVhbSB0aGF0IGJlaGF2ZXMgbGlrZSB0aGUgaW5wdXQgc3RyZWFtLCBidXQgYWxzb1xuICAgICAqIHJlbWVtYmVycyB0aGUgbW9zdCByZWNlbnQgZXZlbnQgdGhhdCBoYXBwZW5zIG9uIHRoZSBpbnB1dCBzdHJlYW0sIHNvIHRoYXQgYVxuICAgICAqIG5ld2x5IGFkZGVkIGxpc3RlbmVyIHdpbGwgaW1tZWRpYXRlbHkgcmVjZWl2ZSB0aGF0IG1lbW9yaXNlZCBldmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge01lbW9yeVN0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnJlbWVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1lbW9yeVN0cmVhbShuZXcgUmVtZW1iZXIodGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvdXRwdXQgc3RyZWFtIHRoYXQgaWRlbnRpY2FsbHkgYmVoYXZlcyBsaWtlIHRoZSBpbnB1dCBzdHJlYW0sXG4gICAgICogYnV0IGFsc28gcnVucyBhIGBzcHlgIGZ1bmN0aW9uIGZvIGVhY2ggZXZlbnQsIHRvIGhlbHAgeW91IGRlYnVnIHlvdXIgYXBwLlxuICAgICAqXG4gICAgICogKmRlYnVnKiB0YWtlcyBhIGBzcHlgIGZ1bmN0aW9uIGFzIGFyZ3VtZW50LCBhbmQgcnVucyB0aGF0IGZvciBlYWNoIGV2ZW50XG4gICAgICogaGFwcGVuaW5nIG9uIHRoZSBpbnB1dCBzdHJlYW0uIElmIHlvdSBkb24ndCBwcm92aWRlIHRoZSBgc3B5YCBhcmd1bWVudCxcbiAgICAgKiB0aGVuICpkZWJ1Zyogd2lsbCBqdXN0IGBjb25zb2xlLmxvZ2AgZWFjaCBldmVudC4gVGhpcyBoZWxwcyB5b3UgdG9cbiAgICAgKiB1bmRlcnN0YW5kIHRoZSBmbG93IG9mIGV2ZW50cyB0aHJvdWdoIHNvbWUgb3BlcmF0b3IgY2hhaW4uXG4gICAgICpcbiAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IGlmIHRoZSBvdXRwdXQgc3RyZWFtIGhhcyBubyBsaXN0ZW5lcnMsIHRoZW4gaXQgd2lsbCBub3RcbiAgICAgKiBzdGFydCwgd2hpY2ggbWVhbnMgYHNweWAgd2lsbCBuZXZlciBydW4gYmVjYXVzZSBubyBhY3R1YWwgZXZlbnQgaGFwcGVucyBpblxuICAgICAqIHRoYXQgY2FzZS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tMS0tLS0yLS0tLS0zLS0tLS00LS1cbiAgICAgKiAgICAgICAgIGRlYnVnXG4gICAgICogLS0xLS0tLTItLS0tLTMtLS0tLTQtLVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGFiZWxPclNweSBBIHN0cmluZyB0byB1c2UgYXMgdGhlIGxhYmVsIHdoZW4gcHJpbnRpbmdcbiAgICAgKiBkZWJ1ZyBpbmZvcm1hdGlvbiBvbiB0aGUgY29uc29sZSwgb3IgYSAnc3B5JyBmdW5jdGlvbiB0aGF0IHRha2VzIGFuIGV2ZW50XG4gICAgICogYXMgYXJndW1lbnQsIGFuZCBkb2VzIG5vdCBuZWVkIHRvIHJldHVybiBhbnl0aGluZy5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uIChsYWJlbE9yU3B5KSB7XG4gICAgICAgIHJldHVybiBuZXcgKHRoaXMuY3RvcigpKShuZXcgRGVidWcodGhpcywgbGFiZWxPclNweSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogKmltaXRhdGUqIGNoYW5nZXMgdGhpcyBjdXJyZW50IFN0cmVhbSB0byBlbWl0IHRoZSBzYW1lIGV2ZW50cyB0aGF0IHRoZVxuICAgICAqIGBvdGhlcmAgZ2l2ZW4gU3RyZWFtIGRvZXMuIFRoaXMgbWV0aG9kIHJldHVybnMgbm90aGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGV4aXN0cyB0byBhbGxvdyBvbmUgdGhpbmc6ICoqY2lyY3VsYXIgZGVwZW5kZW5jeSBvZiBzdHJlYW1zKiouXG4gICAgICogRm9yIGluc3RhbmNlLCBsZXQncyBpbWFnaW5lIHRoYXQgZm9yIHNvbWUgcmVhc29uIHlvdSBuZWVkIHRvIGNyZWF0ZSBhXG4gICAgICogY2lyY3VsYXIgZGVwZW5kZW5jeSB3aGVyZSBzdHJlYW0gYGZpcnN0JGAgZGVwZW5kcyBvbiBzdHJlYW0gYHNlY29uZCRgXG4gICAgICogd2hpY2ggaW4gdHVybiBkZXBlbmRzIG9uIGBmaXJzdCRgOlxuICAgICAqXG4gICAgICogPCEtLSBza2lwLWV4YW1wbGUgLS0+XG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgZGVsYXkgZnJvbSAneHN0cmVhbS9leHRyYS9kZWxheSdcbiAgICAgKlxuICAgICAqIHZhciBmaXJzdCQgPSBzZWNvbmQkLm1hcCh4ID0+IHggKiAxMCkudGFrZSgzKTtcbiAgICAgKiB2YXIgc2Vjb25kJCA9IGZpcnN0JC5tYXAoeCA9PiB4ICsgMSkuc3RhcnRXaXRoKDEpLmNvbXBvc2UoZGVsYXkoMTAwKSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBIb3dldmVyLCB0aGF0IGlzIGludmFsaWQgSmF2YVNjcmlwdCwgYmVjYXVzZSBgc2Vjb25kJGAgaXMgdW5kZWZpbmVkXG4gICAgICogb24gdGhlIGZpcnN0IGxpbmUuIFRoaXMgaXMgaG93ICppbWl0YXRlKiBjYW4gaGVscCBzb2x2ZSBpdDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IGRlbGF5IGZyb20gJ3hzdHJlYW0vZXh0cmEvZGVsYXknXG4gICAgICpcbiAgICAgKiB2YXIgc2Vjb25kUHJveHkkID0geHMuY3JlYXRlKCk7XG4gICAgICogdmFyIGZpcnN0JCA9IHNlY29uZFByb3h5JC5tYXAoeCA9PiB4ICogMTApLnRha2UoMyk7XG4gICAgICogdmFyIHNlY29uZCQgPSBmaXJzdCQubWFwKHggPT4geCArIDEpLnN0YXJ0V2l0aCgxKS5jb21wb3NlKGRlbGF5KDEwMCkpO1xuICAgICAqIHNlY29uZFByb3h5JC5pbWl0YXRlKHNlY29uZCQpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogV2UgY3JlYXRlIGBzZWNvbmRQcm94eSRgIGJlZm9yZSB0aGUgb3RoZXJzLCBzbyBpdCBjYW4gYmUgdXNlZCBpbiB0aGVcbiAgICAgKiBkZWNsYXJhdGlvbiBvZiBgZmlyc3QkYC4gVGhlbiwgYWZ0ZXIgYm90aCBgZmlyc3QkYCBhbmQgYHNlY29uZCRgIGFyZVxuICAgICAqIGRlZmluZWQsIHdlIGhvb2sgYHNlY29uZFByb3h5JGAgd2l0aCBgc2Vjb25kJGAgd2l0aCBgaW1pdGF0ZSgpYCB0byB0ZWxsXG4gICAgICogdGhhdCB0aGV5IGFyZSBcInRoZSBzYW1lXCIuIGBpbWl0YXRlYCB3aWxsIG5vdCB0cmlnZ2VyIHRoZSBzdGFydCBvZiBhbnlcbiAgICAgKiBzdHJlYW0sIGl0IGp1c3QgYmluZHMgYHNlY29uZFByb3h5JGAgYW5kIGBzZWNvbmQkYCB0b2dldGhlci5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgaXMgYW4gZXhhbXBsZSB3aGVyZSBgaW1pdGF0ZSgpYCBpcyBpbXBvcnRhbnQgaW4gQ3ljbGUuanNcbiAgICAgKiBhcHBsaWNhdGlvbnMuIEEgcGFyZW50IGNvbXBvbmVudCBjb250YWlucyBzb21lIGNoaWxkIGNvbXBvbmVudHMuIEEgY2hpbGRcbiAgICAgKiBoYXMgYW4gYWN0aW9uIHN0cmVhbSB3aGljaCBpcyBnaXZlbiB0byB0aGUgcGFyZW50IHRvIGRlZmluZSBpdHMgc3RhdGU6XG4gICAgICpcbiAgICAgKiA8IS0tIHNraXAtZXhhbXBsZSAtLT5cbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGNoaWxkQWN0aW9uUHJveHkkID0geHMuY3JlYXRlKCk7XG4gICAgICogY29uc3QgcGFyZW50ID0gUGFyZW50KHsuLi5zb3VyY2VzLCBjaGlsZEFjdGlvbiQ6IGNoaWxkQWN0aW9uUHJveHkkfSk7XG4gICAgICogY29uc3QgY2hpbGRBY3Rpb24kID0gcGFyZW50LnN0YXRlJC5tYXAocyA9PiBzLmNoaWxkLmFjdGlvbiQpLmZsYXR0ZW4oKTtcbiAgICAgKiBjaGlsZEFjdGlvblByb3h5JC5pbWl0YXRlKGNoaWxkQWN0aW9uJCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBOb3RlLCB0aG91Z2gsIHRoYXQgKipgaW1pdGF0ZSgpYCBkb2VzIG5vdCBzdXBwb3J0IE1lbW9yeVN0cmVhbXMqKi4gSWYgd2VcbiAgICAgKiB3b3VsZCBhdHRlbXB0IHRvIGltaXRhdGUgYSBNZW1vcnlTdHJlYW0gaW4gYSBjaXJjdWxhciBkZXBlbmRlbmN5LCB3ZSB3b3VsZFxuICAgICAqIGVpdGhlciBnZXQgYSByYWNlIGNvbmRpdGlvbiAod2hlcmUgdGhlIHN5bXB0b20gd291bGQgYmUgXCJub3RoaW5nIGhhcHBlbnNcIilcbiAgICAgKiBvciBhbiBpbmZpbml0ZSBjeWNsaWMgZW1pc3Npb24gb2YgdmFsdWVzLiBJdCdzIHVzZWZ1bCB0byB0aGluayBhYm91dFxuICAgICAqIE1lbW9yeVN0cmVhbXMgYXMgY2VsbHMgaW4gYSBzcHJlYWRzaGVldC4gSXQgZG9lc24ndCBtYWtlIGFueSBzZW5zZSB0b1xuICAgICAqIGRlZmluZSBhIHNwcmVhZHNoZWV0IGNlbGwgYEExYCB3aXRoIGEgZm9ybXVsYSB0aGF0IGRlcGVuZHMgb24gYEIxYCBhbmRcbiAgICAgKiBjZWxsIGBCMWAgZGVmaW5lZCB3aXRoIGEgZm9ybXVsYSB0aGF0IGRlcGVuZHMgb24gYEExYC5cbiAgICAgKlxuICAgICAqIElmIHlvdSBmaW5kIHlvdXJzZWxmIHdhbnRpbmcgdG8gdXNlIGBpbWl0YXRlKClgIHdpdGggYVxuICAgICAqIE1lbW9yeVN0cmVhbSwgeW91IHNob3VsZCByZXdvcmsgeW91ciBjb2RlIGFyb3VuZCBgaW1pdGF0ZSgpYCB0byB1c2UgYVxuICAgICAqIFN0cmVhbSBpbnN0ZWFkLiBMb29rIGZvciB0aGUgc3RyZWFtIGluIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5IHRoYXRcbiAgICAgKiByZXByZXNlbnRzIGFuIGV2ZW50IHN0cmVhbSwgYW5kIHRoYXQgd291bGQgYmUgYSBjYW5kaWRhdGUgZm9yIGNyZWF0aW5nIGFcbiAgICAgKiBwcm94eSBTdHJlYW0gd2hpY2ggdGhlbiBpbWl0YXRlcyB0aGUgdGFyZ2V0IFN0cmVhbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyZWFtfSB0YXJnZXQgVGhlIG90aGVyIHN0cmVhbSB0byBpbWl0YXRlIG9uIHRoZSBjdXJyZW50IG9uZS4gTXVzdFxuICAgICAqIG5vdCBiZSBhIE1lbW9yeVN0cmVhbS5cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmltaXRhdGUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBNZW1vcnlTdHJlYW0pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgTWVtb3J5U3RyZWFtIHdhcyBnaXZlbiB0byBpbWl0YXRlKCksIGJ1dCBpdCBvbmx5ICcgK1xuICAgICAgICAgICAgICAgICdzdXBwb3J0cyBhIFN0cmVhbS4gUmVhZCBtb3JlIGFib3V0IHRoaXMgcmVzdHJpY3Rpb24gaGVyZTogJyArXG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9zdGFsdHoveHN0cmVhbSNmYXEnKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBmb3IgKHZhciBpbHMgPSB0aGlzLl9pbHMsIE4gPSBpbHMubGVuZ3RoLCBpID0gMDsgaSA8IE47IGkrKylcbiAgICAgICAgICAgIHRhcmdldC5fYWRkKGlsc1tpXSk7XG4gICAgICAgIHRoaXMuX2lscyA9IFtdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9yY2VzIHRoZSBTdHJlYW0gdG8gZW1pdCB0aGUgZ2l2ZW4gdmFsdWUgdG8gaXRzIGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIEFzIHRoZSBuYW1lIGluZGljYXRlcywgaWYgeW91IHVzZSB0aGlzLCB5b3UgYXJlIG1vc3QgbGlrZWx5IGRvaW5nIHNvbWV0aGluZ1xuICAgICAqIFRoZSBXcm9uZyBXYXkuIFBsZWFzZSB0cnkgdG8gdW5kZXJzdGFuZCB0aGUgcmVhY3RpdmUgd2F5IGJlZm9yZSB1c2luZyB0aGlzXG4gICAgICogbWV0aG9kLiBVc2UgaXQgb25seSB3aGVuIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgXCJuZXh0XCIgdmFsdWUgeW91IHdhbnQgdG8gYnJvYWRjYXN0IHRvIGFsbCBsaXN0ZW5lcnMgb2ZcbiAgICAgKiB0aGlzIFN0cmVhbS5cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnNoYW1lZnVsbHlTZW5kTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9uKHZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvcmNlcyB0aGUgU3RyZWFtIHRvIGVtaXQgdGhlIGdpdmVuIGVycm9yIHRvIGl0cyBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBBcyB0aGUgbmFtZSBpbmRpY2F0ZXMsIGlmIHlvdSB1c2UgdGhpcywgeW91IGFyZSBtb3N0IGxpa2VseSBkb2luZyBzb21ldGhpbmdcbiAgICAgKiBUaGUgV3JvbmcgV2F5LiBQbGVhc2UgdHJ5IHRvIHVuZGVyc3RhbmQgdGhlIHJlYWN0aXZlIHdheSBiZWZvcmUgdXNpbmcgdGhpc1xuICAgICAqIG1ldGhvZC4gVXNlIGl0IG9ubHkgd2hlbiB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FueX0gZXJyb3IgVGhlIGVycm9yIHlvdSB3YW50IHRvIGJyb2FkY2FzdCB0byBhbGwgdGhlIGxpc3RlbmVycyBvZlxuICAgICAqIHRoaXMgU3RyZWFtLlxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuc2hhbWVmdWxseVNlbmRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLl9lKGVycm9yKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvcmNlcyB0aGUgU3RyZWFtIHRvIGVtaXQgdGhlIFwiY29tcGxldGVkXCIgZXZlbnQgdG8gaXRzIGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIEFzIHRoZSBuYW1lIGluZGljYXRlcywgaWYgeW91IHVzZSB0aGlzLCB5b3UgYXJlIG1vc3QgbGlrZWx5IGRvaW5nIHNvbWV0aGluZ1xuICAgICAqIFRoZSBXcm9uZyBXYXkuIFBsZWFzZSB0cnkgdG8gdW5kZXJzdGFuZCB0aGUgcmVhY3RpdmUgd2F5IGJlZm9yZSB1c2luZyB0aGlzXG4gICAgICogbWV0aG9kLiBVc2UgaXQgb25seSB3aGVuIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnNoYW1lZnVsbHlTZW5kQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2MoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBcImRlYnVnXCIgbGlzdGVuZXIgdG8gdGhlIHN0cmVhbS4gVGhlcmUgY2FuIG9ubHkgYmUgb25lIGRlYnVnXG4gICAgICogbGlzdGVuZXIsIHRoYXQncyB3aHkgdGhpcyBpcyAnc2V0RGVidWdMaXN0ZW5lcicuIFRvIHJlbW92ZSB0aGUgZGVidWdcbiAgICAgKiBsaXN0ZW5lciwganVzdCBjYWxsIHNldERlYnVnTGlzdGVuZXIobnVsbCkuXG4gICAgICpcbiAgICAgKiBBIGRlYnVnIGxpc3RlbmVyIGlzIGxpa2UgYW55IG90aGVyIGxpc3RlbmVyLiBUaGUgb25seSBkaWZmZXJlbmNlIGlzIHRoYXQgYVxuICAgICAqIGRlYnVnIGxpc3RlbmVyIGlzIFwic3RlYWx0aHlcIjogaXRzIHByZXNlbmNlL2Fic2VuY2UgZG9lcyBub3QgdHJpZ2dlciB0aGVcbiAgICAgKiBzdGFydC9zdG9wIG9mIHRoZSBzdHJlYW0gKG9yIHRoZSBwcm9kdWNlciBpbnNpZGUgdGhlIHN0cmVhbSkuIFRoaXMgaXNcbiAgICAgKiB1c2VmdWwgc28geW91IGNhbiBpbnNwZWN0IHdoYXQgaXMgZ29pbmcgb24gd2l0aG91dCBjaGFuZ2luZyB0aGUgYmVoYXZpb3JcbiAgICAgKiBvZiB0aGUgcHJvZ3JhbS4gSWYgeW91IGhhdmUgYW4gaWRsZSBzdHJlYW0gYW5kIHlvdSBhZGQgYSBub3JtYWwgbGlzdGVuZXIgdG9cbiAgICAgKiBpdCwgdGhlIHN0cmVhbSB3aWxsIHN0YXJ0IGV4ZWN1dGluZy4gQnV0IGlmIHlvdSBzZXQgYSBkZWJ1ZyBsaXN0ZW5lciBvbiBhblxuICAgICAqIGlkbGUgc3RyZWFtLCBpdCB3b24ndCBzdGFydCBleGVjdXRpbmcgKG5vdCB1bnRpbCB0aGUgZmlyc3Qgbm9ybWFsIGxpc3RlbmVyXG4gICAgICogaXMgYWRkZWQpLlxuICAgICAqXG4gICAgICogQXMgdGhlIG5hbWUgaW5kaWNhdGVzLCB3ZSBkb24ndCByZWNvbW1lbmQgdXNpbmcgdGhpcyBtZXRob2QgdG8gYnVpbGQgYXBwXG4gICAgICogbG9naWMuIEluIGZhY3QsIGluIG1vc3QgY2FzZXMgdGhlIGRlYnVnIG9wZXJhdG9yIHdvcmtzIGp1c3QgZmluZS4gT25seSB1c2VcbiAgICAgKiB0aGlzIG9uZSBpZiB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TGlzdGVuZXI8VD59IGxpc3RlbmVyXG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5zZXREZWJ1Z0xpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2RsID0gTk87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gdHJ1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyLl9uID0gbGlzdGVuZXIubmV4dCB8fCBub29wO1xuICAgICAgICAgICAgbGlzdGVuZXIuX2UgPSBsaXN0ZW5lci5lcnJvciB8fCBub29wO1xuICAgICAgICAgICAgbGlzdGVuZXIuX2MgPSBsaXN0ZW5lci5jb21wbGV0ZSB8fCBub29wO1xuICAgICAgICAgICAgdGhpcy5fZGwgPSBsaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN0cmVhbTtcbn0oKSk7XG4vKipcbiAqIEJsZW5kcyBtdWx0aXBsZSBzdHJlYW1zIHRvZ2V0aGVyLCBlbWl0dGluZyBldmVudHMgZnJvbSBhbGwgb2YgdGhlbVxuICogY29uY3VycmVudGx5LlxuICpcbiAqICptZXJnZSogdGFrZXMgbXVsdGlwbGUgc3RyZWFtcyBhcyBhcmd1bWVudHMsIGFuZCBjcmVhdGVzIGEgc3RyZWFtIHRoYXRcbiAqIGJlaGF2ZXMgbGlrZSBlYWNoIG9mIHRoZSBhcmd1bWVudCBzdHJlYW1zLCBpbiBwYXJhbGxlbC5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLS0tMi0tLS0tMy0tLS0tLS0tNC0tLVxuICogLS0tLWEtLS0tLWItLS0tYy0tLWQtLS0tLS1cbiAqICAgICAgICAgICAgbWVyZ2VcbiAqIC0tMS1hLS0yLS1iLS0zLWMtLS1kLS00LS0tXG4gKiBgYGBcbiAqXG4gKiBAZmFjdG9yeSB0cnVlXG4gKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtMSBBIHN0cmVhbSB0byBtZXJnZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuXG4gKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtMiBBIHN0cmVhbSB0byBtZXJnZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuIFR3b1xuICogb3IgbW9yZSBzdHJlYW1zIG1heSBiZSBnaXZlbiBhcyBhcmd1bWVudHMuXG4gKiBAcmV0dXJuIHtTdHJlYW19XG4gKi9cblN0cmVhbS5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBzdHJlYW1zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc3RyZWFtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgTWVyZ2Uoc3RyZWFtcykpO1xufTtcbi8qKlxuICogQ29tYmluZXMgbXVsdGlwbGUgaW5wdXQgc3RyZWFtcyB0b2dldGhlciB0byByZXR1cm4gYSBzdHJlYW0gd2hvc2UgZXZlbnRzXG4gKiBhcmUgYXJyYXlzIHRoYXQgY29sbGVjdCB0aGUgbGF0ZXN0IGV2ZW50cyBmcm9tIGVhY2ggaW5wdXQgc3RyZWFtLlxuICpcbiAqICpjb21iaW5lKiBpbnRlcm5hbGx5IHJlbWVtYmVycyB0aGUgbW9zdCByZWNlbnQgZXZlbnQgZnJvbSBlYWNoIG9mIHRoZSBpbnB1dFxuICogc3RyZWFtcy4gV2hlbiBhbnkgb2YgdGhlIGlucHV0IHN0cmVhbXMgZW1pdHMgYW4gZXZlbnQsIHRoYXQgZXZlbnQgdG9nZXRoZXJcbiAqIHdpdGggYWxsIHRoZSBvdGhlciBzYXZlZCBldmVudHMgYXJlIGNvbWJpbmVkIGludG8gYW4gYXJyYXkuIFRoYXQgYXJyYXkgd2lsbFxuICogYmUgZW1pdHRlZCBvbiB0aGUgb3V0cHV0IHN0cmVhbS4gSXQncyBlc3NlbnRpYWxseSBhIHdheSBvZiBqb2luaW5nIHRvZ2V0aGVyXG4gKiB0aGUgZXZlbnRzIGZyb20gbXVsdGlwbGUgc3RyZWFtcy5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLS0tMi0tLS0tMy0tLS0tLS0tNC0tLVxuICogLS0tLWEtLS0tLWItLS0tLWMtLWQtLS0tLS1cbiAqICAgICAgICAgIGNvbWJpbmVcbiAqIC0tLS0xYS0yYS0yYi0zYi0zYy0zZC00ZC0tXG4gKiBgYGBcbiAqXG4gKiBOb3RlOiB0byBtaW5pbWl6ZSBnYXJiYWdlIGNvbGxlY3Rpb24sICpjb21iaW5lKiB1c2VzIHRoZSBzYW1lIGFycmF5XG4gKiBpbnN0YW5jZSBmb3IgZWFjaCBlbWlzc2lvbi4gIElmIHlvdSBuZWVkIHRvIGNvbXBhcmUgZW1pc3Npb25zIG92ZXIgdGltZSxcbiAqIGNhY2hlIHRoZSB2YWx1ZXMgd2l0aCBgbWFwYCBmaXJzdDpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHBhaXJ3aXNlIGZyb20gJ3hzdHJlYW0vZXh0cmEvcGFpcndpc2UnXG4gKlxuICogY29uc3Qgc3RyZWFtMSA9IHhzLm9mKDEpO1xuICogY29uc3Qgc3RyZWFtMiA9IHhzLm9mKDIpO1xuICpcbiAqIHhzLmNvbWJpbmUoc3RyZWFtMSwgc3RyZWFtMikubWFwKFxuICogICBjb21iaW5lZEVtaXNzaW9ucyA9PiAoWyAuLi5jb21iaW5lZEVtaXNzaW9ucyBdKVxuICogKS5jb21wb3NlKHBhaXJ3aXNlKVxuICogYGBgXG4gKlxuICogQGZhY3RvcnkgdHJ1ZVxuICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbTEgQSBzdHJlYW0gdG8gY29tYmluZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuXG4gKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtMiBBIHN0cmVhbSB0byBjb21iaW5lIHRvZ2V0aGVyIHdpdGggb3RoZXIgc3RyZWFtcy5cbiAqIE11bHRpcGxlIHN0cmVhbXMsIG5vdCBqdXN0IHR3bywgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50cy5cbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqL1xuU3RyZWFtLmNvbWJpbmUgPSBmdW5jdGlvbiBjb21iaW5lKCkge1xuICAgIHZhciBzdHJlYW1zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc3RyZWFtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgQ29tYmluZShzdHJlYW1zKSk7XG59O1xuZXhwb3J0cy5TdHJlYW0gPSBTdHJlYW07XG52YXIgTWVtb3J5U3RyZWFtID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVtb3J5U3RyZWFtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lbW9yeVN0cmVhbShwcm9kdWNlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9kdWNlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2hhcyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB0aGlzLl92ID0geDtcbiAgICAgICAgdGhpcy5faGFzID0gdHJ1ZTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fbi5jYWxsKHRoaXMsIHgpO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5fYWRkID0gZnVuY3Rpb24gKGlsKSB7XG4gICAgICAgIHZhciB0YSA9IHRoaXMuX3RhcmdldDtcbiAgICAgICAgaWYgKHRhICE9PSBOTylcbiAgICAgICAgICAgIHJldHVybiB0YS5fYWRkKGlsKTtcbiAgICAgICAgdmFyIGEgPSB0aGlzLl9pbHM7XG4gICAgICAgIGEucHVzaChpbCk7XG4gICAgICAgIGlmIChhLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXMpXG4gICAgICAgICAgICAgICAgaWwuX24odGhpcy5fdik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N0b3BJRCAhPT0gTk8pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXMpXG4gICAgICAgICAgICAgICAgaWwuX24odGhpcy5fdik7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fc3RvcElEKTtcbiAgICAgICAgICAgIHRoaXMuX3N0b3BJRCA9IE5PO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2hhcylcbiAgICAgICAgICAgIGlsLl9uKHRoaXMuX3YpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwID0gdGhpcy5fcHJvZDtcbiAgICAgICAgICAgIGlmIChwICE9PSBOTylcbiAgICAgICAgICAgICAgICBwLl9zdGFydCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5fc3RvcE5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faGFzID0gZmFsc2U7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX3N0b3BOb3cuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuX3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2hhcyA9IGZhbHNlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl94LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChwcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAocHJvamVjdCk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLm1hcFRvID0gZnVuY3Rpb24gKHByb2plY3RlZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLm1hcFRvLmNhbGwodGhpcywgcHJvamVjdGVkVmFsdWUpO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS50YWtlID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS50YWtlLmNhbGwodGhpcywgYW1vdW50KTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuZW5kV2hlbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5lbmRXaGVuLmNhbGwodGhpcywgb3RoZXIpO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5yZXBsYWNlRXJyb3IgPSBmdW5jdGlvbiAocmVwbGFjZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXBsYWNlRXJyb3IuY2FsbCh0aGlzLCByZXBsYWNlKTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUucmVtZW1iZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uIChsYWJlbE9yU3B5KSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmRlYnVnLmNhbGwodGhpcywgbGFiZWxPclNweSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWVtb3J5U3RyZWFtO1xufShTdHJlYW0pKTtcbmV4cG9ydHMuTWVtb3J5U3RyZWFtID0gTWVtb3J5U3RyZWFtO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3hzdHJlYW0vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdGh1bmtfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS90aHVua1wiKTtcbmV4cG9ydHMudGh1bmsgPSB0aHVua18xLnRodW5rO1xudmFyIE1haW5ET01Tb3VyY2VfMSA9IHJlcXVpcmUoXCIuL01haW5ET01Tb3VyY2VcIik7XG5leHBvcnRzLk1haW5ET01Tb3VyY2UgPSBNYWluRE9NU291cmNlXzEuTWFpbkRPTVNvdXJjZTtcbnZhciBIVE1MU291cmNlXzEgPSByZXF1aXJlKFwiLi9IVE1MU291cmNlXCIpO1xuZXhwb3J0cy5IVE1MU291cmNlID0gSFRNTFNvdXJjZV8xLkhUTUxTb3VyY2U7XG4vKipcbiAqIEEgZmFjdG9yeSBmb3IgdGhlIERPTSBkcml2ZXIgZnVuY3Rpb24uXG4gKlxuICogVGFrZXMgYSBgY29udGFpbmVyYCB0byBkZWZpbmUgdGhlIHRhcmdldCBvbiB0aGUgZXhpc3RpbmcgRE9NIHdoaWNoIHRoaXNcbiAqIGRyaXZlciB3aWxsIG9wZXJhdGUgb24sIGFuZCBhbiBgb3B0aW9uc2Agb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuIFRoZVxuICogaW5wdXQgdG8gdGhpcyBkcml2ZXIgaXMgYSBzdHJlYW0gb2YgdmlydHVhbCBET00gb2JqZWN0cywgb3IgaW4gb3RoZXIgd29yZHMsXG4gKiBTbmFiYmRvbSBcIlZOb2RlXCIgb2JqZWN0cy4gVGhlIG91dHB1dCBvZiB0aGlzIGRyaXZlciBpcyBhIFwiRE9NU291cmNlXCI6IGFcbiAqIGNvbGxlY3Rpb24gb2YgT2JzZXJ2YWJsZXMgcXVlcmllZCB3aXRoIHRoZSBtZXRob2RzIGBzZWxlY3QoKWAgYW5kIGBldmVudHMoKWAuXG4gKlxuICogYERPTVNvdXJjZS5zZWxlY3Qoc2VsZWN0b3IpYCByZXR1cm5zIGEgbmV3IERPTVNvdXJjZSB3aXRoIHNjb3BlIHJlc3RyaWN0ZWQgdG9cbiAqIHRoZSBlbGVtZW50KHMpIHRoYXQgbWF0Y2hlcyB0aGUgQ1NTIGBzZWxlY3RvcmAgZ2l2ZW4uXG4gKlxuICogYERPTVNvdXJjZS5ldmVudHMoZXZlbnRUeXBlLCBvcHRpb25zKWAgcmV0dXJucyBhIHN0cmVhbSBvZiBldmVudHMgb2ZcbiAqIGBldmVudFR5cGVgIGhhcHBlbmluZyBvbiB0aGUgZWxlbWVudHMgdGhhdCBtYXRjaCB0aGUgY3VycmVudCBET01Tb3VyY2UuIFRoZVxuICogZXZlbnQgb2JqZWN0IGNvbnRhaW5zIHRoZSBgb3duZXJUYXJnZXRgIHByb3BlcnR5IHRoYXQgYmVoYXZlcyBleGFjdGx5IGxpa2VcbiAqIGBjdXJyZW50VGFyZ2V0YC4gVGhlIHJlYXNvbiBmb3IgdGhpcyBpcyB0aGF0IHNvbWUgYnJvd3NlcnMgZG9lc24ndCBhbGxvd1xuICogYGN1cnJlbnRUYXJnZXRgIHByb3BlcnR5IHRvIGJlIG11dGF0ZWQsIGhlbmNlIGEgbmV3IHByb3BlcnR5IGlzIGNyZWF0ZWQuIFRoZVxuICogcmV0dXJuZWQgc3RyZWFtIGlzIGFuICp4c3RyZWFtKiBTdHJlYW0gaWYgeW91IHVzZSBgQGN5Y2xlL3hzdHJlYW0tcnVuYCB0byBydW5cbiAqIHlvdXIgYXBwIHdpdGggdGhpcyBkcml2ZXIsIG9yIGl0IGlzIGFuIFJ4SlMgT2JzZXJ2YWJsZSBpZiB5b3UgdXNlXG4gKiBgQGN5Y2xlL3J4anMtcnVuYCwgYW5kIHNvIGZvcnRoLiBUaGUgYG9wdGlvbnNgIHBhcmFtZXRlciBjYW4gaGF2ZSB0aGVcbiAqIHByb3BlcnR5IGB1c2VDYXB0dXJlYCwgd2hpY2ggaXMgYnkgZGVmYXVsdCBgZmFsc2VgLCBleGNlcHQgaXQgaXMgYHRydWVgIGZvclxuICogZXZlbnQgdHlwZXMgdGhhdCBkbyBub3QgYnViYmxlLiBSZWFkIG1vcmUgaGVyZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXJcbiAqIGFib3V0IHRoZSBgdXNlQ2FwdHVyZWAgYW5kIGl0cyBwdXJwb3NlLlxuICpcbiAqIGBET01Tb3VyY2UuZWxlbWVudHMoKWAgcmV0dXJucyBhIHN0cmVhbSBvZiB0aGUgRE9NIGVsZW1lbnQocykgbWF0Y2hlZCBieSB0aGVcbiAqIHNlbGVjdG9ycyBpbiB0aGUgRE9NU291cmNlLiBBbHNvLCBgRE9NU291cmNlLnNlbGVjdCgnOnJvb3QnKS5lbGVtZW50cygpYFxuICogcmV0dXJucyBhIHN0cmVhbSBvZiBET00gZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSByb290IChvciBjb250YWluZXIpIG9mXG4gKiB0aGUgYXBwIG9uIHRoZSBET00uXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfEhUTUxFbGVtZW50KX0gY29udGFpbmVyIHRoZSBET00gc2VsZWN0b3IgZm9yIHRoZSBlbGVtZW50XG4gKiAob3IgdGhlIGVsZW1lbnQgaXRzZWxmKSB0byBjb250YWluIHRoZSByZW5kZXJpbmcgb2YgdGhlIFZUcmVlcy5cbiAqIEBwYXJhbSB7RE9NRHJpdmVyT3B0aW9uc30gb3B0aW9ucyBhbiBvYmplY3Qgd2l0aCB0d28gb3B0aW9uYWwgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYG1vZHVsZXM6IGFycmF5YCBvdmVycmlkZXMgYEBjeWNsZS9kb21gJ3MgZGVmYXVsdCBTbmFiYmRvbSBtb2R1bGVzIGFzXG4gKiAgICAgYXMgZGVmaW5lZCBpbiBbYHNyYy9tb2R1bGVzLnRzYF0oLi9zcmMvbW9kdWxlcy50cykuXG4gKiAgIC0gYHRyYW5zcG9zaXRpb246IGJvb2xlYW5gIGVuYWJsZXMvZGlzYWJsZXMgdHJhbnNwb3NpdGlvbiBvZiBpbm5lciBzdHJlYW1zXG4gKiAgICAgaW4gdGhlIHZpcnR1YWwgRE9NIHRyZWUuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIERPTSBkcml2ZXIgZnVuY3Rpb24uIFRoZSBmdW5jdGlvbiBleHBlY3RzIGEgc3RyZWFtIG9mXG4gKiBWTm9kZSBhcyBpbnB1dCwgYW5kIG91dHB1dHMgdGhlIERPTVNvdXJjZSBvYmplY3QuXG4gKiBAZnVuY3Rpb24gbWFrZURPTURyaXZlclxuICovXG52YXIgbWFrZURPTURyaXZlcl8xID0gcmVxdWlyZShcIi4vbWFrZURPTURyaXZlclwiKTtcbmV4cG9ydHMubWFrZURPTURyaXZlciA9IG1ha2VET01Ecml2ZXJfMS5tYWtlRE9NRHJpdmVyO1xuLyoqXG4gKiBBIGZhY3RvcnkgZm9yIHRoZSBIVE1MIGRyaXZlciBmdW5jdGlvbi5cbiAqXG4gKiBUYWtlcyBhbiBgZWZmZWN0YCBjYWxsYmFjayBmdW5jdGlvbiBhbmQgYW4gYG9wdGlvbnNgIG9iamVjdCBhcyBhcmd1bWVudHMuIFRoZVxuICogaW5wdXQgdG8gdGhpcyBkcml2ZXIgaXMgYSBzdHJlYW0gb2YgdmlydHVhbCBET00gb2JqZWN0cywgb3IgaW4gb3RoZXIgd29yZHMsXG4gKiBTbmFiYmRvbSBcIlZOb2RlXCIgb2JqZWN0cy4gVGhlIG91dHB1dCBvZiB0aGlzIGRyaXZlciBpcyBhIFwiRE9NU291cmNlXCI6IGFcbiAqIGNvbGxlY3Rpb24gb2YgT2JzZXJ2YWJsZXMgcXVlcmllZCB3aXRoIHRoZSBtZXRob2RzIGBzZWxlY3QoKWAgYW5kIGBldmVudHMoKWAuXG4gKlxuICogVGhlIEhUTUwgRHJpdmVyIGlzIHN1cHBsZW1lbnRhcnkgdG8gdGhlIERPTSBEcml2ZXIuIEluc3RlYWQgb2YgcHJvZHVjaW5nXG4gKiBlbGVtZW50cyBvbiB0aGUgRE9NLCBpdCBnZW5lcmF0ZXMgSFRNTCBhcyBzdHJpbmdzIGFuZCBkb2VzIGEgc2lkZSBlZmZlY3Qgb25cbiAqIHRob3NlIEhUTUwgc3RyaW5ncy4gVGhhdCBzaWRlIGVmZmVjdCBpcyBkZXNjcmliZWQgYnkgdGhlIGBlZmZlY3RgIGNhbGxiYWNrXG4gKiBmdW5jdGlvbi4gU28sIGlmIHlvdSB3YW50IHRvIHVzZSB0aGUgSFRNTCBEcml2ZXIgb24gdGhlIHNlcnZlci1zaWRlIHRvIHJlbmRlclxuICogeW91ciBhcHBsaWNhdGlvbiBhcyBIVE1MIGFuZCBzZW5kIGFzIGEgcmVzcG9uc2UgKHdoaWNoIGlzIHRoZSB0eXBpY2FsIHVzZVxuICogY2FzZSBmb3IgdGhlIEhUTUwgRHJpdmVyKSwgeW91IG5lZWQgdG8gcGFzcyBzb21ldGhpbmcgbGlrZSB0aGVcbiAqIGBodG1sID0+IHJlc3BvbnNlLnNlbmQoaHRtbClgIGZ1bmN0aW9uIGFzIHRoZSBgZWZmZWN0YCBhcmd1bWVudC4gVGhpcyB3YXksXG4gKiB0aGUgZHJpdmVyIGtub3dzIHdoYXQgc2lkZSBlZmZlY3QgdG8gY2F1c2UgYmFzZWQgb24gdGhlIEhUTUwgc3RyaW5nIGl0IGp1c3RcbiAqIHJlbmRlcmVkLlxuICpcbiAqIFRoZSBIVE1MIGRyaXZlciBpcyB1c2VmdWwgb25seSBmb3IgdGhhdCBzaWRlIGVmZmVjdCBpbiB0aGUgYGVmZmVjdGAgY2FsbGJhY2suXG4gKiBJdCBjYW4gYmUgY29uc2lkZXJlZCBhIHNpbmstb25seSBkcml2ZXIuIEhvd2V2ZXIsIGluIG9yZGVyIHRvIHNlcnZlIGFzIGFcbiAqIHRyYW5zcGFyZW50IHJlcGxhY2VtZW50IHRvIHRoZSBET00gRHJpdmVyIHdoZW4gcmVuZGVyaW5nIGZyb20gdGhlIHNlcnZlciwgdGhlXG4gKiBIVE1MIGRyaXZlciByZXR1cm5zIGEgc291cmNlIG9iamVjdCB0aGF0IGJlaGF2ZXMganVzdCBsaWtlIHRoZSBET01Tb3VyY2UuXG4gKiBUaGlzIGhlbHBzIHJldXNlIHRoZSBzYW1lIGFwcGxpY2F0aW9uIHRoYXQgaXMgd3JpdHRlbiBmb3IgdGhlIERPTSBEcml2ZXIuXG4gKiBUaGlzIGZha2UgRE9NU291cmNlIHJldHVybnMgZW1wdHkgc3RyZWFtcyB3aGVuIHlvdSBxdWVyeSBpdCwgYmVjYXVzZSB0aGVyZVxuICogYXJlIG5vIHVzZXIgZXZlbnRzIG9uIHRoZSBzZXJ2ZXIuXG4gKlxuICogYERPTVNvdXJjZS5zZWxlY3Qoc2VsZWN0b3IpYCByZXR1cm5zIGEgbmV3IERPTVNvdXJjZSB3aXRoIHNjb3BlIHJlc3RyaWN0ZWQgdG9cbiAqIHRoZSBlbGVtZW50KHMpIHRoYXQgbWF0Y2hlcyB0aGUgQ1NTIGBzZWxlY3RvcmAgZ2l2ZW4uXG4gKlxuICogYERPTVNvdXJjZS5ldmVudHMoZXZlbnRUeXBlLCBvcHRpb25zKWAgcmV0dXJucyBhbiBlbXB0eSBzdHJlYW0uIFRoZSByZXR1cm5lZFxuICogc3RyZWFtIGlzIGFuICp4c3RyZWFtKiBTdHJlYW0gaWYgeW91IHVzZSBgQGN5Y2xlL3hzdHJlYW0tcnVuYCB0byBydW4geW91ciBhcHBcbiAqIHdpdGggdGhpcyBkcml2ZXIsIG9yIGl0IGlzIGFuIFJ4SlMgT2JzZXJ2YWJsZSBpZiB5b3UgdXNlIGBAY3ljbGUvcnhqcy1ydW5gLFxuICogYW5kIHNvIGZvcnRoLlxuICpcbiAqIGBET01Tb3VyY2UuZWxlbWVudHMoKWAgcmV0dXJucyB0aGUgc3RyZWFtIG9mIEhUTUwgc3RyaW5nIHJlbmRlcmVkIGZyb20geW91clxuICogc2luayB2aXJ0dWFsIERPTSBzdHJlYW0uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWZmZWN0IGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHN0cmluZyBvZiByZW5kZXJlZFxuICogSFRNTCBhcyBpbnB1dCBhbmQgc2hvdWxkIHJ1biBhIHNpZGUgZWZmZWN0LCByZXR1cm5pbmcgbm90aGluZy5cbiAqIEBwYXJhbSB7SFRNTERyaXZlck9wdGlvbnN9IG9wdGlvbnMgYW4gb2JqZWN0IHdpdGggb25lIG9wdGlvbmFsIHByb3BlcnR5OlxuICogYHRyYW5zcG9zaXRpb246IGJvb2xlYW5gIGVuYWJsZXMvZGlzYWJsZXMgdHJhbnNwb3NpdGlvbiBvZiBpbm5lciBzdHJlYW1zIGluXG4gKiB0aGUgdmlydHVhbCBET00gdHJlZS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgSFRNTCBkcml2ZXIgZnVuY3Rpb24uIFRoZSBmdW5jdGlvbiBleHBlY3RzIGEgc3RyZWFtIG9mXG4gKiBWTm9kZSBhcyBpbnB1dCwgYW5kIG91dHB1dHMgdGhlIERPTVNvdXJjZSBvYmplY3QuXG4gKiBAZnVuY3Rpb24gbWFrZUhUTUxEcml2ZXJcbiAqL1xudmFyIG1ha2VIVE1MRHJpdmVyXzEgPSByZXF1aXJlKFwiLi9tYWtlSFRNTERyaXZlclwiKTtcbmV4cG9ydHMubWFrZUhUTUxEcml2ZXIgPSBtYWtlSFRNTERyaXZlcl8xLm1ha2VIVE1MRHJpdmVyO1xuLyoqXG4gKiBBIGZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIG1vY2tlZCBET01Tb3VyY2Ugb2JqZWN0cywgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKlxuICogVGFrZXMgYSBgc3RyZWFtQWRhcHRlcmAgYW5kIGEgYG1vY2tDb25maWdgIG9iamVjdCBhcyBhcmd1bWVudHMsIGFuZCByZXR1cm5zXG4gKiBhIERPTVNvdXJjZSB0aGF0IGNhbiBiZSBnaXZlbiB0byBhbnkgQ3ljbGUuanMgYXBwIHRoYXQgZXhwZWN0cyBhIERPTVNvdXJjZSBpblxuICogdGhlIHNvdXJjZXMsIGZvciB0ZXN0aW5nLlxuICpcbiAqIFRoZSBgc3RyZWFtQWRhcHRlcmAgcGFyYW1ldGVyIGlzIGEgcGFja2FnZSBzdWNoIGFzIGBAY3ljbGUveHN0cmVhbS1hZGFwdGVyYCxcbiAqIGBAY3ljbGUvcnhqcy1hZGFwdGVyYCwgZXRjLiBJbXBvcnQgaXQgYXMgYGltcG9ydCBhIGZyb20gJ0BjeWNsZS9yeC1hZGFwdGVyYCxcbiAqIHRoZW4gcHJvdmlkZSBpdCB0byBgbW9ja0RPTVNvdXJjZS4gVGhpcyBpcyBpbXBvcnRhbnQgc28gdGhlIERPTVNvdXJjZSBjcmVhdGVkXG4gKiBrbm93cyB3aGljaCBzdHJlYW0gbGlicmFyeSBzaG91bGQgaXQgdXNlIHRvIGV4cG9ydCBpdHMgc3RyZWFtcyB3aGVuIHlvdSBjYWxsXG4gKiBgRE9NU291cmNlLmV2ZW50cygpYCBmb3IgaW5zdGFuY2UuXG4gKlxuICogVGhlIGBtb2NrQ29uZmlnYCBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHNwZWNpZnlpbmcgc2VsZWN0b3JzLCBldmVudFR5cGVzIGFuZFxuICogdGhlaXIgc3RyZWFtcy4gRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZG9tU291cmNlID0gbW9ja0RPTVNvdXJjZShSeEFkYXB0ZXIsIHtcbiAqICAgJy5mb28nOiB7XG4gKiAgICAgJ2NsaWNrJzogUnguT2JzZXJ2YWJsZS5vZih7dGFyZ2V0OiB7fX0pLFxuICogICAgICdtb3VzZW92ZXInOiBSeC5PYnNlcnZhYmxlLm9mKHt0YXJnZXQ6IHt9fSksXG4gKiAgIH0sXG4gKiAgICcuYmFyJzoge1xuICogICAgICdzY3JvbGwnOiBSeC5PYnNlcnZhYmxlLm9mKHt0YXJnZXQ6IHt9fSksXG4gKiAgICAgZWxlbWVudHM6IFJ4Lk9ic2VydmFibGUub2Yoe3RhZ05hbWU6ICdkaXYnfSksXG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqIC8vIFVzYWdlXG4gKiBjb25zdCBjbGljayQgPSBkb21Tb3VyY2Uuc2VsZWN0KCcuZm9vJykuZXZlbnRzKCdjbGljaycpO1xuICogY29uc3QgZWxlbWVudCQgPSBkb21Tb3VyY2Uuc2VsZWN0KCcuYmFyJykuZWxlbWVudHMoKTtcbiAqIGBgYFxuICpcbiAqIFRoZSBtb2NrZWQgRE9NIFNvdXJjZSBzdXBwb3J0cyBpc29sYXRpb24uIEl0IGhhcyB0aGUgZnVuY3Rpb25zIGBpc29sYXRlU2lua2BcbiAqIGFuZCBgaXNvbGF0ZVNvdXJjZWAgYXR0YWNoZWQgdG8gaXQsIGFuZCBwZXJmb3JtcyBzaW1wbGUgaXNvbGF0aW9uIHVzaW5nXG4gKiBjbGFzc05hbWVzLiAqaXNvbGF0ZVNpbmsqIHdpdGggc2NvcGUgYGZvb2Agd2lsbCBhcHBlbmQgdGhlIGNsYXNzIGBfX19mb29gIHRvXG4gKiB0aGUgc3RyZWFtIG9mIHZpcnR1YWwgRE9NIG5vZGVzLCBhbmQgKmlzb2xhdGVTb3VyY2UqIHdpdGggc2NvcGUgYGZvb2Agd2lsbFxuICogcGVyZm9ybSBhIGNvbnZlbnRpb25hbCBgbW9ja2VkRE9NU291cmNlLnNlbGVjdCgnLl9fZm9vJylgIGNhbGwuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1vY2tDb25maWcgYW4gb2JqZWN0IHdoZXJlIGtleXMgYXJlIHNlbGVjdG9yIHN0cmluZ3NcbiAqIGFuZCB2YWx1ZXMgYXJlIG9iamVjdHMuIFRob3NlIG5lc3RlZCBvYmplY3RzIGhhdmUgYGV2ZW50VHlwZWAgc3RyaW5ncyBhcyBrZXlzXG4gKiBhbmQgdmFsdWVzIGFyZSBzdHJlYW1zIHlvdSBjcmVhdGVkLlxuICogQHJldHVybiB7T2JqZWN0fSBmYWtlIERPTSBzb3VyY2Ugb2JqZWN0LCB3aXRoIGFuIEFQSSBjb250YWluaW5nIGBzZWxlY3QoKWBcbiAqIGFuZCBgZXZlbnRzKClgIGFuZCBgZWxlbWVudHMoKWAgd2hpY2ggY2FuIGJlIHVzZWQganVzdCBsaWtlIHRoZSBET00gRHJpdmVyJ3NcbiAqIERPTVNvdXJjZS5cbiAqXG4gKiBAZnVuY3Rpb24gbW9ja0RPTVNvdXJjZVxuICovXG52YXIgbW9ja0RPTVNvdXJjZV8xID0gcmVxdWlyZShcIi4vbW9ja0RPTVNvdXJjZVwiKTtcbmV4cG9ydHMubW9ja0RPTVNvdXJjZSA9IG1vY2tET01Tb3VyY2VfMS5tb2NrRE9NU291cmNlO1xuZXhwb3J0cy5Nb2NrZWRET01Tb3VyY2UgPSBtb2NrRE9NU291cmNlXzEuTW9ja2VkRE9NU291cmNlO1xuLyoqXG4gKiBUaGUgaHlwZXJzY3JpcHQgZnVuY3Rpb24gYGgoKWAgaXMgYSBmdW5jdGlvbiB0byBjcmVhdGUgdmlydHVhbCBET00gb2JqZWN0cyxcbiAqIGFsc28ga25vd24gYXMgVk5vZGVzLiBDYWxsXG4gKlxuICogYGBganNcbiAqIGgoJ2Rpdi5teUNsYXNzJywge3N0eWxlOiB7Y29sb3I6ICdyZWQnfX0sIFtdKVxuICogYGBgXG4gKlxuICogdG8gY3JlYXRlIGEgVk5vZGUgdGhhdCByZXByZXNlbnRzIGEgYERJVmAgZWxlbWVudCB3aXRoIGNsYXNzTmFtZSBgbXlDbGFzc2AsXG4gKiBzdHlsZWQgd2l0aCByZWQgY29sb3IsIGFuZCBubyBjaGlsZHJlbiBiZWNhdXNlIHRoZSBgW11gIGFycmF5IHdhcyBwYXNzZWQuIFRoZVxuICogQVBJIGlzIGBoKHRhZ09yU2VsZWN0b3IsIG9wdGlvbmFsRGF0YSwgb3B0aW9uYWxDaGlsZHJlbk9yVGV4dClgLlxuICpcbiAqIEhvd2V2ZXIsIHVzdWFsbHkgeW91IHNob3VsZCB1c2UgXCJoeXBlcnNjcmlwdCBoZWxwZXJzXCIsIHdoaWNoIGFyZSBzaG9ydGN1dFxuICogZnVuY3Rpb25zIGJhc2VkIG9uIGh5cGVyc2NyaXB0LiBUaGVyZSBpcyBvbmUgaHlwZXJzY3JpcHQgaGVscGVyIGZ1bmN0aW9uIGZvclxuICogZWFjaCBET00gdGFnTmFtZSwgc3VjaCBhcyBgaDEoKWAsIGBoMigpYCwgYGRpdigpYCwgYHNwYW4oKWAsIGBsYWJlbCgpYCxcbiAqIGBpbnB1dCgpYC4gRm9yIGluc3RhbmNlLCB0aGUgcHJldmlvdXMgZXhhbXBsZSBjb3VsZCBoYXZlIGJlZW4gd3JpdHRlblxuICogYXM6XG4gKlxuICogYGBganNcbiAqIGRpdignLm15Q2xhc3MnLCB7c3R5bGU6IHtjb2xvcjogJ3JlZCd9fSwgW10pXG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgYWxzbyBTVkcgaGVscGVyIGZ1bmN0aW9ucywgd2hpY2ggYXBwbHkgdGhlIGFwcHJvcHJpYXRlIFNWR1xuICogbmFtZXNwYWNlIHRvIHRoZSByZXN1bHRpbmcgZWxlbWVudHMuIGBzdmcoKWAgZnVuY3Rpb24gY3JlYXRlcyB0aGUgdG9wLW1vc3RcbiAqIFNWRyBlbGVtZW50LCBhbmQgYHN2Zy5nYCwgYHN2Zy5wb2x5Z29uYCwgYHN2Zy5jaXJjbGVgLCBgc3ZnLnBhdGhgIGFyZSBmb3JcbiAqIFNWRy1zcGVjaWZpYyBjaGlsZCBlbGVtZW50cy4gRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogc3ZnKHt3aWR0aDogMTUwLCBoZWlnaHQ6IDE1MH0sIFtcbiAqICAgc3ZnLnBvbHlnb24oe1xuICogICAgIGF0dHJzOiB7XG4gKiAgICAgICBjbGFzczogJ3RyaWFuZ2xlJyxcbiAqICAgICAgIHBvaW50czogJzIwIDAgMjAgMTUwIDE1MCAyMCdcbiAqICAgICB9XG4gKiAgIH0pXG4gKiBdKVxuICogYGBgXG4gKlxuICogQGZ1bmN0aW9uIGhcbiAqL1xudmFyIGhfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS9oXCIpO1xuZXhwb3J0cy5oID0gaF8xLmg7XG52YXIgaHlwZXJzY3JpcHRfaGVscGVyc18xID0gcmVxdWlyZShcIi4vaHlwZXJzY3JpcHQtaGVscGVyc1wiKTtcbmV4cG9ydHMuc3ZnID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc3ZnO1xuZXhwb3J0cy5hID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYTtcbmV4cG9ydHMuYWJiciA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmFiYnI7XG5leHBvcnRzLmFkZHJlc3MgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5hZGRyZXNzO1xuZXhwb3J0cy5hcmVhID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYXJlYTtcbmV4cG9ydHMuYXJ0aWNsZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmFydGljbGU7XG5leHBvcnRzLmFzaWRlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYXNpZGU7XG5leHBvcnRzLmF1ZGlvID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYXVkaW87XG5leHBvcnRzLmIgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5iO1xuZXhwb3J0cy5iYXNlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYmFzZTtcbmV4cG9ydHMuYmRpID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYmRpO1xuZXhwb3J0cy5iZG8gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5iZG87XG5leHBvcnRzLmJsb2NrcXVvdGUgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5ibG9ja3F1b3RlO1xuZXhwb3J0cy5ib2R5ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYm9keTtcbmV4cG9ydHMuYnIgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5icjtcbmV4cG9ydHMuYnV0dG9uID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYnV0dG9uO1xuZXhwb3J0cy5jYW52YXMgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5jYW52YXM7XG5leHBvcnRzLmNhcHRpb24gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5jYXB0aW9uO1xuZXhwb3J0cy5jaXRlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuY2l0ZTtcbmV4cG9ydHMuY29kZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmNvZGU7XG5leHBvcnRzLmNvbCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmNvbDtcbmV4cG9ydHMuY29sZ3JvdXAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5jb2xncm91cDtcbmV4cG9ydHMuZGQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5kZDtcbmV4cG9ydHMuZGVsID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZGVsO1xuZXhwb3J0cy5kZm4gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5kZm47XG5leHBvcnRzLmRpciA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmRpcjtcbmV4cG9ydHMuZGl2ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZGl2O1xuZXhwb3J0cy5kbCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmRsO1xuZXhwb3J0cy5kdCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmR0O1xuZXhwb3J0cy5lbSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmVtO1xuZXhwb3J0cy5lbWJlZCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmVtYmVkO1xuZXhwb3J0cy5maWVsZHNldCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmZpZWxkc2V0O1xuZXhwb3J0cy5maWdjYXB0aW9uID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZmlnY2FwdGlvbjtcbmV4cG9ydHMuZmlndXJlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZmlndXJlO1xuZXhwb3J0cy5mb290ZXIgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5mb290ZXI7XG5leHBvcnRzLmZvcm0gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5mb3JtO1xuZXhwb3J0cy5oMSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmgxO1xuZXhwb3J0cy5oMiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmgyO1xuZXhwb3J0cy5oMyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmgzO1xuZXhwb3J0cy5oNCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lmg0O1xuZXhwb3J0cy5oNSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lmg1O1xuZXhwb3J0cy5oNiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lmg2O1xuZXhwb3J0cy5oZWFkID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaGVhZDtcbmV4cG9ydHMuaGVhZGVyID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaGVhZGVyO1xuZXhwb3J0cy5oZ3JvdXAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5oZ3JvdXA7XG5leHBvcnRzLmhyID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaHI7XG5leHBvcnRzLmh0bWwgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5odG1sO1xuZXhwb3J0cy5pID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaTtcbmV4cG9ydHMuaWZyYW1lID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaWZyYW1lO1xuZXhwb3J0cy5pbWcgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5pbWc7XG5leHBvcnRzLmlucHV0ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaW5wdXQ7XG5leHBvcnRzLmlucyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmlucztcbmV4cG9ydHMua2JkID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQua2JkO1xuZXhwb3J0cy5rZXlnZW4gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5rZXlnZW47XG5leHBvcnRzLmxhYmVsID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQubGFiZWw7XG5leHBvcnRzLmxlZ2VuZCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmxlZ2VuZDtcbmV4cG9ydHMubGkgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5saTtcbmV4cG9ydHMubGluayA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lmxpbms7XG5leHBvcnRzLm1haW4gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5tYWluO1xuZXhwb3J0cy5tYXAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5tYXA7XG5leHBvcnRzLm1hcmsgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5tYXJrO1xuZXhwb3J0cy5tZW51ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQubWVudTtcbmV4cG9ydHMubWV0YSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lm1ldGE7XG5leHBvcnRzLm5hdiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lm5hdjtcbmV4cG9ydHMubm9zY3JpcHQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5ub3NjcmlwdDtcbmV4cG9ydHMub2JqZWN0ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQub2JqZWN0O1xuZXhwb3J0cy5vbCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lm9sO1xuZXhwb3J0cy5vcHRncm91cCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lm9wdGdyb3VwO1xuZXhwb3J0cy5vcHRpb24gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5vcHRpb247XG5leHBvcnRzLnAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5wO1xuZXhwb3J0cy5wYXJhbSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnBhcmFtO1xuZXhwb3J0cy5wcmUgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5wcmU7XG5leHBvcnRzLnByb2dyZXNzID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQucHJvZ3Jlc3M7XG5leHBvcnRzLnEgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5xO1xuZXhwb3J0cy5ycCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnJwO1xuZXhwb3J0cy5ydCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnJ0O1xuZXhwb3J0cy5ydWJ5ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQucnVieTtcbmV4cG9ydHMucyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnM7XG5leHBvcnRzLnNhbXAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zYW1wO1xuZXhwb3J0cy5zY3JpcHQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zY3JpcHQ7XG5leHBvcnRzLnNlY3Rpb24gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zZWN0aW9uO1xuZXhwb3J0cy5zZWxlY3QgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zZWxlY3Q7XG5leHBvcnRzLnNtYWxsID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc21hbGw7XG5leHBvcnRzLnNvdXJjZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnNvdXJjZTtcbmV4cG9ydHMuc3BhbiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnNwYW47XG5leHBvcnRzLnN0cm9uZyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnN0cm9uZztcbmV4cG9ydHMuc3R5bGUgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zdHlsZTtcbmV4cG9ydHMuc3ViID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc3ViO1xuZXhwb3J0cy5zdXAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zdXA7XG5leHBvcnRzLnRhYmxlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGFibGU7XG5leHBvcnRzLnRib2R5ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGJvZHk7XG5leHBvcnRzLnRkID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGQ7XG5leHBvcnRzLnRleHRhcmVhID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGV4dGFyZWE7XG5leHBvcnRzLnRmb290ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGZvb3Q7XG5leHBvcnRzLnRoID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGg7XG5leHBvcnRzLnRoZWFkID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGhlYWQ7XG5leHBvcnRzLnRpdGxlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudGl0bGU7XG5leHBvcnRzLnRyID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudHI7XG5leHBvcnRzLnUgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC51O1xuZXhwb3J0cy51bCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnVsO1xuZXhwb3J0cy52aWRlbyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnZpZGVvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCAqIGZyb20gXCIuLi9zcmNcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL3VpLnRzIiwiaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gXCIuLi91dGlsc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaWNvblR5cGVcIjtcblxuXG5leHBvcnQgZW51bSBTaXplIHtcbiAgTWluaSwgVGlueSwgU21hbGwsIE1lZGl1bSwgTGFyZ2UsIEJpZywgSHVnZSwgTWFzc2l2ZSwgRmx1aWRcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBTaXplIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIFRvRW51bShzaXplT3JTdHJpbmc6IFNpemUgfCBzdHJpbmcpOiBTaXplIHtcbiAgICByZXR1cm4gdHlwZW9mIChzaXplT3JTdHJpbmcpID09PSBcIm51bWJlclwiXG4gICAgICA/IHNpemVPclN0cmluZ1xuICAgICAgOiBTaXplW2NhcGl0YWxpemUoc2l6ZU9yU3RyaW5nKV07XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIFRvQ2xhc3NuYW1lKHNpemU6IFNpemUgfCBzdHJpbmcpIHtcbiAgICBzaXplID0gVG9FbnVtKHNpemUpO1xuICAgIHN3aXRjaCAoc2l6ZSkge1xuICAgICAgY2FzZSBTaXplLk1pbmk6IHJldHVybiBcIiBtaW5pXCI7XG4gICAgICBjYXNlIFNpemUuVGlueTogcmV0dXJuIFwiIHRpbnlcIjtcbiAgICAgIGNhc2UgU2l6ZS5TbWFsbDogcmV0dXJuIFwiIHNtYWxsXCI7XG4gICAgICBjYXNlIFNpemUuTWVkaXVtOiByZXR1cm4gXCIgbWVkaXVtXCI7XG4gICAgICBjYXNlIFNpemUuTGFyZ2U6IHJldHVybiBcIiBsYXJnZVwiO1xuICAgICAgY2FzZSBTaXplLkJpZzogcmV0dXJuIFwiIGJpZ1wiO1xuICAgICAgY2FzZSBTaXplLkh1Z2U6IHJldHVybiBcIiBodWdlXCI7XG4gICAgICBjYXNlIFNpemUuTWFzc2l2ZTogcmV0dXJuIFwiIG1hc3NpdmVcIjtcbiAgICAgIGNhc2UgU2l6ZS5GbHVpZDogcmV0dXJuIFwiIGZsdWlkXCI7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gXCJcIjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gVmVydGljYWxBbGlnbm1lbnQge1xuICBUb3AsIE1pZGRsZSwgQm90dG9tXG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmVydGljYWxBbGlnbm1lbnQge1xuICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKHZBbGlnbm1lbnRPclN0cmluZzogVmVydGljYWxBbGlnbm1lbnQgfCBzdHJpbmcpOiBWZXJ0aWNhbEFsaWdubWVudCB7XG4gICAgcmV0dXJuIHR5cGVvZiAodkFsaWdubWVudE9yU3RyaW5nKSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyB2QWxpZ25tZW50T3JTdHJpbmdcbiAgICAgIDogVmVydGljYWxBbGlnbm1lbnRbY2FwaXRhbGl6ZSh2QWxpZ25tZW50T3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoYWxpZ25tZW50OiBWZXJ0aWNhbEFsaWdubWVudCB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgYWxpZ25tZW50ID0gVmVydGljYWxBbGlnbm1lbnQuVG9FbnVtKGFsaWdubWVudCk7XG4gICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgIGNhc2UgVmVydGljYWxBbGlnbm1lbnQuVG9wOiByZXR1cm4gXCIgdG9wIGFsaWduZWRcIjtcbiAgICAgIGNhc2UgVmVydGljYWxBbGlnbm1lbnQuTWlkZGxlOiByZXR1cm4gXCIgbWlkZGxlIGFsaWduZWRcIjtcbiAgICAgIGNhc2UgVmVydGljYWxBbGlnbm1lbnQuQm90dG9tOiByZXR1cm4gXCIgYm90dG9tIGFsaWduZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBUZXh0QWxpZ25tZW50IHtcbiAgTGVmdCwgUmlnaHQsIENlbnRlciwgSnVzdGlmaWVkXG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVGV4dEFsaWdubWVudCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0VudW0odEFsaWdubWVudE9yU3RyaW5nOiBUZXh0QWxpZ25tZW50IHwgc3RyaW5nKTogVGV4dEFsaWdubWVudCB7XG4gICAgcmV0dXJuIHR5cGVvZiAodEFsaWdubWVudE9yU3RyaW5nKSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyB0QWxpZ25tZW50T3JTdHJpbmdcbiAgICAgIDogVGV4dEFsaWdubWVudFtjYXBpdGFsaXplKHRBbGlnbm1lbnRPclN0cmluZyldO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZShhbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGFsaWdubWVudCA9IFRleHRBbGlnbm1lbnQuVG9FbnVtKGFsaWdubWVudCk7XG4gICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgIGNhc2UgVGV4dEFsaWdubWVudC5MZWZ0OiByZXR1cm4gXCIgbGVmdCBhbGlnbmVkXCI7XG4gICAgICBjYXNlIFRleHRBbGlnbm1lbnQuUmlnaHQ6IHJldHVybiBcIiByaWdodCBhbGlnbmVkXCI7XG4gICAgICBjYXNlIFRleHRBbGlnbm1lbnQuQ2VudGVyOiByZXR1cm4gXCIgY2VudGVyIGFsaWduZWRcIjtcbiAgICAgIGNhc2UgVGV4dEFsaWdubWVudC5KdXN0aWZpZWQ6IHJldHVybiBcIiBqdXN0aWZpZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBGbG9hdCB7XG4gIE5vbmUsIFJpZ2h0LCBMZWZ0XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmxvYXQge1xuICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKGZsb2F0T3JTdHJpbmc6IEZsb2F0IHwgc3RyaW5nKTogRmxvYXQge1xuICAgIHJldHVybiB0eXBlb2YgKGZsb2F0T3JTdHJpbmcpID09PSBcIm51bWJlclwiXG4gICAgICA/IGZsb2F0T3JTdHJpbmdcbiAgICAgIDogRmxvYXRbY2FwaXRhbGl6ZShmbG9hdE9yU3RyaW5nKV07XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIFRvQ2xhc3NuYW1lKGZsb2F0OiBGbG9hdCB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgZmxvYXQgPSBGbG9hdC5Ub0VudW0oZmxvYXQpO1xuICAgIHN3aXRjaCAoZmxvYXQpIHtcbiAgICAgIGNhc2UgRmxvYXQuTGVmdDogcmV0dXJuIFwiIGxlZnQgZmxvYXRlZFwiO1xuICAgICAgY2FzZSBGbG9hdC5SaWdodDogcmV0dXJuIFwiIHJpZ2h0IGZsb2F0ZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBBdHRhY2htZW50IHtcbiAgTm9uZSwgVG9wLCBCb3R0b21cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBBdHRhY2htZW50IHtcbiAgZXhwb3J0IGZ1bmN0aW9uIFRvRW51bShhdHRhY2htZW50T3JTdHJpbmc6IEF0dGFjaG1lbnQgfCBzdHJpbmcpOiBBdHRhY2htZW50IHtcbiAgICByZXR1cm4gdHlwZW9mIChhdHRhY2htZW50T3JTdHJpbmcpID09PSBcIm51bWJlclwiXG4gICAgICA/IGF0dGFjaG1lbnRPclN0cmluZ1xuICAgICAgOiBBdHRhY2htZW50W2NhcGl0YWxpemUoYXR0YWNobWVudE9yU3RyaW5nKV07XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIFRvQ2xhc3NuYW1lKGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGF0dGFjaG1lbnQgPSBBdHRhY2htZW50LlRvRW51bShhdHRhY2htZW50KTtcbiAgICBzd2l0Y2ggKGF0dGFjaG1lbnQpIHtcbiAgICAgIGNhc2UgQXR0YWNobWVudC5Ob25lOiByZXR1cm4gXCIgYXR0YWNoZWRcIjtcbiAgICAgIGNhc2UgQXR0YWNobWVudC5Ub3A6IHJldHVybiBcIiB0b3AgYXR0YWNoZWRcIjtcbiAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b206IHJldHVybiBcIiBib3R0b20gYXR0YWNoZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBDb2xvciB7XG4gIE5vbmUsIFByaW1hcnksIFNlY29uZGFyeSwgU3VjY2VzcywgSW5mbywgV2FybmluZywgRXJyb3Jcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDb2xvciB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0VudW0oY29sb3JPclN0cmluZzogQ29sb3IgfCBzdHJpbmcpOiBDb2xvciB7XG4gICAgcmV0dXJuIHR5cGVvZiAoY29sb3JPclN0cmluZykgPT09IFwibnVtYmVyXCJcbiAgICAgID8gY29sb3JPclN0cmluZ1xuICAgICAgOiBDb2xvcltjYXBpdGFsaXplKGNvbG9yT3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoY29sb3I6IENvbG9yIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb2xvciA9IENvbG9yLlRvRW51bShjb2xvcik7XG4gICAgc3dpdGNoIChjb2xvcikge1xuICAgICAgY2FzZSBDb2xvci5QcmltYXJ5OiByZXR1cm4gXCIgcHJpbWFyeUNvbG9yZWRcIjtcbiAgICAgIGNhc2UgQ29sb3IuU2Vjb25kYXJ5OiByZXR1cm4gXCIgc2Vjb25kYXJ5Q29sb3JlZFwiO1xuICAgICAgY2FzZSBDb2xvci5TdWNjZXNzOiByZXR1cm4gXCIgc3VjY2Vzc0NvbG9yZWRcIjtcbiAgICAgIGNhc2UgQ29sb3IuSW5mbzogcmV0dXJuIFwiIGluZm9Db2xvcmVkXCI7XG4gICAgICBjYXNlIENvbG9yLldhcm5pbmc6IHJldHVybiBcIiB3YXJuaW5nQ29sb3JlZFwiO1xuICAgICAgY2FzZSBDb2xvci5FcnJvcjogcmV0dXJuIFwiIGVycm9yQ29sb3JlZCBcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBBbmltYXRpb24ge1xuICBCcm93c2UsIERyb3AsIEZhZGUsIEZsaXAsIFNjYWxlLCBGbHksIFNsaWRlLCBTd2luZyxcbiAgRmxhc2gsIFNoYWtlLCBCb3VuY2UsIFRhZGEsIFB1bHNlLCBKaWdnbGUsXG4gIE5vbmVcbn1cbmV4cG9ydCBuYW1lc3BhY2UgQW5pbWF0aW9uIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIFRvRW51bShhbmltYXRpb25PclN0cmluZzogQW5pbWF0aW9uIHwgc3RyaW5nKTogQW5pbWF0aW9uIHtcbiAgICByZXR1cm4gdHlwZW9mIChhbmltYXRpb25PclN0cmluZykgPT09IFwibnVtYmVyXCJcbiAgICAgID8gYW5pbWF0aW9uT3JTdHJpbmdcbiAgICAgIDogQW5pbWF0aW9uW2NhcGl0YWxpemUoYW5pbWF0aW9uT3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoYW5pbTogQW5pbWF0aW9uIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICBhbmltID0gQW5pbWF0aW9uLlRvRW51bShhbmltKTtcbiAgICBzd2l0Y2ggKGFuaW0pIHtcbiAgICAgIGNhc2UgQW5pbWF0aW9uLkJyb3dzZTogcmV0dXJuIFwiIGJyb3dzZVwiO1xuICAgICAgY2FzZSBBbmltYXRpb24uRHJvcDogcmV0dXJuIFwiIGRyb3BcIjtcbiAgICAgIGNhc2UgQW5pbWF0aW9uLkZhZGU6IHJldHVybiBcIiBmYWRlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5GbGlwOiByZXR1cm4gXCIgZmxpcFwiO1xuICAgICAgY2FzZSBBbmltYXRpb24uU2NhbGU6IHJldHVybiBcIiBzY2FsZVwiO1xuICAgICAgY2FzZSBBbmltYXRpb24uRmx5OiByZXR1cm4gXCIgZmx5XCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5TbGlkZTogcmV0dXJuIFwiIHNsaWRlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5Td2luZzogcmV0dXJuIFwiIHN3aW5nXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5GbGFzaDogcmV0dXJuIFwiIGZsYXNoXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5TaGFrZTogcmV0dXJuIFwiIHNoYWtlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5Cb3VuY2U6IHJldHVybiBcIiBib3VuY2VcIjtcbiAgICAgIGNhc2UgQW5pbWF0aW9uLlRhZGE6IHJldHVybiBcIiB0YWRhXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5QdWxzZTogcmV0dXJuIFwiIHB1bHNlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5KaWdnbGU6IHJldHVybiBcIiBqaWdnbGVcIjtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc3RhdGljQW5pbWF0aW9ucyA9IFtBbmltYXRpb24uRmxhc2gsIEFuaW1hdGlvbi5TaGFrZSxcbiAgQW5pbWF0aW9uLkJvdW5jZSwgQW5pbWF0aW9uLlRhZGEsIEFuaW1hdGlvbi5QdWxzZSwgQW5pbWF0aW9uLkppZ2dsZV07XG4gIGV4cG9ydCBmdW5jdGlvbiBpc1N0YXRpYyhhbmltOiBBbmltYXRpb258c3RyaW5nKTogQm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0YXRpY0FuaW1hdGlvbnMuaW5kZXhPZihBbmltYXRpb24uVG9FbnVtKGFuaW0pKSAhPT0gLTE7XG4gIH1cbiAgY29uc3QgZGlyZWN0aW9uQW5pbWF0aW9ucyA9IFtBbmltYXRpb24uQnJvd3NlLCBBbmltYXRpb24uRmFkZSxcbiAgQW5pbWF0aW9uLkZseSwgQW5pbWF0aW9uLlNsaWRlLCBBbmltYXRpb24uU3dpbmddO1xuICBleHBvcnQgZnVuY3Rpb24gaXNEaXJlY3Rpb25hbChhbmltOiBBbmltYXRpb258c3RyaW5nKTogQm9vbGVhbiB7XG4gICAgcmV0dXJuIGRpcmVjdGlvbkFuaW1hdGlvbnMuaW5kZXhPZihBbmltYXRpb24uVG9FbnVtKGFuaW0pKSAhPT0gLTE7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gRGlyZWN0aW9uIHtcbiAgSW4sIE91dCwgTm9uZVxufVxuZXhwb3J0IG5hbWVzcGFjZSBEaXJlY3Rpb24ge1xuICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKGRpcmVjdGlvbk9yU3RyaW5nOiBEaXJlY3Rpb24gfCBzdHJpbmcpOiBEaXJlY3Rpb24ge1xuICAgIHJldHVybiB0eXBlb2YgKGRpcmVjdGlvbk9yU3RyaW5nKSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyBkaXJlY3Rpb25PclN0cmluZ1xuICAgICAgOiBEaXJlY3Rpb25bY2FwaXRhbGl6ZShkaXJlY3Rpb25PclN0cmluZyldO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZShkaXJlY3Rpb246IERpcmVjdGlvbiB8IHN0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IERpcmVjdGlvbi5Ub0VudW0oZGlyZWN0aW9uKTtcbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uSW4gPyBcIiBpblwiIDogXCIgb3V0XCI7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gQW5pbWF0aW9uRGlyZWN0aW9uIHtcbiAgVXAsIERvd24sIExlZnQsIFJpZ2h0XG59XG5leHBvcnQgbmFtZXNwYWNlIEFuaW1hdGlvbkRpcmVjdGlvbiB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0VudW0oYW5pbWF0aW9uRGlyZWN0aW9uT3JTdHJpbmc6IEFuaW1hdGlvbkRpcmVjdGlvbiB8IHN0cmluZyk6IEFuaW1hdGlvbkRpcmVjdGlvbiB7XG4gICAgcmV0dXJuIHR5cGVvZihhbmltYXRpb25EaXJlY3Rpb25PclN0cmluZykgPT09IFwibnVtYmVyXCJcbiAgICAgID8gYW5pbWF0aW9uRGlyZWN0aW9uT3JTdHJpbmdcbiAgICAgIDogQW5pbWF0aW9uRGlyZWN0aW9uW2NhcGl0YWxpemUoYW5pbWF0aW9uRGlyZWN0aW9uT3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoZGlyOiBBbmltYXRpb25EaXJlY3Rpb258c3RyaW5nKSA6IHN0cmluZyB7XG4gICAgZGlyID0gQW5pbWF0aW9uRGlyZWN0aW9uLlRvRW51bShkaXIpO1xuICAgIHN3aXRjaCAoZGlyKSB7XG4gICAgICBjYXNlIEFuaW1hdGlvbkRpcmVjdGlvbi5VcDogcmV0dXJuIFwiIHVwXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbkRpcmVjdGlvbi5Eb3duOiByZXR1cm4gXCIgZG93blwiO1xuICAgICAgY2FzZSBBbmltYXRpb25EaXJlY3Rpb24uTGVmdDogcmV0dXJuIFwiIGxlZnRcIjtcbiAgICAgIGNhc2UgQW5pbWF0aW9uRGlyZWN0aW9uLlJpZ2h0OiByZXR1cm4gXCIgcmlnaHRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VudW1zL2luZGV4LnRzIiwiXG5pbXBvcnQgeHMgZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50U291cmNlcywgQ29udGVudE9iaiwgQ29tcG9uZW50U2lua3MsIFN0eWxlQW5kQ29udGVudEFyZ3MgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgUmVuZGVyRm48UCwgQiwgQyBleHRlbmRzIENvbnRlbnRPYmo8Qj4+ID0gKGFyZzogU3R5bGVBbmRDb250ZW50QXJnczxQLCBCLCBDPikgPT4gVk5vZGU7XG5leHBvcnQgdHlwZSBJc0JGbjxCPiA9IChvYmopID0+IG9iaiBpcyBCO1xuZXhwb3J0IHR5cGUgSXNBcmdzRm48UCxCLEMgZXh0ZW5kcyBDb250ZW50T2JqPEI+PiA9IChvYmopID0+IG9iaiBpcyBTdHlsZUFuZENvbnRlbnRBcmdzPFAsIEIsIEM+O1xuXG4vL0NvbW1vbiByZW5kZXIgZnVuY3Rpb24gZm9yIGFsbCBiYXNpYyBDb21wb25lbnRzXG4vL1JlZm9ybWF0cyB0aGUgdmFyaW91cyBzeW50YXhlcyBpbnRvIFN0eWxlQW5kQ29udGVudEFyZ3MgXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUHJvcHNBbmRDb250ZW50PFAsIEIsIEMgZXh0ZW5kcyBDb250ZW50T2JqPEI+PihcbiAgcmVuZGVyRm46IFJlbmRlckZuPFAsIEIsIEM+LCBpc0FyZ3M6IElzQXJnc0ZuPFAsQixDPiwgaXNCOiBJc0JGbjxCPiwgXG4gIGFyZzE/OiBQYXJ0aWFsPFA+IHwgQiB8IFN0eWxlQW5kQ29udGVudEFyZ3M8UCwgQiwgQz4sIGFyZzI/OiBCXG4pIHtcbiAgaWYgKGlzQXJncyhhcmcxKSkge1xuICAgIHJldHVybiByZW5kZXJGbihhcmcxKTtcbiAgfVxuICBsZXQgYXJncyA9IHt9IGFzIFN0eWxlQW5kQ29udGVudEFyZ3M8UCwgQiwgQz47XG4gIGlmIChpc0IoYXJnMSkpIHtcbiAgICBhcmdzLnByb3BzID0ge30gYXMgUGFydGlhbDxQPjtcbiAgICBhcmdzLmNvbnRlbnQgPSBhcmcxO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MucHJvcHMgPSBhcmcxIHx8IHt9IGFzIFBhcnRpYWw8UD47XG4gICAgYXJncy5jb250ZW50ID0gYXJnMjtcbiAgfVxuICByZXR1cm4gcmVuZGVyRm4oYXJncyk7XG59XG5cbi8vQ29tbW9uIHJ1biBmdW5jdGlvbiBmb3IgYWxsIGJhc2ljIENvbXBvbmVudHNcbi8vSXNvbGF0ZXMgdGhlIHJlbmRlcmVkIGNvbXBvbmVudCBhbmQgZXhwb3NlcyBldmVudHNcbmV4cG9ydCBmdW5jdGlvbiBydW5Qcm9wc0FuZENvbnRlbnQ8UCwgQiwgQyBleHRlbmRzIENvbnRlbnRPYmo8Qj4+KFxuICBzb3VyY2VzOiBDb21wb25lbnRTb3VyY2VzPFAsIEIsIEM+LCByZW5kZXI6IFJlbmRlckZuPFAsIEIsIEM+LFxuICBzZWxlY3Rvcjogc3RyaW5nLCBzY29wZT86IHN0cmluZ1xuKTogQ29tcG9uZW50U2lua3Mge1xuICBmdW5jdGlvbiBtYWluKHNvdXJjZXM6IENvbXBvbmVudFNvdXJjZXM8UCwgQiwgQz4pIHtcbiAgICBzb3VyY2VzLnByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7fSBhcyBQYXJ0aWFsPFA+KTtcbiAgICBzb3VyY2VzLmNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQgOiB4cy5vZih1bmRlZmluZWQgYXMgUGFydGlhbDxDPik7XG4gICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZShzb3VyY2VzLnByb3BzJCwgc291cmNlcy5jb250ZW50JClcbiAgICAgIC5tYXAoKFtwcm9wcywgY29udGVudF0pID0+IHJlbmRlcih7cHJvcHMsY29udGVudH0pXG4gICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIGV2ZW50czogKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChzZWxlY3RvcikuZXZlbnRzKHR5cGUpLFxuICAgIH07XG4gIH1cbiAgY29uc3QgaXNvbGF0ZWRNYWluID0gaXNvbGF0ZShtYWluLCBzY29wZSk7XG4gIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSXNBcmdzPFAsQixDIGV4dGVuZHMgQ29udGVudE9iajxCPj4oaXNCOiBJc0JGbjxCPikgOiBJc0FyZ3NGbjxQLEIsQz4ge1xuICByZXR1cm4gPChvYmopID0+IG9iaiBpcyBTdHlsZUFuZENvbnRlbnRBcmdzPFAsQixDPj4oKG9iaikgPT4gaXNBcmdzKG9iaiwgaXNCKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBcmdzPFAsIEIsIEM+KG9iaiwgaXNCOiBJc0JGbjxCPik6IG9iaiBpcyBTdHlsZUFuZENvbnRlbnRBcmdzPFAsIEIsIEM+IHtcbiAgcmV0dXJuIG9iaiAmJiAoXG4gICAgdHlwZW9mIChvYmoucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgKHR5cGVvZiAob2JqLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIChpc0Iob2JqLmNvbnRlbnQpIHx8IGlzQihvYmouY29udGVudC5tYWluKSkpXG4gICk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uL2luZGV4LnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vZG9tY29udGVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50XCJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy90eXBlcy9pbmRleC50cyIsImV4cG9ydCAqIGZyb20gXCIuL2V4YW1wbGVcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbXBvbmVudHMvaW5kZXgudHMiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBjb3VudGVyID0gMDtcbmZ1bmN0aW9uIG5ld1Njb3BlKCkge1xuICAgIHJldHVybiBcImN5Y2xlXCIgKyArK2NvdW50ZXI7XG59XG5mdW5jdGlvbiBjaGVja0lzb2xhdGVBcmdzKGRhdGFmbG93Q29tcG9uZW50LCBzY29wZSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWZsb3dDb21wb25lbnQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaXJzdCBhcmd1bWVudCBnaXZlbiB0byBpc29sYXRlKCkgbXVzdCBiZSBhIFwiICtcbiAgICAgICAgICAgIFwiJ2RhdGFmbG93Q29tcG9uZW50JyBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKHNjb3BlID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBhcmd1bWVudCBnaXZlbiB0byBpc29sYXRlKCkgbXVzdCBub3QgYmUgbnVsbFwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc29sYXRlQWxsU291cmNlcyhzb3VyY2VzLCBzY29wZSkge1xuICAgIHZhciBzY29wZWRTb3VyY2VzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNba2V5XTtcbiAgICAgICAgaWYgKHNvdXJjZXMuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAgICAgJiYgc291cmNlXG4gICAgICAgICAgICAmJiB0eXBlb2Ygc291cmNlLmlzb2xhdGVTb3VyY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNjb3BlZFNvdXJjZXNba2V5XSA9IHNvdXJjZS5pc29sYXRlU291cmNlKHNvdXJjZSwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNvdXJjZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgc2NvcGVkU291cmNlc1trZXldID0gc291cmNlc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY29wZWRTb3VyY2VzO1xufVxuZnVuY3Rpb24gaXNvbGF0ZUFsbFNpbmtzKHNvdXJjZXMsIHNpbmtzLCBzY29wZSkge1xuICAgIHZhciBzY29wZWRTaW5rcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBzaW5rcykge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1trZXldO1xuICAgICAgICBpZiAoc2lua3MuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAgICAgJiYgc291cmNlXG4gICAgICAgICAgICAmJiB0eXBlb2Ygc291cmNlLmlzb2xhdGVTaW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzY29wZWRTaW5rc1trZXldID0gc291cmNlLmlzb2xhdGVTaW5rKHNpbmtzW2tleV0sIHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaW5rcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBzY29wZWRTaW5rc1trZXldID0gc2lua3Nba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2NvcGVkU2lua3M7XG59XG4vKipcbiAqIFRha2VzIGEgYGNvbXBvbmVudGAgZnVuY3Rpb24gYW5kIGFuIG9wdGlvbmFsIGBzY29wZWAgc3RyaW5nLCBhbmQgcmV0dXJucyBhXG4gKiBzY29wZWQgdmVyc2lvbiBvZiB0aGUgYGNvbXBvbmVudGAgZnVuY3Rpb24uXG4gKlxuICogV2hlbiB0aGUgc2NvcGVkIGNvbXBvbmVudCBpcyBpbnZva2VkLCBlYWNoIHNvdXJjZSBwcm92aWRlZCB0byB0aGUgc2NvcGVkXG4gKiBjb21wb25lbnQgaXMgaXNvbGF0ZWQgdG8gdGhlIGdpdmVuIGBzY29wZWAgdXNpbmdcbiAqIGBzb3VyY2UuaXNvbGF0ZVNvdXJjZShzb3VyY2UsIHNjb3BlKWAsIGlmIHBvc3NpYmxlLiBMaWtld2lzZSwgdGhlIHNpbmtzXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBzY29wZWQgY29tcG9uZW50IGFyZSBpc29sYXRlZCB0byB0aGUgYHNjb3BlYCB1c2luZ1xuICogYHNvdXJjZS5pc29sYXRlU2luayhzaW5rLCBzY29wZSlgLlxuICpcbiAqIElmIHRoZSBgc2NvcGVgIGlzIG5vdCBwcm92aWRlZCwgYSBuZXcgc2NvcGUgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQuXG4gKiBUaGlzIG1lYW5zIHRoYXQgd2hpbGUgKipgaXNvbGF0ZShjb21wb25lbnQsIHNjb3BlKWAgaXMgcHVyZSoqXG4gKiAocmVmZXJlbnRpYWxseSB0cmFuc3BhcmVudCksICoqYGlzb2xhdGUoY29tcG9uZW50KWAgaXMgaW1wdXJlKipcbiAqIChub3QgcmVmZXJlbnRpYWxseSB0cmFuc3BhcmVudCkuIFR3byBjYWxscyB0byBgaXNvbGF0ZShGb28sIGJhcilgIHdpbGxcbiAqIGdlbmVyYXRlIHRoZSBzYW1lIGNvbXBvbmVudC4gQnV0LCB0d28gY2FsbHMgdG8gYGlzb2xhdGUoRm9vKWAgd2lsbCBnZW5lcmF0ZVxuICogdHdvIGRpc3RpbmN0IGNvbXBvbmVudHMuXG4gKlxuICogTm90ZSB0aGF0IGJvdGggYGlzb2xhdGVTb3VyY2UoKWAgYW5kIGBpc29sYXRlU2luaygpYCBhcmUgc3RhdGljIG1lbWJlcnMgb2ZcbiAqIGBzb3VyY2VgLiBUaGUgcmVhc29uIGZvciB0aGlzIGlzIHRoYXQgZHJpdmVycyBwcm9kdWNlIGBzb3VyY2VgIHdoaWxlIHRoZVxuICogYXBwbGljYXRpb24gcHJvZHVjZXMgYHNpbmtgLCBhbmQgaXQncyB0aGUgZHJpdmVyJ3MgcmVzcG9uc2liaWxpdHkgdG9cbiAqIGltcGxlbWVudCBgaXNvbGF0ZVNvdXJjZSgpYCBhbmQgYGlzb2xhdGVTaW5rKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBvbmVudCBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYHNvdXJjZXNgIGFzIGlucHV0XG4gKiBhbmQgb3V0cHV0cyBhIGNvbGxlY3Rpb24gb2YgYHNpbmtzYC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzY29wZSBhbiBvcHRpb25hbCBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGlzb2xhdGUgZWFjaFxuICogYHNvdXJjZXNgIGFuZCBgc2lua3NgIHdoZW4gdGhlIHJldHVybmVkIHNjb3BlZCBjb21wb25lbnQgaXMgaW52b2tlZC5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgc2NvcGVkIGNvbXBvbmVudCBmdW5jdGlvbiB0aGF0LCBhcyB0aGUgb3JpZ2luYWxcbiAqIGBjb21wb25lbnRgIGZ1bmN0aW9uLCB0YWtlcyBgc291cmNlc2AgYW5kIHJldHVybnMgYHNpbmtzYC5cbiAqIEBmdW5jdGlvbiBpc29sYXRlXG4gKi9cbmZ1bmN0aW9uIGlzb2xhdGUoY29tcG9uZW50LCBzY29wZSkge1xuICAgIGlmIChzY29wZSA9PT0gdm9pZCAwKSB7IHNjb3BlID0gbmV3U2NvcGUoKTsgfVxuICAgIGNoZWNrSXNvbGF0ZUFyZ3MoY29tcG9uZW50LCBzY29wZSk7XG4gICAgdmFyIGNvbnZlcnRlZFNjb3BlID0gdHlwZW9mIHNjb3BlID09PSAnc3RyaW5nJyA/IHNjb3BlIDogc2NvcGUudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc2NvcGVkQ29tcG9uZW50KHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIHJlc3QgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHJlc3RbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjb3BlZFNvdXJjZXMgPSBpc29sYXRlQWxsU291cmNlcyhzb3VyY2VzLCBjb252ZXJ0ZWRTY29wZSk7XG4gICAgICAgIHZhciBzaW5rcyA9IGNvbXBvbmVudC5hcHBseSh2b2lkIDAsIFtzY29wZWRTb3VyY2VzXS5jb25jYXQocmVzdCkpO1xuICAgICAgICB2YXIgc2NvcGVkU2lua3MgPSBpc29sYXRlQWxsU2lua3Moc291cmNlcywgc2lua3MsIGNvbnZlcnRlZFNjb3BlKTtcbiAgICAgICAgcmV0dXJuIHNjb3BlZFNpbmtzO1xuICAgIH07XG59XG5pc29sYXRlLnJlc2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY291bnRlciA9IDA7IH07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc29sYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9pc29sYXRlL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0cmluZyA/IHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKSA6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoQ2xhc3NMaXN0KHRhcmdldDogVk5vZGUsIGNsYXNzZXM6IHN0cmluZ1tdLCBjbGFzc2VzVG9BZGQ6IHN0cmluZykge1xuICBsZXQgY2xhc3NOYW1lID0gXCJcIjtcbiAgaWYgKHRhcmdldC5kYXRhKSB7XG4gICAgbGV0IHByb3BzID0gdGFyZ2V0LmRhdGEucHJvcHMgPyB0YXJnZXQuZGF0YS5wcm9wcyA6IHsgY2xhc3NOYW1lOiB0YXJnZXQuc2VsLnNwbGl0KFwiLlwiKS5qb2luKFwiIFwiKSB9O1xuICAgIGxldCBjbGFzc0xpc3QgPSBwcm9wcy5jbGFzc05hbWUuc3BsaXQoXCIgXCIpIGFzIEFycmF5PHN0cmluZz47XG4gICAgY2xhc3NMaXN0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoY2xhc3Nlcy5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xuICAgICAgICBjbGFzc05hbWUgKz0gaXRlbSArIFwiIFwiO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNsYXNzTmFtZSArPSBjbGFzc2VzVG9BZGQ7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQuZGF0YSwge1xuICAgIFwicHJvcHNcIjoge1xuICAgICAgY2xhc3NOYW1lXG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBBZGRzIG9uZSBWTm9kZSB0byBhbm90aGVyIGFuZCBoYW5kbGVzIHVwZGF0ZXMgZm9yIHN0cmVhbSBieSByZXBsYWNpbmcgYmFzZWQgb24gdGhlIGlkZW50aWZpZXIgY2xhc3MuXG4gKiBAcGFyYW0gIHtWTm9kZX0gIGVsZW1lbnQgICAgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWQuXG4gKiBAcGFyYW0gIHtWTm9kZX0gIHRhcmdldCAgICAgVGhlIHRhcmdldCBmb3IgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSAge3N0cmluZ30gaWRlbnRpZmllciBUaGUgaWRlbnRpZnlpbmcgY2xhc3MgZm9yIHRoZSBlbGVtZW50IHRvIGJlIGFkZGVkLlxuICogQHJldHVybiB7QXJyYXl9IFRoZSB0YXJnZXQgZWxlbWVudCdzIGNoaWxkcmVuIHdpdGggdGhlIGVsZW1lbnQgYWRkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFbGVtZW50KGVsZW1lbnQ6IFZOb2RlLCB0YXJnZXQ6IFZOb2RlLCBpZGVudGlmaWVyOiBzdHJpbmcpOiBBcnJheTxWTm9kZT4ge1xuICBsZXQgYyA9IFtdO1xuICBpZiAodGFyZ2V0LmNoaWxkcmVuKSB7XG4gICAgYyA9IHRhcmdldC5jaGlsZHJlbjtcbiAgfVxuICBpZiAodGFyZ2V0LnRleHQpIHtcbiAgICBjLnB1c2godGFyZ2V0LnRleHQpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjaGlsZCA9IGNbaV07XG4gICAgbGV0IGNQcm9wcyA9IGNoaWxkLmRhdGEgPyBjaGlsZC5kYXRhLnByb3BzID8gY2hpbGQuZGF0YS5wcm9wcyA6IHt9IDoge307XG4gICAgaWYgKHR5cGVvZiAoY2hpbGQpICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiAoY1Byb3BzLmNsYXNzTmFtZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGxldCBjbGFzc0xpc3QgPSBjaGlsZC5kYXRhLnByb3BzLmNsYXNzTmFtZS5zcGxpdChcIiBcIikgYXMgQXJyYXk8c3RyaW5nPjtcbiAgICAgIGZvciAobGV0IHMgb2YgY2xhc3NMaXN0KSB7XG4gICAgICAgIGlmIChzID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgICAgYy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYy5wdXNoKGVsZW1lbnQpO1xuICByZXR1cm4gYztcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIGEgbmF0dXJhbCBudW1iZXIgYmV0d2VlbiAxLTE2IHRvIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICBUaGF0IG51bWJlciBhcyB0ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbnVtVG9UZXh0KG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgc3dpdGNoIChudW0pIHtcbiAgICBjYXNlIDE6IHJldHVybiBcIiBvbmVcIjtcbiAgICBjYXNlIDI6IHJldHVybiBcIiB0d29cIjtcbiAgICBjYXNlIDM6IHJldHVybiBcIiB0aHJlZVwiO1xuICAgIGNhc2UgNDogcmV0dXJuIFwiIGZvdXJcIjtcbiAgICBjYXNlIDU6IHJldHVybiBcIiBmaXZlXCI7XG4gICAgY2FzZSA2OiByZXR1cm4gXCIgc2l4XCI7XG4gICAgY2FzZSA3OiByZXR1cm4gXCIgc2V2ZW5cIjtcbiAgICBjYXNlIDg6IHJldHVybiBcIiBlaWdodFwiO1xuICAgIGNhc2UgOTogcmV0dXJuIFwiIG5pbmVcIjtcbiAgICBjYXNlIDEwOiByZXR1cm4gXCIgdGVuXCI7XG4gICAgY2FzZSAxMTogcmV0dXJuIFwiIGVsZXZlblwiO1xuICAgIGNhc2UgMTI6IHJldHVybiBcIiB0d2VsdmVcIjtcbiAgICBjYXNlIDEzOiByZXR1cm4gXCIgdGhpcnRlZW5cIjtcbiAgICBjYXNlIDE0OiByZXR1cm4gXCIgZm91cnRlZW5cIjtcbiAgICBjYXNlIDE1OiByZXR1cm4gXCIgZmlmdGVlblwiO1xuICAgIGNhc2UgMTY6IHJldHVybiBcIiBzaXh0ZWVuXCI7XG4gICAgZGVmYXVsdDogcmV0dXJuIFwiIG9uZVwiO1xuICB9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9pbmRleC50cyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiAgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9hc3NpZ24nKVxuICAsIG5vcm1hbGl6ZU9wdHMgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucycpXG4gICwgaXNDYWxsYWJsZSAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L2lzLWNhbGxhYmxlJylcbiAgLCBjb250YWlucyAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucycpXG5cbiAgLCBkO1xuXG5kID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZHNjciwgdmFsdWUvKiwgb3B0aW9ucyovKSB7XG5cdHZhciBjLCBlLCB3LCBvcHRpb25zLCBkZXNjO1xuXHRpZiAoKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB8fCAodHlwZW9mIGRzY3IgIT09ICdzdHJpbmcnKSkge1xuXHRcdG9wdGlvbnMgPSB2YWx1ZTtcblx0XHR2YWx1ZSA9IGRzY3I7XG5cdFx0ZHNjciA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1syXTtcblx0fVxuXHRpZiAoZHNjciA9PSBudWxsKSB7XG5cdFx0YyA9IHcgPSB0cnVlO1xuXHRcdGUgPSBmYWxzZTtcblx0fSBlbHNlIHtcblx0XHRjID0gY29udGFpbnMuY2FsbChkc2NyLCAnYycpO1xuXHRcdGUgPSBjb250YWlucy5jYWxsKGRzY3IsICdlJyk7XG5cdFx0dyA9IGNvbnRhaW5zLmNhbGwoZHNjciwgJ3cnKTtcblx0fVxuXG5cdGRlc2MgPSB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiBjLCBlbnVtZXJhYmxlOiBlLCB3cml0YWJsZTogdyB9O1xuXHRyZXR1cm4gIW9wdGlvbnMgPyBkZXNjIDogYXNzaWduKG5vcm1hbGl6ZU9wdHMob3B0aW9ucyksIGRlc2MpO1xufTtcblxuZC5ncyA9IGZ1bmN0aW9uIChkc2NyLCBnZXQsIHNldC8qLCBvcHRpb25zKi8pIHtcblx0dmFyIGMsIGUsIG9wdGlvbnMsIGRlc2M7XG5cdGlmICh0eXBlb2YgZHNjciAhPT0gJ3N0cmluZycpIHtcblx0XHRvcHRpb25zID0gc2V0O1xuXHRcdHNldCA9IGdldDtcblx0XHRnZXQgPSBkc2NyO1xuXHRcdGRzY3IgPSBudWxsO1xuXHR9IGVsc2Uge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbM107XG5cdH1cblx0aWYgKGdldCA9PSBudWxsKSB7XG5cdFx0Z2V0ID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKGdldCkpIHtcblx0XHRvcHRpb25zID0gZ2V0O1xuXHRcdGdldCA9IHNldCA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmIChzZXQgPT0gbnVsbCkge1xuXHRcdHNldCA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICghaXNDYWxsYWJsZShzZXQpKSB7XG5cdFx0b3B0aW9ucyA9IHNldDtcblx0XHRzZXQgPSB1bmRlZmluZWQ7XG5cdH1cblx0aWYgKGRzY3IgPT0gbnVsbCkge1xuXHRcdGMgPSB0cnVlO1xuXHRcdGUgPSBmYWxzZTtcblx0fSBlbHNlIHtcblx0XHRjID0gY29udGFpbnMuY2FsbChkc2NyLCAnYycpO1xuXHRcdGUgPSBjb250YWlucy5jYWxsKGRzY3IsICdlJyk7XG5cdH1cblxuXHRkZXNjID0geyBnZXQ6IGdldCwgc2V0OiBzZXQsIGNvbmZpZ3VyYWJsZTogYywgZW51bWVyYWJsZTogZSB9O1xuXHRyZXR1cm4gIW9wdGlvbnMgPyBkZXNjIDogYXNzaWduKG5vcm1hbGl6ZU9wdHMob3B0aW9ucyksIGRlc2MpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcblx0cmV0dXJuIGZuO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUsIGgsIERPTVNvdXJjZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgQW5pbWF0aW9uLCAgQW5pbWF0aW9uRGlyZWN0aW9uLCBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHBhdGNoQ2xhc3NMaXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVHJhbnNpdGlvbiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgVHJhbnNpdGlvbiB7XG4gICAgYW5pbWF0aW9uOiBBbmltYXRpb258c3RyaW5nO1xuICAgIGRpcmVjdGlvbj86IERpcmVjdGlvbnxzdHJpbmc7XG4gICAgYW5pbWF0aW9uRGlyZWN0aW9uPzogQW5pbWF0aW9uRGlyZWN0aW9ufHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgVHJhbnNpdGlvblNvdXJjZXMge1xuICAgIERPTTogRE9NU291cmNlO1xuICAgIHRhcmdldCQ6IFN0cmVhbTxWTm9kZT47XG4gICAgdHJhbnNpdGlvbiQ6IFN0cmVhbTxUcmFuc2l0aW9uPjtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogVHJhbnNpdGlvblNvdXJjZXMpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgY29uc3QgZXZ0ID0gKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChcIi50cmFuc2l0aW9uXCIpLmV2ZW50cyh0eXBlKTtcblxuICAgIGxldCBhbmltYXRpb25FbmQkID0gZXZ0KFwiYW5pbWF0aW9uZW5kXCIpLm1hcChldnQgPT4gKHtcbiAgICAgIGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsXG4gICAgICBkaXJlY3Rpb246IChldnQuY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3V0XCIpID8gRGlyZWN0aW9uLk91dCA6IERpcmVjdGlvbi5JblxuICAgIH0pKSBhcyBTdHJlYW08VHJhbnNpdGlvbj47XG4gICAgbGV0IGFuaW1hdGlvbiQgPSB4cy5tZXJnZShzb3VyY2VzLnRyYW5zaXRpb24kLCBhbmltYXRpb25FbmQkKTtcblxuICAgIGxldCB2VHJlZSQgPSB4cy5jb21iaW5lKGFuaW1hdGlvbiQsIHNvdXJjZXMudGFyZ2V0JCkubWFwKFxuICAgICAgKFt0cmFuc2l0aW9uLCB0YXJnZXRdKSA9PiByZW5kZXIodGFyZ2V0LCB0cmFuc2l0aW9uKVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgZXZlbnRzOiBldnRcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih0YXJnZXQ6IFZOb2RlLCBhcmdzOiBUcmFuc2l0aW9uID0geyBhbmltYXRpb246IEFuaW1hdGlvbi5Ob25lIH0pOiBWTm9kZSB7XG4gICAgbGV0IGM7XG4gICAgbGV0IGRhdGEgPSBwYXRjaENsYXNzTGlzdCh0YXJnZXQsIFtcImhpZGRlblwiLCBcInZpc2libGVcIiwgXCJhbmltYXRpbmdcIiwgXCJ0cmFuc2l0aW9uXCJdLCBnZXRDbGFzc05hbWUoYXJncykpO1xuICAgIGlmICh0YXJnZXQuY2hpbGRyZW4pIHtcbiAgICAgIGMgPSB0YXJnZXQuY2hpbGRyZW47XG4gICAgfVxuICAgIGlmICh0YXJnZXQudGV4dCkge1xuICAgICAgYyA9IHRhcmdldC50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gaCh0YXJnZXQuc2VsLCBkYXRhLCBjKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUodHJhbnNpdGlvbjogVHJhbnNpdGlvbik6IHN0cmluZyB7XG4gICAgaWYgKHRyYW5zaXRpb24uYW5pbWF0aW9uID09PSBBbmltYXRpb24uTm9uZSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb24uZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uT3V0ID8gXCJ0cmFuc2l0aW9uIGhpZGRlblwiIDogXCJ0cmFuc2l0aW9uIHZpc2libGVcIjtcbiAgICB9XG4gICAgbGV0IGFuaW1hdGlvbiA9IEFuaW1hdGlvbi5Ub0NsYXNzbmFtZSh0cmFuc2l0aW9uLmFuaW1hdGlvbik7XG4gICAgaWYgKEFuaW1hdGlvbi5pc1N0YXRpYyh0cmFuc2l0aW9uLmFuaW1hdGlvbikpIHtcbiAgICAgIHJldHVybiBcInZpc2libGUgYW5pbWF0aW5nIHRyYW5zaXRpb24gXCIgKyBhbmltYXRpb247XG4gICAgfVxuICAgIGxldCBkaXJlY3Rpb24gPSBEaXJlY3Rpb24uVG9DbGFzc25hbWUodHJhbnNpdGlvbi5kaXJlY3Rpb24pO1xuICAgIGlmIChBbmltYXRpb24uaXNEaXJlY3Rpb25hbCh0cmFuc2l0aW9uLmFuaW1hdGlvbikpIHtcbiAgICAgIGFuaW1hdGlvbiArPSBBbmltYXRpb25EaXJlY3Rpb24uVG9DbGFzc25hbWUodHJhbnNpdGlvbi5hbmltYXRpb25EaXJlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gXCJ2aXNpYmxlIHRyYW5zaXRpb24gYW5pbWF0aW5nIFwiICsgZGlyZWN0aW9uICsgYW5pbWF0aW9uO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy90cmFuc2l0aW9uL2luZGV4LnRzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgdmFyIEVMRU1fVFlQRSA9IDE7XG4gICAgdmFyIEZSQUdfVFlQRSA9IDExO1xuICAgIHJldHVybiB0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdvYmplY3QnID9cbiAgICAgICAgb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgb2JqIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCA6XG4gICAgICAgIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiZcbiAgICAgICAgICAgIChvYmoubm9kZVR5cGUgPT09IEVMRU1fVFlQRSB8fCBvYmoubm9kZVR5cGUgPT09IEZSQUdfVFlQRSkgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmoubm9kZU5hbWUgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5TQ09QRV9QUkVGSVggPSAnJCRDWUNMRURPTSQkLSc7XG5mdW5jdGlvbiBnZXRFbGVtZW50KHNlbGVjdG9ycykge1xuICAgIHZhciBkb21FbGVtZW50ID0gdHlwZW9mIHNlbGVjdG9ycyA9PT0gJ3N0cmluZycgP1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycykgOlxuICAgICAgICBzZWxlY3RvcnM7XG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgPT09ICdzdHJpbmcnICYmIGRvbUVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlbmRlciBpbnRvIHVua25vd24gZWxlbWVudCBgXCIgKyBzZWxlY3RvcnMgKyBcImBcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpc0VsZW1lbnQoZG9tRWxlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQgbmVpdGhlciBhICcgK1xuICAgICAgICAgICAgJ3NlbGVjdG9yIHN0cmluZy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5leHBvcnRzLmdldEVsZW1lbnQgPSBnZXRFbGVtZW50O1xuLyoqXG4gKiBUaGUgZnVsbCBzY29wZSBvZiBhIG5hbWVzcGFjZSBpcyB0aGUgXCJhYnNvbHV0ZSBwYXRoXCIgb2Ygc2NvcGVzIGZyb21cbiAqIHBhcmVudCB0byBjaGlsZC4gVGhpcyBpcyBleHRyYWN0ZWQgZnJvbSB0aGUgbmFtZXNwYWNlLCBmaWx0ZXIgb25seSBmb3JcbiAqIHNjb3BlcyBpbiB0aGUgbmFtZXNwYWNlLlxuICovXG5mdW5jdGlvbiBnZXRGdWxsU2NvcGUobmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuIG5hbWVzcGFjZVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmluZGV4T2YoZXhwb3J0cy5TQ09QRV9QUkVGSVgpID4gLTE7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMucmVwbGFjZShleHBvcnRzLlNDT1BFX1BSRUZJWCwgJycpOyB9KVxuICAgICAgICAuam9pbignLScpO1xufVxuZXhwb3J0cy5nZXRGdWxsU2NvcGUgPSBnZXRGdWxsU2NvcGU7XG5mdW5jdGlvbiBnZXRTZWxlY3RvcnMobmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuIG5hbWVzcGFjZS5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuaW5kZXhPZihleHBvcnRzLlNDT1BFX1BSRUZJWCkgPT09IC0xOyB9KS5qb2luKCcgJyk7XG59XG5leHBvcnRzLmdldFNlbGVjdG9ycyA9IGdldFNlbGVjdG9ycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwUHJlZml4ID0gZXhwb3J0cy5zdHJpcFByZWZpeCA9IGZ1bmN0aW9uIHN0cmlwUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC5pbmRleE9mKHByZWZpeCkgPT09IDAgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9oaXN0b3J5L34vaGlzdG9yeS9QYXRoVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIGFkYXB0U3RyZWFtID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH07XG5mdW5jdGlvbiBzZXRBZGFwdChmKSB7XG4gICAgYWRhcHRTdHJlYW0gPSBmO1xufVxuZXhwb3J0cy5zZXRBZGFwdCA9IHNldEFkYXB0O1xuZnVuY3Rpb24gYWRhcHQoc3RyZWFtKSB7XG4gICAgcmV0dXJuIGFkYXB0U3RyZWFtKHN0cmVhbSk7XG59XG5leHBvcnRzLmFkYXB0ID0gYWRhcHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGFwdC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL3J1bi9saWIvYWRhcHQuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2lzLWltcGxlbWVudGVkJykoKSA/IFN5bWJvbCA6IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtc3ltYm9sL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB2bm9kZV8xID0gcmVxdWlyZShcIi4vdm5vZGVcIik7XG52YXIgaXMgPSByZXF1aXJlKFwiLi9pc1wiKTtcbmZ1bmN0aW9uIGFkZE5TKGRhdGEsIGNoaWxkcmVuLCBzZWwpIHtcbiAgICBkYXRhLm5zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgICBpZiAoc2VsICE9PSAnZm9yZWlnbk9iamVjdCcgJiYgY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGREYXRhID0gY2hpbGRyZW5baV0uZGF0YTtcbiAgICAgICAgICAgIGlmIChjaGlsZERhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFkZE5TKGNoaWxkRGF0YSwgY2hpbGRyZW5baV0uY2hpbGRyZW4sIGNoaWxkcmVuW2ldLnNlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBoKHNlbCwgYiwgYykge1xuICAgIHZhciBkYXRhID0ge30sIGNoaWxkcmVuLCB0ZXh0LCBpO1xuICAgIGlmIChjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGF0YSA9IGI7XG4gICAgICAgIGlmIChpcy5hcnJheShjKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzLnByaW1pdGl2ZShjKSkge1xuICAgICAgICAgICAgdGV4dCA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAmJiBjLnNlbCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY107XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpcy5hcnJheShiKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzLnByaW1pdGl2ZShiKSkge1xuICAgICAgICAgICAgdGV4dCA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiAmJiBiLnNlbCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbYl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gYjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXMuYXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGlzLnByaW1pdGl2ZShjaGlsZHJlbltpXSkpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gPSB2bm9kZV8xLnZub2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VsWzBdID09PSAncycgJiYgc2VsWzFdID09PSAndicgJiYgc2VsWzJdID09PSAnZycgJiZcbiAgICAgICAgKHNlbC5sZW5ndGggPT09IDMgfHwgc2VsWzNdID09PSAnLicgfHwgc2VsWzNdID09PSAnIycpKSB7XG4gICAgICAgIGFkZE5TKGRhdGEsIGNoaWxkcmVuLCBzZWwpO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGVfMS52bm9kZShzZWwsIGRhdGEsIGNoaWxkcmVuLCB0ZXh0LCB1bmRlZmluZWQpO1xufVxuZXhwb3J0cy5oID0gaDtcbjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS9oLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZSA9IHJlcXVpcmUoJ3Jlc29sdmUtcGF0aG5hbWUnKTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzb2x2ZVBhdGhuYW1lKTtcblxudmFyIF92YWx1ZUVxdWFsID0gcmVxdWlyZSgndmFsdWUtZXF1YWwnKTtcblxudmFyIF92YWx1ZUVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbHVlRXF1YWwpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjcmVhdGVMb2NhdGlvbiA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gKDAsIF9QYXRoVXRpbHMucGFyc2VQYXRoKShwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAoMCwgX3Jlc29sdmVQYXRobmFtZTIuZGVmYXVsdCkobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxudmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiAoMCwgX3ZhbHVlRXF1YWwyLmRlZmF1bHQpKGEuc3RhdGUsIGIuc3RhdGUpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9oaXN0b3J5L34vd2FybmluZy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKClcblx0PyBPYmplY3Quc2V0UHJvdG90eXBlT2Zcblx0OiByZXF1aXJlKCcuL3NoaW0nKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjMuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5mb3JPd25SaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IGl0ZXJhdGVlIDogaWRlbnRpdHkpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JPd247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLmZvcm93bi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgVk5vZGUsIGkgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbnRlbnRPYmogfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbG9yLCBTaXplLCBJY29uVHlwZSB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgSWNvbiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGJ1dHRvbjogYm9vbGVhbjtcbiAgICBib3JkZXJlZDogYm9vbGVhbjtcbiAgICBjaXJjdWxhcjogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGZpdHRlZDogYm9vbGVhbjtcbiAgICBsaW5rOiBib29sZWFuO1xuICAgIGZsaXBwZWQ6IGJvb2xlYW47XG4gICAgcm90YXRlZDogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIEljb25BcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgSWNvblR5cGUgfCBzdHJpbmcsIENvbnRlbnRPYmo8SWNvblR5cGUgfCBzdHJpbmc+PjtcbiAgZXhwb3J0IHR5cGUgSWNvblNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBJY29uVHlwZSB8IHN0cmluZywgQ29udGVudE9iajxJY29uVHlwZSB8IHN0cmluZz4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogSWNvblNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgaWNvbiwgXCIuaWNvblwiLCBzY29wZSk7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogSWNvbkFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IEljb25UeXBlIHwgc3RyaW5nLCBhcmcyPzogSWNvblR5cGUgfCBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KGljb24sIG1ha2VJc0FyZ3MoaXNJY29uVHlwZSksIGlzSWNvblR5cGUsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaWNvbihhcmdzOiBJY29uQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gdHlwZW9mIChhcmdzLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiID8gaXNJY29uVHlwZShhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW4gOiAtMTtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBnZXRDbGFzc25hbWUocHJvcHMsIGNvbnRlbnQpO1xuICAgIHJldHVybiBjbGFzc05hbWUgIT09IFwidWkgaWNvblwiID8gaSh7IHByb3BzOiB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0gfSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPiwgY29udGVudDogSWNvblR5cGUgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLmJ1dHRvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGJ1dHRvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYm9yZGVyZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBib3JkZXJlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2lyY3VsYXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjaXJjdWxhclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubG9hZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxvYWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZpdHRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGZpdHRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGluaykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxpbmtcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZsaXBwZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmbGlwcGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yb3RhdGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcm90YXRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IEljb25UeXBlLlRvQ2xhc3NuYW1lKGNvbnRlbnQpO1xuICAgIHJldHVybiBjbGFzc05hbWUgKyBcIiBpY29uXCI7XG4gIH1cblxuICBmdW5jdGlvbiBpc0ljb25UeXBlKG9iaik6IG9iaiBpcyBJY29uVHlwZSB8IHN0cmluZyB7XG4gICAgcmV0dXJuIHR5cGVvZiAob2JqKSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgKG9iaikgPT09IFwibnVtYmVyXCI7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9pY29uL2luZGV4LnRzIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZShcInhzdHJlYW1cIik7XG5mdW5jdGlvbiBmcm9tRXZlbnQoZWxlbWVudCwgZXZlbnROYW1lLCB1c2VDYXB0dXJlKSB7XG4gICAgaWYgKHVzZUNhcHR1cmUgPT09IHZvaWQgMCkgeyB1c2VDYXB0dXJlID0gZmFsc2U7IH1cbiAgICByZXR1cm4geHN0cmVhbV8xLlN0cmVhbS5jcmVhdGUoe1xuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCA9IGZ1bmN0aW9uIG5leHQoZXZlbnQpIHsgbGlzdGVuZXIubmV4dChldmVudCk7IH07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMubmV4dCwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMubmV4dCwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21FdmVudCA9IGZyb21FdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvZnJvbUV2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBoaXN0b3J5XzEgPSByZXF1aXJlKFwiaGlzdG9yeVwiKTtcbnZhciBjcmVhdGVIaXN0b3J5XzEgPSByZXF1aXJlKFwiLi9jcmVhdGVIaXN0b3J5JFwiKTtcbmZ1bmN0aW9uIG1ha2VIaXN0b3J5RHJpdmVyKG9wdGlvbnMpIHtcbiAgICB2YXIgaGlzdG9yeSA9IGhpc3RvcnlfMS5jcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gaGlzdG9yeURyaXZlcihzaW5rJCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlSGlzdG9yeV8xLmNyZWF0ZUhpc3RvcnkkKGhpc3RvcnksIHNpbmskKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlSGlzdG9yeURyaXZlciA9IG1ha2VIaXN0b3J5RHJpdmVyO1xuZnVuY3Rpb24gbWFrZVNlcnZlckhpc3RvcnlEcml2ZXIob3B0aW9ucykge1xuICAgIHZhciBoaXN0b3J5ID0gaGlzdG9yeV8xLmNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNlcnZlckhpc3RvcnlEcml2ZXIoc2luayQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUhpc3RvcnlfMS5jcmVhdGVIaXN0b3J5JChoaXN0b3J5LCBzaW5rJCk7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZVNlcnZlckhpc3RvcnlEcml2ZXIgPSBtYWtlU2VydmVySGlzdG9yeURyaXZlcjtcbmZ1bmN0aW9uIG1ha2VIYXNoSGlzdG9yeURyaXZlcihvcHRpb25zKSB7XG4gICAgdmFyIGhpc3RvcnkgPSBoaXN0b3J5XzEuY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhhc2hIaXN0b3J5RHJpdmVyKHNpbmskKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVIaXN0b3J5XzEuY3JlYXRlSGlzdG9yeSQoaGlzdG9yeSwgc2luayQpO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VIYXNoSGlzdG9yeURyaXZlciA9IG1ha2VIYXNoSGlzdG9yeURyaXZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyaXZlcnMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9oaXN0b3J5L2xpYi9kcml2ZXJzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvaGlzdG9yeS9+L2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG4gICwgaWQgPSB0b1N0cmluZy5jYWxsKChmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiAodG9TdHJpbmcuY2FsbCh4KSA9PT0gaWQpOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvZnVuY3Rpb24vaXMtYXJndW1lbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKClcblx0PyBPYmplY3QuYXNzaWduXG5cdDogcmVxdWlyZSgnLi9zaGltJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxuICAsIGlkID0gdG9TdHJpbmcuY2FsbCgnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgpIHtcblx0cmV0dXJuICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHx8ICh4ICYmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcpICYmXG5cdFx0KCh4IGluc3RhbmNlb2YgU3RyaW5nKSB8fCAodG9TdHJpbmcuY2FsbCh4KSA9PT0gaWQpKSkgfHwgZmFsc2U7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvc3RyaW5nL2lzLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xlYXIgICAgPSByZXF1aXJlKCdlczUtZXh0L2FycmF5LyMvY2xlYXInKVxuICAsIGFzc2lnbiAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvYXNzaWduJylcbiAgLCBjYWxsYWJsZSA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlJylcbiAgLCB2YWx1ZSAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlJylcbiAgLCBkICAgICAgICA9IHJlcXVpcmUoJ2QnKVxuICAsIGF1dG9CaW5kID0gcmVxdWlyZSgnZC9hdXRvLWJpbmQnKVxuICAsIFN5bWJvbCAgID0gcmVxdWlyZSgnZXM2LXN5bWJvbCcpXG5cbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIGRlZmluZVByb3BlcnRpZXMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllc1xuICAsIEl0ZXJhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEl0ZXJhdG9yID0gZnVuY3Rpb24gKGxpc3QsIGNvbnRleHQpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIEl0ZXJhdG9yKSkgcmV0dXJuIG5ldyBJdGVyYXRvcihsaXN0LCBjb250ZXh0KTtcblx0ZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG5cdFx0X19saXN0X186IGQoJ3cnLCB2YWx1ZShsaXN0KSksXG5cdFx0X19jb250ZXh0X186IGQoJ3cnLCBjb250ZXh0KSxcblx0XHRfX25leHRJbmRleF9fOiBkKCd3JywgMClcblx0fSk7XG5cdGlmICghY29udGV4dCkgcmV0dXJuO1xuXHRjYWxsYWJsZShjb250ZXh0Lm9uKTtcblx0Y29udGV4dC5vbignX2FkZCcsIHRoaXMuX29uQWRkKTtcblx0Y29udGV4dC5vbignX2RlbGV0ZScsIHRoaXMuX29uRGVsZXRlKTtcblx0Y29udGV4dC5vbignX2NsZWFyJywgdGhpcy5fb25DbGVhcik7XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzKEl0ZXJhdG9yLnByb3RvdHlwZSwgYXNzaWduKHtcblx0Y29uc3RydWN0b3I6IGQoSXRlcmF0b3IpLFxuXHRfbmV4dDogZChmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGk7XG5cdFx0aWYgKCF0aGlzLl9fbGlzdF9fKSByZXR1cm47XG5cdFx0aWYgKHRoaXMuX19yZWRvX18pIHtcblx0XHRcdGkgPSB0aGlzLl9fcmVkb19fLnNoaWZ0KCk7XG5cdFx0XHRpZiAoaSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gaTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX19uZXh0SW5kZXhfXyA8IHRoaXMuX19saXN0X18ubGVuZ3RoKSByZXR1cm4gdGhpcy5fX25leHRJbmRleF9fKys7XG5cdFx0dGhpcy5fdW5CaW5kKCk7XG5cdH0pLFxuXHRuZXh0OiBkKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2NyZWF0ZVJlc3VsdCh0aGlzLl9uZXh0KCkpOyB9KSxcblx0X2NyZWF0ZVJlc3VsdDogZChmdW5jdGlvbiAoaSkge1xuXHRcdGlmIChpID09PSB1bmRlZmluZWQpIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcblx0XHRyZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IHRoaXMuX3Jlc29sdmUoaSkgfTtcblx0fSksXG5cdF9yZXNvbHZlOiBkKGZ1bmN0aW9uIChpKSB7IHJldHVybiB0aGlzLl9fbGlzdF9fW2ldOyB9KSxcblx0X3VuQmluZDogZChmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fX2xpc3RfXyA9IG51bGw7XG5cdFx0ZGVsZXRlIHRoaXMuX19yZWRvX187XG5cdFx0aWYgKCF0aGlzLl9fY29udGV4dF9fKSByZXR1cm47XG5cdFx0dGhpcy5fX2NvbnRleHRfXy5vZmYoJ19hZGQnLCB0aGlzLl9vbkFkZCk7XG5cdFx0dGhpcy5fX2NvbnRleHRfXy5vZmYoJ19kZWxldGUnLCB0aGlzLl9vbkRlbGV0ZSk7XG5cdFx0dGhpcy5fX2NvbnRleHRfXy5vZmYoJ19jbGVhcicsIHRoaXMuX29uQ2xlYXIpO1xuXHRcdHRoaXMuX19jb250ZXh0X18gPSBudWxsO1xuXHR9KSxcblx0dG9TdHJpbmc6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gJ1tvYmplY3QgSXRlcmF0b3JdJzsgfSlcbn0sIGF1dG9CaW5kKHtcblx0X29uQWRkOiBkKGZ1bmN0aW9uIChpbmRleCkge1xuXHRcdGlmIChpbmRleCA+PSB0aGlzLl9fbmV4dEluZGV4X18pIHJldHVybjtcblx0XHQrK3RoaXMuX19uZXh0SW5kZXhfXztcblx0XHRpZiAoIXRoaXMuX19yZWRvX18pIHtcblx0XHRcdGRlZmluZVByb3BlcnR5KHRoaXMsICdfX3JlZG9fXycsIGQoJ2MnLCBbaW5kZXhdKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX19yZWRvX18uZm9yRWFjaChmdW5jdGlvbiAocmVkbywgaSkge1xuXHRcdFx0aWYgKHJlZG8gPj0gaW5kZXgpIHRoaXMuX19yZWRvX19baV0gPSArK3JlZG87XG5cdFx0fSwgdGhpcyk7XG5cdFx0dGhpcy5fX3JlZG9fXy5wdXNoKGluZGV4KTtcblx0fSksXG5cdF9vbkRlbGV0ZTogZChmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHR2YXIgaTtcblx0XHRpZiAoaW5kZXggPj0gdGhpcy5fX25leHRJbmRleF9fKSByZXR1cm47XG5cdFx0LS10aGlzLl9fbmV4dEluZGV4X187XG5cdFx0aWYgKCF0aGlzLl9fcmVkb19fKSByZXR1cm47XG5cdFx0aSA9IHRoaXMuX19yZWRvX18uaW5kZXhPZihpbmRleCk7XG5cdFx0aWYgKGkgIT09IC0xKSB0aGlzLl9fcmVkb19fLnNwbGljZShpLCAxKTtcblx0XHR0aGlzLl9fcmVkb19fLmZvckVhY2goZnVuY3Rpb24gKHJlZG8sIGkpIHtcblx0XHRcdGlmIChyZWRvID4gaW5kZXgpIHRoaXMuX19yZWRvX19baV0gPSAtLXJlZG87XG5cdFx0fSwgdGhpcyk7XG5cdH0pLFxuXHRfb25DbGVhcjogZChmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuX19yZWRvX18pIGNsZWFyLmNhbGwodGhpcy5fX3JlZG9fXyk7XG5cdFx0dGhpcy5fX25leHRJbmRleF9fID0gMDtcblx0fSlcbn0pKSk7XG5cbmRlZmluZVByb3BlcnR5KEl0ZXJhdG9yLnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCBkKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXM7XG59KSk7XG5kZWZpbmVQcm9wZXJ0eShJdGVyYXRvci5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywgZCgnJywgJ0l0ZXJhdG9yJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1pdGVyYXRvci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xudmFyIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInYF0vZyxcbiAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbi8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG52YXIgaHRtbEVzY2FwZXMgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5OycsXG4gICdgJzogJyYjOTY7J1xufTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbi8qKlxuICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAqL1xudmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgXCInXCIsIGFuZCBcIlxcYFwiIGluIGBzdHJpbmdgIHRvXG4gKiB0aGVpciBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gKlxuICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAqXG4gKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQmFja3RpY2tzIGFyZSBlc2NhcGVkIGJlY2F1c2UgaW4gSUUgPCA5LCB0aGV5IGNhbiBicmVhayBvdXQgb2ZcbiAqIGF0dHJpYnV0ZSB2YWx1ZXMgb3IgSFRNTCBjb21tZW50cy4gU2VlIFsjNTldKGh0dHBzOi8vaHRtbDVzZWMub3JnLyM1OSksXG4gKiBbIzEwMl0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzEwMiksIFsjMTA4XShodHRwczovL2h0bWw1c2VjLm9yZy8jMTA4KSwgYW5kXG4gKiBbIzEzM10oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzEzMykgb2YgdGhlXG4gKiBbSFRNTDUgU2VjdXJpdHkgQ2hlYXRzaGVldF0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gKiBYU1MgdmVjdG9ycy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICovXG5mdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgIDogc3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2guZXNjYXBlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHZub2RlKHNlbCwgZGF0YSwgY2hpbGRyZW4sIHRleHQsIGVsbSkge1xuICAgIHZhciBrZXkgPSBkYXRhID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBkYXRhLmtleTtcbiAgICByZXR1cm4geyBzZWw6IHNlbCwgZGF0YTogZGF0YSwgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB0ZXh0OiB0ZXh0LCBlbG06IGVsbSwga2V5OiBrZXkgfTtcbn1cbmV4cG9ydHMudm5vZGUgPSB2bm9kZTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZub2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dm5vZGUuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tL3Zub2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSwgTWVtb3J5U3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IGgsIGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9tb2R1bGVzL3RyYW5zaXRpb25cIjtcbmltcG9ydCB7IHBhdGNoQ2xhc3NMaXN0LCBhZGRFbGVtZW50IH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyBBbmltYXRpb24sIERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBDb250ZW50T2JqLCBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgRXZlbnRTZWxlY3RvciB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIERpbW1lciB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBEaW1tZXJTb3VyY2VzIGV4dGVuZHMgQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj4ge1xuICAgIGFyZ3M/OiB7XG4gICAgICBvbiQ/OiBTdHJlYW08Ym9vbGVhbj47XG4gICAgICB0YXJnZXQkPzogU3RyZWFtPHN0cmluZyB8IFZOb2RlPjtcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBEaW1tZXJTb3VyY2VzLCBzY29wZT86IHN0cmluZyk6IENvbXBvbmVudFNpbmtzIHtcbiAgICBmdW5jdGlvbiBtYWluKHNvdXJjZXM6IERpbW1lclNvdXJjZXMpIHtcbiAgICAgIGNvbnN0IGV2dCA9ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIuZGltbWFibGVcIikuZXZlbnRzKHR5cGUpO1xuICAgICAgY29uc3QgcHJvcHMkID0gc291cmNlcy5wcm9wcyQgPyBzb3VyY2VzLnByb3BzJCA6IHhzLm9mKHt9KTtcbiAgICAgIGNvbnN0IGNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQubWFwKGMgPT4gaXNET01Db250ZW50KGMpID8gYyA6IGMubWFpbikgOiB4cy5vZihbXSk7XG5cbiAgICAgIC8qKiogQ3JlYXRlIGFuaW1hdGlvbiQgKioqL1xuICAgICAgY29uc3Qgb24kID0gc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy5vbiQgPyBzb3VyY2VzLmFyZ3Mub24kLnJlbWVtYmVyKCkgOiBvbkhvdmVyKGV2dCk7XG4gICAgICBjb25zdCB0YXJnZXQkID0gc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy50YXJnZXQkID8gc291cmNlcy5hcmdzLnRhcmdldCQucmVtZW1iZXIoKSA6IHhzLm9mKFwicGFnZVwiKTtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb24kID0gb24kXG4gICAgICAgIC5mb2xkKChwcmV2QW5pbSwgYWN0aXZlKSA9PiBwcmV2QW5pbS5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5Ob25lXG4gICAgICAgICAgPyAoeyBhbmltYXRpb246IEFuaW1hdGlvbi5Ob25lLCBkaXJlY3Rpb246IGFjdGl2ZSA/IERpcmVjdGlvbi5JbiA6IERpcmVjdGlvbi5PdXQgfSlcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogQW5pbWF0aW9uLkZhZGUsIGRpcmVjdGlvbjogYWN0aXZlID8gRGlyZWN0aW9uLkluIDogRGlyZWN0aW9uLk91dFxuICAgICAgICAgIH1cbiAgICAgICAgLCAoeyBhbmltYXRpb246IEFuaW1hdGlvbi5Ob25lLCBkaXJlY3Rpb246IERpcmVjdGlvbi5Ob25lIH0pKTtcblxuICAgICAgLyoqKiBBbmltYXRlIGNvbnRlbnQgKioqL1xuICAgICAgY29uc3QgY2hpbGRyZW4kID0geHMuY29tYmluZShjb250ZW50JCwgcHJvcHMkLCB0YXJnZXQkKVxuICAgICAgICAubWFwKChbY29udGVudCwgcHJvcHMsIHRhcmdldF0pID0+IGRpbW1lcihjb250ZW50LCBwcm9wcywgdGFyZ2V0KSk7XG4gICAgICBjb25zdCBhbmltYXRlZENvbnRlbnQgPSBUcmFuc2l0aW9uLnJ1bih7IERPTTogc291cmNlcy5ET00sIHRyYW5zaXRpb24kLCB0YXJnZXQkOiBjaGlsZHJlbiQgfSk7XG5cbiAgICAgIC8qKiogUmVuZGVyIHZpZXcgKioqL1xuICAgICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZSh0YXJnZXQkLCBhbmltYXRlZENvbnRlbnQuRE9NLCBvbiQpXG4gICAgICAgIC5tYXAoKFt0YXJnZXQsIGNvbnRlbnQsIGFjdGl2ZV0pID0+IGRpbUVsZW1lbnQodGFyZ2V0LCBjb250ZW50LCBhY3RpdmUpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogdlRyZWUkLFxuICAgICAgICBldmVudHM6ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIuZGltbWVyXCIpLmV2ZW50cyh0eXBlKSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGlzb2xhdGVkTWFpbiA9IGlzb2xhdGUobWFpbiwgc2NvcGUpO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBkaW1tZXIoY29udGVudDogRE9NQ29udGVudCwgcHJvcHM6IFBhcnRpYWw8UHJvcHM+LCB0YXJnZXQ6IFN0cmluZyB8IFZOb2RlID0gXCJwYWdlXCIpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHRhcmdldCA9PT0gXCJwYWdlXCJcbiAgICAgID8gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcInVpIFwiICsgKHByb3BzLmludmVydGVkID8gXCJpbnZlcnRlZCBcIiA6IFwiXCIpICsgXCJkaW1tZXIgbW9kYWxzIHBhZ2UgZGltbWVyXCIgfSB9LCBjb250ZW50KVxuICAgICAgOiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwidWkgXCIgKyAocHJvcHMuaW52ZXJ0ZWQgPyBcImludmVydGVkIFwiIDogXCJcIikgKyBcInRhcmdldHRlZCBkaW1tZXJcIiB9IH0sIFtcbiAgICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImNvbnRlbnRcIiB9IH0sIFtcbiAgICAgICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiY2VudGVyXCIgfSB9LFxuICAgICAgICAgICAgY29udGVudFxuICAgICAgICAgIClcbiAgICAgICAgXSlcbiAgICAgIF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGltRWxlbWVudCh0YXJnZXRPclN0cmluZzogVk5vZGUgfCBzdHJpbmcsIGNvbnRlbnQ6IFZOb2RlLCBhY3RpdmU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBpc1BhZ2UgPSB0eXBlb2YgKHRhcmdldE9yU3RyaW5nKSA9PT0gXCJzdHJpbmdcIjtcbiAgICBsZXQgdGFyZ2V0ID0gaXNQYWdlID8gY29udGVudCA6IHRhcmdldE9yU3RyaW5nIGFzIFZOb2RlO1xuICAgIGxldCBjbGFzc05hbWUgPSBpc1BhZ2UgPyBcIlwiIDogXCJkaW1tYWJsZVwiLCBjO1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBpc1BhZ2UgPyBcImFjdGl2ZVwiIDogXCIgZGltbWVkXCI7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBwYXRjaENsYXNzTGlzdCh0YXJnZXQsIFtcImRpbW1hYmxlXCIsIFwiZGltbWVkXCIsIFwiaW52ZXJ0ZWRcIiwgXCJhY3RpdmVcIl0sIGNsYXNzTmFtZSk7XG4gICAgaWYgKGlzUGFnZSkge1xuICAgICAgaWYgKHRhcmdldC5jaGlsZHJlbikge1xuICAgICAgICBjID0gdGFyZ2V0LmNoaWxkcmVuO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGFyZ2V0LnRleHQpIHtcbiAgICAgICAgYyA9IHRhcmdldC50ZXh0O1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGMgPSBhZGRFbGVtZW50KGNvbnRlbnQsIHRhcmdldCwgXCJ0YXJnZXR0ZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBoKHRhcmdldC5zZWwsIGRhdGEsIGMpO1xuICB9XG4gIGZ1bmN0aW9uIG9uSG92ZXIoZXZlbnRzOiBFdmVudFNlbGVjdG9yKTogTWVtb3J5U3RyZWFtPGJvb2xlYW4+IHtcbiAgICByZXR1cm4geHMubWVyZ2UoZXZlbnRzKFwibW91c2VlbnRlclwiKSwgZXZlbnRzKFwibW91c2VsZWF2ZVwiKSlcbiAgICAgIC5tYXAoZXZ0ID0+IChldnQgYXMgTW91c2VFdmVudCkudHlwZSA9PT0gXCJtb3VzZWVudGVyXCIpLnN0YXJ0V2l0aChmYWxzZSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2RpbW1lci9pbmRleC50cyIsIlwidXNlIHN0cmljdFwiO1xudmFyIGluZGV4XzEgPSByZXF1aXJlKFwiLi4vaW5kZXhcIik7XG52YXIgZW1wdHkgPSB7fTtcbnZhciBEcm9wUmVwZWF0c09wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEcm9wUmVwZWF0c09wZXJhdG9yKGlucywgZm4pIHtcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMuZm4gPSBmbjtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Ryb3BSZXBlYXRzJztcbiAgICAgICAgdGhpcy5vdXQgPSBudWxsO1xuICAgICAgICB0aGlzLnYgPSBlbXB0eTtcbiAgICB9XG4gICAgRHJvcFJlcGVhdHNPcGVyYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIERyb3BSZXBlYXRzT3BlcmF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IG51bGw7XG4gICAgICAgIHRoaXMudiA9IGVtcHR5O1xuICAgIH07XG4gICAgRHJvcFJlcGVhdHNPcGVyYXRvci5wcm90b3R5cGUuaXNFcSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZuID8gdGhpcy5mbih4LCB5KSA6IHggPT09IHk7XG4gICAgfTtcbiAgICBEcm9wUmVwZWF0c09wZXJhdG9yLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHYgPSB0aGlzLnY7XG4gICAgICAgIGlmICh2ICE9PSBlbXB0eSAmJiB0aGlzLmlzRXEodCwgdikpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudiA9IEFycmF5LmlzQXJyYXkodCkgPyB0LnNsaWNlKCkgOiB0O1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgRHJvcFJlcGVhdHNPcGVyYXRvci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRHJvcFJlcGVhdHNPcGVyYXRvci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIERyb3BSZXBlYXRzT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5Ecm9wUmVwZWF0c09wZXJhdG9yID0gRHJvcFJlcGVhdHNPcGVyYXRvcjtcbi8qKlxuICogRHJvcHMgY29uc2VjdXRpdmUgZHVwbGljYXRlIHZhbHVlcyBpbiBhIHN0cmVhbS5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLTItLTEtLTEtLTEtLTItLTMtLTQtLTMtLTN8XG4gKiAgICAgZHJvcFJlcGVhdHNcbiAqIC0tMS0tMi0tMS0tLS0tLS0tMi0tMy0tNC0tMy0tLXxcbiAqIGBgYFxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBkcm9wUmVwZWF0cyBmcm9tICd4c3RyZWFtL2V4dHJhL2Ryb3BSZXBlYXRzJ1xuICpcbiAqIGNvbnN0IHN0cmVhbSA9IHhzLm9mKDEsIDIsIDEsIDEsIDEsIDIsIDMsIDQsIDMsIDMpXG4gKiAgIC5jb21wb3NlKGRyb3BSZXBlYXRzKCkpXG4gKlxuICogc3RyZWFtLmFkZExpc3RlbmVyKHtcbiAqICAgbmV4dDogaSA9PiBjb25zb2xlLmxvZyhpKSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmVycm9yKGVyciksXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnY29tcGxldGVkJylcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBgYGB0ZXh0XG4gKiA+IDFcbiAqID4gMlxuICogPiAxXG4gKiA+IDJcbiAqID4gM1xuICogPiA0XG4gKiA+IDNcbiAqID4gY29tcGxldGVkXG4gKiBgYGBcbiAqXG4gKiBFeGFtcGxlIHdpdGggYSBjdXN0b20gaXNFcXVhbCBmdW5jdGlvbjpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IGRyb3BSZXBlYXRzIGZyb20gJ3hzdHJlYW0vZXh0cmEvZHJvcFJlcGVhdHMnXG4gKlxuICogY29uc3Qgc3RyZWFtID0geHMub2YoJ2EnLCAnYicsICdhJywgJ0EnLCAnQicsICdiJylcbiAqICAgLmNvbXBvc2UoZHJvcFJlcGVhdHMoKHgsIHkpID0+IHgudG9Mb3dlckNhc2UoKSA9PT0geS50b0xvd2VyQ2FzZSgpKSlcbiAqXG4gKiBzdHJlYW0uYWRkTGlzdGVuZXIoe1xuICogICBuZXh0OiBpID0+IGNvbnNvbGUubG9nKGkpLFxuICogICBlcnJvcjogZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSxcbiAqICAgY29tcGxldGU6ICgpID0+IGNvbnNvbGUubG9nKCdjb21wbGV0ZWQnKVxuICogfSlcbiAqIGBgYFxuICpcbiAqIGBgYHRleHRcbiAqID4gYVxuICogPiBiXG4gKiA+IGFcbiAqID4gQlxuICogPiBjb21wbGV0ZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGlzRXF1YWwgQW4gb3B0aW9uYWwgZnVuY3Rpb24gb2YgdHlwZVxuICogYCh4OiBULCB5OiBUKSA9PiBib29sZWFuYCB0aGF0IHRha2VzIGFuIGV2ZW50IGZyb20gdGhlIGlucHV0IHN0cmVhbSBhbmRcbiAqIGNoZWNrcyBpZiBpdCBpcyBlcXVhbCB0byBwcmV2aW91cyBldmVudCwgYnkgcmV0dXJuaW5nIGEgYm9vbGVhbi5cbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqL1xuZnVuY3Rpb24gZHJvcFJlcGVhdHMoaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IHZvaWQgMDsgfVxuICAgIHJldHVybiBmdW5jdGlvbiBkcm9wUmVwZWF0c09wZXJhdG9yKGlucykge1xuICAgICAgICByZXR1cm4gbmV3IGluZGV4XzEuU3RyZWFtKG5ldyBEcm9wUmVwZWF0c09wZXJhdG9yKGlucywgaXNFcXVhbCkpO1xuICAgIH07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkcm9wUmVwZWF0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyb3BSZXBlYXRzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi94c3RyZWFtL2V4dHJhL2Ryb3BSZXBlYXRzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBhZGFwdF8xID0gcmVxdWlyZShcIkBjeWNsZS9ydW4vbGliL2FkYXB0XCIpO1xudmFyIEhUTUxTb3VyY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhUTUxTb3VyY2UoaHRtbCQsIF9uYW1lKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSBfbmFtZTtcbiAgICAgICAgdGhpcy5faHRtbCQgPSBodG1sJDtcbiAgICAgICAgdGhpcy5fZW1wdHkkID0gYWRhcHRfMS5hZGFwdCh4c3RyZWFtXzEuZGVmYXVsdC5lbXB0eSgpKTtcbiAgICB9XG4gICAgSFRNTFNvdXJjZS5wcm90b3R5cGUuZWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdF8xLmFkYXB0KHRoaXMuX2h0bWwkKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIEhUTUxTb3VyY2UucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IEhUTUxTb3VyY2UoeHN0cmVhbV8xLmRlZmF1bHQuZW1wdHkoKSwgdGhpcy5fbmFtZSk7XG4gICAgfTtcbiAgICBIVE1MU291cmNlLnByb3RvdHlwZS5ldmVudHMgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzLl9lbXB0eSQ7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICByZXR1cm4gSFRNTFNvdXJjZTtcbn0oKSk7XG5leHBvcnRzLkhUTUxTb3VyY2UgPSBIVE1MU291cmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SFRNTFNvdXJjZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvSFRNTFNvdXJjZS5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgYWRhcHRfMSA9IHJlcXVpcmUoXCJAY3ljbGUvcnVuL2xpYi9hZGFwdFwiKTtcbnZhciBEb2N1bWVudERPTVNvdXJjZV8xID0gcmVxdWlyZShcIi4vRG9jdW1lbnRET01Tb3VyY2VcIik7XG52YXIgQm9keURPTVNvdXJjZV8xID0gcmVxdWlyZShcIi4vQm9keURPTVNvdXJjZVwiKTtcbnZhciBFbGVtZW50RmluZGVyXzEgPSByZXF1aXJlKFwiLi9FbGVtZW50RmluZGVyXCIpO1xudmFyIGZyb21FdmVudF8xID0gcmVxdWlyZShcIi4vZnJvbUV2ZW50XCIpO1xudmFyIGlzb2xhdGVfMSA9IHJlcXVpcmUoXCIuL2lzb2xhdGVcIik7XG52YXIgRXZlbnREZWxlZ2F0b3JfMSA9IHJlcXVpcmUoXCIuL0V2ZW50RGVsZWdhdG9yXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBldmVudFR5cGVzVGhhdERvbnRCdWJibGUgPSBbXG4gICAgXCJibHVyXCIsXG4gICAgXCJjYW5wbGF5XCIsXG4gICAgXCJjYW5wbGF5dGhyb3VnaFwiLFxuICAgIFwiY2hhbmdlXCIsXG4gICAgXCJkdXJhdGlvbmNoYW5nZVwiLFxuICAgIFwiZW1wdGllZFwiLFxuICAgIFwiZW5kZWRcIixcbiAgICBcImZvY3VzXCIsXG4gICAgXCJsb2FkXCIsXG4gICAgXCJsb2FkZWRkYXRhXCIsXG4gICAgXCJsb2FkZWRtZXRhZGF0YVwiLFxuICAgIFwibW91c2VlbnRlclwiLFxuICAgIFwibW91c2VsZWF2ZVwiLFxuICAgIFwicGF1c2VcIixcbiAgICBcInBsYXlcIixcbiAgICBcInBsYXlpbmdcIixcbiAgICBcInJhdGVjaGFuZ2VcIixcbiAgICBcInJlc2V0XCIsXG4gICAgXCJzY3JvbGxcIixcbiAgICBcInNlZWtlZFwiLFxuICAgIFwic2Vla2luZ1wiLFxuICAgIFwic3RhbGxlZFwiLFxuICAgIFwic3VibWl0XCIsXG4gICAgXCJzdXNwZW5kXCIsXG4gICAgXCJ0aW1ldXBkYXRlXCIsXG4gICAgXCJ1bmxvYWRcIixcbiAgICBcInZvbHVtZWNoYW5nZVwiLFxuICAgIFwid2FpdGluZ1wiLFxuXTtcbmZ1bmN0aW9uIGRldGVybWluZVVzZUNhcHR1cmUoZXZlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy51c2VDYXB0dXJlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmVzdWx0ID0gb3B0aW9ucy51c2VDYXB0dXJlO1xuICAgIH1cbiAgICBpZiAoZXZlbnRUeXBlc1RoYXREb250QnViYmxlLmluZGV4T2YoZXZlbnRUeXBlKSAhPT0gLTEpIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZpbHRlckJhc2VkT25Jc29sYXRpb24oZG9tU291cmNlLCBmdWxsU2NvcGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZmlsdGVyQmFzZWRPbklzb2xhdGlvbk9wZXJhdG9yKHJvb3RFbGVtZW50JCkge1xuICAgICAgICB2YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICAgICAgd2FzSXNvbGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc2hvdWxkUGFzczogZmFsc2UsXG4gICAgICAgICAgICBlbGVtZW50OiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcm9vdEVsZW1lbnQkXG4gICAgICAgICAgICAuZm9sZChmdW5jdGlvbiBjaGVja0lmU2hvdWxkUGFzcyhzdGF0ZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGlzSXNvbGF0ZWQgPSAhIWRvbVNvdXJjZS5faXNvbGF0ZU1vZHVsZS5nZXRFbGVtZW50KGZ1bGxTY29wZSk7XG4gICAgICAgICAgICB2YXIgc2hvdWxkUGFzcyA9IGlzSXNvbGF0ZWQgJiYgIXN0YXRlLndhc0lzb2xhdGVkO1xuICAgICAgICAgICAgcmV0dXJuIHsgd2FzSXNvbGF0ZWQ6IGlzSXNvbGF0ZWQsIHNob3VsZFBhc3M6IHNob3VsZFBhc3MsIGVsZW1lbnQ6IGVsZW1lbnQgfTtcbiAgICAgICAgfSwgaW5pdGlhbFN0YXRlKVxuICAgICAgICAgICAgLmRyb3AoMSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2hvdWxkUGFzczsgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZWxlbWVudDsgfSk7XG4gICAgfTtcbn1cbnZhciBNYWluRE9NU291cmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYWluRE9NU291cmNlKF9yb290RWxlbWVudCQsIF9zYW5pdGF0aW9uJCwgX25hbWVzcGFjZSwgX2lzb2xhdGVNb2R1bGUsIF9kZWxlZ2F0b3JzLCBfbmFtZSkge1xuICAgICAgICBpZiAoX25hbWVzcGFjZSA9PT0gdm9pZCAwKSB7IF9uYW1lc3BhY2UgPSBbXTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yb290RWxlbWVudCQgPSBfcm9vdEVsZW1lbnQkO1xuICAgICAgICB0aGlzLl9zYW5pdGF0aW9uJCA9IF9zYW5pdGF0aW9uJDtcbiAgICAgICAgdGhpcy5fbmFtZXNwYWNlID0gX25hbWVzcGFjZTtcbiAgICAgICAgdGhpcy5faXNvbGF0ZU1vZHVsZSA9IF9pc29sYXRlTW9kdWxlO1xuICAgICAgICB0aGlzLl9kZWxlZ2F0b3JzID0gX2RlbGVnYXRvcnM7XG4gICAgICAgIHRoaXMuX25hbWUgPSBfbmFtZTtcbiAgICAgICAgdGhpcy5pc29sYXRlU291cmNlID0gaXNvbGF0ZV8xLmlzb2xhdGVTb3VyY2U7XG4gICAgICAgIHRoaXMuaXNvbGF0ZVNpbmsgPSBmdW5jdGlvbiAoc2luaywgc2NvcGUpIHtcbiAgICAgICAgICAgIHZhciBwcmV2RnVsbFNjb3BlID0gdXRpbHNfMS5nZXRGdWxsU2NvcGUoX3RoaXMuX25hbWVzcGFjZSk7XG4gICAgICAgICAgICB2YXIgbmV4dEZ1bGxTY29wZSA9IFtwcmV2RnVsbFNjb3BlLCBzY29wZV0uZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiAhIXg7IH0pLmpvaW4oJy0nKTtcbiAgICAgICAgICAgIHJldHVybiBpc29sYXRlXzEuaXNvbGF0ZVNpbmsoc2luaywgbmV4dEZ1bGxTY29wZSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLmVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3V0cHV0JDtcbiAgICAgICAgaWYgKHRoaXMuX25hbWVzcGFjZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG91dHB1dCQgPSB0aGlzLl9yb290RWxlbWVudCQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudEZpbmRlcl8xID0gbmV3IEVsZW1lbnRGaW5kZXJfMS5FbGVtZW50RmluZGVyKHRoaXMuX25hbWVzcGFjZSwgdGhpcy5faXNvbGF0ZU1vZHVsZSk7XG4gICAgICAgICAgICBvdXRwdXQkID0gdGhpcy5fcm9vdEVsZW1lbnQkLm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsZW1lbnRGaW5kZXJfMS5jYWxsKGVsKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IGFkYXB0XzEuYWRhcHQob3V0cHV0JC5yZW1lbWJlcigpKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYWluRE9NU291cmNlLnByb3RvdHlwZSwgXCJuYW1lc3BhY2VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYW1lc3BhY2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRE9NIGRyaXZlcidzIHNlbGVjdCgpIGV4cGVjdHMgdGhlIGFyZ3VtZW50IHRvIGJlIGEgXCIgK1xuICAgICAgICAgICAgICAgIFwic3RyaW5nIGFzIGEgQ1NTIHNlbGVjdG9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudERPTVNvdXJjZV8xLkRvY3VtZW50RE9NU291cmNlKHRoaXMuX25hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gJ2JvZHknKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJvZHlET01Tb3VyY2VfMS5Cb2R5RE9NU291cmNlKHRoaXMuX25hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmltbWVkU2VsZWN0b3IgPSBzZWxlY3Rvci50cmltKCk7XG4gICAgICAgIHZhciBjaGlsZE5hbWVzcGFjZSA9IHRyaW1tZWRTZWxlY3RvciA9PT0gXCI6cm9vdFwiID9cbiAgICAgICAgICAgIHRoaXMuX25hbWVzcGFjZSA6XG4gICAgICAgICAgICB0aGlzLl9uYW1lc3BhY2UuY29uY2F0KHRyaW1tZWRTZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgTWFpbkRPTVNvdXJjZSh0aGlzLl9yb290RWxlbWVudCQsIHRoaXMuX3Nhbml0YXRpb24kLCBjaGlsZE5hbWVzcGFjZSwgdGhpcy5faXNvbGF0ZU1vZHVsZSwgdGhpcy5fZGVsZWdhdG9ycywgdGhpcy5fbmFtZSk7XG4gICAgfTtcbiAgICBNYWluRE9NU291cmNlLnByb3RvdHlwZS5ldmVudHMgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnRUeXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJET00gZHJpdmVyJ3MgZXZlbnRzKCkgZXhwZWN0cyBhcmd1bWVudCB0byBiZSBhIFwiICtcbiAgICAgICAgICAgICAgICBcInN0cmluZyByZXByZXNlbnRpbmcgdGhlIGV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZUNhcHR1cmUgPSBkZXRlcm1pbmVVc2VDYXB0dXJlKGV2ZW50VHlwZSwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLl9uYW1lc3BhY2U7XG4gICAgICAgIHZhciBmdWxsU2NvcGUgPSB1dGlsc18xLmdldEZ1bGxTY29wZShuYW1lc3BhY2UpO1xuICAgICAgICB2YXIga2V5UGFydHMgPSBbZXZlbnRUeXBlLCB1c2VDYXB0dXJlXTtcbiAgICAgICAgaWYgKGZ1bGxTY29wZSkge1xuICAgICAgICAgICAga2V5UGFydHMucHVzaChmdWxsU2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSBrZXlQYXJ0cy5qb2luKCd+Jyk7XG4gICAgICAgIHZhciBkb21Tb3VyY2UgPSB0aGlzO1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnQkO1xuICAgICAgICBpZiAoZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICByb290RWxlbWVudCQgPSB0aGlzLl9yb290RWxlbWVudCRcbiAgICAgICAgICAgICAgICAuY29tcG9zZShmaWx0ZXJCYXNlZE9uSXNvbGF0aW9uKGRvbVNvdXJjZSwgZnVsbFNjb3BlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByb290RWxlbWVudCQgPSB0aGlzLl9yb290RWxlbWVudCQudGFrZSgyKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnQkID0gcm9vdEVsZW1lbnQkXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIHNldHVwRXZlbnREZWxlZ2F0b3JPblRvcEVsZW1lbnQocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEV2ZW50IGxpc3RlbmVyIGp1c3QgZm9yIHRoZSByb290IGVsZW1lbnRcbiAgICAgICAgICAgIGlmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUV2ZW50XzEuZnJvbUV2ZW50KHJvb3RFbGVtZW50LCBldmVudFR5cGUsIHVzZUNhcHR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXIgb24gdGhlIG9yaWdpbiBlbGVtZW50IGFzIGFuIEV2ZW50RGVsZWdhdG9yXG4gICAgICAgICAgICB2YXIgZGVsZWdhdG9ycyA9IGRvbVNvdXJjZS5fZGVsZWdhdG9ycztcbiAgICAgICAgICAgIHZhciBvcmlnaW4gPSBkb21Tb3VyY2UuX2lzb2xhdGVNb2R1bGUuZ2V0RWxlbWVudChmdWxsU2NvcGUpIHx8IHJvb3RFbGVtZW50O1xuICAgICAgICAgICAgdmFyIGRlbGVnYXRvcjtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0b3JzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGVsZWdhdG9yID0gZGVsZWdhdG9ycy5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0b3IudXBkYXRlT3JpZ2luKG9yaWdpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0b3IgPSBuZXcgRXZlbnREZWxlZ2F0b3JfMS5FdmVudERlbGVnYXRvcihvcmlnaW4sIGV2ZW50VHlwZSwgdXNlQ2FwdHVyZSwgZG9tU291cmNlLl9pc29sYXRlTW9kdWxlKTtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0b3JzLnNldChrZXksIGRlbGVnYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgZG9tU291cmNlLl9pc29sYXRlTW9kdWxlLmFkZEV2ZW50RGVsZWdhdG9yKGZ1bGxTY29wZSwgZGVsZWdhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdWJqZWN0ID0gZGVsZWdhdG9yLmNyZWF0ZURlc3RpbmF0aW9uKG5hbWVzcGFjZSk7XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5mbGF0dGVuKCk7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdF8xLmFkYXB0KGV2ZW50JCk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IGRvbVNvdXJjZS5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Nhbml0YXRpb24kLnNoYW1lZnVsbHlTZW5kTmV4dChudWxsKTtcbiAgICAgICAgdGhpcy5faXNvbGF0ZU1vZHVsZS5yZXNldCgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1haW5ET01Tb3VyY2U7XG59KCkpO1xuZXhwb3J0cy5NYWluRE9NU291cmNlID0gTWFpbkRPTVNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1haW5ET01Tb3VyY2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL01haW5ET01Tb3VyY2UuanNcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIFNjb3BlQ2hlY2tlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NvcGVDaGVja2VyKGZ1bGxTY29wZSwgaXNvbGF0ZU1vZHVsZSkge1xuICAgICAgICB0aGlzLmZ1bGxTY29wZSA9IGZ1bGxTY29wZTtcbiAgICAgICAgdGhpcy5pc29sYXRlTW9kdWxlID0gaXNvbGF0ZU1vZHVsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgaXMgKmRpcmVjdGx5KiBpbiB0aGUgc2NvcGUgb2YgdGhpc1xuICAgICAqIHNjb3BlIGNoZWNrZXIuIEJlaW5nIGNvbnRhaW5lZCAqaW5kaXJlY3RseSogdGhyb3VnaCBvdGhlciBzY29wZXNcbiAgICAgKiBpcyBub3QgdmFsaWQuIFRoaXMgaXMgY3J1Y2lhbCBmb3IgaW1wbGVtZW50aW5nIHBhcmVudC1jaGlsZCBpc29sYXRpb24sXG4gICAgICogc28gdGhhdCB0aGUgcGFyZW50IHNlbGVjdG9ycyBkb24ndCBzZWFyY2ggaW5zaWRlIGEgY2hpbGQgc2NvcGUuXG4gICAgICovXG4gICAgU2NvcGVDaGVja2VyLnByb3RvdHlwZS5pc0RpcmVjdGx5SW5TY29wZSA9IGZ1bmN0aW9uIChsZWFmKSB7XG4gICAgICAgIGZvciAodmFyIGVsID0gbGVhZjsgZWw7IGVsID0gZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGZ1bGxTY29wZSA9IHRoaXMuaXNvbGF0ZU1vZHVsZS5nZXRGdWxsU2NvcGUoZWwpO1xuICAgICAgICAgICAgaWYgKGZ1bGxTY29wZSAmJiBmdWxsU2NvcGUgIT09IHRoaXMuZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZ1bGxTY29wZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIFNjb3BlQ2hlY2tlcjtcbn0oKSk7XG5leHBvcnRzLlNjb3BlQ2hlY2tlciA9IFNjb3BlQ2hlY2tlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjb3BlQ2hlY2tlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvU2NvcGVDaGVja2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXNTZWxlY3RvcigpIHtcbiAgICB2YXIgdmVuZG9yO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuICAgICAgICB2ZW5kb3IgPSBwcm90by5tYXRjaGVzXG4gICAgICAgICAgICB8fCBwcm90by5tYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgICAgIHx8IHByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvclxuICAgICAgICAgICAgfHwgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgICB8fCBwcm90by5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICAgICAgfHwgcHJvdG8ub01hdGNoZXNTZWxlY3RvcjtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICB2ZW5kb3IgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gbWF0Y2goZWxlbSwgc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHZlbmRvcikge1xuICAgICAgICAgICAgcmV0dXJuIHZlbmRvci5jYWxsKGVsZW0sIHNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZXMgPSBlbGVtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1tpXSA9PT0gZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYXRjaGVzU2VsZWN0b3IgPSBjcmVhdGVNYXRjaGVzU2VsZWN0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGNoZXNTZWxlY3Rvci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvbWF0Y2hlc1NlbGVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBnZXRDb25maXJtYXRpb24gPSBleHBvcnRzLmdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG52YXIgc3VwcG9ydHNIaXN0b3J5ID0gZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xudmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBleHBvcnRzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG52YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG52YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGV4cG9ydHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9oaXN0b3J5L34vaGlzdG9yeS9ET01VdGlscy5qc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGNhblVzZURPTSA9IGV4cG9ydHMuY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBJbnNwaXJlZCBieSBHb29nbGUgQ2xvc3VyZTpcbi8vIGh0dHA6Ly9jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vc3ZuL2RvY3MvXG4vLyBjbG9zdXJlX2dvb2dfYXJyYXlfYXJyYXkuanMuaHRtbCNnb29nLmFycmF5LmNsZWFyXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHZhbHVlID0gcmVxdWlyZSgnLi4vLi4vb2JqZWN0L3ZhbGlkLXZhbHVlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR2YWx1ZSh0aGlzKS5sZW5ndGggPSAwO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9hcnJheS8jL2NsZWFyLmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlLCBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZlxuICAsIHggPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypjdXN0b21DcmVhdGUqLykge1xuXHR2YXIgc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2Zcblx0ICAsIGN1c3RvbUNyZWF0ZSA9IGFyZ3VtZW50c1swXSB8fCBjcmVhdGU7XG5cdGlmICh0eXBlb2Ygc2V0UHJvdG90eXBlT2YgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuIGdldFByb3RvdHlwZU9mKHNldFByb3RvdHlwZU9mKGN1c3RvbUNyZWF0ZShudWxsKSwgeCkpID09PSB4O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBCaWcgdGhhbmtzIHRvIEBXZWJSZWZsZWN0aW9uIGZvciBzb3J0aW5nIHRoaXMgb3V0XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uLzU1OTM1NTRcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNPYmplY3QgICAgICA9IHJlcXVpcmUoJy4uL2lzLW9iamVjdCcpXG4gICwgdmFsdWUgICAgICAgICA9IHJlcXVpcmUoJy4uL3ZhbGlkLXZhbHVlJylcblxuICAsIGlzUHJvdG90eXBlT2YgPSBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2ZcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIG51bGxEZXNjID0geyBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSxcblx0XHR2YWx1ZTogdW5kZWZpbmVkIH1cbiAgLCB2YWxpZGF0ZTtcblxudmFsaWRhdGUgPSBmdW5jdGlvbiAob2JqLCBwcm90b3R5cGUpIHtcblx0dmFsdWUob2JqKTtcblx0aWYgKChwcm90b3R5cGUgPT09IG51bGwpIHx8IGlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiBvYmo7XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3RvdHlwZSBtdXN0IGJlIG51bGwgb3IgYW4gb2JqZWN0Jyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoc3RhdHVzKSB7XG5cdHZhciBmbiwgc2V0O1xuXHRpZiAoIXN0YXR1cykgcmV0dXJuIG51bGw7XG5cdGlmIChzdGF0dXMubGV2ZWwgPT09IDIpIHtcblx0XHRpZiAoc3RhdHVzLnNldCkge1xuXHRcdFx0c2V0ID0gc3RhdHVzLnNldDtcblx0XHRcdGZuID0gZnVuY3Rpb24gKG9iaiwgcHJvdG90eXBlKSB7XG5cdFx0XHRcdHNldC5jYWxsKHZhbGlkYXRlKG9iaiwgcHJvdG90eXBlKSwgcHJvdG90eXBlKTtcblx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZuID0gZnVuY3Rpb24gKG9iaiwgcHJvdG90eXBlKSB7XG5cdFx0XHRcdHZhbGlkYXRlKG9iaiwgcHJvdG90eXBlKS5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmbiA9IGZ1bmN0aW9uIHNlbGYob2JqLCBwcm90b3R5cGUpIHtcblx0XHRcdHZhciBpc051bGxCYXNlO1xuXHRcdFx0dmFsaWRhdGUob2JqLCBwcm90b3R5cGUpO1xuXHRcdFx0aXNOdWxsQmFzZSA9IGlzUHJvdG90eXBlT2YuY2FsbChzZWxmLm51bGxQb2x5ZmlsbCwgb2JqKTtcblx0XHRcdGlmIChpc051bGxCYXNlKSBkZWxldGUgc2VsZi5udWxsUG9seWZpbGwuX19wcm90b19fO1xuXHRcdFx0aWYgKHByb3RvdHlwZSA9PT0gbnVsbCkgcHJvdG90eXBlID0gc2VsZi5udWxsUG9seWZpbGw7XG5cdFx0XHRvYmouX19wcm90b19fID0gcHJvdG90eXBlO1xuXHRcdFx0aWYgKGlzTnVsbEJhc2UpIGRlZmluZVByb3BlcnR5KHNlbGYubnVsbFBvbHlmaWxsLCAnX19wcm90b19fJywgbnVsbERlc2MpO1xuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9O1xuXHR9XG5cdHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdsZXZlbCcsIHsgY29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogc3RhdHVzLmxldmVsIH0pO1xufSgoZnVuY3Rpb24gKCkge1xuXHR2YXIgeCA9IE9iamVjdC5jcmVhdGUobnVsbCksIHkgPSB7fSwgc2V0XG5cdCAgLCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJyk7XG5cblx0aWYgKGRlc2MpIHtcblx0XHR0cnkge1xuXHRcdFx0c2V0ID0gZGVzYy5zZXQ7IC8vIE9wZXJhIGNyYXNoZXMgYXQgdGhpcyBwb2ludFxuXHRcdFx0c2V0LmNhbGwoeCwgeSk7XG5cdFx0fSBjYXRjaCAoaWdub3JlKSB7IH1cblx0XHRpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHgpID09PSB5KSByZXR1cm4geyBzZXQ6IHNldCwgbGV2ZWw6IDIgfTtcblx0fVxuXG5cdHguX19wcm90b19fID0geTtcblx0aWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSA9PT0geSkgcmV0dXJuIHsgbGV2ZWw6IDIgfTtcblxuXHR4ID0ge307XG5cdHguX19wcm90b19fID0geTtcblx0aWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSA9PT0geSkgcmV0dXJuIHsgbGV2ZWw6IDEgfTtcblxuXHRyZXR1cm4gZmFsc2U7XG59KCkpKSk7XG5cbnJlcXVpcmUoJy4uL2NyZWF0ZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2Yvc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaXMtaW1wbGVtZW50ZWQnKSgpXG5cdD8gU3RyaW5nLnByb3RvdHlwZS5jb250YWluc1xuXHQ6IHJlcXVpcmUoJy4vc2hpbScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzSXRlcmFibGUgPSByZXF1aXJlKCcuL2lzLWl0ZXJhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IodmFsdWUgKyBcIiBpcyBub3QgaXRlcmFibGVcIik7XG5cdHJldHVybiB2YWx1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LWl0ZXJhdG9yL3ZhbGlkLWl0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKCkgPyBNYXAgOiByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LW1hcC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pbnZhcmlhbnQvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBzZWxlY3RvclBhcnNlcihfYSkge1xuICAgIHZhciBzZWwgPSBfYS5zZWw7XG4gICAgdmFyIGhhc2hJZHggPSBzZWwuaW5kZXhPZignIycpO1xuICAgIHZhciBkb3RJZHggPSBzZWwuaW5kZXhPZignLicsIGhhc2hJZHgpO1xuICAgIHZhciBoYXNoID0gaGFzaElkeCA+IDAgPyBoYXNoSWR4IDogc2VsLmxlbmd0aDtcbiAgICB2YXIgZG90ID0gZG90SWR4ID4gMCA/IGRvdElkeCA6IHNlbC5sZW5ndGg7XG4gICAgdmFyIHRhZ05hbWUgPSBoYXNoSWR4ICE9PSAtMSB8fCBkb3RJZHggIT09IC0xID9cbiAgICAgICAgc2VsLnNsaWNlKDAsIE1hdGgubWluKGhhc2gsIGRvdCkpIDpcbiAgICAgICAgc2VsO1xuICAgIHZhciBpZCA9IGhhc2ggPCBkb3QgPyBzZWwuc2xpY2UoaGFzaCArIDEsIGRvdCkgOiB2b2lkIDA7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGRvdElkeCA+IDAgPyBzZWwuc2xpY2UoZG90ICsgMSkucmVwbGFjZSgvXFwuL2csICcgJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICB9O1xufVxuZXhwb3J0cy5zZWxlY3RvclBhcnNlciA9IHNlbGVjdG9yUGFyc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0b3JQYXJzZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tLXNlbGVjdG9yL2xpYi9jb21tb25qcy9zZWxlY3RvclBhcnNlci5qc1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG4vLyBBbGwgU1ZHIGNoaWxkcmVuIGVsZW1lbnRzLCBub3QgaW4gdGhpcyBsaXN0LCBzaG91bGQgc2VsZi1jbG9zZVxuXG5leHBvcnRzLkNPTlRBSU5FUiA9IHtcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2ludHJvLmh0bWwjVGVybUNvbnRhaW5lckVsZW1lbnRcbiAgJ2EnOiB0cnVlLFxuICAnZGVmcyc6IHRydWUsXG4gICdnbHlwaCc6IHRydWUsXG4gICdnJzogdHJ1ZSxcbiAgJ21hcmtlcic6IHRydWUsXG4gICdtYXNrJzogdHJ1ZSxcbiAgJ21pc3NpbmctZ2x5cGgnOiB0cnVlLFxuICAncGF0dGVybic6IHRydWUsXG4gICdzdmcnOiB0cnVlLFxuICAnc3dpdGNoJzogdHJ1ZSxcbiAgJ3N5bWJvbCc6IHRydWUsXG5cbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2ludHJvLmh0bWwjVGVybURlc2NyaXB0aXZlRWxlbWVudFxuICAnZGVzYyc6IHRydWUsXG4gICdtZXRhZGF0YSc6IHRydWUsXG4gICd0aXRsZSc6IHRydWVcbn1cblxuLy8gaHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvc3ludGF4Lmh0bWwjdm9pZC1lbGVtZW50c1xuXG5leHBvcnRzLlZPSUQgPSB7XG4gIGFyZWE6IHRydWUsXG4gIGJhc2U6IHRydWUsXG4gIGJyOiB0cnVlLFxuICBjb2w6IHRydWUsXG4gIGVtYmVkOiB0cnVlLFxuICBocjogdHJ1ZSxcbiAgaW1nOiB0cnVlLFxuICBpbnB1dDogdHJ1ZSxcbiAga2V5Z2VuOiB0cnVlLFxuICBsaW5rOiB0cnVlLFxuICBtZXRhOiB0cnVlLFxuICBwYXJhbTogdHJ1ZSxcbiAgc291cmNlOiB0cnVlLFxuICB0cmFjazogdHJ1ZSxcbiAgd2JyOiB0cnVlXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tdG8taHRtbC9lbGVtZW50cy5qc1xuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZ05hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSh0ZXh0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCh0ZXh0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dCk7XG59XG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQobm9kZSwgY2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZENoaWxkKG5vZGUsIGNoaWxkKSB7XG4gICAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5mdW5jdGlvbiBwYXJlbnROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlO1xufVxuZnVuY3Rpb24gbmV4dFNpYmxpbmcobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xufVxuZnVuY3Rpb24gdGFnTmFtZShlbG0pIHtcbiAgICByZXR1cm4gZWxtLnRhZ05hbWU7XG59XG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudChub2RlLCB0ZXh0KSB7XG4gICAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGV4dENvbnRlbnQ7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxO1xufVxuZnVuY3Rpb24gaXNUZXh0KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMztcbn1cbmZ1bmN0aW9uIGlzQ29tbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDg7XG59XG5leHBvcnRzLmh0bWxEb21BcGkgPSB7XG4gICAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gICAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gICAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICAgIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gICAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICAgIGdldFRleHRDb250ZW50OiBnZXRUZXh0Q29udGVudCxcbiAgICBpc0VsZW1lbnQ6IGlzRWxlbWVudCxcbiAgICBpc1RleHQ6IGlzVGV4dCxcbiAgICBpc0NvbW1lbnQ6IGlzQ29tbWVudCxcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmh0bWxEb21BcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odG1sZG9tYXBpLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS9odG1sZG9tYXBpLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuYXJyYXkgPSBBcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gcHJpbWl0aXZlKHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHMgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMucHJpbWl0aXZlID0gcHJpbWl0aXZlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tL2lzLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBoXzEgPSByZXF1aXJlKFwiLi9oXCIpO1xuZnVuY3Rpb24gY29weVRvVGh1bmsodm5vZGUsIHRodW5rKSB7XG4gICAgdGh1bmsuZWxtID0gdm5vZGUuZWxtO1xuICAgIHZub2RlLmRhdGEuZm4gPSB0aHVuay5kYXRhLmZuO1xuICAgIHZub2RlLmRhdGEuYXJncyA9IHRodW5rLmRhdGEuYXJncztcbiAgICB0aHVuay5kYXRhID0gdm5vZGUuZGF0YTtcbiAgICB0aHVuay5jaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHRodW5rLnRleHQgPSB2bm9kZS50ZXh0O1xuICAgIHRodW5rLmVsbSA9IHZub2RlLmVsbTtcbn1cbmZ1bmN0aW9uIGluaXQodGh1bmspIHtcbiAgICB2YXIgY3VyID0gdGh1bmsuZGF0YTtcbiAgICB2YXIgdm5vZGUgPSBjdXIuZm4uYXBwbHkodW5kZWZpbmVkLCBjdXIuYXJncyk7XG4gICAgY29weVRvVGh1bmsodm5vZGUsIHRodW5rKTtcbn1cbmZ1bmN0aW9uIHByZXBhdGNoKG9sZFZub2RlLCB0aHVuaykge1xuICAgIHZhciBpLCBvbGQgPSBvbGRWbm9kZS5kYXRhLCBjdXIgPSB0aHVuay5kYXRhO1xuICAgIHZhciBvbGRBcmdzID0gb2xkLmFyZ3MsIGFyZ3MgPSBjdXIuYXJncztcbiAgICBpZiAob2xkLmZuICE9PSBjdXIuZm4gfHwgb2xkQXJncy5sZW5ndGggIT09IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNvcHlUb1RodW5rKGN1ci5mbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpLCB0aHVuayk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChvbGRBcmdzW2ldICE9PSBhcmdzW2ldKSB7XG4gICAgICAgICAgICBjb3B5VG9UaHVuayhjdXIuZm4uYXBwbHkodW5kZWZpbmVkLCBhcmdzKSwgdGh1bmspO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvcHlUb1RodW5rKG9sZFZub2RlLCB0aHVuayk7XG59XG5leHBvcnRzLnRodW5rID0gZnVuY3Rpb24gdGh1bmsoc2VsLCBrZXksIGZuLCBhcmdzKSB7XG4gICAgaWYgKGFyZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhcmdzID0gZm47XG4gICAgICAgIGZuID0ga2V5O1xuICAgICAgICBrZXkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBoXzEuaChzZWwsIHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIGhvb2s6IHsgaW5pdDogaW5pdCwgcHJlcGF0Y2g6IHByZXBhdGNoIH0sXG4gICAgICAgIGZuOiBmbixcbiAgICAgICAgYXJnczogYXJnc1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMudGh1bms7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHVuay5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vdGh1bmsuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IENvbXBvbmVudFNvdXJjZXMsIFZhbHVlQ29tcG9uZW50U2lua3MsIFN0eWxlQW5kQ29udGVudEFyZ3MsIERPTUNvbnRlbnQsIENvbnRlbnRPYmosIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xvciwgU2l6ZSwgQXR0YWNobWVudCwgRmxvYXQgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IG51bVRvVGV4dCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeyBkaXYsIGEsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB4cyBmcm9tIFwieHN0cmVhbVwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1lbnUge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBzdWJtZW51OiBib29sZWFuO1xuICAgIHJpZ2h0OiBib29sZWFuO1xuICAgIHNlY29uZGFyeTogYm9vbGVhbjtcbiAgICBwb2ludGluZzogYm9vbGVhbjtcbiAgICB0YWJ1bGFyOiBib29sZWFuO1xuICAgIHRleHQ6IGJvb2xlYW47XG4gICAgdmVydGljYWw6IGJvb2xlYW47XG4gICAgcGFnaW5hdGlvbjogYm9vbGVhbjtcbiAgICBmaXhlZDogYm9vbGVhbjtcbiAgICBzdGFja2FibGU6IGJvb2xlYW47XG4gICAgaW52ZXJ0ZWQ6IGJvb2xlYW47XG4gICAgaWNvbjogYm9vbGVhbjtcbiAgICBsYWJlbGVkSWNvbnM6IGJvb2xlYW47XG4gICAgY29tcGFjdDogYm9vbGVhbjtcbiAgICBlcXVhbFdpZHRoOiBib29sZWFuO1xuICAgIGJvcmRlcmxlc3M6IGJvb2xlYW47XG4gICAgZmx1aWQ6IGJvb2xlYW47XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICAgIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmc7XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgfVxuICBleHBvcnQgdHlwZSBDb250ZW50ID0gQXJyYXk8UGFydGlhbDxNZW51SXRlbT4+O1xuICBleHBvcnQgaW50ZXJmYWNlIE1lbnVJdGVtIHtcbiAgICBkcm9wZG93bjogYm9vbGVhbjtcbiAgICBsaW5rOiBib29sZWFuO1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBoZWFkZXJPbmx5OiBib29sZWFuO1xuICAgIGhlYWRlcjogYm9vbGVhbjtcbiAgICBmaXR0ZWQ6IGJvb2xlYW47XG4gICAgZGl2aWRlcjogYm9vbGVhbjtcbiAgICByaWdodE1lbnU6IGJvb2xlYW47XG4gICAgdmVydGljYWxseUZpdHRlZDogYm9vbGVhbjtcbiAgICBob3Jpem9udGFsbHlGaXR0ZWQ6IGJvb2xlYW47XG4gICAgaWNvbjogYm9vbGVhbjtcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICAgIGhyZWY6IHN0cmluZztcbiAgICBtYWluOiBET01Db250ZW50IHwgQ29udGVudDtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIE1lbnVBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIE1lbnVTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogTWVudUFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IENvbnRlbnQsIGFyZzI6IENvbnRlbnQgPSBbXSk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KG1lbnUsIG1ha2VJc0FyZ3MoaXNDb250ZW50KSwgaXNDb250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuPFYgZXh0ZW5kcyBNZW51SXRlbT4oc291cmNlczogTWVudVNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogVmFsdWVDb21wb25lbnRTaW5rczxWPiB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBNZW51U291cmNlcykge1xuICAgICAgc291cmNlcy5jb250ZW50JCA9IHNvdXJjZXMuY29udGVudCQgPyBzb3VyY2VzLmNvbnRlbnQkIDogeHMub2YoW10pO1xuICAgICAgc291cmNlcy5wcm9wcyQgPSBzb3VyY2VzLnByb3BzJCA/IHNvdXJjZXMucHJvcHMkIDogeHMub2Yoe30pO1xuXG4gICAgICBjb25zdCBjbGljayQgPSBzb3VyY2VzLkRPTS5zZWxlY3QoXCIubWVudSA+IC5pdGVtXCIpLmV2ZW50cyhcImNsaWNrXCIpO1xuICAgICAgY29uc3QgaXRlbXMkID0gc291cmNlcy5jb250ZW50JC5tYXAoYyA9PiBpc0NvbnRlbnQoYykgPyBjIDogYy5tYWluKS5yZW1lbWJlcigpO1xuICAgICAgY29uc3QgY2xpY2tlZElkJCA9IGNsaWNrJC5tYXAoZXYgPT4gcGFyc2VJbnQoKGV2IGFzIGFueSkuY3VycmVudFRhcmdldC5pZCkpXG4gICAgICAgIC5maWx0ZXIobiA9PiAhaXNOYU4obikgJiYgdHlwZW9mIChuKSAhPT0gXCJ1bmRlZmluZWRcIik7XG4gICAgICBjb25zdCBjbGlja2VkSXRlbSQgPSBpdGVtcyQubWFwKGl0ZW1zID0+IGNsaWNrZWRJZCQubWFwKGlkID0+IGl0ZW1zW2lkXSkpLmZsYXR0ZW4oKVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gIWl0ZW0uZGlzYWJsZWQpO1xuXG4gICAgICBjb25zdCB2dHJlZSQgPSB4cy5jb21iaW5lKHNvdXJjZXMucHJvcHMkLCBpdGVtcyQpLm1hcChcbiAgICAgICAgKFtwcm9wcywgY29udGVudF0pID0+IG1lbnUoeyBwcm9wcywgY29udGVudCB9KVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogdnRyZWUkLFxuICAgICAgICBldmVudHM6ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIubWVudVwiKS5ldmVudHModHlwZSksXG4gICAgICAgIHZhbHVlJDogY2xpY2tlZEl0ZW0kXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVudShhcmdzOiBNZW51QXJncykge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0NvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzLCBjb250ZW50Lmxlbmd0aCkgfSB9LCBjb250ZW50Lm1hcChyZW5kZXJJdGVtKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+LCBsZW5ndGg6IG51bWJlcikge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLnNlY29uZGFyeSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNlY29uZGFyeVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZmx1aWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmbHVpZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmlnaHQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByaWdodFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucG9pbnRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBwb2ludGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFidWxhcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhYnVsYXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRleHQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0ZXh0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5wYWdpbmF0aW9uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcGFnaW5hdGlvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZml4ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXhlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc3RhY2thYmxlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc3RhY2thYmxlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pY29uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaWNvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFiZWxlZEljb25zKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGFiZWxlZCBpY29uXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wYWN0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGFjdFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYm9yZGVybGVzcykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGJvcmRlcmxlc3NcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVxdWFsV2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQobGVuZ3RoKSArIFwiIGl0ZW1cIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5hdHRhY2htZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEF0dGFjaG1lbnQuVG9DbGFzc25hbWUocHJvcHMuYXR0YWNobWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIG1lbnVcIjtcbiAgICBpZiAocHJvcHMuc3VibWVudSkge1xuICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cmluZygzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRJdGVtQ2xhc3NuYW1lKGl0ZW06IE1lbnVJdGVtKSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwiXCI7XG4gICAgaWYgKGl0ZW0uYWN0aXZlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XG4gICAgfVxuICAgIGlmIChpdGVtLmhlYWRlcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhlYWRlclwiO1xuICAgIH1cbiAgICBpZiAoaXRlbS5maXR0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXR0ZWRcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0udmVydGljYWxseUZpdHRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsbHkgZml0dGVkXCI7XG4gICAgfVxuICAgIGlmIChpdGVtLmhvcml6b250YWxseUZpdHRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhvcml6b250YWxseSBmaXR0ZWRcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0ubGluaykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxpbmtcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uaWNvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGljb25cIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uZGlzYWJsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBpZiAoaXRlbS5kcm9wZG93bikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRyb3Bkb3duXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKGl0ZW0uZmxvYXQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gRmxvYXQuVG9DbGFzc25hbWUoaXRlbS5mbG9hdCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKGl0ZW0uY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUoaXRlbS5jb2xvcik7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBpdGVtXCI7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cmluZygxKTtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVySXRlbShpdGVtOiBNZW51SXRlbSwgaWQ6IG51bWJlcikge1xuICAgIGlmIChpdGVtLmRpdmlkZXIpIHtcbiAgICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiZGl2aWRlclwiIH0gfSk7XG4gICAgfVxuICAgIGlmIChpdGVtLmhlYWRlck9ubHkpIHtcbiAgICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiaGVhZGVyXCIgfSB9LCBpdGVtLm1haW4pO1xuICAgIH1cbiAgICBpZiAoaXRlbS5yaWdodE1lbnUpIHtcbiAgICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwicmlnaHQgbWVudVwiIH0gfSwgKGl0ZW0ubWFpbiBhcyBhbnlbXSkubWFwKHJlbmRlckl0ZW0pKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0uZHJvcGRvd24pIHtcbiAgICAgIGxldCBjb250ZW50ID0gaXRlbS5tYWluIGFzIFZOb2RlO1xuICAgICAgY29udGVudC5kYXRhLnByb3BzLmNsYXNzTmFtZSArPSBcIiBpdGVtXCI7XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG4gICAgaWYgKGl0ZW0uaHJlZikge1xuICAgICAgcmV0dXJuIGEoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldEl0ZW1DbGFzc25hbWUoaXRlbSksIGlkLCBocmVmOiBpdGVtLmhyZWYgfSB9LCBpdGVtLm1haW4pO1xuICAgIH1cbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRJdGVtQ2xhc3NuYW1lKGl0ZW0pLCBpZCB9IH0sIGl0ZW0ubWFpbik7XG4gIH1cblxuICBmdW5jdGlvbiBpc0NvbnRlbnQob2JqKTogb2JqIGlzIENvbnRlbnQge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheSAmJiAoXG4gICAgICBvYmoubGVuZ3RoID09PSAwIHx8XG4gICAgICB0eXBlb2YgKG9ialswXS5tYWluKSAhPT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICAgdHlwZW9mIChvYmpbMF0uZGl2aWRlcikgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgIHR5cGVvZiAob2JqWzBdLmhlYWRlck9ubHkpICE9PSBcInVuZGVmaW5lZFwiXG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL21lbnUvaW5kZXgudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9jb2xsZWN0aW9uc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZWxlbWVudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vZHVsZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3ZpZXdzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZW51bXNcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC50cyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbnZhciBEZWJvdW5jZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZU9wZXJhdG9yKGR0LCBpbnMpIHtcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy50eXBlID0gJ2RlYm91bmNlJztcbiAgICAgICAgdGhpcy5vdXQgPSBudWxsO1xuICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB9XG4gICAgRGVib3VuY2VPcGVyYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IG51bGw7XG4gICAgICAgIHRoaXMuaWQgPSBudWxsO1xuICAgIH07XG4gICAgRGVib3VuY2VPcGVyYXRvci5wcm90b3R5cGUuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgaWYgKGlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB9O1xuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKCF1KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmNsZWFySW50ZXJ2YWwoKTtcbiAgICAgICAgdGhpcy5pZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmNsZWFySW50ZXJ2YWwoKTtcbiAgICAgICAgICAgIHUuX24odCk7XG4gICAgICAgIH0sIHRoaXMuZHQpO1xuICAgIH07XG4gICAgRGVib3VuY2VPcGVyYXRvci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5jbGVhckludGVydmFsKCk7XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAoIXUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIERlbGF5cyBldmVudHMgdW50aWwgYSBjZXJ0YWluIGFtb3VudCBvZiBzaWxlbmNlIGhhcyBwYXNzZWQuIElmIHRoYXQgdGltZXNwYW5cbiAqIG9mIHNpbGVuY2UgaXMgbm90IG1ldCB0aGUgZXZlbnQgaXMgZHJvcHBlZC5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLS0tMi0tMy0tNC0tLS01fFxuICogICAgIGRlYm91bmNlKDYwKVxuICogLS0tLS0xLS0tLS0tLS0tLTQtLXxcbiAqIGBgYFxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBmcm9tRGlhZ3JhbSBmcm9tICd4c3RyZWFtL2V4dHJhL2Zyb21EaWFncmFtJ1xuICogaW1wb3J0IGRlYm91bmNlIGZyb20gJ3hzdHJlYW0vZXh0cmEvZGVib3VuY2UnXG4gKlxuICogY29uc3Qgc3RyZWFtID0gZnJvbURpYWdyYW0oJy0tMS0tLS0yLS0zLS00LS0tLTV8JylcbiAqICAuY29tcG9zZShkZWJvdW5jZSg2MCkpXG4gKlxuICogc3RyZWFtLmFkZExpc3RlbmVyKHtcbiAqICAgbmV4dDogaSA9PiBjb25zb2xlLmxvZyhpKSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmVycm9yKGVyciksXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnY29tcGxldGVkJylcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBgYGB0ZXh0XG4gKiA+IDFcbiAqID4gNFxuICogPiBjb21wbGV0ZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBwZXJpb2QgVGhlIGFtb3VudCBvZiBzaWxlbmNlIHJlcXVpcmVkIGluIG1pbGxpc2Vjb25kcy5cbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UocGVyaW9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlT3BlcmF0b3IoaW5zKSB7XG4gICAgICAgIHJldHVybiBuZXcgaW5kZXhfMS5TdHJlYW0obmV3IERlYm91bmNlT3BlcmF0b3IocGVyaW9kLCBpbnMpKTtcbiAgICB9O1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVib3VuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34veHN0cmVhbS9leHRyYS9kZWJvdW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbnZhciBEZWxheU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheU9wZXJhdG9yKGR0LCBpbnMpIHtcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy50eXBlID0gJ2RlbGF5JztcbiAgICAgICAgdGhpcy5vdXQgPSBudWxsO1xuICAgIH1cbiAgICBEZWxheU9wZXJhdG9yLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRGVsYXlPcGVyYXRvci5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gbnVsbDtcbiAgICB9O1xuICAgIERlbGF5T3BlcmF0b3IucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKCF1KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgaWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB1Ll9uKHQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIH0sIHRoaXMuZHQpO1xuICAgIH07XG4gICAgRGVsYXlPcGVyYXRvci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGlkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdS5fZShlcnIpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIH0sIHRoaXMuZHQpO1xuICAgIH07XG4gICAgRGVsYXlPcGVyYXRvci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGlkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdS5fYygpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIH0sIHRoaXMuZHQpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5T3BlcmF0b3I7XG59KCkpO1xuLyoqXG4gKiBEZWxheXMgcGVyaW9kaWMgZXZlbnRzIGJ5IGEgZ2l2ZW4gdGltZSBwZXJpb2QuXG4gKlxuICogTWFyYmxlIGRpYWdyYW06XG4gKlxuICogYGBgdGV4dFxuICogMS0tLS0yLS0zLS00LS0tLTV8XG4gKiAgICAgZGVsYXkoNjApXG4gKiAtLS0xLS0tLTItLTMtLTQtLS0tNXxcbiAqIGBgYFxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBmcm9tRGlhZ3JhbSBmcm9tICd4c3RyZWFtL2V4dHJhL2Zyb21EaWFncmFtJ1xuICogaW1wb3J0IGRlbGF5IGZyb20gJ3hzdHJlYW0vZXh0cmEvZGVsYXknXG4gKlxuICogY29uc3Qgc3RyZWFtID0gZnJvbURpYWdyYW0oJzEtLS0tMi0tMy0tNC0tLS01fCcpXG4gKiAgLmNvbXBvc2UoZGVsYXkoNjApKVxuICpcbiAqIHN0cmVhbS5hZGRMaXN0ZW5lcih7XG4gKiAgIG5leHQ6IGkgPT4gY29uc29sZS5sb2coaSksXG4gKiAgIGVycm9yOiBlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpLFxuICogICBjb21wbGV0ZTogKCkgPT4gY29uc29sZS5sb2coJ2NvbXBsZXRlZCcpXG4gKiB9KVxuICogYGBgXG4gKlxuICogYGBgdGV4dFxuICogPiAxICAoYWZ0ZXIgNjAgbXMpXG4gKiA+IDIgIChhZnRlciAxNjAgbXMpXG4gKiA+IDMgIChhZnRlciAyMjAgbXMpXG4gKiA+IDQgIChhZnRlciAyODAgbXMpXG4gKiA+IDUgIChhZnRlciAzODAgbXMpXG4gKiA+IGNvbXBsZXRlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHBlcmlvZCBUaGUgYW1vdW50IG9mIHNpbGVuY2UgcmVxdWlyZWQgaW4gbWlsbGlzZWNvbmRzLlxuICogQHJldHVybiB7U3RyZWFtfVxuICovXG5mdW5jdGlvbiBkZWxheShwZXJpb2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVsYXlPcGVyYXRvcihpbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBpbmRleF8xLlN0cmVhbShuZXcgRGVsYXlPcGVyYXRvcihwZXJpb2QsIGlucykpO1xuICAgIH07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi94c3RyZWFtL2V4dHJhL2RlbGF5LmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZG9jcy1zcmMvZG9jcy5sZXNzXG4vLyBtb2R1bGUgaWQgPSA1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBydW4gfSBmcm9tIFwiQGN5Y2xlL3hzdHJlYW0tcnVuXCI7XG5pbXBvcnQgeyBtYWtlRE9NRHJpdmVyLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgbWFrZUhpc3RvcnlEcml2ZXIsIGNhcHR1cmVDbGlja3MgfSBmcm9tIFwiQGN5Y2xlL2hpc3RvcnlcIjtcbmltcG9ydCB4cyBmcm9tIFwieHN0cmVhbVwiO1xuXG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL3JvdXRlclwiO1xuaW1wb3J0IHJvdXRlcyBmcm9tIFwiLi9yb3V0ZXNcIjtcbmltcG9ydCB7TGF5b3V0fSBmcm9tIFwiLi9sYXlvdXRcIjtcbmZ1bmN0aW9uIGFwcChkcml2ZXJzKSB7XG4gIGNvbnN0IHBhZ2UgPSBSb3V0ZXIoT2JqZWN0LmFzc2lnbih7fSwgZHJpdmVycywge3JvdXRlc30pKTtcbiAgY29uc3QgbGF5b3V0ID0gTGF5b3V0LnJ1bihkcml2ZXJzLCBwYWdlKTtcbiAgY29uc3Qgc2lua3MgPSB7XG4gICAgRE9NOiBsYXlvdXQuRE9NLm1hcChsYXlvdXQgPT4gZGl2KFwiI2FwcC5hcHBcIiwgbGF5b3V0KSksXG4gICAgcm91dGVyOiB4cy5tZXJnZShwYWdlLnJvdXRlciwgbGF5b3V0LnJvdXRlciksXG4gIH07XG4gIHJldHVybiBzaW5rcztcbn1cblxucnVuKGFwcCwge1xuICBET006IG1ha2VET01Ecml2ZXIoXCIuYXBwXCIpLFxuICByb3V0ZXI6IGNhcHR1cmVDbGlja3MobWFrZUhpc3RvcnlEcml2ZXIoKSlcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvYXBwLnRzIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZShcInhzdHJlYW1cIik7XG52YXIgYWRhcHRfMSA9IHJlcXVpcmUoXCJAY3ljbGUvcnVuL2xpYi9hZGFwdFwiKTtcbnZhciBmcm9tRXZlbnRfMSA9IHJlcXVpcmUoXCIuL2Zyb21FdmVudFwiKTtcbnZhciBCb2R5RE9NU291cmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCb2R5RE9NU291cmNlKF9uYW1lKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSBfbmFtZTtcbiAgICB9XG4gICAgQm9keURPTVNvdXJjZS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb25hbGl0eSBpcyBzdGlsbCB1bmRlZmluZWQvdW5kZWNpZGVkLlxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJvZHlET01Tb3VyY2UucHJvdG90eXBlLmVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3V0ID0gYWRhcHRfMS5hZGFwdCh4c3RyZWFtXzEuZGVmYXVsdC5vZihkb2N1bWVudC5ib2R5KSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBCb2R5RE9NU291cmNlLnByb3RvdHlwZS5ldmVudHMgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBzdHJlYW07XG4gICAgICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnVzZUNhcHR1cmUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgc3RyZWFtID0gZnJvbUV2ZW50XzEuZnJvbUV2ZW50KGRvY3VtZW50LmJvZHksIGV2ZW50VHlwZSwgb3B0aW9ucy51c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cmVhbSA9IGZyb21FdmVudF8xLmZyb21FdmVudChkb2N1bWVudC5ib2R5LCBldmVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdF8xLmFkYXB0KHN0cmVhbSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICByZXR1cm4gQm9keURPTVNvdXJjZTtcbn0oKSk7XG5leHBvcnRzLkJvZHlET01Tb3VyY2UgPSBCb2R5RE9NU291cmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Qm9keURPTVNvdXJjZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvQm9keURPTVNvdXJjZS5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZShcInhzdHJlYW1cIik7XG52YXIgYWRhcHRfMSA9IHJlcXVpcmUoXCJAY3ljbGUvcnVuL2xpYi9hZGFwdFwiKTtcbnZhciBmcm9tRXZlbnRfMSA9IHJlcXVpcmUoXCIuL2Zyb21FdmVudFwiKTtcbnZhciBEb2N1bWVudERPTVNvdXJjZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnRET01Tb3VyY2UoX25hbWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IF9uYW1lO1xuICAgIH1cbiAgICBEb2N1bWVudERPTVNvdXJjZS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb25hbGl0eSBpcyBzdGlsbCB1bmRlZmluZWQvdW5kZWNpZGVkLlxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIERvY3VtZW50RE9NU291cmNlLnByb3RvdHlwZS5lbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0XzEuYWRhcHQoeHN0cmVhbV8xLmRlZmF1bHQub2YoZG9jdW1lbnQpKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIERvY3VtZW50RE9NU291cmNlLnByb3RvdHlwZS5ldmVudHMgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBzdHJlYW07XG4gICAgICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnVzZUNhcHR1cmUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgc3RyZWFtID0gZnJvbUV2ZW50XzEuZnJvbUV2ZW50KGRvY3VtZW50LCBldmVudFR5cGUsIG9wdGlvbnMudXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJlYW0gPSBmcm9tRXZlbnRfMS5mcm9tRXZlbnQoZG9jdW1lbnQsIGV2ZW50VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IGFkYXB0XzEuYWRhcHQoc3RyZWFtKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIHJldHVybiBEb2N1bWVudERPTVNvdXJjZTtcbn0oKSk7XG5leHBvcnRzLkRvY3VtZW50RE9NU291cmNlID0gRG9jdW1lbnRET01Tb3VyY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Eb2N1bWVudERPTVNvdXJjZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvRG9jdW1lbnRET01Tb3VyY2UuanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIFNjb3BlQ2hlY2tlcl8xID0gcmVxdWlyZShcIi4vU2NvcGVDaGVja2VyXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBtYXRjaGVzU2VsZWN0b3JfMSA9IHJlcXVpcmUoXCIuL21hdGNoZXNTZWxlY3RvclwiKTtcbmZ1bmN0aW9uIHRvRWxBcnJheShpbnB1dCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpbnB1dCk7XG59XG52YXIgRWxlbWVudEZpbmRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudEZpbmRlcihuYW1lc3BhY2UsIGlzb2xhdGVNb2R1bGUpIHtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgICAgIHRoaXMuaXNvbGF0ZU1vZHVsZSA9IGlzb2xhdGVNb2R1bGU7XG4gICAgfVxuICAgIEVsZW1lbnRGaW5kZXIucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB1dGlsc18xLmdldFNlbGVjdG9ycyhuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcm9vdEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bGxTY29wZSA9IHV0aWxzXzEuZ2V0RnVsbFNjb3BlKG5hbWVzcGFjZSk7XG4gICAgICAgIHZhciBzY29wZUNoZWNrZXIgPSBuZXcgU2NvcGVDaGVja2VyXzEuU2NvcGVDaGVja2VyKGZ1bGxTY29wZSwgdGhpcy5pc29sYXRlTW9kdWxlKTtcbiAgICAgICAgdmFyIHRvcE5vZGUgPSBmdWxsU2NvcGUgP1xuICAgICAgICAgICAgdGhpcy5pc29sYXRlTW9kdWxlLmdldEVsZW1lbnQoZnVsbFNjb3BlKSB8fCByb290RWxlbWVudCA6XG4gICAgICAgICAgICByb290RWxlbWVudDtcbiAgICAgICAgdmFyIHRvcE5vZGVNYXRjaGVzU2VsZWN0b3IgPSAhIWZ1bGxTY29wZSAmJiAhIXNlbGVjdG9yICYmIG1hdGNoZXNTZWxlY3Rvcl8xLm1hdGNoZXNTZWxlY3Rvcih0b3BOb2RlLCBzZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiB0b0VsQXJyYXkodG9wTm9kZS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgICAgICAgICAgIC5maWx0ZXIoc2NvcGVDaGVja2VyLmlzRGlyZWN0bHlJblNjb3BlLCBzY29wZUNoZWNrZXIpXG4gICAgICAgICAgICAuY29uY2F0KHRvcE5vZGVNYXRjaGVzU2VsZWN0b3IgPyBbdG9wTm9kZV0gOiBbXSk7XG4gICAgfTtcbiAgICByZXR1cm4gRWxlbWVudEZpbmRlcjtcbn0oKSk7XG5leHBvcnRzLkVsZW1lbnRGaW5kZXIgPSBFbGVtZW50RmluZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RWxlbWVudEZpbmRlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvRWxlbWVudEZpbmRlci5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZShcInhzdHJlYW1cIik7XG52YXIgU2NvcGVDaGVja2VyXzEgPSByZXF1aXJlKFwiLi9TY29wZUNoZWNrZXJcIik7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xudmFyIG1hdGNoZXNTZWxlY3Rvcl8xID0gcmVxdWlyZShcIi4vbWF0Y2hlc1NlbGVjdG9yXCIpO1xuLyoqXG4gKiBGaW5kcyAod2l0aCBiaW5hcnkgc2VhcmNoKSBpbmRleCBvZiB0aGUgZGVzdGluYXRpb24gdGhhdCBpZCBlcXVhbCB0byBzZWFyY2hJZFxuICogYW1vbmcgdGhlIGRlc3RpbmF0aW9ucyBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGluZGV4T2YoYXJyLCBzZWFyY2hJZCkge1xuICAgIHZhciBtaW5JbmRleCA9IDA7XG4gICAgdmFyIG1heEluZGV4ID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgdmFyIGN1cnJlbnRJbmRleDtcbiAgICB2YXIgY3VycmVudDtcbiAgICB3aGlsZSAobWluSW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gKG1pbkluZGV4ICsgbWF4SW5kZXgpIC8gMiB8IDA7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYml0d2lzZVxuICAgICAgICBjdXJyZW50ID0gYXJyW2N1cnJlbnRJbmRleF07XG4gICAgICAgIHZhciBjdXJyZW50SWQgPSBjdXJyZW50LmlkO1xuICAgICAgICBpZiAoY3VycmVudElkIDwgc2VhcmNoSWQpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50SWQgPiBzZWFyY2hJZCkge1xuICAgICAgICAgICAgbWF4SW5kZXggPSBjdXJyZW50SW5kZXggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbmRleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG4vKipcbiAqIE1hbmFnZXMgXCJFdmVudCBkZWxlZ2F0aW9uXCIsIGJ5IGNvbm5lY3RpbmcgYW4gb3JpZ2luIHdpdGggbXVsdGlwbGVcbiAqIGRlc3RpbmF0aW9ucy5cbiAqXG4gKiBBdHRhY2hlcyBhIERPTSBldmVudCBsaXN0ZW5lciB0byB0aGUgRE9NIGVsZW1lbnQgY2FsbGVkIHRoZSBcIm9yaWdpblwiLFxuICogYW5kIGRlbGVnYXRlcyBldmVudHMgdG8gXCJkZXN0aW5hdGlvbnNcIiwgd2hpY2ggYXJlIHN1YmplY3RzIGFzIG91dHB1dHNcbiAqIGZvciB0aGUgRE9NU291cmNlLiBTaW11bGF0ZXMgYnViYmxpbmcgb3IgY2FwdHVyaW5nLCB3aXRoIHJlZ2FyZHMgdG9cbiAqIGlzb2xhdGlvbiBib3VuZGFyaWVzIHRvby5cbiAqL1xudmFyIEV2ZW50RGVsZWdhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudERlbGVnYXRvcihvcmlnaW4sIGV2ZW50VHlwZSwgdXNlQ2FwdHVyZSwgaXNvbGF0ZU1vZHVsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgdGhpcy5ldmVudFR5cGUgPSBldmVudFR5cGU7XG4gICAgICAgIHRoaXMudXNlQ2FwdHVyZSA9IHVzZUNhcHR1cmU7XG4gICAgICAgIHRoaXMuaXNvbGF0ZU1vZHVsZSA9IGlzb2xhdGVNb2R1bGU7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25zID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RJZCA9IDA7XG4gICAgICAgIGlmICh1c2VDYXB0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24gKGV2KSB7IHJldHVybiBfdGhpcy5jYXB0dXJlKGV2KTsgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIF90aGlzLmJ1YmJsZShldik7IH07XG4gICAgICAgIH1cbiAgICAgICAgb3JpZ2luLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCB0aGlzLmxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcbiAgICB9XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLnVwZGF0ZU9yaWdpbiA9IGZ1bmN0aW9uIChuZXdPcmlnaW4pIHtcbiAgICAgICAgdGhpcy5vcmlnaW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50VHlwZSwgdGhpcy5saXN0ZW5lciwgdGhpcy51c2VDYXB0dXJlKTtcbiAgICAgICAgbmV3T3JpZ2luLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5ldmVudFR5cGUsIHRoaXMubGlzdGVuZXIsIHRoaXMudXNlQ2FwdHVyZSk7XG4gICAgICAgIHRoaXMub3JpZ2luID0gbmV3T3JpZ2luO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhICpuZXcqIGRlc3RpbmF0aW9uIGdpdmVuIHRoZSBuYW1lc3BhY2UgYW5kIHJldHVybnMgdGhlIHN1YmplY3RcbiAgICAgKiByZXByZXNlbnRpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIGV2ZW50cy4gSXMgbm90IHJlZmVyZW50aWFsbHkgdHJhbnNwYXJlbnQsXG4gICAgICogd2lsbCBhbHdheXMgcmV0dXJuIGEgZGlmZmVyZW50IG91dHB1dCBmb3IgdGhlIHNhbWUgaW5wdXQuXG4gICAgICovXG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLmNyZWF0ZURlc3RpbmF0aW9uID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLl9sYXN0SWQrKztcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdXRpbHNfMS5nZXRTZWxlY3RvcnMobmFtZXNwYWNlKTtcbiAgICAgICAgdmFyIHNjb3BlQ2hlY2tlciA9IG5ldyBTY29wZUNoZWNrZXJfMS5TY29wZUNoZWNrZXIodXRpbHNfMS5nZXRGdWxsU2NvcGUobmFtZXNwYWNlKSwgdGhpcy5pc29sYXRlTW9kdWxlKTtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB4c3RyZWFtXzEuZGVmYXVsdC5jcmVhdGUoe1xuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJ3JlcXVlc3RJZGxlQ2FsbGJhY2snIGluIHdpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWRsZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZURlc3RpbmF0aW9uKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVEZXN0aW5hdGlvbihpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHsgaWQ6IGlkLCBzZWxlY3Rvcjogc2VsZWN0b3IsIHNjb3BlQ2hlY2tlcjogc2NvcGVDaGVja2VyLCBzdWJqZWN0OiBzdWJqZWN0IH07XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25zLnB1c2goZGVzdGluYXRpb24pO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGRlc3RpbmF0aW9uIHRoYXQgaGFzIHRoZSBnaXZlbiBpZC5cbiAgICAgKi9cbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUucmVtb3ZlRGVzdGluYXRpb24gPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGkgPSBpbmRleE9mKHRoaXMuZGVzdGluYXRpb25zLCBpZCk7XG4gICAgICAgIGkgPj0gMCAmJiB0aGlzLmRlc3RpbmF0aW9ucy5zcGxpY2UoaSwgMSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5jYXB0dXJlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5kZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgdmFyIGRlc3QgPSB0aGlzLmRlc3RpbmF0aW9uc1tpXTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVzU2VsZWN0b3JfMS5tYXRjaGVzU2VsZWN0b3IoZXYudGFyZ2V0LCBkZXN0LnNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIGRlc3Quc3ViamVjdC5fbihldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5idWJibGUgPSBmdW5jdGlvbiAocmF3RXZlbnQpIHtcbiAgICAgICAgdmFyIG9yaWdpbiA9IHRoaXMub3JpZ2luO1xuICAgICAgICBpZiAoIW9yaWdpbi5jb250YWlucyhyYXdFdmVudC5jdXJyZW50VGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciByb29mID0gb3JpZ2luLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBldiA9IHRoaXMucGF0Y2hFdmVudChyYXdFdmVudCk7XG4gICAgICAgIGZvciAodmFyIGVsID0gZXYudGFyZ2V0OyBlbCAmJiBlbCAhPT0gcm9vZjsgZWwgPSBlbC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIW9yaWdpbi5jb250YWlucyhlbCkpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldi5wcm9wYWdhdGlvbkhhc0JlZW5TdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXRjaEV2ZW50QWdhaW5zdERlc3RpbmF0aW9ucyhlbCwgZXYpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUucGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgcEV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHBFdmVudC5wcm9wYWdhdGlvbkhhc0JlZW5TdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBvbGRTdG9wUHJvcGFnYXRpb24gPSBwRXZlbnQuc3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICBwRXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgICAgICAgICAgb2xkU3RvcFByb3BhZ2F0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnByb3BhZ2F0aW9uSGFzQmVlblN0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcEV2ZW50O1xuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLm1hdGNoRXZlbnRBZ2FpbnN0RGVzdGluYXRpb25zID0gZnVuY3Rpb24gKGVsLCBldikge1xuICAgICAgICB2YXIgbiA9IHRoaXMuZGVzdGluYXRpb25zLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkZXN0ID0gdGhpcy5kZXN0aW5hdGlvbnNbaV07XG4gICAgICAgICAgICBpZiAoIWRlc3Quc2NvcGVDaGVja2VyLmlzRGlyZWN0bHlJblNjb3BlKGVsKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoZXNTZWxlY3Rvcl8xLm1hdGNoZXNTZWxlY3RvcihlbCwgZGVzdC5zZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZUV2ZW50Q3VycmVudFRhcmdldChldiwgZWwpO1xuICAgICAgICAgICAgICAgIGRlc3Quc3ViamVjdC5fbihldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5tdXRhdGVFdmVudEN1cnJlbnRUYXJnZXQgPSBmdW5jdGlvbiAoZXZlbnQsIGN1cnJlbnRUYXJnZXRFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsIFwiY3VycmVudFRhcmdldFwiLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnRUYXJnZXRFbGVtZW50LFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGxlYXNlIHVzZSBldmVudC5vd25lclRhcmdldFwiKTtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5vd25lclRhcmdldCA9IGN1cnJlbnRUYXJnZXRFbGVtZW50O1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50RGVsZWdhdG9yO1xufSgpKTtcbmV4cG9ydHMuRXZlbnREZWxlZ2F0b3IgPSBFdmVudERlbGVnYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50RGVsZWdhdG9yLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9FdmVudERlbGVnYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTWFwUG9seWZpbGwgPSByZXF1aXJlKCdlczYtbWFwJyk7XG52YXIgSXNvbGF0ZU1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSXNvbGF0ZU1vZHVsZSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c0J5RnVsbFNjb3BlID0gbmV3IE1hcFBvbHlmaWxsKCk7XG4gICAgICAgIHRoaXMuZGVsZWdhdG9yc0J5RnVsbFNjb3BlID0gbmV3IE1hcFBvbHlmaWxsKCk7XG4gICAgICAgIHRoaXMuZnVsbFNjb3Blc0JlaW5nVXBkYXRlZCA9IFtdO1xuICAgIH1cbiAgICBJc29sYXRlTW9kdWxlLnByb3RvdHlwZS5jbGVhbnVwVk5vZGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBfYS5kYXRhLCBlbG0gPSBfYS5lbG07XG4gICAgICAgIHZhciBmdWxsU2NvcGUgPSAoZGF0YSB8fCB7fSkuaXNvbGF0ZSB8fCAnJztcbiAgICAgICAgdmFyIGlzQ3VycmVudEVsbSA9IHRoaXMuZWxlbWVudHNCeUZ1bGxTY29wZS5nZXQoZnVsbFNjb3BlKSA9PT0gZWxtO1xuICAgICAgICB2YXIgaXNTY29wZUJlaW5nVXBkYXRlZCA9IHRoaXMuZnVsbFNjb3Blc0JlaW5nVXBkYXRlZC5pbmRleE9mKGZ1bGxTY29wZSkgPj0gMDtcbiAgICAgICAgaWYgKGZ1bGxTY29wZSAmJiBpc0N1cnJlbnRFbG0gJiYgIWlzU2NvcGVCZWluZ1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHNCeUZ1bGxTY29wZS5kZWxldGUoZnVsbFNjb3BlKTtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLmRlbGV0ZShmdWxsU2NvcGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJc29sYXRlTW9kdWxlLnByb3RvdHlwZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24gKGZ1bGxTY29wZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c0J5RnVsbFNjb3BlLmdldChmdWxsU2NvcGUpO1xuICAgIH07XG4gICAgSXNvbGF0ZU1vZHVsZS5wcm90b3R5cGUuZ2V0RnVsbFNjb3BlID0gZnVuY3Rpb24gKGVsbSkge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLmVsZW1lbnRzQnlGdWxsU2NvcGUuZW50cmllcygpO1xuICAgICAgICBmb3IgKHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7ICEhcmVzdWx0LnZhbHVlOyByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHJlc3VsdC52YWx1ZSwgZnVsbFNjb3BlID0gX2FbMF0sIGVsZW1lbnQgPSBfYVsxXTtcbiAgICAgICAgICAgIGlmIChlbG0gPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVsbFNjb3BlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIElzb2xhdGVNb2R1bGUucHJvdG90eXBlLmFkZEV2ZW50RGVsZWdhdG9yID0gZnVuY3Rpb24gKGZ1bGxTY29wZSwgZXZlbnREZWxlZ2F0b3IpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRvcnMgPSB0aGlzLmRlbGVnYXRvcnNCeUZ1bGxTY29wZS5nZXQoZnVsbFNjb3BlKTtcbiAgICAgICAgaWYgKCFkZWxlZ2F0b3JzKSB7XG4gICAgICAgICAgICBkZWxlZ2F0b3JzID0gW107XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRvcnNCeUZ1bGxTY29wZS5zZXQoZnVsbFNjb3BlLCBkZWxlZ2F0b3JzKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxlZ2F0b3JzW2RlbGVnYXRvcnMubGVuZ3RoXSA9IGV2ZW50RGVsZWdhdG9yO1xuICAgIH07XG4gICAgSXNvbGF0ZU1vZHVsZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNCeUZ1bGxTY29wZS5jbGVhcigpO1xuICAgICAgICB0aGlzLmRlbGVnYXRvcnNCeUZ1bGxTY29wZS5jbGVhcigpO1xuICAgICAgICB0aGlzLmZ1bGxTY29wZXNCZWluZ1VwZGF0ZWQgPSBbXTtcbiAgICB9O1xuICAgIElzb2xhdGVNb2R1bGUucHJvdG90eXBlLmNyZWF0ZU1vZHVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAob2xkVk5vZGUsIHZOb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gb2xkVk5vZGUuZGF0YSwgb2xkRGF0YSA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hO1xuICAgICAgICAgICAgICAgIHZhciBlbG0gPSB2Tm9kZS5lbG0sIF9iID0gdk5vZGUuZGF0YSwgZGF0YSA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iO1xuICAgICAgICAgICAgICAgIHZhciBvbGRGdWxsU2NvcGUgPSBvbGREYXRhLmlzb2xhdGUgfHwgJyc7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxTY29wZSA9IGRhdGEuaXNvbGF0ZSB8fCAnJztcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZGF0YSBzdHJ1Y3R1cmVzIHdpdGggdGhlIG5ld2x5LWNyZWF0ZWQgZWxlbWVudFxuICAgICAgICAgICAgICAgIGlmIChmdWxsU2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5mdWxsU2NvcGVzQmVpbmdVcGRhdGVkLnB1c2goZnVsbFNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEZ1bGxTY29wZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50c0J5RnVsbFNjb3BlLmRlbGV0ZShvbGRGdWxsU2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudHNCeUZ1bGxTY29wZS5zZXQoZnVsbFNjb3BlLCBlbG0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZGVsZWdhdG9ycyBmb3IgdGhpcyBzY29wZVxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsZWdhdG9ycyA9IHNlbGYuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLmdldChmdWxsU2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsZWdhdG9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGRlbGVnYXRvcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRvcnNbaV0udXBkYXRlT3JpZ2luKGVsbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9sZEZ1bGxTY29wZSAmJiAhZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudHNCeUZ1bGxTY29wZS5kZWxldGUoZnVsbFNjb3BlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAob2xkVk5vZGUsIHZOb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gb2xkVk5vZGUuZGF0YSwgb2xkRGF0YSA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hO1xuICAgICAgICAgICAgICAgIHZhciBlbG0gPSB2Tm9kZS5lbG0sIF9iID0gdk5vZGUuZGF0YSwgZGF0YSA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iO1xuICAgICAgICAgICAgICAgIHZhciBvbGRGdWxsU2NvcGUgPSBvbGREYXRhLmlzb2xhdGUgfHwgJyc7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxTY29wZSA9IGRhdGEuaXNvbGF0ZSB8fCAnJztcbiAgICAgICAgICAgICAgICAvLyBTYW1lIGVsZW1lbnQsIGJ1dCBkaWZmZXJlbnQgc2NvcGUsIHNvIHVwZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVzXG4gICAgICAgICAgICAgICAgaWYgKGZ1bGxTY29wZSAmJiBmdWxsU2NvcGUgIT09IG9sZEZ1bGxTY29wZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkRnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnRzQnlGdWxsU2NvcGUuZGVsZXRlKG9sZEZ1bGxTY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50c0J5RnVsbFNjb3BlLnNldChmdWxsU2NvcGUsIGVsbSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWxlZ2F0b3JzID0gc2VsZi5kZWxlZ2F0b3JzQnlGdWxsU2NvcGUuZ2V0KG9sZEZ1bGxTY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWxlZ2F0b3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRlbGVnYXRvcnNCeUZ1bGxTY29wZS5kZWxldGUob2xkRnVsbFNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLnNldChmdWxsU2NvcGUsIGRlbGVnYXRvcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNhbWUgZWxlbWVudCwgYnV0IGxvc3QgdGhlIHNjb3BlLCBzbyB1cGRhdGUgdGhlIGRhdGEgc3RydWN0dXJlc1xuICAgICAgICAgICAgICAgIGlmIChvbGRGdWxsU2NvcGUgJiYgIWZ1bGxTY29wZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnRzQnlGdWxsU2NvcGUuZGVsZXRlKG9sZEZ1bGxTY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLmRlbGV0ZShvbGRGdWxsU2NvcGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAodk5vZGUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNsZWFudXBWTm9kZSh2Tm9kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAodk5vZGUsIGNiKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jbGVhbnVwVk5vZGUodk5vZGUpO1xuICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9zdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuZnVsbFNjb3Blc0JlaW5nVXBkYXRlZCA9IFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBJc29sYXRlTW9kdWxlO1xufSgpKTtcbmV4cG9ydHMuSXNvbGF0ZU1vZHVsZSA9IElzb2xhdGVNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jc29sYXRlTW9kdWxlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9Jc29sYXRlTW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBoXzEgPSByZXF1aXJlKFwic25hYmJkb20vaFwiKTtcbnZhciBjbGFzc05hbWVGcm9tVk5vZGVfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS1zZWxlY3Rvci9saWIvY29tbW9uanMvY2xhc3NOYW1lRnJvbVZOb2RlXCIpO1xudmFyIHNlbGVjdG9yUGFyc2VyXzEgPSByZXF1aXJlKFwic25hYmJkb20tc2VsZWN0b3IvbGliL2NvbW1vbmpzL3NlbGVjdG9yUGFyc2VyXCIpO1xudmFyIFZOb2RlV3JhcHBlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVk5vZGVXcmFwcGVyKHJvb3RFbGVtZW50KSB7XG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQgPSByb290RWxlbWVudDtcbiAgICB9XG4gICAgVk5vZGVXcmFwcGVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICAgIGlmICh2bm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JhcChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gc2VsZWN0b3JQYXJzZXJfMS5zZWxlY3RvclBhcnNlcih2bm9kZSksIHNlbFRhZ05hbWUgPSBfYS50YWdOYW1lLCBzZWxJZCA9IF9hLmlkO1xuICAgICAgICB2YXIgdk5vZGVDbGFzc05hbWUgPSBjbGFzc05hbWVGcm9tVk5vZGVfMS5jbGFzc05hbWVGcm9tVk5vZGUodm5vZGUpO1xuICAgICAgICB2YXIgdk5vZGVEYXRhID0gdm5vZGUuZGF0YSB8fCB7fTtcbiAgICAgICAgdmFyIHZOb2RlRGF0YVByb3BzID0gdk5vZGVEYXRhLnByb3BzIHx8IHt9O1xuICAgICAgICB2YXIgX2IgPSB2Tm9kZURhdGFQcm9wcy5pZCwgdk5vZGVJZCA9IF9iID09PSB2b2lkIDAgPyBzZWxJZCA6IF9iO1xuICAgICAgICB2YXIgaXNWTm9kZUFuZFJvb3RFbGVtZW50SWRlbnRpY2FsID0gdHlwZW9mIHZOb2RlSWQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICB2Tm9kZUlkLnRvVXBwZXJDYXNlKCkgPT09IHRoaXMucm9vdEVsZW1lbnQuaWQudG9VcHBlckNhc2UoKSAmJlxuICAgICAgICAgICAgc2VsVGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSB0aGlzLnJvb3RFbGVtZW50LnRhZ05hbWUudG9VcHBlckNhc2UoKSAmJlxuICAgICAgICAgICAgdk5vZGVDbGFzc05hbWUudG9VcHBlckNhc2UoKSA9PT0gdGhpcy5yb290RWxlbWVudC5jbGFzc05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKGlzVk5vZGVBbmRSb290RWxlbWVudElkZW50aWNhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndyYXAoW3Zub2RlXSk7XG4gICAgfTtcbiAgICBWTm9kZVdyYXBwZXIucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5yb290RWxlbWVudCwgdGFnTmFtZSA9IF9hLnRhZ05hbWUsIGlkID0gX2EuaWQsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZTtcbiAgICAgICAgdmFyIHNlbElkID0gaWQgPyBcIiNcIiArIGlkIDogJyc7XG4gICAgICAgIHZhciBzZWxDbGFzcyA9IGNsYXNzTmFtZSA/XG4gICAgICAgICAgICBcIi5cIiArIGNsYXNzTmFtZS5zcGxpdChcIiBcIikuam9pbihcIi5cIikgOiAnJztcbiAgICAgICAgcmV0dXJuIGhfMS5oKFwiXCIgKyB0YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyBzZWxJZCArIHNlbENsYXNzLCB7fSwgY2hpbGRyZW4pO1xuICAgIH07XG4gICAgcmV0dXJuIFZOb2RlV3JhcHBlcjtcbn0oKSk7XG5leHBvcnRzLlZOb2RlV3JhcHBlciA9IFZOb2RlV3JhcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZOb2RlV3JhcHBlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvVk5vZGVXcmFwcGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBoXzEgPSByZXF1aXJlKFwic25hYmJkb20vaFwiKTtcbmZ1bmN0aW9uIGlzVmFsaWRTdHJpbmcocGFyYW0pIHtcbiAgICByZXR1cm4gdHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJyAmJiBwYXJhbS5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gaXNTZWxlY3RvcihwYXJhbSkge1xuICAgIHJldHVybiBpc1ZhbGlkU3RyaW5nKHBhcmFtKSAmJiAocGFyYW1bMF0gPT09ICcuJyB8fCBwYXJhbVswXSA9PT0gJyMnKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRhZ0Z1bmN0aW9uKHRhZ05hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHlwZXJzY3JpcHQoYSwgYiwgYykge1xuICAgICAgICB2YXIgaGFzQSA9IHR5cGVvZiBhICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgdmFyIGhhc0IgPSB0eXBlb2YgYiAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIHZhciBoYXNDID0gdHlwZW9mIGMgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICBpZiAoaXNTZWxlY3RvcihhKSkge1xuICAgICAgICAgICAgaWYgKGhhc0IgJiYgaGFzQykge1xuICAgICAgICAgICAgICAgIHJldHVybiBoXzEuaCh0YWdOYW1lICsgYSwgYiwgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNCKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhfMS5oKHRhZ05hbWUgKyBhLCBiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBoXzEuaCh0YWdOYW1lICsgYSwge30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc0MpIHtcbiAgICAgICAgICAgIHJldHVybiBoXzEuaCh0YWdOYW1lICsgYSwgYiwgYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzQikge1xuICAgICAgICAgICAgcmV0dXJuIGhfMS5oKHRhZ05hbWUsIGEsIGIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc0EpIHtcbiAgICAgICAgICAgIHJldHVybiBoXzEuaCh0YWdOYW1lLCBhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBoXzEuaCh0YWdOYW1lLCB7fSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxudmFyIFNWR19UQUdfTkFNRVMgPSBbXG4gICAgJ2EnLCAnYWx0R2x5cGgnLCAnYWx0R2x5cGhEZWYnLCAnYWx0R2x5cGhJdGVtJywgJ2FuaW1hdGUnLCAnYW5pbWF0ZUNvbG9yJyxcbiAgICAnYW5pbWF0ZU1vdGlvbicsICdhbmltYXRlVHJhbnNmb3JtJywgJ2NpcmNsZScsICdjbGlwUGF0aCcsICdjb2xvclByb2ZpbGUnLFxuICAgICdjdXJzb3InLCAnZGVmcycsICdkZXNjJywgJ2VsbGlwc2UnLCAnZmVCbGVuZCcsICdmZUNvbG9yTWF0cml4JyxcbiAgICAnZmVDb21wb25lbnRUcmFuc2ZlcicsICdmZUNvbXBvc2l0ZScsICdmZUNvbnZvbHZlTWF0cml4JywgJ2ZlRGlmZnVzZUxpZ2h0aW5nJyxcbiAgICAnZmVEaXNwbGFjZW1lbnRNYXAnLCAnZmVEaXN0YW50TGlnaHQnLCAnZmVGbG9vZCcsICdmZUZ1bmNBJywgJ2ZlRnVuY0InLFxuICAgICdmZUZ1bmNHJywgJ2ZlRnVuY1InLCAnZmVHYXVzc2lhbkJsdXInLCAnZmVJbWFnZScsICdmZU1lcmdlJywgJ2ZlTWVyZ2VOb2RlJyxcbiAgICAnZmVNb3JwaG9sb2d5JywgJ2ZlT2Zmc2V0JywgJ2ZlUG9pbnRMaWdodCcsICdmZVNwZWN1bGFyTGlnaHRpbmcnLFxuICAgICdmZVNwb3RsaWdodCcsICdmZVRpbGUnLCAnZmVUdXJidWxlbmNlJywgJ2ZpbHRlcicsICdmb250JywgJ2ZvbnRGYWNlJyxcbiAgICAnZm9udEZhY2VGb3JtYXQnLCAnZm9udEZhY2VOYW1lJywgJ2ZvbnRGYWNlU3JjJywgJ2ZvbnRGYWNlVXJpJyxcbiAgICAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2dseXBoJywgJ2dseXBoUmVmJywgJ2hrZXJuJywgJ2ltYWdlJywgJ2xpbmUnLFxuICAgICdsaW5lYXJHcmFkaWVudCcsICdtYXJrZXInLCAnbWFzaycsICdtZXRhZGF0YScsICdtaXNzaW5nR2x5cGgnLCAnbXBhdGgnLFxuICAgICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3NjcmlwdCcsXG4gICAgJ3NldCcsICdzdG9wJywgJ3N0eWxlJywgJ3N3aXRjaCcsICdzeW1ib2wnLCAndGV4dCcsICd0ZXh0UGF0aCcsICd0aXRsZScsXG4gICAgJ3RyZWYnLCAndHNwYW4nLCAndXNlJywgJ3ZpZXcnLCAndmtlcm4nLFxuXTtcbnZhciBzdmcgPSBjcmVhdGVUYWdGdW5jdGlvbignc3ZnJyk7XG5TVkdfVEFHX05BTUVTLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgIHN2Z1t0YWddID0gY3JlYXRlVGFnRnVuY3Rpb24odGFnKTtcbn0pO1xudmFyIFRBR19OQU1FUyA9IFtcbiAgICAnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsXG4gICAgJ2JkaScsICdiZG8nLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsXG4gICAgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGQnLCAnZGVsJywgJ2RmbicsICdkaXInLCAnZGl2JywgJ2RsJyxcbiAgICAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLFxuICAgICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsXG4gICAgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLFxuICAgICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWVudScsICdtZXRhJywgJ25hdicsICdub3NjcmlwdCcsXG4gICAgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAncCcsICdwYXJhbScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsXG4gICAgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsXG4gICAgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJyxcbiAgICAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGl0bGUnLCAndHInLCAndScsICd1bCcsICd2aWRlbycsXG5dO1xudmFyIGV4cG9ydGVkID0geyBTVkdfVEFHX05BTUVTOiBTVkdfVEFHX05BTUVTLCBUQUdfTkFNRVM6IFRBR19OQU1FUywgc3ZnOiBzdmcsIGlzU2VsZWN0b3I6IGlzU2VsZWN0b3IsIGNyZWF0ZVRhZ0Z1bmN0aW9uOiBjcmVhdGVUYWdGdW5jdGlvbiB9O1xuVEFHX05BTUVTLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgICBleHBvcnRlZFtuXSA9IGNyZWF0ZVRhZ0Z1bmN0aW9uKG4pO1xufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh5cGVyc2NyaXB0LWhlbHBlcnMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL2h5cGVyc2NyaXB0LWhlbHBlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGlzb2xhdGVTb3VyY2Uoc291cmNlLCBzY29wZSkge1xuICAgIHJldHVybiBzb3VyY2Uuc2VsZWN0KHV0aWxzXzEuU0NPUEVfUFJFRklYICsgc2NvcGUpO1xufVxuZXhwb3J0cy5pc29sYXRlU291cmNlID0gaXNvbGF0ZVNvdXJjZTtcbmZ1bmN0aW9uIGlzb2xhdGVTaW5rKHNpbmssIGZ1bGxTY29wZSkge1xuICAgIHJldHVybiBzaW5rLm1hcChmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgICAgLy8gSWdub3JlIGlmIGFscmVhZHkgaGFkIHVwLXRvLWRhdGUgZnVsbCBzY29wZSBpbiB2bm9kZS5kYXRhLmlzb2xhdGVcbiAgICAgICAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5pc29sYXRlKSB7XG4gICAgICAgICAgICB2YXIgaXNvbGF0ZURhdGEgPSB2bm9kZS5kYXRhLmlzb2xhdGU7XG4gICAgICAgICAgICB2YXIgcHJldkZ1bGxTY29wZU51bSA9IGlzb2xhdGVEYXRhLnJlcGxhY2UoLyhjeWNsZXxcXC0pL2csICcnKTtcbiAgICAgICAgICAgIHZhciBmdWxsU2NvcGVOdW0gPSBmdWxsU2NvcGUucmVwbGFjZSgvKGN5Y2xlfFxcLSkvZywgJycpO1xuICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlSW50KHByZXZGdWxsU2NvcGVOdW0pKVxuICAgICAgICAgICAgICAgIHx8IGlzTmFOKHBhcnNlSW50KGZ1bGxTY29wZU51bSkpXG4gICAgICAgICAgICAgICAgfHwgcHJldkZ1bGxTY29wZU51bSA+IGZ1bGxTY29wZU51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2bm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJbnNlcnQgdXAtdG8tZGF0ZSBmdWxsIHNjb3BlIGluIHZub2RlLmRhdGEuaXNvbGF0ZSwgYW5kIGFsc28gYSBrZXkgaWYgbmVlZGVkXG4gICAgICAgIHZub2RlLmRhdGEgPSB2bm9kZS5kYXRhIHx8IHt9O1xuICAgICAgICB2bm9kZS5kYXRhLmlzb2xhdGUgPSBmdWxsU2NvcGU7XG4gICAgICAgIGlmICh0eXBlb2Ygdm5vZGUua2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdm5vZGUua2V5ID0gdXRpbHNfMS5TQ09QRV9QUkVGSVggKyBmdWxsU2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH0pO1xufVxuZXhwb3J0cy5pc29sYXRlU2luayA9IGlzb2xhdGVTaW5rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNvbGF0ZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvaXNvbGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgc25hYmJkb21fMSA9IHJlcXVpcmUoXCJzbmFiYmRvbVwiKTtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBNYWluRE9NU291cmNlXzEgPSByZXF1aXJlKFwiLi9NYWluRE9NU291cmNlXCIpO1xudmFyIHRvdm5vZGVfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS90b3Zub2RlXCIpO1xudmFyIFZOb2RlV3JhcHBlcl8xID0gcmVxdWlyZShcIi4vVk5vZGVXcmFwcGVyXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBtb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzXCIpO1xudmFyIElzb2xhdGVNb2R1bGVfMSA9IHJlcXVpcmUoXCIuL0lzb2xhdGVNb2R1bGVcIik7XG52YXIgTWFwUG9seWZpbGwgPSByZXF1aXJlKCdlczYtbWFwJyk7XG5mdW5jdGlvbiBtYWtlRE9NRHJpdmVySW5wdXRHdWFyZChtb2R1bGVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZHVsZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbmFsIG1vZHVsZXMgb3B0aW9uIG11c3QgYmUgXCIgK1xuICAgICAgICAgICAgXCJhbiBhcnJheSBmb3Igc25hYmJkb20gbW9kdWxlc1wiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkb21Ecml2ZXJJbnB1dEd1YXJkKHZpZXckKSB7XG4gICAgaWYgKCF2aWV3JFxuICAgICAgICB8fCB0eXBlb2YgdmlldyQuYWRkTGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIlxuICAgICAgICB8fCB0eXBlb2YgdmlldyQuZm9sZCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBET00gZHJpdmVyIGZ1bmN0aW9uIGV4cGVjdHMgYXMgaW5wdXQgYSBTdHJlYW0gb2YgXCIgK1xuICAgICAgICAgICAgXCJ2aXJ0dWFsIERPTSBlbGVtZW50c1wiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkcm9wQ29tcGxldGlvbihpbnB1dCkge1xuICAgIHJldHVybiB4c3RyZWFtXzEuZGVmYXVsdC5tZXJnZShpbnB1dCwgeHN0cmVhbV8xLmRlZmF1bHQubmV2ZXIoKSk7XG59XG5mdW5jdGlvbiB1bndyYXBFbGVtZW50RnJvbVZOb2RlKHZub2RlKSB7XG4gICAgcmV0dXJuIHZub2RlLmVsbTtcbn1cbmZ1bmN0aW9uIHJlcG9ydFNuYWJiZG9tRXJyb3IoZXJyKSB7XG4gICAgKGNvbnNvbGUuZXJyb3IgfHwgY29uc29sZS5sb2cpKGVycik7XG59XG5mdW5jdGlvbiBtYWtlRE9NRHJpdmVyKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHZhciBtb2R1bGVzID0gb3B0aW9ucy5tb2R1bGVzIHx8IG1vZHVsZXNfMS5kZWZhdWx0O1xuICAgIHZhciBpc29sYXRlTW9kdWxlID0gbmV3IElzb2xhdGVNb2R1bGVfMS5Jc29sYXRlTW9kdWxlKCk7XG4gICAgdmFyIHBhdGNoID0gc25hYmJkb21fMS5pbml0KFtpc29sYXRlTW9kdWxlLmNyZWF0ZU1vZHVsZSgpXS5jb25jYXQobW9kdWxlcykpO1xuICAgIHZhciByb290RWxlbWVudCA9IHV0aWxzXzEuZ2V0RWxlbWVudChjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIHZub2RlV3JhcHBlciA9IG5ldyBWTm9kZVdyYXBwZXJfMS5WTm9kZVdyYXBwZXIocm9vdEVsZW1lbnQpO1xuICAgIHZhciBkZWxlZ2F0b3JzID0gbmV3IE1hcFBvbHlmaWxsKCk7XG4gICAgbWFrZURPTURyaXZlcklucHV0R3VhcmQobW9kdWxlcyk7XG4gICAgZnVuY3Rpb24gRE9NRHJpdmVyKHZub2RlJCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSAnRE9NJzsgfVxuICAgICAgICBkb21Ecml2ZXJJbnB1dEd1YXJkKHZub2RlJCk7XG4gICAgICAgIHZhciBzYW5pdGF0aW9uJCA9IHhzdHJlYW1fMS5kZWZhdWx0LmNyZWF0ZSgpO1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnQkID0geHN0cmVhbV8xLmRlZmF1bHQubWVyZ2Uodm5vZGUkLmVuZFdoZW4oc2FuaXRhdGlvbiQpLCBzYW5pdGF0aW9uJClcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHZub2RlKSB7IHJldHVybiB2bm9kZVdyYXBwZXIuY2FsbCh2bm9kZSk7IH0pXG4gICAgICAgICAgICAuZm9sZChwYXRjaCwgdG92bm9kZV8xLnRvVk5vZGUocm9vdEVsZW1lbnQpKVxuICAgICAgICAgICAgLmRyb3AoMSlcbiAgICAgICAgICAgIC5tYXAodW53cmFwRWxlbWVudEZyb21WTm9kZSlcbiAgICAgICAgICAgIC5jb21wb3NlKGRyb3BDb21wbGV0aW9uKSAvLyBkb24ndCBjb21wbGV0ZSB0aGlzIHN0cmVhbVxuICAgICAgICAgICAgLnN0YXJ0V2l0aChyb290RWxlbWVudCk7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBzbmFiYmRvbSBwYXRjaGluZywgb3ZlciB0aW1lXG4gICAgICAgIHZhciBsaXN0ZW5lciA9IHsgZXJyb3I6IHJlcG9ydFNuYWJiZG9tRXJyb3IgfTtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJykge1xuICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCQuYWRkTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcm9vdEVsZW1lbnQkLmFkZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE1haW5ET01Tb3VyY2VfMS5NYWluRE9NU291cmNlKHJvb3RFbGVtZW50JCwgc2FuaXRhdGlvbiQsIFtdLCBpc29sYXRlTW9kdWxlLCBkZWxlZ2F0b3JzLCBuYW1lKTtcbiAgICB9XG4gICAgO1xuICAgIHJldHVybiBET01Ecml2ZXI7XG59XG5leHBvcnRzLm1ha2VET01Ecml2ZXIgPSBtYWtlRE9NRHJpdmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZURPTURyaXZlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvbWFrZURPTURyaXZlci5qc1xuLy8gbW9kdWxlIGlkID0gNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgSFRNTFNvdXJjZV8xID0gcmVxdWlyZShcIi4vSFRNTFNvdXJjZVwiKTtcbnZhciBpbml0ID0gcmVxdWlyZSgnc25hYmJkb20tdG8taHRtbC9pbml0Jyk7XG52YXIgbW9kdWxlc0ZvckhUTUwgPSByZXF1aXJlKCdzbmFiYmRvbS10by1odG1sL21vZHVsZXMnKTtcbnZhciBkZWZhdWx0TW9kdWxlcyA9IFtcbiAgICBtb2R1bGVzRm9ySFRNTC5hdHRyaWJ1dGVzLFxuICAgIG1vZHVsZXNGb3JIVE1MLnByb3BzLFxuICAgIG1vZHVsZXNGb3JIVE1MLmNsYXNzLFxuICAgIG1vZHVsZXNGb3JIVE1MLnN0eWxlLFxuXTtcbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyB9O1xuZnVuY3Rpb24gbWFrZUhUTUxEcml2ZXIoZWZmZWN0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFyIG1vZHVsZXMgPSBvcHRpb25zLm1vZHVsZXMgfHwgZGVmYXVsdE1vZHVsZXM7XG4gICAgdmFyIHRvSFRNTCA9IGluaXQobW9kdWxlcyk7XG4gICAgZnVuY3Rpb24gaHRtbERyaXZlcih2bm9kZSQsIG5hbWUpIHtcbiAgICAgICAgdmFyIGh0bWwkID0gdm5vZGUkLm1hcCh0b0hUTUwpO1xuICAgICAgICBodG1sJC5hZGRMaXN0ZW5lcih7XG4gICAgICAgICAgICBuZXh0OiBlZmZlY3QgfHwgbm9vcCxcbiAgICAgICAgICAgIGVycm9yOiBub29wLFxuICAgICAgICAgICAgY29tcGxldGU6IG5vb3AsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IEhUTUxTb3VyY2VfMS5IVE1MU291cmNlKGh0bWwkLCBuYW1lKTtcbiAgICB9XG4gICAgO1xuICAgIHJldHVybiBodG1sRHJpdmVyO1xufVxuZXhwb3J0cy5tYWtlSFRNTERyaXZlciA9IG1ha2VIVE1MRHJpdmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZUhUTUxEcml2ZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL21ha2VIVE1MRHJpdmVyLmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBhZGFwdF8xID0gcmVxdWlyZShcIkBjeWNsZS9ydW4vbGliL2FkYXB0XCIpO1xudmFyIFNDT1BFX1BSRUZJWCA9ICdfX18nO1xudmFyIE1vY2tlZERPTVNvdXJjZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9ja2VkRE9NU291cmNlKF9tb2NrQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuX21vY2tDb25maWcgPSBfbW9ja0NvbmZpZztcbiAgICAgICAgaWYgKF9tb2NrQ29uZmlnWydlbGVtZW50cyddKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50cyA9IF9tb2NrQ29uZmlnWydlbGVtZW50cyddO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudHMgPSBhZGFwdF8xLmFkYXB0KHhzdHJlYW1fMS5kZWZhdWx0LmVtcHR5KCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzLl9lbGVtZW50cztcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gJ01vY2tlZERPTSc7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBNb2NrZWRET01Tb3VyY2UucHJvdG90eXBlLmV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFR5cGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHN0cmVhbUZvckV2ZW50VHlwZSA9IHRoaXMuX21vY2tDb25maWdbZXZlbnRUeXBlXTtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0XzEuYWRhcHQoc3RyZWFtRm9yRXZlbnRUeXBlIHx8IHhzdHJlYW1fMS5kZWZhdWx0LmVtcHR5KCkpO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSAnTW9ja2VkRE9NJztcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBtb2NrQ29uZmlnRm9yU2VsZWN0b3IgPSB0aGlzLl9tb2NrQ29uZmlnW3NlbGVjdG9yXSB8fCB7fTtcbiAgICAgICAgcmV0dXJuIG5ldyBNb2NrZWRET01Tb3VyY2UobW9ja0NvbmZpZ0ZvclNlbGVjdG9yKTtcbiAgICB9O1xuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuaXNvbGF0ZVNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc2VsZWN0KCcuJyArIFNDT1BFX1BSRUZJWCArIHNjb3BlKTtcbiAgICB9O1xuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuaXNvbGF0ZVNpbmsgPSBmdW5jdGlvbiAoc2luaywgc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHNpbmsubWFwKGZ1bmN0aW9uICh2bm9kZSkge1xuICAgICAgICAgICAgaWYgKHZub2RlLnNlbCAmJiB2bm9kZS5zZWwuaW5kZXhPZihTQ09QRV9QUkVGSVggKyBzY29wZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuc2VsICs9IFwiLlwiICsgU0NPUEVfUFJFRklYICsgc2NvcGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBNb2NrZWRET01Tb3VyY2U7XG59KCkpO1xuZXhwb3J0cy5Nb2NrZWRET01Tb3VyY2UgPSBNb2NrZWRET01Tb3VyY2U7XG5mdW5jdGlvbiBtb2NrRE9NU291cmNlKG1vY2tDb25maWcpIHtcbiAgICByZXR1cm4gbmV3IE1vY2tlZERPTVNvdXJjZShtb2NrQ29uZmlnKTtcbn1cbmV4cG9ydHMubW9ja0RPTVNvdXJjZSA9IG1vY2tET01Tb3VyY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2NrRE9NU291cmNlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9tb2NrRE9NU291cmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBjbGFzc18xID0gcmVxdWlyZShcInNuYWJiZG9tL21vZHVsZXMvY2xhc3NcIik7XG5leHBvcnRzLkNsYXNzTW9kdWxlID0gY2xhc3NfMS5kZWZhdWx0O1xudmFyIHByb3BzXzEgPSByZXF1aXJlKFwic25hYmJkb20vbW9kdWxlcy9wcm9wc1wiKTtcbmV4cG9ydHMuUHJvcHNNb2R1bGUgPSBwcm9wc18xLmRlZmF1bHQ7XG52YXIgYXR0cmlidXRlc18xID0gcmVxdWlyZShcInNuYWJiZG9tL21vZHVsZXMvYXR0cmlidXRlc1wiKTtcbmV4cG9ydHMuQXR0cnNNb2R1bGUgPSBhdHRyaWJ1dGVzXzEuZGVmYXVsdDtcbnZhciBzdHlsZV8xID0gcmVxdWlyZShcInNuYWJiZG9tL21vZHVsZXMvc3R5bGVcIik7XG5leHBvcnRzLlN0eWxlTW9kdWxlID0gc3R5bGVfMS5kZWZhdWx0O1xudmFyIGRhdGFzZXRfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS9tb2R1bGVzL2RhdGFzZXRcIik7XG5leHBvcnRzLkRhdGFzZXRNb2R1bGUgPSBkYXRhc2V0XzEuZGVmYXVsdDtcbnZhciBtb2R1bGVzID0gW3N0eWxlXzEuZGVmYXVsdCwgY2xhc3NfMS5kZWZhdWx0LCBwcm9wc18xLmRlZmF1bHQsIGF0dHJpYnV0ZXNfMS5kZWZhdWx0LCBkYXRhc2V0XzEuZGVmYXVsdF07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlcy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvbW9kdWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZShcInhzdHJlYW1cIik7XG52YXIgQ0xJQ0tfRVZFTlQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50Lm9udG91Y2hzdGFydCA/XG4gICAgJ3RvdWNoc3RhcnQnIDpcbiAgICAnY2xpY2snO1xuZnVuY3Rpb24gd2hpY2goZXYpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZSA9IGV2IHx8IHdpbmRvdy5ldmVudDtcbiAgICByZXR1cm4gZS53aGljaCA9PT0gbnVsbCA/IGUuYnV0dG9uIDogZS53aGljaDtcbn1cbmZ1bmN0aW9uIHNhbWVPcmlnaW4oaHJlZikge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBocmVmICYmIGhyZWYuaW5kZXhPZih3aW5kb3cubG9jYXRpb24ub3JpZ2luKSA9PT0gMDtcbn1cbmZ1bmN0aW9uIG1ha2VDbGlja0xpc3RlbmVyKHB1c2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2xpY2tMaXN0ZW5lcihldmVudCkge1xuICAgICAgICBpZiAod2hpY2goZXZlbnQpICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgIT09ICdBJykge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlTmFtZSAhPT0gJ0EnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkb3dubG9hZCcpIHx8XG4gICAgICAgICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZSgncmVsJykgPT09ICdleHRlcm5hbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC50YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGluayA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIGlmIChsaW5rICYmIGxpbmsuaW5kZXhPZignbWFpbHRvOicpID4gLTEgfHwgbGluay5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2FtZU9yaWdpbihlbGVtZW50LmhyZWYpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIHBhdGhuYW1lID0gZWxlbWVudC5wYXRobmFtZSwgc2VhcmNoID0gZWxlbWVudC5zZWFyY2gsIF9hID0gZWxlbWVudC5oYXNoLCBoYXNoID0gX2EgPT09IHZvaWQgMCA/ICcnIDogX2E7XG4gICAgICAgIHB1c2gocGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY2FwdHVyZUFuY2hvckNsaWNrcyhwdXNoKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbWFrZUNsaWNrTGlzdGVuZXIocHVzaCk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoQ0xJQ0tfRVZFTlQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2FwdHVyZUNsaWNrcyhoaXN0b3J5RHJpdmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhpc3RvcnlEcml2ZXJXaXRoQ2xpY2tDYXB0dXJlKHNpbmskKSB7XG4gICAgICAgIHZhciBpbnRlcm5hbFNpbmskID0geHN0cmVhbV8xLmRlZmF1bHQuY3JlYXRlKCk7XG4gICAgICAgIGNhcHR1cmVBbmNob3JDbGlja3MoZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICAgICAgICBpbnRlcm5hbFNpbmskLl9uKHsgdHlwZTogJ3B1c2gnLCBwYXRobmFtZTogcGF0aG5hbWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaW5rJC5fYWRkKGludGVybmFsU2luayQpO1xuICAgICAgICByZXR1cm4gaGlzdG9yeURyaXZlcihpbnRlcm5hbFNpbmskKTtcbiAgICB9O1xufVxuZXhwb3J0cy5jYXB0dXJlQ2xpY2tzID0gY2FwdHVyZUNsaWNrcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcHR1cmVDbGlja3MuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9oaXN0b3J5L2xpYi9jYXB0dXJlQ2xpY2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbmZ1bmN0aW9uIGNyZWF0ZUhpc3RvcnkkKGhpc3RvcnksIHNpbmskKSB7XG4gICAgdmFyIGhpc3RvcnkkID0geHN0cmVhbV8xLmRlZmF1bHQuY3JlYXRlV2l0aE1lbW9yeSgpLnN0YXJ0V2l0aChoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB2YXIgY2FsbCA9IG1ha2VDYWxsT25IaXN0b3J5KGhpc3RvcnkpO1xuICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2MpIHsgaGlzdG9yeSQuX24obG9jKTsgfSk7XG4gICAgdmFyIHN1YiA9IHNpbmskLnN1YnNjcmliZShjcmVhdGVPYnNlcnZlcihjYWxsLCB1bmxpc3RlbikpO1xuICAgIGhpc3RvcnkkLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7IHN1Yi51bnN1YnNjcmliZSgpOyB1bmxpc3RlbigpOyB9O1xuICAgIHJldHVybiBoaXN0b3J5JDtcbn1cbmV4cG9ydHMuY3JlYXRlSGlzdG9yeSQgPSBjcmVhdGVIaXN0b3J5JDtcbjtcbmZ1bmN0aW9uIG1ha2VDYWxsT25IaXN0b3J5KGhpc3RvcnkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2FsbChpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3B1c2gnKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goaW5wdXQucGF0aG5hbWUsIGlucHV0LnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JlcGxhY2UnKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UoaW5wdXQucGF0aG5hbWUsIGlucHV0LnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2dvJykge1xuICAgICAgICAgICAgaGlzdG9yeS5nbyhpbnB1dC5hbW91bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dC50eXBlID09PSAnZ29CYWNrJykge1xuICAgICAgICAgICAgaGlzdG9yeS5nb0JhY2soKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2dvRm9yd2FyZCcpIHtcbiAgICAgICAgICAgIGhpc3RvcnkuZ29Gb3J3YXJkKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXIoY2FsbCwgdW5saXN0ZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2FsbCh7IHR5cGU6ICdwdXNoJywgcGF0aG5hbWU6IGlucHV0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbChpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHVubGlzdGVuKCk7IH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IHNldFRpbWVvdXQodW5saXN0ZW4pOyB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVIaXN0b3J5JC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2hpc3RvcnkvbGliL2NyZWF0ZUhpc3RvcnkkLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogV3JhcHMgYSBIaXN0b3J5IERyaXZlciB0byBhZGQgXCJjbGljayBjYXB0dXJpbmdcIiBmdW5jdGlvbmFsaXR5LlxuICpcbiAqIElmIHlvdSB3YW50IHRvIGludGVyY2VwdCBhbmQgaGFuZGxlIGFueSBjbGljayBldmVudCB0aGF0IGxlYWRzIHRvIGEgbGluayxcbiAqIGxpa2Ugb24gYW4gYDxhPmAgZWxlbWVudCwgeW91IHBhc3MgeW91ciBleGlzdGluZyBkcml2ZXIgKGUuZy4gY3JlYXRlZCBmcm9tXG4gKiBgbWFrZUhpc3RvcnlEcml2ZXIoKWApIGFzIGFyZ3VtZW50IGFuZCB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGFub3RoZXJcbiAqIGRyaXZlciBvZiB0aGUgc2FtZSBuYXR1cmUsIGJ1dCBpbmNsdWRpbmcgY2xpY2sgY2FwdHVyaW5nIGxvZ2ljLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRyaXZlciBhbiBleGlzdGluZyBIaXN0b3J5IERyaXZlciBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIEhpc3RvcnkgRHJpdmVyIGZ1bmN0aW9uXG4gKiBAZnVuY3Rpb24gY2FwdHVyZUNsaWNrc1xuICovXG52YXIgY2FwdHVyZUNsaWNrc18xID0gcmVxdWlyZShcIi4vY2FwdHVyZUNsaWNrc1wiKTtcbmV4cG9ydHMuY2FwdHVyZUNsaWNrcyA9IGNhcHR1cmVDbGlja3NfMS5jYXB0dXJlQ2xpY2tzO1xuLyoqXG4gKiBDcmVhdGUgYSBIaXN0b3J5IERyaXZlciB0byBiZSB1c2VkIGluIHRoZSBicm93c2VyLlxuICpcbiAqIFRoaXMgaXMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBjYWxsZWQsIHJldHVybnMgYSBIaXN0b3J5IERyaXZlciBmb3IgQ3ljbGUuanNcbiAqIGFwcHMuIFRoZSBkcml2ZXIgaXMgYWxzbyBhIGZ1bmN0aW9uLCBhbmQgaXQgdGFrZXMgYSBzdHJlYW0gb2YgbmV3IGxvY2F0aW9uc1xuICogKHN0cmluZ3MgcmVwcmVzZW50aW5nIHBhdGhuYW1lcyBvciBsb2NhdGlvbiBvYmplY3RzKSBhcyBpbnB1dCwgYW5kIG91dHB1dHNcbiAqIGFub3RoZXIgc3RyZWFtIG9mIGxvY2F0aW9ucyB0aGF0IHdlcmUgYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBhbiBvYmplY3Qgd2l0aCBzb21lIG9wdGlvbnMgc3BlY2lmaWMgdG9cbiAqIHRoaXMgZHJpdmVyLiBUaGVzZSBvcHRpb25zIGFyZSB0aGUgc2FtZSBhcyBmb3IgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGBjcmVhdGVCcm93c2VySGlzdG9yeSgpYCBmdW5jdGlvbiBpbiBIaXN0b3J5IHY0LiBDaGVjayBpdHNcbiAqIFtkb2NzXShodHRwczovL2dpdGh1Yi5jb20vbWphY2tzb24vaGlzdG9yeS90cmVlL3Y0LjUuMSN1c2FnZSkgZm9yIGEgZ29vZFxuICogZGVzY3JpcHRpb24gb24gdGhlIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIEhpc3RvcnkgRHJpdmVyIGZ1bmN0aW9uXG4gKiBAZnVuY3Rpb24gbWFrZUhpc3RvcnlEcml2ZXJcbiAqL1xudmFyIGRyaXZlcnNfMSA9IHJlcXVpcmUoXCIuL2RyaXZlcnNcIik7XG5leHBvcnRzLm1ha2VIaXN0b3J5RHJpdmVyID0gZHJpdmVyc18xLm1ha2VIaXN0b3J5RHJpdmVyO1xuLyoqXG4gKiBDcmVhdGUgYSBIaXN0b3J5IERyaXZlciBmb3Igb2xkZXIgYnJvd3NlcnMgdXNpbmcgaGFzaCByb3V0aW5nLlxuICpcbiAqIFRoaXMgaXMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBjYWxsZWQsIHJldHVybnMgYSBIaXN0b3J5IERyaXZlciBmb3IgQ3ljbGUuanNcbiAqIGFwcHMuIFRoZSBkcml2ZXIgaXMgYWxzbyBhIGZ1bmN0aW9uLCBhbmQgaXQgdGFrZXMgYSBzdHJlYW0gb2YgbmV3IGxvY2F0aW9uc1xuICogKHN0cmluZ3MgcmVwcmVzZW50aW5nIHBhdGhuYW1lcyBvciBsb2NhdGlvbiBvYmplY3RzKSBhcyBpbnB1dCwgYW5kIG91dHB1dHNcbiAqIGFub3RoZXIgc3RyZWFtIG9mIGxvY2F0aW9ucyB0aGF0IHdlcmUgYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBhbiBvYmplY3Qgd2l0aCBzb21lIG9wdGlvbnMgc3BlY2lmaWMgdG9cbiAqIHRoaXMgZHJpdmVyLiBUaGVzZSBvcHRpb25zIGFyZSB0aGUgc2FtZSBhcyBmb3IgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGBjcmVhdGVIYXNoSGlzdG9yeSgpYCBmdW5jdGlvbiBpbiBIaXN0b3J5IHY0LiBDaGVjayBpdHNcbiAqIFtkb2NzXShodHRwczovL2dpdGh1Yi5jb20vbWphY2tzb24vaGlzdG9yeS90cmVlL3Y0LjUuMSN1c2FnZSkgZm9yIGEgZ29vZFxuICogZGVzY3JpcHRpb24gb24gdGhlIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIEhpc3RvcnkgRHJpdmVyIGZ1bmN0aW9uXG4gKiBAZnVuY3Rpb24gbWFrZUhhc2hIaXN0b3J5RHJpdmVyXG4gKi9cbnZhciBkcml2ZXJzXzIgPSByZXF1aXJlKFwiLi9kcml2ZXJzXCIpO1xuZXhwb3J0cy5tYWtlSGFzaEhpc3RvcnlEcml2ZXIgPSBkcml2ZXJzXzIubWFrZUhhc2hIaXN0b3J5RHJpdmVyO1xuLyoqXG4gKiBDcmVhdGUgYSBIaXN0b3J5IERyaXZlciB0byBiZSB1c2VkIGluIG5vbi1icm93c2VyIGVudmlyb21lbnRzIHN1Y2ggYXNcbiAqIHNlcnZlci1zaWRlIE5vZGUuanMuXG4gKlxuICogVGhpcyBpcyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCwgcmV0dXJucyBhIEhpc3RvcnkgRHJpdmVyIGZvciBDeWNsZS5qc1xuICogYXBwcy4gVGhlIGRyaXZlciBpcyBhbHNvIGEgZnVuY3Rpb24sIGFuZCBpdCB0YWtlcyBhIHN0cmVhbSBvZiBuZXcgbG9jYXRpb25zXG4gKiAoc3RyaW5ncyByZXByZXNlbnRpbmcgcGF0aG5hbWVzIG9yIGxvY2F0aW9uIG9iamVjdHMpIGFzIGlucHV0LCBhbmQgb3V0cHV0c1xuICogYW5vdGhlciBzdHJlYW0gb2YgbG9jYXRpb25zIHRoYXQgd2VyZSBhcHBsaWVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIGFuIG9iamVjdCB3aXRoIHNvbWUgb3B0aW9ucyBzcGVjaWZpYyB0b1xuICogdGhpcyBkcml2ZXIuIFRoZXNlIG9wdGlvbnMgYXJlIHRoZSBzYW1lIGFzIGZvciB0aGUgY29ycmVzcG9uZGluZ1xuICogYGNyZWF0ZU1lbW9yeUhpc3RvcnkoKWAgZnVuY3Rpb24gaW4gSGlzdG9yeSB2NC4gQ2hlY2sgaXRzXG4gKiBbZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL21qYWNrc29uL2hpc3RvcnkvdHJlZS92NC41LjEjdXNhZ2UpIGZvciBhIGdvb2RcbiAqIGRlc2NyaXB0aW9uIG9uIHRoZSBvcHRpb25zLlxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBIaXN0b3J5IERyaXZlciBmdW5jdGlvblxuICogQGZ1bmN0aW9uIG1ha2VIYXNoSGlzdG9yeURyaXZlclxuICovXG52YXIgZHJpdmVyc18zID0gcmVxdWlyZShcIi4vZHJpdmVyc1wiKTtcbmV4cG9ydHMubWFrZVNlcnZlckhpc3RvcnlEcml2ZXIgPSBkcml2ZXJzXzMubWFrZVNlcnZlckhpc3RvcnlEcml2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2hpc3RvcnkvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21qYWNrc29uL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgIV9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0hpc3RvcnkpKCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICEoMCwgX0RPTVV0aWxzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UpKCk7XG5cbiAgdmFyIF9wcm9wcyRiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lLFxuICAgICAgYmFzZW5hbWUgPSBfcHJvcHMkYmFzZW5hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3Byb3BzJGJhc2VuYW1lLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcFByZWZpeCkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGtleVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoKDAsIF9ET01VdGlscy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KShldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgcmV0dXJuIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcm93c2VySGlzdG9yeTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2hpc3Rvcnkvfi9oaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArICgwLCBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoKShwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5zdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAhX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lLFxuICAgICAgYmFzZW5hbWUgPSBfcHJvcHMkYmFzZW5hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3Byb3BzJGJhc2VuYW1lLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBQcmVmaXgpKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiAoMCwgX0xvY2F0aW9uVXRpbHMubG9jYXRpb25zQXJlRXF1YWwpKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICAgIGlmIChvaykge1xuICAgICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFsoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICByZXR1cm4gdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvaGlzdG9yeS9+L2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSwgaW5kZXgpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgaW5kZXggPyBjcmVhdGVLZXkoKSA6IHVuZGVmaW5lZCkgOiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGluZGV4ID8gZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gX1BhdGhVdGlscy5jcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvaGlzdG9yeS9+L2hpc3RvcnkvY3JlYXRlTWVtb3J5SGlzdG9yeS5qc1xuLy8gbW9kdWxlIGlkID0gNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jcmVhdGVQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGV4cG9ydHMuY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGV4cG9ydHMuY3JlYXRlSGFzaEhpc3RvcnkgPSBleHBvcnRzLmNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gdW5kZWZpbmVkO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVMb2NhdGlvbicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnbG9jYXRpb25zQXJlRXF1YWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbDtcbiAgfVxufSk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwYXJzZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLnBhcnNlUGF0aDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlQnJvd3Nlckhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVCcm93c2VySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVCcm93c2VySGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZUhhc2hIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlSGFzaEhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIYXNoSGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBfY3JlYXRlQnJvd3Nlckhpc3RvcnkzLmRlZmF1bHQ7XG5leHBvcnRzLmNyZWF0ZUhhc2hIaXN0b3J5ID0gX2NyZWF0ZUhhc2hIaXN0b3J5My5kZWZhdWx0O1xuZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5ID0gX2NyZWF0ZU1lbW9yeUhpc3RvcnkzLmRlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9oaXN0b3J5L34vaGlzdG9yeS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZSgneHN0cmVhbScpO1xudmFyIFhTdHJlYW1BZGFwdGVyID0ge1xuICAgIGFkYXB0OiBmdW5jdGlvbiAob3JpZ2luU3RyZWFtLCBvcmlnaW5TdHJlYW1TdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKFhTdHJlYW1BZGFwdGVyLmlzVmFsaWRTdHJlYW0ob3JpZ2luU3RyZWFtKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpblN0cmVhbTtcbiAgICAgICAgfVxuICAgICAgICA7XG4gICAgICAgIHZhciBkaXNwb3NlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHhzdHJlYW1fMS5kZWZhdWx0LmNyZWF0ZSh7XG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gKG91dCkge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IG91dDtcbiAgICAgICAgICAgICAgICBkaXNwb3NlID0gb3JpZ2luU3RyZWFtU3Vic2NyaWJlKG9yaWdpblN0cmVhbSwgb2JzZXJ2ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRpc3Bvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgbWFrZVN1YmplY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0cmVhbSA9IHhzdHJlYW1fMS5kZWZhdWx0LmNyZWF0ZSgpO1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoeCkgeyBzdHJlYW0uc2hhbWVmdWxseVNlbmROZXh0KHgpOyB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHsgc3RyZWFtLnNoYW1lZnVsbHlTZW5kRXJyb3IoZXJyKTsgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IHN0cmVhbS5zaGFtZWZ1bGx5U2VuZENvbXBsZXRlKCk7IH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7IG9ic2VydmVyOiBvYnNlcnZlciwgc3RyZWFtOiBzdHJlYW0gfTtcbiAgICB9LFxuICAgIHJlbWVtYmVyOiBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBzdHJlYW0ucmVtZW1iZXIoKTtcbiAgICB9LFxuICAgIGlzVmFsaWRTdHJlYW06IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2Ygc3RyZWFtLmFkZExpc3RlbmVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB0eXBlb2Ygc3RyZWFtLnNoYW1lZnVsbHlTZW5kTmV4dCA9PT0gJ2Z1bmN0aW9uJyk7XG4gICAgfSxcbiAgICBzdHJlYW1TdWJzY3JpYmU6IGZ1bmN0aW9uIChzdHJlYW0sIG9ic2VydmVyKSB7XG4gICAgICAgIHN0cmVhbS5hZGRMaXN0ZW5lcihvYnNlcnZlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIob2JzZXJ2ZXIpOyB9O1xuICAgIH0sXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gWFN0cmVhbUFkYXB0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL3hzdHJlYW0tYWRhcHRlci9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIGJhc2VfMSA9IHJlcXVpcmUoJ0BjeWNsZS9iYXNlJyk7XG52YXIgeHN0cmVhbV9hZGFwdGVyXzEgPSByZXF1aXJlKCdAY3ljbGUveHN0cmVhbS1hZGFwdGVyJyk7XG4vKipcbiAqIFRha2VzIGEgYG1haW5gIGZ1bmN0aW9uIGFuZCBjaXJjdWxhcmx5IGNvbm5lY3RzIGl0IHRvIHRoZSBnaXZlbiBjb2xsZWN0aW9uXG4gKiBvZiBkcml2ZXIgZnVuY3Rpb25zLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICogYGBganNcbiAqIGltcG9ydCB7cnVufSBmcm9tICdAY3ljbGUveHN0cmVhbS1ydW4nO1xuICogY29uc3QgZGlzcG9zZSA9IHJ1bihtYWluLCBkcml2ZXJzKTtcbiAqIC8vIC4uLlxuICogZGlzcG9zZSgpO1xuICogYGBgXG4gKlxuICogVGhlIGBtYWluYCBmdW5jdGlvbiBleHBlY3RzIGEgY29sbGVjdGlvbiBvZiBcInNvdXJjZVwiIHN0cmVhbXMgKHJldHVybmVkIGZyb21cbiAqIGRyaXZlcnMpIGFzIGlucHV0LCBhbmQgc2hvdWxkIHJldHVybiBhIGNvbGxlY3Rpb24gb2YgXCJzaW5rXCIgc3RyZWFtcyAodG8gYmVcbiAqIGdpdmVuIHRvIGRyaXZlcnMpLiBBIFwiY29sbGVjdGlvbiBvZiBzdHJlYW1zXCIgaXMgYSBKYXZhU2NyaXB0IG9iamVjdCB3aGVyZVxuICoga2V5cyBtYXRjaCB0aGUgZHJpdmVyIG5hbWVzIHJlZ2lzdGVyZWQgYnkgdGhlIGBkcml2ZXJzYCBvYmplY3QsIGFuZCB2YWx1ZXNcbiAqIGFyZSB0aGUgc3RyZWFtcy4gUmVmZXIgdG8gdGhlIGRvY3VtZW50YXRpb24gb2YgZWFjaCBkcml2ZXIgdG8gc2VlIG1vcmVcbiAqIGRldGFpbHMgb24gd2hhdCB0eXBlcyBvZiBzb3VyY2VzIGl0IG91dHB1dHMgYW5kIHNpbmtzIGl0IHJlY2VpdmVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1haW4gYSBmdW5jdGlvbiB0aGF0IHRha2VzIGBzb3VyY2VzYCBhcyBpbnB1dCBhbmQgb3V0cHV0c1xuICogYHNpbmtzYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBkcml2ZXJzIGFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBkcml2ZXIgbmFtZXMgYW5kIHZhbHVlc1xuICogYXJlIGRyaXZlciBmdW5jdGlvbnMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBkaXNwb3NlIGZ1bmN0aW9uLCB1c2VkIHRvIHRlcm1pbmF0ZSB0aGUgZXhlY3V0aW9uIG9mIHRoZVxuICogQ3ljbGUuanMgcHJvZ3JhbSwgY2xlYW5pbmcgdXAgcmVzb3VyY2VzIHVzZWQuXG4gKiBAZnVuY3Rpb24gcnVuXG4gKi9cbmZ1bmN0aW9uIHJ1bihtYWluLCBkcml2ZXJzKSB7XG4gICAgdmFyIF9hID0gYmFzZV8xLmRlZmF1bHQobWFpbiwgZHJpdmVycywgeyBzdHJlYW1BZGFwdGVyOiB4c3RyZWFtX2FkYXB0ZXJfMS5kZWZhdWx0IH0pLCBydW4gPSBfYS5ydW4sIHNpbmtzID0gX2Euc2lua3M7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1snQ3ljbGVqc0RldlRvb2xfc3RhcnRHcmFwaFNlcmlhbGl6ZXInXSkge1xuICAgICAgICB3aW5kb3dbJ0N5Y2xlanNEZXZUb29sX3N0YXJ0R3JhcGhTZXJpYWxpemVyJ10oc2lua3MpO1xuICAgIH1cbiAgICByZXR1cm4gcnVuKCk7XG59XG5leHBvcnRzLnJ1biA9IHJ1bjtcbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHByZXBhcmVzIHRoZSBDeWNsZSBhcHBsaWNhdGlvbiB0byBiZSBleGVjdXRlZC4gVGFrZXMgYSBgbWFpbmBcbiAqIGZ1bmN0aW9uIGFuZCBwcmVwYXJlcyB0byBjaXJjdWxhcmx5IGNvbm5lY3RzIGl0IHRvIHRoZSBnaXZlbiBjb2xsZWN0aW9uIG9mXG4gKiBkcml2ZXIgZnVuY3Rpb25zLiBBcyBhbiBvdXRwdXQsIGBDeWNsZSgpYCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRocmVlXG4gKiBwcm9wZXJ0aWVzOiBgc291cmNlc2AsIGBzaW5rc2AgYW5kIGBydW5gLiBPbmx5IHdoZW4gYHJ1bigpYCBpcyBjYWxsZWQgd2lsbFxuICogdGhlIGFwcGxpY2F0aW9uIGFjdHVhbGx5IGV4ZWN1dGUuIFJlZmVyIHRvIHRoZSBkb2N1bWVudGF0aW9uIG9mIGBydW4oKWAgZm9yXG4gKiBtb3JlIGRldGFpbHMuXG4gKlxuICogKipFeGFtcGxlOioqXG4gKiBgYGBqc1xuICogaW1wb3J0IEN5Y2xlIGZyb20gJ0BjeWNsZS94c3RyZWFtLXJ1bic7XG4gKiBjb25zdCB7c291cmNlcywgc2lua3MsIHJ1bn0gPSBDeWNsZShtYWluLCBkcml2ZXJzKTtcbiAqIC8vIC4uLlxuICogY29uc3QgZGlzcG9zZSA9IHJ1bigpOyAvLyBFeGVjdXRlcyB0aGUgYXBwbGljYXRpb25cbiAqIC8vIC4uLlxuICogZGlzcG9zZSgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWFpbiBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYHNvdXJjZXNgIGFzIGlucHV0IGFuZCBvdXRwdXRzXG4gKiBgc2lua3NgLlxuICogQHBhcmFtIHtPYmplY3R9IGRyaXZlcnMgYW4gb2JqZWN0IHdoZXJlIGtleXMgYXJlIGRyaXZlciBuYW1lcyBhbmQgdmFsdWVzXG4gKiBhcmUgZHJpdmVyIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4ge09iamVjdH0gYW4gb2JqZWN0IHdpdGggdGhyZWUgcHJvcGVydGllczogYHNvdXJjZXNgLCBgc2lua3NgIGFuZFxuICogYHJ1bmAuIGBzb3VyY2VzYCBpcyB0aGUgY29sbGVjdGlvbiBvZiBkcml2ZXIgc291cmNlcywgYHNpbmtzYCBpcyB0aGVcbiAqIGNvbGxlY3Rpb24gb2YgZHJpdmVyIHNpbmtzLCB0aGVzZSBjYW4gYmUgdXNlZCBmb3IgZGVidWdnaW5nIG9yIHRlc3RpbmcuIGBydW5gXG4gKiBpcyB0aGUgZnVuY3Rpb24gdGhhdCBvbmNlIGNhbGxlZCB3aWxsIGV4ZWN1dGUgdGhlIGFwcGxpY2F0aW9uLlxuICogQGZ1bmN0aW9uIEN5Y2xlXG4gKi9cbnZhciBDeWNsZSA9IGZ1bmN0aW9uIChtYWluLCBkcml2ZXJzKSB7XG4gICAgdmFyIG91dCA9IGJhc2VfMS5kZWZhdWx0KG1haW4sIGRyaXZlcnMsIHsgc3RyZWFtQWRhcHRlcjogeHN0cmVhbV9hZGFwdGVyXzEuZGVmYXVsdCB9KTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93WydDeWNsZWpzRGV2VG9vbF9zdGFydEdyYXBoU2VyaWFsaXplciddKSB7XG4gICAgICAgIHdpbmRvd1snQ3ljbGVqc0RldlRvb2xfc3RhcnRHcmFwaFNlcmlhbGl6ZXInXShvdXQuc2lua3MpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufTtcbkN5Y2xlLnJ1biA9IHJ1bjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEN5Y2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS94c3RyZWFtLXJ1bi9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbG9nVG9Db25zb2xlRXJyb3IoZXJyKSB7XG4gICAgdmFyIHRhcmdldCA9IGVyci5zdGFjayB8fCBlcnI7XG4gICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5sb2cpIHtcbiAgICAgICAgY29uc29sZS5sb2codGFyZ2V0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlU2lua1Byb3hpZXMoZHJpdmVycywgc3RyZWFtQWRhcHRlcikge1xuICAgIHZhciBzaW5rUHJveGllcyA9IHt9O1xuICAgIGZvciAodmFyIG5hbWVfMSBpbiBkcml2ZXJzKSB7XG4gICAgICAgIGlmIChkcml2ZXJzLmhhc093blByb3BlcnR5KG5hbWVfMSkpIHtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0ID0gc3RyZWFtQWRhcHRlci5tYWtlU3ViamVjdCgpO1xuICAgICAgICAgICAgdmFyIGRyaXZlclN0cmVhbUFkYXB0ZXIgPSBkcml2ZXJzW25hbWVfMV0uc3RyZWFtQWRhcHRlciB8fCBzdHJlYW1BZGFwdGVyO1xuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IGRyaXZlclN0cmVhbUFkYXB0ZXIuYWRhcHQoc3ViamVjdC5zdHJlYW0sIHN0cmVhbUFkYXB0ZXIuc3RyZWFtU3Vic2NyaWJlKTtcbiAgICAgICAgICAgIHNpbmtQcm94aWVzW25hbWVfMV0gPSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtOiBzdHJlYW0sXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXI6IHN1YmplY3Qub2JzZXJ2ZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaW5rUHJveGllcztcbn1cbmZ1bmN0aW9uIGNhbGxEcml2ZXJzKGRyaXZlcnMsIHNpbmtQcm94aWVzLCBzdHJlYW1BZGFwdGVyKSB7XG4gICAgdmFyIHNvdXJjZXMgPSB7fTtcbiAgICBmb3IgKHZhciBuYW1lXzIgaW4gZHJpdmVycykge1xuICAgICAgICBpZiAoZHJpdmVycy5oYXNPd25Qcm9wZXJ0eShuYW1lXzIpKSB7XG4gICAgICAgICAgICB2YXIgZHJpdmVyT3V0cHV0ID0gZHJpdmVyc1tuYW1lXzJdKHNpbmtQcm94aWVzW25hbWVfMl0uc3RyZWFtLCBzdHJlYW1BZGFwdGVyLCBuYW1lXzIpO1xuICAgICAgICAgICAgdmFyIGRyaXZlclN0cmVhbUFkYXB0ZXIgPSBkcml2ZXJzW25hbWVfMl0uc3RyZWFtQWRhcHRlcjtcbiAgICAgICAgICAgIGlmIChkcml2ZXJTdHJlYW1BZGFwdGVyICYmIGRyaXZlclN0cmVhbUFkYXB0ZXIuaXNWYWxpZFN0cmVhbShkcml2ZXJPdXRwdXQpKSB7XG4gICAgICAgICAgICAgICAgc291cmNlc1tuYW1lXzJdID0gc3RyZWFtQWRhcHRlci5hZGFwdChkcml2ZXJPdXRwdXQsIGRyaXZlclN0cmVhbUFkYXB0ZXIuc3RyZWFtU3Vic2NyaWJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZXNbbmFtZV8yXSA9IGRyaXZlck91dHB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzb3VyY2VzW25hbWVfMl0gJiYgdHlwZW9mIHNvdXJjZXNbbmFtZV8yXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VzW25hbWVfMl0uX2lzQ3ljbGVTb3VyY2UgPSBuYW1lXzI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZXM7XG59XG5mdW5jdGlvbiByZXBsaWNhdGVNYW55KHNpbmtzLCBzaW5rUHJveGllcywgc3RyZWFtQWRhcHRlcikge1xuICAgIHZhciBzaW5rTmFtZXMgPSBPYmplY3Qua2V5cyhzaW5rcykuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhIXNpbmtQcm94aWVzW25hbWVdOyB9KTtcbiAgICB2YXIgYnVmZmVycyA9IHt9O1xuICAgIHZhciByZXBsaWNhdG9ycyA9IHt9O1xuICAgIHNpbmtOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGJ1ZmZlcnNbbmFtZV0gPSB7IG5leHQ6IFtdLCBlcnJvcjogW10sIGNvbXBsZXRlOiBbXSB9O1xuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXSA9IHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh4KSB7IHJldHVybiBidWZmZXJzW25hbWVdLm5leHQucHVzaCh4KTsgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gYnVmZmVyc1tuYW1lXS5lcnJvci5wdXNoKHgpOyB9LFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiBidWZmZXJzW25hbWVdLmNvbXBsZXRlLnB1c2goeCk7IH0sXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBzaW5rTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBzdHJlYW1BZGFwdGVyLnN0cmVhbVN1YnNjcmliZShzaW5rc1tuYW1lXSwge1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5uZXh0KHgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nVG9Db25zb2xlRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHJlcGxpY2F0b3JzW25hbWVdLmNvbXBsZXRlKHgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGRpc3Bvc2VGdW5jdGlvbnMgPSBzdWJzY3JpcHRpb25zXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGZuKSB7IHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbic7IH0pO1xuICAgIHNpbmtOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBvYnNlcnZlciA9IHNpbmtQcm94aWVzW25hbWVdLm9ic2VydmVyO1xuICAgICAgICB2YXIgbmV4dCA9IG9ic2VydmVyLm5leHQ7XG4gICAgICAgIHZhciBlcnJvciA9IG9ic2VydmVyLmVycm9yO1xuICAgICAgICB2YXIgY29tcGxldGUgPSBvYnNlcnZlci5jb21wbGV0ZTtcbiAgICAgICAgYnVmZmVyc1tuYW1lXS5uZXh0LmZvckVhY2gobmV4dCk7XG4gICAgICAgIGJ1ZmZlcnNbbmFtZV0uZXJyb3IuZm9yRWFjaChlcnJvcik7XG4gICAgICAgIGJ1ZmZlcnNbbmFtZV0uY29tcGxldGUuZm9yRWFjaChjb21wbGV0ZSk7XG4gICAgICAgIHJlcGxpY2F0b3JzW25hbWVdLm5leHQgPSBuZXh0O1xuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5lcnJvciA9IGVycm9yO1xuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRpc3Bvc2VGdW5jdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGlzcG9zZSkgeyByZXR1cm4gZGlzcG9zZSgpOyB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gZGlzcG9zZVNvdXJjZXMoc291cmNlcykge1xuICAgIGZvciAodmFyIGsgaW4gc291cmNlcykge1xuICAgICAgICBpZiAoc291cmNlcy5oYXNPd25Qcm9wZXJ0eShrKSAmJiBzb3VyY2VzW2tdXG4gICAgICAgICAgICAmJiB0eXBlb2Ygc291cmNlc1trXS5kaXNwb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzb3VyY2VzW2tdLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbnZhciBpc09iamVjdEVtcHR5ID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7IH07XG5mdW5jdGlvbiBDeWNsZShtYWluLCBkcml2ZXJzLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBtYWluICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgYXJndW1lbnQgZ2l2ZW4gdG8gQ3ljbGUgbXVzdCBiZSB0aGUgJ21haW4nIFwiICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24uXCIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRyaXZlcnMgIT09IFwib2JqZWN0XCIgfHwgZHJpdmVycyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWNvbmQgYXJndW1lbnQgZ2l2ZW4gdG8gQ3ljbGUgbXVzdCBiZSBhbiBvYmplY3QgXCIgK1xuICAgICAgICAgICAgXCJ3aXRoIGRyaXZlciBmdW5jdGlvbnMgYXMgcHJvcGVydGllcy5cIik7XG4gICAgfVxuICAgIGlmIChpc09iamVjdEVtcHR5KGRyaXZlcnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBhcmd1bWVudCBnaXZlbiB0byBDeWNsZSBtdXN0IGJlIGFuIG9iamVjdCBcIiArXG4gICAgICAgICAgICBcIndpdGggYXQgbGVhc3Qgb25lIGRyaXZlciBmdW5jdGlvbiBkZWNsYXJlZCBhcyBhIHByb3BlcnR5LlwiKTtcbiAgICB9XG4gICAgdmFyIHN0cmVhbUFkYXB0ZXIgPSBvcHRpb25zLnN0cmVhbUFkYXB0ZXI7XG4gICAgaWYgKCFzdHJlYW1BZGFwdGVyIHx8IGlzT2JqZWN0RW1wdHkoc3RyZWFtQWRhcHRlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcmQgYXJndW1lbnQgZ2l2ZW4gdG8gQ3ljbGUgbXVzdCBiZSBhbiBvcHRpb25zIG9iamVjdCBcIiArXG4gICAgICAgICAgICBcIndpdGggdGhlIHN0cmVhbUFkYXB0ZXIga2V5IHN1cHBsaWVkIHdpdGggYSB2YWxpZCBzdHJlYW0gYWRhcHRlci5cIik7XG4gICAgfVxuICAgIHZhciBzaW5rUHJveGllcyA9IG1ha2VTaW5rUHJveGllcyhkcml2ZXJzLCBzdHJlYW1BZGFwdGVyKTtcbiAgICB2YXIgc291cmNlcyA9IGNhbGxEcml2ZXJzKGRyaXZlcnMsIHNpbmtQcm94aWVzLCBzdHJlYW1BZGFwdGVyKTtcbiAgICB2YXIgc2lua3MgPSBtYWluKHNvdXJjZXMpO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cuQ3ljbGVqcyA9IHsgc2lua3M6IHNpbmtzIH07XG4gICAgfVxuICAgIHZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaXNwb3NlUmVwbGljYXRpb24gPSByZXBsaWNhdGVNYW55KHNpbmtzLCBzaW5rUHJveGllcywgc3RyZWFtQWRhcHRlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkaXNwb3NlU291cmNlcyhzb3VyY2VzKTtcbiAgICAgICAgICAgIGRpc3Bvc2VSZXBsaWNhdGlvbigpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIHsgc2lua3M6IHNpbmtzLCBzb3VyY2VzOiBzb3VyY2VzLCBydW46IHJ1biB9O1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ3ljbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL3hzdHJlYW0tcnVuL34vQGN5Y2xlL2Jhc2UvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiFcbiAqIENyb3NzLUJyb3dzZXIgU3BsaXQgMS4xLjFcbiAqIENvcHlyaWdodCAyMDA3LTIwMTIgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+XG4gKiBBdmFpbGFibGUgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBFQ01BU2NyaXB0IGNvbXBsaWFudCwgdW5pZm9ybSBjcm9zcy1icm93c2VyIHNwbGl0IG1ldGhvZFxuICovXG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5ncyB1c2luZyBhIHJlZ2V4IG9yIHN0cmluZyBzZXBhcmF0b3IuIE1hdGNoZXMgb2YgdGhlXG4gKiBzZXBhcmF0b3IgYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0IGFycmF5LiBIb3dldmVyLCBpZiBgc2VwYXJhdG9yYCBpcyBhIHJlZ2V4IHRoYXQgY29udGFpbnNcbiAqIGNhcHR1cmluZyBncm91cHMsIGJhY2tyZWZlcmVuY2VzIGFyZSBzcGxpY2VkIGludG8gdGhlIHJlc3VsdCBlYWNoIHRpbWUgYHNlcGFyYXRvcmAgaXMgbWF0Y2hlZC5cbiAqIEZpeGVzIGJyb3dzZXIgYnVncyBjb21wYXJlZCB0byB0aGUgbmF0aXZlIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBhbmQgY2FuIGJlIHVzZWQgcmVsaWFibHlcbiAqIGNyb3NzLWJyb3dzZXIuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFN0cmluZyB0byBzcGxpdC5cbiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gc2VwYXJhdG9yIFJlZ2V4IG9yIHN0cmluZyB0byB1c2UgZm9yIHNlcGFyYXRpbmcgdGhlIHN0cmluZy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbGltaXRdIE1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIGluY2x1ZGUgaW4gdGhlIHJlc3VsdCBhcnJheS5cbiAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgb2Ygc3Vic3RyaW5ncy5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQmFzaWMgdXNlXG4gKiBzcGxpdCgnYSBiIGMgZCcsICcgJyk7XG4gKiAvLyAtPiBbJ2EnLCAnYicsICdjJywgJ2QnXVxuICpcbiAqIC8vIFdpdGggbGltaXRcbiAqIHNwbGl0KCdhIGIgYyBkJywgJyAnLCAyKTtcbiAqIC8vIC0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBCYWNrcmVmZXJlbmNlcyBpbiByZXN1bHQgYXJyYXlcbiAqIHNwbGl0KCcuLndvcmQxIHdvcmQyLi4nLCAvKFthLXpdKykoXFxkKykvaSk7XG4gKiAvLyAtPiBbJy4uJywgJ3dvcmQnLCAnMScsICcgJywgJ3dvcmQnLCAnMicsICcuLiddXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIHNwbGl0KHVuZGVmKSB7XG5cbiAgdmFyIG5hdGl2ZVNwbGl0ID0gU3RyaW5nLnByb3RvdHlwZS5zcGxpdCxcbiAgICBjb21wbGlhbnRFeGVjTnBjZyA9IC8oKT8/Ly5leGVjKFwiXCIpWzFdID09PSB1bmRlZixcbiAgICAvLyBOUENHOiBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIHNlbGY7XG5cbiAgc2VsZiA9IGZ1bmN0aW9uKHN0ciwgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgYG5hdGl2ZVNwbGl0YFxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc2VwYXJhdG9yKSAhPT0gXCJbb2JqZWN0IFJlZ0V4cF1cIikge1xuICAgICAgcmV0dXJuIG5hdGl2ZVNwbGl0LmNhbGwoc3RyLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IFtdLFxuICAgICAgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyBcImlcIiA6IFwiXCIpICsgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyBcIm1cIiA6IFwiXCIpICsgKHNlcGFyYXRvci5leHRlbmRlZCA/IFwieFwiIDogXCJcIikgKyAvLyBQcm9wb3NlZCBmb3IgRVM2XG4gICAgICAoc2VwYXJhdG9yLnN0aWNreSA/IFwieVwiIDogXCJcIiksXG4gICAgICAvLyBGaXJlZm94IDMrXG4gICAgICBsYXN0TGFzdEluZGV4ID0gMCxcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICBzZXBhcmF0b3IgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgXCJnXCIpLFxuICAgICAgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICBzdHIgKz0gXCJcIjsgLy8gVHlwZS1jb252ZXJ0XG4gICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZykge1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cChcIl5cIiArIHNlcGFyYXRvci5zb3VyY2UgKyBcIiQoPyFcXFxccylcIiwgZmxhZ3MpO1xuICAgIH1cbiAgICAvKiBWYWx1ZXMgZm9yIGBsaW1pdGAsIHBlciB0aGUgc3BlYzpcbiAgICAgKiBJZiB1bmRlZmluZWQ6IDQyOTQ5NjcyOTUgLy8gTWF0aC5wb3coMiwgMzIpIC0gMVxuICAgICAqIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgICAgKiBJZiBwb3NpdGl2ZSBudW1iZXI6IGxpbWl0ID0gTWF0aC5mbG9vcihsaW1pdCk7IGlmIChsaW1pdCA+IDQyOTQ5NjcyOTUpIGxpbWl0IC09IDQyOTQ5NjcyOTY7XG4gICAgICogSWYgbmVnYXRpdmUgbnVtYmVyOiA0Mjk0OTY3Mjk2IC0gTWF0aC5mbG9vcihNYXRoLmFicyhsaW1pdCkpXG4gICAgICogSWYgb3RoZXI6IFR5cGUtY29udmVydCwgdGhlbiB1c2UgdGhlIGFib3ZlIHJ1bGVzXG4gICAgICovXG4gICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWYgPyAtMSA+Pj4gMCA6IC8vIE1hdGgucG93KDIsIDMyKSAtIDFcbiAgICBsaW1pdCA+Pj4gMDsgLy8gVG9VaW50MzIobGltaXQpXG4gICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3RyKSkge1xuICAgICAgLy8gYHNlcGFyYXRvci5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHN0ci5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWYpIHtcbiAgICAgICAgICAgICAgICBtYXRjaFtpXSA9IHVuZGVmO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltaXQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlcGFyYXRvci5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSB7XG4gICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvci50ZXN0KFwiXCIpKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKFwiXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaChzdHIuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIGxpbWl0KSA6IG91dHB1dDtcbiAgfTtcblxuICByZXR1cm4gc2VsZjtcbn0pKCk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYnJvd3Nlci1zcGxpdC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gODNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29weSAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L2NvcHknKVxuICAsIG1hcCAgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9tYXAnKVxuICAsIGNhbGxhYmxlICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZScpXG4gICwgdmFsaWRWYWx1ZSA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlJylcblxuICAsIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCwgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgLCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBkZWZpbmU7XG5cbmRlZmluZSA9IGZ1bmN0aW9uIChuYW1lLCBkZXNjLCBiaW5kVG8pIHtcblx0dmFyIHZhbHVlID0gdmFsaWRWYWx1ZShkZXNjKSAmJiBjYWxsYWJsZShkZXNjLnZhbHVlKSwgZGdzO1xuXHRkZ3MgPSBjb3B5KGRlc2MpO1xuXHRkZWxldGUgZGdzLndyaXRhYmxlO1xuXHRkZWxldGUgZGdzLnZhbHVlO1xuXHRkZ3MuZ2V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIG5hbWUpKSByZXR1cm4gdmFsdWU7XG5cdFx0ZGVzYy52YWx1ZSA9IGJpbmQuY2FsbCh2YWx1ZSwgKGJpbmRUbyA9PSBudWxsKSA/IHRoaXMgOiB0aGlzW2JpbmRUb10pO1xuXHRcdGRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIGRlc2MpO1xuXHRcdHJldHVybiB0aGlzW25hbWVdO1xuXHR9O1xuXHRyZXR1cm4gZGdzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocHJvcHMvKiwgYmluZFRvKi8pIHtcblx0dmFyIGJpbmRUbyA9IGFyZ3VtZW50c1sxXTtcblx0cmV0dXJuIG1hcChwcm9wcywgZnVuY3Rpb24gKGRlc2MsIG5hbWUpIHtcblx0XHRyZXR1cm4gZGVmaW5lKG5hbWUsIGRlc2MsIGJpbmRUbyk7XG5cdH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kL2F1dG8tYmluZC5qc1xuLy8gbW9kdWxlIGlkID0gODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9Qb3NJbnQgPSByZXF1aXJlKCcuLi8uLi9udW1iZXIvdG8tcG9zLWludGVnZXInKVxuICAsIHZhbHVlICAgID0gcmVxdWlyZSgnLi4vLi4vb2JqZWN0L3ZhbGlkLXZhbHVlJylcblxuICAsIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZlxuICAsIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIGFicyA9IE1hdGguYWJzLCBmbG9vciA9IE1hdGguZmxvb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQvKiwgZnJvbUluZGV4Ki8pIHtcblx0dmFyIGksIGwsIGZyb21JbmRleCwgdmFsO1xuXHRpZiAoc2VhcmNoRWxlbWVudCA9PT0gc2VhcmNoRWxlbWVudCkgeyAvL2pzbGludDogaWdub3JlXG5cdFx0cmV0dXJuIGluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fVxuXG5cdGwgPSB0b1Bvc0ludCh2YWx1ZSh0aGlzKS5sZW5ndGgpO1xuXHRmcm9tSW5kZXggPSBhcmd1bWVudHNbMV07XG5cdGlmIChpc05hTihmcm9tSW5kZXgpKSBmcm9tSW5kZXggPSAwO1xuXHRlbHNlIGlmIChmcm9tSW5kZXggPj0gMCkgZnJvbUluZGV4ID0gZmxvb3IoZnJvbUluZGV4KTtcblx0ZWxzZSBmcm9tSW5kZXggPSB0b1Bvc0ludCh0aGlzLmxlbmd0aCkgLSBmbG9vcihhYnMoZnJvbUluZGV4KSk7XG5cblx0Zm9yIChpID0gZnJvbUluZGV4OyBpIDwgbDsgKytpKSB7XG5cdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwodGhpcywgaSkpIHtcblx0XHRcdHZhbCA9IHRoaXNbaV07XG5cdFx0XHRpZiAodmFsICE9PSB2YWwpIHJldHVybiBpOyAvL2pzbGludDogaWdub3JlXG5cdFx0fVxuXHR9XG5cdHJldHVybiAtMTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9hcnJheS8jL2UtaW5kZXgtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2lzLWltcGxlbWVudGVkJykoKVxuXHQ/IE1hdGguc2lnblxuXHQ6IHJlcXVpcmUoJy4vc2hpbScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvbWF0aC9zaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2lnbiA9IE1hdGguc2lnbjtcblx0aWYgKHR5cGVvZiBzaWduICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiAoKHNpZ24oMTApID09PSAxKSAmJiAoc2lnbigtMjApID09PSAtMSkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L21hdGgvc2lnbi9pcy1pbXBsZW1lbnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gODdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdGlmIChpc05hTih2YWx1ZSkgfHwgKHZhbHVlID09PSAwKSkgcmV0dXJuIHZhbHVlO1xuXHRyZXR1cm4gKHZhbHVlID4gMCkgPyAxIDogLTE7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvbWF0aC9zaWduL3NoaW0uanNcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9tYXRoL3NpZ24nKVxuXG4gICwgYWJzID0gTWF0aC5hYnMsIGZsb29yID0gTWF0aC5mbG9vcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0aWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuIDA7XG5cdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblx0aWYgKCh2YWx1ZSA9PT0gMCkgfHwgIWlzRmluaXRlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuXHRyZXR1cm4gc2lnbih2YWx1ZSkgKiBmbG9vcihhYnModmFsdWUpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9udW1iZXIvdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90by1pbnRlZ2VyJylcblxuICAsIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbWF4KDAsIHRvSW50ZWdlcih2YWx1ZSkpOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvbnVtYmVyL3RvLXBvcy1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBJbnRlcm5hbCBtZXRob2QsIHVzZWQgYnkgaXRlcmF0aW9uIGZ1bmN0aW9ucy5cbi8vIENhbGxzIGEgZnVuY3Rpb24gZm9yIGVhY2gga2V5LXZhbHVlIHBhaXIgZm91bmQgaW4gb2JqZWN0XG4vLyBPcHRpb25hbGx5IHRha2VzIGNvbXBhcmVGbiB0byBpdGVyYXRlIG9iamVjdCBpbiBzcGVjaWZpYyBvcmRlclxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsYWJsZSA9IHJlcXVpcmUoJy4vdmFsaWQtY2FsbGFibGUnKVxuICAsIHZhbHVlICAgID0gcmVxdWlyZSgnLi92YWxpZC12YWx1ZScpXG5cbiAgLCBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCwga2V5cyA9IE9iamVjdC5rZXlzXG4gICwgcHJvcGVydHlJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGRlZlZhbCkge1xuXHRyZXR1cm4gZnVuY3Rpb24gKG9iaiwgY2IvKiwgdGhpc0FyZywgY29tcGFyZUZuKi8pIHtcblx0XHR2YXIgbGlzdCwgdGhpc0FyZyA9IGFyZ3VtZW50c1syXSwgY29tcGFyZUZuID0gYXJndW1lbnRzWzNdO1xuXHRcdG9iaiA9IE9iamVjdCh2YWx1ZShvYmopKTtcblx0XHRjYWxsYWJsZShjYik7XG5cblx0XHRsaXN0ID0ga2V5cyhvYmopO1xuXHRcdGlmIChjb21wYXJlRm4pIHtcblx0XHRcdGxpc3Quc29ydCgodHlwZW9mIGNvbXBhcmVGbiA9PT0gJ2Z1bmN0aW9uJykgPyBiaW5kLmNhbGwoY29tcGFyZUZuLCBvYmopIDogdW5kZWZpbmVkKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBtZXRob2QgIT09ICdmdW5jdGlvbicpIG1ldGhvZCA9IGxpc3RbbWV0aG9kXTtcblx0XHRyZXR1cm4gY2FsbC5jYWxsKG1ldGhvZCwgbGlzdCwgZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcblx0XHRcdGlmICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIGtleSkpIHJldHVybiBkZWZWYWw7XG5cdFx0XHRyZXR1cm4gY2FsbC5jYWxsKGNiLCB0aGlzQXJnLCBvYmpba2V5XSwga2V5LCBvYmosIGluZGV4KTtcblx0XHR9KTtcblx0fTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvX2l0ZXJhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduLCBvYmo7XG5cdGlmICh0eXBlb2YgYXNzaWduICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdG9iaiA9IHsgZm9vOiAncmF6JyB9O1xuXHRhc3NpZ24ob2JqLCB7IGJhcjogJ2R3YScgfSwgeyB0cnp5OiAndHJ6eScgfSk7XG5cdHJldHVybiAob2JqLmZvbyArIG9iai5iYXIgKyBvYmoudHJ6eSkgPT09ICdyYXpkd2F0cnp5Jztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvYXNzaWduL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzICA9IHJlcXVpcmUoJy4uL2tleXMnKVxuICAsIHZhbHVlID0gcmVxdWlyZSgnLi4vdmFsaWQtdmFsdWUnKVxuXG4gICwgbWF4ID0gTWF0aC5tYXg7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRlc3QsIHNyYy8qLCDigKZzcmNuKi8pIHtcblx0dmFyIGVycm9yLCBpLCBsID0gbWF4KGFyZ3VtZW50cy5sZW5ndGgsIDIpLCBhc3NpZ247XG5cdGRlc3QgPSBPYmplY3QodmFsdWUoZGVzdCkpO1xuXHRhc3NpZ24gPSBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0dHJ5IHsgZGVzdFtrZXldID0gc3JjW2tleV07IH0gY2F0Y2ggKGUpIHtcblx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZTtcblx0XHR9XG5cdH07XG5cdGZvciAoaSA9IDE7IGkgPCBsOyArK2kpIHtcblx0XHRzcmMgPSBhcmd1bWVudHNbaV07XG5cdFx0a2V5cyhzcmMpLmZvckVhY2goYXNzaWduKTtcblx0fVxuXHRpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkgdGhyb3cgZXJyb3I7XG5cdHJldHVybiBkZXN0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9hc3NpZ24vc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9hc3NpZ24nKVxuICAsIHZhbHVlICA9IHJlcXVpcmUoJy4vdmFsaWQtdmFsdWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG5cdHZhciBjb3B5ID0gT2JqZWN0KHZhbHVlKG9iaikpO1xuXHRpZiAoY29weSAhPT0gb2JqKSByZXR1cm4gY29weTtcblx0cmV0dXJuIGFzc2lnbih7fSwgb2JqKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvY29weS5qc1xuLy8gbW9kdWxlIGlkID0gOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gV29ya2Fyb3VuZCBmb3IgaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjgwNFxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlLCBzaGltO1xuXG5pZiAoIXJlcXVpcmUoJy4vc2V0LXByb3RvdHlwZS1vZi9pcy1pbXBsZW1lbnRlZCcpKCkpIHtcblx0c2hpbSA9IHJlcXVpcmUoJy4vc2V0LXByb3RvdHlwZS1vZi9zaGltJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIG51bGxPYmplY3QsIHByb3BzLCBkZXNjO1xuXHRpZiAoIXNoaW0pIHJldHVybiBjcmVhdGU7XG5cdGlmIChzaGltLmxldmVsICE9PSAxKSByZXR1cm4gY3JlYXRlO1xuXG5cdG51bGxPYmplY3QgPSB7fTtcblx0cHJvcHMgPSB7fTtcblx0ZGVzYyA9IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLFxuXHRcdHZhbHVlOiB1bmRlZmluZWQgfTtcblx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LnByb3RvdHlwZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdGlmIChuYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdFx0cHJvcHNbbmFtZV0gPSB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogdW5kZWZpbmVkIH07XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHByb3BzW25hbWVdID0gZGVzYztcblx0fSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG51bGxPYmplY3QsIHByb3BzKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoc2hpbSwgJ251bGxQb2x5ZmlsbCcsIHsgY29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogbnVsbE9iamVjdCB9KTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKHByb3RvdHlwZSwgcHJvcHMpIHtcblx0XHRyZXR1cm4gY3JlYXRlKChwcm90b3R5cGUgPT09IG51bGwpID8gbnVsbE9iamVjdCA6IHByb3RvdHlwZSwgcHJvcHMpO1xuXHR9O1xufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyYXRlJykoJ2ZvckVhY2gnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9mb3ItZWFjaC5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gRGVwcmVjYXRlZFxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJzsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9pcy1jYWxsYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFwID0geyBmdW5jdGlvbjogdHJ1ZSwgb2JqZWN0OiB0cnVlIH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgpIHtcblx0cmV0dXJuICgoeCAhPSBudWxsKSAmJiBtYXBbdHlwZW9mIHhdKSB8fCBmYWxzZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvaXMtb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA5OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKClcblx0PyBPYmplY3Qua2V5c1xuXHQ6IHJlcXVpcmUoJy4vc2hpbScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2tleXMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHRyeSB7XG5cdFx0T2JqZWN0LmtleXMoJ3ByaW1pdGl2ZScpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9rZXlzL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IE9iamVjdC5rZXlzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcblx0cmV0dXJuIGtleXMob2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBPYmplY3Qob2JqZWN0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2tleXMvc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxhYmxlID0gcmVxdWlyZSgnLi92YWxpZC1jYWxsYWJsZScpXG4gICwgZm9yRWFjaCAgPSByZXF1aXJlKCcuL2Zvci1lYWNoJylcblxuICAsIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBjYi8qLCB0aGlzQXJnKi8pIHtcblx0dmFyIG8gPSB7fSwgdGhpc0FyZyA9IGFyZ3VtZW50c1syXTtcblx0Y2FsbGFibGUoY2IpO1xuXHRmb3JFYWNoKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXksIG9iaiwgaW5kZXgpIHtcblx0XHRvW2tleV0gPSBjYWxsLmNhbGwoY2IsIHRoaXNBcmcsIHZhbHVlLCBrZXksIG9iaiwgaW5kZXgpO1xuXHR9KTtcblx0cmV0dXJuIG87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L21hcC5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCwgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxudmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAoc3JjLCBvYmopIHtcblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gc3JjKSBvYmpba2V5XSA9IHNyY1trZXldO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucy8qLCDigKZvcHRpb25zKi8pIHtcblx0dmFyIHJlc3VsdCA9IGNyZWF0ZShudWxsKTtcblx0Zm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSByZXR1cm47XG5cdFx0cHJvY2VzcyhPYmplY3Qob3B0aW9ucyksIHJlc3VsdCk7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCwgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJnLyosIOKApmFyZ3MqLykge1xuXHR2YXIgc2V0ID0gY3JlYXRlKG51bGwpO1xuXHRmb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbiAobmFtZSkgeyBzZXRbbmFtZV0gPSB0cnVlOyB9KTtcblx0cmV0dXJuIHNldDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvcHJpbWl0aXZlLXNldC5qc1xuLy8gbW9kdWxlIGlkID0gMTA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0ciA9ICdyYXpkd2F0cnp5JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICh0eXBlb2Ygc3RyLmNvbnRhaW5zICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiAoKHN0ci5jb250YWlucygnZHdhJykgPT09IHRydWUpICYmIChzdHIuY29udGFpbnMoJ2ZvbycpID09PSBmYWxzZSkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5kZXhPZiA9IFN0cmluZy5wcm90b3R5cGUuaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VhcmNoU3RyaW5nLyosIHBvc2l0aW9uKi8pIHtcblx0cmV0dXJuIGluZGV4T2YuY2FsbCh0aGlzLCBzZWFyY2hTdHJpbmcsIGFyZ3VtZW50c1sxXSkgPiAtMTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9zaGltLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mJylcbiAgLCBjb250YWlucyAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMnKVxuICAsIGQgICAgICAgICAgICAgID0gcmVxdWlyZSgnZCcpXG4gICwgSXRlcmF0b3IgICAgICAgPSByZXF1aXJlKCcuLycpXG5cbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIEFycmF5SXRlcmF0b3I7XG5cbkFycmF5SXRlcmF0b3IgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcnIsIGtpbmQpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIEFycmF5SXRlcmF0b3IpKSByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3IoYXJyLCBraW5kKTtcblx0SXRlcmF0b3IuY2FsbCh0aGlzLCBhcnIpO1xuXHRpZiAoIWtpbmQpIGtpbmQgPSAndmFsdWUnO1xuXHRlbHNlIGlmIChjb250YWlucy5jYWxsKGtpbmQsICdrZXkrdmFsdWUnKSkga2luZCA9ICdrZXkrdmFsdWUnO1xuXHRlbHNlIGlmIChjb250YWlucy5jYWxsKGtpbmQsICdrZXknKSkga2luZCA9ICdrZXknO1xuXHRlbHNlIGtpbmQgPSAndmFsdWUnO1xuXHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19raW5kX18nLCBkKCcnLCBraW5kKSk7XG59O1xuaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihBcnJheUl0ZXJhdG9yLCBJdGVyYXRvcik7XG5cbkFycmF5SXRlcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvci5wcm90b3R5cGUsIHtcblx0Y29uc3RydWN0b3I6IGQoQXJyYXlJdGVyYXRvciksXG5cdF9yZXNvbHZlOiBkKGZ1bmN0aW9uIChpKSB7XG5cdFx0aWYgKHRoaXMuX19raW5kX18gPT09ICd2YWx1ZScpIHJldHVybiB0aGlzLl9fbGlzdF9fW2ldO1xuXHRcdGlmICh0aGlzLl9fa2luZF9fID09PSAna2V5K3ZhbHVlJykgcmV0dXJuIFtpLCB0aGlzLl9fbGlzdF9fW2ldXTtcblx0XHRyZXR1cm4gaTtcblx0fSksXG5cdHRvU3RyaW5nOiBkKGZ1bmN0aW9uICgpIHsgcmV0dXJuICdbb2JqZWN0IEFycmF5IEl0ZXJhdG9yXSc7IH0pXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtaXRlcmF0b3IvYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDEwN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJ2VzNS1leHQvZnVuY3Rpb24vaXMtYXJndW1lbnRzJylcbiAgLCBjYWxsYWJsZSAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlJylcbiAgLCBpc1N0cmluZyAgICA9IHJlcXVpcmUoJ2VzNS1leHQvc3RyaW5nL2lzLXN0cmluZycpXG4gICwgZ2V0ICAgICAgICAgPSByZXF1aXJlKCcuL2dldCcpXG5cbiAgLCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSwgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsXG4gICwgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgY2IvKiwgdGhpc0FyZyovKSB7XG5cdHZhciBtb2RlLCB0aGlzQXJnID0gYXJndW1lbnRzWzJdLCByZXN1bHQsIGRvQnJlYWssIGJyb2tlbiwgaSwgbCwgY2hhciwgY29kZTtcblx0aWYgKGlzQXJyYXkoaXRlcmFibGUpIHx8IGlzQXJndW1lbnRzKGl0ZXJhYmxlKSkgbW9kZSA9ICdhcnJheSc7XG5cdGVsc2UgaWYgKGlzU3RyaW5nKGl0ZXJhYmxlKSkgbW9kZSA9ICdzdHJpbmcnO1xuXHRlbHNlIGl0ZXJhYmxlID0gZ2V0KGl0ZXJhYmxlKTtcblxuXHRjYWxsYWJsZShjYik7XG5cdGRvQnJlYWsgPSBmdW5jdGlvbiAoKSB7IGJyb2tlbiA9IHRydWU7IH07XG5cdGlmIChtb2RlID09PSAnYXJyYXknKSB7XG5cdFx0c29tZS5jYWxsKGl0ZXJhYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdGNhbGwuY2FsbChjYiwgdGhpc0FyZywgdmFsdWUsIGRvQnJlYWspO1xuXHRcdFx0aWYgKGJyb2tlbikgcmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChtb2RlID09PSAnc3RyaW5nJykge1xuXHRcdGwgPSBpdGVyYWJsZS5sZW5ndGg7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGw7ICsraSkge1xuXHRcdFx0Y2hhciA9IGl0ZXJhYmxlW2ldO1xuXHRcdFx0aWYgKChpICsgMSkgPCBsKSB7XG5cdFx0XHRcdGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG5cdFx0XHRcdGlmICgoY29kZSA+PSAweEQ4MDApICYmIChjb2RlIDw9IDB4REJGRikpIGNoYXIgKz0gaXRlcmFibGVbKytpXTtcblx0XHRcdH1cblx0XHRcdGNhbGwuY2FsbChjYiwgdGhpc0FyZywgY2hhciwgZG9CcmVhayk7XG5cdFx0XHRpZiAoYnJva2VuKSBicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHJlc3VsdCA9IGl0ZXJhYmxlLm5leHQoKTtcblxuXHR3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG5cdFx0Y2FsbC5jYWxsKGNiLCB0aGlzQXJnLCByZXN1bHQudmFsdWUsIGRvQnJlYWspO1xuXHRcdGlmIChicm9rZW4pIHJldHVybjtcblx0XHRyZXN1bHQgPSBpdGVyYWJsZS5uZXh0KCk7XG5cdH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LWl0ZXJhdG9yL2Zvci1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJndW1lbnRzICAgID0gcmVxdWlyZSgnZXM1LWV4dC9mdW5jdGlvbi9pcy1hcmd1bWVudHMnKVxuICAsIGlzU3RyaW5nICAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9zdHJpbmcvaXMtc3RyaW5nJylcbiAgLCBBcnJheUl0ZXJhdG9yICA9IHJlcXVpcmUoJy4vYXJyYXknKVxuICAsIFN0cmluZ0l0ZXJhdG9yID0gcmVxdWlyZSgnLi9zdHJpbmcnKVxuICAsIGl0ZXJhYmxlICAgICAgID0gcmVxdWlyZSgnLi92YWxpZC1pdGVyYWJsZScpXG4gICwgaXRlcmF0b3JTeW1ib2wgPSByZXF1aXJlKCdlczYtc3ltYm9sJykuaXRlcmF0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuXHRpZiAodHlwZW9mIGl0ZXJhYmxlKG9iailbaXRlcmF0b3JTeW1ib2xdID09PSAnZnVuY3Rpb24nKSByZXR1cm4gb2JqW2l0ZXJhdG9yU3ltYm9sXSgpO1xuXHRpZiAoaXNBcmd1bWVudHMob2JqKSkgcmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKG9iaik7XG5cdGlmIChpc1N0cmluZyhvYmopKSByZXR1cm4gbmV3IFN0cmluZ0l0ZXJhdG9yKG9iaik7XG5cdHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcihvYmopO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtaXRlcmF0b3IvZ2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcmd1bWVudHMgICAgPSByZXF1aXJlKCdlczUtZXh0L2Z1bmN0aW9uL2lzLWFyZ3VtZW50cycpXG4gICwgaXNTdHJpbmcgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L3N0cmluZy9pcy1zdHJpbmcnKVxuICAsIGl0ZXJhdG9yU3ltYm9sID0gcmVxdWlyZSgnZXM2LXN5bWJvbCcpLml0ZXJhdG9yXG5cbiAgLCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHJldHVybiBmYWxzZTtcblx0aWYgKGlzQXJyYXkodmFsdWUpKSByZXR1cm4gdHJ1ZTtcblx0aWYgKGlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuIHRydWU7XG5cdGlmIChpc0FyZ3VtZW50cyh2YWx1ZSkpIHJldHVybiB0cnVlO1xuXHRyZXR1cm4gKHR5cGVvZiB2YWx1ZVtpdGVyYXRvclN5bWJvbF0gPT09ICdmdW5jdGlvbicpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtaXRlcmF0b3IvaXMtaXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDExMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBUaGFua3MgQG1hdGhpYXNieW5lbnNcbi8vIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSNpdGVyYXRpbmctb3Zlci1zeW1ib2xzXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZicpXG4gICwgZCAgICAgICAgICAgICAgPSByZXF1aXJlKCdkJylcbiAgLCBJdGVyYXRvciAgICAgICA9IHJlcXVpcmUoJy4vJylcblxuICAsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICwgU3RyaW5nSXRlcmF0b3I7XG5cblN0cmluZ0l0ZXJhdG9yID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJpbmdJdGVyYXRvcikpIHJldHVybiBuZXcgU3RyaW5nSXRlcmF0b3Ioc3RyKTtcblx0c3RyID0gU3RyaW5nKHN0cik7XG5cdEl0ZXJhdG9yLmNhbGwodGhpcywgc3RyKTtcblx0ZGVmaW5lUHJvcGVydHkodGhpcywgJ19fbGVuZ3RoX18nLCBkKCcnLCBzdHIubGVuZ3RoKSk7XG5cbn07XG5pZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFN0cmluZ0l0ZXJhdG9yLCBJdGVyYXRvcik7XG5cblN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3IucHJvdG90eXBlLCB7XG5cdGNvbnN0cnVjdG9yOiBkKFN0cmluZ0l0ZXJhdG9yKSxcblx0X25leHQ6IGQoZnVuY3Rpb24gKCkge1xuXHRcdGlmICghdGhpcy5fX2xpc3RfXykgcmV0dXJuO1xuXHRcdGlmICh0aGlzLl9fbmV4dEluZGV4X18gPCB0aGlzLl9fbGVuZ3RoX18pIHJldHVybiB0aGlzLl9fbmV4dEluZGV4X18rKztcblx0XHR0aGlzLl91bkJpbmQoKTtcblx0fSksXG5cdF9yZXNvbHZlOiBkKGZ1bmN0aW9uIChpKSB7XG5cdFx0dmFyIGNoYXIgPSB0aGlzLl9fbGlzdF9fW2ldLCBjb2RlO1xuXHRcdGlmICh0aGlzLl9fbmV4dEluZGV4X18gPT09IHRoaXMuX19sZW5ndGhfXykgcmV0dXJuIGNoYXI7XG5cdFx0Y29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcblx0XHRpZiAoKGNvZGUgPj0gMHhEODAwKSAmJiAoY29kZSA8PSAweERCRkYpKSByZXR1cm4gY2hhciArIHRoaXMuX19saXN0X19bdGhpcy5fX25leHRJbmRleF9fKytdO1xuXHRcdHJldHVybiBjaGFyO1xuXHR9KSxcblx0dG9TdHJpbmc6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gJ1tvYmplY3QgU3RyaW5nIEl0ZXJhdG9yXSc7IH0pXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtaXRlcmF0b3Ivc3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG1hcCwgaXRlcmF0b3IsIHJlc3VsdDtcblx0aWYgKHR5cGVvZiBNYXAgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0dHJ5IHtcblx0XHQvLyBXZWJLaXQgZG9lc24ndCBzdXBwb3J0IGFyZ3VtZW50cyBhbmQgY3Jhc2hlc1xuXHRcdG1hcCA9IG5ldyBNYXAoW1sncmF6JywgJ29uZSddLCBbJ2R3YScsICd0d28nXSwgWyd0cnp5JywgJ3RocmVlJ11dKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoU3RyaW5nKG1hcCkgIT09ICdbb2JqZWN0IE1hcF0nKSByZXR1cm4gZmFsc2U7XG5cdGlmIChtYXAuc2l6ZSAhPT0gMykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC5jbGVhciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC5kZWxldGUgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiBtYXAuZW50cmllcyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC5mb3JFYWNoICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2YgbWFwLmdldCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC5oYXMgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiBtYXAua2V5cyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC5zZXQgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiBtYXAudmFsdWVzICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cblx0aXRlcmF0b3IgPSBtYXAuZW50cmllcygpO1xuXHRyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG5cdGlmIChyZXN1bHQuZG9uZSAhPT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblx0aWYgKCFyZXN1bHQudmFsdWUpIHJldHVybiBmYWxzZTtcblx0aWYgKHJlc3VsdC52YWx1ZVswXSAhPT0gJ3JheicpIHJldHVybiBmYWxzZTtcblx0aWYgKHJlc3VsdC52YWx1ZVsxXSAhPT0gJ29uZScpIHJldHVybiBmYWxzZTtcblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LW1hcC9pcy1pbXBsZW1lbnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEV4cG9ydHMgdHJ1ZSBpZiBlbnZpcm9ubWVudCBwcm92aWRlcyBuYXRpdmUgYE1hcGAgaW1wbGVtZW50YXRpb24sXG4vLyB3aGF0ZXZlciB0aGF0IGlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcblx0aWYgKHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ldyBNYXAoKSkgPT09ICdbb2JqZWN0IE1hcF0nKTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LW1hcC9pcy1uYXRpdmUtaW1wbGVtZW50ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvcHJpbWl0aXZlLXNldCcpKCdrZXknLFxuXHQndmFsdWUnLCAna2V5K3ZhbHVlJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LW1hcC9saWIvaXRlcmF0b3Ita2luZHMuanNcbi8vIG1vZHVsZSBpZCA9IDExNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBzZXRQcm90b3R5cGVPZiAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YnKVxuICAsIGQgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnZCcpXG4gICwgSXRlcmF0b3IgICAgICAgICAgPSByZXF1aXJlKCdlczYtaXRlcmF0b3InKVxuICAsIHRvU3RyaW5nVGFnU3ltYm9sID0gcmVxdWlyZSgnZXM2LXN5bWJvbCcpLnRvU3RyaW5nVGFnXG4gICwga2luZHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2l0ZXJhdG9yLWtpbmRzJylcblxuICAsIGRlZmluZVByb3BlcnRpZXMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllc1xuICAsIHVuQmluZCA9IEl0ZXJhdG9yLnByb3RvdHlwZS5fdW5CaW5kXG4gICwgTWFwSXRlcmF0b3I7XG5cbk1hcEl0ZXJhdG9yID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWFwLCBraW5kKSB7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYXBJdGVyYXRvcikpIHJldHVybiBuZXcgTWFwSXRlcmF0b3IobWFwLCBraW5kKTtcblx0SXRlcmF0b3IuY2FsbCh0aGlzLCBtYXAuX19tYXBLZXlzRGF0YV9fLCBtYXApO1xuXHRpZiAoIWtpbmQgfHwgIWtpbmRzW2tpbmRdKSBraW5kID0gJ2tleSt2YWx1ZSc7XG5cdGRlZmluZVByb3BlcnRpZXModGhpcywge1xuXHRcdF9fa2luZF9fOiBkKCcnLCBraW5kKSxcblx0XHRfX3ZhbHVlc19fOiBkKCd3JywgbWFwLl9fbWFwVmFsdWVzRGF0YV9fKVxuXHR9KTtcbn07XG5pZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKE1hcEl0ZXJhdG9yLCBJdGVyYXRvcik7XG5cbk1hcEl0ZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3IucHJvdG90eXBlLCB7XG5cdGNvbnN0cnVjdG9yOiBkKE1hcEl0ZXJhdG9yKSxcblx0X3Jlc29sdmU6IGQoZnVuY3Rpb24gKGkpIHtcblx0XHRpZiAodGhpcy5fX2tpbmRfXyA9PT0gJ3ZhbHVlJykgcmV0dXJuIHRoaXMuX192YWx1ZXNfX1tpXTtcblx0XHRpZiAodGhpcy5fX2tpbmRfXyA9PT0gJ2tleScpIHJldHVybiB0aGlzLl9fbGlzdF9fW2ldO1xuXHRcdHJldHVybiBbdGhpcy5fX2xpc3RfX1tpXSwgdGhpcy5fX3ZhbHVlc19fW2ldXTtcblx0fSksXG5cdF91bkJpbmQ6IGQoZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX192YWx1ZXNfXyA9IG51bGw7XG5cdFx0dW5CaW5kLmNhbGwodGhpcyk7XG5cdH0pLFxuXHR0b1N0cmluZzogZChmdW5jdGlvbiAoKSB7IHJldHVybiAnW29iamVjdCBNYXAgSXRlcmF0b3JdJzsgfSlcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcEl0ZXJhdG9yLnByb3RvdHlwZSwgdG9TdHJpbmdUYWdTeW1ib2wsXG5cdGQoJ2MnLCAnTWFwIEl0ZXJhdG9yJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1tYXAvbGliL2l0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xlYXIgICAgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L2FycmF5LyMvY2xlYXInKVxuICAsIGVJbmRleE9mICAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9hcnJheS8jL2UtaW5kZXgtb2YnKVxuICAsIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZicpXG4gICwgY2FsbGFibGUgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZScpXG4gICwgdmFsaWRWYWx1ZSAgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC92YWxpZC12YWx1ZScpXG4gICwgZCAgICAgICAgICAgICAgPSByZXF1aXJlKCdkJylcbiAgLCBlZSAgICAgICAgICAgICA9IHJlcXVpcmUoJ2V2ZW50LWVtaXR0ZXInKVxuICAsIFN5bWJvbCAgICAgICAgID0gcmVxdWlyZSgnZXM2LXN5bWJvbCcpXG4gICwgaXRlcmF0b3IgICAgICAgPSByZXF1aXJlKCdlczYtaXRlcmF0b3IvdmFsaWQtaXRlcmFibGUnKVxuICAsIGZvck9mICAgICAgICAgID0gcmVxdWlyZSgnZXM2LWl0ZXJhdG9yL2Zvci1vZicpXG4gICwgSXRlcmF0b3IgICAgICAgPSByZXF1aXJlKCcuL2xpYi9pdGVyYXRvcicpXG4gICwgaXNOYXRpdmUgICAgICAgPSByZXF1aXJlKCcuL2lzLW5hdGl2ZS1pbXBsZW1lbnRlZCcpXG5cbiAgLCBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGxcbiAgLCBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mXG4gICwgTWFwUG9seTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBQb2x5ID0gZnVuY3Rpb24gKC8qaXRlcmFibGUqLykge1xuXHR2YXIgaXRlcmFibGUgPSBhcmd1bWVudHNbMF0sIGtleXMsIHZhbHVlcywgc2VsZjtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hcFBvbHkpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciByZXF1aXJlcyBcXCduZXdcXCcnKTtcblx0aWYgKGlzTmF0aXZlICYmIHNldFByb3RvdHlwZU9mICYmIChNYXAgIT09IE1hcFBvbHkpKSB7XG5cdFx0c2VsZiA9IHNldFByb3RvdHlwZU9mKG5ldyBNYXAoKSwgZ2V0UHJvdG90eXBlT2YodGhpcykpO1xuXHR9IGVsc2Uge1xuXHRcdHNlbGYgPSB0aGlzO1xuXHR9XG5cdGlmIChpdGVyYWJsZSAhPSBudWxsKSBpdGVyYXRvcihpdGVyYWJsZSk7XG5cdGRlZmluZVByb3BlcnRpZXMoc2VsZiwge1xuXHRcdF9fbWFwS2V5c0RhdGFfXzogZCgnYycsIGtleXMgPSBbXSksXG5cdFx0X19tYXBWYWx1ZXNEYXRhX186IGQoJ2MnLCB2YWx1ZXMgPSBbXSlcblx0fSk7XG5cdGlmICghaXRlcmFibGUpIHJldHVybiBzZWxmO1xuXHRmb3JPZihpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0dmFyIGtleSA9IHZhbGlkVmFsdWUodmFsdWUpWzBdO1xuXHRcdHZhbHVlID0gdmFsdWVbMV07XG5cdFx0aWYgKGVJbmRleE9mLmNhbGwoa2V5cywga2V5KSAhPT0gLTEpIHJldHVybjtcblx0XHRrZXlzLnB1c2goa2V5KTtcblx0XHR2YWx1ZXMucHVzaCh2YWx1ZSk7XG5cdH0sIHNlbGYpO1xuXHRyZXR1cm4gc2VsZjtcbn07XG5cbmlmIChpc05hdGl2ZSkge1xuXHRpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKE1hcFBvbHksIE1hcCk7XG5cdE1hcFBvbHkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXAucHJvdG90eXBlLCB7XG5cdFx0Y29uc3RydWN0b3I6IGQoTWFwUG9seSlcblx0fSk7XG59XG5cbmVlKGRlZmluZVByb3BlcnRpZXMoTWFwUG9seS5wcm90b3R5cGUsIHtcblx0Y2xlYXI6IGQoZnVuY3Rpb24gKCkge1xuXHRcdGlmICghdGhpcy5fX21hcEtleXNEYXRhX18ubGVuZ3RoKSByZXR1cm47XG5cdFx0Y2xlYXIuY2FsbCh0aGlzLl9fbWFwS2V5c0RhdGFfXyk7XG5cdFx0Y2xlYXIuY2FsbCh0aGlzLl9fbWFwVmFsdWVzRGF0YV9fKTtcblx0XHR0aGlzLmVtaXQoJ19jbGVhcicpO1xuXHR9KSxcblx0ZGVsZXRlOiBkKGZ1bmN0aW9uIChrZXkpIHtcblx0XHR2YXIgaW5kZXggPSBlSW5kZXhPZi5jYWxsKHRoaXMuX19tYXBLZXlzRGF0YV9fLCBrZXkpO1xuXHRcdGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcblx0XHR0aGlzLl9fbWFwS2V5c0RhdGFfXy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdHRoaXMuX19tYXBWYWx1ZXNEYXRhX18uc3BsaWNlKGluZGV4LCAxKTtcblx0XHR0aGlzLmVtaXQoJ19kZWxldGUnLCBpbmRleCwga2V5KTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSksXG5cdGVudHJpZXM6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yKHRoaXMsICdrZXkrdmFsdWUnKTsgfSksXG5cdGZvckVhY2g6IGQoZnVuY3Rpb24gKGNiLyosIHRoaXNBcmcqLykge1xuXHRcdHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdLCBpdGVyYXRvciwgcmVzdWx0O1xuXHRcdGNhbGxhYmxlKGNiKTtcblx0XHRpdGVyYXRvciA9IHRoaXMuZW50cmllcygpO1xuXHRcdHJlc3VsdCA9IGl0ZXJhdG9yLl9uZXh0KCk7XG5cdFx0d2hpbGUgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjYWxsLmNhbGwoY2IsIHRoaXNBcmcsIHRoaXMuX19tYXBWYWx1ZXNEYXRhX19bcmVzdWx0XSxcblx0XHRcdFx0dGhpcy5fX21hcEtleXNEYXRhX19bcmVzdWx0XSwgdGhpcyk7XG5cdFx0XHRyZXN1bHQgPSBpdGVyYXRvci5fbmV4dCgpO1xuXHRcdH1cblx0fSksXG5cdGdldDogZChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0dmFyIGluZGV4ID0gZUluZGV4T2YuY2FsbCh0aGlzLl9fbWFwS2V5c0RhdGFfXywga2V5KTtcblx0XHRpZiAoaW5kZXggPT09IC0xKSByZXR1cm47XG5cdFx0cmV0dXJuIHRoaXMuX19tYXBWYWx1ZXNEYXRhX19baW5kZXhdO1xuXHR9KSxcblx0aGFzOiBkKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRyZXR1cm4gKGVJbmRleE9mLmNhbGwodGhpcy5fX21hcEtleXNEYXRhX18sIGtleSkgIT09IC0xKTtcblx0fSksXG5cdGtleXM6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yKHRoaXMsICdrZXknKTsgfSksXG5cdHNldDogZChmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdHZhciBpbmRleCA9IGVJbmRleE9mLmNhbGwodGhpcy5fX21hcEtleXNEYXRhX18sIGtleSksIGVtaXQ7XG5cdFx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdFx0aW5kZXggPSB0aGlzLl9fbWFwS2V5c0RhdGFfXy5wdXNoKGtleSkgLSAxO1xuXHRcdFx0ZW1pdCA9IHRydWU7XG5cdFx0fVxuXHRcdHRoaXMuX19tYXBWYWx1ZXNEYXRhX19baW5kZXhdID0gdmFsdWU7XG5cdFx0aWYgKGVtaXQpIHRoaXMuZW1pdCgnX2FkZCcsIGluZGV4LCBrZXkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9KSxcblx0c2l6ZTogZC5ncyhmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9fbWFwS2V5c0RhdGFfXy5sZW5ndGg7IH0pLFxuXHR2YWx1ZXM6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yKHRoaXMsICd2YWx1ZScpOyB9KSxcblx0dG9TdHJpbmc6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gJ1tvYmplY3QgTWFwXSc7IH0pXG59KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFwUG9seS5wcm90b3R5cGUsIFN5bWJvbC5pdGVyYXRvciwgZChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLmVudHJpZXMoKTtcbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXBQb2x5LnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkKCdjJywgJ01hcCcpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtbWFwL3BvbHlmaWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmFsaWRUeXBlcyA9IHsgb2JqZWN0OiB0cnVlLCBzeW1ib2w6IHRydWUgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzeW1ib2w7XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdHN5bWJvbCA9IFN5bWJvbCgndGVzdCBzeW1ib2wnKTtcblx0dHJ5IHsgU3RyaW5nKHN5bWJvbCk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gUmV0dXJuICd0cnVlJyBhbHNvIGZvciBwb2x5ZmlsbHNcblx0aWYgKCF2YWxpZFR5cGVzW3R5cGVvZiBTeW1ib2wuaXRlcmF0b3JdKSByZXR1cm4gZmFsc2U7XG5cdGlmICghdmFsaWRUeXBlc1t0eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlXSkgcmV0dXJuIGZhbHNlO1xuXHRpZiAoIXZhbGlkVHlwZXNbdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZ10pIHJldHVybiBmYWxzZTtcblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LXN5bWJvbC9pcy1pbXBsZW1lbnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCkge1xuXHRpZiAoIXgpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiB4ID09PSAnc3ltYm9sJykgcmV0dXJuIHRydWU7XG5cdGlmICgheC5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xuXHRpZiAoeC5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnU3ltYm9sJykgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gKHhbeC5jb25zdHJ1Y3Rvci50b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LXN5bWJvbC9pcy1zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBFUzIwMTUgU3ltYm9sIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCAob3IgcGFydGlhbGx5IHN1cHBvcnQgaXQpXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGQgICAgICAgICAgICAgID0gcmVxdWlyZSgnZCcpXG4gICwgdmFsaWRhdGVTeW1ib2wgPSByZXF1aXJlKCcuL3ZhbGlkYXRlLXN5bWJvbCcpXG5cbiAgLCBjcmVhdGUgPSBPYmplY3QuY3JlYXRlLCBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXNcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgb2JqUHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZVxuICAsIE5hdGl2ZVN5bWJvbCwgU3ltYm9sUG9seWZpbGwsIEhpZGRlblN5bWJvbCwgZ2xvYmFsU3ltYm9scyA9IGNyZWF0ZShudWxsKVxuICAsIGlzTmF0aXZlU2FmZTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0TmF0aXZlU3ltYm9sID0gU3ltYm9sO1xuXHR0cnkge1xuXHRcdFN0cmluZyhOYXRpdmVTeW1ib2woKSk7XG5cdFx0aXNOYXRpdmVTYWZlID0gdHJ1ZTtcblx0fSBjYXRjaCAoaWdub3JlKSB7fVxufVxuXG52YXIgZ2VuZXJhdGVOYW1lID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIGNyZWF0ZWQgPSBjcmVhdGUobnVsbCk7XG5cdHJldHVybiBmdW5jdGlvbiAoZGVzYykge1xuXHRcdHZhciBwb3N0Zml4ID0gMCwgbmFtZSwgaWUxMUJ1Z1dvcmthcm91bmQ7XG5cdFx0d2hpbGUgKGNyZWF0ZWRbZGVzYyArIChwb3N0Zml4IHx8ICcnKV0pICsrcG9zdGZpeDtcblx0XHRkZXNjICs9IChwb3N0Zml4IHx8ICcnKTtcblx0XHRjcmVhdGVkW2Rlc2NdID0gdHJ1ZTtcblx0XHRuYW1lID0gJ0BAJyArIGRlc2M7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqUHJvdG90eXBlLCBuYW1lLCBkLmdzKG51bGwsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0Ly8gRm9yIElFMTEgaXNzdWUgc2VlOlxuXHRcdFx0Ly8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2tkZXRhaWwvdmlldy8xOTI4NTA4L1xuXHRcdFx0Ly8gICAgaWUxMS1icm9rZW4tZ2V0dGVycy1vbi1kb20tb2JqZWN0c1xuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21lZGlrb28vZXM2LXN5bWJvbC9pc3N1ZXMvMTJcblx0XHRcdGlmIChpZTExQnVnV29ya2Fyb3VuZCkgcmV0dXJuO1xuXHRcdFx0aWUxMUJ1Z1dvcmthcm91bmQgPSB0cnVlO1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwgZCh2YWx1ZSkpO1xuXHRcdFx0aWUxMUJ1Z1dvcmthcm91bmQgPSBmYWxzZTtcblx0XHR9KSk7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH07XG59KCkpO1xuXG4vLyBJbnRlcm5hbCBjb25zdHJ1Y3RvciAobm90IG9uZSBleHBvc2VkKSBmb3IgY3JlYXRpbmcgU3ltYm9sIGluc3RhbmNlcy5cbi8vIFRoaXMgb25lIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgYHNvbWVTeW1ib2wgaW5zdGFuY2VvZiBTeW1ib2xgIGFsd2F5cyByZXR1cm4gZmFsc2VcbkhpZGRlblN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbChkZXNjcmlwdGlvbikge1xuXHRpZiAodGhpcyBpbnN0YW5jZW9mIEhpZGRlblN5bWJvbCkgdGhyb3cgbmV3IFR5cGVFcnJvcignVHlwZUVycm9yOiBTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcblx0cmV0dXJuIFN5bWJvbFBvbHlmaWxsKGRlc2NyaXB0aW9uKTtcbn07XG5cbi8vIEV4cG9zZWQgYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIChyZXR1cm5zIGluc3RhbmNlcyBvZiBIaWRkZW5TeW1ib2wpXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbFBvbHlmaWxsID0gZnVuY3Rpb24gU3ltYm9sKGRlc2NyaXB0aW9uKSB7XG5cdHZhciBzeW1ib2w7XG5cdGlmICh0aGlzIGluc3RhbmNlb2YgU3ltYm9sKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdUeXBlRXJyb3I6IFN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuXHRpZiAoaXNOYXRpdmVTYWZlKSByZXR1cm4gTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcblx0c3ltYm9sID0gY3JlYXRlKEhpZGRlblN5bWJvbC5wcm90b3R5cGUpO1xuXHRkZXNjcmlwdGlvbiA9IChkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gJycgOiBTdHJpbmcoZGVzY3JpcHRpb24pKTtcblx0cmV0dXJuIGRlZmluZVByb3BlcnRpZXMoc3ltYm9sLCB7XG5cdFx0X19kZXNjcmlwdGlvbl9fOiBkKCcnLCBkZXNjcmlwdGlvbiksXG5cdFx0X19uYW1lX186IGQoJycsIGdlbmVyYXRlTmFtZShkZXNjcmlwdGlvbikpXG5cdH0pO1xufTtcbmRlZmluZVByb3BlcnRpZXMoU3ltYm9sUG9seWZpbGwsIHtcblx0Zm9yOiBkKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRpZiAoZ2xvYmFsU3ltYm9sc1trZXldKSByZXR1cm4gZ2xvYmFsU3ltYm9sc1trZXldO1xuXHRcdHJldHVybiAoZ2xvYmFsU3ltYm9sc1trZXldID0gU3ltYm9sUG9seWZpbGwoU3RyaW5nKGtleSkpKTtcblx0fSksXG5cdGtleUZvcjogZChmdW5jdGlvbiAocykge1xuXHRcdHZhciBrZXk7XG5cdFx0dmFsaWRhdGVTeW1ib2wocyk7XG5cdFx0Zm9yIChrZXkgaW4gZ2xvYmFsU3ltYm9scykgaWYgKGdsb2JhbFN5bWJvbHNba2V5XSA9PT0gcykgcmV0dXJuIGtleTtcblx0fSksXG5cblx0Ly8gSWYgdGhlcmUncyBuYXRpdmUgaW1wbGVtZW50YXRpb24gb2YgZ2l2ZW4gc3ltYm9sLCBsZXQncyBmYWxsYmFjayB0byBpdFxuXHQvLyB0byBlbnN1cmUgcHJvcGVyIGludGVyb3BlcmFiaWxpdHkgd2l0aCBvdGhlciBuYXRpdmUgZnVuY3Rpb25zIGUuZy4gQXJyYXkuZnJvbVxuXHRoYXNJbnN0YW5jZTogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuaGFzSW5zdGFuY2UpIHx8IFN5bWJvbFBvbHlmaWxsKCdoYXNJbnN0YW5jZScpKSxcblx0aXNDb25jYXRTcHJlYWRhYmxlOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUpIHx8XG5cdFx0U3ltYm9sUG9seWZpbGwoJ2lzQ29uY2F0U3ByZWFkYWJsZScpKSxcblx0aXRlcmF0b3I6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLml0ZXJhdG9yKSB8fCBTeW1ib2xQb2x5ZmlsbCgnaXRlcmF0b3InKSksXG5cdG1hdGNoOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5tYXRjaCkgfHwgU3ltYm9sUG9seWZpbGwoJ21hdGNoJykpLFxuXHRyZXBsYWNlOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5yZXBsYWNlKSB8fCBTeW1ib2xQb2x5ZmlsbCgncmVwbGFjZScpKSxcblx0c2VhcmNoOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5zZWFyY2gpIHx8IFN5bWJvbFBvbHlmaWxsKCdzZWFyY2gnKSksXG5cdHNwZWNpZXM6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnNwZWNpZXMpIHx8IFN5bWJvbFBvbHlmaWxsKCdzcGVjaWVzJykpLFxuXHRzcGxpdDogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuc3BsaXQpIHx8IFN5bWJvbFBvbHlmaWxsKCdzcGxpdCcpKSxcblx0dG9QcmltaXRpdmU6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnRvUHJpbWl0aXZlKSB8fCBTeW1ib2xQb2x5ZmlsbCgndG9QcmltaXRpdmUnKSksXG5cdHRvU3RyaW5nVGFnOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC50b1N0cmluZ1RhZykgfHwgU3ltYm9sUG9seWZpbGwoJ3RvU3RyaW5nVGFnJykpLFxuXHR1bnNjb3BhYmxlczogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wudW5zY29wYWJsZXMpIHx8IFN5bWJvbFBvbHlmaWxsKCd1bnNjb3BhYmxlcycpKVxufSk7XG5cbi8vIEludGVybmFsIHR3ZWFrcyBmb3IgcmVhbCBzeW1ib2wgcHJvZHVjZXJcbmRlZmluZVByb3BlcnRpZXMoSGlkZGVuU3ltYm9sLnByb3RvdHlwZSwge1xuXHRjb25zdHJ1Y3RvcjogZChTeW1ib2xQb2x5ZmlsbCksXG5cdHRvU3RyaW5nOiBkKCcnLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9fbmFtZV9fOyB9KVxufSk7XG5cbi8vIFByb3BlciBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGV4cG9zZWQgb24gU3ltYm9sLnByb3RvdHlwZVxuLy8gVGhleSB3b24ndCBiZSBhY2Nlc3NpYmxlIG9uIHByb2R1Y2VkIHN5bWJvbCBpbnN0YW5jZXMgYXMgdGhleSBkZXJpdmUgZnJvbSBIaWRkZW5TeW1ib2wucHJvdG90eXBlXG5kZWZpbmVQcm9wZXJ0aWVzKFN5bWJvbFBvbHlmaWxsLnByb3RvdHlwZSwge1xuXHR0b1N0cmluZzogZChmdW5jdGlvbiAoKSB7IHJldHVybiAnU3ltYm9sICgnICsgdmFsaWRhdGVTeW1ib2wodGhpcykuX19kZXNjcmlwdGlvbl9fICsgJyknOyB9KSxcblx0dmFsdWVPZjogZChmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxpZGF0ZVN5bWJvbCh0aGlzKTsgfSlcbn0pO1xuZGVmaW5lUHJvcGVydHkoU3ltYm9sUG9seWZpbGwucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1ByaW1pdGl2ZSwgZCgnJywgZnVuY3Rpb24gKCkge1xuXHR2YXIgc3ltYm9sID0gdmFsaWRhdGVTeW1ib2wodGhpcyk7XG5cdGlmICh0eXBlb2Ygc3ltYm9sID09PSAnc3ltYm9sJykgcmV0dXJuIHN5bWJvbDtcblx0cmV0dXJuIHN5bWJvbC50b1N0cmluZygpO1xufSkpO1xuZGVmaW5lUHJvcGVydHkoU3ltYm9sUG9seWZpbGwucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZywgZCgnYycsICdTeW1ib2wnKSk7XG5cbi8vIFByb3BlciBpbXBsZW1lbnRhdG9uIG9mIHRvUHJpbWl0aXZlIGFuZCB0b1N0cmluZ1RhZyBmb3IgcmV0dXJuZWQgc3ltYm9sIGluc3RhbmNlc1xuZGVmaW5lUHJvcGVydHkoSGlkZGVuU3ltYm9sLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWcsXG5cdGQoJ2MnLCBTeW1ib2xQb2x5ZmlsbC5wcm90b3R5cGVbU3ltYm9sUG9seWZpbGwudG9TdHJpbmdUYWddKSk7XG5cbi8vIE5vdGU6IEl0J3MgaW1wb3J0YW50IHRvIGRlZmluZSBgdG9QcmltaXRpdmVgIGFzIGxhc3Qgb25lLCBhcyBzb21lIGltcGxlbWVudGF0aW9uc1xuLy8gaW1wbGVtZW50IGB0b1ByaW1pdGl2ZWAgbmF0aXZlbHkgd2l0aG91dCBpbXBsZW1lbnRpbmcgYHRvU3RyaW5nVGFnYCAob3Igb3RoZXIgc3BlY2lmaWVkIHN5bWJvbHMpXG4vLyBBbmQgdGhhdCBtYXkgaW52b2tlIGVycm9yIGluIGRlZmluaXRpb24gZmxvdzpcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21lZGlrb28vZXM2LXN5bWJvbC9pc3N1ZXMvMTMjaXNzdWVjb21tZW50LTE2NDE0NjE0OVxuZGVmaW5lUHJvcGVydHkoSGlkZGVuU3ltYm9sLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwudG9QcmltaXRpdmUsXG5cdGQoJ2MnLCBTeW1ib2xQb2x5ZmlsbC5wcm90b3R5cGVbU3ltYm9sUG9seWZpbGwudG9QcmltaXRpdmVdKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LXN5bWJvbC9wb2x5ZmlsbC5qc1xuLy8gbW9kdWxlIGlkID0gMTE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pcy1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0aWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IodmFsdWUgKyBcIiBpcyBub3QgYSBzeW1ib2xcIik7XG5cdHJldHVybiB2YWx1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LXN5bWJvbC92YWxpZGF0ZS1zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBkICAgICAgICA9IHJlcXVpcmUoJ2QnKVxuICAsIGNhbGxhYmxlID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUnKVxuXG4gICwgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHksIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbFxuICAsIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICwgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG4gICwgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgZGVzY3JpcHRvciA9IHsgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUgfVxuXG4gICwgb24sIG9uY2UsIG9mZiwgZW1pdCwgbWV0aG9kcywgZGVzY3JpcHRvcnMsIGJhc2U7XG5cbm9uID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG5cdHZhciBkYXRhO1xuXG5cdGNhbGxhYmxlKGxpc3RlbmVyKTtcblxuXHRpZiAoIWhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19fZWVfXycpKSB7XG5cdFx0ZGF0YSA9IGRlc2NyaXB0b3IudmFsdWUgPSBjcmVhdGUobnVsbCk7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgJ19fZWVfXycsIGRlc2NyaXB0b3IpO1xuXHRcdGRlc2NyaXB0b3IudmFsdWUgPSBudWxsO1xuXHR9IGVsc2Uge1xuXHRcdGRhdGEgPSB0aGlzLl9fZWVfXztcblx0fVxuXHRpZiAoIWRhdGFbdHlwZV0pIGRhdGFbdHlwZV0gPSBsaXN0ZW5lcjtcblx0ZWxzZSBpZiAodHlwZW9mIGRhdGFbdHlwZV0gPT09ICdvYmplY3QnKSBkYXRhW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuXHRlbHNlIGRhdGFbdHlwZV0gPSBbZGF0YVt0eXBlXSwgbGlzdGVuZXJdO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxub25jZSA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuXHR2YXIgb25jZSwgc2VsZjtcblxuXHRjYWxsYWJsZShsaXN0ZW5lcik7XG5cdHNlbGYgPSB0aGlzO1xuXHRvbi5jYWxsKHRoaXMsIHR5cGUsIG9uY2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0b2ZmLmNhbGwoc2VsZiwgdHlwZSwgb25jZSk7XG5cdFx0YXBwbHkuY2FsbChsaXN0ZW5lciwgdGhpcywgYXJndW1lbnRzKTtcblx0fSk7XG5cblx0b25jZS5fX2VlT25jZUxpc3RlbmVyX18gPSBsaXN0ZW5lcjtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5vZmYgPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcblx0dmFyIGRhdGEsIGxpc3RlbmVycywgY2FuZGlkYXRlLCBpO1xuXG5cdGNhbGxhYmxlKGxpc3RlbmVyKTtcblxuXHRpZiAoIWhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19fZWVfXycpKSByZXR1cm4gdGhpcztcblx0ZGF0YSA9IHRoaXMuX19lZV9fO1xuXHRpZiAoIWRhdGFbdHlwZV0pIHJldHVybiB0aGlzO1xuXHRsaXN0ZW5lcnMgPSBkYXRhW3R5cGVdO1xuXG5cdGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnb2JqZWN0Jykge1xuXHRcdGZvciAoaSA9IDA7IChjYW5kaWRhdGUgPSBsaXN0ZW5lcnNbaV0pOyArK2kpIHtcblx0XHRcdGlmICgoY2FuZGlkYXRlID09PSBsaXN0ZW5lcikgfHxcblx0XHRcdFx0XHQoY2FuZGlkYXRlLl9fZWVPbmNlTGlzdGVuZXJfXyA9PT0gbGlzdGVuZXIpKSB7XG5cdFx0XHRcdGlmIChsaXN0ZW5lcnMubGVuZ3RoID09PSAyKSBkYXRhW3R5cGVdID0gbGlzdGVuZXJzW2kgPyAwIDogMV07XG5cdFx0XHRcdGVsc2UgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0aWYgKChsaXN0ZW5lcnMgPT09IGxpc3RlbmVyKSB8fFxuXHRcdFx0XHQobGlzdGVuZXJzLl9fZWVPbmNlTGlzdGVuZXJfXyA9PT0gbGlzdGVuZXIpKSB7XG5cdFx0XHRkZWxldGUgZGF0YVt0eXBlXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmVtaXQgPSBmdW5jdGlvbiAodHlwZSkge1xuXHR2YXIgaSwgbCwgbGlzdGVuZXIsIGxpc3RlbmVycywgYXJncztcblxuXHRpZiAoIWhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19fZWVfXycpKSByZXR1cm47XG5cdGxpc3RlbmVycyA9IHRoaXMuX19lZV9fW3R5cGVdO1xuXHRpZiAoIWxpc3RlbmVycykgcmV0dXJuO1xuXG5cdGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnb2JqZWN0Jykge1xuXHRcdGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdGFyZ3MgPSBuZXcgQXJyYXkobCAtIDEpO1xuXHRcdGZvciAoaSA9IDE7IGkgPCBsOyArK2kpIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXG5cdFx0bGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKCk7XG5cdFx0Zm9yIChpID0gMDsgKGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldKTsgKytpKSB7XG5cdFx0XHRhcHBseS5jYWxsKGxpc3RlbmVyLCB0aGlzLCBhcmdzKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0c3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0Y2FzZSAxOlxuXHRcdFx0Y2FsbC5jYWxsKGxpc3RlbmVycywgdGhpcyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHRjYWxsLmNhbGwobGlzdGVuZXJzLCB0aGlzLCBhcmd1bWVudHNbMV0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAzOlxuXHRcdFx0Y2FsbC5jYWxsKGxpc3RlbmVycywgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdFx0YXJncyA9IG5ldyBBcnJheShsIC0gMSk7XG5cdFx0XHRmb3IgKGkgPSAxOyBpIDwgbDsgKytpKSB7XG5cdFx0XHRcdGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0fVxuXHRcdFx0YXBwbHkuY2FsbChsaXN0ZW5lcnMsIHRoaXMsIGFyZ3MpO1xuXHRcdH1cblx0fVxufTtcblxubWV0aG9kcyA9IHtcblx0b246IG9uLFxuXHRvbmNlOiBvbmNlLFxuXHRvZmY6IG9mZixcblx0ZW1pdDogZW1pdFxufTtcblxuZGVzY3JpcHRvcnMgPSB7XG5cdG9uOiBkKG9uKSxcblx0b25jZTogZChvbmNlKSxcblx0b2ZmOiBkKG9mZiksXG5cdGVtaXQ6IGQoZW1pdClcbn07XG5cbmJhc2UgPSBkZWZpbmVQcm9wZXJ0aWVzKHt9LCBkZXNjcmlwdG9ycyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZ1bmN0aW9uIChvKSB7XG5cdHJldHVybiAobyA9PSBudWxsKSA/IGNyZWF0ZShiYXNlKSA6IGRlZmluZVByb3BlcnRpZXMoT2JqZWN0KG8pLCBkZXNjcmlwdG9ycyk7XG59O1xuZXhwb3J0cy5tZXRob2RzID0gbWV0aG9kcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ldmVudC1lbWl0dGVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xudmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZlxcXFx1ZmUyMC1cXFxcdWZlMjMnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmMCcsXG4gICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UgKyAnXScsXG4gICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByc0xvd2VyTWlzYyA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc1VwcGVyTWlzYyA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc09wdExvd2VyQ29udHIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICByc09wdFVwcGVyQ29udHIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG52YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICovXG52YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbnZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdExvd2VyQ29udHIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNVcHBlck1pc2MgKyAnKycgKyByc09wdFVwcGVyQ29udHIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNMb3dlck1pc2MsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyICsgJz8nICsgcnNMb3dlck1pc2MgKyAnKycgKyByc09wdExvd2VyQ29udHIsXG4gIHJzVXBwZXIgKyAnKycgKyByc09wdFVwcGVyQ29udHIsXG4gIHJzRGlnaXRzLFxuICByc0Vtb2ppXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xudmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyLH1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbi8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbnZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAnXFx4ZGYnOiAnc3MnLFxuICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAnc3MnXG59O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICovXG52YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG59XG5cbi8qKlxuICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAqIC8vID0+ICdkZWphIHZ1J1xuICovXG5mdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICogLy8gPT4gJ2Zvby1iYXInXG4gKlxuICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICogLy8gPT4gJ2Zvby1iYXInXG4gKlxuICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gKiAvLyA9PiAnZm9vLWJhcidcbiAqL1xudmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbi8qKlxuICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gKi9cbmZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtlYmFiQ2FzZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gua2ViYWJjYXNlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNvbXBhcmlzb24gc3R5bGVzLiAqL1xudmFyIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgPSAxLFxuICAgIFBBUlRJQUxfQ09NUEFSRV9GTEFHID0gMjtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICByZUxlYWRpbmdEb3QgPSAvXlxcLi8sXG4gICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHJldHVybiB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gZGF0YVtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICBnZXRNYXBEYXRhKHRoaXMsIGtleSkuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID8gdmFsdWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX19bJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgY2FjaGUgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoY2FjaGUgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBjYWNoZS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2FjaGUgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBjYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIC8vIFNhZmFyaSA5IG1ha2VzIGBhcmd1bWVudHMubGVuZ3RoYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICB2YXIgcmVzdWx0ID0gKGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSlcbiAgICA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZylcbiAgICA6IFtdO1xuXG4gIHZhciBsZW5ndGggPSByZXN1bHQubGVuZ3RoLFxuICAgICAgc2tpcEluZGV4ZXMgPSAhIWxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChrZXkgPT0gJ2xlbmd0aCcgfHwgaXNJbmRleChrZXksIGxlbmd0aCkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBpc0tleShwYXRoLCBvYmplY3QpID8gW3BhdGhdIDogY2FzdFBhdGgocGF0aCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtib29sZWFufSBbYml0bWFza10gVGhlIGJpdG1hc2sgb2YgY29tcGFyaXNvbiBmbGFncy5cbiAqICBUaGUgYml0bWFzayBtYXkgYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBmbGFnczpcbiAqICAgICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAgICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdCh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJhc2VJc0VxdWFsLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gW2JpdG1hc2tdIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgXG4gKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gYXJyYXlUYWcsXG4gICAgICBvdGhUYWcgPSBhcnJheVRhZztcblxuICBpZiAoIW9iaklzQXJyKSB7XG4gICAgb2JqVGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIH1cbiAgaWYgKCFvdGhJc0Fycikge1xuICAgIG90aFRhZyA9IGdldFRhZyhvdGhlcik7XG4gICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG4gIH1cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyAmJiAhaXNIb3N0T2JqZWN0KG9iamVjdCksXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcgJiYgIWlzSG9zdE9iamVjdChvdGhlciksXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIFBBUlRJQUxfQ09NUEFSRV9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIGN1c3RvbWl6ZXIsIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgfCBQQVJUSUFMX0NPTVBBUkVfRkxBRywgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gKGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW29iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgdW5kZWZpbmVkLCBVTk9SREVSRURfQ09NUEFSRV9GTEFHIHwgUEFSVElBTF9DT01QQVJFX0ZMQUcpO1xuICB9O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc0tleShpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHZhciBwYXRoID0gY2FzdFBhdGgoaW5kZXgpLFxuICAgICAgICAgICAgb2JqZWN0ID0gcGFyZW50KGFycmF5LCBwYXRoKTtcblxuICAgICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBhcnJheVt0b0tleShpbmRleCldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgfVxuICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogc3RyaW5nVG9QYXRoKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYFxuICogIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFzZWVuLmhhcyhvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4uYWRkKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgb2YgY29tcGFyaXNvbiBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGBcbiAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIFBBUlRJQUxfQ09NUEFSRV9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gVU5PUkRFUkVEX0NPTVBBUkVfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYFxuICogIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0ga2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExLFxuLy8gZm9yIGRhdGEgdmlld3MgaW4gRWRnZSA8IDE0LCBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcy5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gaXNLZXkocGF0aCwgb2JqZWN0KSA/IFtwYXRoXSA6IGNhc3RQYXRoKHBhdGgpO1xuXG4gIHZhciByZXN1bHQsXG4gICAgICBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHZhciBsZW5ndGggPSBvYmplY3QgPyBvYmplY3QubGVuZ3RoIDogMDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICovXG5mdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLmxlbmd0aCA9PSAxID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplKGZ1bmN0aW9uKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHJlTGVhZGluZ0RvdC50ZXN0KHN0cmluZykpIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAqXG4gKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XVxuICogIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAqIH0pO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAqIC8vID0+IFsxLCAzXVxuICpcbiAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAqIC8vID0+IFsyLCA0XVxuICovXG5mdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHByZWRpY2F0ZSA9IGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgIH1cbiAgfVxuICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBBc3NpZ24gY2FjaGUgdG8gYF8ubWVtb2l6ZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA4LTkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXkgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGlzT2JqZWN0KHZhbHVlKSA/IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLnJlbW92ZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICBpZiAodmFsdWUgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzZWVuID0gcmVzdWx0O1xuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICB9XG4gIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgaWYgKHNldCkge1xuICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICB9XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICovXG52YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2hcbiAqIGVsZW1lbnQgaXMga2VwdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udW5pcShbMiwgMSwgMl0pO1xuICogLy8gPT4gWzIsIDFdXG4gKi9cbmZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlVW5pcShhcnJheSlcbiAgICA6IFtdO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA4LTkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXkgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGlzT2JqZWN0KHZhbHVlKSA/IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC51bmlxL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG4vLyBodHRwczovL2dpdGh1Yi5jb20vTWF0dC1Fc2NoL3ZpcnR1YWwtZG9tL2Jsb2IvbWFzdGVyL3ZpcnR1YWwtaHlwZXJzY3JpcHQvcGFyc2UtdGFnLmpzXG5cbnZhciBzcGxpdCA9IHJlcXVpcmUoJ2Jyb3dzZXItc3BsaXQnKVxuXG52YXIgY2xhc3NJZFNwbGl0ID0gLyhbXFwuI10/W2EtekEtWjAtOVxcdTAwN0YtXFx1RkZGRl86LV0rKS9cbnZhciBub3RDbGFzc0lkID0gL15cXC58Iy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZVNlbGVjdG9yIChzZWxlY3RvciwgdXBwZXIpIHtcbiAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAnJ1xuICB2YXIgdGFnTmFtZVxuICB2YXIgaWQgPSAnJ1xuICB2YXIgY2xhc3NlcyA9IFtdXG5cbiAgdmFyIHRhZ1BhcnRzID0gc3BsaXQoc2VsZWN0b3IsIGNsYXNzSWRTcGxpdClcblxuICBpZiAobm90Q2xhc3NJZC50ZXN0KHRhZ1BhcnRzWzFdKSB8fCBzZWxlY3RvciA9PT0gJycpIHtcbiAgICB0YWdOYW1lID0gJ2RpdidcbiAgfVxuXG4gIHZhciBwYXJ0LCB0eXBlLCBpXG5cbiAgZm9yIChpID0gMDsgaSA8IHRhZ1BhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydCA9IHRhZ1BhcnRzW2ldXG5cbiAgICBpZiAoIXBhcnQpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdHlwZSA9IHBhcnQuY2hhckF0KDApXG5cbiAgICBpZiAoIXRhZ05hbWUpIHtcbiAgICAgIHRhZ05hbWUgPSBwYXJ0XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnLicpIHtcbiAgICAgIGNsYXNzZXMucHVzaChwYXJ0LnN1YnN0cmluZygxLCBwYXJ0Lmxlbmd0aCkpXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnIycpIHtcbiAgICAgIGlkID0gcGFydC5zdWJzdHJpbmcoMSwgcGFydC5sZW5ndGgpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWdOYW1lOiB1cHBlciA9PT0gdHJ1ZSA/IHRhZ05hbWUudG9VcHBlckNhc2UoKSA6IHRhZ05hbWUsXG4gICAgaWQ6IGlkLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5qb2luKCcgJylcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3BhcnNlLXNlbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGUgPSBmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxudmFyIHNwbGljZU9uZSA9IGZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfWxpc3QucG9wKCk7XG59O1xuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxudmFyIHJlc29sdmVQYXRobmFtZSA9IGZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/ICcnIDogYXJndW1lbnRzWzFdO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzb2x2ZVBhdGhuYW1lO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgc2VsZWN0b3JQYXJzZXJfMSA9IHJlcXVpcmUoJy4vc2VsZWN0b3JQYXJzZXInKTtcbmZ1bmN0aW9uIGNsYXNzTmFtZUZyb21WTm9kZSh2Tm9kZSkge1xuICAgIHZhciBfYSA9IHNlbGVjdG9yUGFyc2VyXzEuc2VsZWN0b3JQYXJzZXIodk5vZGUpLmNsYXNzTmFtZSwgY24gPSBfYSA9PT0gdm9pZCAwID8gJycgOiBfYTtcbiAgICBpZiAoIXZOb2RlLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGNuO1xuICAgIH1cbiAgICB2YXIgX2IgPSB2Tm9kZS5kYXRhLCBkYXRhQ2xhc3MgPSBfYi5jbGFzcywgcHJvcHMgPSBfYi5wcm9wcztcbiAgICBpZiAoZGF0YUNsYXNzKSB7XG4gICAgICAgIHZhciBjID0gT2JqZWN0LmtleXMoZGF0YUNsYXNzKVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoY2wpIHsgcmV0dXJuIGRhdGFDbGFzc1tjbF07IH0pO1xuICAgICAgICBjbiArPSBcIiBcIiArIGMuam9pbihcIiBcIik7XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBwcm9wcy5jbGFzc05hbWUpIHtcbiAgICAgICAgY24gKz0gXCIgXCIgKyBwcm9wcy5jbGFzc05hbWU7XG4gICAgfVxuICAgIHJldHVybiBjbiAmJiBjbi50cmltKCk7XG59XG5leHBvcnRzLmNsYXNzTmFtZUZyb21WTm9kZSA9IGNsYXNzTmFtZUZyb21WTm9kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsYXNzTmFtZUZyb21WTm9kZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tc2VsZWN0b3IvbGliL2NvbW1vbmpzL2NsYXNzTmFtZUZyb21WTm9kZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxudmFyIHBhcnNlU2VsZWN0b3IgPSByZXF1aXJlKCdwYXJzZS1zZWwnKVxudmFyIFZPSURfRUxFTUVOVFMgPSByZXF1aXJlKCcuL2VsZW1lbnRzJykuVk9JRFxudmFyIENPTlRBSU5FUl9FTEVNRU5UUyA9IHJlcXVpcmUoJy4vZWxlbWVudHMnKS5DT05UQUlORVJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbml0IChtb2R1bGVzKSB7XG4gIGZ1bmN0aW9uIHBhcnNlICh2bm9kZSwgbm9kZSkge1xuICAgIHZhciByZXN1bHQgPSBbXVxuICAgIHZhciBhdHRyaWJ1dGVzID0gbmV3IE1hcChbXG4gICAgICAvLyBUaGVzZSBjYW4gYmUgb3ZlcndyaXR0ZW4gYmVjYXVzZSB0aGF04oCZcyB3aGF0IGhhcHBlbnMgaW4gc25hYmJkb21cbiAgICAgIFsnaWQnLCBub2RlLmlkXSxcbiAgICAgIFsnY2xhc3MnLCBub2RlLmNsYXNzTmFtZV1cbiAgICBdKVxuXG4gICAgbW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmbiwgaW5kZXgpIHtcbiAgICAgIGZuKHZub2RlLCBhdHRyaWJ1dGVzKVxuICAgIH0pXG4gICAgYXR0cmlidXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUgIT09ICcnKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGtleSArICc9XCInICsgdmFsdWUgKyAnXCInKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyAnKVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHJlbmRlclRvU3RyaW5nICh2bm9kZSkge1xuICAgIGlmICghdm5vZGUuc2VsICYmIHZub2RlLnRleHQpIHtcbiAgICAgIHJldHVybiB2bm9kZS50ZXh0XG4gICAgfVxuXG4gICAgdm5vZGUuZGF0YSA9IHZub2RlLmRhdGEgfHwge31cblxuICAgIC8vIFN1cHBvcnQgdGh1bmtzXG4gICAgaWYgKHZub2RlLmRhdGEuaG9vayAmJlxuICAgICAgdHlwZW9mIHZub2RlLmRhdGEuaG9vay5pbml0ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2Ygdm5vZGUuZGF0YS5mbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdm5vZGUuZGF0YS5ob29rLmluaXQodm5vZGUpXG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBwYXJzZVNlbGVjdG9yKHZub2RlLnNlbClcbiAgICB2YXIgdGFnTmFtZSA9IG5vZGUudGFnTmFtZVxuICAgIHZhciBhdHRyaWJ1dGVzID0gcGFyc2Uodm5vZGUsIG5vZGUpXG4gICAgdmFyIHN2ZyA9IHZub2RlLmRhdGEubnMgPT09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgICB2YXIgdGFnID0gW11cblxuICAgIC8vIE9wZW4gdGFnXG4gICAgdGFnLnB1c2goJzwnICsgdGFnTmFtZSlcbiAgICBpZiAoYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgIHRhZy5wdXNoKCcgJyArIGF0dHJpYnV0ZXMpXG4gICAgfVxuICAgIGlmIChzdmcgJiYgQ09OVEFJTkVSX0VMRU1FTlRTW3RhZ05hbWVdICE9PSB0cnVlKSB7XG4gICAgICB0YWcucHVzaCgnIC8nKVxuICAgIH1cbiAgICB0YWcucHVzaCgnPicpXG5cbiAgICAvLyBDbG9zZSB0YWcsIGlmIG5lZWRlZFxuICAgIGlmICgoVk9JRF9FTEVNRU5UU1t0YWdOYW1lXSAhPT0gdHJ1ZSAmJiAhc3ZnKSB8fFxuICAgICAgICAoc3ZnICYmIENPTlRBSU5FUl9FTEVNRU5UU1t0YWdOYW1lXSA9PT0gdHJ1ZSkpIHtcbiAgICAgIGlmICh2bm9kZS5kYXRhLnByb3BzICYmIHZub2RlLmRhdGEucHJvcHMuaW5uZXJIVE1MKSB7XG4gICAgICAgIHRhZy5wdXNoKHZub2RlLmRhdGEucHJvcHMuaW5uZXJIVE1MKVxuICAgICAgfSBlbHNlIGlmICh2bm9kZS50ZXh0KSB7XG4gICAgICAgIHRhZy5wdXNoKHZub2RlLnRleHQpXG4gICAgICB9IGVsc2UgaWYgKHZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgdGFnLnB1c2gocmVuZGVyVG9TdHJpbmcoY2hpbGQpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgdGFnLnB1c2goJzwvJyArIHRhZ05hbWUgKyAnPicpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZy5qb2luKCcnKVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tdG8taHRtbC9pbml0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG52YXIgZm9yT3duID0gcmVxdWlyZSgnbG9kYXNoLmZvcm93bicpXG52YXIgZXNjYXBlID0gcmVxdWlyZSgnbG9kYXNoLmVzY2FwZScpXG5cbi8vIGRhdGEuYXR0cnNcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhdHRyc01vZHVsZSAodm5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fVxuXG4gIGZvck93bihhdHRycywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBhdHRyaWJ1dGVzLnNldChrZXksIGVzY2FwZSh2YWx1ZSkpXG4gIH0pXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tdG8taHRtbC9tb2R1bGVzL2F0dHJpYnV0ZXMuanNcbi8vIG1vZHVsZSBpZCA9IDEzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbnZhciBmb3JPd24gPSByZXF1aXJlKCdsb2Rhc2guZm9yb3duJylcbnZhciByZW1vdmUgPSByZXF1aXJlKCdsb2Rhc2gucmVtb3ZlJylcbnZhciB1bmlxID0gcmVxdWlyZSgnbG9kYXNoLnVuaXEnKVxuXG4vLyBkYXRhLmNsYXNzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2xhc3NNb2R1bGUgKHZub2RlLCBhdHRyaWJ1dGVzKSB7XG4gIHZhciB2YWx1ZXNcbiAgdmFyIF9hZGQgPSBbXVxuICB2YXIgX3JlbW92ZSA9IFtdXG4gIHZhciBjbGFzc2VzID0gdm5vZGUuZGF0YS5jbGFzcyB8fCB7fVxuICB2YXIgZXhpc3RpbmcgPSBhdHRyaWJ1dGVzLmdldCgnY2xhc3MnKVxuICBleGlzdGluZyA9IGV4aXN0aW5nLmxlbmd0aCA+IDAgPyBleGlzdGluZy5zcGxpdCgnICcpIDogW11cblxuICBmb3JPd24oY2xhc3NlcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICAgIF9hZGQucHVzaChrZXkpXG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZW1vdmUucHVzaChrZXkpXG4gICAgfVxuICB9KVxuXG4gIHZhbHVlcyA9IHJlbW92ZSh1bmlxKGV4aXN0aW5nLmNvbmNhdChfYWRkKSksIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBfcmVtb3ZlLmluZGV4T2YodmFsdWUpIDwgMFxuICB9KVxuXG4gIGlmICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgYXR0cmlidXRlcy5zZXQoJ2NsYXNzJywgdmFsdWVzLmpvaW4oJyAnKSlcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tLXRvLWh0bWwvbW9kdWxlcy9jbGFzcy5qc1xuLy8gbW9kdWxlIGlkID0gMTMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNsYXNzOiByZXF1aXJlKCcuL2NsYXNzJyksXG4gIHByb3BzOiByZXF1aXJlKCcuL3Byb3BzJyksXG4gIGF0dHJpYnV0ZXM6IHJlcXVpcmUoJy4vYXR0cmlidXRlcycpLFxuICBzdHlsZTogcmVxdWlyZSgnLi9zdHlsZScpXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tdG8taHRtbC9tb2R1bGVzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG52YXIgZm9yT3duID0gcmVxdWlyZSgnbG9kYXNoLmZvcm93bicpXG52YXIgZXNjYXBlID0gcmVxdWlyZSgnbG9kYXNoLmVzY2FwZScpXG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9lbGVtZW50XG52YXIgb21pdCA9IFtcbiAgJ2F0dHJpYnV0ZXMnLFxuICAnY2hpbGRFbGVtZW50Q291bnQnLFxuICAnY2hpbGRyZW4nLFxuICAnY2xhc3NMaXN0JyxcbiAgJ2NsaWVudEhlaWdodCcsXG4gICdjbGllbnRMZWZ0JyxcbiAgJ2NsaWVudFRvcCcsXG4gICdjbGllbnRXaWR0aCcsXG4gICdjdXJyZW50U3R5bGUnLFxuICAnZmlyc3RFbGVtZW50Q2hpbGQnLFxuICAnaW5uZXJIVE1MJyxcbiAgJ2xhc3RFbGVtZW50Q2hpbGQnLFxuICAnbmV4dEVsZW1lbnRTaWJsaW5nJyxcbiAgJ29uZ290cG9pbnRlcmNhcHR1cmUnLFxuICAnb25sb3N0cG9pbnRlcmNhcHR1cmUnLFxuICAnb253aGVlbCcsXG4gICdvdXRlckhUTUwnLFxuICAncHJldmlvdXNFbGVtZW50U2libGluZycsXG4gICdydW50aW1lU3R5bGUnLFxuICAnc2Nyb2xsSGVpZ2h0JyxcbiAgJ3Njcm9sbExlZnQnLFxuICAnc2Nyb2xsTGVmdE1heCcsXG4gICdzY3JvbGxUb3AnLFxuICAnc2Nyb2xsVG9wTWF4JyxcbiAgJ3Njcm9sbFdpZHRoJyxcbiAgJ3RhYlN0b3AnLFxuICAndGFnTmFtZSdcbl1cblxuLy8gZGF0YS5wcm9wc1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByb3BzTW9kdWxlICh2bm9kZSwgYXR0cmlidXRlcykge1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLnByb3BzIHx8IHt9XG5cbiAgZm9yT3duKHByb3BzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIGlmIChvbWl0LmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ2h0bWxGb3InKSB7XG4gICAgICBrZXkgPSAnZm9yJ1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnY2xhc3NOYW1lJykge1xuICAgICAga2V5ID0gJ2NsYXNzJ1xuICAgIH1cblxuICAgIGF0dHJpYnV0ZXMuc2V0KGtleS50b0xvd2VyQ2FzZSgpLCBlc2NhcGUodmFsdWUpKVxuICB9KVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tLXRvLWh0bWwvbW9kdWxlcy9wcm9wcy5qc1xuLy8gbW9kdWxlIGlkID0gMTMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKVxudmFyIGZvck93biA9IHJlcXVpcmUoJ2xvZGFzaC5mb3Jvd24nKVxudmFyIGVzY2FwZSA9IHJlcXVpcmUoJ2xvZGFzaC5lc2NhcGUnKVxudmFyIGtlYmFiQ2FzZSA9IHJlcXVpcmUoJ2xvZGFzaC5rZWJhYmNhc2UnKVxuXG4vLyBkYXRhLnN0eWxlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3R5bGVNb2R1bGUgKHZub2RlLCBhdHRyaWJ1dGVzKSB7XG4gIHZhciB2YWx1ZXMgPSBbXVxuICB2YXIgc3R5bGUgPSB2bm9kZS5kYXRhLnN0eWxlIHx8IHt9XG5cbiAgLy8gbWVyZ2UgaW4gYGRlbGF5ZWRgIHByb3BlcnRpZXNcbiAgaWYgKHN0eWxlLmRlbGF5ZWQpIHtcbiAgICBhc3NpZ24oc3R5bGUsIHN0eWxlLmRlbGF5ZWQpXG4gIH1cblxuICBmb3JPd24oc3R5bGUsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgLy8gb21pdCBob29rIG9iamVjdHNcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB2YWx1ZXMucHVzaChrZWJhYkNhc2Uoa2V5KSArICc6ICcgKyBlc2NhcGUodmFsdWUpKVxuICAgIH1cbiAgfSlcblxuICBpZiAodmFsdWVzLmxlbmd0aCkge1xuICAgIGF0dHJpYnV0ZXMuc2V0KCdzdHlsZScsIHZhbHVlcy5qb2luKCc7ICcpKVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tdG8taHRtbC9tb2R1bGVzL3N0eWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTmFtZXNwYWNlVVJJcyA9IHtcbiAgICBcInhsaW5rXCI6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiXG59O1xudmFyIGJvb2xlYW5BdHRycyA9IFtcImFsbG93ZnVsbHNjcmVlblwiLCBcImFzeW5jXCIsIFwiYXV0b2ZvY3VzXCIsIFwiYXV0b3BsYXlcIiwgXCJjaGVja2VkXCIsIFwiY29tcGFjdFwiLCBcImNvbnRyb2xzXCIsIFwiZGVjbGFyZVwiLFxuICAgIFwiZGVmYXVsdFwiLCBcImRlZmF1bHRjaGVja2VkXCIsIFwiZGVmYXVsdG11dGVkXCIsIFwiZGVmYXVsdHNlbGVjdGVkXCIsIFwiZGVmZXJcIiwgXCJkaXNhYmxlZFwiLCBcImRyYWdnYWJsZVwiLFxuICAgIFwiZW5hYmxlZFwiLCBcImZvcm1ub3ZhbGlkYXRlXCIsIFwiaGlkZGVuXCIsIFwiaW5kZXRlcm1pbmF0ZVwiLCBcImluZXJ0XCIsIFwiaXNtYXBcIiwgXCJpdGVtc2NvcGVcIiwgXCJsb29wXCIsIFwibXVsdGlwbGVcIixcbiAgICBcIm11dGVkXCIsIFwibm9ocmVmXCIsIFwibm9yZXNpemVcIiwgXCJub3NoYWRlXCIsIFwibm92YWxpZGF0ZVwiLCBcIm5vd3JhcFwiLCBcIm9wZW5cIiwgXCJwYXVzZW9uZXhpdFwiLCBcInJlYWRvbmx5XCIsXG4gICAgXCJyZXF1aXJlZFwiLCBcInJldmVyc2VkXCIsIFwic2NvcGVkXCIsIFwic2VhbWxlc3NcIiwgXCJzZWxlY3RlZFwiLCBcInNvcnRhYmxlXCIsIFwic3BlbGxjaGVja1wiLCBcInRyYW5zbGF0ZVwiLFxuICAgIFwidHJ1ZXNwZWVkXCIsIFwidHlwZW11c3RtYXRjaFwiLCBcInZpc2libGVcIl07XG52YXIgYm9vbGVhbkF0dHJzRGljdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mb3IgKHZhciBpID0gMCwgbGVuID0gYm9vbGVhbkF0dHJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYm9vbGVhbkF0dHJzRGljdFtib29sZWFuQXR0cnNbaV1dID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBrZXksIGN1ciwgb2xkLCBlbG0gPSB2bm9kZS5lbG0sIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycywgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzLCBuYW1lc3BhY2VTcGxpdDtcbiAgICBpZiAoIW9sZEF0dHJzICYmICFhdHRycylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGRBdHRycyA9PT0gYXR0cnMpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGRBdHRycyA9IG9sZEF0dHJzIHx8IHt9O1xuICAgIGF0dHJzID0gYXR0cnMgfHwge307XG4gICAgLy8gdXBkYXRlIG1vZGlmaWVkIGF0dHJpYnV0ZXMsIGFkZCBuZXcgYXR0cmlidXRlc1xuICAgIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgICAgICAgaWYgKCFjdXIgJiYgYm9vbGVhbkF0dHJzRGljdFtrZXldKVxuICAgICAgICAgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5hbWVzcGFjZVNwbGl0ID0ga2V5LnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZXNwYWNlU3BsaXQubGVuZ3RoID4gMSAmJiBOYW1lc3BhY2VVUklzLmhhc093blByb3BlcnR5KG5hbWVzcGFjZVNwbGl0WzBdKSlcbiAgICAgICAgICAgICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZU5TKE5hbWVzcGFjZVVSSXNbbmFtZXNwYWNlU3BsaXRbMF1dLCBrZXksIGN1cik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlKGtleSwgY3VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvL3JlbW92ZSByZW1vdmVkIGF0dHJpYnV0ZXNcbiAgICAvLyB1c2UgYGluYCBvcGVyYXRvciBzaW5jZSB0aGUgcHJldmlvdXMgYGZvcmAgaXRlcmF0aW9uIHVzZXMgaXQgKC5pLmUuIGFkZCBldmVuIGF0dHJpYnV0ZXMgd2l0aCB1bmRlZmluZWQgdmFsdWUpXG4gICAgLy8gdGhlIG90aGVyIG9wdGlvbiBpcyB0byByZW1vdmUgYWxsIGF0dHJpYnV0ZXMgd2l0aCB2YWx1ZSA9PSB1bmRlZmluZWRcbiAgICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgICAgICBpZiAoIShrZXkgaW4gYXR0cnMpKSB7XG4gICAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmF0dHJpYnV0ZXNNb2R1bGUgPSB7IGNyZWF0ZTogdXBkYXRlQXR0cnMsIHVwZGF0ZTogdXBkYXRlQXR0cnMgfTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuYXR0cmlidXRlc01vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF0dHJpYnV0ZXMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tL21vZHVsZXMvYXR0cmlidXRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gdXBkYXRlQ2xhc3Mob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIGN1ciwgbmFtZSwgZWxtID0gdm5vZGUuZWxtLCBvbGRDbGFzcyA9IG9sZFZub2RlLmRhdGEuY2xhc3MsIGtsYXNzID0gdm5vZGUuZGF0YS5jbGFzcztcbiAgICBpZiAoIW9sZENsYXNzICYmICFrbGFzcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGRDbGFzcyA9PT0ga2xhc3MpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGRDbGFzcyA9IG9sZENsYXNzIHx8IHt9O1xuICAgIGtsYXNzID0ga2xhc3MgfHwge307XG4gICAgZm9yIChuYW1lIGluIG9sZENsYXNzKSB7XG4gICAgICAgIGlmICgha2xhc3NbbmFtZV0pIHtcbiAgICAgICAgICAgIGVsbS5jbGFzc0xpc3QucmVtb3ZlKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAobmFtZSBpbiBrbGFzcykge1xuICAgICAgICBjdXIgPSBrbGFzc1tuYW1lXTtcbiAgICAgICAgaWYgKGN1ciAhPT0gb2xkQ2xhc3NbbmFtZV0pIHtcbiAgICAgICAgICAgIGVsbS5jbGFzc0xpc3RbY3VyID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmNsYXNzTW9kdWxlID0geyBjcmVhdGU6IHVwZGF0ZUNsYXNzLCB1cGRhdGU6IHVwZGF0ZUNsYXNzIH07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmNsYXNzTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xhc3MuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tL21vZHVsZXMvY2xhc3MuanNcbi8vIG1vZHVsZSBpZCA9IDEzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBDQVBTX1JFR0VYID0gL1tBLVpdL2c7XG5mdW5jdGlvbiB1cGRhdGVEYXRhc2V0KG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0sIG9sZERhdGFzZXQgPSBvbGRWbm9kZS5kYXRhLmRhdGFzZXQsIGRhdGFzZXQgPSB2bm9kZS5kYXRhLmRhdGFzZXQsIGtleTtcbiAgICBpZiAoIW9sZERhdGFzZXQgJiYgIWRhdGFzZXQpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAob2xkRGF0YXNldCA9PT0gZGF0YXNldClcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZERhdGFzZXQgPSBvbGREYXRhc2V0IHx8IHt9O1xuICAgIGRhdGFzZXQgPSBkYXRhc2V0IHx8IHt9O1xuICAgIHZhciBkID0gZWxtLmRhdGFzZXQ7XG4gICAgZm9yIChrZXkgaW4gb2xkRGF0YXNldCkge1xuICAgICAgICBpZiAoIWRhdGFzZXRba2V5XSkge1xuICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS0nICsga2V5LnJlcGxhY2UoQ0FQU19SRUdFWCwgJy0kJicpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoa2V5IGluIGRhdGFzZXQpIHtcbiAgICAgICAgaWYgKG9sZERhdGFzZXRba2V5XSAhPT0gZGF0YXNldFtrZXldKSB7XG4gICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICAgIGRba2V5XSA9IGRhdGFzZXRba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGtleS5yZXBsYWNlKENBUFNfUkVHRVgsICctJCYnKS50b0xvd2VyQ2FzZSgpLCBkYXRhc2V0W2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kYXRhc2V0TW9kdWxlID0geyBjcmVhdGU6IHVwZGF0ZURhdGFzZXQsIHVwZGF0ZTogdXBkYXRlRGF0YXNldCB9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kYXRhc2V0TW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YXNldC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vbW9kdWxlcy9kYXRhc2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiB1cGRhdGVQcm9wcyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIga2V5LCBjdXIsIG9sZCwgZWxtID0gdm5vZGUuZWxtLCBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEucHJvcHMsIHByb3BzID0gdm5vZGUuZGF0YS5wcm9wcztcbiAgICBpZiAoIW9sZFByb3BzICYmICFwcm9wcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGRQcm9wcyA9PT0gcHJvcHMpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGRQcm9wcyA9IG9sZFByb3BzIHx8IHt9O1xuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICAgICAgaWYgKCFwcm9wc1trZXldKSB7XG4gICAgICAgICAgICBkZWxldGUgZWxtW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAgICAgb2xkID0gb2xkUHJvcHNba2V5XTtcbiAgICAgICAgaWYgKG9sZCAhPT0gY3VyICYmIChrZXkgIT09ICd2YWx1ZScgfHwgZWxtW2tleV0gIT09IGN1cikpIHtcbiAgICAgICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wcm9wc01vZHVsZSA9IHsgY3JlYXRlOiB1cGRhdGVQcm9wcywgdXBkYXRlOiB1cGRhdGVQcm9wcyB9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5wcm9wc01vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS9tb2R1bGVzL3Byb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcmFmID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHx8IHNldFRpbWVvdXQ7XG52YXIgbmV4dEZyYW1lID0gZnVuY3Rpb24gKGZuKSB7IHJhZihmdW5jdGlvbiAoKSB7IHJhZihmbik7IH0pOyB9O1xuZnVuY3Rpb24gc2V0TmV4dEZyYW1lKG9iaiwgcHJvcCwgdmFsKSB7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHsgb2JqW3Byb3BdID0gdmFsOyB9KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBjdXIsIG5hbWUsIGVsbSA9IHZub2RlLmVsbSwgb2xkU3R5bGUgPSBvbGRWbm9kZS5kYXRhLnN0eWxlLCBzdHlsZSA9IHZub2RlLmRhdGEuc3R5bGU7XG4gICAgaWYgKCFvbGRTdHlsZSAmJiAhc3R5bGUpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAob2xkU3R5bGUgPT09IHN0eWxlKVxuICAgICAgICByZXR1cm47XG4gICAgb2xkU3R5bGUgPSBvbGRTdHlsZSB8fCB7fTtcbiAgICBzdHlsZSA9IHN0eWxlIHx8IHt9O1xuICAgIHZhciBvbGRIYXNEZWwgPSAnZGVsYXllZCcgaW4gb2xkU3R5bGU7XG4gICAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgICAgIGlmICghc3R5bGVbbmFtZV0pIHtcbiAgICAgICAgICAgIGlmIChuYW1lWzBdID09PSAnLScgJiYgbmFtZVsxXSA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgZWxtLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxtLnN0eWxlW25hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChuYW1lIGluIHN0eWxlKSB7XG4gICAgICAgIGN1ciA9IHN0eWxlW25hbWVdO1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2RlbGF5ZWQnKSB7XG4gICAgICAgICAgICBmb3IgKG5hbWUgaW4gc3R5bGUuZGVsYXllZCkge1xuICAgICAgICAgICAgICAgIGN1ciA9IHN0eWxlLmRlbGF5ZWRbbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKCFvbGRIYXNEZWwgfHwgY3VyICE9PSBvbGRTdHlsZS5kZWxheWVkW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldE5leHRGcmFtZShlbG0uc3R5bGUsIG5hbWUsIGN1cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgIT09ICdyZW1vdmUnICYmIGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgICAgICAgIGlmIChuYW1lWzBdID09PSAnLScgJiYgbmFtZVsxXSA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgZWxtLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGN1cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBjdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhcHBseURlc3Ryb3lTdHlsZSh2bm9kZSkge1xuICAgIHZhciBzdHlsZSwgbmFtZSwgZWxtID0gdm5vZGUuZWxtLCBzID0gdm5vZGUuZGF0YS5zdHlsZTtcbiAgICBpZiAoIXMgfHwgIShzdHlsZSA9IHMuZGVzdHJveSkpXG4gICAgICAgIHJldHVybjtcbiAgICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgZWxtLnN0eWxlW25hbWVdID0gc3R5bGVbbmFtZV07XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlSZW1vdmVTdHlsZSh2bm9kZSwgcm0pIHtcbiAgICB2YXIgcyA9IHZub2RlLmRhdGEuc3R5bGU7XG4gICAgaWYgKCFzIHx8ICFzLnJlbW92ZSkge1xuICAgICAgICBybSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIGkgPSAwLCBjb21wU3R5bGUsIHN0eWxlID0gcy5yZW1vdmUsIGFtb3VudCA9IDAsIGFwcGxpZWQgPSBbXTtcbiAgICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgYXBwbGllZC5wdXNoKG5hbWUpO1xuICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBzdHlsZVtuYW1lXTtcbiAgICB9XG4gICAgY29tcFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbG0pO1xuICAgIHZhciBwcm9wcyA9IGNvbXBTdHlsZVsndHJhbnNpdGlvbi1wcm9wZXJ0eSddLnNwbGl0KCcsICcpO1xuICAgIGZvciAoOyBpIDwgcHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFwcGxpZWQuaW5kZXhPZihwcm9wc1tpXSkgIT09IC0xKVxuICAgICAgICAgICAgYW1vdW50Kys7XG4gICAgfVxuICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IGVsbSlcbiAgICAgICAgICAgIC0tYW1vdW50O1xuICAgICAgICBpZiAoYW1vdW50ID09PSAwKVxuICAgICAgICAgICAgcm0oKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3R5bGVNb2R1bGUgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgICB1cGRhdGU6IHVwZGF0ZVN0eWxlLFxuICAgIGRlc3Ryb3k6IGFwcGx5RGVzdHJveVN0eWxlLFxuICAgIHJlbW92ZTogYXBwbHlSZW1vdmVTdHlsZVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vbW9kdWxlcy9zdHlsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHZub2RlXzEgPSByZXF1aXJlKFwiLi92bm9kZVwiKTtcbnZhciBpcyA9IHJlcXVpcmUoXCIuL2lzXCIpO1xudmFyIGh0bWxkb21hcGlfMSA9IHJlcXVpcmUoXCIuL2h0bWxkb21hcGlcIik7XG5mdW5jdGlvbiBpc1VuZGVmKHMpIHsgcmV0dXJuIHMgPT09IHVuZGVmaW5lZDsgfVxuZnVuY3Rpb24gaXNEZWYocykgeyByZXR1cm4gcyAhPT0gdW5kZWZpbmVkOyB9XG52YXIgZW1wdHlOb2RlID0gdm5vZGVfMS5kZWZhdWx0KCcnLCB7fSwgW10sIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbmZ1bmN0aW9uIHNhbWVWbm9kZSh2bm9kZTEsIHZub2RlMikge1xuICAgIHJldHVybiB2bm9kZTEua2V5ID09PSB2bm9kZTIua2V5ICYmIHZub2RlMS5zZWwgPT09IHZub2RlMi5zZWw7XG59XG5mdW5jdGlvbiBpc1Zub2RlKHZub2RlKSB7XG4gICAgcmV0dXJuIHZub2RlLnNlbCAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHgoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgICB2YXIgaSwgbWFwID0ge30sIGtleSwgY2g7XG4gICAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICAgICAgY2ggPSBjaGlsZHJlbltpXTtcbiAgICAgICAgaWYgKGNoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGtleSA9IGNoLmtleTtcbiAgICAgICAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBtYXBba2V5XSA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveScsICdwcmUnLCAncG9zdCddO1xudmFyIGhfMSA9IHJlcXVpcmUoXCIuL2hcIik7XG5leHBvcnRzLmggPSBoXzEuaDtcbnZhciB0aHVua18xID0gcmVxdWlyZShcIi4vdGh1bmtcIik7XG5leHBvcnRzLnRodW5rID0gdGh1bmtfMS50aHVuaztcbmZ1bmN0aW9uIGluaXQobW9kdWxlcywgZG9tQXBpKSB7XG4gICAgdmFyIGksIGosIGNicyA9IHt9O1xuICAgIHZhciBhcGkgPSBkb21BcGkgIT09IHVuZGVmaW5lZCA/IGRvbUFwaSA6IGh0bWxkb21hcGlfMS5kZWZhdWx0O1xuICAgIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIgaG9vayA9IG1vZHVsZXNbal1baG9va3NbaV1dO1xuICAgICAgICAgICAgaWYgKGhvb2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNic1tob29rc1tpXV0ucHVzaChob29rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBlbXB0eU5vZGVBdChlbG0pIHtcbiAgICAgICAgdmFyIGlkID0gZWxtLmlkID8gJyMnICsgZWxtLmlkIDogJyc7XG4gICAgICAgIHZhciBjID0gZWxtLmNsYXNzTmFtZSA/ICcuJyArIGVsbS5jbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCcuJykgOiAnJztcbiAgICAgICAgcmV0dXJuIHZub2RlXzEuZGVmYXVsdChhcGkudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCkgKyBpZCArIGMsIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVSbUNiKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJtQ2IoKSB7XG4gICAgICAgICAgICBpZiAoLS1saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBhcGkucGFyZW50Tm9kZShjaGlsZEVsbSk7XG4gICAgICAgICAgICAgICAgYXBpLnJlbW92ZUNoaWxkKHBhcmVudF8xLCBjaGlsZEVsbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgICAgIHZhciBpLCBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgICAgICAgICAgaSh2bm9kZSk7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW4sIHNlbCA9IHZub2RlLnNlbDtcbiAgICAgICAgaWYgKHNlbCA9PT0gJyEnKSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgICAgICAgICAgIHZub2RlLnRleHQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZub2RlLmVsbSA9IGFwaS5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBQYXJzZSBzZWxlY3RvclxuICAgICAgICAgICAgdmFyIGhhc2hJZHggPSBzZWwuaW5kZXhPZignIycpO1xuICAgICAgICAgICAgdmFyIGRvdElkeCA9IHNlbC5pbmRleE9mKCcuJywgaGFzaElkeCk7XG4gICAgICAgICAgICB2YXIgaGFzaCA9IGhhc2hJZHggPiAwID8gaGFzaElkeCA6IHNlbC5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZG90ID0gZG90SWR4ID4gMCA/IGRvdElkeCA6IHNlbC5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdGFnID0gaGFzaElkeCAhPT0gLTEgfHwgZG90SWR4ICE9PSAtMSA/IHNlbC5zbGljZSgwLCBNYXRoLm1pbihoYXNoLCBkb3QpKSA6IHNlbDtcbiAgICAgICAgICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ucykgPyBhcGkuY3JlYXRlRWxlbWVudE5TKGksIHRhZylcbiAgICAgICAgICAgICAgICA6IGFwaS5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgICAgICAgICBpZiAoaGFzaCA8IGRvdClcbiAgICAgICAgICAgICAgICBlbG0uaWQgPSBzZWwuc2xpY2UoaGFzaCArIDEsIGRvdCk7XG4gICAgICAgICAgICBpZiAoZG90SWR4ID4gMClcbiAgICAgICAgICAgICAgICBlbG0uY2xhc3NOYW1lID0gc2VsLnNsaWNlKGRvdCArIDEpLnJlcGxhY2UoL1xcLi9nLCAnICcpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICAgICAgICAgIGlmIChpcy5hcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuYXBwZW5kQ2hpbGQoZWxtLCBjcmVhdGVFbG0oY2gsIGluc2VydGVkVm5vZGVRdWV1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXMucHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgYXBpLmFwcGVuZENoaWxkKGVsbSwgYXBpLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgICAgICAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaS5jcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgIGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChpLmluc2VydClcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdm5vZGUuZWxtID0gYXBpLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2bm9kZS5lbG07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFZub2RlcyhwYXJlbnRFbG0sIGJlZm9yZSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgICAgICAgIGlmIChjaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXBpLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIGNyZWF0ZUVsbShjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSwgYmVmb3JlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayh2bm9kZSkge1xuICAgICAgICB2YXIgaSwgaiwgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSlcbiAgICAgICAgICAgICAgICBpKHZub2RlKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXSh2bm9kZSk7XG4gICAgICAgICAgICBpZiAodm5vZGUuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBpID0gdm5vZGUuY2hpbGRyZW5bal07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9IG51bGwgJiYgdHlwZW9mIGkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgICAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICAgICAgICB2YXIgaV8xID0gdm9pZCAwLCBsaXN0ZW5lcnMgPSB2b2lkIDAsIHJtID0gdm9pZCAwLCBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICAgICAgICBpZiAoY2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0RlZihjaC5zZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICAgICAgICBybSA9IGNyZWF0ZVJtQ2IoY2guZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGlfMSA9IDA7IGlfMSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2lfMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNicy5yZW1vdmVbaV8xXShjaCwgcm0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEZWYoaV8xID0gY2guZGF0YSkgJiYgaXNEZWYoaV8xID0gaV8xLmhvb2spICYmIGlzRGVmKGlfMSA9IGlfMS5yZW1vdmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpXzEoY2gsIHJtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJtKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFwaS5yZW1vdmVDaGlsZChwYXJlbnRFbG0sIGNoLmVsbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgICAgdmFyIG9sZFN0YXJ0SWR4ID0gMCwgbmV3U3RhcnRJZHggPSAwO1xuICAgICAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICAgICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICAgICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgICAgIHZhciBvbGRLZXlUb0lkeDtcbiAgICAgICAgdmFyIGlkeEluT2xkO1xuICAgICAgICB2YXIgZWxtVG9Nb3ZlO1xuICAgICAgICB2YXIgYmVmb3JlO1xuICAgICAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgICAgICAgaWYgKG9sZFN0YXJ0Vm5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgbWlnaHQgaGF2ZSBiZWVuIG1vdmVkIGxlZnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9sZEVuZFZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld1N0YXJ0Vm5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld0VuZFZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgYXBpLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAob2xkS2V5VG9JZHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWR4SW5PbGQgPSBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV07XG4gICAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbG1Ub01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbG1Ub01vdmUuc2VsICE9PSBuZXdTdGFydFZub2RlLnNlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRjaFZub2RlKGVsbVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBlbG1Ub01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgICAgICAgIGJlZm9yZSA9IG5ld0NoW25ld0VuZElkeCArIDFdID09IG51bGwgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgYmVmb3JlLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgICAgdmFyIGksIGhvb2s7XG4gICAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YSkgJiYgaXNEZWYoaG9vayA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGhvb2sucHJlcGF0Y2gpKSB7XG4gICAgICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodm5vZGUuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgICAgICAgICBpID0gdm5vZGUuZGF0YS5ob29rO1xuICAgICAgICAgICAgaWYgKGlzRGVmKGkpICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpXG4gICAgICAgICAgICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICAgICAgICAgIGlmIChvbGRDaCAhPT0gY2gpXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKVxuICAgICAgICAgICAgICAgICAgICBhcGkuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICAgICAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICAgICAgICAgIGFwaS5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICAgICAgICBhcGkuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYoaG9vaykgJiYgaXNEZWYoaSA9IGhvb2sucG9zdHBhdGNoKSkge1xuICAgICAgICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwYXRjaChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICAgICAgdmFyIGksIGVsbSwgcGFyZW50O1xuICAgICAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucHJlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgY2JzLnByZVtpXSgpO1xuICAgICAgICBpZiAoIWlzVm5vZGUob2xkVm5vZGUpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICAgICAgcGFyZW50ID0gYXBpLnBhcmVudE5vZGUoZWxtKTtcbiAgICAgICAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhcGkuaW5zZXJ0QmVmb3JlKHBhcmVudCwgdm5vZGUuZWxtLCBhcGkubmV4dFNpYmxpbmcoZWxtKSk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudCwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGluc2VydGVkVm5vZGVRdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQoaW5zZXJ0ZWRWbm9kZVF1ZXVlW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnBvc3QubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBjYnMucG9zdFtpXSgpO1xuICAgICAgICByZXR1cm4gdm5vZGU7XG4gICAgfTtcbn1cbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbmFiYmRvbS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vc25hYmJkb20uanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB2bm9kZV8xID0gcmVxdWlyZShcIi4vdm5vZGVcIik7XG52YXIgaHRtbGRvbWFwaV8xID0gcmVxdWlyZShcIi4vaHRtbGRvbWFwaVwiKTtcbmZ1bmN0aW9uIHRvVk5vZGUobm9kZSwgZG9tQXBpKSB7XG4gICAgdmFyIGFwaSA9IGRvbUFwaSAhPT0gdW5kZWZpbmVkID8gZG9tQXBpIDogaHRtbGRvbWFwaV8xLmRlZmF1bHQ7XG4gICAgdmFyIHRleHQ7XG4gICAgaWYgKGFwaS5pc0VsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgdmFyIGlkID0gbm9kZS5pZCA/ICcjJyArIG5vZGUuaWQgOiAnJztcbiAgICAgICAgdmFyIGNuID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgICAgIHZhciBjID0gY24gPyAnLicgKyBjbi5zcGxpdCgnICcpLmpvaW4oJy4nKSA6ICcnO1xuICAgICAgICB2YXIgc2VsID0gYXBpLnRhZ05hbWUobm9kZSkudG9Mb3dlckNhc2UoKSArIGlkICsgYztcbiAgICAgICAgdmFyIGF0dHJzID0ge307XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgICB2YXIgbmFtZV8xO1xuICAgICAgICB2YXIgaSA9IHZvaWQgMCwgbiA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGVsbUF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgZWxtQ2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXM7XG4gICAgICAgIGZvciAoaSA9IDAsIG4gPSBlbG1BdHRycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIG5hbWVfMSA9IGVsbUF0dHJzW2ldLm5vZGVOYW1lO1xuICAgICAgICAgICAgaWYgKG5hbWVfMSAhPT0gJ2lkJyAmJiBuYW1lXzEgIT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuYW1lXzFdID0gZWxtQXR0cnNbaV0ubm9kZVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDAsIG4gPSBlbG1DaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godG9WTm9kZShlbG1DaGlsZHJlbltpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2bm9kZV8xLmRlZmF1bHQoc2VsLCB7IGF0dHJzOiBhdHRycyB9LCBjaGlsZHJlbiwgdW5kZWZpbmVkLCBub2RlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXBpLmlzVGV4dChub2RlKSkge1xuICAgICAgICB0ZXh0ID0gYXBpLmdldFRleHRDb250ZW50KG5vZGUpO1xuICAgICAgICByZXR1cm4gdm5vZGVfMS5kZWZhdWx0KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRleHQsIG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcGkuaXNDb21tZW50KG5vZGUpKSB7XG4gICAgICAgIHRleHQgPSBhcGkuZ2V0VGV4dENvbnRlbnQobm9kZSk7XG4gICAgICAgIHJldHVybiB2bm9kZV8xLmRlZmF1bHQoJyEnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGV4dCwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB2bm9kZV8xLmRlZmF1bHQoJycsIHt9LCBbXSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMudG9WTm9kZSA9IHRvVk5vZGU7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b1ZOb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG92bm9kZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vdG92bm9kZS5qc1xuLy8gbW9kdWxlIGlkID0gMTQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IGlzUGF0dGVybiwgaXNSb3V0ZURlZmluaXRpb24sIHRyYXZlcnNlUm91dGVzLCBpc05vdE51bGwsIHNwbGl0UGF0aCwgaXNQYXJhbSwgZXh0cmFjdFBhcnRpYWwsIHVucHJlZml4ZWQsIH0gZnJvbSAnLi91dGlsJztcbmZ1bmN0aW9uIHN3aXRjaFBhdGhJbnB1dEd1YXJkKHBhdGgsIHJvdXRlcykge1xuICAgIGlmICghaXNQYXR0ZXJuKHBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpcnN0IHBhcmFtZXRlciB0byBzd2l0Y2hQYXRoIG11c3QgYmUgYSByb3V0ZSBwYXRoLlwiKTtcbiAgICB9XG4gICAgaWYgKCFpc1JvdXRlRGVmaW5pdGlvbihyb3V0ZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBwYXJhbWV0ZXIgdG8gc3dpdGNoUGF0aCBtdXN0IGJlIGFuIG9iamVjdCBcIiArXG4gICAgICAgICAgICBcImNvbnRhaW5pbmcgcm91dGUgcGF0dGVybnMuXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUGF0aChzb3VyY2VQYXRoLCBtYXRjaGVkUGF0aCkge1xuICAgIHZhciBzb3VyY2VQYXJ0cyA9IHNwbGl0UGF0aChzb3VyY2VQYXRoKTtcbiAgICB2YXIgbWF0Y2hlZFBhcnRzID0gc3BsaXRQYXRoKG1hdGNoZWRQYXRoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZWRQYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAobWF0Y2hlZFBhcnRzW2ldICE9PSBzb3VyY2VQYXJ0c1tpXSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiL1wiICsgZXh0cmFjdFBhcnRpYWwoc291cmNlUGF0aCwgbWF0Y2hlZFBhdGgpO1xufVxuZnVuY3Rpb24gYmV0dGVyTWF0Y2goY2FuZGlkYXRlLCByZWZlcmVuY2UpIHtcbiAgICBpZiAoIWlzTm90TnVsbChjYW5kaWRhdGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpc05vdE51bGwocmVmZXJlbmNlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF2YWxpZGF0ZVBhdGgoY2FuZGlkYXRlLCByZWZlcmVuY2UpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbmRpZGF0ZS5sZW5ndGggPj0gcmVmZXJlbmNlLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIG1hdGNoZXNXaXRoUGFyYW1zKHNvdXJjZVBhdGgsIHBhdHRlcm4pIHtcbiAgICB2YXIgc291cmNlUGFydHMgPSBzcGxpdFBhdGgoc291cmNlUGF0aCk7XG4gICAgdmFyIHBhdHRlcm5QYXJ0cyA9IHNwbGl0UGF0aChwYXR0ZXJuKTtcbiAgICB2YXIgcGFyYW1zID0gcGF0dGVyblBhcnRzXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHBhcnQsIGkpIHsgcmV0dXJuIGlzUGFyYW0ocGFydCkgPyBzb3VyY2VQYXJ0c1tpXSA6IG51bGw7IH0pXG4gICAgICAgIC5maWx0ZXIoaXNOb3ROdWxsKTtcbiAgICB2YXIgbWF0Y2hlZCA9IHBhdHRlcm5QYXJ0c1xuICAgICAgICAuZXZlcnkoZnVuY3Rpb24gKHBhcnQsIGkpIHsgcmV0dXJuIGlzUGFyYW0ocGFydCkgfHwgcGFydCA9PT0gc291cmNlUGFydHNbaV07IH0pO1xuICAgIHJldHVybiBtYXRjaGVkID8gcGFyYW1zIDogW107XG59XG5mdW5jdGlvbiBnZXRQYXJhbUZuVmFsdWUocGFyYW1GbiwgcGFyYW1zKSB7XG4gICAgdmFyIF9wYXJhbUZuID0gaXNSb3V0ZURlZmluaXRpb24ocGFyYW1GbikgPyBwYXJhbUZuW1wiL1wiXSA6IHBhcmFtRm47XG4gICAgcmV0dXJuIHR5cGVvZiBfcGFyYW1GbiA9PT0gXCJmdW5jdGlvblwiID8gX3BhcmFtRm4uYXBwbHkodm9pZCAwLCBwYXJhbXMpIDogX3BhcmFtRm47XG59XG5mdW5jdGlvbiB2YWxpZGF0ZShfYSkge1xuICAgIHZhciBzb3VyY2VQYXRoID0gX2Euc291cmNlUGF0aCwgbWF0Y2hlZFBhdGggPSBfYS5tYXRjaGVkUGF0aCwgbWF0Y2hlZFZhbHVlID0gX2EubWF0Y2hlZFZhbHVlLCByb3V0ZXMgPSBfYS5yb3V0ZXM7XG4gICAgdmFyIHBhdGggPSBtYXRjaGVkUGF0aCA/IHZhbGlkYXRlUGF0aChzb3VyY2VQYXRoLCBtYXRjaGVkUGF0aCkgOiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IG1hdGNoZWRWYWx1ZTtcbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgcGF0aCA9IHJvdXRlc1tcIipcIl0gPyBzb3VyY2VQYXRoIDogbnVsbDtcbiAgICAgICAgdmFsdWUgPSBwYXRoID8gcm91dGVzW1wiKlwiXSA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7IHBhdGg6IHBhdGgsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3dpdGNoUGF0aChzb3VyY2VQYXRoLCByb3V0ZXMpIHtcbiAgICBzd2l0Y2hQYXRoSW5wdXRHdWFyZChzb3VyY2VQYXRoLCByb3V0ZXMpO1xuICAgIHZhciBtYXRjaGVkUGF0aCA9IG51bGw7XG4gICAgdmFyIG1hdGNoZWRWYWx1ZSA9IG51bGw7XG4gICAgdHJhdmVyc2VSb3V0ZXMocm91dGVzLCBmdW5jdGlvbiBtYXRjaFBhdHRlcm4ocGF0dGVybikge1xuICAgICAgICBpZiAoc291cmNlUGF0aC5zZWFyY2gocGF0dGVybikgPT09IDAgJiYgYmV0dGVyTWF0Y2gocGF0dGVybiwgbWF0Y2hlZFBhdGgpKSB7XG4gICAgICAgICAgICBtYXRjaGVkUGF0aCA9IHBhdHRlcm47XG4gICAgICAgICAgICBtYXRjaGVkVmFsdWUgPSByb3V0ZXNbcGF0dGVybl07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmFtcyA9IG1hdGNoZXNXaXRoUGFyYW1zKHNvdXJjZVBhdGgsIHBhdHRlcm4pLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPiAwICYmIGJldHRlck1hdGNoKHNvdXJjZVBhdGgsIG1hdGNoZWRQYXRoKSkge1xuICAgICAgICAgICAgbWF0Y2hlZFBhdGggPSBleHRyYWN0UGFydGlhbChzb3VyY2VQYXRoLCBwYXR0ZXJuKTtcbiAgICAgICAgICAgIG1hdGNoZWRWYWx1ZSA9IGdldFBhcmFtRm5WYWx1ZShyb3V0ZXNbcGF0dGVybl0sIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUm91dGVEZWZpbml0aW9uKHJvdXRlc1twYXR0ZXJuXSkgJiYgcGFyYW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZVBhdGggIT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gc3dpdGNoUGF0aCh1bnByZWZpeGVkKHNvdXJjZVBhdGgsIHBhdHRlcm4pIHx8IFwiL1wiLCByb3V0ZXNbcGF0dGVybl0pO1xuICAgICAgICAgICAgICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0dGVybiArIGNoaWxkLnBhdGg7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLnBhdGggIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgYmV0dGVyTWF0Y2gobmVzdGVkUGF0aCwgbWF0Y2hlZFBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRQYXRoID0gbmVzdGVkUGF0aDtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFZhbHVlID0gY2hpbGQudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbGlkYXRlKHsgc291cmNlUGF0aDogc291cmNlUGF0aCwgbWF0Y2hlZFBhdGg6IG1hdGNoZWRQYXRoLCBtYXRjaGVkVmFsdWU6IG1hdGNoZWRWYWx1ZSwgcm91dGVzOiByb3V0ZXMgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3dpdGNoLXBhdGgvbGliL2VzMjAxNS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBmdW5jdGlvbiBpc1BhdHRlcm4oY2FuZGlkYXRlKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZS5jaGFyQXQoMCkgPT09IFwiL1wiIHx8IGNhbmRpZGF0ZSA9PT0gXCIqXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSb3V0ZURlZmluaXRpb24oY2FuZGlkYXRlKSB7XG4gICAgcmV0dXJuICFjYW5kaWRhdGUgfHwgdHlwZW9mIGNhbmRpZGF0ZSAhPT0gXCJvYmplY3RcIiA/XG4gICAgICAgIGZhbHNlIDogaXNQYXR0ZXJuKE9iamVjdC5rZXlzKGNhbmRpZGF0ZSlbMF0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlUm91dGVzKHJvdXRlcywgY2FsbGJhY2spIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKHBhdHRlcm4gPT09IFwiKlwiKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhbGxiYWNrKHBhdHRlcm4pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc05vdE51bGwoY2FuZGlkYXRlKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFBhdGgocGF0aCkge1xuICAgIHJldHVybiBwYXRoLnNwbGl0KFwiL1wiKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuICEhczsgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQYXJhbShjYW5kaWRhdGUpIHtcbiAgICByZXR1cm4gY2FuZGlkYXRlLm1hdGNoKC86XFx3Ky8pICE9PSBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJ0aWFsKHNvdXJjZVBhdGgsIHBhdHRlcm4pIHtcbiAgICB2YXIgcGF0dGVyblBhcnRzID0gc3BsaXRQYXRoKHBhdHRlcm4pO1xuICAgIHZhciBzb3VyY2VQYXJ0cyA9IHNwbGl0UGF0aChzb3VyY2VQYXRoKTtcbiAgICB2YXIgbWF0Y2hlZFBhcnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXR0ZXJuUGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbWF0Y2hlZFBhcnRzLnB1c2goc291cmNlUGFydHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlZFBhcnRzLmZpbHRlcihpc05vdE51bGwpLmpvaW4oXCIvXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVucHJlZml4ZWQoZnVsbFN0cmluZywgcHJlZml4KSB7XG4gICAgcmV0dXJuIGZ1bGxTdHJpbmcuc3BsaXQocHJlZml4KVsxXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3N3aXRjaC1wYXRoL2xpYi9lczIwMTUvdXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gMTQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXgnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zeW1ib2wtb2JzZXJ2YWJsZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wb255ZmlsbCA9IHJlcXVpcmUoJy4vcG9ueWZpbGwnKTtcblxudmFyIF9wb255ZmlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb255ZmlsbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIHJvb3Q7IC8qIGdsb2JhbCB3aW5kb3cgKi9cblxuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSAoMCwgX3BvbnlmaWxsMlsnZGVmYXVsdCddKShyb290KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHJlc3VsdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3ltYm9sLW9ic2VydmFibGUvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsO1xuZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIF9TeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIF9TeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoX1N5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBfU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IF9TeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdF9TeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3ltYm9sLW9ic2VydmFibGUvbGliL3BvbnlmaWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyohIHRldGhlciAxLjQuMCAqL1xuXG4oZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuVGV0aGVyID0gZmFjdG9yeSgpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgVGV0aGVyQmFzZSA9IHVuZGVmaW5lZDtcbmlmICh0eXBlb2YgVGV0aGVyQmFzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgVGV0aGVyQmFzZSA9IHsgbW9kdWxlczogW10gfTtcbn1cblxudmFyIHplcm9FbGVtZW50ID0gbnVsbDtcblxuLy8gU2FtZSBhcyBuYXRpdmUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0LCBleGNlcHQgaXQgdGFrZXMgaW50byBhY2NvdW50IHBhcmVudCA8ZnJhbWU+IG9mZnNldHNcbi8vIGlmIHRoZSBlbGVtZW50IGxpZXMgd2l0aGluIGEgbmVzdGVkIGRvY3VtZW50ICg8ZnJhbWU+IG9yIDxpZnJhbWU+LWxpa2UpLlxuZnVuY3Rpb24gZ2V0QWN0dWFsQm91bmRpbmdDbGllbnRSZWN0KG5vZGUpIHtcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgLy8gVGhlIG9yaWdpbmFsIG9iamVjdCByZXR1cm5lZCBieSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgaW1tdXRhYmxlLCBzbyB3ZSBjbG9uZSBpdFxuICAvLyBXZSBjYW4ndCB1c2UgZXh0ZW5kIGJlY2F1c2UgdGhlIHByb3BlcnRpZXMgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIG9iamVjdCBieSBoYXNPd25Qcm9wZXJ0eSBpbiBJRTlcbiAgdmFyIHJlY3QgPSB7fTtcbiAgZm9yICh2YXIgayBpbiBib3VuZGluZ1JlY3QpIHtcbiAgICByZWN0W2tdID0gYm91bmRpbmdSZWN0W2tdO1xuICB9XG5cbiAgaWYgKG5vZGUub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcbiAgICB2YXIgX2ZyYW1lRWxlbWVudCA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5mcmFtZUVsZW1lbnQ7XG4gICAgaWYgKF9mcmFtZUVsZW1lbnQpIHtcbiAgICAgIHZhciBmcmFtZVJlY3QgPSBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3QoX2ZyYW1lRWxlbWVudCk7XG4gICAgICByZWN0LnRvcCArPSBmcmFtZVJlY3QudG9wO1xuICAgICAgcmVjdC5ib3R0b20gKz0gZnJhbWVSZWN0LnRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBmcmFtZVJlY3QubGVmdDtcbiAgICAgIHJlY3QucmlnaHQgKz0gZnJhbWVSZWN0LmxlZnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudHMoZWwpIHtcbiAgLy8gSW4gZmlyZWZveCBpZiB0aGUgZWwgaXMgaW5zaWRlIGFuIGlmcmFtZSB3aXRoIGRpc3BsYXk6IG5vbmU7IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCkgd2lsbCByZXR1cm4gbnVsbDtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkgfHwge307XG4gIHZhciBwb3NpdGlvbiA9IGNvbXB1dGVkU3R5bGUucG9zaXRpb247XG4gIHZhciBwYXJlbnRzID0gW107XG5cbiAgaWYgKHBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIFtlbF07XG4gIH1cblxuICB2YXIgcGFyZW50ID0gZWw7XG4gIHdoaWxlICgocGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpICYmIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICB2YXIgc3R5bGUgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpO1xuICAgIH0gY2F0Y2ggKGVycikge31cblxuICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnIHx8IHN0eWxlID09PSBudWxsKSB7XG4gICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIHJldHVybiBwYXJlbnRzO1xuICAgIH1cblxuICAgIHZhciBfc3R5bGUgPSBzdHlsZTtcbiAgICB2YXIgb3ZlcmZsb3cgPSBfc3R5bGUub3ZlcmZsb3c7XG4gICAgdmFyIG92ZXJmbG93WCA9IF9zdHlsZS5vdmVyZmxvd1g7XG4gICAgdmFyIG92ZXJmbG93WSA9IF9zdHlsZS5vdmVyZmxvd1k7XG5cbiAgICBpZiAoLyhhdXRvfHNjcm9sbCkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgICBpZiAocG9zaXRpb24gIT09ICdhYnNvbHV0ZScgfHwgWydyZWxhdGl2ZScsICdhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2Yoc3R5bGUucG9zaXRpb24pID49IDApIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGFyZW50cy5wdXNoKGVsLm93bmVyRG9jdW1lbnQuYm9keSk7XG5cbiAgLy8gSWYgdGhlIG5vZGUgaXMgd2l0aGluIGEgZnJhbWUsIGFjY291bnQgZm9yIHRoZSBwYXJlbnQgd2luZG93IHNjcm9sbFxuICBpZiAoZWwub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcbiAgICBwYXJlbnRzLnB1c2goZWwub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyk7XG4gIH1cblxuICByZXR1cm4gcGFyZW50cztcbn1cblxudmFyIHVuaXF1ZUlkID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKytpZDtcbiAgfTtcbn0pKCk7XG5cbnZhciB6ZXJvUG9zQ2FjaGUgPSB7fTtcbnZhciBnZXRPcmlnaW4gPSBmdW5jdGlvbiBnZXRPcmlnaW4oKSB7XG4gIC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB1bmZvcnR1bmF0ZWx5IHRvbyBhY2N1cmF0ZS4gIEl0IGludHJvZHVjZXMgYSBwaXhlbCBvciB0d28gb2ZcbiAgLy8gaml0dGVyIGFzIHRoZSB1c2VyIHNjcm9sbHMgdGhhdCBtZXNzZXMgd2l0aCBvdXIgYWJpbGl0eSB0byBkZXRlY3QgaWYgdHdvIHBvc2l0aW9uc1xuICAvLyBhcmUgZXF1aXZpbGFudCBvciBub3QuICBXZSBwbGFjZSBhbiBlbGVtZW50IGF0IHRoZSB0b3AgbGVmdCBvZiB0aGUgcGFnZSB0aGF0IHdpbGxcbiAgLy8gZ2V0IHRoZSBzYW1lIGppdHRlciwgc28gd2UgY2FuIGNhbmNlbCB0aGUgdHdvIG91dC5cbiAgdmFyIG5vZGUgPSB6ZXJvRWxlbWVudDtcbiAgaWYgKCFub2RlIHx8ICFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKG5vZGUpKSB7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXRldGhlci1pZCcsIHVuaXF1ZUlkKCkpO1xuICAgIGV4dGVuZChub2RlLnN0eWxlLCB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgICB6ZXJvRWxlbWVudCA9IG5vZGU7XG4gIH1cblxuICB2YXIgaWQgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS10ZXRoZXItaWQnKTtcbiAgaWYgKHR5cGVvZiB6ZXJvUG9zQ2FjaGVbaWRdID09PSAndW5kZWZpbmVkJykge1xuICAgIHplcm9Qb3NDYWNoZVtpZF0gPSBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3Qobm9kZSk7XG5cbiAgICAvLyBDbGVhciB0aGUgY2FjaGUgd2hlbiB0aGlzIHBvc2l0aW9uIGNhbGwgaXMgZG9uZVxuICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlbGV0ZSB6ZXJvUG9zQ2FjaGVbaWRdO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHplcm9Qb3NDYWNoZVtpZF07XG59O1xuXG5mdW5jdGlvbiByZW1vdmVVdGlsRWxlbWVudHMoKSB7XG4gIGlmICh6ZXJvRWxlbWVudCkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoemVyb0VsZW1lbnQpO1xuICB9XG4gIHplcm9FbGVtZW50ID0gbnVsbDtcbn07XG5cbmZ1bmN0aW9uIGdldEJvdW5kcyhlbCkge1xuICB2YXIgZG9jID0gdW5kZWZpbmVkO1xuICBpZiAoZWwgPT09IGRvY3VtZW50KSB7XG4gICAgZG9jID0gZG9jdW1lbnQ7XG4gICAgZWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgZG9jID0gZWwub3duZXJEb2N1bWVudDtcbiAgfVxuXG4gIHZhciBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgdmFyIGJveCA9IGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdChlbCk7XG5cbiAgdmFyIG9yaWdpbiA9IGdldE9yaWdpbigpO1xuXG4gIGJveC50b3AgLT0gb3JpZ2luLnRvcDtcbiAgYm94LmxlZnQgLT0gb3JpZ2luLmxlZnQ7XG5cbiAgaWYgKHR5cGVvZiBib3gud2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYm94LndpZHRoID0gZG9jdW1lbnQuYm9keS5zY3JvbGxXaWR0aCAtIGJveC5sZWZ0IC0gYm94LnJpZ2h0O1xuICB9XG4gIGlmICh0eXBlb2YgYm94LmhlaWdodCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBib3guaGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgLSBib3gudG9wIC0gYm94LmJvdHRvbTtcbiAgfVxuXG4gIGJveC50b3AgPSBib3gudG9wIC0gZG9jRWwuY2xpZW50VG9wO1xuICBib3gubGVmdCA9IGJveC5sZWZ0IC0gZG9jRWwuY2xpZW50TGVmdDtcbiAgYm94LnJpZ2h0ID0gZG9jLmJvZHkuY2xpZW50V2lkdGggLSBib3gud2lkdGggLSBib3gubGVmdDtcbiAgYm94LmJvdHRvbSA9IGRvYy5ib2R5LmNsaWVudEhlaWdodCAtIGJveC5oZWlnaHQgLSBib3gudG9wO1xuXG4gIHJldHVybiBib3g7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbCkge1xuICByZXR1cm4gZWwub2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxudmFyIF9zY3JvbGxCYXJTaXplID0gbnVsbDtcbmZ1bmN0aW9uIGdldFNjcm9sbEJhclNpemUoKSB7XG4gIGlmIChfc2Nyb2xsQmFyU2l6ZSkge1xuICAgIHJldHVybiBfc2Nyb2xsQmFyU2l6ZTtcbiAgfVxuICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaW5uZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIGlubmVyLnN0eWxlLmhlaWdodCA9ICcyMDBweCc7XG5cbiAgdmFyIG91dGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGV4dGVuZChvdXRlci5zdHlsZSwge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICB3aWR0aDogJzIwMHB4JyxcbiAgICBoZWlnaHQ6ICcxNTBweCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH0pO1xuXG4gIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyKTtcblxuICB2YXIgd2lkdGhDb250YWluZWQgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgdmFyIHdpZHRoU2Nyb2xsID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cbiAgaWYgKHdpZHRoQ29udGFpbmVkID09PSB3aWR0aFNjcm9sbCkge1xuICAgIHdpZHRoU2Nyb2xsID0gb3V0ZXIuY2xpZW50V2lkdGg7XG4gIH1cblxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG91dGVyKTtcblxuICB2YXIgd2lkdGggPSB3aWR0aENvbnRhaW5lZCAtIHdpZHRoU2Nyb2xsO1xuXG4gIF9zY3JvbGxCYXJTaXplID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogd2lkdGggfTtcbiAgcmV0dXJuIF9zY3JvbGxCYXJTaXplO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gIHZhciBvdXQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICB2YXIgYXJncyA9IFtdO1xuXG4gIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG5cbiAgYXJncy5zbGljZSgxKS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAob2JqKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmICgoe30pLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgb3V0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBlbC5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbmFtZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xuICAgICAgaWYgKGNscy50cmltKCkpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJyhefCApJyArIG5hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKCB8JCknLCAnZ2knKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKGVsKS5yZXBsYWNlKHJlZ2V4LCAnICcpO1xuICAgIHNldENsYXNzTmFtZShlbCwgY2xhc3NOYW1lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbCwgbmFtZSkge1xuICBpZiAodHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG4gICAgICBpZiAoY2xzLnRyaW0oKSkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpO1xuICAgIHZhciBjbHMgPSBnZXRDbGFzc05hbWUoZWwpICsgKCcgJyArIG5hbWUpO1xuICAgIHNldENsYXNzTmFtZShlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbCwgbmFtZSkge1xuICBpZiAodHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpO1xuICB9XG4gIHZhciBjbGFzc05hbWUgPSBnZXRDbGFzc05hbWUoZWwpO1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnKF58ICknICsgbmFtZSArICcoIHwkKScsICdnaScpLnRlc3QoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKGVsKSB7XG4gIC8vIENhbid0IHVzZSBqdXN0IFNWR0FuaW1hdGVkU3RyaW5nIGhlcmUgc2luY2Ugbm9kZXMgd2l0aGluIGEgRnJhbWUgaW4gSUUgaGF2ZVxuICAvLyBjb21wbGV0ZWx5IHNlcGFyYXRlbHkgU1ZHQW5pbWF0ZWRTdHJpbmcgYmFzZSBjbGFzc2VzXG4gIGlmIChlbC5jbGFzc05hbWUgaW5zdGFuY2VvZiBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LlNWR0FuaW1hdGVkU3RyaW5nKSB7XG4gICAgcmV0dXJuIGVsLmNsYXNzTmFtZS5iYXNlVmFsO1xuICB9XG4gIHJldHVybiBlbC5jbGFzc05hbWU7XG59XG5cbmZ1bmN0aW9uIHNldENsYXNzTmFtZShlbCwgY2xhc3NOYW1lKSB7XG4gIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGFzc2VzKGVsLCBhZGQsIGFsbCkge1xuICAvLyBPZiB0aGUgc2V0IG9mICdhbGwnIGNsYXNzZXMsIHdlIG5lZWQgdGhlICdhZGQnIGNsYXNzZXMsIGFuZCBvbmx5IHRoZVxuICAvLyAnYWRkJyBjbGFzc2VzIHRvIGJlIHNldC5cbiAgYWxsLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xuICAgIGlmIChhZGQuaW5kZXhPZihjbHMpID09PSAtMSAmJiBoYXNDbGFzcyhlbCwgY2xzKSkge1xuICAgICAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG4gICAgfVxuICB9KTtcblxuICBhZGQuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG4gICAgaWYgKCFoYXNDbGFzcyhlbCwgY2xzKSkge1xuICAgICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRlZmVycmVkID0gW107XG5cbnZhciBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGZuKSB7XG4gIGRlZmVycmVkLnB1c2goZm4pO1xufTtcblxudmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gIHZhciBmbiA9IHVuZGVmaW5lZDtcbiAgd2hpbGUgKGZuID0gZGVmZXJyZWQucG9wKCkpIHtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgRXZlbnRlZCA9IChmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50ZWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50ZWQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEV2ZW50ZWQsIFt7XG4gICAga2V5OiAnb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgaGFuZGxlciwgY3R4KSB7XG4gICAgICB2YXIgb25jZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzNdO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGluZ3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kaW5nc1tldmVudF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3NbZXZlbnRdID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XS5wdXNoKHsgaGFuZGxlcjogaGFuZGxlciwgY3R4OiBjdHgsIG9uY2U6IG9uY2UgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb25jZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGhhbmRsZXIsIGN0eCkge1xuICAgICAgdGhpcy5vbihldmVudCwgaGFuZGxlciwgY3R4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvZmYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kaW5ncyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHRoaXMuYmluZGluZ3NbZXZlbnRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuYmluZGluZ3NbZXZlbnRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0aGlzLmJpbmRpbmdzW2V2ZW50XVtpXS5oYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0cmlnZ2VyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpZ2dlcihldmVudCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmJpbmRpbmdzW2V2ZW50XSkge1xuICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBfYmluZGluZ3MkZXZlbnQkaSA9IHRoaXMuYmluZGluZ3NbZXZlbnRdW2ldO1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gX2JpbmRpbmdzJGV2ZW50JGkuaGFuZGxlcjtcbiAgICAgICAgICB2YXIgY3R4ID0gX2JpbmRpbmdzJGV2ZW50JGkuY3R4O1xuICAgICAgICAgIHZhciBvbmNlID0gX2JpbmRpbmdzJGV2ZW50JGkub25jZTtcblxuICAgICAgICAgIHZhciBjb250ZXh0ID0gY3R4O1xuICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncyk7XG5cbiAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgdGhpcy5iaW5kaW5nc1tldmVudF0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK2k7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV2ZW50ZWQ7XG59KSgpO1xuXG5UZXRoZXJCYXNlLlV0aWxzID0ge1xuICBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3Q6IGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdCxcbiAgZ2V0U2Nyb2xsUGFyZW50czogZ2V0U2Nyb2xsUGFyZW50cyxcbiAgZ2V0Qm91bmRzOiBnZXRCb3VuZHMsXG4gIGdldE9mZnNldFBhcmVudDogZ2V0T2Zmc2V0UGFyZW50LFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgdXBkYXRlQ2xhc3NlczogdXBkYXRlQ2xhc3NlcyxcbiAgZGVmZXI6IGRlZmVyLFxuICBmbHVzaDogZmx1c2gsXG4gIHVuaXF1ZUlkOiB1bmlxdWVJZCxcbiAgRXZlbnRlZDogRXZlbnRlZCxcbiAgZ2V0U2Nyb2xsQmFyU2l6ZTogZ2V0U2Nyb2xsQmFyU2l6ZSxcbiAgcmVtb3ZlVXRpbEVsZW1lbnRzOiByZW1vdmVVdGlsRWxlbWVudHNcbn07XG4vKiBnbG9iYWxzIFRldGhlckJhc2UsIHBlcmZvcm1hbmNlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94NiwgX3g3LCBfeDgpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3g2LCBwcm9wZXJ0eSA9IF94NywgcmVjZWl2ZXIgPSBfeDg7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3g2ID0gcGFyZW50OyBfeDcgPSBwcm9wZXJ0eTsgX3g4ID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmlmICh0eXBlb2YgVGV0aGVyQmFzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBpbmNsdWRlIHRoZSB1dGlscy5qcyBmaWxlIGJlZm9yZSB0ZXRoZXIuanMnKTtcbn1cblxudmFyIF9UZXRoZXJCYXNlJFV0aWxzID0gVGV0aGVyQmFzZS5VdGlscztcbnZhciBnZXRTY3JvbGxQYXJlbnRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0U2Nyb2xsUGFyZW50cztcbnZhciBnZXRCb3VuZHMgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRCb3VuZHM7XG52YXIgZ2V0T2Zmc2V0UGFyZW50ID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0T2Zmc2V0UGFyZW50O1xudmFyIGV4dGVuZCA9IF9UZXRoZXJCYXNlJFV0aWxzLmV4dGVuZDtcbnZhciBhZGRDbGFzcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmFkZENsYXNzO1xudmFyIHJlbW92ZUNsYXNzID0gX1RldGhlckJhc2UkVXRpbHMucmVtb3ZlQ2xhc3M7XG52YXIgdXBkYXRlQ2xhc3NlcyA9IF9UZXRoZXJCYXNlJFV0aWxzLnVwZGF0ZUNsYXNzZXM7XG52YXIgZGVmZXIgPSBfVGV0aGVyQmFzZSRVdGlscy5kZWZlcjtcbnZhciBmbHVzaCA9IF9UZXRoZXJCYXNlJFV0aWxzLmZsdXNoO1xudmFyIGdldFNjcm9sbEJhclNpemUgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRTY3JvbGxCYXJTaXplO1xudmFyIHJlbW92ZVV0aWxFbGVtZW50cyA9IF9UZXRoZXJCYXNlJFV0aWxzLnJlbW92ZVV0aWxFbGVtZW50cztcblxuZnVuY3Rpb24gd2l0aGluKGEsIGIpIHtcbiAgdmFyIGRpZmYgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyAxIDogYXJndW1lbnRzWzJdO1xuXG4gIHJldHVybiBhICsgZGlmZiA+PSBiICYmIGIgPj0gYSAtIGRpZmY7XG59XG5cbnZhciB0cmFuc2Zvcm1LZXkgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICB2YXIgdHJhbnNmb3JtcyA9IFsndHJhbnNmb3JtJywgJ1dlYmtpdFRyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIga2V5ID0gdHJhbnNmb3Jtc1tpXTtcbiAgICBpZiAoZWwuc3R5bGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSkoKTtcblxudmFyIHRldGhlcnMgPSBbXTtcblxudmFyIHBvc2l0aW9uID0gZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gIHRldGhlcnMuZm9yRWFjaChmdW5jdGlvbiAodGV0aGVyKSB7XG4gICAgdGV0aGVyLnBvc2l0aW9uKGZhbHNlKTtcbiAgfSk7XG4gIGZsdXNoKCk7XG59O1xuXG5mdW5jdGlvbiBub3coKSB7XG4gIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICB9XG4gIHJldHVybiArbmV3IERhdGUoKTtcbn1cblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxhc3RDYWxsID0gbnVsbDtcbiAgdmFyIGxhc3REdXJhdGlvbiA9IG51bGw7XG4gIHZhciBwZW5kaW5nVGltZW91dCA9IG51bGw7XG5cbiAgdmFyIHRpY2sgPSBmdW5jdGlvbiB0aWNrKCkge1xuICAgIGlmICh0eXBlb2YgbGFzdER1cmF0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsYXN0RHVyYXRpb24gPiAxNikge1xuICAgICAgLy8gV2Ugdm9sdW50YXJpbHkgdGhyb3R0bGUgb3Vyc2VsdmVzIGlmIHdlIGNhbid0IG1hbmFnZSA2MGZwc1xuICAgICAgbGFzdER1cmF0aW9uID0gTWF0aC5taW4obGFzdER1cmF0aW9uIC0gMTYsIDI1MCk7XG5cbiAgICAgIC8vIEp1c3QgaW4gY2FzZSB0aGlzIGlzIHRoZSBsYXN0IGV2ZW50LCByZW1lbWJlciB0byBwb3NpdGlvbiBqdXN0IG9uY2UgbW9yZVxuICAgICAgcGVuZGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRpY2ssIDI1MCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBsYXN0Q2FsbCAhPT0gJ3VuZGVmaW5lZCcgJiYgbm93KCkgLSBsYXN0Q2FsbCA8IDEwKSB7XG4gICAgICAvLyBTb21lIGJyb3dzZXJzIGNhbGwgZXZlbnRzIGEgbGl0dGxlIHRvbyBmcmVxdWVudGx5LCByZWZ1c2UgdG8gcnVuIG1vcmUgdGhhbiBpcyByZWFzb25hYmxlXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBlbmRpbmdUaW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dChwZW5kaW5nVGltZW91dCk7XG4gICAgICBwZW5kaW5nVGltZW91dCA9IG51bGw7XG4gICAgfVxuXG4gICAgbGFzdENhbGwgPSBub3coKTtcbiAgICBwb3NpdGlvbigpO1xuICAgIGxhc3REdXJhdGlvbiA9IG5vdygpIC0gbGFzdENhbGw7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBbJ3Jlc2l6ZScsICdzY3JvbGwnLCAndG91Y2htb3ZlJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0aWNrKTtcbiAgICB9KTtcbiAgfVxufSkoKTtcblxudmFyIE1JUlJPUl9MUiA9IHtcbiAgY2VudGVyOiAnY2VudGVyJyxcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0J1xufTtcblxudmFyIE1JUlJPUl9UQiA9IHtcbiAgbWlkZGxlOiAnbWlkZGxlJyxcbiAgdG9wOiAnYm90dG9tJyxcbiAgYm90dG9tOiAndG9wJ1xufTtcblxudmFyIE9GRlNFVF9NQVAgPSB7XG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgbWlkZGxlOiAnNTAlJyxcbiAgY2VudGVyOiAnNTAlJyxcbiAgYm90dG9tOiAnMTAwJScsXG4gIHJpZ2h0OiAnMTAwJSdcbn07XG5cbnZhciBhdXRvVG9GaXhlZEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBhdXRvVG9GaXhlZEF0dGFjaG1lbnQoYXR0YWNobWVudCwgcmVsYXRpdmVUb0F0dGFjaG1lbnQpIHtcbiAgdmFyIGxlZnQgPSBhdHRhY2htZW50LmxlZnQ7XG4gIHZhciB0b3AgPSBhdHRhY2htZW50LnRvcDtcblxuICBpZiAobGVmdCA9PT0gJ2F1dG8nKSB7XG4gICAgbGVmdCA9IE1JUlJPUl9MUltyZWxhdGl2ZVRvQXR0YWNobWVudC5sZWZ0XTtcbiAgfVxuXG4gIGlmICh0b3AgPT09ICdhdXRvJykge1xuICAgIHRvcCA9IE1JUlJPUl9UQltyZWxhdGl2ZVRvQXR0YWNobWVudC50b3BdO1xuICB9XG5cbiAgcmV0dXJuIHsgbGVmdDogbGVmdCwgdG9wOiB0b3AgfTtcbn07XG5cbnZhciBhdHRhY2htZW50VG9PZmZzZXQgPSBmdW5jdGlvbiBhdHRhY2htZW50VG9PZmZzZXQoYXR0YWNobWVudCkge1xuICB2YXIgbGVmdCA9IGF0dGFjaG1lbnQubGVmdDtcbiAgdmFyIHRvcCA9IGF0dGFjaG1lbnQudG9wO1xuXG4gIGlmICh0eXBlb2YgT0ZGU0VUX01BUFthdHRhY2htZW50LmxlZnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgIGxlZnQgPSBPRkZTRVRfTUFQW2F0dGFjaG1lbnQubGVmdF07XG4gIH1cblxuICBpZiAodHlwZW9mIE9GRlNFVF9NQVBbYXR0YWNobWVudC50b3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRvcCA9IE9GRlNFVF9NQVBbYXR0YWNobWVudC50b3BdO1xuICB9XG5cbiAgcmV0dXJuIHsgbGVmdDogbGVmdCwgdG9wOiB0b3AgfTtcbn07XG5cbmZ1bmN0aW9uIGFkZE9mZnNldCgpIHtcbiAgdmFyIG91dCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG9mZnNldHMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBvZmZzZXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgb2Zmc2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuICAgIHZhciBsZWZ0ID0gX3JlZi5sZWZ0O1xuXG4gICAgaWYgKHR5cGVvZiB0b3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0b3AgPSBwYXJzZUZsb2F0KHRvcCwgMTApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxlZnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZWZ0ID0gcGFyc2VGbG9hdChsZWZ0LCAxMCk7XG4gICAgfVxuXG4gICAgb3V0LnRvcCArPSB0b3A7XG4gICAgb3V0LmxlZnQgKz0gbGVmdDtcbiAgfSk7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0VG9QeChvZmZzZXQsIHNpemUpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQubGVmdCA9PT0gJ3N0cmluZycgJiYgb2Zmc2V0LmxlZnQuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgIG9mZnNldC5sZWZ0ID0gcGFyc2VGbG9hdChvZmZzZXQubGVmdCwgMTApIC8gMTAwICogc2l6ZS53aWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIG9mZnNldC50b3AgPT09ICdzdHJpbmcnICYmIG9mZnNldC50b3AuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgIG9mZnNldC50b3AgPSBwYXJzZUZsb2F0KG9mZnNldC50b3AsIDEwKSAvIDEwMCAqIHNpemUuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxudmFyIHBhcnNlT2Zmc2V0ID0gZnVuY3Rpb24gcGFyc2VPZmZzZXQodmFsdWUpIHtcbiAgdmFyIF92YWx1ZSRzcGxpdCA9IHZhbHVlLnNwbGl0KCcgJyk7XG5cbiAgdmFyIF92YWx1ZSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfdmFsdWUkc3BsaXQsIDIpO1xuXG4gIHZhciB0b3AgPSBfdmFsdWUkc3BsaXQyWzBdO1xuICB2YXIgbGVmdCA9IF92YWx1ZSRzcGxpdDJbMV07XG5cbiAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTtcbn07XG52YXIgcGFyc2VBdHRhY2htZW50ID0gcGFyc2VPZmZzZXQ7XG5cbnZhciBUZXRoZXJDbGFzcyA9IChmdW5jdGlvbiAoX0V2ZW50ZWQpIHtcbiAgX2luaGVyaXRzKFRldGhlckNsYXNzLCBfRXZlbnRlZCk7XG5cbiAgZnVuY3Rpb24gVGV0aGVyQ2xhc3Mob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV0aGVyQ2xhc3MpO1xuXG4gICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGV0aGVyQ2xhc3MucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi5iaW5kKHRoaXMpO1xuXG4gICAgdGV0aGVycy5wdXNoKHRoaXMpO1xuXG4gICAgdGhpcy5oaXN0b3J5ID0gW107XG5cbiAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucywgZmFsc2UpO1xuXG4gICAgVGV0aGVyQmFzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgICAgaWYgKHR5cGVvZiBtb2R1bGUuaW5pdGlhbGl6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmluaXRpYWxpemUuY2FsbChfdGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnBvc2l0aW9uKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGV0aGVyQ2xhc3MsIFt7XG4gICAga2V5OiAnZ2V0Q2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDbGFzcygpIHtcbiAgICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAnJyA6IGFyZ3VtZW50c1swXTtcbiAgICAgIHZhciBjbGFzc2VzID0gdGhpcy5vcHRpb25zLmNsYXNzZXM7XG5cbiAgICAgIGlmICh0eXBlb2YgY2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2xhc3Nlc1trZXldKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2xhc3Nlc1trZXldO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuY2xhc3NQcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGFzc1ByZWZpeCArICctJyArIGtleTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0T3B0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBwb3MgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzFdO1xuXG4gICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIG9mZnNldDogJzAgMCcsXG4gICAgICAgIHRhcmdldE9mZnNldDogJzAgMCcsXG4gICAgICAgIHRhcmdldEF0dGFjaG1lbnQ6ICdhdXRvIGF1dG8nLFxuICAgICAgICBjbGFzc1ByZWZpeDogJ3RldGhlcidcbiAgICAgIH07XG5cbiAgICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgIHZhciBfb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIHZhciBlbGVtZW50ID0gX29wdGlvbnMuZWxlbWVudDtcbiAgICAgIHZhciB0YXJnZXQgPSBfb3B0aW9ucy50YXJnZXQ7XG4gICAgICB2YXIgdGFyZ2V0TW9kaWZpZXIgPSBfb3B0aW9ucy50YXJnZXRNb2RpZmllcjtcblxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy50YXJnZXRNb2RpZmllciA9IHRhcmdldE1vZGlmaWVyO1xuXG4gICAgICBpZiAodGhpcy50YXJnZXQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB0aGlzLnRhcmdldE1vZGlmaWVyID0gJ3Zpc2libGUnO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldCA9PT0gJ3Njcm9sbC1oYW5kbGUnKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdGhpcy50YXJnZXRNb2RpZmllciA9ICdzY3JvbGwtaGFuZGxlJztcbiAgICAgIH1cblxuICAgICAgWydlbGVtZW50JywgJ3RhcmdldCddLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIF90aGlzMltrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV0aGVyIEVycm9yOiBCb3RoIGVsZW1lbnQgYW5kIHRhcmdldCBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXMyW2tleV0uanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIF90aGlzMltrZXldID0gX3RoaXMyW2tleV1bMF07XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGlzMltrZXldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIF90aGlzMltrZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihfdGhpczJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhZGRDbGFzcyh0aGlzLmVsZW1lbnQsIHRoaXMuZ2V0Q2xhc3MoJ2VsZW1lbnQnKSk7XG4gICAgICBpZiAoISh0aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG4gICAgICAgIGFkZENsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmdldENsYXNzKCd0YXJnZXQnKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmF0dGFjaG1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXRoZXIgRXJyb3I6IFlvdSBtdXN0IHByb3ZpZGUgYW4gYXR0YWNobWVudCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRhcmdldEF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQodGhpcy5vcHRpb25zLnRhcmdldEF0dGFjaG1lbnQpO1xuICAgICAgdGhpcy5hdHRhY2htZW50ID0gcGFyc2VBdHRhY2htZW50KHRoaXMub3B0aW9ucy5hdHRhY2htZW50KTtcbiAgICAgIHRoaXMub2Zmc2V0ID0gcGFyc2VPZmZzZXQodGhpcy5vcHRpb25zLm9mZnNldCk7XG4gICAgICB0aGlzLnRhcmdldE9mZnNldCA9IHBhcnNlT2Zmc2V0KHRoaXMub3B0aW9ucy50YXJnZXRPZmZzZXQpO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuc2Nyb2xsUGFyZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRhcmdldE1vZGlmaWVyID09PSAnc2Nyb2xsLWhhbmRsZScpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnRzID0gW3RoaXMudGFyZ2V0XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsUGFyZW50cyA9IGdldFNjcm9sbFBhcmVudHModGhpcy50YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoISh0aGlzLm9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlKHBvcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGFyZ2V0Qm91bmRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFyZ2V0Qm91bmRzKCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnRhcmdldE1vZGlmaWVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRNb2RpZmllciA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICByZXR1cm4geyB0b3A6IHBhZ2VZT2Zmc2V0LCBsZWZ0OiBwYWdlWE9mZnNldCwgaGVpZ2h0OiBpbm5lckhlaWdodCwgd2lkdGg6IGlubmVyV2lkdGggfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGdldEJvdW5kcyh0aGlzLnRhcmdldCk7XG5cbiAgICAgICAgICAgIHZhciBvdXQgPSB7XG4gICAgICAgICAgICAgIGhlaWdodDogYm91bmRzLmhlaWdodCxcbiAgICAgICAgICAgICAgd2lkdGg6IGJvdW5kcy53aWR0aCxcbiAgICAgICAgICAgICAgdG9wOiBib3VuZHMudG9wLFxuICAgICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWluKG91dC5oZWlnaHQsIGJvdW5kcy5oZWlnaHQgLSAocGFnZVlPZmZzZXQgLSBib3VuZHMudG9wKSk7XG4gICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5taW4ob3V0LmhlaWdodCwgYm91bmRzLmhlaWdodCAtIChib3VuZHMudG9wICsgYm91bmRzLmhlaWdodCAtIChwYWdlWU9mZnNldCArIGlubmVySGVpZ2h0KSkpO1xuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWluKGlubmVySGVpZ2h0LCBvdXQuaGVpZ2h0KTtcbiAgICAgICAgICAgIG91dC5oZWlnaHQgLT0gMjtcblxuICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4ob3V0LndpZHRoLCBib3VuZHMud2lkdGggLSAocGFnZVhPZmZzZXQgLSBib3VuZHMubGVmdCkpO1xuICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4ob3V0LndpZHRoLCBib3VuZHMud2lkdGggLSAoYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGggLSAocGFnZVhPZmZzZXQgKyBpbm5lcldpZHRoKSkpO1xuICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4oaW5uZXJXaWR0aCwgb3V0LndpZHRoKTtcbiAgICAgICAgICAgIG91dC53aWR0aCAtPSAyO1xuXG4gICAgICAgICAgICBpZiAob3V0LnRvcCA8IHBhZ2VZT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIG91dC50b3AgPSBwYWdlWU9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvdXQubGVmdCA8IHBhZ2VYT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIG91dC5sZWZ0ID0gcGFnZVhPZmZzZXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0TW9kaWZpZXIgPT09ICdzY3JvbGwtaGFuZGxlJykge1xuICAgICAgICAgIHZhciBib3VuZHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICAgICAgICAgIGlmICh0YXJnZXQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICAgICAgYm91bmRzID0ge1xuICAgICAgICAgICAgICBsZWZ0OiBwYWdlWE9mZnNldCxcbiAgICAgICAgICAgICAgdG9wOiBwYWdlWU9mZnNldCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBpbm5lckhlaWdodCxcbiAgICAgICAgICAgICAgd2lkdGg6IGlubmVyV2lkdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvdW5kcyA9IGdldEJvdW5kcyh0YXJnZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcblxuICAgICAgICAgIHZhciBoYXNCb3R0b21TY3JvbGwgPSB0YXJnZXQuc2Nyb2xsV2lkdGggPiB0YXJnZXQuY2xpZW50V2lkdGggfHwgW3N0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1hdLmluZGV4T2YoJ3Njcm9sbCcpID49IDAgfHwgdGhpcy50YXJnZXQgIT09IGRvY3VtZW50LmJvZHk7XG5cbiAgICAgICAgICB2YXIgc2Nyb2xsQm90dG9tID0gMDtcbiAgICAgICAgICBpZiAoaGFzQm90dG9tU2Nyb2xsKSB7XG4gICAgICAgICAgICBzY3JvbGxCb3R0b20gPSAxNTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGVpZ2h0ID0gYm91bmRzLmhlaWdodCAtIHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyVG9wV2lkdGgpIC0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJCb3R0b21XaWR0aCkgLSBzY3JvbGxCb3R0b207XG5cbiAgICAgICAgICB2YXIgb3V0ID0ge1xuICAgICAgICAgICAgd2lkdGg6IDE1LFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKiAwLjk3NSAqIChoZWlnaHQgLyB0YXJnZXQuc2Nyb2xsSGVpZ2h0KSxcbiAgICAgICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0ICsgYm91bmRzLndpZHRoIC0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJMZWZ0V2lkdGgpIC0gMTVcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIGZpdEFkaiA9IDA7XG4gICAgICAgICAgaWYgKGhlaWdodCA8IDQwOCAmJiB0aGlzLnRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgZml0QWRqID0gLTAuMDAwMTEgKiBNYXRoLnBvdyhoZWlnaHQsIDIpIC0gMC4wMDcyNyAqIGhlaWdodCArIDIyLjU4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnRhcmdldCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWF4KG91dC5oZWlnaHQsIDI0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2Nyb2xsUGVyY2VudGFnZSA9IHRoaXMudGFyZ2V0LnNjcm9sbFRvcCAvICh0YXJnZXQuc2Nyb2xsSGVpZ2h0IC0gaGVpZ2h0KTtcbiAgICAgICAgICBvdXQudG9wID0gc2Nyb2xsUGVyY2VudGFnZSAqIChoZWlnaHQgLSBvdXQuaGVpZ2h0IC0gZml0QWRqKSArIGJvdW5kcy50b3AgKyBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlclRvcFdpZHRoKTtcblxuICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWF4KG91dC5oZWlnaHQsIDI0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0Qm91bmRzKHRoaXMudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhckNhY2hlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHtcbiAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FjaGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWNoZShrLCBnZXR0ZXIpIHtcbiAgICAgIC8vIE1vcmUgdGhhbiBvbmUgbW9kdWxlIHdpbGwgb2Z0ZW4gbmVlZCB0aGUgc2FtZSBET00gaW5mbywgc29cbiAgICAgIC8vIHdlIGtlZXAgYSBjYWNoZSB3aGljaCBpcyBjbGVhcmVkIG9uIGVhY2ggcG9zaXRpb24gY2FsbFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jYWNoZVtrXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5fY2FjaGVba10gPSBnZXR0ZXIuY2FsbCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlW2tdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgcG9zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKCEodGhpcy5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMgPT09IGZhbHNlKSkge1xuICAgICAgICBhZGRDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudCAhPT0gX3RoaXMzLnRhcmdldC5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzMy5wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocG9zKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICByZW1vdmVDbGFzcyh0aGlzLnRhcmdldCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIHJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcbiAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuc2Nyb2xsUGFyZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpczQucG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB0aGlzLmRpc2FibGUoKTtcblxuICAgICAgdGV0aGVycy5mb3JFYWNoKGZ1bmN0aW9uICh0ZXRoZXIsIGkpIHtcbiAgICAgICAgaWYgKHRldGhlciA9PT0gX3RoaXM1KSB7XG4gICAgICAgICAgdGV0aGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgYW55IGVsZW1lbnRzIHdlIHdlcmUgdXNpbmcgZm9yIGNvbnZlbmllbmNlIGZyb20gdGhlIERPTVxuICAgICAgaWYgKHRldGhlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlbW92ZVV0aWxFbGVtZW50cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZUF0dGFjaENsYXNzZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVBdHRhY2hDbGFzc2VzKGVsZW1lbnRBdHRhY2gsIHRhcmdldEF0dGFjaCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIGVsZW1lbnRBdHRhY2ggPSBlbGVtZW50QXR0YWNoIHx8IHRoaXMuYXR0YWNobWVudDtcbiAgICAgIHRhcmdldEF0dGFjaCA9IHRhcmdldEF0dGFjaCB8fCB0aGlzLnRhcmdldEF0dGFjaG1lbnQ7XG4gICAgICB2YXIgc2lkZXMgPSBbJ2xlZnQnLCAndG9wJywgJ2JvdHRvbScsICdyaWdodCcsICdtaWRkbGUnLCAnY2VudGVyJ107XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gdXBkYXRlQXR0YWNoQ2xhc3NlcyBjYW4gYmUgY2FsbGVkIG1vcmUgdGhhbiBvbmNlIGluIGEgcG9zaXRpb24gY2FsbCwgc29cbiAgICAgICAgLy8gd2UgbmVlZCB0byBjbGVhbiB1cCBhZnRlciBvdXJzZWx2ZXMgc3VjaCB0aGF0IHdoZW4gdGhlIGxhc3QgZGVmZXIgZ2V0c1xuICAgICAgICAvLyByYW4gaXQgZG9lc24ndCBhZGQgYW55IGV4dHJhIGNsYXNzZXMgZnJvbSBwcmV2aW91cyBjYWxscy5cbiAgICAgICAgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5zcGxpY2UoMCwgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2FkZEF0dGFjaENsYXNzZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuX2FkZEF0dGFjaENsYXNzZXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhZGQgPSB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzO1xuXG4gICAgICBpZiAoZWxlbWVudEF0dGFjaC50b3ApIHtcbiAgICAgICAgYWRkLnB1c2godGhpcy5nZXRDbGFzcygnZWxlbWVudC1hdHRhY2hlZCcpICsgJy0nICsgZWxlbWVudEF0dGFjaC50b3ApO1xuICAgICAgfVxuICAgICAgaWYgKGVsZW1lbnRBdHRhY2gubGVmdCkge1xuICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCdlbGVtZW50LWF0dGFjaGVkJykgKyAnLScgKyBlbGVtZW50QXR0YWNoLmxlZnQpO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldEF0dGFjaC50b3ApIHtcbiAgICAgICAgYWRkLnB1c2godGhpcy5nZXRDbGFzcygndGFyZ2V0LWF0dGFjaGVkJykgKyAnLScgKyB0YXJnZXRBdHRhY2gudG9wKTtcbiAgICAgIH1cbiAgICAgIGlmICh0YXJnZXRBdHRhY2gubGVmdCkge1xuICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCd0YXJnZXQtYXR0YWNoZWQnKSArICctJyArIHRhcmdldEF0dGFjaC5sZWZ0KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFsbCA9IFtdO1xuICAgICAgc2lkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICBhbGwucHVzaChfdGhpczYuZ2V0Q2xhc3MoJ2VsZW1lbnQtYXR0YWNoZWQnKSArICctJyArIHNpZGUpO1xuICAgICAgICBhbGwucHVzaChfdGhpczYuZ2V0Q2xhc3MoJ3RhcmdldC1hdHRhY2hlZCcpICsgJy0nICsgc2lkZSk7XG4gICAgICB9KTtcblxuICAgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoISh0eXBlb2YgX3RoaXM2Ll9hZGRBdHRhY2hDbGFzc2VzICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzNi5lbGVtZW50LCBfdGhpczYuX2FkZEF0dGFjaENsYXNzZXMsIGFsbCk7XG4gICAgICAgIGlmICghKF90aGlzNi5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMgPT09IGZhbHNlKSkge1xuICAgICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXM2LnRhcmdldCwgX3RoaXM2Ll9hZGRBdHRhY2hDbGFzc2VzLCBhbGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIF90aGlzNi5fYWRkQXR0YWNoQ2xhc3NlcztcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Bvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIGZsdXNoQ2hhbmdlcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF07XG5cbiAgICAgIC8vIGZsdXNoQ2hhbmdlcyBjb21taXRzIHRoZSBjaGFuZ2VzIGltbWVkaWF0ZWx5LCBsZWF2ZSB0cnVlIHVubGVzcyB5b3UgYXJlIHBvc2l0aW9uaW5nIG11bHRpcGxlXG4gICAgICAvLyB0ZXRoZXJzIChpbiB3aGljaCBjYXNlIGNhbGwgVGV0aGVyLlV0aWxzLmZsdXNoIHlvdXJzZWxmIHdoZW4geW91J3JlIGRvbmUpXG5cbiAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG5cbiAgICAgIC8vIFR1cm4gJ2F1dG8nIGF0dGFjaG1lbnRzIGludG8gdGhlIGFwcHJvcHJpYXRlIGNvcm5lciBvciBlZGdlXG4gICAgICB2YXIgdGFyZ2V0QXR0YWNobWVudCA9IGF1dG9Ub0ZpeGVkQXR0YWNobWVudCh0aGlzLnRhcmdldEF0dGFjaG1lbnQsIHRoaXMuYXR0YWNobWVudCk7XG5cbiAgICAgIHRoaXMudXBkYXRlQXR0YWNoQ2xhc3Nlcyh0aGlzLmF0dGFjaG1lbnQsIHRhcmdldEF0dGFjaG1lbnQpO1xuXG4gICAgICB2YXIgZWxlbWVudFBvcyA9IHRoaXMuY2FjaGUoJ2VsZW1lbnQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0Qm91bmRzKF90aGlzNy5lbGVtZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgd2lkdGggPSBlbGVtZW50UG9zLndpZHRoO1xuICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnRQb3MuaGVpZ2h0O1xuXG4gICAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwICYmIHR5cGVvZiB0aGlzLmxhc3RTaXplICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgX2xhc3RTaXplID0gdGhpcy5sYXN0U2l6ZTtcblxuICAgICAgICAvLyBXZSBjYWNoZSB0aGUgaGVpZ2h0IGFuZCB3aWR0aCB0byBtYWtlIGl0IHBvc3NpYmxlIHRvIHBvc2l0aW9uIGVsZW1lbnRzIHRoYXQgYXJlXG4gICAgICAgIC8vIGdldHRpbmcgaGlkZGVuLlxuICAgICAgICB3aWR0aCA9IF9sYXN0U2l6ZS53aWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gX2xhc3RTaXplLmhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFzdFNpemUgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldFBvcyA9IHRoaXMuY2FjaGUoJ3RhcmdldC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczcuZ2V0VGFyZ2V0Qm91bmRzKCk7XG4gICAgICB9KTtcbiAgICAgIHZhciB0YXJnZXRTaXplID0gdGFyZ2V0UG9zO1xuXG4gICAgICAvLyBHZXQgYW4gYWN0dWFsIHB4IG9mZnNldCBmcm9tIHRoZSBhdHRhY2htZW50XG4gICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0VG9QeChhdHRhY2htZW50VG9PZmZzZXQodGhpcy5hdHRhY2htZW50KSwgeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xuICAgICAgdmFyIHRhcmdldE9mZnNldCA9IG9mZnNldFRvUHgoYXR0YWNobWVudFRvT2Zmc2V0KHRhcmdldEF0dGFjaG1lbnQpLCB0YXJnZXRTaXplKTtcblxuICAgICAgdmFyIG1hbnVhbE9mZnNldCA9IG9mZnNldFRvUHgodGhpcy5vZmZzZXQsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTtcbiAgICAgIHZhciBtYW51YWxUYXJnZXRPZmZzZXQgPSBvZmZzZXRUb1B4KHRoaXMudGFyZ2V0T2Zmc2V0LCB0YXJnZXRTaXplKTtcblxuICAgICAgLy8gQWRkIHRoZSBtYW51YWxseSBwcm92aWRlZCBvZmZzZXRcbiAgICAgIG9mZnNldCA9IGFkZE9mZnNldChvZmZzZXQsIG1hbnVhbE9mZnNldCk7XG4gICAgICB0YXJnZXRPZmZzZXQgPSBhZGRPZmZzZXQodGFyZ2V0T2Zmc2V0LCBtYW51YWxUYXJnZXRPZmZzZXQpO1xuXG4gICAgICAvLyBJdCdzIG5vdyBvdXIgZ29hbCB0byBtYWtlIChlbGVtZW50IHBvc2l0aW9uICsgb2Zmc2V0KSA9PSAodGFyZ2V0IHBvc2l0aW9uICsgdGFyZ2V0IG9mZnNldClcbiAgICAgIHZhciBsZWZ0ID0gdGFyZ2V0UG9zLmxlZnQgKyB0YXJnZXRPZmZzZXQubGVmdCAtIG9mZnNldC5sZWZ0O1xuICAgICAgdmFyIHRvcCA9IHRhcmdldFBvcy50b3AgKyB0YXJnZXRPZmZzZXQudG9wIC0gb2Zmc2V0LnRvcDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUZXRoZXJCYXNlLm1vZHVsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIF9tb2R1bGUyID0gVGV0aGVyQmFzZS5tb2R1bGVzW2ldO1xuICAgICAgICB2YXIgcmV0ID0gX21vZHVsZTIucG9zaXRpb24uY2FsbCh0aGlzLCB7XG4gICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICB0YXJnZXRBdHRhY2htZW50OiB0YXJnZXRBdHRhY2htZW50LFxuICAgICAgICAgIHRhcmdldFBvczogdGFyZ2V0UG9zLFxuICAgICAgICAgIGVsZW1lbnRQb3M6IGVsZW1lbnRQb3MsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXQsXG4gICAgICAgICAgbWFudWFsT2Zmc2V0OiBtYW51YWxPZmZzZXQsXG4gICAgICAgICAgbWFudWFsVGFyZ2V0T2Zmc2V0OiBtYW51YWxUYXJnZXRPZmZzZXQsXG4gICAgICAgICAgc2Nyb2xsYmFyU2l6ZTogc2Nyb2xsYmFyU2l6ZSxcbiAgICAgICAgICBhdHRhY2htZW50OiB0aGlzLmF0dGFjaG1lbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJldCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHJldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b3AgPSByZXQudG9wO1xuICAgICAgICAgIGxlZnQgPSByZXQubGVmdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBXZSBkZXNjcmliZSB0aGUgcG9zaXRpb24gdGhyZWUgZGlmZmVyZW50IHdheXMgdG8gZ2l2ZSB0aGUgb3B0aW1pemVyXG4gICAgICAvLyBhIGNoYW5jZSB0byBkZWNpZGUgdGhlIGJlc3QgcG9zc2libGUgd2F5IHRvIHBvc2l0aW9uIHRoZSBlbGVtZW50XG4gICAgICAvLyB3aXRoIHRoZSBmZXdlc3QgcmVwYWludHMuXG4gICAgICB2YXIgbmV4dCA9IHtcbiAgICAgICAgLy8gSXQncyBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgcGFnZSAoYWJzb2x1dGUgcG9zaXRpb25pbmcgd2hlblxuICAgICAgICAvLyB0aGUgZWxlbWVudCBpcyBhIGNoaWxkIG9mIHRoZSBib2R5KVxuICAgICAgICBwYWdlOiB7XG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgbGVmdDogbGVmdFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEl0J3MgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IChmaXhlZCBwb3NpdGlvbmluZylcbiAgICAgICAgdmlld3BvcnQ6IHtcbiAgICAgICAgICB0b3A6IHRvcCAtIHBhZ2VZT2Zmc2V0LFxuICAgICAgICAgIGJvdHRvbTogcGFnZVlPZmZzZXQgLSB0b3AgLSBoZWlnaHQgKyBpbm5lckhlaWdodCxcbiAgICAgICAgICBsZWZ0OiBsZWZ0IC0gcGFnZVhPZmZzZXQsXG4gICAgICAgICAgcmlnaHQ6IHBhZ2VYT2Zmc2V0IC0gbGVmdCAtIHdpZHRoICsgaW5uZXJXaWR0aFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgZG9jID0gdGhpcy50YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIHZhciB3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cbiAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKHdpbi5pbm5lckhlaWdodCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgIHNjcm9sbGJhclNpemUgPSB0aGlzLmNhY2hlKCdzY3JvbGxiYXItc2l6ZScsIGdldFNjcm9sbEJhclNpemUpO1xuICAgICAgICBuZXh0LnZpZXdwb3J0LmJvdHRvbSAtPSBzY3JvbGxiYXJTaXplLmhlaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKHdpbi5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkge1xuICAgICAgICBzY3JvbGxiYXJTaXplID0gdGhpcy5jYWNoZSgnc2Nyb2xsYmFyLXNpemUnLCBnZXRTY3JvbGxCYXJTaXplKTtcbiAgICAgICAgbmV4dC52aWV3cG9ydC5yaWdodCAtPSBzY3JvbGxiYXJTaXplLndpZHRoO1xuICAgICAgfVxuXG4gICAgICBpZiAoWycnLCAnc3RhdGljJ10uaW5kZXhPZihkb2MuYm9keS5zdHlsZS5wb3NpdGlvbikgPT09IC0xIHx8IFsnJywgJ3N0YXRpYyddLmluZGV4T2YoZG9jLmJvZHkucGFyZW50RWxlbWVudC5zdHlsZS5wb3NpdGlvbikgPT09IC0xKSB7XG4gICAgICAgIC8vIEFic29sdXRlIHBvc2l0aW9uaW5nIGluIHRoZSBib2R5IHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhlIHBhZ2UsIG5vdCB0aGUgJ2luaXRpYWwgY29udGFpbmluZyBibG9jaydcbiAgICAgICAgbmV4dC5wYWdlLmJvdHRvbSA9IGRvYy5ib2R5LnNjcm9sbEhlaWdodCAtIHRvcCAtIGhlaWdodDtcbiAgICAgICAgbmV4dC5wYWdlLnJpZ2h0ID0gZG9jLmJvZHkuc2Nyb2xsV2lkdGggLSBsZWZ0IC0gd2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm9wdGltaXphdGlvbnMgIT09ICd1bmRlZmluZWQnICYmIHRoaXMub3B0aW9ucy5vcHRpbWl6YXRpb25zLm1vdmVFbGVtZW50ICE9PSBmYWxzZSAmJiAhKHR5cGVvZiB0aGlzLnRhcmdldE1vZGlmaWVyICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gX3RoaXM3LmNhY2hlKCd0YXJnZXQtb2Zmc2V0cGFyZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChfdGhpczcudGFyZ2V0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgb2Zmc2V0UG9zaXRpb24gPSBfdGhpczcuY2FjaGUoJ3RhcmdldC1vZmZzZXRwYXJlbnQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEJvdW5kcyhvZmZzZXRQYXJlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KTtcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50U2l6ZSA9IG9mZnNldFBvc2l0aW9uO1xuXG4gICAgICAgICAgdmFyIG9mZnNldEJvcmRlciA9IHt9O1xuICAgICAgICAgIFsnVG9wJywgJ0xlZnQnLCAnQm90dG9tJywgJ1JpZ2h0J10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICAgICAgb2Zmc2V0Qm9yZGVyW3NpZGUudG9Mb3dlckNhc2UoKV0gPSBwYXJzZUZsb2F0KG9mZnNldFBhcmVudFN0eWxlWydib3JkZXInICsgc2lkZSArICdXaWR0aCddKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG9mZnNldFBvc2l0aW9uLnJpZ2h0ID0gZG9jLmJvZHkuc2Nyb2xsV2lkdGggLSBvZmZzZXRQb3NpdGlvbi5sZWZ0IC0gb2Zmc2V0UGFyZW50U2l6ZS53aWR0aCArIG9mZnNldEJvcmRlci5yaWdodDtcbiAgICAgICAgICBvZmZzZXRQb3NpdGlvbi5ib3R0b20gPSBkb2MuYm9keS5zY3JvbGxIZWlnaHQgLSBvZmZzZXRQb3NpdGlvbi50b3AgLSBvZmZzZXRQYXJlbnRTaXplLmhlaWdodCArIG9mZnNldEJvcmRlci5ib3R0b207XG5cbiAgICAgICAgICBpZiAobmV4dC5wYWdlLnRvcCA+PSBvZmZzZXRQb3NpdGlvbi50b3AgKyBvZmZzZXRCb3JkZXIudG9wICYmIG5leHQucGFnZS5ib3R0b20gPj0gb2Zmc2V0UG9zaXRpb24uYm90dG9tKSB7XG4gICAgICAgICAgICBpZiAobmV4dC5wYWdlLmxlZnQgPj0gb2Zmc2V0UG9zaXRpb24ubGVmdCArIG9mZnNldEJvcmRlci5sZWZ0ICYmIG5leHQucGFnZS5yaWdodCA+PSBvZmZzZXRQb3NpdGlvbi5yaWdodCkge1xuICAgICAgICAgICAgICAvLyBXZSdyZSB3aXRoaW4gdGhlIHZpc2libGUgcGFydCBvZiB0aGUgdGFyZ2V0J3Mgc2Nyb2xsIHBhcmVudFxuICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gb2Zmc2V0UGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBvZmZzZXRQYXJlbnQuc2Nyb2xsTGVmdDtcblxuICAgICAgICAgICAgICAvLyBJdCdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQncyBvZmZzZXQgcGFyZW50IChhYnNvbHV0ZSBwb3NpdGlvbmluZyB3aGVuXG4gICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIG1vdmVkIHRvIGJlIGEgY2hpbGQgb2YgdGhlIHRhcmdldCdzIG9mZnNldCBwYXJlbnQpLlxuICAgICAgICAgICAgICBuZXh0Lm9mZnNldCA9IHtcbiAgICAgICAgICAgICAgICB0b3A6IG5leHQucGFnZS50b3AgLSBvZmZzZXRQb3NpdGlvbi50b3AgKyBzY3JvbGxUb3AgLSBvZmZzZXRCb3JkZXIudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IG5leHQucGFnZS5sZWZ0IC0gb2Zmc2V0UG9zaXRpb24ubGVmdCArIHNjcm9sbExlZnQgLSBvZmZzZXRCb3JkZXIubGVmdFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgY291bGQgYWxzbyB0cmF2ZWwgdXAgdGhlIERPTSBhbmQgdHJ5IGVhY2ggY29udGFpbmluZyBjb250ZXh0LCByYXRoZXIgdGhhbiBvbmx5XG4gICAgICAvLyBsb29raW5nIGF0IHRoZSBib2R5LCBidXQgd2UncmUgZ29ubmEgZ2V0IGRpbWluaXNoaW5nIHJldHVybnMuXG5cbiAgICAgIHRoaXMubW92ZShuZXh0KTtcblxuICAgICAgdGhpcy5oaXN0b3J5LnVuc2hpZnQobmV4dCk7XG5cbiAgICAgIGlmICh0aGlzLmhpc3RvcnkubGVuZ3RoID4gMykge1xuICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmbHVzaENoYW5nZXMpIHtcbiAgICAgICAgZmx1c2goKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gVEhFIElTU1VFXG4gIH0sIHtcbiAgICBrZXk6ICdtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZShwb3MpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICBpZiAoISh0eXBlb2YgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzYW1lID0ge307XG5cbiAgICAgIGZvciAodmFyIHR5cGUgaW4gcG9zKSB7XG4gICAgICAgIHNhbWVbdHlwZV0gPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcG9zW3R5cGVdKSB7XG4gICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaGlzdG9yeS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gdGhpcy5oaXN0b3J5W2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwb2ludFt0eXBlXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpdGhpbihwb2ludFt0eXBlXVtrZXldLCBwb3NbdHlwZV1ba2V5XSkpIHtcbiAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICBzYW1lW3R5cGVdW2tleV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY3NzID0geyB0b3A6ICcnLCBsZWZ0OiAnJywgcmlnaHQ6ICcnLCBib3R0b206ICcnIH07XG5cbiAgICAgIHZhciB0cmFuc2NyaWJlID0gZnVuY3Rpb24gdHJhbnNjcmliZShfc2FtZSwgX3Bvcykge1xuICAgICAgICB2YXIgaGFzT3B0aW1pemF0aW9ucyA9IHR5cGVvZiBfdGhpczgub3B0aW9ucy5vcHRpbWl6YXRpb25zICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgdmFyIGdwdSA9IGhhc09wdGltaXphdGlvbnMgPyBfdGhpczgub3B0aW9ucy5vcHRpbWl6YXRpb25zLmdwdSA6IG51bGw7XG4gICAgICAgIGlmIChncHUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdmFyIHlQb3MgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHhQb3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKF9zYW1lLnRvcCkge1xuICAgICAgICAgICAgY3NzLnRvcCA9IDA7XG4gICAgICAgICAgICB5UG9zID0gX3Bvcy50b3A7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcy5ib3R0b20gPSAwO1xuICAgICAgICAgICAgeVBvcyA9IC1fcG9zLmJvdHRvbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3NhbWUubGVmdCkge1xuICAgICAgICAgICAgY3NzLmxlZnQgPSAwO1xuICAgICAgICAgICAgeFBvcyA9IF9wb3MubGVmdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzLnJpZ2h0ID0gMDtcbiAgICAgICAgICAgIHhQb3MgPSAtX3Bvcy5yaWdodDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEpIHtcbiAgICAgICAgICAgIC8vIEh1YlNwb3QvdGV0aGVyIzIwN1xuICAgICAgICAgICAgdmFyIHJldGluYSA9IHdpbmRvdy5tYXRjaE1lZGlhKCdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxLjNkcHB4KScpLm1hdGNoZXMgfHwgd2luZG93Lm1hdGNoTWVkaWEoJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAxLjMpJykubWF0Y2hlcztcbiAgICAgICAgICAgIGlmICghcmV0aW5hKSB7XG4gICAgICAgICAgICAgIHhQb3MgPSBNYXRoLnJvdW5kKHhQb3MpO1xuICAgICAgICAgICAgICB5UG9zID0gTWF0aC5yb3VuZCh5UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjc3NbdHJhbnNmb3JtS2V5XSA9ICd0cmFuc2xhdGVYKCcgKyB4UG9zICsgJ3B4KSB0cmFuc2xhdGVZKCcgKyB5UG9zICsgJ3B4KSc7XG5cbiAgICAgICAgICBpZiAodHJhbnNmb3JtS2V5ICE9PSAnbXNUcmFuc2Zvcm0nKSB7XG4gICAgICAgICAgICAvLyBUaGUgWiB0cmFuc2Zvcm0gd2lsbCBrZWVwIHRoaXMgaW4gdGhlIEdQVSAoZmFzdGVyLCBhbmQgcHJldmVudHMgYXJ0aWZhY3RzKSxcbiAgICAgICAgICAgIC8vIGJ1dCBJRTkgZG9lc24ndCBzdXBwb3J0IDNkIHRyYW5zZm9ybXMgYW5kIHdpbGwgY2hva2UuXG4gICAgICAgICAgICBjc3NbdHJhbnNmb3JtS2V5XSArPSBcIiB0cmFuc2xhdGVaKDApXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChfc2FtZS50b3ApIHtcbiAgICAgICAgICAgIGNzcy50b3AgPSBfcG9zLnRvcCArICdweCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcy5ib3R0b20gPSBfcG9zLmJvdHRvbSArICdweCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF9zYW1lLmxlZnQpIHtcbiAgICAgICAgICAgIGNzcy5sZWZ0ID0gX3Bvcy5sZWZ0ICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzLnJpZ2h0ID0gX3Bvcy5yaWdodCArICdweCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgbW92ZWQgPSBmYWxzZTtcbiAgICAgIGlmICgoc2FtZS5wYWdlLnRvcCB8fCBzYW1lLnBhZ2UuYm90dG9tKSAmJiAoc2FtZS5wYWdlLmxlZnQgfHwgc2FtZS5wYWdlLnJpZ2h0KSkge1xuICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0cmFuc2NyaWJlKHNhbWUucGFnZSwgcG9zLnBhZ2UpO1xuICAgICAgfSBlbHNlIGlmICgoc2FtZS52aWV3cG9ydC50b3AgfHwgc2FtZS52aWV3cG9ydC5ib3R0b20pICYmIChzYW1lLnZpZXdwb3J0LmxlZnQgfHwgc2FtZS52aWV3cG9ydC5yaWdodCkpIHtcbiAgICAgICAgY3NzLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgdHJhbnNjcmliZShzYW1lLnZpZXdwb3J0LCBwb3Mudmlld3BvcnQpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2FtZS5vZmZzZXQgIT09ICd1bmRlZmluZWQnICYmIHNhbWUub2Zmc2V0LnRvcCAmJiBzYW1lLm9mZnNldC5sZWZ0KSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY3NzLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gX3RoaXM4LmNhY2hlKCd0YXJnZXQtb2Zmc2V0cGFyZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChfdGhpczgudGFyZ2V0KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChnZXRPZmZzZXRQYXJlbnQoX3RoaXM4LmVsZW1lbnQpICE9PSBvZmZzZXRQYXJlbnQpIHtcbiAgICAgICAgICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXM4LmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChfdGhpczguZWxlbWVudCk7XG4gICAgICAgICAgICAgIG9mZnNldFBhcmVudC5hcHBlbmRDaGlsZChfdGhpczguZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cmFuc2NyaWJlKHNhbWUub2Zmc2V0LCBwb3Mub2Zmc2V0KTtcbiAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIH0pKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0cmFuc2NyaWJlKHsgdG9wOiB0cnVlLCBsZWZ0OiB0cnVlIH0sIHBvcy5wYWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtb3ZlZCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJvZHlFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmJvZHlFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9mZnNldFBhcmVudElzQm9keSA9IHRydWU7XG4gICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnROb2RlICYmIGN1cnJlbnROb2RlLm5vZGVUeXBlID09PSAxICYmIGN1cnJlbnROb2RlLnRhZ05hbWUgIT09ICdCT0RZJykge1xuICAgICAgICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpLnBvc2l0aW9uICE9PSAnc3RhdGljJykge1xuICAgICAgICAgICAgICBvZmZzZXRQYXJlbnRJc0JvZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW9mZnNldFBhcmVudElzQm9keSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQW55IGNzcyBjaGFuZ2Ugd2lsbCB0cmlnZ2VyIGEgcmVwYWludCwgc28gbGV0J3MgYXZvaWQgb25lIGlmIG5vdGhpbmcgY2hhbmdlZFxuICAgICAgdmFyIHdyaXRlQ1NTID0ge307XG4gICAgICB2YXIgd3JpdGUgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBjc3MpIHtcbiAgICAgICAgdmFyIHZhbCA9IGNzc1trZXldO1xuICAgICAgICB2YXIgZWxWYWwgPSB0aGlzLmVsZW1lbnQuc3R5bGVba2V5XTtcblxuICAgICAgICBpZiAoZWxWYWwgIT09IHZhbCkge1xuICAgICAgICAgIHdyaXRlID0gdHJ1ZTtcbiAgICAgICAgICB3cml0ZUNTU1trZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh3cml0ZSkge1xuICAgICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXh0ZW5kKF90aGlzOC5lbGVtZW50LnN0eWxlLCB3cml0ZUNTUyk7XG4gICAgICAgICAgX3RoaXM4LnRyaWdnZXIoJ3JlcG9zaXRpb25lZCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGV0aGVyQ2xhc3M7XG59KShFdmVudGVkKTtcblxuVGV0aGVyQ2xhc3MubW9kdWxlcyA9IFtdO1xuXG5UZXRoZXJCYXNlLnBvc2l0aW9uID0gcG9zaXRpb247XG5cbnZhciBUZXRoZXIgPSBleHRlbmQoVGV0aGVyQ2xhc3MsIFRldGhlckJhc2UpO1xuLyogZ2xvYmFscyBUZXRoZXJCYXNlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cbnZhciBfVGV0aGVyQmFzZSRVdGlscyA9IFRldGhlckJhc2UuVXRpbHM7XG52YXIgZ2V0Qm91bmRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0Qm91bmRzO1xudmFyIGV4dGVuZCA9IF9UZXRoZXJCYXNlJFV0aWxzLmV4dGVuZDtcbnZhciB1cGRhdGVDbGFzc2VzID0gX1RldGhlckJhc2UkVXRpbHMudXBkYXRlQ2xhc3NlcztcbnZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xuXG52YXIgQk9VTkRTX0ZPUk1BVCA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107XG5cbmZ1bmN0aW9uIGdldEJvdW5kaW5nUmVjdCh0ZXRoZXIsIHRvKSB7XG4gIGlmICh0byA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICB0byA9IHRldGhlci5zY3JvbGxQYXJlbnRzWzBdO1xuICB9IGVsc2UgaWYgKHRvID09PSAnd2luZG93Jykge1xuICAgIHRvID0gW3BhZ2VYT2Zmc2V0LCBwYWdlWU9mZnNldCwgaW5uZXJXaWR0aCArIHBhZ2VYT2Zmc2V0LCBpbm5lckhlaWdodCArIHBhZ2VZT2Zmc2V0XTtcbiAgfVxuXG4gIGlmICh0byA9PT0gZG9jdW1lbnQpIHtcbiAgICB0byA9IHRvLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdG8ubm9kZVR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBub2RlID0gdG87XG4gICAgICB2YXIgc2l6ZSA9IGdldEJvdW5kcyh0byk7XG4gICAgICB2YXIgcG9zID0gc2l6ZTtcbiAgICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodG8pO1xuXG4gICAgICB0byA9IFtwb3MubGVmdCwgcG9zLnRvcCwgc2l6ZS53aWR0aCArIHBvcy5sZWZ0LCBzaXplLmhlaWdodCArIHBvcy50b3BdO1xuXG4gICAgICAvLyBBY2NvdW50IGFueSBwYXJlbnQgRnJhbWVzIHNjcm9sbCBvZmZzZXRcbiAgICAgIGlmIChub2RlLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgIHZhciB3aW4gPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgICAgIHRvWzBdICs9IHdpbi5wYWdlWE9mZnNldDtcbiAgICAgICAgdG9bMV0gKz0gd2luLnBhZ2VZT2Zmc2V0O1xuICAgICAgICB0b1syXSArPSB3aW4ucGFnZVhPZmZzZXQ7XG4gICAgICAgIHRvWzNdICs9IHdpbi5wYWdlWU9mZnNldDtcbiAgICAgIH1cblxuICAgICAgQk9VTkRTX0ZPUk1BVC5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlLCBpKSB7XG4gICAgICAgIHNpZGUgPSBzaWRlWzBdLnRvVXBwZXJDYXNlKCkgKyBzaWRlLnN1YnN0cigxKTtcbiAgICAgICAgaWYgKHNpZGUgPT09ICdUb3AnIHx8IHNpZGUgPT09ICdMZWZ0Jykge1xuICAgICAgICAgIHRvW2ldICs9IHBhcnNlRmxvYXQoc3R5bGVbJ2JvcmRlcicgKyBzaWRlICsgJ1dpZHRoJ10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvW2ldIC09IHBhcnNlRmxvYXQoc3R5bGVbJ2JvcmRlcicgKyBzaWRlICsgJ1dpZHRoJ10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG5UZXRoZXJCYXNlLm1vZHVsZXMucHVzaCh7XG4gIHBvc2l0aW9uOiBmdW5jdGlvbiBwb3NpdGlvbihfcmVmKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcbiAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcbiAgICB2YXIgdGFyZ2V0QXR0YWNobWVudCA9IF9yZWYudGFyZ2V0QXR0YWNobWVudDtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgX2NhY2hlID0gdGhpcy5jYWNoZSgnZWxlbWVudC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0Qm91bmRzKF90aGlzLmVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgdmFyIGhlaWdodCA9IF9jYWNoZS5oZWlnaHQ7XG4gICAgdmFyIHdpZHRoID0gX2NhY2hlLndpZHRoO1xuXG4gICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCAmJiB0eXBlb2YgdGhpcy5sYXN0U2l6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBfbGFzdFNpemUgPSB0aGlzLmxhc3RTaXplO1xuXG4gICAgICAvLyBIYW5kbGUgdGhlIGl0ZW0gZ2V0dGluZyBoaWRkZW4gYXMgYSByZXN1bHQgb2Ygb3VyIHBvc2l0aW9uaW5nIHdpdGhvdXQgZ2xpdGNoaW5nXG4gICAgICAvLyB0aGUgY2xhc3NlcyBpbiBhbmQgb3V0XG4gICAgICB3aWR0aCA9IF9sYXN0U2l6ZS53aWR0aDtcbiAgICAgIGhlaWdodCA9IF9sYXN0U2l6ZS5oZWlnaHQ7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFNpemUgPSB0aGlzLmNhY2hlKCd0YXJnZXQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmdldFRhcmdldEJvdW5kcygpO1xuICAgIH0pO1xuXG4gICAgdmFyIHRhcmdldEhlaWdodCA9IHRhcmdldFNpemUuaGVpZ2h0O1xuICAgIHZhciB0YXJnZXRXaWR0aCA9IHRhcmdldFNpemUud2lkdGg7XG5cbiAgICB2YXIgYWxsQ2xhc3NlcyA9IFt0aGlzLmdldENsYXNzKCdwaW5uZWQnKSwgdGhpcy5nZXRDbGFzcygnb3V0LW9mLWJvdW5kcycpXTtcblxuICAgIHRoaXMub3B0aW9ucy5jb25zdHJhaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICB2YXIgb3V0T2ZCb3VuZHNDbGFzcyA9IGNvbnN0cmFpbnQub3V0T2ZCb3VuZHNDbGFzcztcbiAgICAgIHZhciBwaW5uZWRDbGFzcyA9IGNvbnN0cmFpbnQucGlubmVkQ2xhc3M7XG5cbiAgICAgIGlmIChvdXRPZkJvdW5kc0NsYXNzKSB7XG4gICAgICAgIGFsbENsYXNzZXMucHVzaChvdXRPZkJvdW5kc0NsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwaW5uZWRDbGFzcykge1xuICAgICAgICBhbGxDbGFzc2VzLnB1c2gocGlubmVkQ2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWxsQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcbiAgICAgIFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICBhbGxDbGFzc2VzLnB1c2goY2xzICsgJy0nICsgc2lkZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBhZGRDbGFzc2VzID0gW107XG5cbiAgICB2YXIgdEF0dGFjaG1lbnQgPSBleHRlbmQoe30sIHRhcmdldEF0dGFjaG1lbnQpO1xuICAgIHZhciBlQXR0YWNobWVudCA9IGV4dGVuZCh7fSwgdGhpcy5hdHRhY2htZW50KTtcblxuICAgIHRoaXMub3B0aW9ucy5jb25zdHJhaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICB2YXIgdG8gPSBjb25zdHJhaW50LnRvO1xuICAgICAgdmFyIGF0dGFjaG1lbnQgPSBjb25zdHJhaW50LmF0dGFjaG1lbnQ7XG4gICAgICB2YXIgcGluID0gY29uc3RyYWludC5waW47XG5cbiAgICAgIGlmICh0eXBlb2YgYXR0YWNobWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYXR0YWNobWVudCA9ICcnO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlQXR0YWNoWCA9IHVuZGVmaW5lZCxcbiAgICAgICAgICBjaGFuZ2VBdHRhY2hZID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGF0dGFjaG1lbnQuaW5kZXhPZignICcpID49IDApIHtcbiAgICAgICAgdmFyIF9hdHRhY2htZW50JHNwbGl0ID0gYXR0YWNobWVudC5zcGxpdCgnICcpO1xuXG4gICAgICAgIHZhciBfYXR0YWNobWVudCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfYXR0YWNobWVudCRzcGxpdCwgMik7XG5cbiAgICAgICAgY2hhbmdlQXR0YWNoWSA9IF9hdHRhY2htZW50JHNwbGl0MlswXTtcbiAgICAgICAgY2hhbmdlQXR0YWNoWCA9IF9hdHRhY2htZW50JHNwbGl0MlsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYW5nZUF0dGFjaFggPSBjaGFuZ2VBdHRhY2hZID0gYXR0YWNobWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGJvdW5kcyA9IGdldEJvdW5kaW5nUmVjdChfdGhpcywgdG8pO1xuXG4gICAgICBpZiAoY2hhbmdlQXR0YWNoWSA9PT0gJ3RhcmdldCcgfHwgY2hhbmdlQXR0YWNoWSA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgdEF0dGFjaG1lbnQudG9wID09PSAndG9wJykge1xuICAgICAgICAgIHRvcCArPSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIHRBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICB0b3AgLT0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAndG9nZXRoZXInKSB7XG4gICAgICAgIGlmICh0QXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScgJiYgdG9wIDwgYm91bmRzWzFdKSB7XG4gICAgICAgICAgICB0b3AgKz0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cbiAgICAgICAgICAgIHRvcCArPSBoZWlnaHQ7XG4gICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAndG9wJztcbiAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcgJiYgdG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIHRvcCAtIChoZWlnaHQgLSB0YXJnZXRIZWlnaHQpID49IGJvdW5kc1sxXSkge1xuICAgICAgICAgICAgdG9wIC09IGhlaWdodCAtIHRhcmdldEhlaWdodDtcbiAgICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuXG4gICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodEF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuICAgICAgICAgIGlmIChlQXR0YWNobWVudC50b3AgPT09ICd0b3AnICYmIHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSkge1xuICAgICAgICAgICAgdG9wIC09IHRhcmdldEhlaWdodDtcbiAgICAgICAgICAgIHRBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuXG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC50b3AgPT09ICdib3R0b20nICYmIHRvcCA8IGJvdW5kc1sxXSAmJiB0b3AgKyAoaGVpZ2h0ICogMiAtIHRhcmdldEhlaWdodCkgPD0gYm91bmRzWzNdKSB7XG4gICAgICAgICAgICB0b3AgKz0gaGVpZ2h0IC0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG5cbiAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0QXR0YWNobWVudC50b3AgPT09ICdtaWRkbGUnKSB7XG4gICAgICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgdG9wICs9IGhlaWdodDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlQXR0YWNoWCA9PT0gJ3RhcmdldCcgfHwgY2hhbmdlQXR0YWNoWCA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdICYmIHRBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdICYmIHRBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBsZWZ0IC09IHRhcmdldFdpZHRoO1xuICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZUF0dGFjaFggPT09ICd0b2dldGhlcicpIHtcbiAgICAgICAgaWYgKGxlZnQgPCBib3VuZHNbMF0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcblxuICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcblxuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsZWZ0ICsgd2lkdGggPiBib3VuZHNbMl0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXG4gICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBsZWZ0IC09IHRhcmdldFdpZHRoO1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcblxuICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRBdHRhY2htZW50LmxlZnQgPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSAmJiBlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKGxlZnQgPCBib3VuZHNbMF0gJiYgZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAnZWxlbWVudCcgfHwgY2hhbmdlQXR0YWNoWSA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuICAgICAgICAgIHRvcCArPSBoZWlnaHQ7XG4gICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hYID09PSAnZWxlbWVudCcgfHwgY2hhbmdlQXR0YWNoWCA9PT0gJ2JvdGgnKSB7XG4gICAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gd2lkdGg7XG4gICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIGxlZnQgKz0gd2lkdGggLyAyO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcGluID09PSAnc3RyaW5nJykge1xuICAgICAgICBwaW4gPSBwaW4uc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICByZXR1cm4gcC50cmltKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwaW4gPT09IHRydWUpIHtcbiAgICAgICAgcGluID0gWyd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nXTtcbiAgICAgIH1cblxuICAgICAgcGluID0gcGluIHx8IFtdO1xuXG4gICAgICB2YXIgcGlubmVkID0gW107XG4gICAgICB2YXIgb29iID0gW107XG5cbiAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0pIHtcbiAgICAgICAgaWYgKHBpbi5pbmRleE9mKCd0b3AnKSA+PSAwKSB7XG4gICAgICAgICAgdG9wID0gYm91bmRzWzFdO1xuICAgICAgICAgIHBpbm5lZC5wdXNoKCd0b3AnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvb2IucHVzaCgndG9wJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSkge1xuICAgICAgICBpZiAocGluLmluZGV4T2YoJ2JvdHRvbScpID49IDApIHtcbiAgICAgICAgICB0b3AgPSBib3VuZHNbM10gLSBoZWlnaHQ7XG4gICAgICAgICAgcGlubmVkLnB1c2goJ2JvdHRvbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9vYi5wdXNoKCdib3R0b20nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGVmdCA8IGJvdW5kc1swXSkge1xuICAgICAgICBpZiAocGluLmluZGV4T2YoJ2xlZnQnKSA+PSAwKSB7XG4gICAgICAgICAgbGVmdCA9IGJvdW5kc1swXTtcbiAgICAgICAgICBwaW5uZWQucHVzaCgnbGVmdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9vYi5wdXNoKCdsZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSkge1xuICAgICAgICBpZiAocGluLmluZGV4T2YoJ3JpZ2h0JykgPj0gMCkge1xuICAgICAgICAgIGxlZnQgPSBib3VuZHNbMl0gLSB3aWR0aDtcbiAgICAgICAgICBwaW5uZWQucHVzaCgncmlnaHQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvb2IucHVzaCgncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGlubmVkLmxlbmd0aCkge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBwaW5uZWRDbGFzcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMucGlubmVkQ2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwaW5uZWRDbGFzcyA9IF90aGlzLm9wdGlvbnMucGlubmVkQ2xhc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBpbm5lZENsYXNzID0gX3RoaXMuZ2V0Q2xhc3MoJ3Bpbm5lZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFkZENsYXNzZXMucHVzaChwaW5uZWRDbGFzcyk7XG4gICAgICAgICAgcGlubmVkLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgICAgIGFkZENsYXNzZXMucHVzaChwaW5uZWRDbGFzcyArICctJyArIHNpZGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob29iLmxlbmd0aCkge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBvb2JDbGFzcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMub3V0T2ZCb3VuZHNDbGFzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9vYkNsYXNzID0gX3RoaXMub3B0aW9ucy5vdXRPZkJvdW5kc0NsYXNzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvb2JDbGFzcyA9IF90aGlzLmdldENsYXNzKCdvdXQtb2YtYm91bmRzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKG9vYkNsYXNzKTtcbiAgICAgICAgICBvb2IuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKG9vYkNsYXNzICsgJy0nICsgc2lkZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW5uZWQuaW5kZXhPZignbGVmdCcpID49IDAgfHwgcGlubmVkLmluZGV4T2YoJ3JpZ2h0JykgPj0gMCkge1xuICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gdEF0dGFjaG1lbnQubGVmdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHBpbm5lZC5pbmRleE9mKCd0b3AnKSA+PSAwIHx8IHBpbm5lZC5pbmRleE9mKCdib3R0b20nKSA+PSAwKSB7XG4gICAgICAgIGVBdHRhY2htZW50LnRvcCA9IHRBdHRhY2htZW50LnRvcCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodEF0dGFjaG1lbnQudG9wICE9PSB0YXJnZXRBdHRhY2htZW50LnRvcCB8fCB0QXR0YWNobWVudC5sZWZ0ICE9PSB0YXJnZXRBdHRhY2htZW50LmxlZnQgfHwgZUF0dGFjaG1lbnQudG9wICE9PSBfdGhpcy5hdHRhY2htZW50LnRvcCB8fCBlQXR0YWNobWVudC5sZWZ0ICE9PSBfdGhpcy5hdHRhY2htZW50LmxlZnQpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlQXR0YWNoQ2xhc3NlcyhlQXR0YWNobWVudCwgdEF0dGFjaG1lbnQpO1xuICAgICAgICBfdGhpcy50cmlnZ2VyKCd1cGRhdGUnLCB7XG4gICAgICAgICAgYXR0YWNobWVudDogZUF0dGFjaG1lbnQsXG4gICAgICAgICAgdGFyZ2V0QXR0YWNobWVudDogdEF0dGFjaG1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIShfdGhpcy5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMgPT09IGZhbHNlKSkge1xuICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzLnRhcmdldCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG4gICAgICB9XG4gICAgICB1cGRhdGVDbGFzc2VzKF90aGlzLmVsZW1lbnQsIGFkZENsYXNzZXMsIGFsbENsYXNzZXMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTtcbiAgfVxufSk7XG4vKiBnbG9iYWxzIFRldGhlckJhc2UgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX1RldGhlckJhc2UkVXRpbHMgPSBUZXRoZXJCYXNlLlV0aWxzO1xudmFyIGdldEJvdW5kcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldEJvdW5kcztcbnZhciB1cGRhdGVDbGFzc2VzID0gX1RldGhlckJhc2UkVXRpbHMudXBkYXRlQ2xhc3NlcztcbnZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xuXG5UZXRoZXJCYXNlLm1vZHVsZXMucHVzaCh7XG4gIHBvc2l0aW9uOiBmdW5jdGlvbiBwb3NpdGlvbihfcmVmKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcbiAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcblxuICAgIHZhciBfY2FjaGUgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRCb3VuZHMoX3RoaXMuZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGVpZ2h0ID0gX2NhY2hlLmhlaWdodDtcbiAgICB2YXIgd2lkdGggPSBfY2FjaGUud2lkdGg7XG5cbiAgICB2YXIgdGFyZ2V0UG9zID0gdGhpcy5nZXRUYXJnZXRCb3VuZHMoKTtcblxuICAgIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgdmFyIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuXG4gICAgdmFyIGFidXR0ZWQgPSBbXTtcbiAgICBpZiAodG9wIDw9IHRhcmdldFBvcy5ib3R0b20gJiYgYm90dG9tID49IHRhcmdldFBvcy50b3ApIHtcbiAgICAgIFsnbGVmdCcsICdyaWdodCddLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgdmFyIHRhcmdldFBvc1NpZGUgPSB0YXJnZXRQb3Nbc2lkZV07XG4gICAgICAgIGlmICh0YXJnZXRQb3NTaWRlID09PSBsZWZ0IHx8IHRhcmdldFBvc1NpZGUgPT09IHJpZ2h0KSB7XG4gICAgICAgICAgYWJ1dHRlZC5wdXNoKHNpZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobGVmdCA8PSB0YXJnZXRQb3MucmlnaHQgJiYgcmlnaHQgPj0gdGFyZ2V0UG9zLmxlZnQpIHtcbiAgICAgIFsndG9wJywgJ2JvdHRvbSddLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgdmFyIHRhcmdldFBvc1NpZGUgPSB0YXJnZXRQb3Nbc2lkZV07XG4gICAgICAgIGlmICh0YXJnZXRQb3NTaWRlID09PSB0b3AgfHwgdGFyZ2V0UG9zU2lkZSA9PT0gYm90dG9tKSB7XG4gICAgICAgICAgYWJ1dHRlZC5wdXNoKHNpZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgYWxsQ2xhc3NlcyA9IFtdO1xuICAgIHZhciBhZGRDbGFzc2VzID0gW107XG5cbiAgICB2YXIgc2lkZXMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddO1xuICAgIGFsbENsYXNzZXMucHVzaCh0aGlzLmdldENsYXNzKCdhYnV0dGVkJykpO1xuICAgIHNpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgIGFsbENsYXNzZXMucHVzaChfdGhpcy5nZXRDbGFzcygnYWJ1dHRlZCcpICsgJy0nICsgc2lkZSk7XG4gICAgfSk7XG5cbiAgICBpZiAoYWJ1dHRlZC5sZW5ndGgpIHtcbiAgICAgIGFkZENsYXNzZXMucHVzaCh0aGlzLmdldENsYXNzKCdhYnV0dGVkJykpO1xuICAgIH1cblxuICAgIGFidXR0ZWQuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgYWRkQ2xhc3Nlcy5wdXNoKF90aGlzLmdldENsYXNzKCdhYnV0dGVkJykgKyAnLScgKyBzaWRlKTtcbiAgICB9KTtcblxuICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghKF90aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXMudGFyZ2V0LCBhZGRDbGFzc2VzLCBhbGxDbGFzc2VzKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXMuZWxlbWVudCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG4vKiBnbG9iYWxzIFRldGhlckJhc2UgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10pIF9pWydyZXR1cm4nXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7IH0gfTsgfSkoKTtcblxuVGV0aGVyQmFzZS5tb2R1bGVzLnB1c2goe1xuICBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oX3JlZikge1xuICAgIHZhciB0b3AgPSBfcmVmLnRvcDtcbiAgICB2YXIgbGVmdCA9IF9yZWYubGVmdDtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLnNoaWZ0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5vcHRpb25zLnNoaWZ0O1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnNoaWZ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaGlmdCA9IHRoaXMub3B0aW9ucy5zaGlmdC5jYWxsKHRoaXMsIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfSk7XG4gICAgfVxuXG4gICAgdmFyIHNoaWZ0VG9wID0gdW5kZWZpbmVkLFxuICAgICAgICBzaGlmdExlZnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHR5cGVvZiBzaGlmdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNoaWZ0ID0gc2hpZnQuc3BsaXQoJyAnKTtcbiAgICAgIHNoaWZ0WzFdID0gc2hpZnRbMV0gfHwgc2hpZnRbMF07XG5cbiAgICAgIHZhciBfc2hpZnQgPSBzaGlmdDtcblxuICAgICAgdmFyIF9zaGlmdDIgPSBfc2xpY2VkVG9BcnJheShfc2hpZnQsIDIpO1xuXG4gICAgICBzaGlmdFRvcCA9IF9zaGlmdDJbMF07XG4gICAgICBzaGlmdExlZnQgPSBfc2hpZnQyWzFdO1xuXG4gICAgICBzaGlmdFRvcCA9IHBhcnNlRmxvYXQoc2hpZnRUb3AsIDEwKTtcbiAgICAgIHNoaWZ0TGVmdCA9IHBhcnNlRmxvYXQoc2hpZnRMZWZ0LCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNoaWZ0VG9wID0gc2hpZnQudG9wO1xuICAgICAgc2hpZnRMZWZ0ID0gc2hpZnQubGVmdDtcbiAgICB9XG5cbiAgICB0b3AgKz0gc2hpZnRUb3A7XG4gICAgbGVmdCArPSBzaGlmdExlZnQ7XG5cbiAgICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xuICB9XG59KTtcbnJldHVybiBUZXRoZXI7XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90ZXRoZXIvZGlzdC9qcy90ZXRoZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgZGl2LCBhLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBCcmVhZGNydW1iIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKSB7XG4gICAgbGV0IGJhc2ljcyA9IGNyZWF0ZUJhc2ljRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGNvbnRlbnQgPSBjcmVhdGVDb250ZW50RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHZhcmlhdGlvbnMgPSBjcmVhdGVWYXJpYXRpb25FeGFtcGxlcyhzb3VyY2VzKTtcblxuICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUoYmFzaWNzLCBjb250ZW50LCB2YXJpYXRpb25zKS5tYXAoXG4gICAgICAoW2Jhc2ljcywgY29udGVudCwgdmFyaWF0aW9uc10pID0+XG4gICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJhcnRpY2xlXCIgfSB9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sXG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbWFpbjogXCJCcmVhZGNydW1iXCIsXG4gICAgICAgICAgICAgICAgICBzdWJ0ZXh0OiBcIkEgYnJlYWRjcnVtYiBpcyB1c2VkIHRvIHNob3cgaGllcmFyY2h5IGJldHdlZW4gY29udGVudFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJUeXBlc1wiKV0uY29uY2F0KGJhc2ljcykpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJDb250ZW50XCIpXS5jb25jYXQoY29udGVudCkpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJWYXJpYXRpb25zXCIpXS5jb25jYXQodmFyaWF0aW9ucykpXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pXG4gICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgRE9NOiB2VHJlZSQsXG4gICAgICByb3V0ZXI6IHhzLm5ldmVyKClcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQmFzaWNFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlW10+IHtcbiAgICBsZXQgZXgxID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcihbXG4gICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgIHsgdGV4dDogXCJTdG9yZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICB7IHRleHQ6IFwiVC1TaGlydFwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKFtcbiAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgeyB0ZXh0OiBcIlN0b3JlXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgIHsgdGV4dDogXCJULVNoaXJ0XCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICBdKWAsXG4gICAgICBoZWFkZXI6IFwiQnJlYWRjcnVtYlwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBzdGFuZGFyZCBicmVhZGNydW1iLlwiXG4gICAgfSk7XG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BbmdsZVJpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiU3RvcmVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiVC1TaGlydFwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BbmdsZVJpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiU3RvcmVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiVC1TaGlydFwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTtcbiAgICByZXR1cm4geHMuY29tYmluZShleDEuRE9NLCBleDIuRE9NKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVDb250ZW50RXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJEaXZpZGVyXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGJyZWFkY3J1bWIgY2FuIGNvbnRhaW4gYSBkaXZpZGVyIHRvIHNob3cgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHNlY3Rpb25zLCB0aGlzIGNhbiBiZSBmb3JtYXR0ZWQgYXMgYW4gaWNvbiBvciB0ZXh0LlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTtcbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IGRpdmlkZXI6IFwifFwiIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgZGl2aWRlcjogXCJ8XCIgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTtcbiAgICBsZXQgZXgzID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlNlY3Rpb25cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgYnJlYWRjcnVtYiBjYW4gY29udGFpbiBzZWN0aW9ucyB0aGF0IGNhbiBlaXRoZXIgYmUgZm9ybWF0dGVkIGFzIGEgbGluayBvciB0ZXh0LlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFuZ2xlUmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlNlYXJjaFwiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQW5nbGVSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiU2VhcmNoXCIsIGFjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTtcbiAgICBsZXQgZXg0ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkxpbmtcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc2VjdGlvbiBtYXkgYmUgbGlua2FibGUgb3IgY29udGFpbiBhIGxpbmsuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQW5nbGVSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBbXCJTZWFyY2ggZm9yOiBcIiwgYShcInBhcGVyIHRvd2Vsc1wiKV0sIGFjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BbmdsZVJpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFtcIlNlYXJjaCBmb3I6IFwiLCBhKFwicGFwZXIgdG93ZWxzXCIpXSwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIHJldHVybiB4cy5jb21iaW5lKGV4MS5ET00sIGV4Mi5ET00sIGV4My5ET00sIGV4NC5ET00pO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVZhcmlhdGlvbkV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU2l6ZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBicmVhZGNydW1iIGNhbiB2YXJ5IGluIHNpemUuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5NaW5pLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuTWluaSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTtcbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuVGlueSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLlRpbnksIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSlgXG4gICAgfSk7XG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLlNtYWxsLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuU21hbGwsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSlgXG4gICAgfSk7IGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5NZWRpdW0sIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5NZWRpdW0sIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSlgXG4gICAgfSk7IGxldCBleDUgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5MYXJnZSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkxhcmdlLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIGxldCBleDYgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5CaWcsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5CaWcsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSlgXG4gICAgfSk7IGxldCBleDcgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5IdWdlLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuSHVnZSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTsgbGV0IGV4OCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLk1hc3NpdmUsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5NYXNzaXZlLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIHJldHVybiB4cy5jb21iaW5lKGV4MS5ET00sIGV4Mi5ET00sIGV4My5ET00sIGV4NC5ET00sIGV4NS5ET00sIGV4Ni5ET00sIGV4Ny5ET00sIGV4OC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9icmVhZGNydW1iLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIENvbnRlbnQge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBmaWVsZEV4YW1wbGVzID0gY3JlYXRlRmllbGRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZmllbGRzRXhhbXBsZXMgPSBjcmVhdGVGaWVsZHNFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgdGV4dGFyZWFFeGFtcGxlcyA9IGNyZWF0ZVRleHRBcmVhRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGNoZWNrYm94RXhhbXBsZXMgPSBjcmVhdGVDaGVja2JveEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCByYWRpb0NoZWNrYm94RXhhbXBsZXMgPSBjcmVhdGVSYWRpb0NoZWNrYm94RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGRyb3Bkb3duRXhhbXBsZXMgPSBjcmVhdGVEcm9wZG93bkV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBtdWx0aXBsZVNlbGVjdEV4YW1wbGVzID0gY3JlYXRlTXVsdGlwbGVTZWxlY3RFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgbWVzc2FnZUV4YW1wbGVzID0gY3JlYXRlTWVzc2FnZUV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIFtdLmNvbmNhdChcbiAgICAgIGZpZWxkRXhhbXBsZXMsIGZpZWxkc0V4YW1wbGVzLCB0ZXh0YXJlYUV4YW1wbGVzLFxuICAgICAgY2hlY2tib3hFeGFtcGxlcywgcmFkaW9DaGVja2JveEV4YW1wbGVzLCBkcm9wZG93bkV4YW1wbGVzLFxuICAgICAgbXVsdGlwbGVTZWxlY3RFeGFtcGxlcywgbWVzc2FnZUV4YW1wbGVzXG4gICAgKS5tYXAoeCA9PiB4LkRPTSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRmllbGRFeGFtcGxlcyhzb3VyY2VzKSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkZpZWxkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZpZWxkIGlzIGEgZm9ybSBlbGVtZW50IGNvbnRhaW5pbmcgYSBsYWJlbCBhbmQgYW4gaW5wdXRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIlVzZXIgSW5wdXRcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKCldIH0gfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiVXNlciBJbnB1dFwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoKV19fSlcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXhdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUZpZWxkc0V4YW1wbGVzKHNvdXJjZXMpIHtcblxuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRmllbGRzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHNldCBvZiBmaWVsZHMgY2FuIGFwcGVhciBncm91cGVkIHRvZ2V0aGVyXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJGaXJzdCBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV0gfSB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIk1pZGRsZSBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIk1pZGRsZSBOYW1lXCIgfSldIH0gfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJMYXN0IG5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldIH0gfSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDogeyBsYWJlbDogXCJGaXJzdCBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldfX0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDogeyBsYWJlbDogXCJNaWRkbGUgbmFtZVwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIk1pZGRsZSBOYW1lXCJ9KV19fSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIkxhc3QgbmFtZVwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwifSldfX0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcblxuICAgIH0pO1xuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiRmlyc3QgbmFtZVwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldIH0gfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJNaWRkbGUgbmFtZVwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwiIH0pXSB9IH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiTGFzdCBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXSB9IH0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDogeyBsYWJlbDogXCJGaXJzdCBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldfX0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDogeyBsYWJlbDogXCJNaWRkbGUgbmFtZVwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIk1pZGRsZSBOYW1lXCJ9KV19fSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIkxhc3QgbmFtZVwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwifSldfX0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgZXgzID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBpbmxpbmU6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyB3aWR0aDogOCB9LFxuICAgICAgICAgICAgY29udGVudDogeyBsYWJlbDogXCJOYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV0gfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyB3aWR0aDogMyB9LFxuICAgICAgICAgICAgY29udGVudDogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIiB9KV1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgd2lkdGg6IDUgfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtpbmxpbmU6IHRydWV9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7d2lkdGg6IDh9LFxuICAgICAgICAgICAgY29udGVudDogeyBsYWJlbDogXCJOYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczoge3dpZHRoOiAzfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIn0pXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczoge3dpZHRoOiA1fSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleDEsIGV4MiwgZXgzXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVUZXh0QXJlYUV4YW1wbGVzKHNvdXJjZXMpIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiVGV4dCBBcmVhXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHRleHRhcmVhIGNhbiBiZSB1c2VkIHRvIGFsbG93IGZvciBleHRlbmRlZCB1c2VyIGlucHV0LlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiVGV4dFwiLFxuICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcm93czogMTAgfSldXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJTaG9ydCB0ZXh0XCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyByb3dzOiAyIH0pXVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDogeyBcbiAgICAgICAgICBsYWJlbDogXCJUZXh0XCIsXG4gICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtyb3dzOiAxMH0pXVxuICAgICAgICB9fSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDogeyBcbiAgICAgICAgICBsYWJlbDogXCJTaG9ydCB0ZXh0XCIsXG4gICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtyb3dzOiAyfSldXG4gICAgICAgIH19KVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleF07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQ2hlY2tib3hFeGFtcGxlcyhzb3VyY2VzKSB7XG4gICAgbGV0IGV4YW1wbGUgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiQ2hlY2tib3hcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZm9ybSBjYW4gY29udGFpbiBhIGNoZWNrYm94XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgaW5saW5lOiB0cnVlIH0sIFtVSS5DaGVja2JveC5yZW5kZXIoXCJDaGVja2JveFwiKV0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBpbmxpbmU6IHRydWUgfSwgW1VJLkNoZWNrYm94LnJlbmRlcih7IHNsaWRlcjogdHJ1ZSB9LCBcIlNsaWRlclwiKV0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBpbmxpbmU6IHRydWUgfSwgW1VJLkNoZWNrYm94LnJlbmRlcih7IHRvZ2dsZTogdHJ1ZSB9LCBcIlRvZ2dsZVwiKV0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2lubGluZTogdHJ1ZX0sIFtVSS5DaGVja2JveC5yZW5kZXIoXCJDaGVja2JveFwiKV0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2lubGluZTogdHJ1ZX0sIFtVSS5DaGVja2JveC5yZW5kZXIoe3NsaWRlcjogdHJ1ZX0sIFwiU2xpZGVyXCIpXSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7aW5saW5lOiB0cnVlfSwgW1VJLkNoZWNrYm94LnJlbmRlcih7dG9nZ2xlOiB0cnVlfSwgXCJUb2dnbGVcIildKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleGFtcGxlXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJhZGlvQ2hlY2tib3hFeGFtcGxlcyhzb3VyY2VzKSB7XG4gICAgbGV0IGV4YW1wbGUgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUmFkaW8gQ2hlY2tib3hcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZm9ybSBjYW4gY29udGFpbiBhIHJhZGlvIGNoZWNrYm94XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHsgaW5saW5lOiB0cnVlIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiU2VsZWN0IHlvdXIgZmF2b3VyaXRlIGZydWl0OlwiLFxuICAgICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJBcHBsZXNcIildKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyByYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwiIH0sIFwiT3Jhbmdlc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJQZWFyc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJHcmFwZWZydWl0XCIpXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBncm91cGVkOiB0cnVlIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiU2VsZWN0IHlvdXIgZmF2b3VyaXRlIGZydWl0OlwiLFxuICAgICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJBcHBsZXNcIildKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyByYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwiIH0sIFwiT3Jhbmdlc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJQZWFyc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJHcmFwZWZydWl0XCIpXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBpbmxpbmU6IHRydWUgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJTZWxlY3QgeW91ciBmYXZvdXJpdGUgZnJ1aXQ6XCIsXG4gICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHtyYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwifSwgXCJBcHBsZXNcIildKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoe3JhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCJ9LCBcIk9yYW5nZXNcIildKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoe3JhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCJ9LCBcIlBlYXJzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHtyYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwifSwgXCJHcmFwZWZydWl0XCIpXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBncm91cGVkOiB0cnVlIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiU2VsZWN0IHlvdXIgZmF2b3VyaXRlIGZydWl0OlwiLFxuICAgICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7cmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIn0sIFwiQXBwbGVzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHtyYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwifSwgXCJPcmFuZ2VzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHtyYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwifSwgXCJQZWFyc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7cmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIn0sIFwiR3JhcGVmcnVpdFwiKV0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleGFtcGxlXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVEcm9wZG93bkV4YW1wbGVzKHNvdXJjZXMpIHtcbiAgICBsZXQgZGRsR2VuZGVyID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgZGVmYXVsdDogXCJHZW5kZXJcIiwgc2VsZWN0aW9uOiB0cnVlIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKFtcbiAgICAgICAgeyBtYWluOiBcIk1hbGVcIiwgdmFsdWU6IFwiTWFsZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGZW1hbGVcIiwgdmFsdWU6IFwiRmVtYWxlXCIgfVxuICAgICAgXSlcbiAgICB9KTtcbiAgICBsZXQgZXgxID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkRyb3Bkb3duXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZvcm0gY2FuIGNvbnRhaW4gYSBkcm9wZG93blwiLFxuICAgICAgVk5vZGUkOiBkZGxHZW5kZXIuRE9NLm1hcChkZGxHZW5kZXIgPT4gVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkdlbmRlclwiLCBtYWluOiBkZGxHZW5kZXIgfSB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYGxldCBkZGxHZW5kZXIgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2Yoe2RlZmF1bHQ6IFwiR2VuZGVyXCIsIHNlbGVjdGlvbjogdHJ1ZX0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKFtcbiAgICAgICAge21haW46IFwiTWFsZVwiLCB2YWx1ZTogXCJNYWxlXCJ9LFxuICAgICAgICB7bWFpbjogXCJGZW1hbGVcIiwgdmFsdWU6IFwiRmVtYWxlXCJ9XG4gICAgICBdKVxuICAgIH0pO1xuICAgIGxldCB2VHJlZSQgPSBkZGxHZW5kZXIuRE9NLm1hcChcbiAgICAgICAgZGRsR2VuZGVyID0+IFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7bGFiZWw6IFwiR2VuZGVyXCIsIG1haW46IGRkbEdlbmRlcn19KVxuICAgICAgXSlcbiAgICApO2BcbiAgICB9KTtcblxuICAgIGxldCBjb3VudHJpZXMgPSBbXCJVbml0ZWQgU3RhdGVzXCIsIFwiVGhlIE5ldGhlcmxhbmRzXCIsIFwiQmVsZ2l1bVwiLCBcIkdlcm1hbnlcIiwgXCJGcmFuY2VcIl07XG4gICAgbGV0IGRkbENvdW50cmllcyA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7IHNlbGVjdGlvbjogdHJ1ZSwgc2VhcmNoOiB0cnVlIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKGNvdW50cmllcy5tYXAoY291bnRyeSA9PiAoeyBtYWluOiBjb3VudHJ5LCB2YWx1ZTogY291bnRyeSB9KSkpXG4gICAgfSk7XG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogZGRsQ291bnRyaWVzLkRPTS5tYXAoZGRsQ291bnRyaWVzID0+IFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJDb3VudHJ5XCIsIG1haW46IGRkbENvdW50cmllcyB9IH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgbGV0IGNvdW50cmllcyA9IFtcIlVuaXRlZCBTdGF0ZXNcIiwgXCJUaGUgTmV0aGVybGFuZHNcIiwgXCJCZWxnaXVtXCIsIFwiR2VybWFueVwiLCBcIkZyYW5jZVwiXTtcbiAgICBsZXQgZGRsQ291bnRyaWVzID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgc2VsZWN0aW9uOiB0cnVlLCBzZWFyY2g6IHRydWUgfSksXG4gICAgICBjb250ZW50JDogeHMub2YoY291bnRyaWVzLm1hcChjb3VudHJ5ID0+ICh7IG1haW46IGNvdW50cnksIHZhbHVlOiBjb3VudHJ5IH0pKSlcbiAgICB9KVxuICAgIGxldCB2VHJlZSQ6IGRkbENvdW50cmllcy5ET00ubWFwKFxuICAgICAgZGRsQ291bnRyaWVzID0+IFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIkNvdW50cnlcIiwgbWFpbjogZGRsQ291bnRyaWVzfX0pXG4gICAgICBdKVxuICAgIClgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW2V4MSwgZXgyXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNdWx0aXBsZVNlbGVjdEV4YW1wbGVzKHNvdXJjZXMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUV4YW1wbGVzKHNvdXJjZXMpIHtcbiAgICBsZXQgZXhhbXBsZSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJNZXNzYWdlXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZvcm0gY2FuIGNvbnRhaW4gYSBtZXNzYWdlXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7IGNvbG9yOiBVSS5Db2xvci5FcnJvciB9LFxuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGhlYWRlcjogXCJXZSBoYWQgc29tZSBpc3N1ZXNcIixcbiAgICAgICAgICAgIGJvZHk6IFtVSS5MaXN0LnJlbmRlcih7IGJ1bGxldGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlBsZWFzZSBlbnRlciB5b3VyIGZpcnN0IG5hbWVcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUGxlYXNlIGVudGVyIHlvdXIgbGFzdCBuYW1lXCIgfVxuICAgICAgICAgICAgXSldXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7IGNvbG9yOiBVSS5Db2xvci5FcnJvciB9LFxuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGhlYWRlcjogXCJXZSBoYWQgc29tZSBpc3N1ZXNcIixcbiAgICAgICAgICAgIGJvZHk6IFtVSS5MaXN0LnJlbmRlcih7IGJ1bGxldGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlBsZWFzZSBlbnRlciB5b3VyIGZpcnN0IG5hbWVcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUGxlYXNlIGVudGVyIHlvdXIgbGFzdCBuYW1lXCIgfVxuICAgICAgICAgICAgXSldXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleGFtcGxlXTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9jb250ZW50LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEZpZWxkc1ZhcmlhdGlvbnMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBlcXVhbFdpZHRoRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRXZlbmx5IERpdmlkZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkZpZWxkcyBjYW4gaGF2ZSB0aGVpciB3aWR0aHMgZGl2aWRlZCBldmVubHlcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTWlkZGxlIG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJNaWRkbGUgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZ3JvdXBlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkdyb3VwZWQgZmllbGRzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJGaWVsZHMgY2FuIHNob3cgcmVsYXRlZCBjaG9pY2VzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7IGdyb3VwZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIkFwcGxlc1wiKV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIk9yYW5nZXNcIildKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IG5hbWU6IFwiZnJ1aXRcIiwgcmFkaW86IHRydWUgfSwgXCJQZWFyc1wiKV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIkdyYXBlZnJ1aXRcIildKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7IGdyb3VwZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIkFwcGxlc1wiKV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIk9yYW5nZXNcIildKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IG5hbWU6IFwiZnJ1aXRcIiwgcmFkaW86IHRydWUgfSwgXCJQZWFyc1wiKV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIkdyYXBlZnJ1aXRcIildKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgaW5saW5lRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiSW5saW5lXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJNdWx0aXBsZSBmaWVsZHMgbWF5IGJlIGlubGluZSBpbiBhIHJvd1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7IGlubGluZTogdHJ1ZSB9LFxuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIlBob25lIE51bWJlclwiLFxuICAgICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCIoeHh4KVwifSldKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwieHh4XCJ9KV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJ4eHh4XCJ9KV0pXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHsgaW5saW5lOiB0cnVlIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiUGhvbmUgTnVtYmVyXCIsXG4gICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIih4eHgpXCJ9KV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJ4eHhcIn0pXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcInh4eHhcIn0pXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGVxdWFsV2lkdGhFeC5ET00sIGdyb3VwZWRFeC5ET00sIGlubGluZUV4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZmllbGRzdmFyaWF0aW9ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBGaWVsZFZhcmlhdGlvbnMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBpbmxpbmVFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJJbmxpbmVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZmllbGQgY2FuIGhhdmUgaXRzIGxhYmVsIG5leHQgdG8gaW5zdGVhZCBvZiBhYm92ZSBpdC5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7IGlubGluZTogdHJ1ZSB9LFxuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIkZ1bGwgbmFtZVwiLFxuICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRnVsbCBOYW1lXCIgfSldXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczoge2lubGluZTogdHJ1ZX0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiRnVsbCBuYW1lXCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZ1bGwgTmFtZVwifSldXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgd2lkdGhFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJXaWR0aFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBmaWVsZCBjYW4gc3BlY2lmeSBpdHMgd2lkdGggaW4gZ3JpZCBjb2x1bW5zXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IHdpZHRoOiA2IH0sXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyB3aWR0aDogNCB9LFxuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJNaWRkbGVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgd2lkdGg6IDYgfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIyIFdpZGVcIiB9KV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAxMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIxMiBXaWRlXCIgfSldKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIyIFdpZGVcIiB9KV0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogOCB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCI4IFdpZGVcIiB9KV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiA2IH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjYgV2lkZVwiIH0pXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDIgfSwgW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiMiBXaWRlXCIgfSldKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IHdpZHRoOiA2IH0sXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyB3aWR0aDogNCB9LFxuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJNaWRkbGVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgd2lkdGg6IDYgfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIyIFdpZGVcIiB9KV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAxMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIxMiBXaWRlXCIgfSldKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIyIFdpZGVcIiB9KV0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogOCB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCI4IFdpZGVcIiB9KV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiA2IH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjYgV2lkZVwiIH0pXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDIgfSwgW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiMiBXaWRlXCIgfSldKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgcmVxdWlyZWRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjpcIlJlcXVpcmVkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZpZWxkIGNhbiBzaG93IHRoYXQgaW5wdXQgaXMgbWFuZGV0b3J5XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczoge3JlcXVpcmVkOiB0cnVlfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJGdWxsIG5hbWVcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRnVsbCBOYW1lXCJ9KV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIFRlcm1zIGFuZCBDb25kaXRpb25zXCIpXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHtyZXF1aXJlZDogdHJ1ZX0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiRnVsbCBuYW1lXCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZ1bGwgTmFtZVwifSldXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoXCJJIGFncmVlIHRvIHRoZSBUZXJtcyBhbmQgQ29uZGl0aW9uc1wiKV0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGlubGluZUV4LkRPTSwgd2lkdGhFeC5ET00sIHJlcXVpcmVkRXguRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9maWVsZHZhcmlhdGlvbnMudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRm9ybVZhcmlhdGlvbnMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBlcXVhbFdpZHRoRXhhbXBsZSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJFcXVhbCBXaWR0aFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiRm9ybXMgY2FuIGF1dG9tYXRpY2FsbHkgZGl2aWRlIGZpZWxkcyB0byBiZSBlcXVhbCB3aWR0aFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJVc2VybmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJVc2VybmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIlBhc3N3b3JkXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHR5cGU6IFwicGFzc3dvcmRcIiwgcGxhY2Vob2xkZXI6IFwiUGFzc3dvcmRcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTWlkZGxlIG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiVXNlcm5hbWVcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiVXNlcm5hbWVcIn0pXVxuICAgICAgICAgIH19KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIlBhc3N3b3JkXCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3R5cGU6IFwicGFzc3dvcmRcIiwgcGxhY2Vob2xkZXI6IFwiUGFzc3dvcmRcIn0pXVxuICAgICAgICAgIH19KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBuYW1lXCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgIH19KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIk1pZGRsZSBuYW1lXCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIk1pZGRsZSBOYW1lXCJ9KV1cbiAgICAgICAgICB9fSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJMYXN0IG5hbWVcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICB9fSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGludmVydGVkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiSW52ZXJ0ZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZm9ybSBvbiBhIGRhcmsgYmFja2dyb3VuZCBtYXkgaGF2ZSB0byBpbnZlcnQgaXRzIGNvbG9yIHNjaGVtZVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5TZWdtZW50LnJlbmRlcih7IGludmVydGVkOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuRm9ybS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgbmFtZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7aW5saW5lOiB0cnVlfSwgW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIFRlcm1zIGFuZCBDb25kaXRpb25zXCIpXSksXG4gICAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLlNlZ21lbnQucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Gb3JtLnJlbmRlcih7IGludmVydGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBuYW1lXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtpbmxpbmU6IHRydWV9LCBbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgVGVybXMgYW5kIENvbmRpdGlvbnNcIildKSxcbiAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleGFtcGxlcyA9IFtdLmNvbmNhdChjcmVhdGVTaXplVmFyaWF0aW9ucyhzb3VyY2VzKSwgZXF1YWxXaWR0aEV4YW1wbGUsIGludmVydGVkRXgpO1xuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIGV4YW1wbGVzLm1hcChleCA9PiBleC5ET00pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNpemVWYXJpYXRpb25zKHNvdXJjZXMpIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU2l6ZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBmb3JtIGNhbiB2YXJ5IGluIHNpemVcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoeyBzaXplOiBcIm1pbmlcIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHtzaXplOiBcIm1pbmlcIn0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoeyBzaXplOiBcInRpbnlcIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHtzaXplOiBcInRpbnlcIn0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoeyBzaXplOiBcInNtYWxsXCIgfSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcih7c2l6ZTogXCJzbWFsbFwifSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgZXg0ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwibWVkaXVtXCIgfSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBtZWRpdW1gXG4gICAgfSk7XG4gICAgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoeyBzaXplOiBcImxhcmdlXCIgfSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcih7c2l6ZTogXCJsYXJnZVwifSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgZXg2ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwiYmlnXCIgfSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcih7c2l6ZTogXCJiaWdcIn0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IGV4NyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoeyBzaXplOiBcImh1Z2VcIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHtzaXplOiBcImh1Z2VcIn0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IGV4OCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoeyBzaXplOiBcIm1hc3NpdmVcIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHtzaXplOiBcIm1hc3NpdmVcIn0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleCwgZXgyLCBleDMsIGV4NCwgZXg1LCBleDYsIGV4NywgZXg4XTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9mb3JtdmFyaWF0aW9ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IFR5cGVzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbnRlbnQgfSBmcm9tIFwiLi9jb250ZW50XCI7XG5pbXBvcnQgeyBTdGF0ZXMgfSBmcm9tIFwiLi9zdGF0ZXNcIjtcbmltcG9ydCB7IEZvcm1WYXJpYXRpb25zIH0gZnJvbSBcIi4vZm9ybXZhcmlhdGlvbnNcIjtcbmltcG9ydCB7IEZpZWxkVmFyaWF0aW9ucyB9IGZyb20gXCIuL2ZpZWxkdmFyaWF0aW9uc1wiO1xuaW1wb3J0IHsgRmllbGRzVmFyaWF0aW9ucyB9IGZyb20gXCIuL2ZpZWxkc3ZhcmlhdGlvbnNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBGb3JtIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKSB7XG4gICAgbGV0IHR5cGVzID0gVHlwZXMucnVuKHNvdXJjZXMpO1xuICAgIGxldCBjb250ZW50ID0gQ29udGVudC5ydW4oc291cmNlcyk7XG4gICAgbGV0IHN0YXRlcyA9IFN0YXRlcy5ydW4oc291cmNlcyk7XG4gICAgbGV0IGZvcm1WYXJpYXRpb25zID0gRm9ybVZhcmlhdGlvbnMucnVuKHNvdXJjZXMpO1xuICAgIGxldCBmaWVsZFZhcmlhdGlvbnMgPSBGaWVsZFZhcmlhdGlvbnMucnVuKHNvdXJjZXMpO1xuICAgIGxldCBmaWVsZHNWYXJpYXRpb25zID0gRmllbGRzVmFyaWF0aW9ucy5ydW4oc291cmNlcyk7XG5cbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHR5cGVzLCBjb250ZW50LCBzdGF0ZXMsIGZvcm1WYXJpYXRpb25zLCBmaWVsZFZhcmlhdGlvbnMsIGZpZWxkc1ZhcmlhdGlvbnMpLm1hcChcbiAgICAgIChbdHlwZXMsIGNvbnRlbnQsIHN0YXRlcywgZm9ybVZhcmlhdGlvbnMsIGZpZWxkVmFyaWF0aW9ucywgZmllbGRzVmFyaWF0aW9uc10pID0+XG4gICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJhcnRpY2xlXCIgfSB9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sXG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbWFpbjogXCJGb3JtXCIsXG4gICAgICAgICAgICAgICAgICBzdWJ0ZXh0OiBcIkEgZm9ybSBkaXNwbGF5cyBhIHNldCBvZiByZWxhdGVkIHVzZXIgaW5wdXQgZmllbGRzIGluIGEgc3RydWN0dXJlZCB3YXlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlR5cGVzXCIpXVxuICAgICAgICAgICAgICAuY29uY2F0KHR5cGVzKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkNvbnRlbnRcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoY29udGVudClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJTdGF0ZXNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoc3RhdGVzKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkZvcm0gVmFyaWF0aW9uc1wiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdChmb3JtVmFyaWF0aW9ucylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJGaWVsZCBWYXJpYXRpb25zXCIpXVxuICAgICAgICAgICAgICAuY29uY2F0KGZpZWxkVmFyaWF0aW9ucylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJHcm91cCBWYXJpYXRpb25zXCIpXVxuICAgICAgICAgICAgICAuY29uY2F0KGZpZWxkc1ZhcmlhdGlvbnMpXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pXG4gICAgKSBhcyBTdHJlYW08Vk5vZGU+O1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIHJvdXRlcjogeHMubmV2ZXIoKVxuICAgIH07XG4gIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9pbmRleC50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBTdGF0ZXMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBsb2FkaW5nRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiTG9hZGluZ1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiSWYgYSBmb3JtIGlzIGluIGxvYWRpbmcgc3RhdGUsIGl0IHdpbGwgYXV0b21hdGljYWxseSBzaG93IGEgbG9hZGluZyBpbmRpY2F0b3IuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKHtsb2FkaW5nOiB0cnVlfSwgW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkVtYWlsXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcigpXSB9IH0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoe2xvYWRpbmc6IHRydWV9LCBbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiRW1haWxcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKCldIH0gfSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIFxuICAgIGxldCBkZGxHZW5kZXIgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBkZWZhdWx0OiBcIkdlbmRlclwiLCBzZWxlY3Rpb246IHRydWUgfSksXG4gICAgICBjb250ZW50JDogeHMub2YoW1xuICAgICAgICB7IG1haW46IFwiTWFsZVwiLCB2YWx1ZTogXCJNYWxlXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZlbWFsZVwiLCB2YWx1ZTogXCJGZW1hbGVcIiB9XG4gICAgICBdKVxuICAgIH0pO1xuICAgIGxldCBmaWVsZEVycm9yRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRmllbGQgRXJyb3JcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkluZGl2aWR1YWwgZmllbGRzIG1heSBkaXNwbGF5IGFuIGVycm9yIHN0YXRlXCIsXG4gICAgICBWTm9kZSQ6IGRkbEdlbmRlci5ET00ubWFwKFxuICAgICAgICBkZGxHZW5kZXIgPT4gVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBwcm9wczoge2Vycm9yOiB0cnVlfSxcbiAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwifSldXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7ZXJyb3I6IHRydWV9LFxuICAgICAgICAgICAgY29udGVudDoge2xhYmVsOiBcIkdlbmRlclwiLCBtYWluOiBkZGxHZW5kZXJ9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7ZXJyb3I6IHRydWV9LFxuICAgICAgICAgICAgY29udGVudDogW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIFRlcm1zIGFuZCBDb25kaXRpb25zXCIpXVxuICAgICAgICAgIH0pLFxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICAgIGNvZGU6IGBsZXQgZGRsR2VuZGVyID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgZGVmYXVsdDogXCJHZW5kZXJcIiwgc2VsZWN0aW9uOiB0cnVlIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKFtcbiAgICAgICAgeyBtYWluOiBcIk1hbGVcIiwgdmFsdWU6IFwiTWFsZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGZW1hbGVcIiwgdmFsdWU6IFwiRmVtYWxlXCIgfVxuICAgICAgXSlcbiAgICB9KTtcbiAgICBsZXQgdlRyZWUkID0gZGRsR2VuZGVyLkRPTS5tYXAoXG4gICAgICBkZGxHZW5kZXIgPT4gVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczoge2Vycm9yOiB0cnVlfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHtlcnJvcjogdHJ1ZX0sXG4gICAgICAgICAgY29udGVudDoge2xhYmVsOiBcIkdlbmRlclwiLCBtYWluOiBkZGxHZW5kZXJ9XG4gICAgICAgIH0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7ZXJyb3I6IHRydWV9LFxuICAgICAgICAgIGNvbnRlbnQ6IFtVSS5DaGVja2JveC5yZW5kZXIoXCJJIGFncmVlIHRvIHRoZSBUZXJtcyBhbmQgQ29uZGl0aW9uc1wiKV1cbiAgICAgICAgfSksXG4gICAgICBdKVxuICAgIClgXG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGRpc2FibGVkRmllbGRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJEaXNhYmxlZCBGaWVsZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiSW5kaXZpZHVhbCBmaWVsZHMgbWF5IGJlIGRpc2FibGVkXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7ZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgZGlzYWJsZWQ6IHRydWV9LFxuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe2Rpc2FibGVkOiB0cnVlLCBwbGFjZWhvbGRlcjogXCJEaXNhYmxlZFwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IGRpc2FibGVkOiB0cnVlfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe2Rpc2FibGVkOiB0cnVlLCBwbGFjZWhvbGRlcjogXCJEaXNhYmxlZFwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IGRpc2FibGVkOiB0cnVlfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtkaXNhYmxlZDogdHJ1ZSwgcGxhY2Vob2xkZXI6IFwiRGlzYWJsZWRcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyBkaXNhYmxlZDogdHJ1ZX0sXG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtkaXNhYmxlZDogdHJ1ZSwgcGxhY2Vob2xkZXI6IFwiRGlzYWJsZWRcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCByZWFkT25seUV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlJlYWQtT25seSBGaWVsZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiSW52aWR1YWwgZmllbGRzIG1heSBiZSByZWFkIG9ubHlcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cmVhZG9ubHk6IHRydWUsIHBsYWNlaG9sZGVyOiBcIlJlYWQgT25seVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3JlYWRvbmx5OiB0cnVlLCBwbGFjZWhvbGRlcjogXCJSZWFkIE9ubHlcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cmVhZG9ubHk6IHRydWUsIHBsYWNlaG9sZGVyOiBcIlJlYWQgT25seVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3JlYWRvbmx5OiB0cnVlLCBwbGFjZWhvbGRlcjogXCJSZWFkIE9ubHlcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGxvYWRpbmdFeC5ET00sIGZpZWxkRXJyb3JFeC5ET00sIGRpc2FibGVkRmllbGRFeC5ET00sIHJlYWRPbmx5RXguRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9zdGF0ZXMudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVHlwZXMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJGb3JtXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZvcm1cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkZpcnN0IE5hbWVcIiwgbWFpbjogVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSkgfSB9KSxcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJMYXN0IE5hbWVcIiwgbWFpbjogVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KSB9IH0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIFRlcm1zIGFuZCBDb25kaXRpb25zXCIpXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLCBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KSB9IH0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkxhc3QgTmFtZVwiLCBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pIH0gfSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgVGVybXMgYW5kIENvbmRpdGlvbnNcIildKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IHN0YXRlcyA9IFtcIkFsYWJhbWFcIiwgXCJBbGFza2FcIiwgXCJBcml6b25hXCIsIFwiQXJrYW5zYXNcIiwgXCJDYWxpZm9ybmlhXCIsIFwiQ29sb3JhZG9cIiwgXCJDb25uZWN0aWN1dFwiLCBcIkRlbGF3YXJlXCJdO1xuICAgIGxldCBkZGxTdGF0ZXMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBzZWxlY3Rpb246IHRydWUgfSksXG4gICAgICBjb250ZW50JDogeHMub2Yoc3RhdGVzLm1hcChzdGF0ZSA9PiAoeyBtYWluOiBzdGF0ZSwgdmFsdWU6IHN0YXRlIH0pKSlcbiAgICB9KTtcbiAgICBsZXQgY291bnRyaWVzID0gW1wiVW5pdGVkIFN0YXRlc1wiLCBcIlRoZSBOZXRoZXJsYW5kc1wiLCBcIkJlbGdpdW1cIiwgXCJHZXJtYW55XCIsIFwiRnJhbmNlXCJdO1xuICAgIGxldCBkZGxDb3VudHJpZXMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBzZWxlY3Rpb246IHRydWUsIHNlYXJjaDogdHJ1ZSB9KSxcbiAgICAgIGNvbnRlbnQkOiB4cy5vZihjb3VudHJpZXMubWFwKGNvdW50cnkgPT4gKHsgbWFpbjogY291bnRyeSwgdmFsdWU6IGNvdW50cnkgfSkpKVxuICAgIH0pO1xuICAgIGxldCBjYXJkcyA9IFtcIlZpc2FcIiwgXCJBbWVyaWNhbiBFeHByZXNzXCIsIFwiRGlzY292ZXJcIl07XG4gICAgbGV0IGRkbENhcmRzID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgc2VsZWN0aW9uOiB0cnVlIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKGNhcmRzLm1hcChjYXJkID0+ICh7IG1haW46IGNhcmQsIHZhbHVlOiBjYXJkIH0pKSlcbiAgICB9KTtcbiAgICBsZXQgbW9udGhzID0gW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl07XG4gICAgbGV0IGRkbE1vbnRocyA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7IHNlbGVjdGlvbjogdHJ1ZSwgc2VhcmNoOiB0cnVlLCBzaXplOiBVSS5TaXplLkZsdWlkIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKG1vbnRocy5tYXAobW9udGggPT4gKHsgbWFpbjogbW9udGgsIHZhbHVlOiBtb250aCB9KSkpXG4gICAgfSk7XG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMuY29tYmluZShkZGxTdGF0ZXMuRE9NLCBkZGxDb3VudHJpZXMuRE9NLCBkZGxDYXJkcy5ET00sIGRkbE1vbnRocy5ET00pLm1hcChcbiAgICAgICAgKFtkZGxTdGF0ZXMsIGRkbENvdW50cmllcywgZGRsQ2FyZHMsIGRkbE1vbnRoc10pID0+IFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUgfSwgXCJTaGlwcGluZyBJbmZvcm1hdGlvblwiKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJOYW1lXCIsIG1haW46IFtcbiAgICAgICAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSkpLFxuICAgICAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFVJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSkpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkJpbGxpbmcgYWRyZXNzXCIsIG1haW46IFtcbiAgICAgICAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAxMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJTdHJlZXQgQWRyZXNzXCIgfSldKSxcbiAgICAgICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkFwdCAjXCIgfSldKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIlN0YXRlXCIsIG1haW46IGRkbFN0YXRlcyB9IH0pLFxuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJDb3VudHJ5XCIsIG1haW46IGRkbENvdW50cmllcyB9IH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlIH0sIFwiQmlsbGluZyBJbmZvcm1hdGlvblwiKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkNhcmQgVHlwZVwiLCBtYWluOiBkZGxDYXJkcyB9IH0pLFxuICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgcHJvcHM6IHsgd2lkdGg6IDcgfSwgY29udGVudDogeyBsYWJlbDogXCJDYXJkIE51bWJlclwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJDYXJkICNcIiB9KV0gfSB9KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHByb3BzOiB7IHdpZHRoOiAzIH0sIGNvbnRlbnQ6IHsgbGFiZWw6IFwiQ1ZDXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkNWQ1wiIH0pXSB9IH0pLFxuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgcHJvcHM6IHsgd2lkdGg6IDYgfSwgY29udGVudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkV4cGlyYXRpb25cIiwgbWFpbjogW1xuICAgICAgICAgICAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW2RkbE1vbnRoc10pLFxuICAgICAgICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiWWVhclwiIH0pXSlcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSB9LCBcIlJlY2VpcHRcIiksXG4gICAgICAgICAgLy9UT0RPIE11bHRpcGxlIGRyb3Bkb3duIGV4YW1wbGUsXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ2hlY2tib3gucmVuZGVyKHsgdG9nZ2xlOiB0cnVlIH0sIFwiRG8gbm90IGluY2x1ZGUgYSByZWNlaXB0IGluIHRoZSBwYWNrYWdlXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdCBvcmRlclwiKVxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICAgIGNvZGU6IGBsZXQgc3RhdGVzID0gW1wiQWxhYmFtYVwiLCBcIkFsYXNrYVwiLCBcIkFyaXpvbmFcIiwgXCJBcmthbnNhc1wiLCBcIkNhbGlmb3JuaWFcIiwgXCJDb2xvcmFkb1wiLCBcIkNvbm5lY3RpY3V0XCIsIFwiRGVsYXdhcmVcIl07XG4gICAgICBsZXQgZGRsU3RhdGVzID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgICAgcHJvcHMkOiB4cy5vZih7c2VsZWN0aW9uOiB0cnVlfSksXG4gICAgICAgIGNvbnRlbnQkOiB4cy5vZihzdGF0ZXMubWFwKHN0YXRlID0+ICh7bWFpbjogc3RhdGUsIHZhbHVlOiBzdGF0ZX0pKSlcbiAgICAgIH0pO1xuICAgICAgbGV0IGNvdW50cmllcyA9IFtcIlVuaXRlZCBTdGF0ZXNcIiwgXCJUaGUgTmV0aGVybGFuZHNcIiwgXCJCZWxnaXVtXCIsIFwiR2VybWFueVwiLCBcIkZyYW5jZVwiXTtcbiAgICAgIGxldCBkZGxDb3VudHJpZXMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgICBwcm9wcyQ6IHhzLm9mKHtzZWxlY3Rpb246IHRydWUsIHNlYXJjaDogdHJ1ZX0pLFxuICAgICAgICBjb250ZW50JDogeHMub2YoY291bnRyaWVzLm1hcChjb3VudHJ5ID0+ICh7bWFpbjogY291bnRyeSwgdmFsdWU6IGNvdW50cnl9KSkpXG4gICAgICB9KTtcbiAgICAgIGxldCBjYXJkcyA9IFtcIlZpc2FcIiwgXCJBbWVyaWNhbiBFeHByZXNzXCIsIFwiRGlzY292ZXJcIl07XG4gICAgICBsZXQgZGRsQ2FyZHMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgICBwcm9wcyQ6IHhzLm9mKHtzZWxlY3Rpb246IHRydWV9KSxcbiAgICAgICAgY29udGVudCQ6IHhzLm9mKGNhcmRzLm1hcChjYXJkID0+ICh7bWFpbjogY2FyZCwgdmFsdWU6IGNhcmR9KSkpXG4gICAgICB9KTtcbiAgICAgIGxldCBtb250aHMgPSBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXTtcbiAgICAgIGxldCBkZGxNb250aHMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgICBwcm9wcyQ6IHhzLm9mKHtzZWxlY3Rpb246IHRydWUsIHNlYXJjaDogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5GbHVpZH0pLFxuICAgICAgICBjb250ZW50JDogeHMub2YobW9udGhzLm1hcChtb250aCA9PiAoe21haW46IG1vbnRoLCB2YWx1ZTogbW9udGh9KSkpXG4gICAgICB9KTtcbiAgICAgIGxldCB2VHJlZSQ6IHhzLmNvbWJpbmUoZGRsU3RhdGVzLkRPTSwgZGRsQ291bnRyaWVzLkRPTSwgZGRsQ2FyZHMuRE9NLCBkZGxNb250aHMuRE9NKS5tYXAoXG4gICAgICAgIChbZGRsU3RhdGVzLCBkZGxDb3VudHJpZXMsIGRkbENhcmRzLCBkZGxNb250aHNdKSA9PiBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7ZGl2aWRpbmc6IHRydWV9LCBcIlNoaXBwaW5nIEluZm9ybWF0aW9uXCIpLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiTmFtZVwiLCBtYWluOiBbXG4gICAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFVJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdfX0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiQmlsbGluZyBhZHJlc3NcIiwgbWFpbjogW1xuICAgICAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAxMn0sIFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiU3RyZWV0IEFkcmVzc1wifSldKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDR9LCBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkFwdCAjXCJ9KV0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF19fSksXG4gICAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7ZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDoge2xhYmVsOiBcIlN0YXRlXCIsIG1haW46IGRkbFN0YXRlc319KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDoge2xhYmVsOiBcIkNvdW50cnlcIiwgbWFpbjogZGRsQ291bnRyaWVzfX0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7ZGl2aWRpbmc6IHRydWV9LCBcIkJpbGxpbmcgSW5mb3JtYXRpb25cIiksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIkNhcmQgVHlwZVwiLCBtYWluOiBkZGxDYXJkc319KSxcbiAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7cHJvcHM6IHt3aWR0aDogN30sIGNvbnRlbnQ6IHsgbGFiZWw6IFwiQ2FyZCBOdW1iZXJcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJDYXJkICNcIn0pXX19KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7cHJvcHM6IHt3aWR0aDogM30sIGNvbnRlbnQ6IHsgbGFiZWw6IFwiQ1ZDXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiQ1ZDXCJ9KV19fSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe3Byb3BzOiB7d2lkdGg6IDZ9LCBjb250ZW50OiB7IGxhYmVsOiBcIkV4cGlyYXRpb25cIiwgbWFpbjogW1xuICAgICAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbZGRsTW9udGhzXSksXG4gICAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiWWVhclwifSldKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXX19KVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoe2RpdmlkaW5nOiB0cnVlfSwgXCJSZWNlaXB0XCIpLFxuICAgICAgICAgIC8vVE9ETyBNdWx0aXBsZSBkcm9wZG93biBleGFtcGxlLFxuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkNoZWNrYm94LnJlbmRlcih7dG9nZ2xlOiB0cnVlfSwgXCJEbyBub3QgaW5jbHVkZSBhIHJlY2VpcHQgaW4gdGhlIHBhY2thZ2VcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0IG9yZGVyXCIpXG4gICAgICAgIF0pXG4gICAgICApYFxuICAgIH0pO1xuICAgIHJldHVybiB4cy5jb21iaW5lKGV4LkRPTSwgZXgyLkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2Zvcm0vdHlwZXMudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgcCwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29udGVudCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IHJvd3NFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJSb3dzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHJvdyBpcyBhIGhvcml6b250YWwgZ3JvdXBpbmcgb2YgY29sdW1uc1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLCBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLCBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMyB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSwgXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLCBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGNvbHVtbnNFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJDb2x1bW5zXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJDb2x1bW5zIGVhY2ggY29udGFpbiBndXR0ZXJzIGdpdmluZyB0aGVtIGVxdWFsIHNwYWNpbmcgZnJvbSBvdGhlciBjb2x1bW5zLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA4fSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUocm93c0V4LkRPTSwgY29sdW1uc0V4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi9jb250ZW50LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IFR5cGVzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbnRlbnQgfSBmcm9tIFwiLi9jb250ZW50XCI7XG5pbXBvcnQgeyBWYXJpYXRpb25zfSBmcm9tIFwiLi92YXJpYXRpb25zXCI7XG5pbXBvcnQgeyBSZXNwb25zaXZlVmFyaWF0aW9uc30gZnJvbSBcIi4vcmVzcG9uc2l2ZVZhcmlhdGlvbnNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBEZWZpbml0aW9uIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKTogU3RyZWFtPFZOb2RlPiB7XG4gICAgbGV0IHR5cGVzID0gVHlwZXMucnVuKHNvdXJjZXMpO1xuICAgIGxldCBjb250ZW50ID0gQ29udGVudC5ydW4oc291cmNlcyk7XG4gICAgbGV0IHZhcmlhdGlvbnMgPSBWYXJpYXRpb25zLnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgcmVzcG9uc2l2ZSA9IFJlc3BvbnNpdmVWYXJpYXRpb25zLnJ1bihzb3VyY2VzKTtcblxuICAgIGxldCB2VHJlZSQgPSB4cy5jb21iaW5lKHR5cGVzLCBjb250ZW50LCB2YXJpYXRpb25zLCByZXNwb25zaXZlKS5tYXAoXG4gICAgICAoW3R5cGVzLCBjb250ZW50LCB2YXJpYXRpb25zLCByZXNwb25zaXZlXSkgPT4gVUkuQ29udGFpbmVyLnJlbmRlcihbXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiVHlwZXNcIildXG4gICAgICAgICAgLmNvbmNhdCh0eXBlcylcbiAgICAgICAgKSxcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJDb250ZW50XCIpXVxuICAgICAgICAgIC5jb25jYXQoY29udGVudClcbiAgICAgICAgKSxcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJWYXJpYXRpb25zXCIpXVxuICAgICAgICAgIC5jb25jYXQodmFyaWF0aW9ucylcbiAgICAgICAgKSxcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJSZXNwb25zaXZlIFZhcmlhbnRzXCIpXVxuICAgICAgICAgIC5jb25jYXQocmVzcG9uc2l2ZSlcbiAgICAgICAgKSxcbiAgICAgIF0pXG4gICAgKTtcbiAgICByZXR1cm4gdlRyZWUkO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL2RlZmluaXRpb24vaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgcCwgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zaXZlVmFyaWF0aW9ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGRvdWJsaW5nRXggPSBjcmVhdGVEb3VibGluZ0V4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBzdGFja2FibGVFeCA9IGNyZWF0ZVN0YWNrYWJsZUV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCByZXZlcnNlZEV4ID0gY3JlYXRlUmV2ZXJzZWRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZGV2aWNlVmlzaWJpbGl0eUV4ID0gY3JlYXRlRGV2aWNlVmlzaWJsaXR5RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHJlc3BvbnNpdmVXaWR0aEV4ID0gY3JlYXRlUmVzcG9uc2l2ZVdpdGhFeGFtcGxlcyhzb3VyY2VzKTtcblxuICAgIGxldCBleGFtcGxlcyA9IFtdLmNvbmNhdChkb3VibGluZ0V4LCBzdGFja2FibGVFeCwgcmV2ZXJzZWRFeCwgZGV2aWNlVmlzaWJpbGl0eUV4LCByZXNwb25zaXZlV2lkdGhFeCk7XG4gICAgcmV0dXJuIHhzLmNvbWJpbmUuYXBwbHkobnVsbCwgZXhhbXBsZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRG91YmxpbmdFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcblxuICAgIGxldCBkb3VibGluZ0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkRvdWJsaW5nXCIsXG4gICAgICBkZXNjcmlwdGlvbjogW1xuICAgICAgICBwKFwiQSBncmlkIGNhbiBkb3VibGUgaXRzIGNvbHVtbiB3aWR0aCBvbiB0YWJsZXQgYW5kIG1vYmlsZSBzaXplc1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuSW5mbyB9LCBcIkEgZ3JpZCB3aWxsIHJvdW5kIGl0cyBjb2x1bW5zIHRvIHRoZSBjbG9zZXN0IHJlYXNvbmFibGUgdmFsdWUgd2hlbiBkb3VibGluZywgZm9yIGV4YW1wbGUgYSBmaXZlIGNvbHVtbiBncmlkIHdpbGwgdXNlIDIgbW9iaWxlLCAzIHRhYmxldCwgNSBkZXNrdG9wLiBUbyBmb3JjZSAxIGNvbHVtbiBvbiBtb2JpbGUgeW91IGNhbiBhZGQgc3RhY2thYmxlXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiA1LCBkb3VibGluZzogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe3dpZHRoOiA1LCBkb3VibGluZzogdHJ1ZX0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFtkb3VibGluZ0V4LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTdGFja2FibGVFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgc3RhY2thYmxlRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU3RhY2thYmxlXCIsXG4gICAgICBkZXNjcmlwdGlvbjogW1xuICAgICAgICBwKFwiQSBncmlkIGNhbiBoYXZlIGl0cyBjb2x1bW5zIHN0YWNrIG9uLXRvcCBvZiBlYWNoIG90aGVyIGFmdGVyIHJlYWNoaW5nIG1vYmlsZSBicmVha3BvaW50c1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuSW5mbyB9LCBcIlRvIHNlZSBhIGdyaWQgc3RhY2ssIHRyeSByZXNpemluZyB5b3VyIGJyb3dzZXIgdG8gYSBzbWFsbCB3aWR0aFwiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgc3RhY2thYmxlOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDIsIHN0YWNrYWJsZTogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFtcblxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG5cbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW3N0YWNrYWJsZUV4LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSZXZlcnNlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCByZXZlcnNlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlJldmVyc2VkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogW1xuICAgICAgICBwKFwiQSBncmlkIG9yIHJvdyBjYW4gc3BlY2lmeSB0aGF0IGl0cyBjb2x1bW5zIHNob3VsZCByZXZlcnNlIG9yZGVyIGF0IGRpZmZlcmVudCBkZXZpY2Ugc2l6ZXNcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLkluZm8gfSwgXCJSZXZlcnNlZCBncmlkcyBhcmUgY29tcGF0aWJsZSB3aXRoIGRpdmlkZWQgZ3JpZHMgYW5kIG90aGVyIGNvbXBsZXggZ3JpZCB0eXBlcy5cIilcbiAgICAgIF0sXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgcmV2ZXJzZWRDb21wdXRlcjogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQSBGb3VydGhcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQSBUaGlyZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBBIFNlY29uZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBBIEZpcnN0XCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQiBGb3VydGhcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQiBUaGlyZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBCIFNlY29uZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBCIEZpcnN0XCIpXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcih7IHJldmVyc2VkVGFibGV0OiB0cnVlLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgQSBGb3VydGhcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IEEgVGhpcmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IEEgU2Vjb25kXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlRhYmxldCBBIEZpcnN0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgcmV2ZXJzZWRNb2JpbGU6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIk1vYmlsZSBBIEZvdXJ0aFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgQSBUaGlyZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgQSBTZWNvbmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIEEgRmlyc3RcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHJldmVyc2VkQ29tcHV0ZXI6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEEgRm91cnRoXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEEgVGhpcmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQSBTZWNvbmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQSBGaXJzdFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEIgRm91cnRoXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEIgVGhpcmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQiBTZWNvbmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQiBGaXJzdFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyByZXZlcnNlZFRhYmxldDogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IEEgRm91cnRoXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlRhYmxldCBBIFRoaXJkXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlRhYmxldCBBIFNlY29uZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgQSBGaXJzdFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcih7IHJldmVyc2VkTW9iaWxlOiB0cnVlLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgQSBGb3VydGhcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIEEgVGhpcmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIEEgU2Vjb25kXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIk1vYmlsZSBBIEZpcnN0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgcmV2ZXJzZWRFeDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgdmVydFJldmVyc2VkQ29tcHV0ZXI6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgUm93IDRcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBSb3cgM1wiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIFJvdyAyXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgUm93IDFcIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHZlcnRSZXZlcnNlZENvbXB1dGVyOiB0cnVlLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIFJvdyA0XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgUm93IDNcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBSb3cgMlwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIFJvdyAxXCIpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCByZXZlcnNlZEV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB2ZXJ0UmV2ZXJzZWRUYWJsZXQ6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyA0XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyAzXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyAyXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyAxXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB2ZXJ0UmV2ZXJzZWRUYWJsZXQ6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyA0XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyAzXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyAyXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IFJvdyAxXCIpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCByZXZlcnNlZEV4NCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB2ZXJ0UmV2ZXJzZWRNb2JpbGU6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyA0XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyAzXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyAyXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyAxXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB2ZXJ0UmV2ZXJzZWRNb2JpbGU6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyA0XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyAzXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyAyXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIFJvdyAxXCIpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbcmV2ZXJzZWRFeC5ET00sIHJldmVyc2VkRXgyLkRPTSwgcmV2ZXJzZWRFeDMuRE9NLCByZXZlcnNlZEV4NC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZURldmljZVZpc2libGl0eUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCB2aXNpYmlsaXR5RXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRGV2aWNlIFZpc2liaWxpdHlcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJBIGNvbHVtbnMgb3Igcm93IGNhbiBhcHBlYXIgb25seSBmb3IgYSBzcGVjaWZpYyBkZXZpY2UsIG9yIHNjcmVlbiBzaXplc1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuSW5mbyB9LCBcIlNlZSBjb250YWluZXIgZG9jdW1lbnRhdGlvbiBmb3IgaW5mb3JtYXRpb24gb24gYnJlYWtwb2ludCBjYWxjdWxhdGlvbnNcIilcbiAgICAgIF0sXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAyLCBsYXJnZXNjcmVlbk9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJMYXJnZSBTY3JlZW5cIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiTGFyZ2UgU2NyZWVuXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogMiwgbW9iaWxlT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIk1vYmlsZVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJNb2JpbGVcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgY29tcHV0ZXJPbmx5OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiQ29tcHV0ZXJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgbW9iaWxlT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRhYmxldCBhbmQgTW9iaWxlXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkFsbCBTaXplc1wiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJBbGwgU2l6ZXNcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiA0LCBjb21wdXRlck9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMsIHRhYmxldE9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJUYWJsZXRcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGFibGV0XCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRhYmxldFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAyLCBsYXJnZXNjcmVlbk9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJMYXJnZSBTY3JlZW5cIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiTGFyZ2UgU2NyZWVuXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogMiwgbW9iaWxlT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIk1vYmlsZVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJNb2JpbGVcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgY29tcHV0ZXJPbmx5OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiQ29tcHV0ZXJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgbW9iaWxlT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRhYmxldCBhbmQgTW9iaWxlXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkFsbCBTaXplc1wiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJBbGwgU2l6ZXNcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiA0LCBjb21wdXRlck9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMsIHRhYmxldE9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJUYWJsZXRcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGFibGV0XCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRhYmxldFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW3Zpc2liaWxpdHlFeC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNpdmVXaXRoRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IHdpZHRoRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUmVzcG9uc2l2ZSBXaWR0aFwiLFxuICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgcChcIkEgY29sdW1uIGNhbiBzcGVjaWZ5IGEgd2lkdGggZm9yIGEgc3BlY2lmaWMgZGV2aWNlXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5JbmZvIH0sIFwiSXQncyByZWNvbW1lbmRlZCB0byB1c2UgYSByZXNwb25zaXZlIHBhdHRlcm4gbGlrZSBkb3VibGluZyBvciBzdGFja2FibGUgdG8gcmVkdWNlIGNvbXBsZXhpdHkgd2hlbiBkZXNpZ25pbmcgcmVzcG9uc2l2ZWx5LCBob3dldmVyIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyBzcGVjaWZ5aW5nIGV4YWN0IHdpZHRocyBmb3Igc2NyZWVuIHNpemVzIG1heSBiZSBuZWNlc3NhcnkuXCJcbiAgICAgICAgKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgbW9iaWxlOiAxNiwgdGFibGV0OiA4LCBjb21wdXRlcjogNCB9LCBbXG4gICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBtb2JpbGU6IDE2LCB0YWJsZXQ6IDgsIGNvbXB1dGVyOiA0IH0sIFtcbiAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IG1vYmlsZTogMTYsIHRhYmxldDogOCwgY29tcHV0ZXI6IDQgfSwgW1xuICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgbW9iaWxlOiAxNiwgdGFibGV0OiA4LCBjb21wdXRlcjogNCB9LCBbXG4gICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBtb2JpbGU6IDE2LCB0YWJsZXQ6IDgsIGNvbXB1dGVyOiA0IH0sIFtcbiAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICBdKSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe21vYmlsZTogMTYsIHRhYmxldDogOCwgY29tcHV0ZXI6IDR9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7bW9iaWxlOiAxNiwgdGFibGV0OiA4LCBjb21wdXRlcjogNH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHttb2JpbGU6IDE2LCB0YWJsZXQ6IDgsIGNvbXB1dGVyOiA0fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe21vYmlsZTogMTYsIHRhYmxldDogOCwgY29tcHV0ZXI6IDR9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7bW9iaWxlOiAxNiwgdGFibGV0OiA4LCBjb21wdXRlcjogNH0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCB3aWR0aEV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQsIGxhcmdlc2NyZWVuOiAyIH0sIFtcbiAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0LCBsYXJnZXNjcmVlbjogMiB9LCBbXG4gICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCwgbGFyZ2VzY3JlZW46IDIgfSwgW1xuICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQsIGxhcmdlc2NyZWVuOiAyIH0sIFtcbiAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICBdKSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0LCBsYXJnZXNjcmVlbjogMn0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogNCwgbGFyZ2VzY3JlZW46IDJ9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDQsIGxhcmdlc2NyZWVuOiAyfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0LCBsYXJnZXNjcmVlbjogMn0pLFxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW3dpZHRoRXguRE9NLCB3aWR0aEV4Mi5ET01dO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL2RlZmluaXRpb24vcmVzcG9uc2l2ZVZhcmlhdGlvbnMudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgcCwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVHlwZXMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBiYXNpY0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFtcIkdyaWRcIiwgVUkuTGFiZWwucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLlByaW1hcnkgfSwgXCJGbGV4Ym94XCIpXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgYmFzaWMgZ3JpZFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBkaXZpZGVkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFtcIkRpdmlkZWRcIiwgVUkuTGFiZWwucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLlNlY29uZGFyeSB9LCBcIlJlcXVpcmVzIHJvd3NcIildLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNhbiBoYXZlIGRpdmlkZXJzIGJldHdlZW4gaXRzIGNvbHVtbnNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMywgZGl2aWRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe3dpZHRoOiAzLCBkaXZpZGVkOiB0cnVlfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHZlcnRpY2FsRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFtcIlZlcnRpY2FsIERpdmlkZWRcIiwgVUkuTGFiZWwucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLlNlY29uZGFyeSB9LCBcIlJlcXVpcmVzIFJvd3NcIildLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNhbiBoYXZlIGRpdmlkZXJzIGJldHdlZW4gcm93c1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHZlcnRpY2FsbHlEaXZpZGVkOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAyIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB2ZXJ0aWNhbGx5RGl2aWRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogMiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IGNlbGxlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBbXCJDZWxsZWRcIiwgVUkuTGFiZWwucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLlNlY29uZGFyeSB9LCBcIlJlcXVpcmVzIFJvd3NcIildLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNhbiBoYXZlIHJvd3MgZGl2aWRlZCBpbnRvIGNlbGxzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgY2VsbGVkOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTMgfSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMyB9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSwgICAgICAgICAgXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHtjZWxsZWQ6IHRydWV9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEzfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KVxuICAgICAgICBdKSxcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIGxldCBpbnRDZWxsZWRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogW1wiSW50ZXJuYWxseSBDZWxsZWRcIiwgVUkuTGFiZWwucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLlNlY29uZGFyeSB9LCBcIlJlcXVpcmVzIFJvd3NcIildLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNhbiBoYXZlIHJvd3MgZGl2aXNpb25zIG9ubHkgYmV0d2VlbiBpbnRlcm5hbCByb3dzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgaW50Q2VsbGVkOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLCAgICAgICAgICBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMyB9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSwgICAgICAgICAgXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyBpbnRDZWxsZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxMCB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMyB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEwIH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMyB9KVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZShiYXNpY0V4LkRPTSwgZGl2aWRlZEV4LkRPTSwgdmVydGljYWxFeC5ET00sIGNlbGxlZEV4LkRPTSwgaW50Q2VsbGVkRXguRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9kZWZpbml0aW9uL3R5cGVzLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlLCBwLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmFyaWF0aW9ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG5cbiAgICBsZXQgZmxvYXRlZEV4ID0gY3JlYXRlRmxvYXRlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCB3aWR0aEV4ID0gY3JlYXRlV2lkdGhFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgY291bnRFeCA9IGNyZWF0ZUNvdW50RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGVxdWFsV2lkdGhFeCA9IGNyZWF0ZUVxdWFsV2lkdGhFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgc3RyZXRjaGVkRXggPSBjcmVhdGVTdHJldGNoZWRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgcGFkZGVkRXggPSBjcmVhdGVQYWRkZWRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgcmVsYXhlZEV4ID0gY3JlYXRlUmVsYXhlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBjZW50ZXJlZEV4ID0gY3JlYXRlQ2VudGVyZWRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgdGV4dEV4ID0gY3JlYXRlVGV4dEFsaWdubWVudEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBhbGlnbm1lbnRFeCA9IGNyZWF0ZUFsaWdubWVudEV4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KGZsb2F0ZWRFeCwgd2lkdGhFeCwgY291bnRFeCwgZXF1YWxXaWR0aEV4LFxuICAgICAgc3RyZXRjaGVkRXgsIHBhZGRlZEV4LCByZWxheGVkRXgsIGNlbnRlcmVkRXgsIHRleHRFeCxcbiAgICAgIGFsaWdubWVudEV4KTtcbiAgICByZXR1cm4geHMuY29tYmluZS5hcHBseShudWxsLCBleGFtcGxlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGbG9hdGVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGZsb2F0ZWRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJGbG9hdGVkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGNvbHVtbiBjYW4gc2l0IGZsdXNoIGFnYWluc3QgdGhlIGxlZnQgb3IgcmlnaHQgZWRnZSBvZiBhIHJvd1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBmbG9hdDogXCJsZWZ0XCIsIHdpZHRoOiA1IH0sIFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgZmxvYXQ6IFwicmlnaHRcIiwgd2lkdGg6IDUgfSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHtmbG9hdDogXCJsZWZ0XCIsIHdpZHRoOiA1fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe2Zsb2F0OiBcInJpZ2h0XCIsIHdpZHRoOiA1fSksXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2Zsb2F0ZWRFeC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlV2lkdGhFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgd2lkdGhFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJDb2x1bW4gV2lkdGhcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgY29sdW1uIGNhbiB2YXJ5IGluIHdpZHRoIHRha2luZyB1cCBtb3JlIHRoYW4gYSBzaW5nbGUgZ3JpZCBjb2x1bW4uXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogOSB9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogNH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogOX0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogM30pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbd2lkdGhFeC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ291bnRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgY291bnRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJDb2x1bW4gQ291bnRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZ3JpZCBjYW4gaGF2ZSBhIGRpZmZlcmVudCBudW1iZXIgb2YgY29sdW1ucyBwZXIgcm93XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb3VudEV4LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFcXVhbFdpZHRoRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGVxdWFsV2lkdGhFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJFcXVhbCBXaWR0aFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNhbiBhdXRvbWF0aWNhbGx5IHJlc2l6ZSBhbGwgZWxlbWVudHMgdG8gc3BsaXQgdGhlIGF2YWlsYWJsZSB3aWR0aCBldmVubHlcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDggfSwgW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIzXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpXG4gICAgICAgIF0pLCBcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgIF0pLCBcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIzXCIpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBlcXVhbFdpZHRoRXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjNcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiNFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjNcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIzXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjRcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIzXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlciggW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXF1YWxXaWR0aEV4LkRPTSwgZXF1YWxXaWR0aEV4Mi5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyZXRjaGVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IHN0cmV0Y2hlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlN0cmV0Y2hlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSByb3cgY2FuIHN0cmV0Y2ggaXRzIGNvbnRlbnRzIHRvIHRha2UgdXAgdGhlIGVudGlyZSBjb2x1bW4gaGVpZ2h0XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDMsIGRpdmlkZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgc3RyZXRjaGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjNcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHt3aWR0aDogMywgZGl2aWRlZDogdHJ1ZX0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHN0cmV0Y2hlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICAgIF0pLCBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiM1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBzdHJldGNoZWRFeDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBzdHJldGNoZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA2IH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA2IH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgc3RyZXRjaGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNiB9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDYgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9KVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbc3RyZXRjaGVkRXguRE9NLCBzdHJldGNoZWRFeDIuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhZGRlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBwYWRkZWRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJQYWRkZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJBIGdyaWQgY2FuIHByZXNlcnZlIGl0cyB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBndXR0ZXJzIG9uIGZpcnN0IGFuZCBsYXN0IGNvbHVtbnNcIiksXG4gICAgICAgIHAoXCJUaGUgZm9sbG93aW5nIGdyaWQgaGFzIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIGd1dHRlcnNcIilcbiAgICAgIF0sXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLkRpdmlkZXIucmVuZGVyKCksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDIsIHBhZGRlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRGl2aWRlci5yZW5kZXIoKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgcGFkZGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pYFxuICAgIH0pO1xuICAgIGxldCBwYWRkZWRFeDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGUgZm9sbG93aW5nIGdyaWQgaGFzIHZlcnRpY2FsIGd1dHRlcnMuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLkRpdmlkZXIucmVuZGVyKCksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDIsIHZlcnRpY2FsbHlQYWRkZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkRpdmlkZXIucmVuZGVyKCksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDIsIHZlcnRpY2FsbHlQYWRkZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IHBhZGRlZEV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBmb2xsb3dpbmcgZ3JpZCBoYXMgaG9yaXpvbnRhbCBndXR0ZXJzLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5EaXZpZGVyLnJlbmRlcigpLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAyLCBob3Jpem9udGFsbHlQYWRkZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkRpdmlkZXIucmVuZGVyKCksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDIsIGhvcml6b250YWxseVBhZGRlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbcGFkZGVkRXguRE9NLCBwYWRkZWRFeDIuRE9NLCBwYWRkZWRFeDMuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJlbGF4ZWRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgcmVsYXhlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlJlbGF4ZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZ3JpZCBjYW4gaW5jcmVhc2UgaXRzIGd1dHRlcnMgdG8gYWxsb3cgZm9yIG1vcmUgbmVnYXRpdmUgc3BhY2VcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyByZWxheGVkOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHtyZWxheGVkOiB0cnVlLCB3aWR0aDogNH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCByZWxheGVkRXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHZlcnlSZWxheGVkOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHt2ZXJ5UmVsYXhlZDogdHJ1ZSwgd2lkdGg6IDR9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtyZWxheGVkRXguRE9NLCByZWxheGVkRXgyLkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDZW50ZXJlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBjZW50ZXJlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNlbnRlcmVkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQgY2FuIGhhdmUgaXRzIGNvbHVtbnMgY2VudGVyZWRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgY2VudGVyZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNCwgY2VudGVyZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7d2lkdGg6IDIsIGNlbnRlcmVkOiB0cnVlfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoe3dpZHRoOjQsIGNlbnRlcmVkOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLCAgICAgICAgXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoe3dpZHRoOjR9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2NlbnRlcmVkRXguRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVRleHRBbGlnbm1lbnRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgdGV4dEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlRleHQgQWxpZ25tZW50XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQsIHJvdywgb3IgY29sdW1uIGNhbiBzcGVjaWZ5IGl0cyB0ZXh0IGFsaWdubWVudFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHRleHRBbGlnbm1lbnQ6IFwiY2VudGVyXCIgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkNhdHNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkRvZ3NcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUG9vZGxlXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkNvY2tlcnNwYW5pZWxcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIk1vbmtleXNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB0ZXh0QWxpZ25tZW50OiBcImNlbnRlclwifSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHt3aWR0aDogM30sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJDYXRzXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJEb2dzXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlBvb2RsZVwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJDb2NrZXJzcGFuaWVsXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJNb25rZXlzXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgdGV4dEV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB0ZXh0QWxpZ25tZW50OiBcImNlbnRlclwiIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJDYXRzXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgdGV4dEFsaWdubWVudDogXCJsZWZ0XCIgfSwgW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkRvZ3NcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUG9vZGxlXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkNvY2tlcnNwYW5pZWxcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIk1vbmtleXNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgdGV4dEFsaWdubWVudDogXCJqdXN0aWZpZWRcIiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkp1c3RpZmllZCBjb250ZW50IGZpdHMgZXhhY3RseSBpbnNpZGUgdGhlIGdyaWQgY29sdW1uLCB0YWtpbmcgdXAgdGhlIGVudGlyZSB3aWR0aCBmcm9tIG9uZSBzaWRlIHRvIHRoZSBvdGhlci4gSnVzdGlmaWVkIGNvbnRlbnQgZml0cyBleGFjdGx5IGluc2lkZSB0aGUgZ3JpZCBjb2x1bW4sIHRha2luZyB1cCB0aGUgZW50aXJlIHdpZHRoIGZyb20gb25lIHNpZGUgdG8gdGhlIG90aGVyLiBKdXN0aWZpZWQgY29udGVudCBmaXRzIGV4YWN0bHkgaW5zaWRlIHRoZSBncmlkIGNvbHVtbiwgdGFraW5nIHVwIHRoZSBlbnRpcmUgd2lkdGggZnJvbSBvbmUgc2lkZSB0byB0aGUgb3RoZXIuIEp1c3RpZmllZCBjb250ZW50IGZpdHMgZXhhY3RseSBpbnNpZGUgdGhlIGdyaWQgY29sdW1uLCB0YWtpbmcgdXAgdGhlIGVudGlyZSB3aWR0aCBmcm9tIG9uZSBzaWRlIHRvIHRoZSBvdGhlci4gSnVzdGlmaWVkIGNvbnRlbnQgZml0cyBleGFjdGx5IGluc2lkZSB0aGUgZ3JpZCBjb2x1bW4sIHRha2luZyB1cCB0aGUgZW50aXJlIHdpZHRoIGZyb20gb25lIHNpZGUgdG8gdGhlIG90aGVyLlwiKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHsgdGV4dEFsaWdubWVudDogXCJjZW50ZXJcIn0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7d2lkdGg6IDN9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiQ2F0c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7dGV4dEFsaWdubWVudDogXCJsZWZ0XCJ9LCBbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiRG9nc1wiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQb29kbGVcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQ29ja2Vyc3BhbmllbFwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiTW9ua2V5c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksIFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHt0ZXh0QWxpZ25tZW50OiBcImp1c3RpZmllZFwifSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJKdXN0aWZpZWQgY29udGVudCBmaXRzIGV4YWN0bHkgaW5zaWRlIHRoZSBncmlkIGNvbHVtbiwgdGFraW5nIHVwIHRoZSBlbnRpcmUgd2lkdGggZnJvbSBvbmUgc2lkZSB0byB0aGUgb3RoZXIuIEp1c3RpZmllZCBjb250ZW50IGZpdHMgZXhhY3RseSBpbnNpZGUgdGhlIGdyaWQgY29sdW1uLCB0YWtpbmcgdXAgdGhlIGVudGlyZSB3aWR0aCBmcm9tIG9uZSBzaWRlIHRvIHRoZSBvdGhlci4gSnVzdGlmaWVkIGNvbnRlbnQgZml0cyBleGFjdGx5IGluc2lkZSB0aGUgZ3JpZCBjb2x1bW4sIHRha2luZyB1cCB0aGUgZW50aXJlIHdpZHRoIGZyb20gb25lIHNpZGUgdG8gdGhlIG90aGVyLiBKdXN0aWZpZWQgY29udGVudCBmaXRzIGV4YWN0bHkgaW5zaWRlIHRoZSBncmlkIGNvbHVtbiwgdGFraW5nIHVwIHRoZSBlbnRpcmUgd2lkdGggZnJvbSBvbmUgc2lkZSB0byB0aGUgb3RoZXIuIEp1c3RpZmllZCBjb250ZW50IGZpdHMgZXhhY3RseSBpbnNpZGUgdGhlIGdyaWQgY29sdW1uLCB0YWtpbmcgdXAgdGhlIGVudGlyZSB3aWR0aCBmcm9tIG9uZSBzaWRlIHRvIHRoZSBvdGhlci5cIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHRleHRFeDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgdGV4dEFsaWdubWVudDogXCJyaWdodFwiLCB3aWR0aDogMyB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkNhdHNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkRvZ3NcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUG9vZGxlXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkNvY2tlcnNwYW5pZWxcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIk1vbmtleXNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB0ZXh0QWxpZ25tZW50OiBcInJpZ2h0XCIsIHdpZHRoOiAzIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiQ2F0c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiRG9nc1wiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQb29kbGVcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQ29ja2Vyc3BhbmllbFwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksIFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIk1vbmtleXNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW3RleHRFeC5ET00sIHRleHRFeDIuRE9NLCB0ZXh0RXgzLkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVBbGlnbm1lbnRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgYWxpZ25tZW50RXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiVmVydGljYWwgQWxpZ25tZW50XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQsIHJvdywgb3IgY29sdW1uIGNhbiBzcGVjaWZ5IGl0cyB2ZXJ0aWNhbCBhbGlnbm1lbnQgdG8gaGF2ZSBhbGwgaXRzIGNvbHVtbnMgdmVydGljYWxseSBjZW50ZXJlZC5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBhbGlnbm1lbnQ6IFwibWlkZGxlXCIsIGNlbnRlcmVkOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpLFxuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyBhbGlnbm1lbnQ6IFwibWlkZGxlXCIsIGNlbnRlcmVkOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIiksXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgYWxpZ25tZW50RXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IGNlbnRlcmVkOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBhbGlnbm1lbnQ6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIiksXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgYWxpZ25tZW50OiBcIm1pZGRsZVwiIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpLFxuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGFsaWdubWVudDogXCJib3R0b21cIiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKSxcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGNlbnRlcmVkOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBhbGlnbm1lbnQ6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKSxcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGFsaWdubWVudDogXCJtaWRkbGVcIiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpLFxuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgYWxpZ25tZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIiksXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFthbGlnbm1lbnRFeC5ET00sIGFsaWdubWVudEV4Mi5ET01dO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL2RlZmluaXRpb24vdmFyaWF0aW9ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IE92ZXJ2aWV3IH0gZnJvbSBcIi4vb3ZlcnZpZXdcIjtcbmltcG9ydCB7IERlZmluaXRpb24gfSBmcm9tIFwiLi9kZWZpbml0aW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgR3JpZCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcykge1xuICAgIGxldCBvdmVydmlldyA9IE92ZXJ2aWV3LnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgZGVmaW5pdGlvbiA9IERlZmluaXRpb24ucnVuKHNvdXJjZXMpO1xuXG4gICAgbGV0IHRhYnMgPSBVSS5UYWJzLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgbGFiZWxzOiBbXCJPdmVydmlld1wiLCBcIkRlZmluaXRpb25cIl0sXG4gICAgICBjb250ZW50OiBbb3ZlcnZpZXcubWFwKG8gPT4gW29dKSwgZGVmaW5pdGlvbi5tYXAobyA9PiBbb10pXSxcbiAgICAgIG1lbnVQcm9wcyQ6IHhzLm9mKHsgZXF1YWxXaWR0aDogdHJ1ZSB9KSxcbiAgICAgIHNlZ21lbnRQcm9wcyQ6IHhzLm9mKHsgYmFzaWM6IHRydWUgfSlcbiAgICB9KTtcblxuXG4gICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZSh0YWJzLkRPTSkubWFwKFxuICAgICAgKFt0YWJzXSkgPT5cbiAgICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImFydGljbGVcIiB9IH0sIFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkh1Z2UgfSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBtYWluOiBcIkdyaWRcIixcbiAgICAgICAgICAgICAgICAgIHN1YnRleHQ6IFwiQSBncmlkIGlzIHVzZWQgdG8gaGFybW9uaXplIG5lZ2F0aXZlIHNwYWNlIGluIGEgbGF5b3V0XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuRGl2aWRlci5yZW5kZXIoeyBoaWRkZW46IHRydWUgfSksXG4gICAgICAgICAgICB0YWJzXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICApIGFzIFN0cmVhbTxWTm9kZT47XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgcm91dGVyOiB4cy5uZXZlcigpXG4gICAgfTtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL2luZGV4LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIENvbHVtbnMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBmbG93RXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJBdXRvbWF0aWMgRmxvd1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiTW9zdCBncmlkcyBkbyBub3QgbmVlZCB0byBzcGVjaWZ5IHJvd3MuIENvbnRlbnQgd2lsbCBhdXRvbWF0aWNhbGx5IGZsb3cgdG8gdGhlIG5leHQgcm93IHdoZW4gYWxsIHRoZSBncmlkIGNvbHVtbnMgYXJlIHRha2VuIGluIHRoZSBjdXJyZW50IHJvdy5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGNvbnRlbnRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJDb2x1bW4gQ29udGVudFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiU2luY2UgY29sdW1ucyB1c2UgcGFkZGluZyB0byBjcmVhdGUgZ3V0dGVycywgY29udGVudCBzdHlsaW5ncyBzaG91bGQgbm90IGJlIGFwcGxpZWQgZGlyZWN0bHkgdG8gY29sdW1ucywgYnV0IHRvIGVsZW1lbnRzIGluc2lkZSBvZiBjb2x1bW5zLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKFwiXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcihcIlwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoXCJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgd2lkdGhFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkNvbHVtbiBXaWR0aHNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbHVtbiB3aWR0aHMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyB0aGUgd2lkdGggcHJvcGVydHkuIElmIGEgY29sdW1uIGNhbm5vdCBmaXQgaW4gYSByb3cgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IGZsb3cgdG8gdGhlIG5leHQgcm93XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA4IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDggfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTAgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNiB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEyIH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDJ9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxNn0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogOCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA4IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEwIH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDYgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxMiB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAyfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTZ9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZShmbG93RXguRE9NLCBjb250ZW50RXguRE9NLCB3aWR0aEV4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvY29sdW1ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBJbnRyb2R1Y3Rpb259IGZyb20gXCIuL2ludHJvZHVjdGlvblwiO1xuaW1wb3J0IHsgQ29sdW1ucyB9IGZyb20gXCIuL2NvbHVtbnNcIjtcbmltcG9ydCB7IFJvd3MgfSBmcm9tIFwiLi9yb3dzXCI7XG5pbXBvcnQgeyBWYXJ5aW5nR3JpZHN9IGZyb20gXCIuL3ZhcnlpbmdHcmlkc1wiO1xuaW1wb3J0IHsgUmVzcG9uc2l2ZUdyaWRzIH0gZnJvbSBcIi4vcmVzcG9uc2l2ZUdyaWRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgT3ZlcnZpZXcge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+IHtcbiAgICBsZXQgaW50cm8gPSBJbnRyb2R1Y3Rpb24ucnVuKHNvdXJjZXMpO1xuICAgIGxldCBjb2x1bW5zID0gQ29sdW1ucy5ydW4oc291cmNlcyk7XG4gICAgbGV0IHJvd3MgPSBSb3dzLnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgdmFyeWluZ0dyaWRzID0gVmFyeWluZ0dyaWRzLnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgcmVzcG9uc2l2ZUdyaWRzID0gUmVzcG9uc2l2ZUdyaWRzLnJ1bihzb3VyY2VzKTtcblxuICAgIGxldCB2VHJlZSQgPSB4cy5jb21iaW5lKGludHJvLCBjb2x1bW5zLCByb3dzLCB2YXJ5aW5nR3JpZHMsIHJlc3BvbnNpdmVHcmlkcykubWFwKFxuICAgICAgKFtpbnRybywgY29sdW1ucywgcm93cywgdmFyeWluZ0dyaWRzLCByZXNwb25zaXZlR3JpZHNdKSA9PiBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJJbnRyb2R1Y3Rpb25cIildXG4gICAgICAgICAgLmNvbmNhdChpbnRybylcbiAgICAgICAgKSxcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJDb2x1bW5zXCIpXVxuICAgICAgICAgIC5jb25jYXQoY29sdW1ucylcbiAgICAgICAgKSxcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJSb3dzXCIpXVxuICAgICAgICAgIC5jb25jYXQocm93cylcbiAgICAgICAgKSxcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJWYXJ5aW5nIEdyaWRzXCIpXVxuICAgICAgICAgIC5jb25jYXQodmFyeWluZ0dyaWRzKVxuICAgICAgICApLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlJlc3BvbnNpdmUgR3JpZHNcIildXG4gICAgICAgICAgLmNvbmNhdChyZXNwb25zaXZlR3JpZHMpXG4gICAgICAgIClcbiAgICAgIF0pXG4gICAgKTtcbiAgICByZXR1cm4gdlRyZWUkO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L2luZGV4LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IHAsIGEsIGksIGRpdiwgY29kZSwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgSW50cm9kdWN0aW9uIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKTogU3RyZWFtPFZOb2RlW10+IHtcbiAgICBsZXQgZ3JpZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiR3JpZHNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbcChbXCJBIGdyaWQgaXMgYSBzdHJ1Y3R1cmUgd2l0aCBhIFwiLCBhKHsgYXR0cnM6IHsgaHJlZjogXCJodHRwOi8vOTlkZXNpZ25zLmNvbS9kZXNpZ25lci1ibG9nLzIwMTMvMDMvMjEvaGlzdG9yeS1vZi10aGUtZ3JpZC1wYXJ0LTEvXCIgfSB9LCBcImxvbmcgaGlzdG9yeVwiKSwgXCIgdXNlZCB0byBhbGlnbiBuZWdhdGl2ZSBzcGFjZSBpbiBkZXNpZ25zLlwiXSksXG4gICAgICBwKFwiVXNpbmcgYSBncmlkIG1ha2VzIGNvbnRlbnQgYXBwZWFyIHRvIGZsb3cgbW9yZSBuYXR1cmFsbHkgb24geW91ciBwYWdlLlwiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0fSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGNvbHVtbnNFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkNvbHVtbnNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJHcmlkcyBkaXZpZGUgaG9yaXpvbnRhbCBzcGFjZSBpbnRvIGluZGl2aXNpYmxlIHVuaXRzIGNhbGxlZCBcXFwiY29sdW1uc1xcXCIuIEFsbCBjb2x1bW5zIGluIGEgZ3JpZCBtdXN0IHNwZWNpZnkgdGhlaXIgd2lkdGggYXMgcHJvcG9ydGlvbiBvZiB0aGUgdG90YWwgYXZhaWxhYmxlIHJvdyB3aWR0aC5cIiksXG4gICAgICAgIHAoXCJBbGwgZ3JpZCBzeXN0ZW1zIGNob29zZXMgYW4gYXJiaXRyYXJ5IGNvbHVtbiBjb3VudCB0byBhbGxvdyBwZXIgcm93LiBTZW1hbnRpYydzIGRlZmF1bHQgdGhlbWUgdXNlcyAxNiBjb2x1bW5zLlwiKSxcbiAgICAgICAgcChbXCJUaGUgZXhhbXBsZSBiZWxvdyBzaG93cyBmb3VyIGZvdXIgd2lkZSBjb2x1bW5zIHdpbGwgZml0IGluIHRoZSBmaXJzdCByb3csIFwiLCBjb2RlKFwiMTYgLyA0ID0gNFwiKSwgXCIgYW5kIHRocmVlIHZhcmlvdXMgc2l6ZWQgY29sdW1ucyBpbiB0aGUgc2Vjb25kIHJvdy4gXCIsIGNvZGUoXCIyICsgOCArIDYgPSAxNlwiKV0pLFxuICAgICAgICBwKFwiVGhlIGRlZmF1bHQgY29sdW1uIGNvdW50LCBhbmQgb3RoZXIgYXJiaXRyYXJ5IGZlYXR1cmVzIG9mIGdyaWRzIGNhbiBiZSBjaGFuZ2VkIGJ5IGFkanVzdGluZyBTZW1hbnRpYyBVSSdzIHVuZGVybHlpbmcgdGhlbWluZyB2YXJpYWJsZXMuXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAyIH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDggfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNiB9KSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAyIH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDggfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNiB9KSxcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHJvd3NFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIlJvd3NcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJSb3dzIGFyZSBncm91cHMgb2YgY29sdW1ucyB3aGljaCBhcmUgYWxpZ25lZCBob3Jpem9udGFsbHkuXCIpLFxuICAgICAgICBwKFtcIlJvd3MgY2FuIGVpdGhlciBiZSBcIiwgaShcImV4cGxpY2l0XCIpLCBcIiBtYXJrZWQgd2l0aCBhbiBhZGRpdGlvbmFsIHJvdyBlbGVtZW50LCBvciBcIiwgaShcImltcGxpY2l0XCIpLCBcIiwgYXV0b21hdGljYWxseSBvY2N1cnJpbmcgd2hlbiBubyBtb3JlIHNwYWNlIGlzIGxlZnQgaW4gYSBwcmV2aW91cyByb3cuXCJdKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogNCB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBndXR0ZXJzRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJHdXR0ZXJzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogW1xuICAgICAgICBwKFtcIkdyaWQgY29sdW1ucyBhcmUgc2VwYXJhdGVkIGJ5IGFyZWFzIG9mIHdoaXRlIHNwYWNlIHJlZmVycmVkIHRvIGFzIFxcXCJndXR0ZXJzXFxcIi4gR3V0dGVycyBpbXByb3ZlIGxlZ2liaWxpdHkgYnkgcHJvdmlkaW5nLCBcIixcbiAgICAgICAgICBhKHsgYXR0cnM6IHsgaHJlZjogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9OZWdhdGl2ZV9zcGFjZVwiIH0gfSwgXCJuZWdhdGl2ZSBzcGFjZVwiKSwgXCIgYmV0d2VlbiBwYWdlIGVsZW1lbnRzLlwiXSksXG4gICAgICAgIHAoXCJHdXR0ZXJzIHJlbWFpbiBhIGNvbnN0YW50IHNpemUgcmVnYXJkbGVzcyBvZiB0aGUgd2lkdGggb2YgdGhlIGdyaWQsIG9yIGhvdyBtYW55IGNvbHVtbnMgYXJlIGluIGEgcm93LiBUbyBpbmNyZWFzZSB0aGUgc2l6ZSBvZiBndXR0ZXJzIGluIGEgcGFydGljdWxhciBncmlkLCB5b3UgY2FuIHVzZSBhIHJlbGF4ZWQgZ3JpZCB2YXJpYXRpb24uXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcih7cmVsYXhlZDogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcih7cmVsYXhlZDogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgbmVnTWFyZ2luc0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiTmVnYXRpdmUgbWFyZ2luc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFtwKFtcIlNpbmNlIGFsbCBncmlkIGNvbHVtbnMgaW5jbHVkZSBndXR0ZXJzLCBncmlkcyB1c2UgXCIsIGEoe2F0dHJzOiB7aHJlZjogXCJodHRwczovL2Nzc3dpemFyZHJ5LmNvbS8yMDExLzA4L2J1aWxkaW5nLWJldHRlci1ncmlkLXN5c3RlbXMvXCJ9fSwgXCJuZWdhdGl2ZSBtYXJnaW5zXCIpLCBcbiAgICAgIFwiIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBmaXJzdCBhbmQgbGFzdCBjb2x1bW5zIHNpdCBmbHVzaCB3aXRoIGNvbnRlbnQgb3V0c2lkZSB0aGUgZ3JpZC5cIl0pLFxuICAgICAgICBwKFwiSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlLCB5b3UgY2FuIHNlZSBldmVuIHRob3VnaCB0aGUgdG9wIHJvdyBoYXMgcGFkZGluZywgdGhlIGF0dGFjaGVkIGJ1dHRvbiBzdGlsbCBzaXRzIGZsdXNoIHdpdGggdGhlIGVkZ2Ugb2YgdGhlIGdyaWQuXCIpLFxuICAgICAgICBwKFwiSW4gc29tZSBjYXNlcyB5b3UgbWF5IHdhbnQgdG8gYXZvaWQgdXNpbmcgbmVnYXRpdmUgbWFyZ2lucy4gWW91IGNhbiBkbyB0aGlzIGJ5IHVzaW5nIGEgcGFkZGVkIGdyaWQgdmFyaWF0aW9uLlwiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcih7YXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Ub3B9LCBcIkJ1dHRvbiBiZWZvcmUgZ3JpZFwiKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxNn0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxMH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA2fSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTZ9KSxcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoe2F0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuQm90dG9tfSwgXCJCdXR0b24gYWZ0ZXIgZ3JpZFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkJ1dHRvbi5yZW5kZXIoe2F0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuVG9wfSwgXCJCdXR0b24gYmVmb3JlIGdyaWRcIiksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTZ9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogNn0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDE2fSksXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKHthdHRhY2htZW50OiBVSS5BdHRhY2htZW50LkJvdHRvbX0sIFwiQnV0dG9uIGFmdGVyIGdyaWRcIilgXG4gICAgfSk7XG5cbiAgICBsZXQgY29udGFpbmVyRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJDb250YWluZXIgZ3JpZHNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJHcmlkcyBhcmUgZmx1aWQgYW5kIHdpbGwgYXV0b21hdGljYWxseSBmbG93IGluIHNpemUgdG8gdGFrZSB0aGUgbWF4aW11bSBhdmFpbGFibGUgd2lkdGguXCIpLFxuICAgICAgICBwKFwiQ29udGFpbmVycyBhcmUgZWxlbWVudHMgZGVzaWduZWQgdG8gbGltaXQgcGFnZSBjb250ZW50IHRvIGEgcmVhc29uYWJsZSBtYXhpbXVtIHdpZHRoIGZvciBkaXNwbGF5IGJhc2VkIG9uIHRoZSBzaXplIG9mIHRoZSB1c2VyJ3Mgc2NyZWVuLlwiKSxcbiAgICAgICAgcChcIlVzaW5nIGEgZ3JpZCBjb250YWluZXIgaXMgdGhlIGJlc3Qgd2F5IHRvIGluY2x1ZGUgdG9wLWxldmVsIHBhZ2UgY29udGVudCBpbnNpZGUgYSBncmlkLlwiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoe2NvbnRhaW5lcjogdHJ1ZX0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDE2fSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7Y29udGFpbmVyOiB0cnVlfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTZ9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZShncmlkRXguRE9NLCBjb2x1bW5zRXguRE9NLCByb3dzRXguRE9NLCBndXR0ZXJzRXguRE9NLCBuZWdNYXJnaW5zRXguRE9NLCBjb250YWluZXJFeC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L2ludHJvZHVjdGlvbi50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zaXZlR3JpZHMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBjb250YWluZXJFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkNvbnRhaW5lcnNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZ3JpZCBjb250YWluZXIgdmFyaWFudCBjYW4gYmUgdXNlZCB0byBwcm92aWRlIGEgcmVzcG9uc2l2ZSwgZml4ZWQgd2lkdGggY29udGFpbmVyIGZvciB3cmFwcGluZyB0aGUgY29udGVudHMgb2YgYSBwYWdlLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IGNvbnRhaW5lcjogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe2NvbnRhaW5lcjogdHJ1ZX0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHN0YWNrYWJsZUV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiU3RhY2thYmxlXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHN0YWNrYWJsZSBncmlkIHdpbGwgYXV0b21hdGljYWxseSBzdGFjayByb3dzIHRvIGEgc2luZ2xlIGNvbHVtbnMgb24gbW9iaWxlIGRldmljZXNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBzdGFja2FibGU6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyBzdGFja2FibGU6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCByZXZlcnNlRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUmV2ZXJzZSBPcmRlclwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiU2VtYW50aWMgaW5jbHVkZXMgc3BlY2lhbCByZXZlcnNlZCB2YXJpYXRpb25zIHRoYXQgYWxsb3cgeW91IHRvIHJldmVyc2UgdGhlIG9yZGVyIG9mIGNvbHVtbnMgb3Igcm93cyBieSBkZXZpY2VcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyByZXZlcnNlZE1vYmlsZTogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJGaXJzdFwiKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlNlY29uZFwiKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlRoaXJkXCIpLFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHsgcmV2ZXJzZWRNb2JpbGU6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiRmlyc3RcIiksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJTZWNvbmRcIiksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUaGlyZFwiKSxcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGRvdWJsaW5nRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJEb3VibGluZ1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBkb3VibGluZyBncmlkIHdpbGwgZG91YmxlIGNvbHVtbiB3aWR0aHMgZm9yIGVhY2ggZGV2aWNlIGp1bXAuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGRvdWJsaW5nOiB0cnVlLCB3aWR0aDogOCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGRvdWJsaW5nOiB0cnVlLCB3aWR0aDogNiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBkb3VibGluZzogdHJ1ZSwgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGRvdWJsaW5nOiB0cnVlLCB3aWR0aDogOCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGRvdWJsaW5nOiB0cnVlLCB3aWR0aDogNiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBkb3VibGluZzogdHJ1ZSwgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgbWFudWFsRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJNYW51YWwgVHdlYWtzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBbHRob3VnaCBkZXNpZ24gcGF0dGVybnMgbGlrZSBkb3VibGluZyBvciBzdGFja2FibGUgYXJlIHVzZWZ1bCBhdCBzaW1wbGlmeWluZyByZXNwb25zaXZlIHN0eWxpbmcsIHlvdSBjYW4gYWxzbyBtYW51YWxseSB0d2VhayBkZXZpY2UgcHJlc2VudGF0aW9uIGJ5IHNwZWNpZnlpbmcgdGhlIHdpZHRoIGZvciBhIGRldmljZXR5cGUgb24gY29sdW1ucyBvciBzZXR0aW5nIHRoZSBkZXZpY2Ugb25seSBwcm9wZXJ0aWVzIG9uIGdyaWRzLCByb3dzIG9yIGNvbHVtbnMuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHtjZW50ZXJlZDogdHJ1ZX0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7Y29tcHV0ZXJPbmx5OiB0cnVlfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7dGFibGV0OiA2LCBjb21wdXRlcjogOH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0YWJsZXQ6IDYsIGNvbXB1dGVyOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3RhYmxldDogNiwgY29tcHV0ZXI6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7dGFibGV0OiA2LCBjb21wdXRlcjogOH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0YWJsZXQ6IDYsIGNvbXB1dGVyOiA4fSksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe2NlbnRlcmVkOiB0cnVlfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHtjb21wdXRlck9ubHk6IHRydWV9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0YWJsZXQ6IDYsIGNvbXB1dGVyOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3RhYmxldDogNiwgY29tcHV0ZXI6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7dGFibGV0OiA2LCBjb21wdXRlcjogOH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0YWJsZXQ6IDYsIGNvbXB1dGVyOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3RhYmxldDogNiwgY29tcHV0ZXI6IDh9KSxcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUoY29udGFpbmVyRXguRE9NLCBzdGFja2FibGVFeC5ET00sIHJldmVyc2VFeC5ET00sIGRvdWJsaW5nRXguRE9NLCBtYW51YWxFeC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L3Jlc3BvbnNpdmVHcmlkcy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBwLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBSb3dzIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKTogU3RyZWFtPFZOb2RlW10+IHtcbiAgICBsZXQgZ3JvdXBpbmdFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkdyb3VwaW5nXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJSb3cgd3JhcHBlcnMgYWxsb3cgeW91IHRvIGFwcGx5IHZhcmlhdGlvbnMgdG8gYSBncm91cCBvZiBjb2x1bW5zLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAyIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHt3aWR0aDogNH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7d2lkdGg6IDJ9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGNsZWFyRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJDbGVhcmluZyBDb250ZW50XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJSb3cgd3JhcHBlcnMgd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHByZXZpb3VzIGNvbHVtbnMsIG1ha2luZyB0aGVtIHVzZWZ1bCB3aGVuIHVzaW5nIGZsb2F0ZWQgdmFyaWF0aW9ucy5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBmbG9hdDogXCJsZWZ0XCIgfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IGZsb2F0OiBcInJpZ2h0XCIgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogNX0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBmbG9hdDogXCJsZWZ0XCIgfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IGZsb2F0OiBcInJpZ2h0XCIgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogNX0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBzcGVjaWFsRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU3BlY2lhbCBHcmlkc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQWRkaXRpb25hbGx5LCBzb21lIHR5cGVzIG9mIGdyaWRzLCBsaWtlIGRpdmlkZWQgb3IgY2VsbGVkIHJlcXVpcmUgcm93IHdyYXBwZXJzIHRvIGFwcGx5IGZvcm1hdHRpbmcgY29ycmVjdGx5LlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7aW50Q2VsbGVkOiB0cnVlfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogM30sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxMH0sIFtcbiAgICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEdWlzIGF0IHB1cnVzIG5pYmguIENyYXMgbWV0dXMgbnVsbGEsIHZlc3RpYnVsdW0gaW4gYXVjdG9yIGFjLCBmZXJtZW50dW0gdml0YWUgdGVsbHVzLiBEb25lYyBzZWQgYWxpcXVhbSBuaXNsLiBTZWQgZXUgbGVvIGlkIGVzdCBwcmV0aXVtIGV1aXNtb2QuIE51bGxhIGlkIGp1c3RvIGF0IG1pIHZlbmVuYXRpcyB2b2x1dHBhdC4gRnVzY2UgbmlzaSBsZW8sIHBsYWNlcmF0IGlkIGNvbmRpbWVudHVtIGEsIGFjY3Vtc2FuIHZpdGFlIHRvcnRvci4gTnVuYyBtYWduYSBudW5jLCB2ZW5lbmF0aXMgbmVjIGVsZW1lbnR1bSBldSwgdWx0cmljZXMgaW4gc2VtLiBNYWVjZW5hcyB0aW5jaWR1bnQgc2VtcGVyIG1vbGVzdGllLiBOdWxsYSBuZWMgbmVxdWUgc2l0IGFtZXQgbGliZXJvIG1vbGVzdGllIGZldWdpYXQuIENyYXMgaWQgbWV0dXMgdmVsaXQuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIE51bGxhbSBsb2JvcnRpcyBhcmN1IG5vbiBsZW8gcG9ydGEgdXQgZXVpc21vZCBhbnRlIGx1Y3R1cy4gUHJhZXNlbnQgZWxlbWVudHVtIHNvZGFsZXMgZG9sb3IgaWQgc2NlbGVyaXNxdWUuXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9LCBbXG4gICAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gRHVpcyBhdCBwdXJ1cyBuaWJoLiBDcmFzIG1ldHVzIG51bGxhLCB2ZXN0aWJ1bHVtIGluIGF1Y3RvciBhYywgZmVybWVudHVtIHZpdGFlIHRlbGx1cy4gRG9uZWMgc2VkIGFsaXF1YW0gbmlzbC4gU2VkIGV1IGxlbyBpZCBlc3QgcHJldGl1bSBldWlzbW9kLiBOdWxsYSBpZCBqdXN0byBhdCBtaSB2ZW5lbmF0aXMgdm9sdXRwYXQuIEZ1c2NlIG5pc2kgbGVvLCBwbGFjZXJhdCBpZCBjb25kaW1lbnR1bSBhLCBhY2N1bXNhbiB2aXRhZSB0b3J0b3IuIE51bmMgbWFnbmEgbnVuYywgdmVuZW5hdGlzIG5lYyBlbGVtZW50dW0gZXUsIHVsdHJpY2VzIGluIHNlbS4gTWFlY2VuYXMgdGluY2lkdW50IHNlbXBlciBtb2xlc3RpZS4gTnVsbGEgbmVjIG5lcXVlIHNpdCBhbWV0IGxpYmVybyBtb2xlc3RpZSBmZXVnaWF0LiBDcmFzIGlkIG1ldHVzIHZlbGl0LiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBOdWxsYW0gbG9ib3J0aXMgYXJjdSBub24gbGVvIHBvcnRhIHV0IGV1aXNtb2QgYW50ZSBsdWN0dXMuIFByYWVzZW50IGVsZW1lbnR1bSBzb2RhbGVzIGRvbG9yIGlkIHNjZWxlcmlzcXVlLlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7aW50Q2VsbGVkOiB0cnVlfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogM30pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxMH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZShncm91cGluZ0V4LkRPTSwgY2xlYXJFeC5ET00sIHNwZWNpYWxFeC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L3Jvd3MudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBWYXJ5aW5nR3JpZHMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBuZXN0ZWRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIk5lc3RpbmcgR3JpZHNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkdyaWRzIGNhbiBiZSBwbGFjZWQgaW5zaWRlIG9mIG90aGVyIGdyaWRzLCBsZXR0aW5nIHlvdSBzdWItZGl2aWRlIGNvbHVtbnMuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDIgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTAgfSksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDYgfSksXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMn0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7XG4gICAgICAgICAgVUkuR3JpZC5yZW5kZXIoe3dpZHRoOiAzfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIF0pXG4gICAgICAgIH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogNn0pLFxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgXSlgXG4gICAgfSkuRE9NLm1hcChleCA9PiBkaXYoXCIuc3BlY2lhbFwiLCBbZXhdKSk7XG5cbiAgICBsZXQgY29sQ291bnRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkF1dG9tYXRpYyBDb2x1bW4gQ291bnRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBlcXVhbFdpZHRoIHZhcmlhdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgZGl2aWRlIGNvbHVtbiB3aWR0aCBldmVubHkuIFRoaXMgaXMgdXNlZnVsIHdpdGggZHluYW1pYyBjb250ZW50IHdoZXJlIHlvdSBkbyBub3Qga25vdyB0aGUgY29sdW1uIGNvdW50IGluIGFkdmFuY2UuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGNlbnRlcmluZ0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiQ2VudGVyaW5nIENvbnRlbnRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIklmIGEgcm93IGRvZXMgbm90IHRha2UgdXAgYWxsIHNpeHRlZW4gZ3JpZCBjb2x1bW5zLCB5b3UgY2FuIHVzZSBhIGNlbnRlcmVkIHZhcmlhdGlvbiB0byBjZW50ZXIgdGhlIGNvbHVtbiBjb250ZW50cyBpbnNpZGUgdGhlIGdyaWQuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgY2VudGVyZWQ6IHRydWUsIHdpZHRoOiAyIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyBjZW50ZXJlZDogdHJ1ZSwgd2lkdGg6IDIgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUobmVzdGVkRXgsIGNvbENvdW50RXguRE9NLCBjZW50ZXJpbmdFeC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL292ZXJ2aWV3L3ZhcnlpbmdHcmlkcy50cyIsImV4cG9ydCAqIGZyb20gXCIuL2JyZWFkY3J1bWJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zvcm1cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dyaWRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21lbnVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21lc3NhZ2VcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2luZGV4LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IHAsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIENvbnRlbnQge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBoZWFkZXJFeCA9IGNyZWF0ZUhlYWRlckV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCB0ZXh0RXggPSBjcmVhdGVUZXh0RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGlucHV0RXggPSBjcmVhdGVJbnB1dEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBidXR0b25FeCA9IGNyZWF0ZUJ1dHRvbkV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBsaW5rRXggPSBjcmVhdGVMaW5rRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGRyb3Bkb3duRXggPSBjcmVhdGVEcm9wZG93bkV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBwb3B1cEV4ID0gY3JlYXRlUG9wdXBFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgc2VhcmNoRXggPSBjcmVhdGVTZWFyY2hFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgbWVudUV4ID0gY3JlYXRlTWVudUV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBzdWJNZW51RXggPSBjcmVhdGVTdWJNZW51RXhhbXBsZXMoc291cmNlcyk7XG5cbiAgICBsZXQgZXhhbXBsZXMgPSBbXS5jb25jYXQoaGVhZGVyRXgsIHRleHRFeCwgaW5wdXRFeCwgYnV0dG9uRXgsXG4gICAgICBsaW5rRXgsIGRyb3Bkb3duRXgsIHBvcHVwRXgsIHNlYXJjaEV4LCBtZW51RXgsIHN1Yk1lbnVFeCk7XG5cblxuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUuYXBwbHkobnVsbCwgZXhhbXBsZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGVhZGVyRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkhlYWRlclwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGl0ZW0gbWF5IGluY2x1ZGUgYSBoZWFkZXIgb3IgbWF5IGl0c2VsZiBiZSBhIGhlYWRlclwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIk91ciBjb21wYW55XCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkFib3V0IHVzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkpvYnNcIiB9LFxuICAgICAgICB7IG1haW46IFwiTG9jYXRpb25zXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKFtcbiAgICAgICAge2hlYWRlcjogdHJ1ZSwgbWFpbjogXCJPdXIgY29tcGFueVwifSxcbiAgICAgICAge21haW46IFwiQWJvdXQgdXNcIn0sXG4gICAgICAgIHttYWluOiBcIkpvYnNcIn0sXG4gICAgICAgIHttYWluOiBcIkxvY2F0aW9uc1wifVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAge1xuICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIlByb2R1Y3RzXCIsXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiRW50ZXJwcmlzZVwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJDb25zdW1lclwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiQ01TIFNvbHV0aW9uc1wiLFxuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzdWJtZW51OiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlJhaWxzXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlB5dGhvblwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQSFBcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIkhvc3RpbmdcIixcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc3VibWVudTogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJTaGFyZWRcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiRGVkaWNhdGVkXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiRS1tYWlsIFN1cHBvcnRcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiRkFRc1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJQcm9kdWN0c1wiLFxuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzdWJtZW51OiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkVudGVycHJpc2VcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQ29uc3VtZXJcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIkNNUyBTb2x1dGlvbnNcIixcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc3VibWVudTogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJSYWlsc1wiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQeXRob25cIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUEhQXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJIb3N0aW5nXCIsXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiU2hhcmVkXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkRlZGljYXRlZFwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiU3VwcG9ydFwiLFxuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzdWJtZW51OiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkUtbWFpbCBTdXBwb3J0XCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkZBUXNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW2V4LkRPTSwgZXgyLkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlVGV4dEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJUZXh0XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHZlcnRpY2FsIG1lbnUgaXRlbSBjYW4gaW5jbHVkZSBhbnkgdHlwZSBvZiB0ZXh0IGNvbnRlbnQuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcihcIlByb21vdGlvbnNcIiksXG4gICAgICAgICAgICBwKFwiQ2hlY2sgb3V0IG91ciBuZXcgcHJvbW90aW9uc1wiKSxcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKFwiQ291cG9uc1wiKSxcbiAgICAgICAgICAgIHAoXCJDaGVjayBvdXQgb3VyIGNvbGxlY3Rpb24gb2YgY291cG9uc1wiKSxcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKFwiUmViYXRlc1wiKSxcbiAgICAgICAgICAgIHAoXCJWaXNpdCBvdXIgcmViYXRlIGZvcnVtIGZvciBpbmZvcm1hdGlvbiBvbiBjbGFpbWluZyByZWJhdGVzXCIpLFxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcihcIlByb21vdGlvbnNcIiksXG4gICAgICAgICAgICBwKFwiQ2hlY2sgb3V0IG91ciBuZXcgcHJvbW90aW9uc1wiKSxcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKFwiQ291cG9uc1wiKSxcbiAgICAgICAgICAgIHAoXCJDaGVjayBvdXQgb3VyIGNvbGxlY3Rpb24gb2YgY291cG9uc1wiKSxcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKFwiUmViYXRlc1wiKSxcbiAgICAgICAgICAgIHAoXCJWaXNpdCBvdXIgcmViYXRlIGZvcnVtIGZvciBpbmZvcm1hdGlvbiBvbiBjbGFpbWluZyByZWJhdGVzXCIpLFxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUlucHV0RXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIklucHV0XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lbnUgaXRlbSBjYW4gY29udGFpbiBhbiBpbnB1dCBpbnNpZGUgb2YgaXRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJTZWFyY2guLlwiLCBpY29uOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuU2VhcmNoKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBmbG9hdDogXCJyaWdodFwiLCBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIk5hdmlnYXRlIHRvLi5cIiwgcmlnaHRDb250ZW50OiB0cnVlLCBhY3Rpb246IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiR29cIilcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7bWFpbjogW1xuICAgICAgICAgIFVJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJTZWFyY2guLlwiLCBpY29uOiB0cnVlfSwgW1xuICAgICAgICAgICAgVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuU2VhcmNoKVxuICAgICAgICAgIF0pXG4gICAgICAgIF19LCB7ZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW1xuICAgICAgICAgIFVJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJOYXZpZ2F0ZSB0by4uXCIsIHJpZ2h0Q29udGVudDogdHJ1ZSwgYWN0aW9uOiB0cnVlfSwgW1xuICAgICAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIkdvXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbkV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJCdXR0b25cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBpdGVtIGNhbiBjb250YWluIGEgYnV0dG9uIGluc2lkZSBvZiBpdFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIlNpZ24gdXBcIildIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoXCJMb2ctaW5cIildIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfSxcbiAgICAgICAge21haW46IFtVSS5CdXR0b24ucmVuZGVyKFwiTG9nLWluXCIpXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUxpbmtFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiTGluayBJdGVtXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lbnUgbWF5IGNvbnRhaW4gYSBsaW5rIGl0ZW0sIG9yIGFuIGl0ZW0gZm9ybWF0dGVkIGFzIGlmIGl0IGlzIGEgbGluay5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHsgaHJlZjogXCIjXCIsIG1haW46IFwiVmlzaXQgZ29vZ2xlXCIgfSxcbiAgICAgICAgeyBsaW5rOiB0cnVlLCBtYWluOiBcIkphdmFzY3JpcHQgbGlua1wiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7dmVydGljYWw6IHRydWV9LCBbXG4gICAgICAgIHtocmVmOiBcIiNcIiwgbWFpbjogXCJWaXNpdCBnb29nbGVcIn0sXG4gICAgICAgIHtsaW5rOiB0cnVlLCBtYWluOiBcIkphdmFzY3JpcHQgbGlua1wifVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZURyb3Bkb3duRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgLy8gbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgIC8vICAgaGVhZGVyOiBcIlwiLFxuICAgIC8vICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgLy8gICBWTm9kZSQ6IHhzLm9mKCksXG4gICAgLy8gICBjb2RlOiBgYFxuICAgIC8vIH0pO1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVQb3B1cEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIC8vIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAvLyAgIGhlYWRlcjogXCJcIixcbiAgICAvLyAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgIC8vICAgVk5vZGUkOiB4cy5vZigpLFxuICAgIC8vICAgY29kZTogYGBcbiAgICAvLyB9KTtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlU2VhcmNoRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgLy8gbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgIC8vICAgaGVhZGVyOiBcIlwiLFxuICAgIC8vICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgLy8gICBWTm9kZSQ6IHhzLm9mKCksXG4gICAgLy8gICBjb2RlOiBgYFxuICAgIC8vIH0pO1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW51RXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIk1lbnVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBtYXkgY29udGFpbiBhbm90aGVyIG1lbnUgZ3JvdXAgaW4gdGhlIHNhbWUgbGV2ZWwgYXMgbWVudSBpdGVtcy5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7IG1haW46IFwiQnJvd3NlXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlN1Ym1pdFwiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogXCJTaWduIFVwXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJIZWxwXCIgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKFtcbiAgICAgICAgeyBtYWluOiBcIkJyb3dzZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJTdWJtaXRcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgcmlnaHRNZW51OiB0cnVlLCBtYWluOiBbXG4gICAgICAgICAgICB7IG1haW46IFwiU2lnbiBVcFwiIH0sXG4gICAgICAgICAgICB7IG1haW46IFwiSGVscFwiIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVTdWJNZW51RXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlN1YiBNZW51XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lbnUgaXRlbSBtYXkgY29udGFpbiBhbm90aGVyIG1lbnUgbmVzdGVkIGluc2lkZSB0aGF0IGFjdHMgYXMgYSBncm91cGVkIHN1Yi1tZW51LlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFVJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiU2VhcmNoLi4uXCIgfSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIkhvbWVcIixcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHtzdWJtZW51OiB0cnVlfSwgW1xuICAgICAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWFyY2hcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQWRkXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlJlbW92ZVwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HcmlkTGF5b3V0KSwgXCJCcm93c2VcIl0gfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vcmVcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uLlwiIH0pXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJIb21lXCIsXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7c3VibWVudTogdHJ1ZX0sIFtcbiAgICAgICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiU2VhcmNoXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkFkZFwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJSZW1vdmVcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR3JpZExheW91dCksIFwiQnJvd3NlXCJdIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3JlXCIgfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZW51L2NvbnRlbnQudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBUeXBlcyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBDb250ZW50IH0gZnJvbSBcIi4vY29udGVudFwiO1xuaW1wb3J0IHsgU3RhdGVzIH0gZnJvbSBcIi4vc3RhdGVzXCI7XG5pbXBvcnQgeyBWYXJpYXRpb25zIH0gZnJvbSBcIi4vdmFyaWF0aW9uc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1lbnUge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpIHtcbiAgICBsZXQgdHlwZXMgPSBUeXBlcy5ydW4oc291cmNlcyk7XG4gICAgbGV0IGNvbnRlbnQgPSBDb250ZW50LnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgc3RhdGVzID0gU3RhdGVzLnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgdmFyaWF0aW9ucyA9IFZhcmlhdGlvbnMucnVuKHNvdXJjZXMpO1xuXG4gICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZSh0eXBlcywgY29udGVudCwgc3RhdGVzLCB2YXJpYXRpb25zKS5tYXAoXG4gICAgICAoW3R5cGVzLCBjb250ZW50LCBzdGF0ZXMsIHZhcmlhdGlvbnNdKSA9PlxuICAgICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiYXJ0aWNsZVwiIH0gfSwgW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29udGFpbmVyLnJlbmRlcihbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoe1xuICAgICAgICAgICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuSHVnZSB9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICAgIG1haW46IFwiTWVudVwiLFxuICAgICAgICAgICAgICAgICAgc3VidGV4dDogXCJBIG1lbnUgZGlzcGxheXMgZ3JvdXBlZCBuYXZpZ2F0aW9uIGFjdGlvbnNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlR5cGVzXCIpXVxuICAgICAgICAgICAgICAuY29uY2F0KHR5cGVzKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkNvbnRlbnRcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoY29udGVudClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJTdGF0ZXNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoc3RhdGVzKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlZhcmlhdGlvbnNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQodmFyaWF0aW9ucylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pXG4gICAgKSBhcyBTdHJlYW08Vk5vZGU+O1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIHJvdXRlcjogeHMubmV2ZXIoKVxuICAgIH07XG4gIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS9pbmRleC50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBwLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBTdGF0ZXMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJIb3ZlclwiLFxuICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgcChcIkEgbWVudSBpdGVtIGNhbiBiZSBob3ZlcmVkXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5XYXJuaW5nIH0sIFwiTWVudSBpdGVtcyBhcmUgb25seSBob3ZlcmFibGUgaWYgdGhleSBoYXZlIHRoZSBocmVmIG9yIGxpbmsgcHJvcGVydHkuXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IGNvbXBhY3Q6IHRydWUgfSwgW1xuICAgICAgICB7IGhyZWY6IFwiI1wiLCBtYWluOiBcIkEgbGlua1wiIH0sXG4gICAgICAgIHsgbGluazogdHJ1ZSwgbWFpbjogXCJkaXYgbGlua1wiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7Y29tcGFjdDogdHJ1ZX0sIFtcbiAgICAgICAge2hyZWY6IFwiI1wiLCBtYWluOiBcIkEgbGlua1wifSxcbiAgICAgICAge2xpbms6IHRydWUsIG1haW46IFwiZGl2IGxpbmtcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJBY3RpdmVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBpdGVtIGNhbiBiZSBhY3RpdmVcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBjb21wYWN0OiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiTGlua1wiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7Y29tcGFjdDogdHJ1ZX0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJMaW5rXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGV4LkRPTSwgZXgyLkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lbnUvc3RhdGVzLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVHlwZXMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBiYXNpY0V4ID0gY3JlYXRlQmFzaWNFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgc2Vjb25kYXJ5RXggPSBjcmVhdGVTZWNvbmRhcnlFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgcG9pbnRpbmdFeCA9IGNyZWF0ZVBvaW50aW5nRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHRhYnVsYXJFeCA9IGNyZWF0ZVRhYnVsYXJFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgdGV4dEV4ID0gY3JlYXRlVGV4dEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCB2ZXJ0aWNhbEV4ID0gY3JlYXRlVmVydGljYWxFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgcGFnaW5hdGlvbkV4ID0gY3JlYXRlUGFnaW5hdGlvbkV4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KGJhc2ljRXgsIHNlY29uZGFyeUV4LCBwb2ludGluZ0V4LCB0YWJ1bGFyRXgsXG4gICAgICB0ZXh0RXgsIHZlcnRpY2FsRXgsIHBhZ2luYXRpb25FeCk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZS5hcHBseShudWxsLCBleGFtcGxlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCYXNpY0V4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJNZW51XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lbnVcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiRWRpdG9yaWFsc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJSZXZpZXdzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlVwY29taW5nIEV2ZW50c1wiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7ZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJFZGl0b3JpYWxzXCJ9LFxuICAgICAgICB7bWFpbjogXCJSZXZpZXdzXCJ9LFxuICAgICAgICB7bWFpbjogXCJVcGNvbWluZyBFdmVudHNcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgLy9Ub2RvIGFkZCBwb3B1cCBleGFtcGxlXG4gICAgbGV0IGRkbE5hdmlnYXRpb24gPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBzdGF0aWM6IFwiTW9yZVwiIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKFtcbiAgICAgICAgeyBtYWluOiBcIkFwcGxpY2F0aW9uc1wiLCB2YWx1ZTogXCJhcHBsaWNhdGlvbnNcIiB9LFxuICAgICAgICB7IG1haW46IFwiSW50ZXJuYXRpb25hbCBTdHVkZW50c1wiLCB2YWx1ZTogXCJpbnRlcm5hdGlvbmFsXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNjaG9sYXJzaGlwc1wiLCB2YWx1ZTogXCJzY2hvbGFyc2hpcHNcIiB9XG4gICAgICBdKVxuICAgIH0pO1xuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLmNvbWJpbmUoZGRsTmF2aWdhdGlvbi5ET00pLm1hcChcbiAgICAgICAgKFtkZGxOYXZpZ2F0aW9uXSkgPT4gVUkuTWVudS5yZW5kZXIoeyB0ZXh0OiB0cnVlIH0sIFtcbiAgICAgICAgICB7IG1haW46IFtVSS5JbWFnZS5yZW5kZXIoXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzJnR4dD1Mb2dvJnc9ODAmaD04MFwiKV0gfSxcbiAgICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtkZGxOYXZpZ2F0aW9uXSB9XG4gICAgICAgIF0pXG4gICAgICApLFxuICAgICAgY29kZTogYGxldCBkZGxOYXZpZ2F0aW9uID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHtzdGF0aWM6IFwiTW9yZVwifSksXG4gICAgICBjb250ZW50JDogeHMub2YoW1xuICAgICAgICB7IG1haW46IFwiQXBwbGljYXRpb25zXCIsIHZhbHVlOiBcImFwcGxpY2F0aW9uc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJJbnRlcm5hdGlvbmFsIFN0dWRlbnRzXCIsIHZhbHVlOiBcImludGVybmF0aW9uYWxcIiB9LFxuICAgICAgICB7IG1haW46IFwiU2Nob2xhcnNoaXBzXCIsIHZhbHVlOiBcInNjaG9sYXJzaGlwc1wiIH1cbiAgICAgIF0pXG4gICAgfSk7XG4gICAgbGV0IHZUcmVlJCA9IHhzLmNvbWJpbmUoZGRsTmF2aWdhdGlvbi5ET00pLm1hcChcbiAgICAgIChbZGRsTmF2aWdhdGlvbl0pID0+IFVJLk1lbnUucmVuZGVyKHt0ZXh0OiB0cnVlfSwgW1xuICAgICAgICB7bWFpbjogW1VJLkltYWdlLnJlbmRlcihcIlwiKV19LFxuICAgICAgICB7ZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW2RkbE5hdmlnYXRpb25dfVxuICAgICAgXSlcbiAgICApYFxuICAgIH0pO1xuXG4gICAgLy9Ub2RvIGRyb3Bkb3duIG1lbnUnc1xuICAgIGxldCBkZGxOYXZpZ2F0aW9uMiA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7IHNpbXBsZTogdHJ1ZSwgZGVmYXVsdDogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLldyZW5jaCldIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKFtcbiAgICAgICAgeyBtYWluOiBcIk5ldy4uLlwiLCB2YWx1ZTogXCJuZXdcIiB9LFxuICAgICAgICB7IG1haW46IFwiT3Blbi4uLlwiLCB2YWx1ZTogXCJvcGVuXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNhdmUuLi5cIiwgdmFsdWU6IFwic2F2ZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJFZGl0IHBlcm1pc3Npb25zLi4uXCIsIHZhbHVlOiBcInBlcm1pc3Npb25zXCIgfSxcbiAgICAgICAgeyBkaXZpZGVyOiB0cnVlIH0sXG4gICAgICAgIHsgbWFpbjogXCJFeHBvcnRcIiwgaGVhZGVyT25seTogdHJ1ZSB9LFxuICAgICAgICB7IG1haW46IFwiU2hhcmUuLi5cIiwgdmFsdWU6IFwiXCIgfVxuICAgICAgXSksXG4gICAgICBhcmdzOiB7XG4gICAgICAgIHN0YXRpYzogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLmNvbWJpbmUoZGRsTmF2aWdhdGlvbjIuRE9NKS5tYXAoXG4gICAgICAgIChbZGRsTmF2aWdhdGlvbl0pID0+IGRpdihbXG4gICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcInRvcFwiIH0sIFtcbiAgICAgICAgICAgIHsgaWNvbjogdHJ1ZSwgZHJvcGRvd246IHRydWUsIG1haW46IGRkbE5hdmlnYXRpb24gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgaWNvbjogdHJ1ZSwgdHJhbnNwYXJlbnQ6IHRydWUgfSwgW1xuICAgICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgICAgXSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50LkJvdHRvbSB9KVxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICAgIGNvZGU6IGAgbGV0IGRkbE5hdmlnYXRpb24yID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgc3RhdGljOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuV3JlbmNoKV0gfSksXG4gICAgICBjb250ZW50JDogeHMub2YoW1xuICAgICAgICB7IG1haW46IFwiTmV3Li4uXCIsIHZhbHVlOiBcIm5ld1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJPcGVuLi4uXCIsIHZhbHVlOiBcIm9wZW5cIiB9LFxuICAgICAgICB7IG1haW46IFwiU2F2ZS4uLlwiLCB2YWx1ZTogXCJzYXZlXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkVkaXQgcGVybWlzc2lvbnMuLi5cIiwgdmFsdWU6IFwicGVybWlzc2lvbnNcIiB9LFxuICAgICAgICB7IGRpdmlkZXI6IHRydWUgfSxcbiAgICAgICAgeyBtYWluOiBcIkV4cG9ydFwiLCBoZWFkZXI6IHRydWUgfSxcbiAgICAgICAgeyBtYWluOiBcIlNoYXJlLi4uXCIsIHZhbHVlOiBcIlwiIH1cbiAgICAgIF0pXG4gICAgfSk7XG4gICAgbGV0IHZUcmVlJCA9IHhzLmNvbWJpbmUoZGRsTmF2aWdhdGlvbjIuRE9NKS5tYXAoXG4gICAgICAoW2RkbE5hdmlnYXRpb25dKSA9PiBkaXYoW1xuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIHsgbWFpbjogW2RkbE5hdmlnYXRpb25dIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgaWNvbjogdHJ1ZSwgdHJhbnNwYXJlbnQ6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5TZWFyY2gpXG4gICAgICAgICAgICBdKV1cbiAgICAgICAgICB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7YXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Cb3R0b219KVxuICAgICAgXSlgXG4gICAgfSk7XG5cblxuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NLCBleDMuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNlY29uZGFyeUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTZWNvbmRhcnkgTWVudVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGNhbiBhZGp1c3QgaXRzIGFwcGVhcmFuY2UgdG8gZGUtZW1waGFzaXplIGl0cyBjb250ZW50c1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNlY29uZGFyeTogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmbG9hdDogXCJyaWdodFwiLCBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uLlwiLCBpY29uOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuU2VhcmNoKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHsgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogXCJMb2dvdXRcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBzZWNvbmRhcnk6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtcbiAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiU2VhcmNoLi4uXCIsIGljb246IHRydWV9LCBbXG4gICAgICAgICAgICBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5TZWFyY2gpXG4gICAgICAgICAgXSlcbiAgICAgICAgXX0sXG4gICAgICAgIHsgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogXCJMb2dvdXRcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY3JlYXRlUG9pbnRpbmdFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUG9pbnRpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBjYW4gcG9pbnQgdG8gc2hvdyBpdHMgcmVsYXRpb25zaGlwIHRvIG5lYXJieSBjb250ZW50XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbVUkuTWVudS5yZW5kZXIoeyBwb2ludGluZzogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmbG9hdDogXCJyaWdodFwiLCBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uLlwiLCBpY29uOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuU2VhcmNoKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pLFxuICAgICAgVUkuU2VnbWVudC5yZW5kZXIoKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW1xuICAgICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJTZWFyY2guLi5cIiwgaWNvbjogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSxcbiAgICAgIFVJLlNlZ21lbnQucmVuZGVyKClgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1VJLk1lbnUucmVuZGVyKHsgcG9pbnRpbmc6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICAgIHsgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogXCJMb2dvdXRcIiB9XG4gICAgICBdKSxcbiAgICAgIFVJLlNlZ21lbnQucmVuZGVyKClcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHBvaW50aW5nOiB0cnVlLCBzZWNvbmRhcnk6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFwiTG9nb3V0XCIgfVxuICAgICAgXSksXG4gICAgICBVSS5TZWdtZW50LnJlbmRlcigpYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NXTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY3JlYXRlVGFidWxhckV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJUYWJ1bGFyXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lbnUgY2FuIGJlIGZvcm1hdHRlZCB0byBzaG93IHRhYnMgb2YgaW5mb3JtYXRpb25cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB0YWJ1bGFyOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgeyBtYWluOiBcIlBob3Rvc1wiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiQmlvXCIsIGFjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICB7IG1haW46IFwiUGhvdG9zXCIgfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5NZW51LnJlbmRlcih7IHRhYnVsYXI6IHRydWUsIGF0dGFjaG1lbnQ6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIHsgbWFpbjogXCJCaW9cIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlBob3Rvc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Cb3R0b20gfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHRhYnVsYXI6IHRydWUsIGF0dGFjaG1lbnQ6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIHsgbWFpbjogXCJCaW9cIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlBob3Rvc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHthdHRhY2htZW50OiBVSS5BdHRhY2htZW50LkJvdHRvbX0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50LlRvcCB9KSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyB0YWJ1bGFyOiB0cnVlLCBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IG1haW46IFwiQWN0aXZlIHByb2plY3RcIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlByb2plY3QgIzJcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJQcm9qZWN0ICMzXCIgfSxcbiAgICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbHVzKSwgXCJOZXcgVGFiXCJdIH1cbiAgICAgICAgXSksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuU2VnbWVudC5yZW5kZXIoeyBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50LlRvcCB9KSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyB0YWJ1bGFyOiB0cnVlLCBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IG1haW46IFwiQWN0aXZlIHByb2plY3RcIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlByb2plY3QgIzJcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJQcm9qZWN0ICMzXCIgfSxcbiAgICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbHVzKSwgXCJOZXcgVGFiXCJdfVxuICAgICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCBzaXplOiBcImZsdWlkXCIsIHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJQaWNzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJDb21wYW5pZXNcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIkxpbmtzXCIgfVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEyLCBzdHJldGNoZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGhpcyBpcyBhbiBzdHJldGNoZWQgZ3JpZCBjb2x1bW4uIFRoaXMgc2VnbWVudCB3aWxsIGFsd2F5cyBtYXRjaCB0aGUgdGFiIGhlaWdodFwiKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCBzaXplOiBcImZsdWlkXCIsIHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJQaWNzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJDb21wYW5pZXNcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIkxpbmtzXCIgfVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTIsIHN0cmV0Y2hlZDogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRoaXMgaXMgYW4gc3RyZXRjaGVkIGdyaWQgY29sdW1uLiBUaGlzIHNlZ21lbnQgd2lsbCBhbHdheXMgbWF0Y2ggdGhlIHRhYiBoZWlnaHRcIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEyLCBzdHJldGNoZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGhpcyBpcyBhbiBzdHJldGNoZWQgZ3JpZCBjb2x1bW4uIFRoaXMgc2VnbWVudCB3aWxsIGFsd2F5cyBtYXRjaCB0aGUgdGFiIGhlaWdodFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCBzaXplOiBcImZsdWlkXCIsIHRhYnVsYXI6IHRydWUsIHJpZ2h0OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIHsgbWFpbjogXCJCaW9cIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG1haW46IFwiUGljc1wiIH0sXG4gICAgICAgICAgICB7IG1haW46IFwiQ29tcGFuaWVzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJMaW5rc1wiIH1cbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEyLCBzdHJldGNoZWQ6IHRydWV9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJUaGlzIGlzIGFuIHN0cmV0Y2hlZCBncmlkIGNvbHVtbi4gVGhpcyBzZWdtZW50IHdpbGwgYWx3YXlzIG1hdGNoIHRoZSB0YWIgaGVpZ2h0XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHNpemU6IFwiZmx1aWRcIiwgdGFidWxhcjogdHJ1ZSwgcmlnaHQ6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJQaWNzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJDb21wYW5pZXNcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIkxpbmtzXCIgfVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NLCBleDMuRE9NLCBleDQuRE9NLCBleDUuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVRleHRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiVGV4dFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGNhbiBiZSBmb3JtYXR0ZWQgZm9yIHRleHQgY29udGVudFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHRleHQ6IHRydWUgfSwgW1xuICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJTb3J0IGJ5XCIgfSxcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiQ2xvc2VzdFwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IENvbW1lbnRzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vc3QgUG9wdWxhclwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHRleHQ6IHRydWUgfSwgW1xuICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJFZGl0b3JpYWxzXCIgfSxcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiQ2xvc2VzdFwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IENvbW1lbnRzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vc3QgUG9wdWxhclwifVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG5cblxuICBmdW5jdGlvbiBjcmVhdGVWZXJ0aWNhbEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJWZXJ0aWNhbCBNZW51XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHZlcnRpY2FsIG1lbnUgZGlzcGxheXMgZWxlbWVudHMgdmVydGljYWxseS5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogW1xuICAgICAgICAgICAgXCJJbmJveFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBsZWZ0UG9pbnRpbmc6IHRydWUsIGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiMVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiU3BhbVwiLCBVSS5MYWJlbC5yZW5kZXIoXCI1MVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiVXBkYXRlc1wiLCBVSS5MYWJlbC5yZW5kZXIoXCIxXCIpXG4gICAgICAgICAgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoeyB0cmFuc3BhcmVudDogdHJ1ZSwgaWNvbjogdHJ1ZSwgcGxhY2Vob2xkZXI6IFwiU2VhcmNoIG1haWwuLi5cIiB9LCBbXG4gICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogW1xuICAgICAgICAgICAgXCJJbmJveFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBsZWZ0UG9pbnRpbmc6IHRydWUsIGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiMVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiU3BhbVwiLCBVSS5MYWJlbC5yZW5kZXIoXCI1MVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSx7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJVcGRhdGVzXCIsIFVJLkxhYmVsLnJlbmRlcihcIjFcIilcbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7dHJhbnNwYXJlbnQ6IHRydWUsIGljb246IHRydWUsIHBsYWNlaG9sZGVyOiBcIlNlYXJjaCBtYWlsLi4uXCJ9LCBbXG4gICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgc2Vjb25kYXJ5OiB0cnVlLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkFjY291bnRcIiB9LFxuICAgICAgICB7IG1haW46IFwiU2V0dGluZ3NcIiB9LFxuICAgICAgICB7IG1haW46IFwiRGlzcGxheSBPcHRpb25zXCIgfSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHNlY29uZGFyeTogdHJ1ZSwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJBY2NvdW50XCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNldHRpbmdzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkRpc3BsYXkgT3B0aW9uc1wiIH0sXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHRleHQ6IHRydWUgfSwgW1xuICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJTb3J0IGJ5XCIgfSxcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiQ2xvc2VzdFwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IENvbW1lbnRzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vc3QgUG9wdWxhclwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCB0ZXh0OiB0cnVlIH0sIFtcbiAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiRWRpdG9yaWFsc1wiIH0sXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkNsb3Nlc3RcIiB9LFxuICAgICAgICB7IG1haW46IFwiTW9zdCBDb21tZW50c1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IFBvcHVsYXJcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHBvaW50aW5nOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfSxcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBzZWNvbmRhcnk6IHRydWUsIHZlcnRpY2FsOiB0cnVlLCBwb2ludGluZzogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBzZWNvbmRhcnk6IHRydWUsIHZlcnRpY2FsOiB0cnVlLCBwb2ludGluZzogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NLCBleDMuRE9NLCBleDQuRE9NLCBleDUuRE9NXTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY3JlYXRlUGFnaW5hdGlvbkV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJQYWdpbmF0aW9uXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHBhZ2luYXRpb24gbWVudSBpcyBzcGVjaWFsbHkgZm9ybWF0dGVkIHRvIHByZXNlbnQgbGlua3MgdG8gcGFnZXMgb2YgY29udGVudFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHBhZ2luYXRpb246IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCIxXCIgfSxcbiAgICAgICAgeyBkaXNhYmxlZDogdHJ1ZSwgbWFpbjogXCIuLi5cIiB9LFxuICAgICAgICB7IG1haW46IFwiMTBcIiB9LFxuICAgICAgICB7IG1haW46IFwiMTFcIiB9LFxuICAgICAgICB7IG1haW46IFwiMTJcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBwYWdpbmF0aW9uOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiMVwiIH0sXG4gICAgICAgIHsgZGlzYWJsZWQ6IHRydWUsIG1haW46IFwiLi4uXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIjEwXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIjExXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIjEyXCIgfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZW51L3R5cGVzLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IHAsIGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmFyaWF0aW9ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IHN0YWNrYWJsZUV4ID0gY3JlYXRlU3RhY2thYmxlRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGludmVydGVkRXggPSBjcmVhdGVJbnZlcnRlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBjb2xvcmVkRXggPSBjcmVhdGVDb2xvcmVkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGljb25zRXggPSBjcmVhdGVJY29uc0V4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBsYWJlbGxlZEljb25zRXggPSBjcmVhdGVMYWJlbGVkSWNvbnNFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZmx1aWRFeCA9IGNyZWF0ZUZsdWlkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGNvbXBhY3RFeCA9IGNyZWF0ZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZXF1YWxXaWR0aEV4ID0gY3JlYXRlRXF1YWxXaWR0aEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBwb2ludGluZ0V4ID0gY3JlYXRlUG9pbnRpbmdFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgYXR0YWNoZWRFeCA9IGNyZWF0ZUF0dGFjaGVkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHNpemVFeCA9IGNyZWF0ZVNpemVFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZml0dGVkRXggPSBjcmVhdGVGaXR0ZWRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgYm9yZGVybGVzc0V4ID0gY3JlYXRlQm9yZGVybGVzc0V4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KHN0YWNrYWJsZUV4LCBpbnZlcnRlZEV4LCBjb2xvcmVkRXgsXG4gICAgICBpY29uc0V4LCBsYWJlbGxlZEljb25zRXgsIGZsdWlkRXgsIGNvbXBhY3RFeCwgZXF1YWxXaWR0aEV4LFxuICAgICAgcG9pbnRpbmdFeCwgYXR0YWNoZWRFeCwgc2l6ZUV4LCBmaXR0ZWRFeCwgYm9yZGVybGVzc0V4KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIGV4YW1wbGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0YWNrYWJsZUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTdGFja2FibGVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJBIG1lbnUgY2FuIHN0YWNrIGF0IG1vYmlsZSByZXNvbHV0aW9uc1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuSW5mbyB9LCBcIlN0YWNrYWJsZSBtZW51cyBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIG9ubHkgc2ltcGxlIG1lbnUgY29udGVudC4gU3RhY2tlZCBtZW51cyB3aWxsIG5vdCByZXBsaWNhdGUgYWxsIGFkZGl0aW9uYWwgc3R5bGluZ3MgZm9yIHZlcnRpY2FsIG1lbnVzIGxpa2UgYWRqdXN0aW5nIGRyb3Bkb3duIHBvc2l0aW9uLlwiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7IG1haW46IFwiRmVhdHVyZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiVGVzdGltb25pYWxzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNpZ24taW5cIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7bWFpbjogXCJGZWF0dXJlc1wifSxcbiAgICAgICAge21haW46IFwiVGVzdGltb25pYWxzXCJ9LFxuICAgICAgICB7bWFpbjogXCJTaWduLWluXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJJbnZlcnRlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBoYXZlIGl0cyBjb2xvcnMgaW52ZXJ0ZWQgdG8gc2hvdyBncmVhdGVyIGNvbnRyYXN0XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2ludmVydGVkOiB0cnVlfSwgW1xuICAgICAgICB7YWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIn0sXG4gICAgICAgIHttYWluOiBcIk1lc3NhZ2VzXCJ9LFxuICAgICAgICB7bWFpbjogXCJGcmllbmRzXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtpbnZlcnRlZDogdHJ1ZSwgdmVydGljYWw6IHRydWV9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHttYWluOiBcIkZyaWVuZHNcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtpbnZlcnRlZDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUsIHZlcnRpY2FsOiB0cnVlfSwgW1xuICAgICAgICB7YWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIn0sXG4gICAgICAgIHttYWluOiBcIk1lc3NhZ2VzXCJ9LFxuICAgICAgICB7bWFpbjogXCJGcmllbmRzXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLlNlZ21lbnQucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGludmVydGVkOiB0cnVlLCBzZWNvbmRhcnk6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuU2VnbWVudC5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuU2VnbWVudC5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuU2VnbWVudC5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTSwgZXgyLkRPTSwgZXgzLkRPTSwgZXg0LkRPTSwgZXg1LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb2xvcmVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbG9yZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkFkZGl0aW9uYWwgY29sb3JzIGNhbiBiZSBzcGVjaWZpZWRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgY29sb3I6IFwicHJpbWFyeVwiLCBtYWluOiBcIlByaW1hcnlcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcInNlY29uZGFyeVwiLCBtYWluOiBcIlNlY29uZGFyeVwiIH0sXG4gICAgICAgIHsgY29sb3I6IFwic3VjY2Vzc1wiLCBtYWluOiBcIlN1Y2Nlc3NcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcImluZm9cIiwgbWFpbjogXCJJbmZvXCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJ3YXJuaW5nXCIsIG1haW46IFwiV2FybmluZ1wiIH0sXG4gICAgICAgIHsgY29sb3I6IFwiZXJyb3JcIiwgbWFpbjogXCJFcnJvclwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogXCJQcmltYXJ5XCJ9LFxuICAgICAgICB7Y29sb3I6IFwic2Vjb25kYXJ5XCIsIG1haW46IFwiU2Vjb25kYXJ5XCJ9LFxuICAgICAgICB7Y29sb3I6IFwic3VjY2Vzc1wiLCBtYWluOiBcIlN1Y2Nlc3NcIn0sXG4gICAgICAgIHtjb2xvcjogXCJpbmZvXCIsIG1haW46IFwiSW5mb1wifSxcbiAgICAgICAge2NvbG9yOiBcIndhcm5pbmdcIiwgbWFpbjogXCJXYXJuaW5nXCJ9LFxuICAgICAgICB7Y29sb3I6IFwiZXJyb3JcIiwgbWFpbjogXCJFcnJvclwifVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcInByaW1hcnlcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgY29sb3I6IFwic2Vjb25kYXJ5XCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcInN1Y2Nlc3NcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgY29sb3I6IFwiaW5mb1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJ3YXJuaW5nXCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcImVycm9yXCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJwcmltYXJ5XCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcInNlY29uZGFyeVwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJzdWNjZXNzXCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcImluZm9cIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgY29sb3I6IFwid2FybmluZ1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJlcnJvclwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGVzZSBjb2xvcnMgY2FuIGFsc28gYmUgaW52ZXJ0ZWRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBjb2xvcjogXCJwcmltYXJ5XCIsIG1haW46IFwiUHJpbWFyeVwiIH0sXG4gICAgICAgIHsgY29sb3I6IFwic2Vjb25kYXJ5XCIsIG1haW46IFwiU2Vjb25kYXJ5XCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJzdWNjZXNzXCIsIG1haW46IFwiU3VjY2Vzc1wiIH0sXG4gICAgICAgIHsgY29sb3I6IFwiaW5mb1wiLCBtYWluOiBcIkluZm9cIiB9LFxuICAgICAgICB7IGNvbG9yOiBcIndhcm5pbmdcIiwgbWFpbjogXCJXYXJuaW5nXCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJlcnJvclwiLCBtYWluOiBcIkVycm9yXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtpbnZlcnRlZDogdHJ1ZX0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogXCJQcmltYXJ5XCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJzZWNvbmRhcnlcIiwgbWFpbjogXCJTZWNvbmRhcnlcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcInN1Y2Nlc3NcIiwgbWFpbjogXCJTdWNjZXNzXCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJpbmZvXCIsIG1haW46IFwiSW5mb1wiIH0sXG4gICAgICAgIHsgY29sb3I6IFwid2FybmluZ1wiLCBtYWluOiBcIldhcm5pbmdcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcImVycm9yXCIsIG1haW46IFwiRXJyb3JcIiB9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInNlY29uZGFyeVwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwic3VjY2Vzc1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiaW5mb1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwid2FybmluZ1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiZXJyb3JcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInNlY29uZGFyeVwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwic3VjY2Vzc1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiaW5mb1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwid2FybmluZ1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiZXJyb3JcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET00sIGV4My5ET00sIGV4NC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSWNvbnNFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiSWNvbnNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBtYXkgaGF2ZSBqdXN0IGljb25zXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaWNvbjogdHJ1ZSB9LCBbXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkdhbWVwYWQpXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSldIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpXSB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2ljb246IHRydWV9LCBbXG4gICAgICAgIHttYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCldfSxcbiAgICAgICAge21haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSldfSxcbiAgICAgICAge21haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KV19XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaWNvbjogdHJ1ZSwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKV0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KV0gfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgaWNvbjogdHJ1ZSwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKV0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KV0gfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTGFiZWxlZEljb25zRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkxhYmVsZWQgSWNvblwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBoYXZlIGxhYmVsZWQgaWNvbnNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7bGFiZWxlZEljb25zOiB0cnVlfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCksIFwiR2FtZXNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpLCBcIkNoYW5uZWxzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpLCBcIlZpZGVvc1wiXSB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCksIFwiR2FtZXNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpLCBcIkNoYW5uZWxzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpLCBcIlZpZGVvc1wiXSB9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTSwgZXgyLkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGbHVpZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJGbHVpZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSB2ZXJ0aWNhbCBtZW51IG1heSB0YWtlIHRoZSBzaXplIG9mIGl0cyBjb250YWluZXIuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgZmx1aWQ6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiUnVuXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIldhbGtcIiB9LFxuICAgICAgICB7IG1haW46IFwiQmlrZVwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7Zmx1aWQ6IHRydWV9LCBbXG4gICAgICAgIHttYWluOiBcIlJ1blwifSxcbiAgICAgICAge21haW46IFwiV2Fsa1wifSxcbiAgICAgICAge21haW46IFwiQmlrZVwifVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiQ29tcGFjdFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGNhbiB0YWtlIHVwIG9ubHkgdGhlIHNwYWNlIG5lY2Vzc2FyeSB0byBmaXQgaXRzIGNvbnRlbnRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIGNvbXBhY3Q6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7bGFiZWxlZEljb25zOiB0cnVlLCBjb21wYWN0OiB0cnVlfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIGNvbXBhY3Q6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCksIFwiR2FtZXNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpLCBcIkNoYW5uZWxzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpLCBcIlZpZGVvc1wiXSB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2xhYmVsZWRJY29uczogdHJ1ZSwgY29tcGFjdDogdHJ1ZSwgdmVydGljYWw6IHRydWV9LCBbXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkdhbWVwYWQpLCBcIkdhbWVzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlZpZGVvQ2FtZXJhKSwgXCJDaGFubmVsc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KSwgXCJWaWRlb3NcIl0gfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRXF1YWxXaWR0aEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJFcXVhbCBXaWR0aFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBkaXZpZGUgaXRzIGl0ZW1zIGV2ZW5seVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiQnV5XCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNlbGxcIiB9LFxuICAgICAgICB7IG1haW46IFwiUmVudFwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7ZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAge21haW46IFwiQnV5XCJ9LFxuICAgICAgICB7bWFpbjogXCJTZWxsXCJ9LFxuICAgICAgICB7bWFpbjogXCJSZW50XCJ9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlUG9pbnRpbmdFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUG9pbnRpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgdmVydGljYWwgbWVudSBjYW4gcG9pbnQgdG8gY29udGVudCBhZGphY2VudCB0byBpdHNlbGYgdG8gc2hvdyBvd25lcnNoaXBcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiU2l0ZSBUaXRsZVwiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXI6IHRydWUsIG1haW46IFtcIkdyb3VwZWQgU2VjdGlvblwiLCBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIlN1YnNlY3Rpb24gMVwiIH0sXG4gICAgICAgICAgICB7IG1haW46IFwiU3Vic2VjdGlvbiAyXCIsIGFjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIlN1YnNlY3Rpb24gM1wiIH1cbiAgICAgICAgICBdKV1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHBvaW50aW5nOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBcIlNpdGUgVGl0bGVcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyOiB0cnVlLCBtYWluOiBbXCJHcm91cGVkIFNlY3Rpb25cIiwgVUkuTWVudS5yZW5kZXIoeyBzdWJtZW51OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIHsgbWFpbjogXCJTdWJzZWN0aW9uIDFcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIlN1YnNlY3Rpb24gMlwiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJTdWJzZWN0aW9uIDNcIiB9XG4gICAgICAgICAgXSldXG4gICAgICAgIH1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVBdHRhY2hlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJBdHRhY2hlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBiZSBhdHRhY2hlZCB0byBvdGhlciBjb250ZW50IHNlZ21lbnRzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgYXR0YWNobWVudDogXCJ0b3BcIiwgdGFidWxhcjogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiVGFiIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJUYWIgMlwiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Cb3R0b20gfSwgW1xuICAgICAgICAgIHAoXCJUaGVyZSBhcmUgbWFueSB2YXJpYXRpb25zIG9mIHBhc3NhZ2VzIG9mIExvcmVtIElwc3VtIGF2YWlsYWJsZSwgYnV0IHRoZSBtYWpvcml0eSBoYXZlIHN1ZmZlcmVkIGFsdGVyYXRpb24gaW4gc29tZSBmb3JtLCBieSBpbmplY3RlZCBodW1vdXIsIG9yIHJhbmRvbWlzZWQgd29yZHMgd2hpY2ggZG9uJ3QgbG9vayBldmVuIHNsaWdodGx5IGJlbGlldmFibGUuIElmIHlvdSBhcmUgZ29pbmcgdG8gdXNlIGEgcGFzc2FnZSBvZiBMb3JlbSBJcHN1bSwgeW91IG5lZWQgdG8gYmUgc3VyZSB0aGVyZSBpc24ndCBhbnl0aGluZyBlbWJhcnJhc3NpbmcgaGlkZGVuIGluIHRoZSBtaWRkbGUgb2YgdGV4dC4gQWxsIHRoZSBMb3JlbSBJcHN1bSBnZW5lcmF0b3JzIG9uIHRoZSBJbnRlcm5ldCB0ZW5kIHRvIHJlcGVhdCBwcmVkZWZpbmVkIGNodW5rcyBhcyBuZWNlc3NhcnksIG1ha2luZyB0aGlzIHRoZSBmaXJzdCB0cnVlIGdlbmVyYXRvciBvbiB0aGUgSW50ZXJuZXQuIEl0IHVzZXMgYSBkaWN0aW9uYXJ5IG9mIG92ZXIgMjAwIExhdGluIHdvcmRzLCBjb21iaW5lZCB3aXRoIGEgaGFuZGZ1bCBvZiBtb2RlbCBzZW50ZW5jZSBzdHJ1Y3R1cmVzLCB0byBnZW5lcmF0ZSBMb3JlbSBJcHN1bSB3aGljaCBsb29rcyByZWFzb25hYmxlLiBUaGUgZ2VuZXJhdGVkIExvcmVtIElwc3VtIGlzIHRoZXJlZm9yZSBhbHdheXMgZnJlZSBmcm9tIHJlcGV0aXRpb24sIGluamVjdGVkIGh1bW91ciwgb3Igbm9uLWNoYXJhY3RlcmlzdGljIHdvcmRzIGV0Yy5cIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFwidG9wXCIsIHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIlRhYiAxXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiVGFiIDJcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuQm90dG9tIH0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcInRvcFwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuTm9uZSB9LCBbXG4gICAgICAgICAgcChcIlRoZXJlIGFyZSBtYW55IHZhcmlhdGlvbnMgb2YgcGFzc2FnZXMgb2YgTG9yZW0gSXBzdW0gYXZhaWxhYmxlLCBidXQgdGhlIG1ham9yaXR5IGhhdmUgc3VmZmVyZWQgYWx0ZXJhdGlvbiBpbiBzb21lIGZvcm0sIGJ5IGluamVjdGVkIGh1bW91ciwgb3IgcmFuZG9taXNlZCB3b3JkcyB3aGljaCBkb24ndCBsb29rIGV2ZW4gc2xpZ2h0bHkgYmVsaWV2YWJsZS4gSWYgeW91IGFyZSBnb2luZyB0byB1c2UgYSBwYXNzYWdlIG9mIExvcmVtIElwc3VtLCB5b3UgbmVlZCB0byBiZSBzdXJlIHRoZXJlIGlzbid0IGFueXRoaW5nIGVtYmFycmFzc2luZyBoaWRkZW4gaW4gdGhlIG1pZGRsZSBvZiB0ZXh0LiBBbGwgdGhlIExvcmVtIElwc3VtIGdlbmVyYXRvcnMgb24gdGhlIEludGVybmV0IHRlbmQgdG8gcmVwZWF0IHByZWRlZmluZWQgY2h1bmtzIGFzIG5lY2Vzc2FyeSwgbWFraW5nIHRoaXMgdGhlIGZpcnN0IHRydWUgZ2VuZXJhdG9yIG9uIHRoZSBJbnRlcm5ldC4gSXQgdXNlcyBhIGRpY3Rpb25hcnkgb2Ygb3ZlciAyMDAgTGF0aW4gd29yZHMsIGNvbWJpbmVkIHdpdGggYSBoYW5kZnVsIG9mIG1vZGVsIHNlbnRlbmNlIHN0cnVjdHVyZXMsIHRvIGdlbmVyYXRlIExvcmVtIElwc3VtIHdoaWNoIGxvb2tzIHJlYXNvbmFibGUuIFRoZSBnZW5lcmF0ZWQgTG9yZW0gSXBzdW0gaXMgdGhlcmVmb3JlIGFsd2F5cyBmcmVlIGZyb20gcmVwZXRpdGlvbiwgaW5qZWN0ZWQgaHVtb3VyLCBvciBub24tY2hhcmFjdGVyaXN0aWMgd29yZHMgZXRjLlwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcInRvcFwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuTm9uZSB9KSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVTaXplRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlNpemVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBjYW4gdmFyeSBpbiBzaXplXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogXCJtaW5pXCIgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiU2lnbiB1cFwiKV0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtzaXplOiBcIm1pbmlcIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNpemU6IFwidGlueVwiIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIlNpZ24gdXBcIildIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7c2l6ZTogXCJ0aW55XCJ9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHtyaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICB7bWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoe2NvbG9yOiBVSS5Db2xvci5QcmltYXJ5fSwgXCJTaWduIHVwXCIpXX1cbiAgICAgICAgXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBzaXplOiBcInNtYWxsXCIgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiU2lnbiB1cFwiKV0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtzaXplOiBcInNtYWxsXCJ9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHtyaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICB7bWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoe2NvbG9yOiBVSS5Db2xvci5QcmltYXJ5fSwgXCJTaWduIHVwXCIpXX1cbiAgICAgICAgXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBzaXplOiBcIm1lZGl1bVwiIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIlNpZ24gdXBcIildIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7c2l6ZTogXCJtZWRpdW1cIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXg1ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNpemU6IFwibGFyZ2VcIiB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgcmlnaHRNZW51OiB0cnVlLCBtYWluOiBbXG4gICAgICAgICAgICB7IG1haW46IFtVSS5CdXR0b24ucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLlByaW1hcnkgfSwgXCJTaWduIHVwXCIpXSB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe3NpemU6IFwibGFyZ2VcIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXg3ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNpemU6IFwiaHVnZVwiIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIlNpZ24gdXBcIildIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7c2l6ZTogXCJodWdlXCJ9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHtyaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICB7bWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoe2NvbG9yOiBVSS5Db2xvci5QcmltYXJ5fSwgXCJTaWduIHVwXCIpXX1cbiAgICAgICAgXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIGxldCBleDggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogXCJtYXNzaXZlXCIgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiU2lnbiB1cFwiKV0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtzaXplOiBcIm1hc3NpdmVcIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET00sIGV4My5ET00sIGV4NC5ET00sIGV4NS5ET00sIGV4Ny5ET00sIGV4OC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRml0dGVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkZpdHRlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGl0ZW0gb3IgbWVudSBjYW4gcmVtb3ZlIGVsZW1lbnQgcGFkZGluZywgdmVydGljYWxseSBvciBob3Jpem9udGFsbHlcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7Zml0dGVkOiB0cnVlLCBtYWluOiBcIk5vIHBhZGRpbmcgd2hhdHNvZXZlclwifSxcbiAgICAgICAge2hvcml6b250YWxseUZpdHRlZDogdHJ1ZSwgbWFpbjogXCJObyBob3Jpem9udGFsIHBhZGRpbmdcIn0sXG4gICAgICAgIHt2ZXJ0aWNhbGx5Rml0dGVkOiB0cnVlLCBtYWluOiBcIk5vIHZlcnRpY2FsIHBhZGRpbmdcIn1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHtmaXR0ZWQ6IHRydWUsIG1haW46IFwiTm8gcGFkZGluZyB3aGF0c29ldmVyXCJ9LFxuICAgICAgICB7aG9yaXpvbnRhbGx5Rml0dGVkOiB0cnVlLCBtYWluOiBcIk5vIGhvcml6b250YWwgcGFkZGluZ1wifSxcbiAgICAgICAge3ZlcnRpY2FsbHlGaXR0ZWQ6IHRydWUsIG1haW46IFwiTm8gdmVydGljYWwgcGFkZGluZ1wifVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJvcmRlcmxlc3NFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiQm9yZGVybGVzc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG9yIG1lbnUgaXRlbSBjYW4gaGF2ZSBubyBib3JkZXJzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHtib3JkZXJsZXNzOiB0cnVlfSwgW1xuICAgICAgICB7bWFpbjogXCIxXCJ9LFxuICAgICAgICB7bWFpbjogXCIyXCJ9LFxuICAgICAgICB7bWFpbjogXCIzXCJ9LFxuICAgICAgICB7bWFpbjogXCI0XCJ9LFxuICAgICAgICB7bWFpbjogXCI1XCJ9LFxuICAgICAgICB7bWFpbjogXCI2XCJ9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2JvcmRlcmxlc3M6IHRydWV9LCBbXG4gICAgICAgIHttYWluOiBcIjFcIn0sXG4gICAgICAgIHttYWluOiBcIjJcIn0sXG4gICAgICAgIHttYWluOiBcIjNcIn0sXG4gICAgICAgIHttYWluOiBcIjRcIn0sXG4gICAgICAgIHttYWluOiBcIjVcIn0sXG4gICAgICAgIHttYWluOiBcIjZcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS92YXJpYXRpb25zLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgVHlwZXMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgU3RhdGVzIH0gZnJvbSBcIi4vc3RhdGVzXCI7XG5pbXBvcnQgeyBWYXJpYXRpb25zIH0gZnJvbSBcIi4vdmFyaWF0aW9uc1wiO1xuZXhwb3J0IG5hbWVzcGFjZSBNZXNzYWdlIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKSB7XG4gICAgbGV0IHR5cGVzID0gVHlwZXMucnVuKHNvdXJjZXMpO1xuICAgIGxldCBzdGF0ZXMgPSBTdGF0ZXMucnVuKHNvdXJjZXMpO1xuICAgIGxldCB2YXJpYXRpb25zID0gVmFyaWF0aW9ucy5ydW4oc291cmNlcyk7XG5cbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHR5cGVzLCBzdGF0ZXMsIHZhcmlhdGlvbnMpLm1hcChcbiAgICAgIChbdHlwZXMsIHN0YXRlcywgdmFyaWF0aW9uc10pID0+XG4gICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJhcnRpY2xlXCIgfSB9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sXG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbWFpbjogXCJNZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICBzdWJ0ZXh0OiBcIkEgbWVzc2FnZSBkaXNwbGF5cyBpbmZvcm1hdGlvbiB0aGF0IGV4cGxhaW5zIG5lYXJieSBjb250ZW50XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29udGFpbmVyLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJUeXBlc1wiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdCh0eXBlcylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJTdGF0ZXNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoc3RhdGVzKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlZhcmlhdGlvbnNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQodmFyaWF0aW9ucylcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSlcbiAgICApIGFzIFN0cmVhbTxWTm9kZT47XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgcm91dGVyOiB4cy5uZXZlcigpXG4gICAgfTtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL2luZGV4LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0YXRlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJIaWRkZW5cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gYmUgaGlkZGVuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lc3NhZ2UucmVuZGVyKHtoaWRkZW46IHRydWV9LCBcIllvdSBjYW4ndCBzZWUgbWUhXCIpKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7aGlkZGVuOiB0cnVlfSwgXCJZb3UgY2FuJ3Qgc2VlIG1lIVwiKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiVmlzaWJsZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZXNzYWdlIGNhbiBiZSBzZXQgdG8gdmlzaWJsZSB0byBmb3JjZSBpdHNlbGYgdG8gYmUgc2hvd24uXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lc3NhZ2UucmVuZGVyKHtmb3JjZVZpc2libGU6IHRydWV9LCBcIllvdSBjYW4gYWx3YXlzIHNlZSBtZS5cIikpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtmb3JjZVZpc2libGU6IHRydWV9LCBcIllvdSBjYW4gYWx3YXlzIHNlZSBtZS5cIilgXG4gICAgfSk7XG5cblxuICAgIHJldHVybiB4cy5jb21iaW5lKGV4MS5ET00sIGV4Mi5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL3N0YXRlcy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBUeXBlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJNZXNzYWdlXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGJhc2ljIG1lc3NhZ2VcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVzc2FnZS5yZW5kZXIoe1xuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgaGVhZGVyOiBcIkNoYW5nZXMgaW4gU2VydmljZVwiLFxuICAgICAgICAgIG1haW46IFwiV2UganVzdCB1cGRhdGVkIG91ciBwcml2YWN5IHBvbGljeSBoZXJlIHRvIGJldHRlciBzZXJ2aWNlIG91ciBjdXN0b21lcnMuIFdlIHJlY29tbWVuZCByZXZpZXdpbmcgdGhlIGNoYW5nZXMuXCJcbiAgICAgICAgfVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIGhlYWRlcjogXCJDaGFuZ2VzIGluIFNlcnZpY2VcIixcbiAgICAgICAgICBtYWluOiBcIldlIGp1c3QgdXBkYXRlZCBvdXIgcHJpdmFjeSBwb2xpY3kgaGVyZSB0byBiZXR0ZXIgc2VydmljZSBvdXIgY3VzdG9tZXJzLiBXZSByZWNvbW1lbmQgcmV2aWV3aW5nIHRoZSBjaGFuZ2VzLlwiXG4gICAgICAgIH1cbiAgICAgIH0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJMaXN0IG1lc3NhZ2VcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSB3aXRoIGEgbGlzdFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBoZWFkZXI6IFwiTmV3IFNpdGUgRmVhdHVyZXNcIixcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5MaXN0LnJlbmRlcih7IGJ1bGxldGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIllvdSBjYW4gbm93IGhhdmUgY292ZXIgaW1hZ2VzIG9uIGJsb2cgcGFnZXNcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiRHJhZnRzIHdpbGwgbm93IGF1dG8tc2F2ZSB3aGlsZSB3cml0aW5nXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBoZWFkZXI6IFwiTmV3IFNpdGUgRmVhdHVyZXNcIixcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5MaXN0LnJlbmRlcih7YnVsbGV0ZWQ6IHRydWV9LCBbXG4gICAgICAgICAgICAgIHttYWluOiBcIllvdSBjYW4gbm93IGhhdmUgY292ZXIgaW1hZ2VzIG9uIGJsb2cgcGFnZXNcIn0sXG4gICAgICAgICAgICAgIHttYWluOiBcIkRyYWZ0cyB3aWxsIG5vdyBhdXRvLXNhdmUgd2hpbGUgd3JpdGluZ1wifVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogW1wiSWNvbiBNZXNzYWdlXCIsIFVJLkxhYmVsLnJlbmRlcih7Y29sb3I6IFwicHJpbWFyeVwifSwgXCJmbGV4Ym94XCIpXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gY29udGFpbiBhbiBpY29uLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBpY29uOiBbVUkuSWNvbi5yZW5kZXIoXCJpbmJveFwiKV0sXG4gICAgICAgICAgaGVhZGVyOiBcIkhhdmUgeW91IGhlYXJkIGFib3V0IG91ciBtYWlsaW5nIGxpc3Q/XCIsXG4gICAgICAgICAgbWFpbjogXCJHZXQgdGhlIGJlc3QgbmV3cyBpbiB5b3VyIGUtbWFpbCBldmVyeSBkYXkuXCJcbiAgICAgICAgfVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIGljb246IFtVSS5JY29uLnJlbmRlcihcImluYm94XCIpXSxcbiAgICAgICAgICBoZWFkZXI6IFwiSGF2ZSB5b3UgaGVhcmQgYWJvdXQgb3VyIG1haWxpbmcgbGlzdD9cIixcbiAgICAgICAgICBtYWluOiBcIkdldCB0aGUgYmVzdCBuZXdzIGluIHlvdXIgZS1tYWlsIGV2ZXJ5IGRheS5cIlxuICAgICAgICB9XG4gICAgICB9KWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIGljb246IFtVSS5JY29uLnJlbmRlcih7bG9hZGluZzogdHJ1ZX0sIFwibm90Y2hlZCBjaXJjbGVcIildLFxuICAgICAgICAgIGhlYWRlcjogXCJKdXN0IG9uZSBzZWNvbmRcIixcbiAgICAgICAgICBtYWluOiBcIldlJ3JlIGZldGNoaW5nIHRoYXQgY29udGVudCBmb3IgeW91LlwiXG4gICAgICAgIH1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBpY29uOiBbVUkuSWNvbi5yZW5kZXIoe2xvYWRpbmc6IHRydWV9LCBcIm5vdGNoZWQgY2lyY2xlXCIpXSxcbiAgICAgICAgICBoZWFkZXI6IFwiSnVzdCBvbmUgc2Vjb25kXCIsXG4gICAgICAgICAgbWFpbjogXCJXZSdyZSBmZXRjaGluZyB0aGF0IGNvbnRlbnQgZm9yIHlvdS5cIlxuICAgICAgICB9XG4gICAgICB9KWBcbiAgICB9KTtcblxuICAgIGxldCBtc2cgPSBVSS5NZXNzYWdlLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgY29udGVudCQ6IHhzLm9mKHtcbiAgICAgICAgaGVhZGVyOiBcIldlbGNvbWUgYmFjayFcIixcbiAgICAgICAgbWFpbjogXCJUaGlzIGlzIGEgc3BlY2lhbCBub3RpZmljYXRpb24gd2hpY2ggeW91IGNhbiBkaXNtaXNzIGlmIHlvdSdyZSBib3JlZCB3aXRoIGl0LlwiXG4gICAgICB9KSwgYXJnczoge1xuICAgICAgICBjbG9zZWFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgZXg1ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkRpc21pc3NhYmxlIEJsb2NrXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lc3NhZ2UgdGhhdCB0aGUgdXNlciBjYW4gY2hvb3NlIHRvIGhpZGVcIixcbiAgICAgIFZOb2RlJDogbXNnLkRPTSxcbiAgICAgIGNvZGU6IGBsZXQgbXNnID0gVUkuTWVzc2FnZS5ydW4oe1xuICAgICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgICBjb250ZW50JDogeHMub2Yoe1xuICAgICAgICAgIGhlYWRlcjogXCJXZWxjb21lIGJhY2shXCIsXG4gICAgICAgICAgbWFpbjogXCJUaGlzIGlzIGEgc3BlY2lhbCBub3RpZmljYXRpb24gd2hpY2ggeW91IGNhbiBkaXNtaXNzIGlmIHlvdSdyZSBib3JlZCB3aXRoIGl0LlwiXG4gICAgICAgIH0pLCBhcmdzOiB7XG4gICAgICAgICAgY2xvc2VhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO2BcbiAgICB9KTtcblxuXG5cbiAgICByZXR1cm4geHMuY29tYmluZShleDEuRE9NLCBleDIuRE9NLCBleDMuRE9NLCBleDQuRE9NLCBleDUuRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVzc2FnZS90eXBlcy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIGEsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFZhcmlhdGlvbnMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuXG4gICAgbGV0IGZsb2F0aW5nRXggPSBtYWtlRmxvYXRpbmdFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgY29tcGFjdEV4ID0gbWFrZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgYXR0YWNoZWRFeCA9IG1ha2VBdHRhY2hlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBjb2xvcmVkRXggPSBtYWtlQ29sb3JlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBzaXplRXggPSBtYWtlU2l6ZUV4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KGZsb2F0aW5nRXgsIGNvbXBhY3RFeCwgYXR0YWNoZWRFeCwgY29sb3JlZEV4LCBzaXplRXgpO1xuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIGV4YW1wbGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VGbG9hdGluZ0V4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRmxvYXRpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gZmxvYXQgYWJvdmUgY29udGVudCB0aGF0IGl0IGlzIHJlbGF0ZWQgdG9cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVzc2FnZS5yZW5kZXIoeyBmbG9hdGluZzogdHJ1ZSB9LCBcIldheSB0byBnbyFcIikpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtmbG9hdGluZzogdHJ1ZX0sIFwiV2F5IHRvIGdvIVwiKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4MS5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXgxID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbXBhY3RcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gb25seSB0YWtlIHVwIHRoZSB3aWR0aCBvZiBpdHMgY29udGVudC5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVzc2FnZS5yZW5kZXIoeyBjb21wYWN0OiB0cnVlIH0sIFwiR2V0IGFsbCB0aGUgYmVzdCBpbnZlbnRpb25zIGluIHlvdXIgZS1tYWlsIGV2ZXJ5IGRheS4gU2lnbiB1cCBub3chXCIpKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7aGlkZGVuOiB0cnVlfSwgXCJHZXQgYWxsIHRoZSBiZXN0IGludmVudGlvbnMgaW4geW91ciBlLW1haWwgZXZlcnkgZGF5LiBTaWduIHVwIG5vdyFcIilgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW2V4MS5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUF0dGFjaGVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJBdHRhY2hlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZXNzYWdlIGNhbiBiZSBmb3JtYXR0ZWQgdG8gYXR0YWNoIGl0c2VsZiB0byBvdGhlciBjb250ZW50XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBhdHRhY2htZW50OiBcInRvcFwiIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaGVhZGVyOiBcIldlbGNvbWUgdG8gb3VyIHNpdGUhXCIsXG4gICAgICAgICAgICBtYWluOiBcIkZpbGwgb3V0IHRoZSBmb3JtIGJlbG93IHRvIHNpZ24tdXAgZm9yIGEgbmV3IGFjY291bnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogXCJub25lXCIgfSwgW1xuICAgICAgICAgIFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlVzZXJuYW1lXCIgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHR5cGU6IFwicGFzc3dvcmRcIiB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGlubGluZTogdHJ1ZSB9LCBbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMuXCIpXSksXG4gICAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKHsgY29sb3I6IFwicHJpbWFyeVwiIH0sIFwiU3VibWl0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBhdHRhY2htZW50OiBcImJvdHRvbVwiLCBjb2xvcjogXCJ3YXJuaW5nXCIgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBpY29uOiBbVUkuSWNvbi5yZW5kZXIoXCJoZWxwXCIpXSxcbiAgICAgICAgICAgIG1haW46IFtcIkFscmVhZHkgc2lnbmVkIHVwPyBcIiwgYSh7IGF0dHJzOiB7IGhyZWY6IFwiI1wiIH0gfSwgXCJMb2dpbiBoZXJlXCIpLCBcIiBpbnN0ZWFkXCJdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBhdHRhY2htZW50OiBcInRvcFwiIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaGVhZGVyOiBcIldlbGNvbWUgdG8gb3VyIHNpdGUhXCIsXG4gICAgICAgICAgICBtYWluOiBcIkZpbGwgb3V0IHRoZSBmb3JtIGJlbG93IHRvIHNpZ24tdXAgZm9yIGEgbmV3IGFjY291bnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogXCJub25lXCIgfSwgW1xuICAgICAgICAgIFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlVzZXJuYW1lXCIgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHR5cGU6IFwicGFzc3dvcmRcIiB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7aW5saW5lOiB0cnVlfSwgW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLlwiKV0pLFxuICAgICAgICAgICAgVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFwicHJpbWFyeVwifSwgXCJTdWJtaXRcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzIDoge2F0dGFjaG1lbnQ6IFwiYm90dG9tXCIsIGNvbG9yOiBcIndhcm5pbmdcIn0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaWNvbjogW1VJLkljb24ucmVuZGVyKFwiaGVscFwiKV0sXG4gICAgICAgICAgICBtYWluOiBbXCJBbHJlYWR5IHNpZ25lZCB1cD9cIiwgYSh7YXR0cnM6IHtocmVmOiBcIiNcIn19LCBcIkxvZ2luIGhlcmVcIiksIFwiIGluc3RlYWRcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4MS5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUNvbG9yZWRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXgxID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbG9yZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gYmUgZm9ybWF0dGVkIHRvIGJlIGRpZmZlcmVudCBjb2xvcnNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogXCJwcmltYXJ5XCIgfSwgXCJQcmltYXJ5XCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcInNlY29uZGFyeVwiIH0sIFwiU2Vjb25kYXJ5XCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcInN1Y2Nlc3NcIiB9LCBcIlN1Y2Nlc3NcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwiaW5mb1wiIH0sIFwiSW5mb1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogXCJ3YXJuaW5nXCIgfSwgXCJXYXJuaW5nXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcImVycm9yXCIgfSwgXCJFcnJvclwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcInByaW1hcnlcIiB9LCBcIlByaW1hcnlcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwic2Vjb25kYXJ5XCIgfSwgXCJTZWNvbmRhcnlcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwic3VjY2Vzc1wiIH0sIFwiU3VjY2Vzc1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogXCJpbmZvXCIgfSwgXCJJbmZvXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcIndhcm5pbmdcIiB9LCBcIldhcm5pbmdcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwiZXJyb3JcIiB9LCBcIkVycm9yXCIpYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXgxLkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlU2l6ZUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU2l6ZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZXNzYWdlIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplc1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwibWluaVwiIH0sIFwiVGhpcyBpcyBhIG1pbmkgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcInRpbnlcIiB9LCBcIlRoaXMgaXMgYSB0aW55IG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJzbWFsbFwiIH0sIFwiVGhpcyBpcyBhIHNtYWxsIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJtZWRpdW1cIiB9LCBcIlRoaXMgaXMgYSBtZWRpdW0gbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcImxhcmdlXCIgfSwgXCJUaGlzIGlzIGEgbGFyZ2UgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcImJpZ1wiIH0sIFwiVGhpcyBpcyBhIGJpZyBtZXNzYWdlXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwiaHVnZVwiIH0sIFwiVGhpcyBpcyBhIGh1Z2UgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcIm1hc3NpdmVcIiB9LCBcIlRoaXMgaXMgYSBtYXNzaXZlIG1lc3NhZ2VcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcIm1pbmlcIiB9LCBcIlRoaXMgaXMgYSBtaW5pIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJ0aW55XCIgfSwgXCJUaGlzIGlzIGEgdGlueSBtZXNzYWdlXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwic21hbGxcIiB9LCBcIlRoaXMgaXMgYSBzbWFsbCBtZXNzYWdlXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwibWVkaXVtXCIgfSwgXCJUaGlzIGlzIGEgbWVkaXVtIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJsYXJnZVwiIH0sIFwiVGhpcyBpcyBhIGxhcmdlIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJiaWdcIiB9LCBcIlRoaXMgaXMgYSBiaWcgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcImh1Z2VcIiB9LCBcIlRoaXMgaXMgYSBodWdlIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJtYXNzaXZlXCIgfSwgXCJUaGlzIGlzIGEgbWFzc2l2ZSBtZXNzYWdlXCIpYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXgxLkRPTV07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lc3NhZ2UvdmFyaWF0aW9ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIHAsIHByZSwgY29kZSwgVk5vZGUsIGJyLCB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgaXNvbGF0ZSBmcm9tIFwiQGN5Y2xlL2lzb2xhdGVcIjtcbmRlY2xhcmUgdmFyIGhsanM6IGFueTtcblxuZXhwb3J0IG5hbWVzcGFjZSBFeGFtcGxlIHtcbiAgZXhwb3J0IGludGVyZmFjZSBBcmd1bWVudHMge1xuICAgIFZOb2RlJDogU3RyZWFtPFZOb2RlPjtcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgaGVhZGVyPzogVUkuRE9NQ29udGVudDtcbiAgICBkZXNjcmlwdGlvbj86IFVJLkRPTUNvbnRlbnQ7XG4gICAgaGlnaGxpZ2h0ZWQ/OiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcywgYXJnczogQXJndW1lbnRzKTogeyBET006IFN0cmVhbTxWTm9kZT4gfSB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzKSB7XG4gICAgICAvL1Nob3cgY29kZSBpY29uXG4gICAgICBsZXQgYnRuU2hvdyA9IFVJLkljb24ucnVuKHtcbiAgICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgICAgY29udGVudCQ6IHhzLm9mKFVJLkljb25UeXBlLkNvZGUpXG4gICAgICB9KTtcbiAgICAgIGxldCB0cmFuc2l0aW9uJCA9IGJ0blNob3cuZXZlbnRzKFwiY2xpY2tcIikuZm9sZCgocHJldiwgbikgPT4gIXByZXYsIGZhbHNlKS5kcm9wKDEpLm1hcChcbiAgICAgICAgbiA9PiAoe1xuICAgICAgICAgIGFuaW1hdGlvbjogVUkuQW5pbWF0aW9uLlNsaWRlLFxuICAgICAgICAgIGRpcmVjdGlvbjogbiA/IFVJLkRpcmVjdGlvbi5JbiA6IFVJLkRpcmVjdGlvbi5PdXRcbiAgICAgICAgfSlcbiAgICAgICkuc3RhcnRXaXRoKHtcbiAgICAgICAgYW5pbWF0aW9uOiBVSS5BbmltYXRpb24uTm9uZSxcbiAgICAgICAgZGlyZWN0aW9uOiBVSS5EaXJlY3Rpb24uT3V0XG4gICAgICB9KTtcblxuICAgICAgLy9TbGlkaW5nIGNvZGUgdmlld1xuICAgICAgbGV0IGNvZGVsaW5lcyA9IGFyZ3MuY29kZS5zcGxpdCgvXFxyP1xcbi8pO1xuICAgICAgLy9UcmltIGxlYWRpbmcgd2hpdGVzcGFjZVxuICAgICAgbGV0IGJhc2VXaGl0ZXNwYWNlID0gY29kZWxpbmVzLmxlbmd0aCA+IDEgPyBjb3VudExlYWRpbmdXaGl0ZXNwYWNlKGNvZGVsaW5lc1sxXSkgLSAyIDogMDtcbiAgICAgIGNvZGVsaW5lcyA9IGNvZGVsaW5lcy5tYXAoKGxpbmUsIGkpID0+IGkgPT09IDAgPyBsaW5lIDogbGluZS5zdWJzdHJpbmcoYmFzZVdoaXRlc3BhY2UpKTtcbiAgICAgIGxldCBjb2RlJCA9IHhzLm9mKFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuQm90dG9tIH0sIFtwcmUoW1xuICAgICAgICAgIGNvZGUoe1xuICAgICAgICAgICAgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImphdmFzY3JpcHRcIiB9LCBob29rOiB7XG4gICAgICAgICAgICAgIGluc2VydDogKHZub2RlKSA9PiB7IGhsanMuaGlnaGxpZ2h0QmxvY2sodm5vZGUuZWxtKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGNvZGVsaW5lcy5tYXAobGluZSA9PiBbbGluZSwgYnIoKV0pLnJlZHVjZSgoYWNjLCBuKSA9PiBhY2MuY29uY2F0KG4pLCBbXSkpXG4gICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgICAgbGV0IGFuaW1hdGVkQ29kZSQgPSBVSS5UcmFuc2l0aW9uLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHRhcmdldCQ6IGNvZGUkLFxuICAgICAgICB0cmFuc2l0aW9uJDogdHJhbnNpdGlvbiRcbiAgICAgIH0pO1xuXG4gICAgICAvL0V4YW1wbGUgYmFyXG4gICAgICBsZXQgdG9wJCA9IHhzLmNvbWJpbmUodHJhbnNpdGlvbiQsIGFyZ3MuVk5vZGUkKS5tYXAoKFthbmltYXRpb24sIG9ial0pID0+IHtcbiAgICAgICAgbGV0IGlzQWN0aXZlID0gYW5pbWF0aW9uLmRpcmVjdGlvbiA9PT0gVUkuRGlyZWN0aW9uLkluO1xuICAgICAgICBsZXQgZWxlbSA9IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogaXNBY3RpdmUgPyBcInVpIHRvcCBhdHRhY2hlZCBzZWdtZW50IGNvZGVcIiA6IFwiY29kZVwiIH0gfSwgW1xuICAgICAgICAgIGlzQWN0aXZlID8gVUkuTGFiZWwucmVuZGVyKHsgYXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Ub3AgfSwgW1xuICAgICAgICAgICAgXCJFeGFtcGxlXCJcbiAgICAgICAgICBdKSA6IGRpdih7IHN0eWxlOiB7IGRpc3BsYXk6IFwibm9uZVwiIH0sIHByb3BzOiB7IGNsYXNzTmFtZTogXCJcIiB9IH0pLFxuICAgICAgICAgIG9ialxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICB9KTtcbiAgICAgIGxldCB2VHJlZSQgPSB4cy5jb21iaW5lKGJ0blNob3cuRE9NLCBhbmltYXRlZENvZGUkLkRPTSwgdG9wJCkubWFwKFxuICAgICAgICAoW2J0blNob3csIGNvZGUsIHRvcF0pID0+IHtcbiAgICAgICAgICBsZXQgY29udGVudCA9IFtidG5TaG93LCB0b3AsIGNvZGVdO1xuICAgICAgICAgIGlmICh0eXBlb2YgKGFyZ3MuZGVzY3JpcHRpb24pICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gdHlwZW9mIChhcmdzLmRlc2NyaXB0aW9uKSA9PT0gXCJzdHJpbmdcIiA/IFtwKGFyZ3MuZGVzY3JpcHRpb24pXS5jb25jYXQoY29udGVudCkgOiBbXS5jb25jYXQoYXJncy5kZXNjcmlwdGlvbiwgY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgKGFyZ3MuaGVhZGVyKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgY29udGVudCA9IFtVSS5IZWFkZXIucmVuZGVyKGFyZ3MuaGVhZGVyKV0uY29uY2F0KGNvbnRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBhcmdzLmhpZ2hsaWdodGVkID8gXCJoaWdobGlnaHRlZCBleGFtcGxlXCIgOiBcImV4YW1wbGVcIiB9IH0sIGNvbnRlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogdlRyZWUkXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4pO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cbiAgZnVuY3Rpb24gY291bnRMZWFkaW5nV2hpdGVzcGFjZShzdHJpbmc6IHN0cmluZykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc3RyaW5nW2ldICE9PSBcIiBcIiAmJiBzdHJpbmdbaV0gIT09IFwiXFx0XCIpIHtcbiAgICAgICAgcmV0dXJuIChpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChzdHJpbmcubGVuZ3RoKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29tcG9uZW50cy9leGFtcGxlLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uL3VpXCI7XG5pbXBvcnQgeHMgZnJvbSBcInhzdHJlYW1cIjtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtdmFyaWFibGVcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEluZGV4IHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKSB7XG4gICAgY29uc3QgdlRyZWUkID0geHMub2YoXG4gICAgICBkaXYoXCIuY2VudGVyZWRcIiwgW1xuICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICBVSS5HcmlkLnJlbmRlcih7IGNlbnRlcmVkOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkh1Z2UgfSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBtYWluOiBcIldlbGNvbWUuXCIsXG4gICAgICAgICAgICAgICAgICBzdWJ0ZXh0OiBcIkF0IHRoZSBtb21lbnQgdGhlIGRvY3MgYXJlIGEgV0lQLiBQbGFubmVkIHBhZ2VzIGFyZSBzY2FmZm9sZGVkIGluIHRoZSBzaWRlbWVudS5cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgcm91dGVyOiB4cy5uZXZlcigpXG4gICAgfTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvaW5kZXgvaW5kZXgudHMiLCIvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLXZhcmlhYmxlXG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtdmFyaWFibGVcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgU2lkZWJhciB9IGZyb20gXCIuL3NpZGViYXJcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMYXlvdXQge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IGFueSwgcGFnZTogYW55KSB7XG5cbiAgICAvKioqIENyZWF0ZSBjb21wb25lbnRzICoqKi9cbiAgICBsZXQgc2lkZWJhciA9IFNpZGViYXIucnVuKHNvdXJjZXMpO1xuICAgIC8qKiogQ29tcG9zZSB2aWV3ICoqKi9cbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHNpZGViYXIuRE9NLCBwYWdlLkRPTSwpXG4gICAgICAubWFwKChbc2lkZWJhciwgcGFnZV0pID0+XG4gICAgICAgIGRpdihcIi5mdWxsLmhlaWdodFwiLCBbXG4gICAgICAgICAgZGl2KFwiLmNvbnRlbnQucHVzaGVyXCIsIFtcbiAgICAgICAgICAgIHNpZGViYXIsXG4gICAgICAgICAgICBwYWdlXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIHJvdXRlcjogcGFnZS5yb3V0ZXJcbiAgICB9O1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9sYXlvdXQvaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgZGl2fSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFNpZGViYXIge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpIHtcbiAgICBsZXQgY3VycmVudFBhZ2UkID0gc291cmNlcy5yb3V0ZXIubWFwKHggPT4geC5wYXRobmFtZSkgYXMgU3RyZWFtPHN0cmluZz47XG4gICAgbGV0IHByZWZpeCA9IFwiL2N5Y2xlLXNlbWFudGljLXVpXCI7XG4gICAgY29uc3QgdlRyZWUkID0gY3VycmVudFBhZ2UkLm1hcChwYWdlID0+XG4gICAgICBkaXYoXCIubGVmdC5tZW51XCIsIFtcbiAgICAgICAgZGl2KFwiLmZpeGVkXCIsIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7XG4gICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSwgaW52ZXJ0ZWQ6IHRydWUsXG4gICAgICAgICAgICBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50Lk5vbmUsIHNpemU6IFVJLlNpemUuRmx1aWRcbiAgICAgICAgICB9LCBbe1xuICAgICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgICAgbWFpbjogW1wiSW50cm9kdWN0aW9uXCIsIFVJLk1lbnUucmVuZGVyKFxuICAgICAgICAgICAgICB7IHN1Ym1lbnU6IHRydWUsIH0sIFt7XG4gICAgICAgICAgICAgICAgbGluazogdHJ1ZSwgaHJlZjogcHJlZml4ICsgXCIvXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvXCIgfHwgcGFnZSA9PT0gcHJlZml4ICsgXCIvaG9tZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQWJvdXRcIlxuICAgICAgICAgICAgICB9XSldXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgICBtYWluOiBbXCJFbGVtZW50c1wiLCBVSS5NZW51LnJlbmRlcihcbiAgICAgICAgICAgICAgeyBzdWJtZW51OiB0cnVlLCB9LCBbe1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2J1dHRvblwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2J1dHRvblwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQnV0dG9uXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2NvbnRhaW5lclwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2NvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQ29udGFpbmVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2RpdmlkZXJcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9kaXZpZGVyXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJEaXZpZGVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2hlYWRlclwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2hlYWRlclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiSGVhZGVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2ljb25cIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9pY29uXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJJY29uXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2ltYWdlXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvZWxlbWVudHMvaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIkltYWdlXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2xhYmVsXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvZWxlbWVudHMvbGFiZWxcIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIkxhYmVsXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2xpc3RcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9saXN0XCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJMaXN0XCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2xvYWRlclwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2xvYWRlclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTG9hZGVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL3NlZ21lbnRcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9zZWdtZW50XCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJTZWdtZW50XCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL3N0ZXBcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9zdGVwXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJTdGVwXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL3RleHRib3hcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy90ZXh0Ym94XCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJUZXh0Ym94XCJcbiAgICAgICAgICAgICAgfV0pXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgICAgbWFpbjogW1wiQ29sbGVjdGlvbnNcIiwgVUkuTWVudS5yZW5kZXIoXG4gICAgICAgICAgICAgIHsgc3VibWVudTogdHJ1ZSwgfSwgW3tcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9icmVhZGNydW1iXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvYnJlYWRjcnVtYlwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQnJlYWRjcnVtYlwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9mb3JtXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvZm9ybVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiRm9ybVwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9ncmlkXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvZ3JpZFwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiR3JpZFwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9tZW51XCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvbWVudVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTWVudVwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9tZXNzYWdlXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvbWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTWVzc2FnZVwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy90YWJsZVwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2NvbGxlY3Rpb25zL3RhYmxlXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJUYWJsZVwiXG4gICAgICAgICAgICAgIH1dKV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIG1haW46IFtcIk1vZHVsZXNcIiwgVUkuTWVudS5yZW5kZXIoXG4gICAgICAgICAgICAgIHsgc3VibWVudTogdHJ1ZSwgfSwgW3tcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9tb2R1bGVzL2NoZWNrYm94XCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvbW9kdWxlcy9jaGVja2JveFwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQ2hlY2tib3hcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbGluazogdHJ1ZSwgaHJlZjogcHJlZml4ICsgXCIvbW9kdWxlcy9kaW1tZXJcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL2RpbW1lclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiRGltbWVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL21vZHVsZXMvZHJvcGRvd25cIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL2Ryb3Bkb3duXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJEcm9wZG93blwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9tb2R1bGVzL21vZGFsXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvbW9kdWxlcy9tb2RhbFwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTW9kYWxcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbGluazogdHJ1ZSwgaHJlZjogcHJlZml4ICsgXCIvbW9kdWxlcy9wb3B1cFwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL21vZHVsZXMvcG9wdXBcIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIlBvcHVwXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL21vZHVsZXMvcHJvZ3Jlc3NcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL3Byb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJQcm9ncmVzc1wiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9tb2R1bGVzL3RyYW5zaXRpb25cIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL3RyYW5zaXRpb25cIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIlRyYW5zaXRpb25cIlxuICAgICAgICAgICAgICB9XSldXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgICBtYWluOiBbXCJWaWV3c1wiLCBVSS5NZW51LnJlbmRlcihcbiAgICAgICAgICAgICAgeyBzdWJtZW51OiB0cnVlLCB9LCBbe1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL3ZpZXdzL3N0YXRpc3RpY1wiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL3ZpZXdzL3N0YXRpc3RpY1wiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiU3RhdGlzdGljXCJcbiAgICAgICAgICAgICAgfV0pXVxuICAgICAgICAgIH1dKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIHJvdXRlcjogeHMubmV2ZXIoKVxuICAgIH07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2xheW91dC9zaWRlYmFyL2luZGV4LnRzIiwiaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeHMsIHtTdHJlYW0sIE1lbW9yeVN0cmVhbX0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7RE9NU291cmNlfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHN3aXRjaFBhdGggZnJvbSBcInN3aXRjaC1wYXRoXCI7XG5cbmludGVyZmFjZSBDb21wb25lbnRSb3V0ZXJTb3VyY2VzIHtcbiAgcm91dGVzOiBhbnk7XG4gIHJvdXRlcjogTWVtb3J5U3RyZWFtPExvY2F0aW9uPjtcbiAgRE9NOiBET01Tb3VyY2U7XG59XG5cbmNvbnN0IGNhbGxQYWdlID0gZnVuY3Rpb24gKHNvdXJjZXM6IENvbXBvbmVudFJvdXRlclNvdXJjZXMpIHtcbiAgcmV0dXJuICh7dmFsdWV9KSA9PiB7XG4gICAgY29uc3QgaXNvbGF0ZWRQYWdlID0gaXNvbGF0ZSh2YWx1ZSkoc291cmNlcykgYXMgYW55O1xuICAgIHJldHVybiBpc29sYXRlZFBhZ2U7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBwcm9wT3JOZXZlcihrZXk6IHN0cmluZywgeDogT2JqZWN0KSB7XG4gIGlmICh4Lmhhc093blByb3BlcnR5KGtleSkpe1xuICAgIHJldHVybiB4W2tleV07XG4gIH1cbiAgcmV0dXJuIHhzLm5ldmVyKCk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5CeUtleShrZXk6IHN0cmluZywgc3RyZWFtOiBTdHJlYW08YW55Pikge1xuICAgIHJldHVybiBzdHJlYW0ubWFwKHggPT4gcHJvcE9yTmV2ZXIoa2V5LCB4KSkuZmxhdHRlbigpO1xufVxuXG5mdW5jdGlvbiBDb21wb25lbnRSb3V0ZXIgKHNvdXJjZXM6IENvbXBvbmVudFJvdXRlclNvdXJjZXMpIHtcbiAgXG4gIGNvbnN0IGNvbXBvbmVudCQgPSBcbiAgc291cmNlcy5yb3V0ZXIubWFwKGwgPT4gc3dpdGNoUGF0aChsLnBhdGhuYW1lLCBzb3VyY2VzLnJvdXRlcykpXG4gICAgLm1hcChyb3V0ZSA9PiBjYWxsUGFnZShzb3VyY2VzKShyb3V0ZSkpXG4gICAgLnJlbWVtYmVyKCk7XG4gIGNvbnN0IHBsdWNrID0ga2V5ID0+IGZsYXR0ZW5CeUtleShrZXksIGNvbXBvbmVudCQpO1xuICBjb25zdCBzaW5rcyA9IHtcbiAgICBwbHVjazogcGx1Y2ssXG4gICAgRE9NOiBwbHVjayhcIkRPTVwiKSxcbiAgICByb3V0ZXI6IHBsdWNrKFwicm91dGVyXCIpLFxuICB9O1xuICByZXR1cm4gc2lua3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNvdXJjZXMgPT4gaXNvbGF0ZShDb21wb25lbnRSb3V0ZXIpKHNvdXJjZXMpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvcm91dGVyLnRzIiwiLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC12YXJpYWJsZVxuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IEluZGV4IH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7IEJyZWFkY3J1bWIsIEZvcm0sIEdyaWQsIE1lbnUsIE1lc3NhZ2V9IGZyb20gXCIuL2NvbGxlY3Rpb25zXCI7XG5cblxubGV0IHByZWZpeCA9IFwiL2N5Y2xlLXNlbWFudGljLXVpXCI7XG5sZXQgcm91dGVzID0ge1xuICBcIi9cIjogSW5kZXgucnVuLFxufTtcbnJvdXRlc1twcmVmaXggKyBcIi9cIl0gPSBJbmRleC5ydW47XG5yb3V0ZXNbcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvYnJlYWRjcnVtYlwiXSA9IEJyZWFkY3J1bWIucnVuO1xucm91dGVzW3ByZWZpeCArIFwiL2NvbGxlY3Rpb25zL2Zvcm1cIl0gPSBGb3JtLnJ1bjtcbnJvdXRlc1twcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9ncmlkXCJdID0gR3JpZC5ydW47XG5yb3V0ZXNbcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvbWVudVwiXSA9IE1lbnUucnVuO1xucm91dGVzW3ByZWZpeCArIFwiL2NvbGxlY3Rpb25zL21lc3NhZ2VcIl0gPSBNZXNzYWdlLnJ1bjtcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL3JvdXRlcy50cyIsImltcG9ydCB7IGRpdiwgYSwgc3BhbiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIERPTUNvbnRlbnQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IFNpemUgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEJyZWFkY3J1bWIge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBkaXZpZGVyOiBWTm9kZSB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCB0eXBlIENvbnRlbnQgPSBBcnJheTxQYXJ0aWFsPEJyZWFkQ3J1bWJJdGVtPj47XG4gIGV4cG9ydCBpbnRlcmZhY2UgQnJlYWRDcnVtYkl0ZW0ge1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICB0ZXh0OiBET01Db250ZW50O1xuICAgIGhyZWY6IHN0cmluZztcbiAgfVxuICBleHBvcnQgdHlwZSBCcmVhZGNydW1iQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIEJyZWFkY3J1bWJTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG4gIFxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPiB8IENvbnRlbnQgfCBCcmVhZGNydW1iQXJncywgYXJnMj86IENvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChicmVhZGNydW1iLCBtYWtlSXNBcmdzKGlzQ29udGVudCksaXNDb250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IEJyZWFkY3J1bWJTb3VyY2VzLCBzY29wZT86IHN0cmluZykgOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBicmVhZGNydW1iLCBcIi5icmVhZGNydW1iXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJyZWFkY3J1bWIoYXJnczogQnJlYWRjcnVtYkFyZ3MpIDogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge2RpdmlkZXI6IFwiL1wifTtcbiAgICBsZXQgY29udGVudCA9IFtdO1xuICAgIGlmKGFyZ3MuY29udGVudCkge1xuICAgICAgaWYgKGlzQ29udGVudChhcmdzLmNvbnRlbnQpKSB7XG4gICAgICAgIGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQ7XG4gICAgICB9IGVsc2UgaWYgKGlzQ29udGVudChhcmdzLmNvbnRlbnQubWFpbikpIHtcbiAgICAgICAgY29udGVudCA9IGFyZ3MuY29udGVudC5tYWluO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXByb3BzLmRpdmlkZXIpIHtcbiAgICAgIHByb3BzLmRpdmlkZXIgPSBcIi9cIjtcbiAgICB9XG4gICAgbGV0IGNoaWxkcmVuID0gY29udGVudC5tYXAoYyA9PiBbXG4gICAgICBzZWN0aW9uKGMpLCBkaXZpZGVyKHByb3BzKVxuICAgIF0pLnJlZHVjZSgoYSwgbikgPT4gYS5jb25jYXQobiksIFtdKTtcbiAgICBjaGlsZHJlbi5zcGxpY2UoLTEsIDEpO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzTmFtZShwcm9wcykgfSB9LCBjaGlsZHJlbik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZSArIFwiIGJyZWFkY3J1bWJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlY3Rpb24oc2VjdGlvbjogUGFydGlhbDxCcmVhZENydW1iSXRlbT4pOiBWTm9kZSB7XG4gICAgcmV0dXJuIHNlY3Rpb24uYWN0aXZlXG4gICAgICA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJhY3RpdmUgc2VjdGlvblwiIH0gfSwgc2VjdGlvbi50ZXh0KVxuICAgICAgOiBzZWN0aW9uLmhyZWYgXG4gICAgICAgID8gYSh7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJzZWN0aW9uXCIsIGhyZWY6IHNlY3Rpb24uaHJlZiB9IH0sIHNlY3Rpb24udGV4dClcbiAgICAgICAgOiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwic2VjdGlvblwiIH0gfSwgc2VjdGlvbi50ZXh0KTtcbiAgfVxuICBmdW5jdGlvbiBkaXZpZGVyKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IFZOb2RlIHtcbiAgICBpZiAodHlwZW9mIChwcm9wcy5kaXZpZGVyKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHNwYW4oeyBwcm9wczogeyBjbGFzc05hbWU6IFwiZGl2aWRlclwiIH0gfSwgcHJvcHMuZGl2aWRlcik7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXZpZGVyLmRhdGEucHJvcHMuY2xhc3NOYW1lLmluZGV4T2YoXCJ1aVwiKSAhPT0gLTEpIHtcbiAgICAgIHByb3BzLmRpdmlkZXIuZGF0YS5wcm9wcy5jbGFzc05hbWUgPSBwcm9wcy5kaXZpZGVyLmRhdGEucHJvcHMuY2xhc3NOYW1lLnN1YnN0cmluZygzKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpdmlkZXIuZGF0YS5wcm9wcy5jbGFzc05hbWUuaW5kZXhPZihcImRpdmlkZXJcIikgPT09IC0xKSB7XG4gICAgICBwcm9wcy5kaXZpZGVyLmRhdGEucHJvcHMuY2xhc3NOYW1lICs9IFwiIGRpdmlkZXJcIjtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzLmRpdmlkZXI7XG4gIH1cblxuICBmdW5jdGlvbiBpc0NvbnRlbnQob2JqKTogb2JqIGlzIENvbnRlbnQge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2JyZWFkY3J1bWIvaW5kZXgudHMiLCJpbXBvcnQgeyBkaXYsIGxhYmVsLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgRE9NQ29udGVudCwgaXNET01Db250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBudW1Ub1RleHQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50IH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEZpZWxkIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBpbmxpbmU6IGJvb2xlYW47XG4gICAgY2VudGVyZWQ6IGJvb2xlYW47XG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgZXJyb3I6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBGaWVsZENvbnRlbnRPYmoge1xuICAgIG1haW46IERPTUNvbnRlbnQ7XG4gICAgbGFiZWw6IERPTUNvbnRlbnQ7XG4gIH1cblxuICBleHBvcnQgdHlwZSBGaWVsZEFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBET01Db250ZW50LCBGaWVsZENvbnRlbnRPYmo+O1xuICBleHBvcnQgdHlwZSBGaWVsZFNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBGaWVsZENvbnRlbnRPYmo+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFBhcnRpYWw8UHJvcHM+IHwgRE9NQ29udGVudCB8IEZpZWxkQXJncywgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChmaWVsZCwgaXNBcmdzLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBGaWVsZFNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgZmllbGQsIFwiLmZpZWxkXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpZWxkKGFyZ3M6IEZpZWxkQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSB0eXBlb2YgKGFyZ3MucHJvcHMpID09PSBcInVuZGVmaW5lZFwiID8ge30gOiBhcmdzLnByb3BzO1xuICAgIGxldCBsYmwgPSBcIlwiIGFzIERPTUNvbnRlbnQ7XG4gICAgbGV0IGNvbnRlbnQgPSBbXSBhcyBET01Db250ZW50O1xuICAgIGlmICh0eXBlb2YgKGFyZ3MuY29udGVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSkge1xuICAgICAgICBjb250ZW50ID0gYXJncy5jb250ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGJsID0gYXJncy5jb250ZW50LmxhYmVsID8gYXJncy5jb250ZW50LmxhYmVsIDogXCJcIjtcbiAgICAgICAgY29udGVudCA9IGFyZ3MuY29udGVudC5tYWluID8gYXJncy5jb250ZW50Lm1haW4gOiBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIFtdLmNvbmNhdChsYmwgPyBsYWJlbChsYmwpIDogW10sIGNvbnRlbnQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy53aWR0aCkge1xuICAgICAgY2xhc3NOYW1lICs9IG51bVRvVGV4dChwcm9wcy53aWR0aCkgKyBcIiB3aWRlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbmxpbmUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbmxpbmVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNlbnRlcmVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2VudGVyZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVycm9yKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZXJyb3JcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJlcXVpcmVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmVxdWlyZWRcIjtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIGZpZWxkXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJncyhvYmopOiBvYmogaXMgRmllbGRBcmdzIHtcbiAgICByZXR1cm4gb2JqICYmIChcbiAgICAgIHR5cGVvZiAob2JqLnByb3BzKSAhPT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICAgKHR5cGVvZiAob2JqLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIFxuICAgICAgICAoaXNET01Db250ZW50KG9iai5jb250ZW50KSB8fCBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQubWFpbikgfHwgaXNET01Db250ZW50KG9iai5jb250ZW50LmxhYmVsKSlcbiAgICAgIClcbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvZm9ybS9maWVsZC50cyIsImltcG9ydCB7IGRpdiwgbGFiZWwsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBET01Db250ZW50LCBpc0RPTUNvbnRlbnQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IG51bVRvVGV4dCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmllbGRzIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgZXF1YWxXaWR0aDogYm9vbGVhbjtcbiAgICBncm91cGVkOiBib29sZWFuO1xuICAgIGlubGluZTogYm9vbGVhbjtcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIEZpZWxkc0NvbnRlbnRPYmoge1xuICAgIG1haW46IERPTUNvbnRlbnQ7XG4gICAgbGFiZWw6IERPTUNvbnRlbnQ7XG4gIH1cbiAgZXhwb3J0IHR5cGUgRmllbGRzQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIEZpZWxkc0NvbnRlbnRPYmo+O1xuICBleHBvcnQgdHlwZSBGaWVsZHNTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgRmllbGRzQ29udGVudE9iaj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50IHwgRmllbGRzQXJncywgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChmaWVsZHMsIGlzQXJncywgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogRmllbGRzU291cmNlcywgc2NvcGU/OiBzdHJpbmcpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBmaWVsZHMsIFwiLmZpZWxkc1wiLCBzY29wZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmaWVsZHMoYXJnczogRmllbGRzQXJncykge1xuICAgIGxldCBwcm9wcyA9IHR5cGVvZiAoYXJncy5wcm9wcykgPT09IFwidW5kZWZpbmVkXCIgPyB7fSA6IGFyZ3MucHJvcHM7XG4gICAgbGV0IGxibCA9IFwiXCIgYXMgRE9NQ29udGVudDtcbiAgICBsZXQgY29udGVudCA9IFtdIGFzIERPTUNvbnRlbnQ7XG4gICAgaWYgKHR5cGVvZiAoYXJncy5jb250ZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpKSB7XG4gICAgICAgIGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYmwgPSBhcmdzLmNvbnRlbnQubGFiZWwgPyBhcmdzLmNvbnRlbnQubGFiZWwgOiBcIlwiO1xuICAgICAgICBjb250ZW50ID0gYXJncy5jb250ZW50Lm1haW4gPyBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMsIGNvbnRlbnQpIH0gfSwgW10uY29uY2F0KGxibCA/IGxhYmVsKGxibCkgOiBbXSwgY29udGVudCkpO1xuICB9XG5cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+LCBjb250ZW50KSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuZXF1YWxXaWR0aCAmJiBjb250ZW50Lmxlbmd0aCkge1xuICAgICAgY2xhc3NOYW1lICs9IG51bVRvVGV4dChjb250ZW50Lmxlbmd0aCk7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbmxpbmUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbmxpbmVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmdyb3VwZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBncm91cGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZXF1aXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJlcXVpcmVkXCI7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBmaWVsZHNcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG4gIGZ1bmN0aW9uIGlzQXJncyhvYmopOiBvYmogaXMgRmllbGRzQXJncyB7XG4gICAgcmV0dXJuIG9iaiAmJiAoXG4gICAgICB0eXBlb2YgKG9iai5wcm9wcykgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgICh0eXBlb2YgKG9iai5jb250ZW50KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcbiAgICAgICAgKGlzRE9NQ29udGVudChvYmouY29udGVudCkgfHwgaXNET01Db250ZW50KG9iai5jb250ZW50Lm1haW4pIHx8IGlzRE9NQ29udGVudChvYmouY29udGVudC5sYWJlbCkpXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZmllbGRzLnRzIiwiaW1wb3J0IHsgU2l6ZSB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgQ29udGVudE9iaiwgRE9NQ29udGVudCwgaXNET01Db250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJnc30gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEZvcm0ge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBlcXVhbFdpZHRoOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgfVxuICBleHBvcnQgdHlwZSBGb3JtQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBGb3JtU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQgfCBGb3JtQXJncywgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChmb3JtLCBtYWtlSXNBcmdzKGlzRE9NQ29udGVudCksIGlzRE9NQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IEZvcm1Tb3VyY2VzLCBzY29wZT86IHN0cmluZyk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGZvcm0sIFwiLmZvcm1cIiwgc2NvcGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybShhcmdzOiBGb3JtQXJncykge1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIGxldCBwcm9wcyA9IHR5cGVvZihhcmdzLnByb3BzKSAhPT0gXCJ1bmRlZmluZWRcIiA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgY29udGVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMubG9hZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxvYWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVxdWFsV2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBlcXVhbCB3aWR0aFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBmb3JtXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZm9ybS50cyIsImV4cG9ydCAqIGZyb20gXCIuL2Zvcm1cIlxuZXhwb3J0ICogZnJvbSBcIi4vZmllbGRcIlxuZXhwb3J0ICogZnJvbSBcIi4vZmllbGRzXCJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb2xsZWN0aW9ucy9mb3JtL2luZGV4LnRzIiwiXG5pbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb250ZW50T2JqLCBET01Db250ZW50LCBpc0RPTUNvbnRlbnQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgVmVydGljYWxBbGlnbm1lbnQsIFRleHRBbGlnbm1lbnQsIFNpemUsIEZsb2F0IH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBudW1Ub1RleHQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBDb2x1bW4ge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBzdHJldGNoZWQ6IHRydWU7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBtb2JpbGU6IG51bWJlcjtcbiAgICB0YWJsZXQ6IG51bWJlcjtcbiAgICBjb21wdXRlcjogbnVtYmVyO1xuICAgIGxhcmdlc2NyZWVuOiBudW1iZXI7XG4gICAgbW9iaWxlT25seTogYm9vbGVhbjtcbiAgICB0YWJsZXRPbmx5OiBib29sZWFuO1xuICAgIGNvbXB1dGVyT25seTogYm9vbGVhbjtcbiAgICBsYXJnZXNjcmVlbk9ubHk6IGJvb2xlYW47XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBhbGlnbm1lbnQ6IFZlcnRpY2FsQWxpZ25tZW50IHwgc3RyaW5nO1xuICAgIHRleHRBbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgQ29sdW1uQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBDb2x1bW5Tb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50IHwgQ29sdW1uQXJncywgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChjb2x1bW4sIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IENvbHVtblNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgY29sdW1uLCBcIi5jb2x1bW5cIiwgc2NvcGUpO1xuICB9XG5cblxuICBmdW5jdGlvbiBjb2x1bW4oYXJnczogQ29sdW1uQXJncykge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIGNvbnRlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMud2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMud2lkdGgpICsgXCIgd2lkZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubW9iaWxlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gbnVtVG9UZXh0KHByb3BzLm1vYmlsZSkgKyBcIiB3aWRlIG1vYmlsZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFibGV0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gbnVtVG9UZXh0KHByb3BzLnRhYmxldCkgKyBcIiB3aWRlIHRhYmxldFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29tcHV0ZXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMuY29tcHV0ZXIpICsgXCIgd2lkZSBjb21wdXRlclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFyZ2VzY3JlZW4pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMubGFyZ2VzY3JlZW4pICsgXCIgd2lkZSBsYXJnZSBzY3JlZW5cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLm1vYmlsZU9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBtb2JpbGUgb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFibGV0T25seSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhYmxldCBvbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wdXRlck9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb21wdXRlciBvbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sYXJnZXNjcmVlbk9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsYXJnZSBzY3JlZW4gb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc3RyZXRjaGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc3RyZXRjaGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFZlcnRpY2FsQWxpZ25tZW50LlRvQ2xhc3NuYW1lKHByb3BzLmFsaWdubWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnRleHRBbGlnbm1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gVGV4dEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy50ZXh0QWxpZ25tZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuZmxvYXQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gRmxvYXQuVG9DbGFzc25hbWUocHJvcHMuZmxvYXQpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgY29sdW1uXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2dyaWQvY29sdW1uLnRzIiwiaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgQ29udGVudE9iaiwgRE9NQ29udGVudCwgaXNET01Db250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25tZW50LCBUZXh0QWxpZ25tZW50IH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBudW1Ub1RleHQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBHcmlkIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBlcXVhbFdpZHRoOiBib29sZWFuO1xuICAgIGRpdmlkZWQ6IGJvb2xlYW47XG4gICAgdmVydGljYWxseURpdmlkZWQ6IGJvb2xlYW47XG4gICAgY29udGFpbmVyOiBib29sZWFuO1xuICAgIGNlbGxlZDogYm9vbGVhbjtcbiAgICBpbnRDZWxsZWQ6IGJvb2xlYW47XG4gICAgcGFkZGVkOiBib29sZWFuO1xuICAgIHZlcnRpY2FsbHlQYWRkZWQ6IGJvb2xlYW47XG4gICAgaG9yaXpvbnRhbGx5UGFkZGVkOiBib29sZWFuO1xuICAgIHJlbGF4ZWQ6IGJvb2xlYW47XG4gICAgdmVyeVJlbGF4ZWQ6IGJvb2xlYW47XG4gICAgY2VudGVyZWQ6IGJvb2xlYW47XG4gICAgc3RhY2thYmxlOiBib29sZWFuO1xuICAgIGRvdWJsaW5nOiBib29sZWFuO1xuICAgIHJldmVyc2VkTW9iaWxlOiBib29sZWFuO1xuICAgIHJldmVyc2VkVGFibGV0OiBib29sZWFuO1xuICAgIHJldmVyc2VkQ29tcHV0ZXI6IGJvb2xlYW47XG4gICAgcmV2ZXJzZWRMYXJnZXNjcmVlbjogYm9vbGVhbjtcbiAgICB2ZXJ0UmV2ZXJzZWRNb2JpbGU6IGJvb2xlYW47XG4gICAgdmVydFJldmVyc2VkVGFibGV0OiBib29sZWFuO1xuICAgIHZlcnRSZXZlcnNlZENvbXB1dGVyOiBib29sZWFuO1xuICAgIHZlcnRSZXZlcnNlZExhcmdlc2NyZWVuOiBib29sZWFuO1xuICAgIG1vYmlsZU9ubHk6IGJvb2xlYW47XG4gICAgdGFibGV0T25seTogYm9vbGVhbjtcbiAgICBjb21wdXRlck9ubHk6IGJvb2xlYW47XG4gICAgbGFyZ2VzY3JlZW5Pbmx5OiBib29sZWFuO1xuICAgIGFsaWdubWVudDogVmVydGljYWxBbGlnbm1lbnQgfCBzdHJpbmc7XG4gICAgdGV4dEFsaWdubWVudDogVGV4dEFsaWdubWVudCB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIEdyaWRBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIEdyaWRTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFBhcnRpYWw8UHJvcHM+IHwgRE9NQ29udGVudCB8IEdyaWRBcmdzLCBhcmcyPzogRE9NQ29udGVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KGdyaWQsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IEdyaWRTb3VyY2VzLCBzY29wZT86IHN0cmluZyk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGdyaWQsIFwiLmdyaWRcIiwgc2NvcGUpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGdyaWQoYXJnczogR3JpZEFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgbGV0IHByb3BzID0gdHlwZW9mIChhcmdzLnByb3BzKSAhPT0gXCJ1bmRlZmluZWRcIiA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMsIGNvbnRlbnQpIH0gfSwgY29udGVudCk7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4sIGNvbnRlbnQ6IERPTUNvbnRlbnQpOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLmVxdWFsV2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBlcXVhbCB3aWR0aFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGl2aWRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpdmlkZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnRpY2FsbHlEaXZpZGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmVydGljYWxseSBkaXZpZGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb250YWluZXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb250YWluZXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNlbGxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNlbGxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW50Q2VsbGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW50ZXJuYWxseSBjZWxsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnBhZGRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHBhZGRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVydGljYWxseVBhZGRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsbHkgcGFkZGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5ob3Jpem9udGFsbHlQYWRkZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBob3Jpem9udGFsbHkgcGFkZGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZWxheGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmVsYXhlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVyeVJlbGF4ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2ZXJ5IHJlbGF4ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNlbnRlcmVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2VudGVyZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnN0YWNrYWJsZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHN0YWNrYWJsZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZG91YmxpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkb3VibGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmV2ZXJzZWRNb2JpbGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBtb2JpbGUgcmV2ZXJzZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJldmVyc2VkVGFibGV0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdGFibGV0IHJldmVyc2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZXZlcnNlZENvbXB1dGVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcHV0ZXIgcmV2ZXJzZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJldmVyc2VkTGFyZ2VzY3JlZW4pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsYXJnZSBzY3JlZW4gcmV2ZXJzZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnRSZXZlcnNlZE1vYmlsZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIG1vYmlsZSB2ZXJ0aWNhbGx5IHJldmVyc2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0UmV2ZXJzZWRUYWJsZXQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0YWJsZXQgdmVydGljYWxseSByZXZlcnNlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVydFJldmVyc2VkQ29tcHV0ZXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb21wdXRlciB2ZXJ0aWNhbGx5IHJldmVyc2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0UmV2ZXJzZWRMYXJnZXNjcmVlbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxhcmdlIHNjcmVlbiB2ZXJ0aWNhbGx5IHJldmVyc2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5tb2JpbGVPbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbW9iaWxlIG9ubHlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRhYmxldE9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0YWJsZXQgb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29tcHV0ZXJPbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcHV0ZXIgb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFyZ2VzY3JlZW5Pbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGFyZ2Ugc2NyZWVuIG9ubHlcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFZlcnRpY2FsQWxpZ25tZW50LlRvQ2xhc3NuYW1lKHByb3BzLmFsaWdubWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnRleHRBbGlnbm1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gVGV4dEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy50ZXh0QWxpZ25tZW50KTtcbiAgICB9XG4gICAgaWYgKHByb3BzLndpZHRoKSB7XG4gICAgICBjbGFzc05hbWUgKz0gbnVtVG9UZXh0KHByb3BzLndpZHRoKSArIFwiIGNvbHVtblwiO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgZ3JpZFwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb2xsZWN0aW9ucy9ncmlkL2dyaWQudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9ncmlkXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yb3dcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbHVtblwiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2dyaWQvaW5kZXgudHMiLCJpbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb250ZW50T2JqLCBET01Db250ZW50LCBpc0RPTUNvbnRlbnQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgVGV4dEFsaWdubWVudCwgVmVydGljYWxBbGlnbm1lbnR9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgbnVtVG9UZXh0IH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgUm93IHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBkb3VibGluZzogYm9vbGVhbjtcbiAgICBjZW50ZXJlZDogYm9vbGVhbjtcbiAgICBzdHJldGNoZWQ6IGJvb2xlYW47XG4gICAgbW9iaWxlT25seTogYm9vbGVhbjtcbiAgICB0YWJsZXRPbmx5OiBib29sZWFuO1xuICAgIGNvbXB1dGVyT25seTogYm9vbGVhbjtcbiAgICBsYXJnZXNjcmVlbk9ubHk6IGJvb2xlYW47XG4gICAgZXF1YWxXaWR0aDogYm9vbGVhbjtcbiAgICBhbGlnbm1lbnQ6IFZlcnRpY2FsQWxpZ25tZW50IHwgc3RyaW5nO1xuICAgIHRleHRBbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBSb3dBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIFJvd1NvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPnxET01Db250ZW50fFJvd0FyZ3MsIGFyZzI/OiBET01Db250ZW50KSA6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KHJvdywgbWFrZUlzQXJncyhpc0RPTUNvbnRlbnQpLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogUm93U291cmNlcywgc2NvcGU/OiBzdHJpbmcpIDogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgcm93LCBcIi5yb3dcIiwgc2NvcGUpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJvdyhhcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluOiBbXTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMsIGNvbnRlbnQpIH0gfSwgY29udGVudCk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPiwgY29udGVudDogRE9NQ29udGVudCk6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuZG91YmxpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkb3VibGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2VudGVyZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjZW50ZXJlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc3RyZXRjaGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc3RyZXRjaGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5tb2JpbGVPbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbW9iaWxlIG9ubHlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRhYmxldE9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0YWJsZXQgb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29tcHV0ZXJPbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcHV0ZXIgb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFyZ2VzY3JlZW5Pbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGFyZ2Ugc2NyZWVuIG9ubHlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVxdWFsV2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBlcXVhbCB3aWR0aFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMud2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMud2lkdGgpICsgXCIgY29sdW1uXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YocHJvcHMudGV4dEFsaWdubWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBUZXh0QWxpZ25tZW50LlRvQ2xhc3NuYW1lKHByb3BzLnRleHRBbGlnbm1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mKHByb3BzLmFsaWdubWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBWZXJ0aWNhbEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hbGlnbm1lbnQpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgcm93XCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2dyaWQvcm93LnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vYnJlYWRjcnVtYlwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZm9ybVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ3JpZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWVudVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWVzc2FnZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGFibGVcIjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvaW5kZXgudHMiLCJpbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IHsgZGl2LCBwLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSBcIi4uLy4uL2VsZW1lbnRzL2ljb25cIjtcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy90cmFuc2l0aW9uXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTaXplLCBDb2xvciwgQXR0YWNobWVudCwgQW5pbWF0aW9uLCBEaXJlY3Rpb24sIEljb25UeXBlIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTWVzc2FnZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGljb246IGJvb2xlYW47XG4gICAgZmxvYXRpbmc6IGJvb2xlYW47XG4gICAgY29tcGFjdDogYm9vbGVhbjtcbiAgICBoaWRkZW46IGJvb2xlYW47XG4gICAgZm9yY2VWaXNpYmxlOiBib29sZWFuO1xuICAgIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmc7XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50IHtcbiAgICBpY29uOiBET01Db250ZW50O1xuICAgIGhlYWRlcjogRE9NQ29udGVudDtcbiAgICBtYWluOiBET01Db250ZW50O1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgTWVzc2FnZUFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50PjtcblxuICBleHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VTb3VyY2VzIGV4dGVuZHMgQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudD4ge1xuICAgIGFyZ3M/OiB7XG4gICAgICBjbG9zZWFibGU/OiB0cnVlLFxuICAgICAgb24kPzogU3RyZWFtPGJvb2xlYW4+XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFBhcnRpYWw8UHJvcHM+IHwgRE9NQ29udGVudCB8IE1lc3NhZ2VBcmdzLCBhcmcyPzogRE9NQ29udGVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KG1lc3NhZ2UsIGlzQXJncywgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogTWVzc2FnZVNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIGZ1bmN0aW9uIG1haW4oc291cmNlczogTWVzc2FnZVNvdXJjZXMpIHtcbiAgICAgIGxldCBwcm9wcyQgPSBzb3VyY2VzLnByb3BzJCA/IHNvdXJjZXMucHJvcHMkIDogeHMub2Yoe30pO1xuICAgICAgbGV0IGNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQubWFwKGMgPT4gaXNET01Db250ZW50KGMpID8geyBtYWluOiBjIH0gOiBjKSA6IHhzLm9mKHsgbWFpbjogW10gfSk7XG4gICAgICBsZXQgb24kID0gc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy5vbiQgPyBzb3VyY2VzLmFyZ3Mub24kIDogeHMub2YodHJ1ZSk7XG5cbiAgICAgIGxldCB2VHJlZSQsIGFjdGl2ZSQ7XG4gICAgICBpZiAoc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy5jbG9zZWFibGUpIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IEljb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgY29udGVudCQ6IHhzLm9mKEljb25UeXBlLkNsb3NlKSB9KTtcbiAgICAgICAgY29uc3QgY2xvc2UkID0gaWNvbi5ldmVudHMoXCJjbGlja1wiKS5tYXBUbyhmYWxzZSk7XG4gICAgICAgIHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBjb250ZW50JCwgaWNvbi5ET00pXG4gICAgICAgICAgLm1hcCgoW3Byb3BzLCBjb250ZW50LCBjbG9zZUljb25dKSA9PiBtZXNzYWdlKHsgcHJvcHMsIGNvbnRlbnQgfSwgY2xvc2VJY29uKSk7XG4gICAgICAgIGFjdGl2ZSQgPSB4cy5tZXJnZShvbiQsIGNsb3NlJCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2VHJlZSQgPSB4cy5jb21iaW5lKHByb3BzJCwgY29udGVudCQpLm1hcCgoW3Byb3BzLCBjb250ZW50XSkgPT4gbWVzc2FnZSh7IHByb3BzLCBjb250ZW50IH0pKTtcbiAgICAgICAgYWN0aXZlJCA9IG9uJDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyYW5zaXRpb24kID0gYWN0aXZlJC5mb2xkKChwcmV2QW5pbSwgYWN0aXZlKSA9PiBwcmV2QW5pbS5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5Ob25lXG4gICAgICAgID8geyBhbmltYXRpb246IEFuaW1hdGlvbi5Ob25lLCBkaXJlY3Rpb246IGFjdGl2ZSA/IERpcmVjdGlvbi5JbiA6IERpcmVjdGlvbi5PdXQgfVxuICAgICAgICA6IHsgYW5pbWF0aW9uOiBBbmltYXRpb24uRmFkZSwgZGlyZWN0aW9uOiBhY3RpdmUgPyBEaXJlY3Rpb24uSW4gOiBEaXJlY3Rpb24uT3V0IH1cbiAgICAgICAgLCB7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogRGlyZWN0aW9uLk5vbmUgfSk7XG4gICAgICBjb25zdCBhbmltYXRlZFZUcmVlJCA9IFRyYW5zaXRpb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgdGFyZ2V0JDogdlRyZWUkLCB0cmFuc2l0aW9uJCB9KS5ET007XG4gICAgICByZXR1cm4ge1xuICAgICAgICBET006IGFuaW1hdGVkVlRyZWUkLFxuICAgICAgICBldmVudHM6ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIubWVzc2FnZVwiKS5ldmVudHModHlwZSlcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGlzb2xhdGVkTWFpbiA9IGlzb2xhdGUobWFpbiwgc2NvcGUpO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXNzYWdlKGFyZ3M6IE1lc3NhZ2VBcmdzLCBjbG9zZUljb24/OiBWTm9kZSkge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IHsgbWFpbjogYXJncy5jb250ZW50IH0gOiBhcmdzLmNvbnRlbnQgOiB7IG1haW46IFtdIH07XG4gICAgaWYgKGNvbnRlbnQuaWNvbikge1xuICAgICAgcHJvcHMuaWNvbiA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKGNvbnRlbnQubWFpbikgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnRlbnQubWFpbiA9IFtwKGNvbnRlbnQubWFpbildO1xuICAgIH1cbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgW10uY29uY2F0KFxuICAgICAgY29udGVudC5pY29uID8gY29udGVudC5pY29uIDogW10sIGNsb3NlSWNvbiA/IGNsb3NlSWNvbiA6IFtdLFxuICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImNvbnRlbnRcIiB9IH0sIFtdLmNvbmNhdChcbiAgICAgICAgY29udGVudC5oZWFkZXIgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiaGVhZGVyXCIgfSB9LCBjb250ZW50LmhlYWRlcikgOiBbXSxcbiAgICAgICAgY29udGVudC5tYWluXG4gICAgICApKVxuICAgICkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuaWNvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGljb25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZsb2F0aW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZmxvYXRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNvbXBhY3QpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb21wYWN0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5mb3JjZVZpc2libGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2aXNpYmxlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5oaWRkZW4pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBoaWRkZW5cIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYXR0YWNobWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBBdHRhY2htZW50LlRvQ2xhc3NuYW1lKHByb3BzLmF0dGFjaG1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIG1lc3NhZ2VcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBcmdzKG9iaik6IG9iaiBpcyBNZXNzYWdlQXJncyB7XG4gICAgcmV0dXJuIHR5cGVvZiAob2JqKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIChvYmoucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiIHx8IGlzQ29udGVudChvYmouY29udGVudCkgfHwgaXNET01Db250ZW50KG9iai5jb250ZW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0NvbnRlbnQoY29udGVudCk6IGNvbnRlbnQgaXMgQ29udGVudCB7XG4gICAgcmV0dXJuIGNvbnRlbnQgIT09IHVuZGVmaW5lZCAmJiAoaXNET01Db250ZW50KGNvbnRlbnQuaWNvbikgfHwgaXNET01Db250ZW50KGNvbnRlbnQuaGVhZGVyKSB8fCBpc0RPTUNvbnRlbnQoY29udGVudC5tYWluKSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGUsIHRhYmxlLCB0ciwgdGgsIHRkLCB0aGVhZCwgdGJvZHksIHRmb290IH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgU3R5bGVBbmRDb250ZW50QXJncywgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IFNpemUsIENvbG9yIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBUYWJsZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIHNpbmdsZUxpbmU6IGJvb2xlYW47XG4gICAgZml4ZWQ6IGJvb2xlYW47XG4gICAgc2VsZWN0YWJsZTogYm9vbGVhbjtcbiAgICBzdHJpcGVkOiBib29sZWFuO1xuICAgIGNlbGxlZDogYm9vbGVhbjtcbiAgICBiYXNpYzogYm9vbGVhbjtcbiAgICB2ZXJ5QmFzaWM6IGJvb2xlYW47XG4gICAgY29sbGFwc2luZzogYm9vbGVhbjtcbiAgICBwYWRkZWQ6IGJvb2xlYW47XG4gICAgdmVyeVBhZGRlZDogYm9vbGVhbjtcbiAgICBjb21wYWN0OiBib29sZWFuO1xuICAgIHZlcnlDb21wYWN0OiBib29sZWFuO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudCB7XG4gICAgaGVhZGVyOiBBcnJheTxET01Db250ZW50PjtcbiAgICBtYWluOiBBcnJheTxBcnJheTxET01Db250ZW50Pj47XG4gICAgZm9vdGVyOiBBcnJheTxET01Db250ZW50PiB8IERPTUNvbnRlbnQ7XG4gIH1cblxuICBleHBvcnQgdHlwZSBUYWJsZUFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBBcnJheTxBcnJheTxET01Db250ZW50Pj4sIENvbnRlbnQ+O1xuICBleHBvcnQgdHlwZSBUYWJsZVNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBBcnJheTxBcnJheTxET01Db250ZW50Pj4sIENvbnRlbnQ+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFBhcnRpYWw8UHJvcHM+IHwgQXJyYXk8QXJyYXk8RE9NQ29udGVudD4+IHwgVGFibGVBcmdzLCBhcmcyPzogQXJyYXk8QXJyYXk8RE9NQ29udGVudD4+KTogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQodGFibGVSLCBpc0FyZ3MsIGlzTWFpbiwgYXJnMSwgYXJnMik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IFRhYmxlU291cmNlcywgc2NvcGU/OiBzdHJpbmcpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCB0YWJsZVIsIFwiLnRhYmxlXCIsIHNjb3BlKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gdGFibGVSKGFyZ3M6IFRhYmxlQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNDb250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiB7IG1haW46IGFyZ3MuY29udGVudCB9IDogeyBtYWluOiBbXSB9O1xuICAgIGxldCBoZWFkZXIgPSBjb250ZW50LmhlYWRlciA/IHRoZWFkKFt0cihjb250ZW50LmhlYWRlci5tYXAoaCA9PiB0aChoKSkpXSkgOiBbXTtcbiAgICBsZXQgZm9vdGVyO1xuICAgIGlmIChpc0RPTUNvbnRlbnQoY29udGVudC5mb290ZXIpKSB7XG4gICAgICBmb290ZXIgPSB0Zm9vdChjb250ZW50LmZvb3Rlcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZm9vdGVyID0gY29udGVudC5mb290ZXIgPyB0Zm9vdChbdHIoY29udGVudC5mb290ZXIubWFwKGYgPT4gdGgoZikpKV0pIDogW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYmxlKHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgW10uY29uY2F0KFxuICAgICAgaGVhZGVyLFxuICAgICAgdGJvZHkoY29udGVudC5tYWluLm1hcChyID0+IHRyKHIubWFwKGMgPT4gdGQoYykpKSkpLFxuICAgICAgZm9vdGVyXG4gICAgKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuc2luZ2xlTGluZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNpbmdsZSBsaW5lXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5maXhlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGZpeGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zZWxlY3RhYmxlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc2VsZWN0YWJsZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc3RyaXBlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHN0cmlwZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNlbGxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNlbGxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYmFzaWMpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBiYXNpY1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVyeUJhc2ljKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmVyeSBiYXNpY1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29sbGFwc2luZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNvbGxhcHNpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnBhZGRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHBhZGRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVyeVBhZGRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnkgcGFkZGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wYWN0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGFjdFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVyeUNvbXBhY3QpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2ZXJ5IGNvbXBhY3RcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBDb2xvci5Ub0NsYXNzbmFtZShwcm9wcy5jb2xvcik7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiB0YWJsZVwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FyZ3Mob2JqKTogb2JqIGlzIFRhYmxlQXJncyB7XG4gICAgcmV0dXJuIHR5cGVvZiAob2JqKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoXG4gICAgICB0eXBlb2YgKG9iai5wcm9wcykgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgICh0eXBlb2YgKG9iai5jb250ZW50KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoaXNDb250ZW50KG9iai5jb250ZW50KSB8fCBpc01haW4ob2JqLmNvbnRlbnQpKSlcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDb250ZW50KGNvbnRlbnQpOiBjb250ZW50IGlzIFBhcnRpYWw8Q29udGVudD4ge1xuICAgIHJldHVybiBjb250ZW50ICE9PSB1bmRlZmluZWQgJiYgKFxuICAgICAgKDxDb250ZW50PmNvbnRlbnQpLm1haW4gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgKCg8Q29udGVudD5jb250ZW50KS5oZWFkZXIgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAoPENvbnRlbnQ+Y29udGVudCkuZm9vdGVyICE9PSB1bmRlZmluZWQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTWFpbihvYmopOiBvYmogaXMgQXJyYXk8QXJyYXk8RE9NQ29udGVudD4+IHtcbiAgICByZXR1cm4gdHlwZW9mIChvYmopICE9PSBcInVuZGVmaW5lZFwiICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5O1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvdGFibGUvaW5kZXgudHMiLCJpbXBvcnQgeyBkaXYsIGEsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgU3R5bGVBbmRDb250ZW50QXJncywgQ29tcG9uZW50U2lua3MsIENvbXBvbmVudFNvdXJjZXMgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbG9yLCBTaXplLCBBdHRhY2htZW50LCBGbG9hdCB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcnVuUHJvcHNBbmRDb250ZW50LCByZW5kZXJQcm9wc0FuZENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQnV0dG9uIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgYW5pbWF0ZWQ6IGJvb2xlYW47XG4gICAgdmVydGljYWxBbmltYXRlZDogYm9vbGVhbjtcbiAgICBsYWJlbGVkOiBib29sZWFuO1xuICAgIHJpZ2h0bGFiZWxlZDogYm9vbGVhbjtcbiAgICBpY29uOiBib29sZWFuO1xuICAgIGJhc2ljOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGNvbXBhY3Q6IGJvb2xlYW47XG4gICAgY2lyY3VsYXI6IGJvb2xlYW47XG4gICAgZmx1aWQ6IGJvb2xlYW47XG4gICAgaHJlZjogc3RyaW5nO1xuICAgIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmc7XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBmbG9hdDogRmxvYXQgfCBzdHJpbmc7XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50T2JqIHtcbiAgICBtYWluOiBET01Db250ZW50O1xuICAgIGhpZGRlbjogRE9NQ29udGVudDtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIEJ1dHRvbkFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPjtcbiAgZXhwb3J0IHR5cGUgQnV0dG9uU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IEJ1dHRvbkFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChidXR0b24sIGlzQXJncywgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IEJ1dHRvblNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgYnV0dG9uLCBcIi5idXR0b25cIiwgc2NvcGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnV0dG9uKGFyZ3M6IEJ1dHRvbkFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8geyBtYWluOiBhcmdzLmNvbnRlbnQgfSA6IGFyZ3MuY29udGVudCA6IHsgbWFpbjogW10gfTtcbiAgICBsZXQgY2hpbGRyZW4gPSBjb250ZW50LmhpZGRlblxuICAgICAgPyBbZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcInZpc2libGUgY29udGVudFwiIH0gfSwgY29udGVudC5tYWluKSxcbiAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJoaWRkZW4gY29udGVudFwiIH0gfSwgY29udGVudC5oaWRkZW4pXVxuICAgICAgOiBjb250ZW50Lm1haW47XG4gICAgcmV0dXJuIHByb3BzLmhyZWZcbiAgICAgID8gYSh7IHByb3BzOiB7IGhyZWY6IHByb3BzLmhyZWYsIGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIGNoaWxkcmVuKVxuICAgICAgOiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBjaGlsZHJlbik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5hbmltYXRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGFuaW1hdGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0aWNhbEFuaW1hdGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmVydGljYWwgYW5pbWF0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmxhYmVsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsYWJlbGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yaWdodGxhYmVsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByaWdodCBsYWJlbGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pY29uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaWNvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYmFzaWMpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBiYXNpY1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYWN0aXZlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sb2FkaW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbG9hZGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29tcGFjdCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNvbXBhY3RcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNpcmN1bGFyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2lyY3VsYXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZsdWlkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZmx1aWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYXR0YWNobWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBBdHRhY2htZW50LlRvQ2xhc3NuYW1lKHByb3BzLmF0dGFjaG1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmZsb2F0KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEZsb2F0LlRvQ2xhc3NuYW1lKHByb3BzLmZsb2F0KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgYnV0dG9uXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJncyhvYmopOiBvYmogaXMgQnV0dG9uQXJncyB7XG4gICAgcmV0dXJuIHR5cGVvZiAob2JqKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoXG4gICAgICB0eXBlb2YgKG9iai5wcm9wcykgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudCkgfHwgKHR5cGVvZiAob2JqLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIChcbiAgICAgICAgaXNET01Db250ZW50KG9iai5jb250ZW50Lm1haW4pIHx8IGlzRE9NQ29udGVudChvYmouY29udGVudC5oaWRkZW4pXG4gICAgICApKVxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9idXR0b24vaW5kZXgudHMiLCJpbXBvcnQge2RpdiwgVk5vZGV9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQge0RPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgQ29udGVudE9iaiwgU3R5bGVBbmRDb250ZW50QXJncywgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7cmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29udGFpbmVyIHtcbiAgZXhwb3J0IHR5cGUgQ29udGFpbmVyQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8T2JqZWN0LCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcbiAgZXhwb3J0IHR5cGUgQ29udGFpbmVyU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8T2JqZWN0LCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKSA6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGNvbnRhaW5lciwgXCIuY29udGFpbmVyXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IENvbnRhaW5lckFyZ3MgfCBET01Db250ZW50KSA6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KGNvbnRhaW5lciwgbWFrZUlzQXJncyhpc0RPTUNvbnRlbnQpLCBpc0RPTUNvbnRlbnQsIGFyZzEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udGFpbmVyKGFyZ3M6IENvbnRhaW5lckFyZ3MpIDogVk5vZGUge1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwidWkgY29udGFpbmVyXCJ9fSwgY29udGVudCk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9jb250YWluZXIvaW5kZXgudHMiLCJpbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgU3R5bGVBbmRDb250ZW50QXJncywgQ29udGVudE9iaiwgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIERpdmlkZXIge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBob3Jpem9udGFsOiBib29sZWFuO1xuICAgIHZlcnRpY2FsOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIGZpdHRlZDogYm9vbGVhbjtcbiAgICBoaWRkZW46IGJvb2xlYW47XG4gICAgc2VjdGlvbjogYm9vbGVhbjtcbiAgICBjbGVhcmluZzogYm9vbGVhbjtcbiAgICBoZWFkZXI6IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgdHlwZSBEaXZpZGVyQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBEaXZpZGVyU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogRGl2aWRlclNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgZGl2aWRlciwgXCIuZGl2aWRlclwiLCBzY29wZSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBEaXZpZGVyQXJncyB8IFBhcnRpYWw8UHJvcHM+IHwgRE9NQ29udGVudCwgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChkaXZpZGVyLCBtYWtlSXNBcmdzKGlzRE9NQ29udGVudCksIGlzRE9NQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cblxuICBmdW5jdGlvbiBkaXZpZGVyKGFyZ3M6IERpdmlkZXJBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NOYW1lKHByb3BzKSB9IH0sIGNvbnRlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMudmVydGljYWwpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2ZXJ0aWNhbFwiO1xuICAgIH0gZWxzZSBpZiAocHJvcHMuaG9yaXpvbnRhbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhvcml6b250YWxcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludmVydGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW52ZXJ0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZpdHRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGZpdHRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaGlkZGVuKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaGlkZGVuXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zZWN0aW9uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc2VjdGlvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2xlYXJpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjbGVhcmluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaGVhZGVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaGVhZGVyXCI7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBkaXZpZGVyXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VsZW1lbnRzL2RpdmlkZXIvaW5kZXgudHMiLCJpbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgU3R5bGVBbmRDb250ZW50QXJncywgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7U2l6ZSwgIEF0dGFjaG1lbnQsICBGbG9hdCwgVGV4dEFsaWdubWVudCwgQ29sb3J9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgSGVhZGVyIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgaWNvbjogYm9vbGVhbjtcbiAgICBkaXZpZGVyOiBib29sZWFuO1xuICAgIGRpdmlkaW5nOiBib29sZWFuO1xuICAgIGJsb2NrOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICAgIHRleHRBbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmc7XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50T2JqIHtcbiAgICBtYWluOiBET01Db250ZW50O1xuICAgIHN1YnRleHQ6IERPTUNvbnRlbnQ7XG4gICAgaWNvbjogRE9NQ29udGVudDtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIEhlYWRlckFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPjtcbiAgZXhwb3J0IHR5cGUgSGVhZGVyU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogSGVhZGVyU291cmNlcywgc2NvcGU/OiBzdHJpbmcpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBoZWFkZXIsIFwiLmhlYWRlclwiLCBzY29wZSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBIZWFkZXJBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50LCBhcmcyPzogRE9NQ29udGVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KGhlYWRlciwgaXNBcmdzLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGVhZGVyKGFyZ3M6IEhlYWRlckFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8geyBtYWluOiBhcmdzLmNvbnRlbnQgfSA6IGFyZ3MuY29udGVudCA6IHsgbWFpbjogW10gfTtcbiAgICBsZXQgY2hpbGRyZW4gPSBbXS5jb25jYXQoXG4gICAgICBjb250ZW50Lm1haW4gPyBjb250ZW50Lm1haW4gOiBbXSxcbiAgICAgIGNvbnRlbnQuc3VidGV4dCA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJzdWIgaGVhZGVyXCIgfSB9LCBjb250ZW50LnN1YnRleHQpIDogW11cbiAgICApO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBjb250ZW50Lmljb25cbiAgICAgID8gW10uY29uY2F0KGNvbnRlbnQuaWNvbiwgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImNvbnRlbnRcIiB9IH0sIGNoaWxkcmVuKSlcbiAgICAgIDogY2hpbGRyZW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuaWNvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGljb25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpdmlkaW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGl2aWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpdmlkZXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXZpZGVyXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5ibG9jaykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGJsb2NrXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYXR0YWNobWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBBdHRhY2htZW50LlRvQ2xhc3NuYW1lKHByb3BzLmF0dGFjaG1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5mbG9hdCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBGbG9hdC5Ub0NsYXNzbmFtZShwcm9wcy5mbG9hdCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnRleHRBbGlnbm1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gVGV4dEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy50ZXh0QWxpZ25tZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgaGVhZGVyXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJncyhvYmopOiBvYmogaXMgSGVhZGVyQXJncyB7XG4gICAgcmV0dXJuICh0eXBlb2YgKG9iaikgIT09IFwidW5kZWZpbmVkXCIpICYmIChcbiAgICAgIHR5cGVvZihvYmoucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQpIHx8IChcbiAgICAgICAgdHlwZW9mIChvYmouY29udGVudCkgIT09IFwidW5kZWZpbmVkXCIgJiYgKFxuICAgICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudC5tYWluKSB8fFxuICAgICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudC5pY29uKSB8fFxuICAgICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudC5zdWJ0ZXh0KVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VsZW1lbnRzL2hlYWRlci9pbmRleC50cyIsImltcG9ydCB7IFZOb2RlLCBhLCBpbWcgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgU3R5bGVBbmRDb250ZW50QXJncywgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MsIENvbnRlbnRPYmogfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IFNpemUsIFZlcnRpY2FsQWxpZ25tZW50LCBGbG9hdCB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcnVuUHJvcHNBbmRDb250ZW50LCByZW5kZXJQcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5leHBvcnQgbmFtZXNwYWNlIEltYWdlIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgaHJlZjogc3RyaW5nO1xuICAgIGhpZGRlbjogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBhdmF0YXI6IGJvb2xlYW47XG4gICAgYm9yZGVyZWQ6IGJvb2xlYW47XG4gICAgc3BhY2VkOiBib29sZWFuO1xuICAgIGNpcmN1bGFyOiBib29sZWFuO1xuICAgIHJvdW5kZWQ6IGJvb2xlYW47XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgYWxpZ25tZW50OiBWZXJ0aWNhbEFsaWdubWVudCB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIEltYWdlQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIHN0cmluZywgQ29udGVudE9iajxzdHJpbmc+PjtcbiAgZXhwb3J0IHR5cGUgSW1hZ2VTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgc3RyaW5nLCBDb250ZW50T2JqPHN0cmluZz4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogSW1hZ2VTb3VyY2VzLCBzY29wZT86IHN0cmluZyk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGltYWdlLCBcIi5pbWFnZVwiLCBzY29wZSk7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogSW1hZ2VBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBzdHJpbmcsIGFyZzI/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KGltYWdlLCBtYWtlSXNBcmdzKGlzVXJsKSwgaXNVcmwsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGltYWdlKGFyZ3M6IEltYWdlQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNVcmwoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogXCJcIjtcbiAgICBsZXQgaW1hZ2UgPSBpbWcoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcyksIHNyYzogY29udGVudCB9IH0pO1xuICAgIHJldHVybiBwcm9wcy5ocmVmID8gYSh7IHByb3BzOiB7IGhyZWY6IHByb3BzLmhyZWYgfSB9LCBpbWFnZSkgOiBpbWFnZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5ocmVmKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGlua1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaGlkZGVuKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaGlkZGVuXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5hdmF0YXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBhdmF0YXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmJvcmRlcmVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYm9yZGVyZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnNwYWNlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNwYWNlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2lyY3VsYXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjaXJjdWxhclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucm91bmRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJvdW5kZWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuZmxvYXQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gRmxvYXQuVG9DbGFzc25hbWUocHJvcHMuZmxvYXQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmFsaWdubWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBWZXJ0aWNhbEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hbGlnbm1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NOYW1lICsgXCIgaW1hZ2VcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVXJsKG9iaik6IG9iaiBpcyBzdHJpbmcge1xuICAgIHJldHVybiB0eXBlb2YgKG9iaikgPT09IFwic3RyaW5nXCI7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9pbWFnZS9pbmRleC50cyIsImV4cG9ydCAqIGZyb20gXCIuL2J1dHRvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29udGFpbmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kaXZpZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9oZWFkZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ljb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ltYWdlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9sYWJlbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGlzdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbG9hZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZWdtZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdGVwc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGV4dGJveFwiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VsZW1lbnRzL2luZGV4LnRzIiwiaW1wb3J0IHsgU2l6ZSwgQXR0YWNobWVudCwgQ29sb3J9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgVk5vZGUsIGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMYWJlbCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGNpcmN1bGFyOiBib29sZWFuO1xuICAgIGVtcHR5OiBib29sZWFuO1xuICAgIHBvaW50aW5nOiBib29sZWFuO1xuICAgIGxlZnRQb2ludGluZzogYm9vbGVhbjtcbiAgICByaWdodFBvaW50aW5nOiBib29sZWFuO1xuICAgIGJhc2ljOiBib29sZWFuO1xuICAgIGxlZnRDb3JuZXI6IGJvb2xlYW47XG4gICAgcmlnaHRDb3JuZXI6IGJvb2xlYW47XG4gICAgdGFnOiBib29sZWFuO1xuICAgIHJpYmJvbjogYm9vbGVhbjtcbiAgICByaWdodFJpYmJvbjogYm9vbGVhbjtcbiAgICBob3Jpem9udGFsOiBib29sZWFuO1xuICAgIGZsb2F0aW5nOiBib29sZWFuO1xuICAgIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmc7XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIENvbnRlbnRPYmoge1xuICAgIG1haW46IERPTUNvbnRlbnQ7XG4gICAgZGV0YWlsOiBET01Db250ZW50O1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgTGFiZWxBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iaj47XG4gIGV4cG9ydCB0eXBlIExhYmVsU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogTGFiZWxTb3VyY2VzLCBzY29wZT86IHN0cmluZyk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGxhYmVsLCBcIi5sYWJlbFwiLCBzY29wZSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBMYWJlbEFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChsYWJlbCwgaXNBcmdzLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGFiZWwoYXJnczogTGFiZWxBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IHsgbWFpbjogYXJncy5jb250ZW50IH0gOiBhcmdzLmNvbnRlbnQgOiB7IG1haW46IFtdIH07XG4gICAgbGV0IGNoaWxkcmVuID0gW10uY29uY2F0KGNvbnRlbnQubWFpbiA/IGNvbnRlbnQubWFpbiA6IFtdLCBjb250ZW50LmRldGFpbCA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJkZXRhaWxcIiB9IH0sIGNvbnRlbnQuZGV0YWlsKSA6IFtdKTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuY2lyY3VsYXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjaXJjdWxhclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZW1wdHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBlbXB0eVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucG9pbnRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBwb2ludGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGVmdFBvaW50aW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGVmdCBwb2ludGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmlnaHRQb2ludGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJpZ2h0IHBvaW50aW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5iYXNpYykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGJhc2ljXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sZWZ0Q29ybmVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGVmdCBjb3JuZXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJpZ2h0Q29ybmVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmlnaHQgY29ybmVyXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy50YWcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0YWdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJpYmJvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJpYmJvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmlnaHRSaWJib24pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByaWdodCByaWJib25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmhvcml6b250YWwpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBob3Jpem9udGFsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5mbG9hdGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGZsb2F0aW5nXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmF0dGFjaG1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQXR0YWNobWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hdHRhY2htZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBDb2xvci5Ub0NsYXNzbmFtZShwcm9wcy5jb2xvcik7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBsYWJlbFwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FyZ3Mob2JqKTogb2JqIGlzIExhYmVsQXJncyB7XG4gICAgcmV0dXJuIHR5cGVvZiAob2JqKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoXG4gICAgICB0eXBlb2YgKG9iai5wcm9wcykgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgIHR5cGVvZiAob2JqLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIChcbiAgICAgICAgaXNET01Db250ZW50KG9iai5jb250ZW50KSB8fCAoXG4gICAgICAgICAgaXNET01Db250ZW50KG9iai5jb250ZW50Lm1haW4pIHx8IGlzRE9NQ29udGVudChvYmouY29udGVudC5kZXRhaWwpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvbGFiZWwvaW5kZXgudHMiLCJpbXBvcnQgeyBWTm9kZSwgYSwgZGl2IH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IFNpemUsICBWZXJ0aWNhbEFsaWdubWVudCwgRmxvYXQgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMaXN0IHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgYnVsbGV0ZWQ6IGJvb2xlYW47XG4gICAgb3JkZXJlZDogYm9vbGVhbjtcbiAgICBob3Jpem9udGFsOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIHNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICBhbmltYXRlZDogYm9vbGVhbjtcbiAgICByZWxheGVkOiBib29sZWFuO1xuICAgIGRpdmlkZWQ6IGJvb2xlYW47XG4gICAgY2VsbGVkOiBib29sZWFuO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgYWxpZ25tZW50OiBWZXJ0aWNhbEFsaWdubWVudCB8IHN0cmluZztcbiAgICBmbG9hdDogRmxvYXQgfCBzdHJpbmc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBMaXN0SXRlbSB7XG4gICAgbGVmdDogRE9NQ29udGVudDtcbiAgICBtYWluOiBET01Db250ZW50O1xuICAgIGljb246IERPTUNvbnRlbnQ7XG4gICAgcmlnaHQ6IERPTUNvbnRlbnQ7XG4gICAgaGVhZGVyOiBET01Db250ZW50O1xuICAgIGRlc2NyaXB0aW9uOiBET01Db250ZW50O1xuICAgIGhyZWY6IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIENvbnRlbnQgPSBBcnJheTxQYXJ0aWFsPExpc3RJdGVtPj47XG4gIGV4cG9ydCB0eXBlIExpc3RBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIExpc3RTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG4gXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IExpc3RBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBDb250ZW50LCBhcmcyPzogQ29udGVudCkgOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChsaXN0LCBtYWtlSXNBcmdzKGlzQ29udGVudCksIGlzQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IExpc3RTb3VyY2VzLCBzY29wZT86IHN0cmluZyk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGxpc3QsIFwiLmxpc3RcIiwgc2NvcGUpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGxpc3QoYXJnczogTGlzdEFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW4gOiBbXTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSxcbiAgICAgIGNvbnRlbnQubWFwKCh7aGVhZGVyLCBpY29uLCBtYWluLCBkZXNjcmlwdGlvbiwgaHJlZiwgbGVmdCwgcmlnaHR9KSA9PiB7XG4gICAgICAgIGxldCBsID0gbGVmdCA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJsZWZ0IGZsb2F0ZWQgY29udGVudFwiIH0gfSwgbGVmdCkgOiBbXTtcbiAgICAgICAgbGV0IHIgPSByaWdodCA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJyaWdodCBmbG9hdGVkIGNvbnRlbnRcIiB9IH0sIHJpZ2h0KSA6IFtdO1xuICAgICAgICBsZXQgaCA9IGhlYWRlciA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9IH0sIGhlYWRlcikgOiBbXTtcbiAgICAgICAgbGV0IGQgPSBkZXNjcmlwdGlvbiA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJkZXNjcmlwdGlvblwiIH0gfSwgZGVzY3JpcHRpb24pIDogW107XG4gICAgICAgIGxldCBpID0gaWNvbiA/IGljb24gOiBbXTtcbiAgICAgICAgbGV0IGMgPSAoKGggYXMgYW55KS5sZW5ndGggPiAwIHx8IChkIGFzIGFueSkubGVuZ3RoID4gMCkgXG4gICAgICAgID8gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImNvbnRlbnRcIiB9IH0sIFtdLmNvbmNhdChoLCBkLCBtYWluKSlcbiAgICAgICAgOiBtYWluO1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSBbXS5jb25jYXQobCwgaSwgYywgcik7XG4gICAgICAgIHJldHVybiBocmVmXG4gICAgICAgICAgPyBhKHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcIml0ZW1cIiwgaHJlZjogaHJlZiB9IH0sIGNoaWxkcmVuKVxuICAgICAgICAgIDogZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcIml0ZW1cIiB9IH0sIGNoaWxkcmVuKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLmJ1bGxldGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYnVsbGV0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLm9yZGVyZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBvcmRlcmVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5ob3Jpem9udGFsKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaG9yaXpvbnRhbFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc2VsZWN0aW9uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc2VsZWN0aW9uXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5hbmltYXRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGFuaW1hdGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZWxheGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmVsYXhlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGl2aWRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpdmlkZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNlbGxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNlbGxlZFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmFsaWdubWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBWZXJ0aWNhbEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hbGlnbm1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5mbG9hdCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBGbG9hdC5Ub0NsYXNzbmFtZShwcm9wcy5mbG9hdCk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBsaXN0XCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ29udGVudChvYmopOiBvYmogaXMgQ29udGVudCB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5O1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvbGlzdC9pbmRleC50cyIsImltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeyBWTm9kZSwgZGl2IH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IERpbW1lciB9IGZyb20gXCIuLi8uLi9tb2R1bGVzL2RpbW1lclwiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgQ29udGVudE9iaiB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5cbmV4cG9ydCBuYW1lc3BhY2UgTG9hZGVyIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgdHlwZTogTG9hZGVyVHlwZSB8IHN0cmluZztcbiAgICBjZW50ZXJlZDogYm9vbGVhbjtcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgaW5kZXRlcm1pbmF0ZTogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICB0ZXh0OiBib29sZWFuO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBMb2FkZXJBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG5cbiAgZXhwb3J0IGludGVyZmFjZSBMb2FkZXJTb3VyY2VzIGV4dGVuZHMgQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj4ge1xuICAgIGFyZ3M/OiB7XG4gICAgICBlbGVtZW50JD86IFN0cmVhbTxWTm9kZT47XG4gICAgICBvbiQ/OiBTdHJlYW08Ym9vbGVhbj47XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IExvYWRlckFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChsb2FkZXIsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogTG9hZGVyU291cmNlcywgc2NvcGU/OiBzdHJpbmcpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBMb2FkZXJTb3VyY2VzKSB7XG4gICAgICBzb3VyY2VzLnByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7IHR5cGU6IExvYWRlclR5cGUuUGFnZSB9KTtcbiAgICAgIHNvdXJjZXMuY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JCA6IHhzLm9mKHVuZGVmaW5lZCk7XG5cbiAgICAgIGNvbnN0IG9uJCA9IHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3Mub24kID8gc291cmNlcy5hcmdzLm9uJCA6IHhzLm9mKHRydWUpO1xuICAgICAgY29uc3QgcHJvcHMkID0gc291cmNlcy5wcm9wcyQucmVtZW1iZXIoKTtcbiAgICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBzb3VyY2VzLmNvbnRlbnQkKVxuICAgICAgICAubWFwKChbcHJvcHMsIGNvbnRlbnRdKSA9PiBsb2FkZXIoeyBwcm9wcywgY29udGVudCB9KVxuICAgICAgICApO1xuICAgICAgY29uc3QgdGFyZ2V0JCA9IHByb3BzJC5tYXAocHJvcHMgPT4gcHJvcHMudHlwZSA9PT0gTG9hZGVyVHlwZS5QYWdlID8geHMub2YoXCJwYWdlXCIpIDogc291cmNlcy5hcmdzLmVsZW1lbnQkKS5mbGF0dGVuPFZOb2RlIHwgc3RyaW5nPigpO1xuICAgICAgY29uc3QgZGltbWVyID0gRGltbWVyLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHByb3BzJDogcHJvcHMkLm1hcChwcm9wcyA9PiAoeyBpbnZlcnRlZDogcHJvcHMuaW52ZXJ0ZWQgfSkpLFxuICAgICAgICBjb250ZW50JDogdlRyZWUkLm1hcCh2ID0+IFt2XSksXG4gICAgICAgIGFyZ3M6IHsgb24kLCB0YXJnZXQkIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgcmVzdWx0JCA9IHByb3BzJC5tYXAoXG4gICAgICAgIHByb3BzID0+IHByb3BzLnR5cGUgPT09IExvYWRlclR5cGUuSW5saW5lID8gdlRyZWUkIDogZGltbWVyLkRPTVxuICAgICAgKS5mbGF0dGVuKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBET006IHJlc3VsdCQsXG4gICAgICAgIGV2ZW50czogKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChcIi5sb2FkZXJcIikuZXZlbnRzKHR5cGUpXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZGVyKGFyZ3M6IExvYWRlckFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW4gOiBbXTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgY29udGVudCk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuYWN0aXZlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jZW50ZXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNlbnRlcmVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbmRldGVybWluYXRlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW5kZXRlcm1pbmF0ZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGV4dCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRleHRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gTG9hZGVyVHlwZS5Ub0NsYXNzbmFtZSh0eXBlb2YgKHByb3BzLnR5cGUpICE9PSBcInVuZGVmaW5lZFwiID8gcHJvcHMudHlwZSA6IExvYWRlclR5cGUuUGFnZSk7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIGV4cG9ydCBlbnVtIExvYWRlclR5cGUge1xuICAgIElubGluZSwgUGFnZSwgQ29udGVudFxuICB9XG4gIGV4cG9ydCBuYW1lc3BhY2UgTG9hZGVyVHlwZSB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIFRvRW51bShhdHRhY2htZW50c3RyaW5nOiBMb2FkZXJUeXBlIHwgc3RyaW5nKTogTG9hZGVyVHlwZSB7XG4gICAgICByZXR1cm4gdHlwZW9mIChhdHRhY2htZW50c3RyaW5nKSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IGF0dGFjaG1lbnRzdHJpbmdcbiAgICAgICAgOiBMb2FkZXJUeXBlW2NhcGl0YWxpemUoYXR0YWNobWVudHN0cmluZyldO1xuICAgIH1cbiAgICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUodHlwZTogTG9hZGVyVHlwZSB8IHN0cmluZykge1xuICAgICAgdHlwZSA9IExvYWRlclR5cGUuVG9FbnVtKHR5cGUpO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgTG9hZGVyVHlwZS5JbmxpbmU6IHJldHVybiBcIiBpbmxpbmUgbG9hZGVyXCI7XG4gICAgICAgIGNhc2UgTG9hZGVyVHlwZS5QYWdlOiByZXR1cm4gXCIgbG9hZGVyXCI7XG4gICAgICAgIGNhc2UgTG9hZGVyVHlwZS5Db250ZW50OiByZXR1cm4gXCIgbG9hZGVyXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvbG9hZGVyL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGUsIGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbnRlbnRPYmosIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xvciwgQXR0YWNobWVudCwgRmxvYXQsIFRleHRBbGlnbm1lbnQgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFNlZ21lbnQge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICByYWlzZWQ6IGJvb2xlYW47XG4gICAgc3RhY2tlZDogYm9vbGVhbjtcbiAgICB0YWxsU3RhY2tlZDogYm9vbGVhbjtcbiAgICBwaWxlZDogYm9vbGVhbjtcbiAgICB2ZXJ0aWNhbDogYm9vbGVhbjtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIHBhZGRlZDogYm9vbGVhbjtcbiAgICB2ZXJ5UGFkZGVkOiBib29sZWFuO1xuICAgIGNvbXBhY3Q6IGJvb2xlYW47XG4gICAgY2lyY3VsYXI6IGJvb2xlYW47XG4gICAgY2xlYXJpbmc6IGJvb2xlYW47XG4gICAgYmFzaWM6IGJvb2xlYW47XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICAgIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICAgIHRleHRBbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBTZWdtZW50QXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBTZWdtZW50U291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFNlZ21lbnRBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50LCBhcmcyPzogRE9NQ29udGVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KHNlZ21lbnQsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogU2VnbWVudFNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgc2VnbWVudCwgXCIuc2VnbWVudFwiLCBzY29wZSk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNlZ21lbnQoYXJnczogU2VnbWVudEFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW4gOiBbXTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgY29udGVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5yYWlzZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByYWlzZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnN0YWNrZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzdGFja2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy50YWxsU3RhY2tlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhbGwgc3RhY2tlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucGlsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBwaWxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVydGljYWwpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2ZXJ0aWNhbFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubG9hZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxvYWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludmVydGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW52ZXJ0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnBhZGRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHBhZGRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVyeVBhZGRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnkgcGFkZGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wYWN0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGFjdFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2lyY3VsYXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjaXJjdWxhclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2xlYXJpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjbGVhcmluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYmFzaWMpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBiYXNpY1wiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBDb2xvci5Ub0NsYXNzbmFtZShwcm9wcy5jb2xvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmF0dGFjaG1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQXR0YWNobWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hdHRhY2htZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuZmxvYXQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gRmxvYXQuVG9DbGFzc25hbWUocHJvcHMuZmxvYXQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy50ZXh0QWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFRleHRBbGlnbm1lbnQuVG9DbGFzc25hbWUocHJvcHMudGV4dEFsaWdubWVudCk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBzZWdtZW50XCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VsZW1lbnRzL3NlZ21lbnQvaW5kZXgudHMiLCJpbXBvcnQgeyBWTm9kZSwgZGl2LCBhIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTaXplLCAgQXR0YWNobWVudH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBudW1Ub1RleHQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0ZXBzIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgdmVydGljYWw6IGJvb2xlYW47XG4gICAgc3RhY2thYmxlOiBib29sZWFuO1xuICAgIGVxdWFsV2lkdGg6IGJvb2xlYW47XG4gICAgZmx1aWQ6IGJvb2xlYW47XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCB0eXBlIENvbnRlbnQgPSBBcnJheTxQYXJ0aWFsPFN0ZXBJdGVtPj47XG4gIGV4cG9ydCBpbnRlcmZhY2UgU3RlcEl0ZW0ge1xuICAgIGljb246IERPTUNvbnRlbnQ7XG4gICAgaGVhZGVyOiBET01Db250ZW50O1xuICAgIGRlc2NyaXB0aW9uOiBET01Db250ZW50O1xuICAgIGNvbXBsZXRlZDogYm9vbGVhbjtcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbGluazogYm9vbGVhbjtcbiAgICBocmVmOiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBTdGVwQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIENvbnRlbnQsIENvbnRlbnRPYmo8Q29udGVudD4+O1xuICBleHBvcnQgdHlwZSBTdGVwU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIENvbnRlbnQsIENvbnRlbnRPYmo8Q29udGVudD4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFN0ZXBBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBDb250ZW50LCBhcmcyPzogQ29udGVudCkge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoc3RlcHMsIG1ha2VJc0FyZ3MoaXNDb250ZW50KSwgaXNDb250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogU3RlcFNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgc3RlcHMsIFwiLnN0ZXBzXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXBzKGFyZ3M6IFN0ZXBBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0NvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzLCBjb250ZW50Lmxlbmd0aCkgfSB9LCBjb250ZW50Lm1hcChzdGVwSXRlbSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcEl0ZW0oaXRlbTogU3RlcEl0ZW0sIGk6IG51bWJlcik6IFZOb2RlIHtcbiAgICBsZXQgaWNvbiA9IGl0ZW0uaWNvbiA/IGl0ZW0uaWNvbiA6IFtdO1xuICAgIGxldCBoZWFkZXIgPSBpdGVtLmhlYWRlciA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJ0aXRsZVwiIH0gfSwgaXRlbS5oZWFkZXIpIDogW107XG4gICAgbGV0IGRlc2NyaXB0aW9uID0gaXRlbS5kZXNjcmlwdGlvbiA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJkZXNjcmlwdGlvblwiIH0gfSwgaXRlbS5kZXNjcmlwdGlvbikgOiBbXTtcbiAgICBsZXQgY29udGVudCA9IFtdLmNvbmNhdChoZWFkZXIsIGRlc2NyaXB0aW9uKTtcbiAgICBsZXQgY2hpbGRyZW4gPSBbXS5jb25jYXQoaWNvbiwgY29udGVudC5sZW5ndGggPiAwID8gW2Rpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJjb250ZW50XCIgfX0sIGNvbnRlbnQpXSA6IFtdKTtcbiAgICByZXR1cm4gaXRlbS5ocmVmIFxuICAgICAgPyBhKHtwcm9wczogeyBpZDogaSwgY2xhc3NOYW1lOiBnZXRTdGVwQ2xhc3NuYW1lKGl0ZW0pLCBocmVmOiBpdGVtLmhyZWZ9fSwgY2hpbGRyZW4pXG4gICAgICA6IGRpdih7cHJvcHM6IHsgaWQ6IGksIGNsYXNzTmFtZTogZ2V0U3RlcENsYXNzbmFtZShpdGVtKX19LCBjaGlsZHJlbik7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4sIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zdGFja2FibGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzdGFja2FibGVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZsdWlkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZmx1aWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVxdWFsV2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQobGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5hdHRhY2htZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEF0dGFjaG1lbnQuVG9DbGFzc25hbWUocHJvcHMuYXR0YWNobWVudCk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBzdGVwc1wiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdGVwQ2xhc3NuYW1lKGl0ZW06IFN0ZXBJdGVtKSA6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwiXCI7XG4gICAgaWYgKGl0ZW0uYWN0aXZlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCJhY3RpdmVcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uY29tcGxldGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGxldGVkXCI7XG4gICAgfVxuICAgIGlmIChpdGVtLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0ubGluaykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxpbmtcIjtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIHN0ZXBcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG4gIGZ1bmN0aW9uIGlzQ29udGVudChvYmopIDogb2JqIGlzIENvbnRlbnQge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VsZW1lbnRzL3N0ZXBzL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGUsIGRpdiwgaW5wdXQsIHRleHRhcmVhIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IHhzIGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIFZhbHVlQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbG9yLCBTaXplIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVGV4dGJveCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGluaXRpYWw6IHN0cmluZztcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIGljb246IGJvb2xlYW47XG4gICAgbGFiZWxlZDogYm9vbGVhbjtcbiAgICBhY3Rpb246IGJvb2xlYW47XG4gICAgbGVmdENvbnRlbnQ6IGJvb2xlYW47XG4gICAgcmlnaHRDb250ZW50OiBib29sZWFuO1xuICAgIHRyYW5zcGFyZW50OiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIGZvY3VzOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgcm93czogbnVtYmVyO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFRleHRib3hBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIFRleHRib3hTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogVGV4dGJveEFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KTogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQodGV4dGJveCwgbWFrZUlzQXJncyhpc0RPTUNvbnRlbnQpLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBUZXh0Ym94U291cmNlcywgc2NvcGU/OiBzdHJpbmcpOiBWYWx1ZUNvbXBvbmVudFNpbmtzPHN0cmluZz4ge1xuICAgIGZ1bmN0aW9uIG1haW4oc291cmNlczogVGV4dGJveFNvdXJjZXMpIHtcbiAgICAgIHNvdXJjZXMucHJvcHMkID0gc291cmNlcy5wcm9wcyQgPyBzb3VyY2VzLnByb3BzJCA6IHhzLm9mKHt9KTtcbiAgICAgIHNvdXJjZXMuY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JCA6IHhzLm9mKFtdKTtcblxuICAgICAgY29uc3QgZXZ0ID0gKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChcIi5pbnB1dFwiKS5ldmVudHModHlwZSk7XG4gICAgICBjb25zdCBwcm9wcyQgPSBzb3VyY2VzLnByb3BzJC5yZW1lbWJlcigpO1xuICAgICAgY29uc3QgbmV3VmFsdWUkID0gZXZ0KFwiaW5wdXRcIikubWFwKGV2ID0+IChldi50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpLnJlbWVtYmVyKCk7XG4gICAgICBjb25zdCB2dHJlZSQgPSB4cy5jb21iaW5lKHByb3BzJCwgc291cmNlcy5jb250ZW50JCkubWFwKFxuICAgICAgICAoW3Byb3BzLCBjb250ZW50XSkgPT4gdGV4dGJveCh7IHByb3BzLCBjb250ZW50IH0pXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBET006IHZ0cmVlJCxcbiAgICAgICAgZXZlbnRzOiBldnQsXG4gICAgICAgIHZhbHVlJDogbmV3VmFsdWUkXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGV4dGJveChhcmdzOiBUZXh0Ym94QXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIGxldCB0ZXh0Ym94ID0gcHJvcHMucm93c1xuICAgICAgPyB0ZXh0YXJlYSh7IGF0dHJzOiB7IHJvd3M6IHByb3BzLnJvd3MsIHJlYWRvbmx5OiBwcm9wcy5yZWFkb25seSwgdmFsdWU6IHByb3BzLmluaXRpYWwsIHBsYWNlaG9sZGVyOiBwcm9wcy5wbGFjZWhvbGRlciB9IH0pXG4gICAgICA6IGlucHV0KHsgYXR0cnM6IHsgcmVhZG9ubHk6IHByb3BzLnJlYWRvbmx5LCB0eXBlOiBwcm9wcy50eXBlID8gcHJvcHMudHlwZSA6IFwidGV4dFwiLCB2YWx1ZTogcHJvcHMuaW5pdGlhbCwgcGxhY2Vob2xkZXI6IHByb3BzLnBsYWNlaG9sZGVyIH0gfSk7XG4gICAgcmV0dXJuIHByb3BzLnJpZ2h0Q29udGVudFxuICAgICAgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBbXS5jb25jYXQodGV4dGJveCwgY29udGVudCkpXG4gICAgICA6IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIFtdLmNvbmNhdChjb250ZW50LCB0ZXh0Ym94KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5sZWZ0Q29udGVudCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxlZnRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJpZ2h0Q29udGVudCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJpZ2h0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pY29uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaWNvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFiZWxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxhYmVsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmFjdGlvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGFjdGlvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudHJhbnNwYXJlbnQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0cmFuc3BhcmVudFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZm9jdXMpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmb2N1c1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubG9hZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxvYWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBpbnB1dFwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy90ZXh0Ym94L2luZGV4LnRzIiwiZXhwb3J0IG5hbWVzcGFjZSBJY29uVHlwZSB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZSh0eXBlOiBJY29uVHlwZSB8IHN0cmluZykge1xuICAgIGlmICh0eXBlb2YodHlwZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBcIiBcIiArIHR5cGU7XG4gICAgfVxuICAgIGlmICh0eXBlIDwgMClcbiAgICB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgbGV0IG5hbWUgPSBJY29uVHlwZVt0eXBlXTtcbiAgICByZXR1cm4gXCIgXCIgKyBuYW1lLm1hdGNoKC9bQS1aXVthLXpdKy9nKS5qb2luKFwiIFwiKS50b0xvd2VyQ2FzZSgpO1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIEljb25UeXBlIHtcbiAgU2VhcmNoLFxuICBNYWlsT3V0bGluZSxcbiAgRXh0ZXJuYWwsXG4gIFNpZ25hbCxcbiAgU2V0dGluZyxcbiAgSG9tZSxcbiAgSW5ib3gsXG4gIEJyb3dzZXIsXG4gIFRhZyxcbiAgVGFncyxcbiAgQ2FsZW5kYXIsXG4gIENvbW1lbnQsXG4gIENvbW1lbnRzLFxuICBTaG9wLFxuICBQcml2YWN5LFxuICBTZXR0aW5ncyxcbiAgVHJvcGh5LFxuICBQYXltZW50LFxuICBGZWVkLFxuICBBbGFybU91dGxpbmUsXG4gIFRhc2tzLFxuICBDbG91ZCxcbiAgTGFiLFxuICBNYWlsLFxuICBJZGVhLFxuICBEYXNoYm9hcmQsXG4gIFNpdGVtYXAsXG4gIEFsYXJtLFxuICBUZXJtaW5hbCxcbiAgQ29kZSxcbiAgUHJvdGVjdCxcbiAgQ2FsZW5kYXJPdXRsaW5lLFxuICBUaWNrZXQsXG4gIEV4dGVybmFsU3F1YXJlLFxuICBNYXAsXG4gIEJ1ZyxcbiAgTWFpbFNxdWFyZSxcbiAgSGlzdG9yeSxcbiAgT3B0aW9ucyxcbiAgQ29tbWVudE91dGxpbmUsXG4gIENvbW1lbnRzT3V0bGluZSxcbiAgVGV4dFRlbGVwaG9uZSxcbiAgRmluZCxcbiAgV2lmaSxcbiAgQWxhcm1TbGFzaCxcbiAgQWxhcm1TbGFzaE91dGxpbmUsXG4gIENvcHlyaWdodCxcbiAgQXQsXG4gIEV5ZWRyb3BwZXIsXG4gIFBhaW50QnJ1c2gsXG4gIEhlYXJ0YmVhdCxcbiAgRG93bmxvYWQsXG4gIFJlcGVhdCxcbiAgUmVmcmVzaCxcbiAgTG9jayxcbiAgQm9va21hcmssXG4gIFByaW50LFxuICBXcml0ZSxcbiAgVGhlbWUsXG4gIEFkanVzdCxcbiAgRWRpdCxcbiAgRXh0ZXJuYWxTaGFyZSxcbiAgQmFuLFxuICBNYWlsRm9yd2FyZCxcbiAgU2hhcmUsXG4gIEV4cGFuZCxcbiAgQ29tcHJlc3MsXG4gIFVuaGlkZSxcbiAgSGlkZSxcbiAgUmFuZG9tLFxuICBSZXR3ZWV0LFxuICBTaWduT3V0LFxuICBQaW4sXG4gIFNpZ25JbixcbiAgVXBsb2FkLFxuICBDYWxsLFxuICBDYWxsU3F1YXJlLFxuICBSZW1vdmVCb29rbWFyayxcbiAgVW5sb2NrLFxuICBDb25maWd1cmUsXG4gIEZpbHRlcixcbiAgV2l6YXJkLFxuICBVbmRvLFxuICBFeGNoYW5nZSxcbiAgQ2xvdWREb3dubG9hZCxcbiAgQ2xvdWRVcGxvYWQsXG4gIFJlcGx5LFxuICBSZXBseUFsbCxcbiAgRXJhc2UsXG4gIFVubG9ja0FsdGVybmF0ZSxcbiAgQXJjaGl2ZSxcbiAgVHJhbnNsYXRlLFxuICBSZWN5Y2xlLFxuICBTZW5kLFxuICBTZW5kT3V0bGluZSxcbiAgU2hhcmVBbHRlcm5hdGUsXG4gIFNoYXJlQWx0ZXJuYXRlU3F1YXJlLFxuICBXYWl0LFxuICBXcml0ZVNxdWFyZSxcbiAgU2hhcmVTcXVhcmUsXG4gIEFkZFRvQ2FydCxcbiAgSW5DYXJ0LFxuICBBZGRVc2VyLFxuICBSZW1vdmVVc2VyLFxuICBIZWxwQ2lyY2xlLFxuICBJbmZvQ2lyY2xlLFxuICBXYXJuaW5nLFxuICBXYXJuaW5nQ2lyY2xlLFxuICBXYXJuaW5nU2lnbixcbiAgSGVscCxcbiAgSW5mbyxcbiAgQW5ub3VuY2VtZW50LFxuICBCaXJ0aGRheSxcbiAgVXNlcnMsXG4gIERvY3RvcixcbiAgQ2hpbGQsXG4gIFVzZXIsXG4gIEhhbmRpY2FwLFxuICBTdHVkZW50LFxuICBTcHksXG4gIEdyaWRMYXlvdXQsXG4gIExpc3RMYXlvdXQsXG4gIEJsb2NrTGF5b3V0LFxuICBab29tLFxuICBab29tT3V0LFxuICBSZXNpemVWZXJ0aWNhbCxcbiAgUmVzaXplSG9yaXpvbnRhbCxcbiAgTWF4aW1pemUsXG4gIENyb3AsXG4gIEZlbWFsZSxcbiAgTWFsZSxcbiAgV29tYW4sXG4gIE1hbixcbiAgTm9uQmluYXJ5VHJhbnNnZW5kZXIsXG4gIEludGVyZ2VuZGVyLFxuICBUcmFuc2dlbmRlcixcbiAgTGVzYmlhbixcbiAgR2F5LFxuICBIZXRlcm9zZXh1YWwsXG4gIE90aGVyR2VuZGVyLFxuICBPdGhlckdlbmRlclZlcnRpY2FsLFxuICBPdGhlckdlbmRlckhvcml6b250YWwsXG4gIE5ldXRlcixcbiAgQ29ja3RhaWwsXG4gIFJvYWQsXG4gIEZsYWcsXG4gIEJvb2ssXG4gIEdpZnQsXG4gIExlYWYsXG4gIEZpcmUsXG4gIFBsYW5lLFxuICBNYWduZXQsXG4gIExlZ2FsLFxuICBMZW1vbixcbiAgV29ybGQsXG4gIFRyYXZlbCxcbiAgU2hpcHBpbmcsXG4gIE1vbmV5LFxuICBMaWdodG5pbmcsXG4gIFJhaW4sXG4gIFRyZWF0bWVudCxcbiAgU3VpdGNhc2UsXG4gIEJhcixcbiAgRmxhZ091dGxpbmUsXG4gIEZsYWdDaGVja2VyZWQsXG4gIFB1enpsZSxcbiAgRmlyZUV4dGluZ3Vpc2hlcixcbiAgUm9ja2V0LFxuICBBbmNob3IsXG4gIEJ1bGxzZXllLFxuICBTdW4sXG4gIE1vb24sXG4gIEZheCxcbiAgTGlmZVJpbmcsXG4gIEJvbWIsXG4gIFNvY2NlcixcbiAgQ2FsY3VsYXRvcixcbiAgRGlhbW9uZCxcbiAgQ3Jvc3NoYWlycyxcbiAgQXN0ZXJpc2ssXG4gIENlcnRpZmljYXRlLFxuICBDaXJjbGUsXG4gIFF1b3RlTGVmdCxcbiAgUXVvdGVSaWdodCxcbiAgRWxsaXBzaXNIb3Jpem9udGFsLFxuICBFbGxpcHNpc1ZlcnRpY2FsLFxuICBDdWJlLFxuICBDdWJlcyxcbiAgQ2lyY2xlTm90Y2hlZCxcbiAgQ2lyY2xlVGhpbixcbiAgU3F1YXJlT3V0bGluZSxcbiAgU3F1YXJlLFxuICBDaGVja21hcmssXG4gIFJlbW92ZSxcbiAgQ2hlY2ttYXJrQm94LFxuICBNb3ZlLFxuICBBZGRDaXJjbGUsXG4gIE1pbnVzQ2lyY2xlLFxuICBSZW1vdmVDaXJjbGUsXG4gIENoZWNrQ2lyY2xlLFxuICBSZW1vdmVDaXJjbGVPdXRsaW5lLFxuICBDaGVja0NpcmNsZU91dGxpbmUsXG4gIFBsdXMsXG4gIE1pbnVzLFxuICBBZGRTcXVhcmUsXG4gIFJhZGlvLFxuICBTZWxlY3RlZFJhZGlvLFxuICBNaW51c1NxdWFyZSxcbiAgTWludXNTcXVhcmVPdXRsaW5lLFxuICBDaGVja1NxdWFyZSxcbiAgUGx1c1NxdWFyZU91dGxpbmUsXG4gIFRvZ2dsZU9mZixcbiAgVG9nZ2xlT24sXG4gIEZpbG0sXG4gIFNvdW5kLFxuICBQaG90byxcbiAgQmFyQ2hhcnQsXG4gIENhbWVyYVJldHJvLFxuICBOZXdzcGFwZXIsXG4gIEFyZWFDaGFydCxcbiAgUGllQ2hhcnQsXG4gIExpbmVDaGFydCxcbiAgQXJyb3dDaXJjbGVPdXRsaW5lRG93bixcbiAgQXJyb3dDaXJjbGVPdXRsaW5lVXAsXG4gIENoZXZyb25MZWZ0LFxuICBDaGV2cm9uUmlnaHQsXG4gIEFycm93TGVmdCxcbiAgQXJyb3dSaWdodCxcbiAgQXJyb3dVcCxcbiAgQXJyb3dEb3duLFxuICBDaGV2cm9uVXAsXG4gIENoZXZyb25Eb3duLFxuICBQb2ludGluZ1JpZ2h0LFxuICBQb2ludGluZ0xlZnQsXG4gIFBvaW50aW5nVXAsXG4gIFBvaW50aW5nRG93bixcbiAgQXJyb3dDaXJjbGVMZWZ0LFxuICBBcnJvd0NpcmNsZVJpZ2h0LFxuICBBcnJvd0NpcmNsZVVwLFxuICBBcnJvd0NpcmNsZURvd24sXG4gIENhcmV0RG93bixcbiAgQ2FyZXRVcCxcbiAgQ2FyZXRMZWZ0LFxuICBDYXJldFJpZ2h0LFxuICBBbmdsZURvdWJsZUxlZnQsXG4gIEFuZ2xlRG91YmxlUmlnaHQsXG4gIEFuZ2xlRG91YmxlVXAsXG4gIEFuZ2xlRG91YmxlRG93bixcbiAgQW5nbGVMZWZ0LFxuICBBbmdsZVJpZ2h0LFxuICBBbmdsZVVwLFxuICBBbmdsZURvd24sXG4gIENoZXZyb25DaXJjbGVMZWZ0LFxuICBDaGV2cm9uQ2lyY2xlUmlnaHQsXG4gIENoZXZyb25DaXJjbGVVcCxcbiAgQ2hldnJvbkNpcmNsZURvd24sXG4gIFRvZ2dsZURvd24sXG4gIFRvZ2dsZVVwLFxuICBUb2dnbGVSaWdodCxcbiAgTG9uZ0Fycm93RG93bixcbiAgTG9uZ0Fycm93VXAsXG4gIExvbmdBcnJvd0xlZnQsXG4gIExvbmdBcnJvd1JpZ2h0LFxuICBBcnJvd0NpcmNsZU91dGxpbmVSaWdodCxcbiAgQXJyb3dDaXJjbGVPdXRsaW5lTGVmdCxcbiAgVG9nZ2xlTGVmdCxcbiAgUG93ZXIsXG4gIFRyYXNoLFxuICBUcmFzaE91dGxpbmUsXG4gIERpc2tPdXRsaW5lLFxuICBEZXNrdG9wLFxuICBMYXB0b3AsXG4gIFRhYmxldCxcbiAgTW9iaWxlLFxuICBHYW1lLFxuICBLZXlib2FyZCxcbiAgUGx1ZyxcbiAgRm9sZGVyLFxuICBGb2xkZXJPcGVuLFxuICBMZXZlbFVwLFxuICBMZXZlbERvd24sXG4gIEZpbGUsXG4gIEZpbGVPdXRsaW5lLFxuICBGaWxlVGV4dCxcbiAgRmlsZVRleHRPdXRsaW5lLFxuICBGb2xkZXJPdXRsaW5lLFxuICBGb2xkZXJPcGVuT3V0bGluZSxcbiAgRmlsZVBkZk91dGxpbmUsXG4gIEZpbGVXb3JkT3V0bGluZSxcbiAgRmlsZUV4Y2VsT3V0bGluZSxcbiAgRmlsZVBvd2VycG9pbnRPdXRsaW5lLFxuICBGaWxlSW1hZ2VPdXRsaW5lLFxuICBGaWxlQXJjaGl2ZU91dGxpbmUsXG4gIEZpbGVBdWRpb091dGxpbmUsXG4gIEZpbGVWaWRlb091dGxpbmUsXG4gIEZpbGVDb2RlT3V0bGluZSxcbiAgQmFyY29kZSxcbiAgUXJjb2RlLFxuICBGb3JrLFxuICBIdG1sNSxcbiAgQ3NzMyxcbiAgUnNzLFxuICBSc3NTcXVhcmUsXG4gIE9wZW5pZCxcbiAgRGF0YWJhc2UsXG4gIFNlcnZlcixcbiAgSGVhcnQsXG4gIFN0YXIsXG4gIEVtcHR5U3RhcixcbiAgVGh1bWJzT3V0bGluZVVwLFxuICBUaHVtYnNPdXRsaW5lRG93bixcbiAgU3RhckhhbGYsXG4gIEVtcHR5SGVhcnQsXG4gIFNtaWxlLFxuICBGcm93bixcbiAgTWVoLFxuICBTdGFySGFsZkVtcHR5LFxuICBUaHVtYnNVcCxcbiAgVGh1bWJzRG93bixcbiAgTXVzaWMsXG4gIFZpZGVvUGxheU91dGxpbmUsXG4gIFZvbHVtZU9mZixcbiAgVm9sdW1lRG93bixcbiAgVm9sdW1lVXAsXG4gIFJlY29yZCxcbiAgU3RlcEJhY2t3YXJkLFxuICBGYXN0QmFja3dhcmQsXG4gIEJhY2t3YXJkLFxuICBQbGF5LFxuICBQYXVzZSxcbiAgU3RvcCxcbiAgRm9yd2FyZCxcbiAgRmFzdEZvcndhcmQsXG4gIFN0ZXBGb3J3YXJkLFxuICBFamVjdCxcbiAgVW5tdXRlLFxuICBNdXRlLFxuICBWaWRlb1BsYXksXG4gIENsb3NlZENhcHRpb25pbmcsXG4gIE1hcmtlcixcbiAgQ29mZmVlLFxuICBGb29kLFxuICBCdWlsZGluZ091dGxpbmUsXG4gIEhvc3BpdGFsLFxuICBFbWVyZ2VuY3ksXG4gIEZpcnN0QWlkLFxuICBNaWxpdGFyeSxcbiAgSCxcbiAgTG9jYXRpb25BcnJvdyxcbiAgU3BhY2VTaHV0dGxlLFxuICBVbml2ZXJzaXR5LFxuICBCdWlsZGluZyxcbiAgUGF3LFxuICBTcG9vbixcbiAgQ2FyLFxuICBUYXhpLFxuICBUcmVlLFxuICBCaWN5Y2xlLFxuICBCdXMsXG4gIFNoaXAsXG4gIE1vdG9yY3ljbGUsXG4gIFN0cmVldFZpZXcsXG4gIEhvdGVsLFxuICBUcmFpbixcbiAgU3Vid2F5LFxuICBUYWJsZSxcbiAgQ29sdW1ucyxcbiAgU29ydCxcbiAgU29ydEFzY2VuZGluZyxcbiAgU29ydERlc2NlbmRpbmcsXG4gIFNvcnRBbHBoYWJldEFzY2VuZGluZyxcbiAgU29ydEFscGhhYmV0RGVzY2VuZGluZyxcbiAgU29ydENvbnRlbnRBc2NlbmRpbmcsXG4gIFNvcnRDb250ZW50RGVzY2VuZGluZyxcbiAgU29ydE51bWVyaWNBc2NlbmRpbmcsXG4gIFNvcnROdW1lcmljRGVzY2VuZGluZyxcbiAgRm9udCxcbiAgQm9sZCxcbiAgSXRhbGljLFxuICBUZXh0SGVpZ2h0LFxuICBUZXh0V2lkdGgsXG4gIEFsaWduTGVmdCxcbiAgQWxpZ25DZW50ZXIsXG4gIEFsaWduUmlnaHQsXG4gIEFsaWduSnVzdGlmeSxcbiAgTGlzdCxcbiAgT3V0ZGVudCxcbiAgSW5kZW50LFxuICBMaW5raWZ5LFxuICBDdXQsXG4gIENvcHksXG4gIEF0dGFjaCxcbiAgU2F2ZSxcbiAgQ29udGVudCxcbiAgVW5vcmRlcmVkTGlzdCxcbiAgT3JkZXJlZExpc3QsXG4gIFN0cmlrZXRocm91Z2gsXG4gIFVuZGVybGluZSxcbiAgUGFzdGUsXG4gIFVubGluayxcbiAgU3VwZXJzY3JpcHQsXG4gIFN1YnNjcmlwdCxcbiAgSGVhZGVyLFxuICBQYXJhZ3JhcGgsXG4gIEV1cm8sXG4gIFBvdW5kLFxuICBEb2xsYXIsXG4gIFJ1cGVlLFxuICBZZW4sXG4gIFJ1YmxlLFxuICBXb24sXG4gIExpcmEsXG4gIFNoZWtlbCxcbiAgUGF5cGFsLFxuICBQYXlwYWxDYXJkLFxuICBHb29nbGVXYWxsZXQsXG4gIFZpc2EsXG4gIE1hc3RlcmNhcmQsXG4gIERpc2NvdmVyLFxuICBBbWVyaWNhbkV4cHJlc3MsXG4gIFN0cmlwZSxcbiAgVHdpdHRlclNxdWFyZSxcbiAgRmFjZWJvb2tTcXVhcmUsXG4gIExpbmtlZGluU3F1YXJlLFxuICBHaXRodWJTcXVhcmUsXG4gIFR3aXR0ZXIsXG4gIEZhY2Vib29rLFxuICBHaXRodWIsXG4gIFBpbnRlcmVzdCxcbiAgUGludGVyZXN0U3F1YXJlLFxuICBHb29nbGVQbHVzU3F1YXJlLFxuICBHb29nbGVQbHVzLFxuICBMaW5rZWRpbixcbiAgR2l0aHViQWx0ZXJuYXRlLFxuICBNYXhjZG4sXG4gIEJpdGNvaW4sXG4gIFlvdXR1YmVTcXVhcmUsXG4gIFlvdXR1YmUsXG4gIFhpbmcsXG4gIFhpbmdTcXVhcmUsXG4gIFlvdXR1YmVQbGF5LFxuICBEcm9wYm94LFxuICBTdGFja092ZXJmbG93LFxuICBJbnN0YWdyYW0sXG4gIEZsaWNrcixcbiAgQWRuLFxuICBCaXRidWNrZXQsXG4gIEJpdGJ1Y2tldFNxdWFyZSxcbiAgVHVtYmxyLFxuICBUdW1ibHJTcXVhcmUsXG4gIEFwcGxlLFxuICBXaW5kb3dzLFxuICBBbmRyb2lkLFxuICBMaW51eCxcbiAgRHJpYmJibGUsXG4gIFNreXBlLFxuICBGb3Vyc3F1YXJlLFxuICBUcmVsbG8sXG4gIEdpdHRpcCxcbiAgVmssXG4gIFdlaWJvLFxuICBSZW5yZW4sXG4gIFBhZ2VsaW5lcyxcbiAgU3RhY2tFeGNoYW5nZSxcbiAgVmltZW8sXG4gIFNsYWNrLFxuICBXb3JkcHJlc3MsXG4gIFlhaG9vLFxuICBHb29nbGUsXG4gIFJlZGRpdCxcbiAgUmVkZGl0U3F1YXJlLFxuICBTdHVtYmxldXBvbkNpcmNsZSxcbiAgU3R1bWJsZXVwb24sXG4gIERlbGljaW91cyxcbiAgRGlnZyxcbiAgUGllZFBpcGVyLFxuICBQaWVkUGlwZXJBbHRlcm5hdGUsXG4gIERydXBhbCxcbiAgSm9vbWxhLFxuICBCZWhhbmNlLFxuICBCZWhhbmNlU3F1YXJlLFxuICBTdGVhbSxcbiAgU3RlYW1TcXVhcmUsXG4gIFNwb3RpZnksXG4gIERldmlhbnRhcnQsXG4gIFNvdW5kY2xvdWQsXG4gIFZpbmUsXG4gIENvZGVwZW4sXG4gIEpzZmlkZGxlLFxuICBSZWJlbCxcbiAgRW1waXJlLFxuICBHaXRTcXVhcmUsXG4gIEdpdCxcbiAgSGFja2VyTmV3cyxcbiAgVGVuY2VudFdlaWJvLFxuICBRcSxcbiAgV2VjaGF0LFxuICBTbGlkZXNoYXJlLFxuICBUd2l0Y2gsXG4gIFllbHAsXG4gIExhc3RmbSxcbiAgTGFzdGZtU3F1YXJlLFxuICBJb3hob3N0LFxuICBBbmdlbGxpc3QsXG4gIE1lYW5wYXRoLFxuICBCdXlzZWxsYWRzLFxuICBDb25uZWN0ZGV2ZWxvcCxcbiAgRGFzaGN1YmUsXG4gIEZvcnVtYmVlLFxuICBMZWFucHViLFxuICBTZWxsc3ksXG4gIFNoaXJ0c2luYnVsayxcbiAgU2ltcGx5YnVpbHQsXG4gIFNreWF0bGFzLFxuICBXaGF0c2FwcCxcbiAgVmlhY29pbixcbiAgTWVkaXVtLFxuICBMaWtlLFxuICBGYXZvcml0ZSxcbiAgVmlkZW8sXG4gIENoZWNrLFxuICBDbG9zZSxcbiAgQ2FuY2VsLFxuICBEZWxldGUsXG4gIFgsXG4gIFVzZXJUaW1lcyxcbiAgVXNlckNsb3NlLFxuICBVc2VyQ2FuY2VsLFxuICBVc2VyRGVsZXRlLFxuICBVc2VyWCxcbiAgWm9vbUluLFxuICBNYWduaWZ5LFxuICBTaHV0ZG93bixcbiAgQ2xvY2ssXG4gIFRpbWUsXG4gIFBsYXlDaXJjbGVPdXRsaW5lLFxuICBIZWFkcGhvbmUsXG4gIENhbWVyYSxcbiAgVmlkZW9DYW1lcmEsXG4gIFBpY3R1cmUsXG4gIFBlbmNpbCxcbiAgQ29tcG9zZSxcbiAgUG9pbnQsXG4gIFRpbnQsXG4gIFNpZ251cCxcbiAgUGx1c0NpcmNsZSxcbiAgRG9udCxcbiAgTWluaW1pemUsXG4gIEFkZCxcbiAgRXllLFxuICBBdHRlbnRpb24sXG4gIENhcnQsXG4gIFNodWZmbGUsXG4gIFRhbGssXG4gIENoYXQsXG4gIFNob3BwaW5nQ2FydCxcbiAgQmFyR3JhcGgsXG4gIEFyZWFHcmFwaCxcbiAgUGllR3JhcGgsXG4gIExpbmVHcmFwaCxcbiAgS2V5LFxuICBDb2dzLFxuICBEaXNjdXNzaW9ucyxcbiAgTGlrZU91dGxpbmUsXG4gIERpc2xpa2VPdXRsaW5lLFxuICBIZWFydE91dGxpbmUsXG4gIExvZ091dCxcbiAgVGh1bWJUYWNrLFxuICBXaW5uZXIsXG4gIEJvb2ttYXJrT3V0bGluZSxcbiAgUGhvbmUsXG4gIFBob25lU3F1YXJlLFxuICBDcmVkaXRDYXJkLFxuICBIZGRPdXRsaW5lLFxuICBCdWxsaG9ybixcbiAgQmVsbCxcbiAgQmVsbE91dGxpbmUsXG4gIEJlbGxTbGFzaCxcbiAgQmVsbFNsYXNoT3V0bGluZSxcbiAgSGFuZE91dGxpbmVSaWdodCxcbiAgSGFuZE91dGxpbmVMZWZ0LFxuICBIYW5kT3V0bGluZVVwLFxuICBIYW5kT3V0bGluZURvd24sXG4gIEdsb2JlLFxuICBXcmVuY2gsXG4gIEJyaWVmY2FzZSxcbiAgR3JvdXAsXG4gIEZsYXNrLFxuICBTaWRlYmFyLFxuICBCYXJzLFxuICBMaXN0VWwsXG4gIExpc3RPbCxcbiAgTnVtYmVyZWRMaXN0LFxuICBNYWdpYyxcbiAgVHJ1Y2ssXG4gIEN1cnJlbmN5LFxuICBUcmlhbmdsZURvd24sXG4gIERyb3Bkb3duLFxuICBUcmlhbmdsZVVwLFxuICBUcmlhbmdsZUxlZnQsXG4gIFRyaWFuZ2xlUmlnaHQsXG4gIEVudmVsb3BlLFxuICBDb252ZXJzYXRpb24sXG4gIFVtYnJlbGxhLFxuICBDbGlwYm9hcmQsXG4gIExpZ2h0YnVsYixcbiAgQW1idWxhbmNlLFxuICBNZWRraXQsXG4gIEZpZ2h0ZXJKZXQsXG4gIEJlZXIsXG4gIFBsdXNTcXVhcmUsXG4gIENvbXB1dGVyLFxuICBDaXJjbGVPdXRsaW5lLFxuICBJbnRlcnNleCxcbiAgQXNleHVhbCxcbiAgU3Bpbm5lcixcbiAgR2FtZXBhZCxcbiAgU3RhckhhbGZGdWxsLFxuICBRdWVzdGlvbixcbiAgRXJhc2VyLFxuICBNaWNyb3Bob25lLFxuICBNaWNyb3Bob25lU2xhc2gsXG4gIFNoaWVsZCxcbiAgVGFyZ2V0LFxuICBQbGF5Q2lyY2xlLFxuICBQZW5jaWxTcXVhcmUsXG4gIENvbXBhc3MsXG4gIEFtZXgsXG4gIEV1cixcbiAgR2JwLFxuICBVc2QsXG4gIElucixcbiAgQ255LFxuICBSbWIsXG4gIEpweSxcbiAgUm91YmxlLFxuICBSdWIsXG4gIEtydyxcbiAgQnRjLFxuICBTaGVxZWwsXG4gIElscyxcbiAgVHJ5LFxuICBaaXAsXG4gIERvdENpcmNsZU91dGxpbmUsXG4gIFNsaWRlcnMsXG4gIFdpLFxuICBHcmFkdWF0aW9uLFxuICBXZWl4aW4sXG4gIEJpbm9jdWxhcnMsXG4gIEdyYXRpcGF5LFxuICBHZW5kZXJsZXNzLFxuICBUZWxldHlwZSxcbiAgUG93ZXJDb3JkLFxuICBUdHksXG4gIENjLFxuICBQbHVzQ2FydCxcbiAgQXJyb3dEb3duQ2FydCxcbiAgRGV0ZWN0aXZlLFxuICBWZW51cyxcbiAgTWFycyxcbiAgTWVyY3VyeSxcbiAgVmVudXNEb3VibGUsXG4gIEZlbWFsZUhvbW9zZXh1YWwsXG4gIE1hcnNEb3VibGUsXG4gIE1hbGVIb21vc2V4dWFsLFxuICBWZW51c01hcnMsXG4gIE1hcnNTdHJva2UsXG4gIE1hcnNBbHRlcm5hdGUsXG4gIE1hcnNWZXJ0aWNhbCxcbiAgTWFyc0hvcml6b250YWwsXG4gIE1hcnNTdHJva2VWZXJ0aWNhbCxcbiAgTWFyc1N0cm9rZUhvcml6b250YWwsXG4gIEZhY2Vib29rT2ZmaWNpYWwsXG4gIFBpbnRlcmVzdE9mZmljaWFsLFxuICBCZWRcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbnVtcy9pY29uVHlwZS50cyIsImltcG9ydCB4cyBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeyBWTm9kZSwgaW5wdXQsIGxhYmVsLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBDb250ZW50T2JqLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb21wb25lbnRTb3VyY2VzLCBWYWx1ZUNvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2hlY2tib3gge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgY2hlY2tlZDogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBmaXR0ZWQ6IGJvb2xlYW47XG4gICAgcmFkaW86IGJvb2xlYW47XG4gICAgdG9nZ2xlOiBib29sZWFuO1xuICAgIHNsaWRlcjogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIENoZWNrYm94QXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBDaGVja2JveFNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBDaGVja2JveEFyZ3N8UGFydGlhbDxQcm9wcz58RE9NQ29udGVudCwgYXJnMj86IERPTUNvbnRlbnQpIDogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoY2hlY2tib3gsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IENoZWNrYm94U291cmNlcywgc2NvcGU/OiBzdHJpbmcpIDogVmFsdWVDb21wb25lbnRTaW5rczxib29sZWFuPiB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBDaGVja2JveFNvdXJjZXMpIHtcbiAgICAgIHNvdXJjZXMucHJvcHMkID0gc291cmNlcy5wcm9wcyQgPyBzb3VyY2VzLnByb3BzJCA6IHhzLm9mKHt9KTtcbiAgICAgIHNvdXJjZXMuY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JCA6IHhzLm9mKFwiXCIpO1xuICAgICAgY29uc3QgZXZ0ID0gKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChcIi5jaGVja2JveFwiKS5ldmVudHModHlwZSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGNsaWNrZWQkID0gZXZ0KFwiY2xpY2tcIik7XG4gICAgICBjb25zdCBwcm9wcyQgPSBzb3VyY2VzLnByb3BzJC5yZW1lbWJlcigpO1xuICAgICAgY29uc3QgY2hlY2tlZCQgPSBwcm9wcyQubWFwKHByb3BzID0+XG4gICAgICAgIGNsaWNrZWQkLmZvbGQoKGFjYywgZXZ0KSA9PiAoZXZ0LnNyY0VsZW1lbnQgYXMgYW55KS5jaGVja2VkLCBwcm9wcy5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlKVxuICAgICAgKS5mbGF0dGVuKCkucmVtZW1iZXIoKTtcbiAgICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBzb3VyY2VzLmNvbnRlbnQkKS5tYXAoXG4gICAgICAgIChbcHJvcHMsIGNvbnRlbnRdKSA9PiBjaGVja2JveCh7cHJvcHMsIGNvbnRlbnR9KVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgRE9NOiB2VHJlZSQsXG4gICAgICAgIGV2ZW50czogZXZ0LFxuICAgICAgICB2YWx1ZSQ6IGNoZWNrZWQkXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cblxuICBmdW5jdGlvbiBjaGVja2JveChhcmdzOiBDaGVja2JveEFyZ3MpIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzTmFtZShwcm9wcykgfSB9LCBbXG4gICAgICBpbnB1dCh7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgdHlwZTogcHJvcHMucmFkaW8gPyBcInJhZGlvXCIgOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICBjaGVja2VkOiBwcm9wcy5jaGVja2VkLFxuICAgICAgICAgIGRpc2FibGVkOiBwcm9wcy5yZWFkb25seSB8fCBwcm9wcy5kaXNhYmxlZFxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGxhYmVsKHsgcHJvcHM6IHsgZm9yOiBwcm9wcy5uYW1lIH0gfSwgcHJvcHMuZml0dGVkID8gXCJcIiA6IGNvbnRlbnQpXG4gICAgXSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMucmVhZG9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByZWFkLW9ubHlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNoZWNrZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjaGVja2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5maXR0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXR0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJhZGlvKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmFkaW9cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRvZ2dsZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRvZ2dsZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc2xpZGVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc2xpZGVyXCI7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc05hbWUgKyBcIiBjaGVja2JveFwiO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9jaGVja2JveC9pbmRleC50cyIsImltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGRyb3BSZXBlYXRzIGZyb20gXCJ4c3RyZWFtL2V4dHJhL2Ryb3BSZXBlYXRzXCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcInhzdHJlYW0vZXh0cmEvZGVib3VuY2VcIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IGRlbGF5IGZyb20gXCJ4c3RyZWFtL2V4dHJhL2RlbGF5XCI7XG5pbXBvcnQgeyBWTm9kZSwgZGl2LCBpbnB1dCB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5cbmltcG9ydCB7IE1lbnUgfSBmcm9tIFwiLi4vLi4vY29sbGVjdGlvbnMvbWVudVwiO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gXCIuLi8uLi9lbGVtZW50cy9pY29uXCI7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL21vZHVsZXMvdHJhbnNpdGlvblwiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNWTm9kZSwgRXZlbnRTZWxlY3RvciwgQ29udGVudE9iaiwgQ29tcG9uZW50U291cmNlcywgVmFsdWVDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgSWNvblR5cGUsIENvbG9yLCBTaXplLCBBbmltYXRpb24sIERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIERyb3Bkb3duIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgcmlnaHRBbGlnbmVkOiBib29sZWFuO1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICBpbml0aWFsOiBhbnk7XG4gICAgc2VsZWN0aW9uOiBib29sZWFuO1xuICAgIHNpbXBsZTogYm9vbGVhbjtcbiAgICBpbmxpbmU6IGJvb2xlYW47XG4gICAgZmxvYXRpbmc6IGJvb2xlYW47XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzY3JvbGxpbmc6IGJvb2xlYW47XG4gICAgY29tcGFjdDogYm9vbGVhbjtcbiAgICBwb2ludGluZzogYm9vbGVhbjtcbiAgICBkZWZhdWx0OiBET01Db250ZW50O1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCB0eXBlIENvbnRlbnQ8Vj4gPSBBcnJheTxQYXJ0aWFsPERyb3Bkb3duSXRlbTxWPj4+O1xuICBleHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duSXRlbTxWPiBleHRlbmRzIE1lbnUuTWVudUl0ZW0ge1xuICAgIHZhbHVlOiBWO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgRHJvcGRvd25Tb3VyY2VzPFY+IGV4dGVuZHMgQ29tcG9uZW50U291cmNlczxQcm9wcywgQ29udGVudDxWPiwgQ29udGVudE9iajxDb250ZW50PFY+Pj4ge1xuICAgIGFyZ3M/OiB7XG4gICAgICBzZWFyY2g/OiBib29sZWFuO1xuICAgICAgc3RhdGljPzogYm9vbGVhbjtcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bjxWPihzb3VyY2VzOiBEcm9wZG93blNvdXJjZXM8Vj4sIHNjb3BlPzogc3RyaW5nKTogVmFsdWVDb21wb25lbnRTaW5rczxWPiB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBEcm9wZG93blNvdXJjZXM8Vj4pIHtcbiAgICAgIC8qKiogTWFpbiBzdHJlYW1zICoqKi9cbiAgICAgIGNvbnN0IGV2dCA9ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIuZHJvcGRvd25cIikuZXZlbnRzKHR5cGUpO1xuICAgICAgY29uc3QgY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JC5tYXAoYyA9PiBjIGluc3RhbmNlb2YgQXJyYXkgPyBjIDogYy5tYWluKSA6IHhzLm9mKFtdKSBhcyBTdHJlYW08Q29udGVudDxWPj47XG4gICAgICBjb25zdCBwcm9wcyQgPSBzb3VyY2VzLnByb3BzJCA/IHNvdXJjZXMucHJvcHMkLnJlbWVtYmVyKCkgOiB4cy5vZih7fSkgYXMgU3RyZWFtPFBhcnRpYWw8UHJvcHM+PjtcbiAgICAgIGNvbnN0IGl0ZW1DbGljayRwcm94eSA9IHhzLmNyZWF0ZSgpIGFzIFN0cmVhbTxFdmVudD47XG4gICAgICBjb25zdCBpdGVtQ2xpY2skID0gaXRlbUNsaWNrJHByb3h5LnJlbWVtYmVyKCk7XG4gICAgICBjb25zdCB2YWx1ZSRwcm94eSA9IHhzLmNyZWF0ZSgpIGFzIFN0cmVhbTxWPjtcblxuICAgICAgbGV0IGZpbHRlciQ6IFN0cmVhbTxzdHJpbmc+O1xuICAgICAgaWYgKHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3Muc2VhcmNoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0JCA9IHNvdXJjZXMuRE9NLnNlbGVjdChcImlucHV0XCIpLmV2ZW50cyhcImtleXVwXCIpXG4gICAgICAgICAgLm1hcChldiA9PiAoZXYudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKTtcbiAgICAgICAgZmlsdGVyJCA9IHhzLm1lcmdlKGlucHV0JCwgdmFsdWUkcHJveHkubWFwKHYgPT4gXCJcIikpIGFzIFN0cmVhbTxzdHJpbmc+O1xuICAgICAgfVxuICAgICAgLyoqKiBDb21wb3NlIGNvbXBvbmVudCAqKiovXG4gICAgICBsZXQgdHJhbnNpdGlvbiQgPSBjcmVhdGVUcmFuc2l0aW9uJChldnQsIGl0ZW1DbGljayQpO1xuICAgICAgbGV0IG1lbnUgPSBjcmVhdGVNZW51Q29tcG9uZW50PFY+KHNvdXJjZXMsIGNvbnRlbnQkLCB2YWx1ZSRwcm94eSwgdHJhbnNpdGlvbiQsIGZpbHRlciQpO1xuICAgICAgY29uc3QgaW5pdGlhbFZhbHVlJCA9IHByb3BzJC5tYXAocHJvcHMgPT4gcHJvcHMuaW5pdGlhbCkucmVtZW1iZXIoKTtcbiAgICAgIHZhbHVlJHByb3h5LmltaXRhdGUoeHMubWVyZ2UoaW5pdGlhbFZhbHVlJCwgbWVudS52YWx1ZSQubWFwKGkgPT4gaS52YWx1ZSkpKTtcbiAgICAgIGxldCB2VHJlZSQgPSBjcmVhdGVWaWV3KHNvdXJjZXMsIHByb3BzJCwgY29udGVudCQsIHRyYW5zaXRpb24kLCBtZW51LCBmaWx0ZXIkKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgRE9NOiB2VHJlZSQsXG4gICAgICAgIGV2ZW50czogZXZ0LFxuICAgICAgICB2YWx1ZSQ6IG1lbnUudmFsdWUkLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgLyoqKiBTaG93IGRyb3Bkb3duIG9uIGNsaWNrLCBoaWRlIG9uIGNsaWNrL21vdXNlbGVhdmUgKioqL1xuICBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uJChldnQ6IEV2ZW50U2VsZWN0b3IsIGl0ZW1DbGljayQpIHtcbiAgICBjb25zdCBkcm9wZG93bkNsaWNrJCA9IGV2dChcImNsaWNrXCIpXG4gICAgICAuZmlsdGVyKGV2dCA9PiBcbiAgICAgICAgIShldnQuc3JjRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXRlbVwiKSB8fCBcbiAgICAgICAgKGV2dC5zcmNFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wZG93blwiKSBcbiAgICAgIClcbiAgICAgIC5tYXBUbyhEaXJlY3Rpb24uSW4pO1xuICAgIGNvbnN0IG1vdXNlbGVhdmUkID0geHMubWVyZ2UoZXZ0KFwibW91c2VsZWF2ZVwiKS5maWx0ZXIoXG4gICAgICBldnQgPT4gZXZ0LnNyY0VsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YoXCJpY29uXCIpID09PSAtMVxuICAgICksIGV2dChcIm1vdXNlZW50ZXJcIikpXG4gICAgICAubWFwKGV2dCA9PiAoZXZ0IGFzIE1vdXNlRXZlbnQpLnR5cGUgPT09IFwibW91c2VlbnRlclwiID8gRGlyZWN0aW9uLkluIDogRGlyZWN0aW9uLk91dClcbiAgICAgIC5jb21wb3NlKGRlYm91bmNlKDI1MCkpXG4gICAgICAuZmlsdGVyKGRpciA9PiBkaXIgPT09IERpcmVjdGlvbi5PdXQpO1xuICAgIHJldHVybiB4cy5tZXJnZShkcm9wZG93bkNsaWNrJCwgaXRlbUNsaWNrJC5tYXBUbyhEaXJlY3Rpb24uT3V0KSwgbW91c2VsZWF2ZSQpXG4gICAgICAuc3RhcnRXaXRoKERpcmVjdGlvbi5PdXQpXG4gICAgICAubWFwKGRpciA9PiAoe1xuICAgICAgICBhbmltYXRpb246IEFuaW1hdGlvbi5GYWRlLFxuICAgICAgICBkaXJlY3Rpb246IGRpclxuICAgICAgfSkpXG4gICAgICAuY29tcG9zZShkcm9wUmVwZWF0cyhcbiAgICAgICAgKGEsIGIpID0+IChhIGFzIGFueSkuZGlyZWN0aW9uID09PSAoYiBhcyBhbnkpLmRpcmVjdGlvblxuICAgICAgICAgICYmIChhIGFzIGFueSkuYW5pbWF0aW9uID09PSAoYiBhcyBhbnkpLmFuaW1hdGlvblxuICAgICAgKSlcbiAgICAgIC5kcm9wKDEpXG4gICAgICAuc3RhcnRXaXRoKHsgYW5pbWF0aW9uOiBBbmltYXRpb24uTm9uZSwgZGlyZWN0aW9uOiBEaXJlY3Rpb24uT3V0IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTWVudUNvbXBvbmVudDxWPihzb3VyY2VzOiBEcm9wZG93blNvdXJjZXM8Vj4sIGNvbnRlbnQkOiBTdHJlYW08Q29udGVudDxWPj4sIHZhbHVlJHByb3h5OiBTdHJlYW08Vj4sIHRyYW5zaXRpb24kLCBmaWx0ZXIkPzogU3RyZWFtPHN0cmluZz4pIHtcbiAgICAvKioqIENyZWF0ZSBjaGlsZCBtZW51IGl0ZW1zICoqKi9cbiAgICBsZXQgbWVudUNvbnRlbnQkOiBTdHJlYW08Q29udGVudDxWPj47XG4gICAgaWYgKHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3Muc2VhcmNoKSB7XG4gICAgICBjb25zdCBmaWx0ZXJlZENvbnRlbnQkID0geHMuY29tYmluZShjb250ZW50JCwgZmlsdGVyJCkubWFwKFxuICAgICAgICAoW2NvbnRlbnQsIGZpbHRlcl0pID0+IGNvbnRlbnQuZmlsdGVyKGMgPT4gZmlsdGVyQ29udGVudChjLCBmaWx0ZXIpKVxuICAgICAgKS5yZW1lbWJlcigpO1xuICAgICAgbWVudUNvbnRlbnQkID0geHMuY29tYmluZShmaWx0ZXJlZENvbnRlbnQkLCB2YWx1ZSRwcm94eSkubWFwKFxuICAgICAgICAoW2NvbnRlbnQsIHZhbHVlXSkgPT4gY29udGVudC5tYXAoXG4gICAgICAgICAgaXRlbSA9PiBpdGVtLnZhbHVlID09PSB2YWx1ZSA/IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0sIHsgYWN0aXZlOiB0cnVlIH0pIDogaXRlbVxuICAgICAgICApXG4gICAgICApLnJlbWVtYmVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbnVDb250ZW50JCA9IHhzLmNvbWJpbmUoY29udGVudCQsIHZhbHVlJHByb3h5KS5tYXAoXG4gICAgICAgIChbY29udGVudCwgdmFsdWVdKSA9PiBjb250ZW50Lm1hcChcbiAgICAgICAgICBpdGVtID0+IGl0ZW0udmFsdWUgPT09IHZhbHVlID8gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwgeyBhY3RpdmU6IHRydWUgfSkgOiBpdGVtXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IG1lbnUgPSBNZW51LnJ1bjxEcm9wZG93bkl0ZW08Vj4+KHsgRE9NOiBzb3VyY2VzLkRPTSwgcHJvcHMkOiB4cy5vZih7c3VibWVudTogdHJ1ZX0pLCBjb250ZW50JDogbWVudUNvbnRlbnQkIH0pO1xuICAgIGNvbnN0IGFuaW1hdGVkTWVudSA9IFRyYW5zaXRpb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgdGFyZ2V0JDogbWVudS5ET00sIHRyYW5zaXRpb24kIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBET006IGFuaW1hdGVkTWVudS5ET00sXG4gICAgICBldmVudHM6IG1lbnUuZXZlbnRzLFxuICAgICAgdmFsdWUkOiBtZW51LnZhbHVlJFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVWaWV3PFY+KHNvdXJjZXM6IERyb3Bkb3duU291cmNlczxWPiwgcHJvcHMkOiBTdHJlYW08UGFydGlhbDxQcm9wcz4+LFxuICAgIGNvbnRlbnQkOiBTdHJlYW08Q29udGVudDxWPj4sIHRyYW5zaXRpb24kLCBtZW51LCBmaWx0ZXIkPyk6IFN0cmVhbTxWTm9kZT4ge1xuICAgIGNvbnN0IGFjdGl2ZSQgPSB4cy5tZXJnZShcbiAgICAgIHRyYW5zaXRpb24kLmZpbHRlcih4ID0+IHguZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uSW4pLm1hcFRvKHRydWUpLFxuICAgICAgdHJhbnNpdGlvbiQuZmlsdGVyKHggPT4geC5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5PdXQpLmNvbXBvc2UoZGVsYXkoMjUwKSkubWFwVG8oZmFsc2UpXG4gICAgKSBhcyBTdHJlYW08Ym9vbGVhbj47XG4gICAgbGV0IGFjdGl2ZUl0ZW0kID0gY29udGVudCQubWFwKGNvbnRlbnQgPT4gY29udGVudC5maWx0ZXIoaXRlbSA9PiBpdGVtLmFjdGl2ZSlbMF0pO1xuICAgIGlmIChzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLnNlYXJjaCkge1xuICAgICAgcmV0dXJuIHhzLmNvbWJpbmUocHJvcHMkLCBhY3RpdmUkLCBtZW51LkRPTSwgZmlsdGVyJCwgYWN0aXZlSXRlbSQpLm1hcChcbiAgICAgICAgKFtwcm9wcywgaXNBY3RpdmUsIG1lbnUsIGZpbHRlciwgYWN0aXZlSXRlbV0pID0+IGRpdihcbiAgICAgICAgICB7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NOYW1lKHByb3BzLCBzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLnNlYXJjaCwgaXNBY3RpdmUpIH0gfSwgW10uY29uY2F0KFxuICAgICAgICAgICAgZ2V0VGV4dChhY3RpdmVJdGVtLCBwcm9wcywgc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy5zdGF0aWMpLFxuICAgICAgICAgICAgaW5wdXQoeyBwcm9wczogeyBjbGFzc05hbWU6IFwic2VhcmNoXCIsIHZhbHVlOiBmaWx0ZXIgfSB9KSxcbiAgICAgICAgICAgICFwcm9wcy5zaW1wbGUgPyBJY29uLnJlbmRlcihJY29uVHlwZS5Ecm9wZG93bikgOiBbXSxcbiAgICAgICAgICAgIG1lbnVcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB4cy5jb21iaW5lKHByb3BzJCwgYWN0aXZlJCwgbWVudS5ET00sIGFjdGl2ZUl0ZW0kKS5tYXAoXG4gICAgICAgIChbcHJvcHMsIGlzQWN0aXZlLCBtZW51LCBhY3RpdmVJdGVtXSkgPT4gZGl2KFxuICAgICAgICAgIHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc05hbWUocHJvcHMsIHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3Muc2VhcmNoLCBpc0FjdGl2ZSkgfSB9LCBbXS5jb25jYXQoXG4gICAgICAgICAgICBnZXRUZXh0KGFjdGl2ZUl0ZW0sIHByb3BzLCBzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLnN0YXRpYyksXG4gICAgICAgICAgICAhcHJvcHMuc2ltcGxlID8gSWNvbi5yZW5kZXIoSWNvblR5cGUuRHJvcGRvd24pIDogW10sXG4gICAgICAgICAgICBtZW51XG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4sIHNlYXJjaD86IGJvb2xlYW4sIGFjdGl2ZT86IGJvb2xlYW4sICkge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLnJpZ2h0QWxpZ25lZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJpZ2h0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zZWxlY3Rpb24pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzZWxlY3Rpb25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmlubGluZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGlubGluZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZmxvYXRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmbG9hdGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubG9hZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxvYWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnNjcm9sbGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNjcm9sbGluZ1wiO1xuICAgIH1cbiAgICBpZiAoc2VhcmNoKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc2VhcmNoXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wYWN0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGFjdFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucG9pbnRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBwb2ludGluZ1wiO1xuICAgIH1cbiAgICBpZiAoYWN0aXZlIHx8IHByb3BzLmFjdGl2ZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGFjdGl2ZVwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZSArIFwiIGRyb3Bkb3duXCI7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VGV4dDxWPihpdGVtOiBQYXJ0aWFsPERyb3Bkb3duSXRlbTxWPj4sIHByb3BzOiBQYXJ0aWFsPFByb3BzPiwgc3RhdD86IGJvb2xlYW4pOiBWTm9kZSB7XG4gICAgaWYgKHR5cGVvZiAoc3RhdCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwidGV4dFwiIH0gfSwgcHJvcHMuZGVmYXVsdCk7XG4gICAgfVxuICAgIGlmIChpdGVtID09PSBudWxsIHx8IHR5cGVvZiAoaXRlbSkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiZGVmYXVsdCB0ZXh0XCIgfSB9LCBwcm9wcy5kZWZhdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJ0ZXh0XCIgfSB9LCBpdGVtLm1haW4pO1xuICB9XG4gIGZ1bmN0aW9uIGZpbHRlckNvbnRlbnQ8Vj4oaXRlbTogUGFydGlhbDxEcm9wZG93bkl0ZW08Vj4+LCBmaWx0ZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGZ1bmN0aW9uIGYobm9kZTogVk5vZGUgfCBzdHJpbmcpIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vZGUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBub2RlID09PSBmaWx0ZXI7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS50ZXh0KSB7XG4gICAgICAgIHJldHVybiBub2RlLnRleHQuaW5kZXhPZihmaWx0ZXIpICE9PSAtMSB8fCAhZmlsdGVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGMgaW4gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIGlmIChmKGMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIChpdGVtLm1haW4pID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIChpdGVtLm1haW4pID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gKGl0ZW0ubWFpbiBhcyBzdHJpbmcpLmluZGV4T2YoZmlsdGVyKSAhPT0gLTEgfHwgIWZpbHRlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNWTm9kZShpdGVtLm1haW4pKSB7XG4gICAgICByZXR1cm4gZihpdGVtLm1haW4pO1xuICAgIH1cbiAgICBlbHNlIGlmIChpdGVtLm1haW4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgZm9yIChsZXQgYyBvZiBpdGVtLm1haW4pIHtcbiAgICAgICAgaWYgKGlzTWVudUl0ZW0oYykpIHtcbiAgICAgICAgICByZXR1cm4gZmlsdGVyQ29udGVudChjLCBmaWx0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmKGMpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNNZW51SXRlbShvYmopOiBvYmogaXMgUGFydGlhbDxNZW51Lk1lbnVJdGVtPiB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmoubWFpbjtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvZHJvcGRvd24vaW5kZXgudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9jaGVja2JveFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGltbWVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kcm9wZG93blwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbW9kYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvcHVwXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wcm9ncmVzc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGFic1wiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvaW5kZXgudHMiLCJpbXBvcnQgaXNvbGF0ZSBmcm9tIFwiQGN5Y2xlL2lzb2xhdGVcIjtcbmltcG9ydCB7IFZOb2RlLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSwgTWVtb3J5U3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcblxuaW1wb3J0IHsgSWNvblR5cGUsIERpcmVjdGlvbiwgQW5pbWF0aW9uIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBEaW1tZXIgfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy9kaW1tZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vLi4vZWxlbWVudHMvaWNvblwiO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9tb2R1bGVzL3RyYW5zaXRpb25cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBNb2RhbCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudE9iaiB7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBoZWFkZXI6IERPTUNvbnRlbnQ7XG4gICAgYWN0aW9uczogRE9NQ29udGVudDtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIE1vZGFsU291cmNlcyBleHRlbmRzIENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+IHtcbiAgICBhcmdzPzoge1xuICAgICAgb24kPzogU3RyZWFtPGJvb2xlYW4+O1xuICAgICAgdGFyZ2V0JD86IFN0cmVhbTxWTm9kZT47XG4gICAgfTtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIE1vZGFsU2lua3MgZXh0ZW5kcyBDb21wb25lbnRTaW5rcyB7XG4gICAgYWN0aXZlJDogU3RyZWFtPGJvb2xlYW4+O1xuICB9XG5cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IE1vZGFsU291cmNlcywgc2NvcGU/OiBzdHJpbmcpIDogTW9kYWxTaW5rcyB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBNb2RhbFNvdXJjZXMpIHtcbiAgICAgIGNvbnN0IHByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7fSkgYXMgU3RyZWFtPFBhcnRpYWw8UHJvcHM+PjtcbiAgICAgIGNvbnN0IGNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQubWFwKGMgPT4gaXNET01Db250ZW50KGMpID8geyBtYWluOiBjIH0gOiBjKSA6IHhzLm9mKHsgbWFpbjogW10gfSk7XG4gICAgICBjb25zdCB0YXJnZXQkID0gc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy50YXJnZXQkID8gc291cmNlcy5hcmdzLnRhcmdldCQgOiB4cy5vZihcInBhZ2VcIik7XG4gICAgICBjb25zdCBzaG93JD0gc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy5vbiQgPyBzb3VyY2VzLmFyZ3Mub24kIDogeHMub2YodHJ1ZSk7XG5cbiAgICAgIGNvbnN0IGNsb3NlSWNvbiA9IEljb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgcHJvcHMkOiB4cy5vZih7IGxpbms6IHRydWUgfSksIGNvbnRlbnQkOiB4cy5vZihJY29uVHlwZS5DbG9zZSkgfSk7XG4gICAgICBjb25zdCBjbG9zZSQgPSBjbG9zZUljb24uZXZlbnRzKFwiY2xpY2tcIikubWFwVG8oZmFsc2UpO1xuXG4gICAgICAvKioqIFJlbmRlciBtb2RhbCAqKiovXG4gICAgICBsZXQgZGltbWVyY2xpY2skcHJveHkgPSB4cy5jcmVhdGUoKSBhcyBTdHJlYW08Ym9vbGVhbj47XG4gICAgICBjb25zdCBvbiQgPSB4cy5tZXJnZShzaG93JCwgZGltbWVyY2xpY2skcHJveHksIGNsb3NlJCkucmVtZW1iZXIoKSBhcyBNZW1vcnlTdHJlYW08Ym9vbGVhbj47XG4gICAgICBjb25zdCBtb2RhbCQgPSB4cy5jb21iaW5lKGNvbnRlbnQkLCBjbG9zZUljb24uRE9NKS5tYXAoXG4gICAgICAgIChbY29udGVudCwgaWNvbl0pID0+XG4gICAgICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcInVpIHNjcm9sbGluZyBhY3RpdmUgbW9kYWxcIiB9IH0sIFtdLmNvbmNhdChcbiAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICBjb250ZW50LmhlYWRlciA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9IH0sIGNvbnRlbnQuaGVhZGVyKSA6IFtdLFxuICAgICAgICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImNvbnRlbnRcIiB9IH0sIGNvbnRlbnQubWFpbiksXG4gICAgICAgICAgICBjb250ZW50LmFjdGlvbnMgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiYWN0aW9uc1wiIH0gfSwgY29udGVudC5hY3Rpb25zKSA6IFtdXG4gICAgICAgICAgKSlcbiAgICAgICkucmVtZW1iZXIoKTtcblxuICAgICAgLyoqKiBBbmltYXRpb24gKioqL1xuICAgICAgY29uc3QgdHJhbnNpdGlvbiQgPSBvbiRcbiAgICAgICAgLmZvbGQoKHByZXZBbmltLCBhY3RpdmUpID0+IHByZXZBbmltLmRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5vbmVcbiAgICAgICAgICA/ICh7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogYWN0aXZlID8gRGlyZWN0aW9uLkluIDogRGlyZWN0aW9uLk91dCB9KVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiBBbmltYXRpb24uRmFkZSwgZGlyZWN0aW9uOiBhY3RpdmUgPyBEaXJlY3Rpb24uSW4gOiBEaXJlY3Rpb24uT3V0XG4gICAgICAgICAgfVxuICAgICAgICAsICh7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogRGlyZWN0aW9uLk5vbmUgfSkpO1xuICAgICAgY29uc3QgYW5pbWF0ZWRDb250ZW50ID0gVHJhbnNpdGlvbi5ydW4oeyBET006IHNvdXJjZXMuRE9NLCB0YXJnZXQkOiBtb2RhbCQsIHRyYW5zaXRpb24kIH0pO1xuXG4gICAgICAvKioqIEFjdGl2YXRlIGRpbW1lciAqKiovXG4gICAgICBsZXQgZGltbWVyQ29udGVudCQgPSBhbmltYXRlZENvbnRlbnQuRE9NLm1hcCh4ID0+IFt4XSk7XG4gICAgICBjb25zdCBkaW1tZXIgPSBEaW1tZXIucnVuKHtcbiAgICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgICAgcHJvcHMkOiBwcm9wcyQubWFwKHggPT4gKHsgaW52ZXJ0ZWQ6IHguaW52ZXJ0ZWQgfSkpLFxuICAgICAgICBjb250ZW50JDogZGltbWVyQ29udGVudCQsXG4gICAgICAgIGFyZ3M6IHsgdGFyZ2V0JCwgb24kIH1cbiAgICAgIH0sIHNjb3BlKTtcbiAgICAgIGNvbnN0IGRpbW1lcmNsaWNrJCA9IGRpbW1lci5ldmVudHMoXCJtb3VzZWRvd25cIilcbiAgICAgICAgLmZpbHRlcihldnQgPT4gZXZ0LnNyY0VsZW1lbnQgPT09IChldnQgYXMgTW91c2VFdmVudCkuY3VycmVudFRhcmdldClcbiAgICAgICAgLm1hcFRvKGZhbHNlKTtcbiAgICAgIGRpbW1lcmNsaWNrJHByb3h5LmltaXRhdGUoZGltbWVyY2xpY2skKTtcblxuICAgICAgY29uc3QgZmFkZU91dEVuZCQgPSBvbiQubWFwKGFjdGl2ZSA9PiAhYWN0aXZlID8gZGltbWVyLmV2ZW50cyhcImFuaW1hdGlvbmVuZFwiKSA6IHhzLm5ldmVyKCkpLmZsYXR0ZW4oKS5tYXBUbyhmYWxzZSk7XG4gICAgICAvLyBjb25zdCBhY3RpdmUkID0geHMubWVyZ2Uoc291cmNlcy5vbiQsIGZhZGVPdXRFbmQkKS5yZW1lbWJlcigpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aXZlJDogeHMubWVyZ2Uoc2hvdyQsIGZhZGVPdXRFbmQkKSxcbiAgICAgICAgRE9NOiBkaW1tZXIuRE9NLFxuICAgICAgICBldmVudHM6ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIubW9kYWxcIikuZXZlbnRzKHR5cGUpXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tb2RhbC9pbmRleC50cyIsImltcG9ydCB7IFZOb2RlLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgaXNvbGF0ZSBmcm9tIFwiQGN5Y2xlL2lzb2xhdGVcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwieHN0cmVhbS9leHRyYS9kZWJvdW5jZVwiO1xuaW1wb3J0IGRyb3BSZXBlYXRzIGZyb20gXCJ4c3RyZWFtL2V4dHJhL2Ryb3BSZXBlYXRzXCI7XG5pbXBvcnQgZGVsYXkgZnJvbSBcInhzdHJlYW0vZXh0cmEvZGVsYXlcIjtcbmltcG9ydCAqIGFzIFRldGhlciBmcm9tIFwidGV0aGVyXCI7XG5cbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IFNpemUsIEFuaW1hdGlvbiwgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL21vZHVsZXMvdHJhbnNpdGlvblwiO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5cbmV4cG9ydCBuYW1lc3BhY2UgUG9wdXAge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICB3aWRlOiBib29sZWFuO1xuICAgIHZlcnlXaWRlOiBib29sZWFuO1xuICAgIGZsb3dpbmc6IGJvb2xlYW47XG4gICAgaW52ZXJ0ZWQ6IGJvb2xlYW47XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBhdHRhY2htZW50OiBQb3B1cC5BdHRhY2htZW50IHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudE9iaiB7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBoZWFkZXI6IERPTUNvbnRlbnQ7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBQb3B1cFNvdXJjZXMgZXh0ZW5kcyBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPiB7XG4gICAgYXJnczoge1xuICAgICAgdGFyZ2V0JDogU3RyZWFtPFZOb2RlIHwgRWxlbWVudD4sXG4gICAgICBvbiQ/OiBTdHJlYW08Ym9vbGVhbj5cbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBQb3B1cFNvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIGZ1bmN0aW9uIG1haW4oc291cmNlczogUG9wdXBTb3VyY2VzKSB7XG4gICAgICBpZiAoIShzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLnRhcmdldCQpKSB7XG4gICAgICAgIHRocm93IChcIlBvcHVwcyBtdXN0IGJlIGF0dGFjaGVkIHRvIGFuIGVsZW1lbnRcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9wcyQgPSBzb3VyY2VzLnByb3BzJCA/IHNvdXJjZXMucHJvcHMkIDogeHMub2YoeyBhdHRhY2htZW50OiBBdHRhY2htZW50LkJvdHRvbUxlZnQgfSk7XG4gICAgICBjb25zdCBjb250ZW50JCA9IHNvdXJjZXMuY29udGVudCQgPyBzb3VyY2VzLmNvbnRlbnQkLm1hcChjID0+IGlzRE9NQ29udGVudChjKSA/IHsgbWFpbjogYyB9IDogYykgOiB4cy5vZih7IG1haW46IFtdIH0pO1xuICAgICAgY29uc3Qgb24kID0gc291cmNlcy5hcmdzLm9uJCA/IHNvdXJjZXMuYXJncy5vbiQgOiB4cy5vZih0cnVlKTtcbiAgICAgIGNvbnN0IGV2dCA9ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIucG9wdXBcIikuZXZlbnRzKHR5cGUpIGFzIFN0cmVhbTxFdmVudD47XG5cbiAgICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBjb250ZW50JCwgc291cmNlcy5hcmdzLnRhcmdldCQpLm1hcChcbiAgICAgICAgKFtwcm9wcywgY29udGVudCwgdGFyZ2V0XSkgPT4gcG9wdXAocHJvcHMsIGNvbnRlbnQsIHRhcmdldClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG1vdXNlZW50ZXIkID0gZXZ0KFwibW91c2VlbnRlclwiKTtcbiAgICAgIGNvbnN0IG1vdXNlbGVhdmUkID0geHMubWVyZ2UoZXZ0KFwibW91c2VsZWF2ZVwiKSwgbW91c2VlbnRlciQpXG4gICAgICAgIC5tYXAoZXZ0ID0+IGV2dC50eXBlID09PSBcIm1vdXNlZW50ZXJcIiA/IERpcmVjdGlvbi5JbiA6IERpcmVjdGlvbi5PdXQpXG4gICAgICAgIC5jb21wb3NlKGRlYm91bmNlKDIwMCkpXG4gICAgICAgIC5maWx0ZXIoZGlyID0+IGRpciA9PT0gRGlyZWN0aW9uLk91dCk7XG4gICAgICBjb25zdCBhY3RpdmUkID0gb24kLm1hcChhY3RpdmUgPT4gYWN0aXZlID8gRGlyZWN0aW9uLkluIDogRGlyZWN0aW9uLk91dCkuZHJvcCgxKTtcbiAgICAgIGNvbnN0IHRpbWVyJCA9IGFjdGl2ZSQubWFwKGRpciA9PiBkaXIgPT09IERpcmVjdGlvbi5PdXQgPyB4cy5vZihEaXJlY3Rpb24uT3V0KVxuICAgICAgICA6IHhzLm9mKERpcmVjdGlvbi5PdXQpLmNvbXBvc2UoZGVsYXkoMTAwMCkpLmVuZFdoZW4obW91c2VlbnRlciQpXG4gICAgICApLmZsYXR0ZW4oKTtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb24kID0geHMubWVyZ2UoYWN0aXZlJCwgbW91c2VsZWF2ZSQsIHRpbWVyJClcbiAgICAgICAgLm1hcChkaXIgPT4gKHtcbiAgICAgICAgICBhbmltYXRpb246IEFuaW1hdGlvbi5GYWRlLFxuICAgICAgICAgIGRpcmVjdGlvbjogZGlyXG4gICAgICAgIH0pKVxuICAgICAgICAuY29tcG9zZShkcm9wUmVwZWF0cyhcbiAgICAgICAgICAoYSwgYikgPT4gKGEgYXMgYW55KS5kaXJlY3Rpb24gPT09IChiIGFzIGFueSkuZGlyZWN0aW9uXG4gICAgICAgICAgICAmJiAoYSBhcyBhbnkpLmFuaW1hdGlvbiA9PT0gKGIgYXMgYW55KS5hbmltYXRpb25cbiAgICAgICAgKSlcbiAgICAgICAgLnN0YXJ0V2l0aCh7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogRGlyZWN0aW9uLk91dCB9KSBhcyBTdHJlYW08YW55PjtcbiAgICAgIGNvbnN0IGFuaW1hdGVkUG9wdXAgPSBUcmFuc2l0aW9uLnJ1bih7IERPTTogc291cmNlcy5ET00sIHRhcmdldCQ6IHZUcmVlJCwgdHJhbnNpdGlvbiQgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBET006IGFuaW1hdGVkUG9wdXAuRE9NLFxuICAgICAgICBldmVudHM6IGV2dFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaXNvbGF0ZWRNYWluID0gaXNvbGF0ZShtYWluLCBzY29wZSk7XG4gICAgcmV0dXJuIGlzb2xhdGVkTWFpbihzb3VyY2VzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcHVwKHByb3BzOiBQYXJ0aWFsPFByb3BzPiwgY29udGVudDogUGFydGlhbDxDb250ZW50T2JqPiwgdGFyZ2V0OiBWTm9kZSB8IEVsZW1lbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIGRpdih7XG4gICAgICBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSwgaG9vazoge1xuICAgICAgICBpbnNlcnQ6ICh2bm9kZSkgPT4ge1xuICAgICAgICAgIG5ldyBUZXRoZXIoe1xuICAgICAgICAgICAgZWxlbWVudDogdm5vZGUuZWxtLFxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQuaGFzT3duUHJvcGVydHkoXCJlbG1cIikgPyB0YXJnZXRbXCJlbG1cIl0gOiB0YXJnZXQsXG4gICAgICAgICAgICBhdHRhY2htZW50OiBBdHRhY2htZW50LlRvT3Bwb3NpdGVUZXRoZXIocHJvcHMuYXR0YWNobWVudCksXG4gICAgICAgICAgICB0YXJnZXRBdHRhY2htZW50OiBBdHRhY2htZW50LlRvVGV0aGVyKHByb3BzLmF0dGFjaG1lbnQpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbXS5jb25jYXQoXG4gICAgICBjb250ZW50LmhlYWRlciA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9IH0sIGNvbnRlbnQuaGVhZGVyKSA6IFtdLFxuICAgICAgY29udGVudC5tYWluXG4gICAgKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy53aWRlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgd2lkZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVyeVdpZGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2ZXJ5IHdpZGVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZsb3dpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmbG93aW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IEF0dGFjaG1lbnQuVG9DbGFzc25hbWUocHJvcHMuYXR0YWNobWVudCkgKyBcIiBwb3B1cFwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbiAgZXhwb3J0IGVudW0gQXR0YWNobWVudCB7XG4gICAgVG9wTGVmdCwgVG9wTWlkZGxlLCBUb3BSaWdodCwgTGVmdENlbnRlciwgUmlnaHRDZW50ZXIsXG4gICAgQm90dG9tTGVmdCwgQm90dG9tTWlkZGxlLCBCb3R0b21SaWdodCxcbiAgICBDZW50ZXJcbiAgfVxuICBleHBvcnQgbmFtZXNwYWNlIEF0dGFjaG1lbnQge1xuICAgIGV4cG9ydCBmdW5jdGlvbiBUb0VudW0oYXR0YWNobWVudHN0cmluZzogQXR0YWNobWVudCB8IHN0cmluZyk6IEF0dGFjaG1lbnQge1xuICAgICAgaWYgKHR5cGVvZiAoYXR0YWNobWVudHN0cmluZykgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGF0dGFjaG1lbnRzdHJpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gQXR0YWNobWVudFthdHRhY2htZW50c3RyaW5nLnNwbGl0KFwiIFwiKS5tYXAoY2FwaXRhbGl6ZSkuam9pbihcIlwiKV07XG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZShhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nKSB7XG4gICAgICBhdHRhY2htZW50ID0gQXR0YWNobWVudC5Ub0VudW0oYXR0YWNobWVudCk7XG4gICAgICBzd2l0Y2ggKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcExlZnQ6IHJldHVybiBcIiB0b3AgbGVmdFwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuVG9wTWlkZGxlOiByZXR1cm4gXCIgdG9wIGNlbnRlclwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuVG9wUmlnaHQ6IHJldHVybiBcIiB0b3AgcmlnaHRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkxlZnRDZW50ZXI6IHJldHVybiBcIiBsZWZ0IGNlbnRlclwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuUmlnaHRDZW50ZXI6IHJldHVybiBcIiByaWdodCBjZW50ZXJcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkJvdHRvbUxlZnQ6IHJldHVybiBcIiBib3R0b20gbGVmdFwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuQm90dG9tTWlkZGxlOiByZXR1cm4gXCIgYm90dG9tIGNlbnRlclwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuQm90dG9tUmlnaHQ6IHJldHVybiBcIiBib3R0b20gcmlnaHRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkNlbnRlcjogcmV0dXJuIFwiIGNlbnRlclwiO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gXCIgYm90dG9tIGxlZnRcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0IGZ1bmN0aW9uIFRvVGV0aGVyKGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmcpIHtcbiAgICAgIGF0dGFjaG1lbnQgPSBBdHRhY2htZW50LlRvRW51bShhdHRhY2htZW50KTtcbiAgICAgIHN3aXRjaCAoYXR0YWNobWVudCkge1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuVG9wTGVmdDogcmV0dXJuIFwidG9wIGxlZnRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcE1pZGRsZTogcmV0dXJuIFwidG9wIGNlbnRlclwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuVG9wUmlnaHQ6IHJldHVybiBcInRvcCByaWdodFwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuTGVmdENlbnRlcjogcmV0dXJuIFwibGVmdCBtaWRkbGVcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlJpZ2h0Q2VudGVyOiByZXR1cm4gXCJyaWdodCBtaWRkbGVcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkJvdHRvbUxlZnQ6IHJldHVybiBcImJvdHRvbSBsZWZ0XCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b21NaWRkbGU6IHJldHVybiBcImJvdHRvbSBjZW50ZXJcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkJvdHRvbVJpZ2h0OiByZXR1cm4gXCJib3R0b20gcmlnaHRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkNlbnRlcjogcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBcImJvdHRvbSBsZWZ0XCI7XG4gICAgICB9XG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBUb09wcG9zaXRlVGV0aGVyKGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmcpIHtcbiAgICAgIGF0dGFjaG1lbnQgPSBBdHRhY2htZW50LlRvRW51bShhdHRhY2htZW50KTtcbiAgICAgIHN3aXRjaCAoYXR0YWNobWVudCkge1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuVG9wTGVmdDogcmV0dXJuIFwiYm90dG9tIHJpZ2h0XCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Ub3BNaWRkbGU6IHJldHVybiBcImJvdHRvbSBjZW50ZXJcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcFJpZ2h0OiByZXR1cm4gXCJib3R0b20gbGVmdFwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuTGVmdENlbnRlcjogcmV0dXJuIFwicmlnaHQgbWlkZGxlXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5SaWdodENlbnRlcjogcmV0dXJuIFwibGVmdCBtaWRkbGVcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkJvdHRvbUxlZnQ6IHJldHVybiBcInRvcCByaWdodFwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuQm90dG9tTWlkZGxlOiByZXR1cm4gXCJ0b3AgY2VudGVyXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b21SaWdodDogcmV0dXJuIFwidG9wIGxlZnRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkNlbnRlcjogcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBcImJvdHRvbSBsZWZ0XCI7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9wb3B1cC9pbmRleC50cyIsImltcG9ydCB7IFZOb2RlLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuXG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTaXplLCBBdHRhY2htZW50LCBDb2xvciB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgUHJvZ3Jlc3Mge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBwcm9ncmVzczogbnVtYmVyO1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgUHJvZ3Jlc3NCYXJBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIFByb2dyZXNzQmFyU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFByb2dyZXNzQmFyQXJncyB8IFBhcnRpYWw8UHJvcHM+IHwgRE9NQ29udGVudCwgYXJnMj86IERPTUNvbnRlbnQpIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KHByb2dyZXNzLCBtYWtlSXNBcmdzKGlzRE9NQ29udGVudCksIGlzRE9NQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IFByb2dyZXNzQmFyU291cmNlcywgc2NvcGU/OiBzdHJpbmcpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBwcm9ncmVzcywgXCIucHJvZ3Jlc3NcIiwgc2NvcGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvZ3Jlc3MoYXJnczogUHJvZ3Jlc3NCYXJBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDogeyBwcm9ncmVzczogMCB9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBbXG4gICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiYmFyXCIgfSwgc3R5bGU6IHsgd2lkdGg6IHByb3BzLnByb2dyZXNzICsgXCIlXCIgfSB9LCBbXG4gICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJwcm9ncmVzc1wiIH0gfSwgW3Byb3BzLnByb2dyZXNzICsgXCIlXCJdKVxuICAgICAgXSksXG4gICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwibGFiZWxcIiB9IH0sIGNvbnRlbnQpXG4gICAgXSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5hY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBhY3RpdmVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludmVydGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW52ZXJ0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYXR0YWNobWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBBdHRhY2htZW50LlRvQ2xhc3NuYW1lKHByb3BzLmF0dGFjaG1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIHByb2dyZXNzXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvcHJvZ3Jlc3MvaW5kZXgudHMiLCJpbXBvcnQgeHMsIHsgTWVtb3J5U3RyZWFtLCBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGRyb3BSZXBlYXRzIGZyb20gXCJ4c3RyZWFtL2V4dHJhL2Ryb3BSZXBlYXRzXCI7XG5pbXBvcnQgeyBkaXYsIFZOb2RlLCBET01Tb3VyY2UgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHtNZW51LCBBdHRhY2htZW50LCBTZWdtZW50fSBmcm9tIFwiLi4vLi4vaW5kZXhcIjtcbmltcG9ydCB7RE9NQ29udGVudH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5cblxuZXhwb3J0IG5hbWVzcGFjZSBUYWJzIHtcbiAgZXhwb3J0IGludGVyZmFjZSBUYWJzU291cmNlcyB7XG4gICAgRE9NOiBET01Tb3VyY2U7XG4gICAgbGFiZWxzOiBzdHJpbmdbXTtcbiAgICBjb250ZW50OiBTdHJlYW08RE9NQ29udGVudD5bXTtcbiAgICBhY3RpdmU/OiBzdHJpbmc7XG4gICAgbWVudVByb3BzJD86IFN0cmVhbTxQYXJ0aWFsPE1lbnUuUHJvcHM+PjtcbiAgICBzZWdtZW50UHJvcHMkPzogU3RyZWFtPFBhcnRpYWw8U2VnbWVudC5Qcm9wcz4+O1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogVGFic1NvdXJjZXMpIHtcbiAgICBsZXQgbWVudVByb3BzJCA9IHNvdXJjZXMubWVudVByb3BzJCA/IHNvdXJjZXMubWVudVByb3BzJCA6IHhzLm9mKHsgdGFidWxhcjogdHJ1ZSwgYXR0YWNobWVudDogQXR0YWNobWVudC5Ub3AgfSk7XG4gICAgbGV0IHNlZ21lbnRQcm9wcyQgPSBzb3VyY2VzLnNlZ21lbnRQcm9wcyQgPyBzb3VyY2VzLnNlZ21lbnRQcm9wcyQgOiB4cy5vZih7YXR0YWNobWVudDogQXR0YWNobWVudC5Cb3R0b219KTtcbiAgICBsZXQgbWVudVZhbHVlJCA9IHhzLmNyZWF0ZSgpIGFzIFN0cmVhbTxzdHJpbmc+O1xuICAgIGxldCBhY3RpdmVUYWIkID0gbWVudVZhbHVlJC5zdGFydFdpdGgoc291cmNlcy5hY3RpdmUgPyBzb3VyY2VzLmFjdGl2ZTogc291cmNlcy5sYWJlbHNbMF0pLmNvbXBvc2UoZHJvcFJlcGVhdHMoKSkucmVtZW1iZXIoKTtcbiAgICBsZXQgbWVudSA9IE1lbnUucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IG1lbnVQcm9wcyQsXG4gICAgICBjb250ZW50JDogYWN0aXZlVGFiJC5tYXAoYWN0aXZlVGFiID0+XG4gICAgICAgIHNvdXJjZXMubGFiZWxzLm1hcChsYWJlbCA9PlxuICAgICAgICAgICh7XG4gICAgICAgICAgICBsaW5rOiB0cnVlLFxuICAgICAgICAgICAgYWN0aXZlOiBhY3RpdmVUYWIgPT09IGxhYmVsLFxuICAgICAgICAgICAgbWFpbjogbGFiZWxcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgfSk7XG4gICAgbWVudVZhbHVlJC5pbWl0YXRlKG1lbnUudmFsdWUkLm1hcCh4ID0+ICh4IGFzIGFueSkuYm9keSkpO1xuICAgIGxldCB0YWJDb250ZW50JCA9IGFjdGl2ZVRhYiQubWFwKFxuICAgICAgdGFiID0+IHhzLm1lcmdlKHhzLm9mKFtkaXYoKV0pLCBzb3VyY2VzLmNvbnRlbnRbc291cmNlcy5sYWJlbHMuaW5kZXhPZih0YWIpXSlcbiAgICApLmZsYXR0ZW4oKTtcbiAgICBcbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKG1lbnUuRE9NLCB0YWJDb250ZW50JCwgc2VnbWVudFByb3BzJCkubWFwKFxuICAgICAgKFttZW51LCB0YWJjb250ZW50LCBzZWdtZW50UHJvcHNdKSA9PiBkaXYoW1xuICAgICAgICBtZW51LFxuICAgICAgICBTZWdtZW50LnJlbmRlcihzZWdtZW50UHJvcHMsIHRhYmNvbnRlbnQpXG4gICAgICBdKVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgYWN0aXZlJDogYWN0aXZlVGFiJFxuICAgIH07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3RhYnMvaW5kZXgudHMiLCJpbXBvcnQgeyBWTm9kZX0gZnJvbSBcIkBjeWNsZS9kb21cIjtcblxuZXhwb3J0IHR5cGUgRE9NQ29udGVudCA9IHN0cmluZyB8IFZOb2RlIHwgQXJyYXk8c3RyaW5nfFZOb2RlPjtcbmV4cG9ydCBmdW5jdGlvbiBpc0RPTUNvbnRlbnQoY29udGVudCkgOiBjb250ZW50IGlzIERPTUNvbnRlbnQge1xuICBpZiAoIWNvbnRlbnQpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mKGNvbnRlbnQpID09PSBcInN0cmluZ1wiKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNWTm9kZShjb250ZW50KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChjb250ZW50IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBpZiAoY29udGVudC5sZW5ndGggPT09IDApe1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbnRlbnRbMF0uc2VsICE9PSB1bmRlZmluZWQgfHwgdHlwZW9mKGNvbnRlbnRbMF0pID09PSBcInN0cmluZ1wiIDtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZOb2RlKG9iaik6IG9iaiBpcyBWTm9kZSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouc2VsICE9PSB1bmRlZmluZWQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdHlwZXMvZG9tY29udGVudC50cyIsImV4cG9ydCAqIGZyb20gXCIuL3N0YXRpc3RpY1wiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3ZpZXdzL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGUsIGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xvciwgIEZsb2F0LCAgU2l6ZSB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnR9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBTdGF0aXN0aWMge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICB0ZXh0OiBib29sZWFuO1xuICAgIGhvcml6b250YWw6IGJvb2xlYW47XG4gICAgaW52ZXJ0ZWQ6IGJvb2xlYW47XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50T2JqIHtcbiAgICBtYWluOiBET01Db250ZW50O1xuICAgIGxhYmVsOiBET01Db250ZW50O1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgU3RhdGlzdGljQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+O1xuICBleHBvcnQgdHlwZSBTdGF0aXN0aWNTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iaj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogU3RhdGlzdGljQXJnc3xQYXJ0aWFsPFByb3BzPnxET01Db250ZW50LCBhcmcyPzogRE9NQ29udGVudCkge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoc3RhdGlzdGljLCBpc0FyZ3MsIGlzRE9NQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IFN0YXRpc3RpY1NvdXJjZXMsIHNjb3BlPzogc3RyaW5nKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgc3RhdGlzdGljLCBcIi5zdGF0aXN0aWNcIiwgc2NvcGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhdGlzdGljKGFyZ3M6IFN0YXRpc3RpY0FyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8ge21haW46IGFyZ3MuY29udGVudH0gOiBhcmdzLmNvbnRlbnQgOiB7bWFpbjogW119O1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBbXS5jb25jYXQoXG4gICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IHByb3BzLnRleHQgPyBcInRleHQgdmFsdWVcIiA6IFwidmFsdWVcIiB9IH0sIGNvbnRlbnQubWFpbiksXG4gICAgICBjb250ZW50LmxhYmVsID8gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImxhYmVsXCIgfSB9LCBjb250ZW50LmxhYmVsKSA6IFtdXG4gICAgKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5ob3Jpem9udGFsKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaG9yaXpvbnRhbFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGV4dCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRleHRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludmVydGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW52ZXJ0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmZsb2F0KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEZsb2F0LlRvQ2xhc3NuYW1lKHByb3BzLmZsb2F0KTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIHN0YXRpc3RpY1wiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FyZ3Mob2JqKTogb2JqIGlzIFN0YXRpc3RpY0FyZ3Mge1xuICAgIHJldHVybiB0eXBlb2Yob2JqKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoXG4gICAgICB0eXBlb2Yob2JqLnByb3BzKSAhPT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICAgdHlwZW9mKG9iai5jb250ZW50KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoXG4gICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudCkgfHxcbiAgICAgICAgaXNET01Db250ZW50KG9iai5jb250ZW50Lm1haW4pIHx8IGlzRE9NQ29udGVudChvYmouY29udGVudC5sYWJlbClcbiAgICAgIClcbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdmlld3Mvc3RhdGlzdGljL2luZGV4LnRzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciB2YWx1ZUVxdWFsID0gZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGIpIHx8IGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB2YWx1ZUVxdWFsO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92YWx1ZS1lcXVhbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=