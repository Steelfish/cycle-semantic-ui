/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/cycle-semantic-ui/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 221);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var symbol_observable_1 = __webpack_require__(143);
var NO = {};
exports.NO = NO;
function noop() { }
function cp(a) {
    var l = a.length;
    var b = Array(l);
    for (var i = 0; i < l; ++i)
        b[i] = a[i];
    return b;
}
function and(f1, f2) {
    return function andFn(t) {
        return f1(t) && f2(t);
    };
}
function _try(c, t, u) {
    try {
        return c.f(t);
    }
    catch (e) {
        u._e(e);
        return NO;
    }
}
var NO_IL = {
    _n: noop,
    _e: noop,
    _c: noop,
};
exports.NO_IL = NO_IL;
// mutates the input
function internalizeProducer(producer) {
    producer._start = function _start(il) {
        il.next = il._n;
        il.error = il._e;
        il.complete = il._c;
        this.start(il);
    };
    producer._stop = producer.stop;
}
var StreamSub = (function () {
    function StreamSub(_stream, _listener) {
        this._stream = _stream;
        this._listener = _listener;
    }
    StreamSub.prototype.unsubscribe = function () {
        this._stream.removeListener(this._listener);
    };
    return StreamSub;
}());
var Observer = (function () {
    function Observer(_listener) {
        this._listener = _listener;
    }
    Observer.prototype.next = function (value) {
        this._listener._n(value);
    };
    Observer.prototype.error = function (err) {
        this._listener._e(err);
    };
    Observer.prototype.complete = function () {
        this._listener._c();
    };
    return Observer;
}());
var FromObservable = (function () {
    function FromObservable(observable) {
        this.type = 'fromObservable';
        this.ins = observable;
        this.active = false;
    }
    FromObservable.prototype._start = function (out) {
        this.out = out;
        this.active = true;
        this._sub = this.ins.subscribe(new Observer(out));
        if (!this.active)
            this._sub.unsubscribe();
    };
    FromObservable.prototype._stop = function () {
        if (this._sub)
            this._sub.unsubscribe();
        this.active = false;
    };
    return FromObservable;
}());
var Merge = (function () {
    function Merge(insArr) {
        this.type = 'merge';
        this.insArr = insArr;
        this.out = NO;
        this.ac = 0;
    }
    Merge.prototype._start = function (out) {
        this.out = out;
        var s = this.insArr;
        var L = s.length;
        this.ac = L;
        for (var i = 0; i < L; i++)
            s[i]._add(this);
    };
    Merge.prototype._stop = function () {
        var s = this.insArr;
        var L = s.length;
        for (var i = 0; i < L; i++)
            s[i]._remove(this);
        this.out = NO;
    };
    Merge.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    Merge.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Merge.prototype._c = function () {
        if (--this.ac <= 0) {
            var u = this.out;
            if (u === NO)
                return;
            u._c();
        }
    };
    return Merge;
}());
var CombineListener = (function () {
    function CombineListener(i, out, p) {
        this.i = i;
        this.out = out;
        this.p = p;
        p.ils.push(this);
    }
    CombineListener.prototype._n = function (t) {
        var p = this.p, out = this.out;
        if (out === NO)
            return;
        if (p.up(t, this.i)) {
            var a = p.vals;
            var l = a.length;
            var b = Array(l);
            for (var i = 0; i < l; ++i)
                b[i] = a[i];
            out._n(b);
        }
    };
    CombineListener.prototype._e = function (err) {
        var out = this.out;
        if (out === NO)
            return;
        out._e(err);
    };
    CombineListener.prototype._c = function () {
        var p = this.p;
        if (p.out === NO)
            return;
        if (--p.Nc === 0)
            p.out._c();
    };
    return CombineListener;
}());
var Combine = (function () {
    function Combine(insArr) {
        this.type = 'combine';
        this.insArr = insArr;
        this.out = NO;
        this.ils = [];
        this.Nc = this.Nn = 0;
        this.vals = [];
    }
    Combine.prototype.up = function (t, i) {
        var v = this.vals[i];
        var Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;
        this.vals[i] = t;
        return Nn === 0;
    };
    Combine.prototype._start = function (out) {
        this.out = out;
        var s = this.insArr;
        var n = this.Nc = this.Nn = s.length;
        var vals = this.vals = new Array(n);
        if (n === 0) {
            out._n([]);
            out._c();
        }
        else {
            for (var i = 0; i < n; i++) {
                vals[i] = NO;
                s[i]._add(new CombineListener(i, out, this));
            }
        }
    };
    Combine.prototype._stop = function () {
        var s = this.insArr;
        var n = s.length;
        var ils = this.ils;
        for (var i = 0; i < n; i++)
            s[i]._remove(ils[i]);
        this.out = NO;
        this.ils = [];
        this.vals = [];
    };
    return Combine;
}());
var FromArray = (function () {
    function FromArray(a) {
        this.type = 'fromArray';
        this.a = a;
    }
    FromArray.prototype._start = function (out) {
        var a = this.a;
        for (var i = 0, n = a.length; i < n; i++)
            out._n(a[i]);
        out._c();
    };
    FromArray.prototype._stop = function () {
    };
    return FromArray;
}());
var FromPromise = (function () {
    function FromPromise(p) {
        this.type = 'fromPromise';
        this.on = false;
        this.p = p;
    }
    FromPromise.prototype._start = function (out) {
        var prod = this;
        this.on = true;
        this.p.then(function (v) {
            if (prod.on) {
                out._n(v);
                out._c();
            }
        }, function (e) {
            out._e(e);
        }).then(noop, function (err) {
            setTimeout(function () { throw err; });
        });
    };
    FromPromise.prototype._stop = function () {
        this.on = false;
    };
    return FromPromise;
}());
var Periodic = (function () {
    function Periodic(period) {
        this.type = 'periodic';
        this.period = period;
        this.intervalID = -1;
        this.i = 0;
    }
    Periodic.prototype._start = function (out) {
        var self = this;
        function intervalHandler() { out._n(self.i++); }
        this.intervalID = setInterval(intervalHandler, this.period);
    };
    Periodic.prototype._stop = function () {
        if (this.intervalID !== -1)
            clearInterval(this.intervalID);
        this.intervalID = -1;
        this.i = 0;
    };
    return Periodic;
}());
var Debug = (function () {
    function Debug(ins, arg) {
        this.type = 'debug';
        this.ins = ins;
        this.out = NO;
        this.s = noop;
        this.l = '';
        if (typeof arg === 'string')
            this.l = arg;
        else if (typeof arg === 'function')
            this.s = arg;
    }
    Debug.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    Debug.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Debug.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var s = this.s, l = this.l;
        if (s !== noop) {
            try {
                s(t);
            }
            catch (e) {
                u._e(e);
            }
        }
        else if (l)
            console.log(l + ':', t);
        else
            console.log(t);
        u._n(t);
    };
    Debug.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Debug.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Debug;
}());
var Drop = (function () {
    function Drop(max, ins) {
        this.type = 'drop';
        this.ins = ins;
        this.out = NO;
        this.max = max;
        this.dropped = 0;
    }
    Drop.prototype._start = function (out) {
        this.out = out;
        this.dropped = 0;
        this.ins._add(this);
    };
    Drop.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Drop.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        if (this.dropped++ >= this.max)
            u._n(t);
    };
    Drop.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Drop.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Drop;
}());
var EndWhenListener = (function () {
    function EndWhenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    EndWhenListener.prototype._n = function () {
        this.op.end();
    };
    EndWhenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    EndWhenListener.prototype._c = function () {
        this.op.end();
    };
    return EndWhenListener;
}());
var EndWhen = (function () {
    function EndWhen(o, ins) {
        this.type = 'endWhen';
        this.ins = ins;
        this.out = NO;
        this.o = o;
        this.oil = NO_IL;
    }
    EndWhen.prototype._start = function (out) {
        this.out = out;
        this.o._add(this.oil = new EndWhenListener(out, this));
        this.ins._add(this);
    };
    EndWhen.prototype._stop = function () {
        this.ins._remove(this);
        this.o._remove(this.oil);
        this.out = NO;
        this.oil = NO_IL;
    };
    EndWhen.prototype.end = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    EndWhen.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    EndWhen.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    EndWhen.prototype._c = function () {
        this.end();
    };
    return EndWhen;
}());
var Filter = (function () {
    function Filter(passes, ins) {
        this.type = 'filter';
        this.ins = ins;
        this.out = NO;
        this.f = passes;
    }
    Filter.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    Filter.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Filter.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO || !r)
            return;
        u._n(t);
    };
    Filter.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Filter.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Filter;
}());
var FlattenListener = (function () {
    function FlattenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    FlattenListener.prototype._n = function (t) {
        this.out._n(t);
    };
    FlattenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    FlattenListener.prototype._c = function () {
        this.op.inner = NO;
        this.op.less();
    };
    return FlattenListener;
}());
var Flatten = (function () {
    function Flatten(ins) {
        this.type = 'flatten';
        this.ins = ins;
        this.out = NO;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
    }
    Flatten.prototype._start = function (out) {
        this.out = out;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
        this.ins._add(this);
    };
    Flatten.prototype._stop = function () {
        this.ins._remove(this);
        if (this.inner !== NO)
            this.inner._remove(this.il);
        this.out = NO;
        this.open = true;
        this.inner = NO;
        this.il = NO_IL;
    };
    Flatten.prototype.less = function () {
        var u = this.out;
        if (u === NO)
            return;
        if (!this.open && this.inner === NO)
            u._c();
    };
    Flatten.prototype._n = function (s) {
        var u = this.out;
        if (u === NO)
            return;
        var _a = this, inner = _a.inner, il = _a.il;
        if (inner !== NO && il !== NO_IL)
            inner._remove(il);
        (this.inner = s)._add(this.il = new FlattenListener(u, this));
    };
    Flatten.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Flatten.prototype._c = function () {
        this.open = false;
        this.less();
    };
    return Flatten;
}());
var Fold = (function () {
    function Fold(f, seed, ins) {
        var _this = this;
        this.type = 'fold';
        this.ins = ins;
        this.out = NO;
        this.f = function (t) { return f(_this.acc, t); };
        this.acc = this.seed = seed;
    }
    Fold.prototype._start = function (out) {
        this.out = out;
        this.acc = this.seed;
        out._n(this.acc);
        this.ins._add(this);
    };
    Fold.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
        this.acc = this.seed;
    };
    Fold.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(this.acc = r);
    };
    Fold.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Fold.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Fold;
}());
var Last = (function () {
    function Last(ins) {
        this.type = 'last';
        this.ins = ins;
        this.out = NO;
        this.has = false;
        this.val = NO;
    }
    Last.prototype._start = function (out) {
        this.out = out;
        this.has = false;
        this.ins._add(this);
    };
    Last.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
        this.val = NO;
    };
    Last.prototype._n = function (t) {
        this.has = true;
        this.val = t;
    };
    Last.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Last.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        if (this.has) {
            u._n(this.val);
            u._c();
        }
        else
            u._e(new Error('last() failed because input stream completed'));
    };
    return Last;
}());
var MapFlattenListener = (function () {
    function MapFlattenListener(out, op) {
        this.out = out;
        this.op = op;
    }
    MapFlattenListener.prototype._n = function (r) {
        this.out._n(r);
    };
    MapFlattenListener.prototype._e = function (err) {
        this.out._e(err);
    };
    MapFlattenListener.prototype._c = function () {
        this.op.inner = NO;
        this.op.less();
    };
    return MapFlattenListener;
}());
var MapFlatten = (function () {
    function MapFlatten(mapOp) {
        this.type = mapOp.type + "+flatten";
        this.ins = mapOp.ins;
        this.out = NO;
        this.mapOp = mapOp;
        this.inner = NO;
        this.il = NO_IL;
        this.open = true;
    }
    MapFlatten.prototype._start = function (out) {
        this.out = out;
        this.inner = NO;
        this.il = NO_IL;
        this.open = true;
        this.mapOp.ins._add(this);
    };
    MapFlatten.prototype._stop = function () {
        this.mapOp.ins._remove(this);
        if (this.inner !== NO)
            this.inner._remove(this.il);
        this.out = NO;
        this.inner = NO;
        this.il = NO_IL;
    };
    MapFlatten.prototype.less = function () {
        if (!this.open && this.inner === NO) {
            var u = this.out;
            if (u === NO)
                return;
            u._c();
        }
    };
    MapFlatten.prototype._n = function (v) {
        var u = this.out;
        if (u === NO)
            return;
        var _a = this, inner = _a.inner, il = _a.il;
        var s = _try(this.mapOp, v, u);
        if (s === NO)
            return;
        if (inner !== NO && il !== NO_IL)
            inner._remove(il);
        (this.inner = s)._add(this.il = new MapFlattenListener(u, this));
    };
    MapFlatten.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    MapFlatten.prototype._c = function () {
        this.open = false;
        this.less();
    };
    return MapFlatten;
}());
var MapOp = (function () {
    function MapOp(project, ins) {
        this.type = 'map';
        this.ins = ins;
        this.out = NO;
        this.f = project;
    }
    MapOp.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    MapOp.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    MapOp.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(r);
    };
    MapOp.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    MapOp.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return MapOp;
}());
var FilterMapFusion = (function (_super) {
    __extends(FilterMapFusion, _super);
    function FilterMapFusion(passes, project, ins) {
        var _this = _super.call(this, project, ins) || this;
        _this.type = 'filter+map';
        _this.passes = passes;
        return _this;
    }
    FilterMapFusion.prototype._n = function (t) {
        if (!this.passes(t))
            return;
        var u = this.out;
        if (u === NO)
            return;
        var r = _try(this, t, u);
        if (r === NO)
            return;
        u._n(r);
    };
    return FilterMapFusion;
}(MapOp));
var Remember = (function () {
    function Remember(ins) {
        this.type = 'remember';
        this.ins = ins;
        this.out = NO;
    }
    Remember.prototype._start = function (out) {
        this.out = out;
        this.ins._add(out);
    };
    Remember.prototype._stop = function () {
        this.ins._remove(this.out);
        this.out = NO;
    };
    return Remember;
}());
var ReplaceError = (function () {
    function ReplaceError(replacer, ins) {
        this.type = 'replaceError';
        this.ins = ins;
        this.out = NO;
        this.f = replacer;
    }
    ReplaceError.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    ReplaceError.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    ReplaceError.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        u._n(t);
    };
    ReplaceError.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        try {
            this.ins._remove(this);
            (this.ins = this.f(err))._add(this);
        }
        catch (e) {
            u._e(e);
        }
    };
    ReplaceError.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return ReplaceError;
}());
var StartWith = (function () {
    function StartWith(ins, val) {
        this.type = 'startWith';
        this.ins = ins;
        this.out = NO;
        this.val = val;
    }
    StartWith.prototype._start = function (out) {
        this.out = out;
        this.out._n(this.val);
        this.ins._add(out);
    };
    StartWith.prototype._stop = function () {
        this.ins._remove(this.out);
        this.out = NO;
    };
    return StartWith;
}());
var Take = (function () {
    function Take(max, ins) {
        this.type = 'take';
        this.ins = ins;
        this.out = NO;
        this.max = max;
        this.taken = 0;
    }
    Take.prototype._start = function (out) {
        this.out = out;
        this.taken = 0;
        if (this.max <= 0)
            out._c();
        else
            this.ins._add(this);
    };
    Take.prototype._stop = function () {
        this.ins._remove(this);
        this.out = NO;
    };
    Take.prototype._n = function (t) {
        var u = this.out;
        if (u === NO)
            return;
        var m = ++this.taken;
        if (m < this.max)
            u._n(t);
        else if (m === this.max) {
            u._n(t);
            u._c();
        }
    };
    Take.prototype._e = function (err) {
        var u = this.out;
        if (u === NO)
            return;
        u._e(err);
    };
    Take.prototype._c = function () {
        var u = this.out;
        if (u === NO)
            return;
        u._c();
    };
    return Take;
}());
var Stream = (function () {
    function Stream(producer) {
        this._prod = producer || NO;
        this._ils = [];
        this._stopID = NO;
        this._dl = NO;
        this._d = false;
        this._target = NO;
        this._err = NO;
    }
    Stream.prototype._n = function (t) {
        var a = this._ils;
        var L = a.length;
        if (this._d)
            this._dl._n(t);
        if (L == 1)
            a[0]._n(t);
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._n(t);
        }
    };
    Stream.prototype._e = function (err) {
        if (this._err !== NO)
            return;
        this._err = err;
        var a = this._ils;
        var L = a.length;
        this._x();
        if (this._d)
            this._dl._e(err);
        if (L == 1)
            a[0]._e(err);
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._e(err);
        }
        if (!this._d && L == 0)
            throw this._err;
    };
    Stream.prototype._c = function () {
        var a = this._ils;
        var L = a.length;
        this._x();
        if (this._d)
            this._dl._c();
        if (L == 1)
            a[0]._c();
        else if (L == 0)
            return;
        else {
            var b = cp(a);
            for (var i = 0; i < L; i++)
                b[i]._c();
        }
    };
    Stream.prototype._x = function () {
        if (this._ils.length === 0)
            return;
        if (this._prod !== NO)
            this._prod._stop();
        this._err = NO;
        this._ils = [];
    };
    Stream.prototype._stopNow = function () {
        // WARNING: code that calls this method should
        // first check if this._prod is valid (not `NO`)
        this._prod._stop();
        this._err = NO;
        this._stopID = NO;
    };
    Stream.prototype._add = function (il) {
        var ta = this._target;
        if (ta !== NO)
            return ta._add(il);
        var a = this._ils;
        a.push(il);
        if (a.length > 1)
            return;
        if (this._stopID !== NO) {
            clearTimeout(this._stopID);
            this._stopID = NO;
        }
        else {
            var p = this._prod;
            if (p !== NO)
                p._start(this);
        }
    };
    Stream.prototype._remove = function (il) {
        var _this = this;
        var ta = this._target;
        if (ta !== NO)
            return ta._remove(il);
        var a = this._ils;
        var i = a.indexOf(il);
        if (i > -1) {
            a.splice(i, 1);
            if (this._prod !== NO && a.length <= 0) {
                this._err = NO;
                this._stopID = setTimeout(function () { return _this._stopNow(); });
            }
            else if (a.length === 1) {
                this._pruneCycles();
            }
        }
    };
    // If all paths stemming from `this` stream eventually end at `this`
    // stream, then we remove the single listener of `this` stream, to
    // force it to end its execution and dispose resources. This method
    // assumes as a precondition that this._ils has just one listener.
    Stream.prototype._pruneCycles = function () {
        if (this._hasNoSinks(this, []))
            this._remove(this._ils[0]);
    };
    // Checks whether *there is no* path starting from `x` that leads to an end
    // listener (sink) in the stream graph, following edges A->B where B is a
    // listener of A. This means these paths constitute a cycle somehow. Is given
    // a trace of all visited nodes so far.
    Stream.prototype._hasNoSinks = function (x, trace) {
        if (trace.indexOf(x) !== -1)
            return true;
        else if (x.out === this)
            return true;
        else if (x.out && x.out !== NO)
            return this._hasNoSinks(x.out, trace.concat(x));
        else if (x._ils) {
            for (var i = 0, N = x._ils.length; i < N; i++)
                if (!this._hasNoSinks(x._ils[i], trace.concat(x)))
                    return false;
            return true;
        }
        else
            return false;
    };
    Stream.prototype.ctor = function () {
        return this instanceof MemoryStream ? MemoryStream : Stream;
    };
    /**
     * Adds a Listener to the Stream.
     *
     * @param {Listener} listener
     */
    Stream.prototype.addListener = function (listener) {
        listener._n = listener.next || noop;
        listener._e = listener.error || noop;
        listener._c = listener.complete || noop;
        this._add(listener);
    };
    /**
     * Removes a Listener from the Stream, assuming the Listener was added to it.
     *
     * @param {Listener<T>} listener
     */
    Stream.prototype.removeListener = function (listener) {
        this._remove(listener);
    };
    /**
     * Adds a Listener to the Stream returning a Subscription to remove that
     * listener.
     *
     * @param {Listener} listener
     * @returns {Subscription}
     */
    Stream.prototype.subscribe = function (listener) {
        this.addListener(listener);
        return new StreamSub(this, listener);
    };
    /**
     * Add interop between most.js and RxJS 5
     *
     * @returns {Stream}
     */
    Stream.prototype[symbol_observable_1.default] = function () {
        return this;
    };
    /**
     * Creates a new Stream given a Producer.
     *
     * @factory true
     * @param {Producer} producer An optional Producer that dictates how to
     * start, generate events, and stop the Stream.
     * @return {Stream}
     */
    Stream.create = function (producer) {
        if (producer) {
            if (typeof producer.start !== 'function'
                || typeof producer.stop !== 'function')
                throw new Error('producer requires both start and stop functions');
            internalizeProducer(producer); // mutates the input
        }
        return new Stream(producer);
    };
    /**
     * Creates a new MemoryStream given a Producer.
     *
     * @factory true
     * @param {Producer} producer An optional Producer that dictates how to
     * start, generate events, and stop the Stream.
     * @return {MemoryStream}
     */
    Stream.createWithMemory = function (producer) {
        if (producer)
            internalizeProducer(producer); // mutates the input
        return new MemoryStream(producer);
    };
    /**
     * Creates a Stream that does nothing when started. It never emits any event.
     *
     * Marble diagram:
     *
     * ```text
     *          never
     * -----------------------
     * ```
     *
     * @factory true
     * @return {Stream}
     */
    Stream.never = function () {
        return new Stream({ _start: noop, _stop: noop });
    };
    /**
     * Creates a Stream that immediately emits the "complete" notification when
     * started, and that's it.
     *
     * Marble diagram:
     *
     * ```text
     * empty
     * -|
     * ```
     *
     * @factory true
     * @return {Stream}
     */
    Stream.empty = function () {
        return new Stream({
            _start: function (il) { il._c(); },
            _stop: noop,
        });
    };
    /**
     * Creates a Stream that immediately emits an "error" notification with the
     * value you passed as the `error` argument when the stream starts, and that's
     * it.
     *
     * Marble diagram:
     *
     * ```text
     * throw(X)
     * -X
     * ```
     *
     * @factory true
     * @param error The error event to emit on the created stream.
     * @return {Stream}
     */
    Stream.throw = function (error) {
        return new Stream({
            _start: function (il) { il._e(error); },
            _stop: noop,
        });
    };
    /**
     * Creates a stream from an Array, Promise, or an Observable.
     *
     * @factory true
     * @param {Array|Promise|Observable} input The input to make a stream from.
     * @return {Stream}
     */
    Stream.from = function (input) {
        if (typeof input[symbol_observable_1.default] === 'function')
            return Stream.fromObservable(input);
        else if (typeof input.then === 'function')
            return Stream.fromPromise(input);
        else if (Array.isArray(input))
            return Stream.fromArray(input);
        throw new TypeError("Type of input to from() must be an Array, Promise, or Observable");
    };
    /**
     * Creates a Stream that immediately emits the arguments that you give to
     * *of*, then completes.
     *
     * Marble diagram:
     *
     * ```text
     * of(1,2,3)
     * 123|
     * ```
     *
     * @factory true
     * @param a The first value you want to emit as an event on the stream.
     * @param b The second value you want to emit as an event on the stream. One
     * or more of these values may be given as arguments.
     * @return {Stream}
     */
    Stream.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return Stream.fromArray(items);
    };
    /**
     * Converts an array to a stream. The returned stream will emit synchronously
     * all the items in the array, and then complete.
     *
     * Marble diagram:
     *
     * ```text
     * fromArray([1,2,3])
     * 123|
     * ```
     *
     * @factory true
     * @param {Array} array The array to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromArray = function (array) {
        return new Stream(new FromArray(array));
    };
    /**
     * Converts a promise to a stream. The returned stream will emit the resolved
     * value of the promise, and then complete. However, if the promise is
     * rejected, the stream will emit the corresponding error.
     *
     * Marble diagram:
     *
     * ```text
     * fromPromise( ----42 )
     * -----------------42|
     * ```
     *
     * @factory true
     * @param {Promise} promise The promise to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromPromise = function (promise) {
        return new Stream(new FromPromise(promise));
    };
    /**
     * Converts an Observable into a Stream.
     *
     * @factory true
     * @param {any} observable The observable to be converted as a stream.
     * @return {Stream}
     */
    Stream.fromObservable = function (obs) {
        if (obs.endWhen)
            return obs;
        return new Stream(new FromObservable(obs));
    };
    /**
     * Creates a stream that periodically emits incremental numbers, every
     * `period` milliseconds.
     *
     * Marble diagram:
     *
     * ```text
     *     periodic(1000)
     * ---0---1---2---3---4---...
     * ```
     *
     * @factory true
     * @param {number} period The interval in milliseconds to use as a rate of
     * emission.
     * @return {Stream}
     */
    Stream.periodic = function (period) {
        return new Stream(new Periodic(period));
    };
    Stream.prototype._map = function (project) {
        var p = this._prod;
        var ctor = this.ctor();
        if (p instanceof Filter)
            return new ctor(new FilterMapFusion(p.f, project, p.ins));
        return new ctor(new MapOp(project, this));
    };
    /**
     * Transforms each event from the input Stream through a `project` function,
     * to get a Stream that emits those transformed events.
     *
     * Marble diagram:
     *
     * ```text
     * --1---3--5-----7------
     *    map(i => i * 10)
     * --10--30-50----70-----
     * ```
     *
     * @param {Function} project A function of type `(t: T) => U` that takes event
     * `t` of type `T` from the input Stream and produces an event of type `U`, to
     * be emitted on the output Stream.
     * @return {Stream}
     */
    Stream.prototype.map = function (project) {
        return this._map(project);
    };
    /**
     * It's like `map`, but transforms each input event to always the same
     * constant value on the output Stream.
     *
     * Marble diagram:
     *
     * ```text
     * --1---3--5-----7-----
     *       mapTo(10)
     * --10--10-10----10----
     * ```
     *
     * @param projectedValue A value to emit on the output Stream whenever the
     * input Stream emits any value.
     * @return {Stream}
     */
    Stream.prototype.mapTo = function (projectedValue) {
        var s = this.map(function () { return projectedValue; });
        var op = s._prod;
        op.type = op.type.replace('map', 'mapTo');
        return s;
    };
    /**
     * Only allows events that pass the test given by the `passes` argument.
     *
     * Each event from the input stream is given to the `passes` function. If the
     * function returns `true`, the event is forwarded to the output stream,
     * otherwise it is ignored and not forwarded.
     *
     * Marble diagram:
     *
     * ```text
     * --1---2--3-----4-----5---6--7-8--
     *     filter(i => i % 2 === 0)
     * ------2--------4---------6----8--
     * ```
     *
     * @param {Function} passes A function of type `(t: T) +> boolean` that takes
     * an event from the input stream and checks if it passes, by returning a
     * boolean.
     * @return {Stream}
     */
    Stream.prototype.filter = function (passes) {
        var p = this._prod;
        if (p instanceof Filter)
            return new Stream(new Filter(and(p.f, passes), p.ins));
        return new Stream(new Filter(passes, this));
    };
    /**
     * Lets the first `amount` many events from the input stream pass to the
     * output stream, then makes the output stream complete.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c----d---e--
     *    take(3)
     * --a---b--c|
     * ```
     *
     * @param {number} amount How many events to allow from the input stream
     * before completing the output stream.
     * @return {Stream}
     */
    Stream.prototype.take = function (amount) {
        return new (this.ctor())(new Take(amount, this));
    };
    /**
     * Ignores the first `amount` many events from the input stream, and then
     * after that starts forwarding events from the input stream to the output
     * stream.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c----d---e--
     *       drop(3)
     * --------------d---e--
     * ```
     *
     * @param {number} amount How many events to ignore from the input stream
     * before forwarding all events from the input stream to the output stream.
     * @return {Stream}
     */
    Stream.prototype.drop = function (amount) {
        return new Stream(new Drop(amount, this));
    };
    /**
     * When the input stream completes, the output stream will emit the last event
     * emitted by the input stream, and then will also complete.
     *
     * Marble diagram:
     *
     * ```text
     * --a---b--c--d----|
     *       last()
     * -----------------d|
     * ```
     *
     * @return {Stream}
     */
    Stream.prototype.last = function () {
        return new Stream(new Last(this));
    };
    /**
     * Prepends the given `initial` value to the sequence of events emitted by the
     * input stream. The returned stream is a MemoryStream, which means it is
     * already `remember()`'d.
     *
     * Marble diagram:
     *
     * ```text
     * ---1---2-----3---
     *   startWith(0)
     * 0--1---2-----3---
     * ```
     *
     * @param initial The value or event to prepend.
     * @return {MemoryStream}
     */
    Stream.prototype.startWith = function (initial) {
        return new MemoryStream(new StartWith(this, initial));
    };
    /**
     * Uses another stream to determine when to complete the current stream.
     *
     * When the given `other` stream emits an event or completes, the output
     * stream will complete. Before that happens, the output stream will behaves
     * like the input stream.
     *
     * Marble diagram:
     *
     * ```text
     * ---1---2-----3--4----5----6---
     *   endWhen( --------a--b--| )
     * ---1---2-----3--4--|
     * ```
     *
     * @param other Some other stream that is used to know when should the output
     * stream of this operator complete.
     * @return {Stream}
     */
    Stream.prototype.endWhen = function (other) {
        return new (this.ctor())(new EndWhen(other, this));
    };
    /**
     * "Folds" the stream onto itself.
     *
     * Combines events from the past throughout
     * the entire execution of the input stream, allowing you to accumulate them
     * together. It's essentially like `Array.prototype.reduce`. The returned
     * stream is a MemoryStream, which means it is already `remember()`'d.
     *
     * The output stream starts by emitting the `seed` which you give as argument.
     * Then, when an event happens on the input stream, it is combined with that
     * seed value through the `accumulate` function, and the output value is
     * emitted on the output stream. `fold` remembers that output value as `acc`
     * ("accumulator"), and then when a new input event `t` happens, `acc` will be
     * combined with that to produce the new `acc` and so forth.
     *
     * Marble diagram:
     *
     * ```text
     * ------1-----1--2----1----1------
     *   fold((acc, x) => acc + x, 3)
     * 3-----4-----5--7----8----9------
     * ```
     *
     * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that
     * takes the previous accumulated value `acc` and the incoming event from the
     * input stream and produces the new accumulated value.
     * @param seed The initial accumulated value, of type `R`.
     * @return {MemoryStream}
     */
    Stream.prototype.fold = function (accumulate, seed) {
        return new MemoryStream(new Fold(accumulate, seed, this));
    };
    /**
     * Replaces an error with another stream.
     *
     * When (and if) an error happens on the input stream, instead of forwarding
     * that error to the output stream, *replaceError* will call the `replace`
     * function which returns the stream that the output stream will replicate.
     * And, in case that new stream also emits an error, `replace` will be called
     * again to get another stream to start replicating.
     *
     * Marble diagram:
     *
     * ```text
     * --1---2-----3--4-----X
     *   replaceError( () => --10--| )
     * --1---2-----3--4--------10--|
     * ```
     *
     * @param {Function} replace A function of type `(err) => Stream` that takes
     * the error that occurred on the input stream or on the previous replacement
     * stream and returns a new stream. The output stream will behave like the
     * stream that this function returns.
     * @return {Stream}
     */
    Stream.prototype.replaceError = function (replace) {
        return new (this.ctor())(new ReplaceError(replace, this));
    };
    /**
     * Flattens a "stream of streams", handling only one nested stream at a time
     * (no concurrency).
     *
     * If the input stream is a stream that emits streams, then this operator will
     * return an output stream which is a flat stream: emits regular events. The
     * flattening happens without concurrency. It works like this: when the input
     * stream emits a nested stream, *flatten* will start imitating that nested
     * one. However, as soon as the next nested stream is emitted on the input
     * stream, *flatten* will forget the previous nested one it was imitating, and
     * will start imitating the new nested one.
     *
     * Marble diagram:
     *
     * ```text
     * --+--------+---------------
     *   \        \
     *    \       ----1----2---3--
     *    --a--b----c----d--------
     *           flatten
     * -----a--b------1----2---3--
     * ```
     *
     * @return {Stream}
     */
    Stream.prototype.flatten = function () {
        var p = this._prod;
        return new Stream(p instanceof MapOp && !(p instanceof FilterMapFusion) ?
            new MapFlatten(p) :
            new Flatten(this));
    };
    /**
     * Passes the input stream to a custom operator, to produce an output stream.
     *
     * *compose* is a handy way of using an existing function in a chained style.
     * Instead of writing `outStream = f(inStream)` you can write
     * `outStream = inStream.compose(f)`.
     *
     * @param {function} operator A function that takes a stream as input and
     * returns a stream as well.
     * @return {Stream}
     */
    Stream.prototype.compose = function (operator) {
        return operator(this);
    };
    /**
     * Returns an output stream that behaves like the input stream, but also
     * remembers the most recent event that happens on the input stream, so that a
     * newly added listener will immediately receive that memorised event.
     *
     * @return {MemoryStream}
     */
    Stream.prototype.remember = function () {
        return new MemoryStream(new Remember(this));
    };
    /**
     * Returns an output stream that identically behaves like the input stream,
     * but also runs a `spy` function fo each event, to help you debug your app.
     *
     * *debug* takes a `spy` function as argument, and runs that for each event
     * happening on the input stream. If you don't provide the `spy` argument,
     * then *debug* will just `console.log` each event. This helps you to
     * understand the flow of events through some operator chain.
     *
     * Please note that if the output stream has no listeners, then it will not
     * start, which means `spy` will never run because no actual event happens in
     * that case.
     *
     * Marble diagram:
     *
     * ```text
     * --1----2-----3-----4--
     *         debug
     * --1----2-----3-----4--
     * ```
     *
     * @param {function} labelOrSpy A string to use as the label when printing
     * debug information on the console, or a 'spy' function that takes an event
     * as argument, and does not need to return anything.
     * @return {Stream}
     */
    Stream.prototype.debug = function (labelOrSpy) {
        return new (this.ctor())(new Debug(this, labelOrSpy));
    };
    /**
     * *imitate* changes this current Stream to emit the same events that the
     * `other` given Stream does. This method returns nothing.
     *
     * This method exists to allow one thing: **circular dependency of streams**.
     * For instance, let's imagine that for some reason you need to create a
     * circular dependency where stream `first$` depends on stream `second$`
     * which in turn depends on `first$`:
     *
     * <!-- skip-example -->
     * ```js
     * import delay from 'xstream/extra/delay'
     *
     * var first$ = second$.map(x => x * 10).take(3);
     * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));
     * ```
     *
     * However, that is invalid JavaScript, because `second$` is undefined
     * on the first line. This is how *imitate* can help solve it:
     *
     * ```js
     * import delay from 'xstream/extra/delay'
     *
     * var secondProxy$ = xs.create();
     * var first$ = secondProxy$.map(x => x * 10).take(3);
     * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));
     * secondProxy$.imitate(second$);
     * ```
     *
     * We create `secondProxy$` before the others, so it can be used in the
     * declaration of `first$`. Then, after both `first$` and `second$` are
     * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell
     * that they are "the same". `imitate` will not trigger the start of any
     * stream, it just binds `secondProxy$` and `second$` together.
     *
     * The following is an example where `imitate()` is important in Cycle.js
     * applications. A parent component contains some child components. A child
     * has an action stream which is given to the parent to define its state:
     *
     * <!-- skip-example -->
     * ```js
     * const childActionProxy$ = xs.create();
     * const parent = Parent({...sources, childAction$: childActionProxy$});
     * const childAction$ = parent.state$.map(s => s.child.action$).flatten();
     * childActionProxy$.imitate(childAction$);
     * ```
     *
     * Note, though, that **`imitate()` does not support MemoryStreams**. If we
     * would attempt to imitate a MemoryStream in a circular dependency, we would
     * either get a race condition (where the symptom would be "nothing happens")
     * or an infinite cyclic emission of values. It's useful to think about
     * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to
     * define a spreadsheet cell `A1` with a formula that depends on `B1` and
     * cell `B1` defined with a formula that depends on `A1`.
     *
     * If you find yourself wanting to use `imitate()` with a
     * MemoryStream, you should rework your code around `imitate()` to use a
     * Stream instead. Look for the stream in the circular dependency that
     * represents an event stream, and that would be a candidate for creating a
     * proxy Stream which then imitates the target Stream.
     *
     * @param {Stream} target The other stream to imitate on the current one. Must
     * not be a MemoryStream.
     */
    Stream.prototype.imitate = function (target) {
        if (target instanceof MemoryStream)
            throw new Error('A MemoryStream was given to imitate(), but it only ' +
                'supports a Stream. Read more about this restriction here: ' +
                'https://github.com/staltz/xstream#faq');
        this._target = target;
        for (var ils = this._ils, N = ils.length, i = 0; i < N; i++)
            target._add(ils[i]);
        this._ils = [];
    };
    /**
     * Forces the Stream to emit the given value to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     *
     * @param value The "next" value you want to broadcast to all listeners of
     * this Stream.
     */
    Stream.prototype.shamefullySendNext = function (value) {
        this._n(value);
    };
    /**
     * Forces the Stream to emit the given error to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     *
     * @param {any} error The error you want to broadcast to all the listeners of
     * this Stream.
     */
    Stream.prototype.shamefullySendError = function (error) {
        this._e(error);
    };
    /**
     * Forces the Stream to emit the "completed" event to its listeners.
     *
     * As the name indicates, if you use this, you are most likely doing something
     * The Wrong Way. Please try to understand the reactive way before using this
     * method. Use it only when you know what you are doing.
     */
    Stream.prototype.shamefullySendComplete = function () {
        this._c();
    };
    /**
     * Adds a "debug" listener to the stream. There can only be one debug
     * listener, that's why this is 'setDebugListener'. To remove the debug
     * listener, just call setDebugListener(null).
     *
     * A debug listener is like any other listener. The only difference is that a
     * debug listener is "stealthy": its presence/absence does not trigger the
     * start/stop of the stream (or the producer inside the stream). This is
     * useful so you can inspect what is going on without changing the behavior
     * of the program. If you have an idle stream and you add a normal listener to
     * it, the stream will start executing. But if you set a debug listener on an
     * idle stream, it won't start executing (not until the first normal listener
     * is added).
     *
     * As the name indicates, we don't recommend using this method to build app
     * logic. In fact, in most cases the debug operator works just fine. Only use
     * this one if you know what you're doing.
     *
     * @param {Listener<T>} listener
     */
    Stream.prototype.setDebugListener = function (listener) {
        if (!listener) {
            this._d = false;
            this._dl = NO;
        }
        else {
            this._d = true;
            listener._n = listener.next || noop;
            listener._e = listener.error || noop;
            listener._c = listener.complete || noop;
            this._dl = listener;
        }
    };
    return Stream;
}());
/**
 * Blends multiple streams together, emitting events from all of them
 * concurrently.
 *
 * *merge* takes multiple streams as arguments, and creates a stream that
 * behaves like each of the argument streams, in parallel.
 *
 * Marble diagram:
 *
 * ```text
 * --1----2-----3--------4---
 * ----a-----b----c---d------
 *            merge
 * --1-a--2--b--3-c---d--4---
 * ```
 *
 * @factory true
 * @param {Stream} stream1 A stream to merge together with other streams.
 * @param {Stream} stream2 A stream to merge together with other streams. Two
 * or more streams may be given as arguments.
 * @return {Stream}
 */
Stream.merge = function merge() {
    var streams = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        streams[_i] = arguments[_i];
    }
    return new Stream(new Merge(streams));
};
/**
 * Combines multiple input streams together to return a stream whose events
 * are arrays that collect the latest events from each input stream.
 *
 * *combine* internally remembers the most recent event from each of the input
 * streams. When any of the input streams emits an event, that event together
 * with all the other saved events are combined into an array. That array will
 * be emitted on the output stream. It's essentially a way of joining together
 * the events from multiple streams.
 *
 * Marble diagram:
 *
 * ```text
 * --1----2-----3--------4---
 * ----a-----b-----c--d------
 *          combine
 * ----1a-2a-2b-3b-3c-3d-4d--
 * ```
 *
 * Note: to minimize garbage collection, *combine* uses the same array
 * instance for each emission.  If you need to compare emissions over time,
 * cache the values with `map` first:
 *
 * ```js
 * import pairwise from 'xstream/extra/pairwise'
 *
 * const stream1 = xs.of(1);
 * const stream2 = xs.of(2);
 *
 * xs.combine(stream1, stream2).map(
 *   combinedEmissions => ([ ...combinedEmissions ])
 * ).compose(pairwise)
 * ```
 *
 * @factory true
 * @param {Stream} stream1 A stream to combine together with other streams.
 * @param {Stream} stream2 A stream to combine together with other streams.
 * Multiple streams, not just two, may be given as arguments.
 * @return {Stream}
 */
Stream.combine = function combine() {
    var streams = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        streams[_i] = arguments[_i];
    }
    return new Stream(new Combine(streams));
};
exports.Stream = Stream;
var MemoryStream = (function (_super) {
    __extends(MemoryStream, _super);
    function MemoryStream(producer) {
        var _this = _super.call(this, producer) || this;
        _this._has = false;
        return _this;
    }
    MemoryStream.prototype._n = function (x) {
        this._v = x;
        this._has = true;
        _super.prototype._n.call(this, x);
    };
    MemoryStream.prototype._add = function (il) {
        var ta = this._target;
        if (ta !== NO)
            return ta._add(il);
        var a = this._ils;
        a.push(il);
        if (a.length > 1) {
            if (this._has)
                il._n(this._v);
            return;
        }
        if (this._stopID !== NO) {
            if (this._has)
                il._n(this._v);
            clearTimeout(this._stopID);
            this._stopID = NO;
        }
        else if (this._has)
            il._n(this._v);
        else {
            var p = this._prod;
            if (p !== NO)
                p._start(this);
        }
    };
    MemoryStream.prototype._stopNow = function () {
        this._has = false;
        _super.prototype._stopNow.call(this);
    };
    MemoryStream.prototype._x = function () {
        this._has = false;
        _super.prototype._x.call(this);
    };
    MemoryStream.prototype.map = function (project) {
        return this._map(project);
    };
    MemoryStream.prototype.mapTo = function (projectedValue) {
        return _super.prototype.mapTo.call(this, projectedValue);
    };
    MemoryStream.prototype.take = function (amount) {
        return _super.prototype.take.call(this, amount);
    };
    MemoryStream.prototype.endWhen = function (other) {
        return _super.prototype.endWhen.call(this, other);
    };
    MemoryStream.prototype.replaceError = function (replace) {
        return _super.prototype.replaceError.call(this, replace);
    };
    MemoryStream.prototype.remember = function () {
        return this;
    };
    MemoryStream.prototype.debug = function (labelOrSpy) {
        return _super.prototype.debug.call(this, labelOrSpy);
    };
    return MemoryStream;
}(Stream));
exports.MemoryStream = MemoryStream;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Stream;
//# sourceMappingURL=index.js.map

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var thunk_1 = __webpack_require__(55);
exports.thunk = thunk_1.thunk;
var MainDOMSource_1 = __webpack_require__(39);
exports.MainDOMSource = MainDOMSource_1.MainDOMSource;
var HTMLSource_1 = __webpack_require__(38);
exports.HTMLSource = HTMLSource_1.HTMLSource;
/**
 * A factory for the DOM driver function.
 *
 * Takes a `container` to define the target on the existing DOM which this
 * driver will operate on, and an `options` object as the second argument. The
 * input to this driver is a stream of virtual DOM objects, or in other words,
 * Snabbdom "VNode" objects. The output of this driver is a "DOMSource": a
 * collection of Observables queried with the methods `select()` and `events()`.
 *
 * `DOMSource.select(selector)` returns a new DOMSource with scope restricted to
 * the element(s) that matches the CSS `selector` given.
 *
 * `DOMSource.events(eventType, options)` returns a stream of events of
 * `eventType` happening on the elements that match the current DOMSource. The
 * event object contains the `ownerTarget` property that behaves exactly like
 * `currentTarget`. The reason for this is that some browsers doesn't allow
 * `currentTarget` property to be mutated, hence a new property is created. The
 * returned stream is an *xstream* Stream if you use `@cycle/xstream-run` to run
 * your app with this driver, or it is an RxJS Observable if you use
 * `@cycle/rxjs-run`, and so forth. The `options` parameter can have the
 * property `useCapture`, which is by default `false`, except it is `true` for
 * event types that do not bubble. Read more here
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 * about the `useCapture` and its purpose.
 *
 * `DOMSource.elements()` returns a stream of the DOM element(s) matched by the
 * selectors in the DOMSource. Also, `DOMSource.select(':root').elements()`
 * returns a stream of DOM element corresponding to the root (or container) of
 * the app on the DOM.
 *
 * @param {(String|HTMLElement)} container the DOM selector for the element
 * (or the element itself) to contain the rendering of the VTrees.
 * @param {DOMDriverOptions} options an object with two optional properties:
 *
 *   - `modules: array` overrides `@cycle/dom`'s default Snabbdom modules as
 *     as defined in [`src/modules.ts`](./src/modules.ts).
 *   - `transposition: boolean` enables/disables transposition of inner streams
 *     in the virtual DOM tree.
 * @return {Function} the DOM driver function. The function expects a stream of
 * VNode as input, and outputs the DOMSource object.
 * @function makeDOMDriver
 */
var makeDOMDriver_1 = __webpack_require__(70);
exports.makeDOMDriver = makeDOMDriver_1.makeDOMDriver;
/**
 * A factory for the HTML driver function.
 *
 * Takes an `effect` callback function and an `options` object as arguments. The
 * input to this driver is a stream of virtual DOM objects, or in other words,
 * Snabbdom "VNode" objects. The output of this driver is a "DOMSource": a
 * collection of Observables queried with the methods `select()` and `events()`.
 *
 * The HTML Driver is supplementary to the DOM Driver. Instead of producing
 * elements on the DOM, it generates HTML as strings and does a side effect on
 * those HTML strings. That side effect is described by the `effect` callback
 * function. So, if you want to use the HTML Driver on the server-side to render
 * your application as HTML and send as a response (which is the typical use
 * case for the HTML Driver), you need to pass something like the
 * `html => response.send(html)` function as the `effect` argument. This way,
 * the driver knows what side effect to cause based on the HTML string it just
 * rendered.
 *
 * The HTML driver is useful only for that side effect in the `effect` callback.
 * It can be considered a sink-only driver. However, in order to serve as a
 * transparent replacement to the DOM Driver when rendering from the server, the
 * HTML driver returns a source object that behaves just like the DOMSource.
 * This helps reuse the same application that is written for the DOM Driver.
 * This fake DOMSource returns empty streams when you query it, because there
 * are no user events on the server.
 *
 * `DOMSource.select(selector)` returns a new DOMSource with scope restricted to
 * the element(s) that matches the CSS `selector` given.
 *
 * `DOMSource.events(eventType, options)` returns an empty stream. The returned
 * stream is an *xstream* Stream if you use `@cycle/xstream-run` to run your app
 * with this driver, or it is an RxJS Observable if you use `@cycle/rxjs-run`,
 * and so forth.
 *
 * `DOMSource.elements()` returns the stream of HTML string rendered from your
 * sink virtual DOM stream.
 *
 * @param {Function} effect a callback function that takes a string of rendered
 * HTML as input and should run a side effect, returning nothing.
 * @param {HTMLDriverOptions} options an object with one optional property:
 * `transposition: boolean` enables/disables transposition of inner streams in
 * the virtual DOM tree.
 * @return {Function} the HTML driver function. The function expects a stream of
 * VNode as input, and outputs the DOMSource object.
 * @function makeHTMLDriver
 */
var makeHTMLDriver_1 = __webpack_require__(71);
exports.makeHTMLDriver = makeHTMLDriver_1.makeHTMLDriver;
/**
 * A factory function to create mocked DOMSource objects, for testing purposes.
 *
 * Takes a `streamAdapter` and a `mockConfig` object as arguments, and returns
 * a DOMSource that can be given to any Cycle.js app that expects a DOMSource in
 * the sources, for testing.
 *
 * The `streamAdapter` parameter is a package such as `@cycle/xstream-adapter`,
 * `@cycle/rxjs-adapter`, etc. Import it as `import a from '@cycle/rx-adapter`,
 * then provide it to `mockDOMSource. This is important so the DOMSource created
 * knows which stream library should it use to export its streams when you call
 * `DOMSource.events()` for instance.
 *
 * The `mockConfig` parameter is an object specifying selectors, eventTypes and
 * their streams. Example:
 *
 * ```js
 * const domSource = mockDOMSource(RxAdapter, {
 *   '.foo': {
 *     'click': Rx.Observable.of({target: {}}),
 *     'mouseover': Rx.Observable.of({target: {}}),
 *   },
 *   '.bar': {
 *     'scroll': Rx.Observable.of({target: {}}),
 *     elements: Rx.Observable.of({tagName: 'div'}),
 *   }
 * });
 *
 * // Usage
 * const click$ = domSource.select('.foo').events('click');
 * const element$ = domSource.select('.bar').elements();
 * ```
 *
 * The mocked DOM Source supports isolation. It has the functions `isolateSink`
 * and `isolateSource` attached to it, and performs simple isolation using
 * classNames. *isolateSink* with scope `foo` will append the class `___foo` to
 * the stream of virtual DOM nodes, and *isolateSource* with scope `foo` will
 * perform a conventional `mockedDOMSource.select('.__foo')` call.
 *
 * @param {Object} mockConfig an object where keys are selector strings
 * and values are objects. Those nested objects have `eventType` strings as keys
 * and values are streams you created.
 * @return {Object} fake DOM source object, with an API containing `select()`
 * and `events()` and `elements()` which can be used just like the DOM Driver's
 * DOMSource.
 *
 * @function mockDOMSource
 */
var mockDOMSource_1 = __webpack_require__(72);
exports.mockDOMSource = mockDOMSource_1.mockDOMSource;
exports.MockedDOMSource = mockDOMSource_1.MockedDOMSource;
/**
 * The hyperscript function `h()` is a function to create virtual DOM objects,
 * also known as VNodes. Call
 *
 * ```js
 * h('div.myClass', {style: {color: 'red'}}, [])
 * ```
 *
 * to create a VNode that represents a `DIV` element with className `myClass`,
 * styled with red color, and no children because the `[]` array was passed. The
 * API is `h(tagOrSelector, optionalData, optionalChildrenOrText)`.
 *
 * However, usually you should use "hyperscript helpers", which are shortcut
 * functions based on hyperscript. There is one hyperscript helper function for
 * each DOM tagName, such as `h1()`, `h2()`, `div()`, `span()`, `label()`,
 * `input()`. For instance, the previous example could have been written
 * as:
 *
 * ```js
 * div('.myClass', {style: {color: 'red'}}, [])
 * ```
 *
 * There are also SVG helper functions, which apply the appropriate SVG
 * namespace to the resulting elements. `svg()` function creates the top-most
 * SVG element, and `svg.g`, `svg.polygon`, `svg.circle`, `svg.path` are for
 * SVG-specific child elements. Example:
 *
 * ```js
 * svg({width: 150, height: 150}, [
 *   svg.polygon({
 *     attrs: {
 *       class: 'triangle',
 *       points: '20 0 20 150 150 20'
 *     }
 *   })
 * ])
 * ```
 *
 * @function h
 */
var h_1 = __webpack_require__(18);
exports.h = h_1.h;
var hyperscript_helpers_1 = __webpack_require__(68);
exports.svg = hyperscript_helpers_1.default.svg;
exports.a = hyperscript_helpers_1.default.a;
exports.abbr = hyperscript_helpers_1.default.abbr;
exports.address = hyperscript_helpers_1.default.address;
exports.area = hyperscript_helpers_1.default.area;
exports.article = hyperscript_helpers_1.default.article;
exports.aside = hyperscript_helpers_1.default.aside;
exports.audio = hyperscript_helpers_1.default.audio;
exports.b = hyperscript_helpers_1.default.b;
exports.base = hyperscript_helpers_1.default.base;
exports.bdi = hyperscript_helpers_1.default.bdi;
exports.bdo = hyperscript_helpers_1.default.bdo;
exports.blockquote = hyperscript_helpers_1.default.blockquote;
exports.body = hyperscript_helpers_1.default.body;
exports.br = hyperscript_helpers_1.default.br;
exports.button = hyperscript_helpers_1.default.button;
exports.canvas = hyperscript_helpers_1.default.canvas;
exports.caption = hyperscript_helpers_1.default.caption;
exports.cite = hyperscript_helpers_1.default.cite;
exports.code = hyperscript_helpers_1.default.code;
exports.col = hyperscript_helpers_1.default.col;
exports.colgroup = hyperscript_helpers_1.default.colgroup;
exports.dd = hyperscript_helpers_1.default.dd;
exports.del = hyperscript_helpers_1.default.del;
exports.dfn = hyperscript_helpers_1.default.dfn;
exports.dir = hyperscript_helpers_1.default.dir;
exports.div = hyperscript_helpers_1.default.div;
exports.dl = hyperscript_helpers_1.default.dl;
exports.dt = hyperscript_helpers_1.default.dt;
exports.em = hyperscript_helpers_1.default.em;
exports.embed = hyperscript_helpers_1.default.embed;
exports.fieldset = hyperscript_helpers_1.default.fieldset;
exports.figcaption = hyperscript_helpers_1.default.figcaption;
exports.figure = hyperscript_helpers_1.default.figure;
exports.footer = hyperscript_helpers_1.default.footer;
exports.form = hyperscript_helpers_1.default.form;
exports.h1 = hyperscript_helpers_1.default.h1;
exports.h2 = hyperscript_helpers_1.default.h2;
exports.h3 = hyperscript_helpers_1.default.h3;
exports.h4 = hyperscript_helpers_1.default.h4;
exports.h5 = hyperscript_helpers_1.default.h5;
exports.h6 = hyperscript_helpers_1.default.h6;
exports.head = hyperscript_helpers_1.default.head;
exports.header = hyperscript_helpers_1.default.header;
exports.hgroup = hyperscript_helpers_1.default.hgroup;
exports.hr = hyperscript_helpers_1.default.hr;
exports.html = hyperscript_helpers_1.default.html;
exports.i = hyperscript_helpers_1.default.i;
exports.iframe = hyperscript_helpers_1.default.iframe;
exports.img = hyperscript_helpers_1.default.img;
exports.input = hyperscript_helpers_1.default.input;
exports.ins = hyperscript_helpers_1.default.ins;
exports.kbd = hyperscript_helpers_1.default.kbd;
exports.keygen = hyperscript_helpers_1.default.keygen;
exports.label = hyperscript_helpers_1.default.label;
exports.legend = hyperscript_helpers_1.default.legend;
exports.li = hyperscript_helpers_1.default.li;
exports.link = hyperscript_helpers_1.default.link;
exports.main = hyperscript_helpers_1.default.main;
exports.map = hyperscript_helpers_1.default.map;
exports.mark = hyperscript_helpers_1.default.mark;
exports.menu = hyperscript_helpers_1.default.menu;
exports.meta = hyperscript_helpers_1.default.meta;
exports.nav = hyperscript_helpers_1.default.nav;
exports.noscript = hyperscript_helpers_1.default.noscript;
exports.object = hyperscript_helpers_1.default.object;
exports.ol = hyperscript_helpers_1.default.ol;
exports.optgroup = hyperscript_helpers_1.default.optgroup;
exports.option = hyperscript_helpers_1.default.option;
exports.p = hyperscript_helpers_1.default.p;
exports.param = hyperscript_helpers_1.default.param;
exports.pre = hyperscript_helpers_1.default.pre;
exports.progress = hyperscript_helpers_1.default.progress;
exports.q = hyperscript_helpers_1.default.q;
exports.rp = hyperscript_helpers_1.default.rp;
exports.rt = hyperscript_helpers_1.default.rt;
exports.ruby = hyperscript_helpers_1.default.ruby;
exports.s = hyperscript_helpers_1.default.s;
exports.samp = hyperscript_helpers_1.default.samp;
exports.script = hyperscript_helpers_1.default.script;
exports.section = hyperscript_helpers_1.default.section;
exports.select = hyperscript_helpers_1.default.select;
exports.small = hyperscript_helpers_1.default.small;
exports.source = hyperscript_helpers_1.default.source;
exports.span = hyperscript_helpers_1.default.span;
exports.strong = hyperscript_helpers_1.default.strong;
exports.style = hyperscript_helpers_1.default.style;
exports.sub = hyperscript_helpers_1.default.sub;
exports.sup = hyperscript_helpers_1.default.sup;
exports.table = hyperscript_helpers_1.default.table;
exports.tbody = hyperscript_helpers_1.default.tbody;
exports.td = hyperscript_helpers_1.default.td;
exports.textarea = hyperscript_helpers_1.default.textarea;
exports.tfoot = hyperscript_helpers_1.default.tfoot;
exports.th = hyperscript_helpers_1.default.th;
exports.thead = hyperscript_helpers_1.default.thead;
exports.title = hyperscript_helpers_1.default.title;
exports.tr = hyperscript_helpers_1.default.tr;
exports.u = hyperscript_helpers_1.default.u;
exports.ul = hyperscript_helpers_1.default.ul;
exports.video = hyperscript_helpers_1.default.video;
//# sourceMappingURL=index.js.map

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var counter = 0;
function getScope() {
    return "cs-ui" + ++counter;
}
exports.getScope = getScope;
function capitalize(string) {
    return string ? string.charAt(0).toUpperCase() + string.slice(1) : string;
}
exports.capitalize = capitalize;
function patchClassList(target, classes, classesToAdd) {
    var className = "";
    if (target.data) {
        var props = target.data.props ? target.data.props : { className: target.sel.split(".").join(" ") };
        var classList = props.className.split(" ");
        classList.forEach(function (item) {
            if (classes.indexOf(item) === -1) {
                className += item + " ";
            }
        });
    }
    className += classesToAdd;
    return Object.assign({}, target.data, {
        "props": {
            className: className
        }
    });
}
exports.patchClassList = patchClassList;
/**
 * Adds one VNode to another and handles updates for stream by replacing based on the identifier class.
 * @param  {VNode}  element    The element to be added.
 * @param  {VNode}  target     The target for the element
 * @param  {string} identifier The identifying class for the element to be added.
 * @return {Array} The target element's children with the element added.
 */
function addElement(element, target, identifier) {
    var c = [];
    if (target.children) {
        c = target.children;
    }
    if (target.text) {
        c.push(target.text);
    }
    for (var i = 0; i < c.length; i++) {
        var child = c[i];
        var cProps = child.data ? child.data.props ? child.data.props : {} : {};
        if (typeof (child) !== "undefined" && typeof (cProps.className) !== "undefined") {
            var classList = child.data.props.className.split(" ");
            for (var _i = 0, classList_1 = classList; _i < classList_1.length; _i++) {
                var s = classList_1[_i];
                if (s === identifier) {
                    c.splice(i, 1);
                }
            }
        }
    }
    c.push(element);
    return c;
}
exports.addElement = addElement;
/**
 * Converts a natural number between 1-16 to text.
 * @param  {number} num The number to convert.
 * @return {string}     That number as text.
 */
function numToText(num) {
    switch (num) {
        case 1: return " one";
        case 2: return " two";
        case 3: return " three";
        case 4: return " four";
        case 5: return " five";
        case 6: return " six";
        case 7: return " seven";
        case 8: return " eight";
        case 9: return " nine";
        case 10: return " ten";
        case 11: return " eleven";
        case 12: return " twelve";
        case 13: return " thirteen";
        case 14: return " fourteen";
        case 15: return " fifteen";
        case 16: return " sixteen";
        default: return " one";
    }
}
exports.numToText = numToText;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(56));


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(2);
__export(__webpack_require__(207));
var Size;
(function (Size) {
    Size[Size["Mini"] = 0] = "Mini";
    Size[Size["Tiny"] = 1] = "Tiny";
    Size[Size["Small"] = 2] = "Small";
    Size[Size["Medium"] = 3] = "Medium";
    Size[Size["Large"] = 4] = "Large";
    Size[Size["Big"] = 5] = "Big";
    Size[Size["Huge"] = 6] = "Huge";
    Size[Size["Massive"] = 7] = "Massive";
    Size[Size["Fluid"] = 8] = "Fluid";
})(Size = exports.Size || (exports.Size = {}));
(function (Size) {
    function ToEnum(sizeOrString) {
        return typeof (sizeOrString) === "number"
            ? sizeOrString
            : Size[utils_1.capitalize(sizeOrString)];
    }
    Size.ToEnum = ToEnum;
    function ToClassname(size) {
        size = ToEnum(size);
        switch (size) {
            case Size.Mini: return " mini";
            case Size.Tiny: return " tiny";
            case Size.Small: return " small";
            case Size.Medium: return " medium";
            case Size.Large: return " large";
            case Size.Big: return " big";
            case Size.Huge: return " huge";
            case Size.Massive: return " massive";
            case Size.Fluid: return " fluid";
            default: return "";
        }
    }
    Size.ToClassname = ToClassname;
})(Size = exports.Size || (exports.Size = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    VerticalAlignment[VerticalAlignment["Top"] = 0] = "Top";
    VerticalAlignment[VerticalAlignment["Middle"] = 1] = "Middle";
    VerticalAlignment[VerticalAlignment["Bottom"] = 2] = "Bottom";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
(function (VerticalAlignment) {
    function ToEnum(vAlignmentOrString) {
        return typeof (vAlignmentOrString) === "number"
            ? vAlignmentOrString
            : VerticalAlignment[utils_1.capitalize(vAlignmentOrString)];
    }
    VerticalAlignment.ToEnum = ToEnum;
    function ToClassname(alignment) {
        alignment = VerticalAlignment.ToEnum(alignment);
        switch (alignment) {
            case VerticalAlignment.Top: return " top aligned";
            case VerticalAlignment.Middle: return " middle aligned";
            case VerticalAlignment.Bottom: return " bottom aligned";
            default: return "";
        }
    }
    VerticalAlignment.ToClassname = ToClassname;
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var TextAlignment;
(function (TextAlignment) {
    TextAlignment[TextAlignment["Left"] = 0] = "Left";
    TextAlignment[TextAlignment["Right"] = 1] = "Right";
    TextAlignment[TextAlignment["Center"] = 2] = "Center";
    TextAlignment[TextAlignment["Justified"] = 3] = "Justified";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
(function (TextAlignment) {
    function ToEnum(tAlignmentOrString) {
        return typeof (tAlignmentOrString) === "number"
            ? tAlignmentOrString
            : TextAlignment[utils_1.capitalize(tAlignmentOrString)];
    }
    TextAlignment.ToEnum = ToEnum;
    function ToClassname(alignment) {
        alignment = TextAlignment.ToEnum(alignment);
        switch (alignment) {
            case TextAlignment.Left: return " left aligned";
            case TextAlignment.Right: return " right aligned";
            case TextAlignment.Center: return " center aligned";
            case TextAlignment.Justified: return " justified";
            default: return "";
        }
    }
    TextAlignment.ToClassname = ToClassname;
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var Float;
(function (Float) {
    Float[Float["None"] = 0] = "None";
    Float[Float["Right"] = 1] = "Right";
    Float[Float["Left"] = 2] = "Left";
})(Float = exports.Float || (exports.Float = {}));
(function (Float) {
    function ToEnum(floatOrString) {
        return typeof (floatOrString) === "number"
            ? floatOrString
            : Float[utils_1.capitalize(floatOrString)];
    }
    Float.ToEnum = ToEnum;
    function ToClassname(float) {
        float = Float.ToEnum(float);
        switch (float) {
            case Float.Left: return " left floated";
            case Float.Right: return " right floated";
            default: return "";
        }
    }
    Float.ToClassname = ToClassname;
})(Float = exports.Float || (exports.Float = {}));
var Attachment;
(function (Attachment) {
    Attachment[Attachment["None"] = 0] = "None";
    Attachment[Attachment["Top"] = 1] = "Top";
    Attachment[Attachment["Bottom"] = 2] = "Bottom";
})(Attachment = exports.Attachment || (exports.Attachment = {}));
(function (Attachment) {
    function ToEnum(attachmentOrString) {
        return typeof (attachmentOrString) === "number"
            ? attachmentOrString
            : Attachment[utils_1.capitalize(attachmentOrString)];
    }
    Attachment.ToEnum = ToEnum;
    function ToClassname(attachment) {
        attachment = Attachment.ToEnum(attachment);
        switch (attachment) {
            case Attachment.None: return " attached";
            case Attachment.Top: return " top attached";
            case Attachment.Bottom: return " bottom attached";
            default: return "";
        }
    }
    Attachment.ToClassname = ToClassname;
})(Attachment = exports.Attachment || (exports.Attachment = {}));
var Color;
(function (Color) {
    Color[Color["None"] = 0] = "None";
    Color[Color["Primary"] = 1] = "Primary";
    Color[Color["Secondary"] = 2] = "Secondary";
    Color[Color["Success"] = 3] = "Success";
    Color[Color["Info"] = 4] = "Info";
    Color[Color["Warning"] = 5] = "Warning";
    Color[Color["Error"] = 6] = "Error";
})(Color = exports.Color || (exports.Color = {}));
(function (Color) {
    function ToEnum(colorOrString) {
        return typeof (colorOrString) === "number"
            ? colorOrString
            : Color[utils_1.capitalize(colorOrString)];
    }
    Color.ToEnum = ToEnum;
    function ToClassname(color) {
        color = Color.ToEnum(color);
        switch (color) {
            case Color.Primary: return " primaryColored";
            case Color.Secondary: return " secondaryColored";
            case Color.Success: return " successColored";
            case Color.Info: return " infoColored";
            case Color.Warning: return " warningColored";
            case Color.Error: return " errorColored ";
            default: return "";
        }
    }
    Color.ToClassname = ToClassname;
})(Color = exports.Color || (exports.Color = {}));
var Animation;
(function (Animation) {
    Animation[Animation["Browse"] = 0] = "Browse";
    Animation[Animation["Drop"] = 1] = "Drop";
    Animation[Animation["Fade"] = 2] = "Fade";
    Animation[Animation["Flip"] = 3] = "Flip";
    Animation[Animation["Scale"] = 4] = "Scale";
    Animation[Animation["Fly"] = 5] = "Fly";
    Animation[Animation["Slide"] = 6] = "Slide";
    Animation[Animation["Swing"] = 7] = "Swing";
    Animation[Animation["Flash"] = 8] = "Flash";
    Animation[Animation["Shake"] = 9] = "Shake";
    Animation[Animation["Bounce"] = 10] = "Bounce";
    Animation[Animation["Tada"] = 11] = "Tada";
    Animation[Animation["Pulse"] = 12] = "Pulse";
    Animation[Animation["Jiggle"] = 13] = "Jiggle";
    Animation[Animation["None"] = 14] = "None";
})(Animation = exports.Animation || (exports.Animation = {}));
(function (Animation) {
    function ToEnum(animationOrString) {
        return typeof (animationOrString) === "number"
            ? animationOrString
            : Animation[utils_1.capitalize(animationOrString)];
    }
    Animation.ToEnum = ToEnum;
    function ToClassname(anim) {
        anim = Animation.ToEnum(anim);
        switch (anim) {
            case Animation.Browse: return " browse";
            case Animation.Drop: return " drop";
            case Animation.Fade: return " fade";
            case Animation.Flip: return " flip";
            case Animation.Scale: return " scale";
            case Animation.Fly: return " fly";
            case Animation.Slide: return " slide";
            case Animation.Swing: return " swing";
            case Animation.Flash: return " flash";
            case Animation.Shake: return " shake";
            case Animation.Bounce: return " bounce";
            case Animation.Tada: return " tada";
            case Animation.Pulse: return " pulse";
            case Animation.Jiggle: return " jiggle";
        }
    }
    Animation.ToClassname = ToClassname;
    var staticAnimations = [Animation.Flash, Animation.Shake,
        Animation.Bounce, Animation.Tada, Animation.Pulse, Animation.Jiggle];
    function isStatic(anim) {
        return staticAnimations.indexOf(Animation.ToEnum(anim)) !== -1;
    }
    Animation.isStatic = isStatic;
    var directionAnimations = [Animation.Browse, Animation.Fade,
        Animation.Fly, Animation.Slide, Animation.Swing];
    function isDirectional(anim) {
        return directionAnimations.indexOf(Animation.ToEnum(anim)) !== -1;
    }
    Animation.isDirectional = isDirectional;
})(Animation = exports.Animation || (exports.Animation = {}));
var Direction;
(function (Direction) {
    Direction[Direction["In"] = 0] = "In";
    Direction[Direction["Out"] = 1] = "Out";
    Direction[Direction["None"] = 2] = "None";
})(Direction = exports.Direction || (exports.Direction = {}));
(function (Direction) {
    function ToEnum(directionOrString) {
        return typeof (directionOrString) === "number"
            ? directionOrString
            : Direction[utils_1.capitalize(directionOrString)];
    }
    Direction.ToEnum = ToEnum;
    function ToClassname(direction) {
        direction = Direction.ToEnum(direction);
        return direction === Direction.In ? " in" : " out";
    }
    Direction.ToClassname = ToClassname;
})(Direction = exports.Direction || (exports.Direction = {}));
var AnimationDirection;
(function (AnimationDirection) {
    AnimationDirection[AnimationDirection["Up"] = 0] = "Up";
    AnimationDirection[AnimationDirection["Down"] = 1] = "Down";
    AnimationDirection[AnimationDirection["Left"] = 2] = "Left";
    AnimationDirection[AnimationDirection["Right"] = 3] = "Right";
})(AnimationDirection = exports.AnimationDirection || (exports.AnimationDirection = {}));
(function (AnimationDirection) {
    function ToEnum(animationDirectionOrString) {
        return typeof (animationDirectionOrString) === "number"
            ? animationDirectionOrString
            : AnimationDirection[utils_1.capitalize(animationDirectionOrString)];
    }
    AnimationDirection.ToEnum = ToEnum;
    function ToClassname(dir) {
        dir = AnimationDirection.ToEnum(dir);
        switch (dir) {
            case AnimationDirection.Up: return " up";
            case AnimationDirection.Down: return " down";
            case AnimationDirection.Left: return " left";
            case AnimationDirection.Right: return " right";
            default: return "";
        }
    }
    AnimationDirection.ToClassname = ToClassname;
})(AnimationDirection = exports.AnimationDirection || (exports.AnimationDirection = {}));


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
//Common render function for all basic Components
//Reformats the various syntaxes into StyleAndContentArgs 
function renderPropsAndContent(renderFn, isArgs, isB, arg1, arg2) {
    if (isArgs(arg1)) {
        return renderFn(arg1);
    }
    var args = {};
    if (isB(arg1)) {
        args.props = {};
        args.content = arg1;
    }
    else {
        args.props = arg1 || {};
        args.content = arg2;
    }
    return renderFn(args);
}
exports.renderPropsAndContent = renderPropsAndContent;
//Common run function for all basic Components
//Isolates the rendered component and exposes events
function runPropsAndContent(sources, render, selector, scope) {
    function main(sources) {
        sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
        sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of(undefined);
        var vTree$ = xstream_1.default.combine(sources.props$, sources.content$)
            .map(function (_a) {
            var props = _a[0], content = _a[1];
            return render({ props: props, content: content });
        });
        return {
            DOM: vTree$,
            events: function (type) { return sources.DOM.select(selector).events(type); },
        };
    }
    if (scope === null) {
        return main(sources);
    }
    var isolatedMain = isolate_1.default(main, scope);
    return isolatedMain(sources);
}
exports.runPropsAndContent = runPropsAndContent;
function makeIsArgs(isB) {
    return (function (obj) { return isArgs(obj, isB); });
}
exports.makeIsArgs = makeIsArgs;
function isArgs(obj, isB) {
    return obj && (typeof (obj.props) !== "undefined" ||
        (typeof (obj.content) !== "undefined" && (isB(obj.content) || isB(obj.content.main))));
}
exports.isArgs = isArgs;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(217));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(177));


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function checkIsolateArgs(dataflowComponent, scope) {
    if (typeof dataflowComponent !== "function") {
        throw new Error("First argument given to isolate() must be a " +
            "'dataflowComponent' function");
    }
    if (scope === null) {
        throw new Error("Second argument given to isolate() must not be null");
    }
}
function normalizeScopes(sources, scopes, randomScope) {
    var perChannel = {};
    Object.keys(sources).forEach(function (channel) {
        if (typeof scopes === 'string') {
            perChannel[channel] = scopes;
            return;
        }
        var candidate = scopes[channel];
        if (typeof candidate !== 'undefined') {
            perChannel[channel] = candidate;
            return;
        }
        var wildcard = scopes['*'];
        if (typeof wildcard !== 'undefined') {
            perChannel[channel] = wildcard;
            return;
        }
        perChannel[channel] = randomScope;
    });
    return perChannel;
}
function isolateAllSources(outerSources, scopes) {
    var innerSources = {};
    for (var channel in outerSources) {
        var outerSource = outerSources[channel];
        if (outerSources.hasOwnProperty(channel)
            && outerSource
            && typeof outerSource.isolateSource === 'function') {
            innerSources[channel] = outerSource.isolateSource(outerSource, scopes[channel]);
        }
        else if (outerSources.hasOwnProperty(channel)) {
            innerSources[channel] = outerSources[channel];
        }
    }
    return innerSources;
}
function isolateAllSinks(sources, innerSinks, scopes) {
    var outerSinks = {};
    for (var channel in innerSinks) {
        var source = sources[channel];
        var innerSink = innerSinks[channel];
        if (innerSinks.hasOwnProperty(channel)
            && source
            && typeof source.isolateSink === 'function') {
            outerSinks[channel] = source.isolateSink(innerSink, scopes[channel]);
        }
        else if (innerSinks.hasOwnProperty(channel)) {
            outerSinks[channel] = innerSinks[channel];
        }
    }
    return outerSinks;
}
var counter = 0;
function newScope() {
    return "cycle" + ++counter;
}
/**
 * Takes a `component` function and an optional `scope` string, and returns a
 * scoped version of the `component` function.
 *
 * When the scoped component is invoked, each source provided to the scoped
 * component is isolated to the given `scope` using
 * `source.isolateSource(source, scope)`, if possible. Likewise, the sinks
 * returned from the scoped component are isolated to the `scope` using
 * `source.isolateSink(sink, scope)`.
 *
 * If the `scope` is not provided, a new scope will be automatically created.
 * This means that while **`isolate(component, scope)` is pure**
 * (referentially transparent), **`isolate(component)` is impure**
 * (not referentially transparent). Two calls to `isolate(Foo, bar)` will
 * generate the same component. But, two calls to `isolate(Foo)` will generate
 * two distinct components.
 *
 * Note that both `isolateSource()` and `isolateSink()` are static members of
 * `source`. The reason for this is that drivers produce `source` while the
 * application produces `sink`, and it's the driver's responsibility to
 * implement `isolateSource()` and `isolateSink()`.
 *
 * @param {Function} component a function that takes `sources` as input
 * and outputs a collection of `sinks`.
 * @param {String} scope an optional string that is used to isolate each
 * `sources` and `sinks` when the returned scoped component is invoked.
 * @return {Function} the scoped component function that, as the original
 * `component` function, takes `sources` and returns `sinks`.
 * @function isolate
 */
function isolate(component, scope) {
    if (scope === void 0) { scope = newScope(); }
    checkIsolateArgs(component, scope);
    var randomScope = typeof scope === 'object' ? newScope() : '';
    var scopes = typeof scope === 'string' || typeof scope === 'object' ?
        scope :
        scope.toString();
    return function wrappedComponent(outerSources) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        var scopesPerChannel = normalizeScopes(outerSources, scopes, randomScope);
        var innerSources = isolateAllSources(outerSources, scopesPerChannel);
        var innerSinks = component.apply(void 0, [innerSources].concat(rest));
        var outerSinks = isolateAllSinks(outerSources, innerSinks, scopesPerChannel);
        return outerSinks;
    };
}
isolate.reset = function () { return counter = 0; };
exports.default = isolate;
//# sourceMappingURL=index.js.map

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	if (value == null) throw new TypeError("Cannot use null or undefined");
	return value;
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assign        = __webpack_require__(29)
  , normalizeOpts = __webpack_require__(98)
  , isCallable    = __webpack_require__(92)
  , contains      = __webpack_require__(45)

  , d;

d = module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if ((arguments.length < 2) || (typeof dscr !== 'string')) {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (dscr == null) {
		c = w = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
		w = contains.call(dscr, 'w');
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== 'string') {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (get == null) {
		get = undefined;
	} else if (!isCallable(get)) {
		options = get;
		get = set = undefined;
	} else if (set == null) {
		set = undefined;
	} else if (!isCallable(set)) {
		options = set;
		set = undefined;
	}
	if (dscr == null) {
		c = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (fn) {
	if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
	return fn;
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(2);
var Transition;
(function (Transition) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            var evt = function (type) { return sources.DOM.select(".transition").events(type); };
            var animationEnd$ = evt("animationend").map(function (evt) { return ({
                animation: enums_1.Animation.None,
                direction: evt.currentTarget.classList.contains("out") ? enums_1.Direction.Out : enums_1.Direction.In
            }); });
            var animation$ = xstream_1.default.merge(sources.transition$, animationEnd$);
            var vTree$ = xstream_1.default.combine(animation$, sources.target$).map(function (_a) {
                var transition = _a[0], target = _a[1];
                return render(target, transition);
            });
            return {
                DOM: vTree$,
                events: evt
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Transition.run = run;
    function render(target, args) {
        if (args === void 0) { args = { animation: enums_1.Animation.None }; }
        var c;
        var data = utils_1.patchClassList(target, ["hidden", "visible", "animating", "transition"], getClassName(args));
        if (target.children) {
            c = target.children;
        }
        if (target.text) {
            c = target.text;
        }
        return dom_1.h(target.sel, data, c);
    }
    Transition.render = render;
    function getClassName(transition) {
        if (transition.animation === enums_1.Animation.None) {
            return transition.direction === enums_1.Direction.Out ? "transition hidden" : "transition visible";
        }
        var animation = enums_1.Animation.ToClassname(transition.animation);
        if (enums_1.Animation.isStatic(transition.animation)) {
            return "visible animating transition " + animation;
        }
        var direction = enums_1.Direction.ToClassname(transition.direction);
        if (enums_1.Animation.isDirectional(transition.animation)) {
            animation += enums_1.AnimationDirection.ToClassname(transition.animationDirection);
        }
        return "visible transition animating " + direction + animation;
    }
})(Transition = exports.Transition || (exports.Transition = {}));


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var adaptStream = function (x) { return x; };
function setAdapt(f) {
    adaptStream = f;
}
exports.setAdapt = setAdapt;
function adapt(stream) {
    return adaptStream(stream);
}
exports.adapt = adapt;
//# sourceMappingURL=adapt.js.map

/***/ }),
/* 14 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isElement(obj) {
    var ELEM_TYPE = 1;
    var FRAG_TYPE = 11;
    return typeof HTMLElement === 'object' ?
        obj instanceof HTMLElement || obj instanceof DocumentFragment :
        obj && typeof obj === 'object' && obj !== null &&
            (obj.nodeType === ELEM_TYPE || obj.nodeType === FRAG_TYPE) &&
            typeof obj.nodeName === 'string';
}
function isClassOrId(str) {
    return str.length > 1 && (str[0] === '.' || str[0] === '#');
}
exports.isClassOrId = isClassOrId;
exports.SCOPE_PREFIX = '$$CYCLEDOM$$-';
function getElement(selectors) {
    var domElement = typeof selectors === 'string' ?
        document.querySelector(selectors) :
        selectors;
    if (typeof selectors === 'string' && domElement === null) {
        throw new Error("Cannot render into unknown element `" + selectors + "`");
    }
    else if (!isElement(domElement)) {
        throw new Error('Given container is not a DOM element neither a ' +
            'selector string.');
    }
    return domElement;
}
exports.getElement = getElement;
/**
 * The full scope of a namespace is the "absolute path" of scopes from
 * parent to child. This is extracted from the namespace, filter only for
 * scopes in the namespace.
 */
function getFullScope(namespace) {
    return namespace
        .filter(function (c) { return c.indexOf(exports.SCOPE_PREFIX) > -1; })
        .map(function (c) { return c.replace(exports.SCOPE_PREFIX, ''); })
        .join('-');
}
exports.getFullScope = getFullScope;
function getSelectors(namespace) {
    return namespace.filter(function (c) { return c.indexOf(exports.SCOPE_PREFIX) === -1; }).join(' ');
}
exports.getSelectors = getSelectors;
//# sourceMappingURL=utils.js.map

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(112)() ? Symbol : __webpack_require__(114);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};

var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};

var stripPrefix = exports.stripPrefix = function stripPrefix(path, prefix) {
  return path.indexOf(prefix) === 0 ? path.substr(prefix.length) : path;
};

var parsePath = exports.parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var createPath = exports.createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;


  var path = pathname || '/';

  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

  return path;
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var vnode_1 = __webpack_require__(24);
var is = __webpack_require__(54);
function addNS(data, children, sel) {
    data.ns = 'http://www.w3.org/2000/svg';
    if (sel !== 'foreignObject' && children !== undefined) {
        for (var i = 0; i < children.length; ++i) {
            var childData = children[i].data;
            if (childData !== undefined) {
                addNS(childData, children[i].children, children[i].sel);
            }
        }
    }
}
function h(sel, b, c) {
    var data = {}, children, text, i;
    if (c !== undefined) {
        data = b;
        if (is.array(c)) {
            children = c;
        }
        else if (is.primitive(c)) {
            text = c;
        }
        else if (c && c.sel) {
            children = [c];
        }
    }
    else if (b !== undefined) {
        if (is.array(b)) {
            children = b;
        }
        else if (is.primitive(b)) {
            text = b;
        }
        else if (b && b.sel) {
            children = [b];
        }
        else {
            data = b;
        }
    }
    if (is.array(children)) {
        for (i = 0; i < children.length; ++i) {
            if (is.primitive(children[i]))
                children[i] = vnode_1.vnode(undefined, undefined, undefined, children[i]);
        }
    }
    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&
        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {
        addNS(data, children, sel);
    }
    return vnode_1.vnode(sel, data, children, text, undefined);
}
exports.h = h;
;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = h;
//# sourceMappingURL=h.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Icon;
(function (Icon) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, icon, ".icon", scope);
    }
    Icon.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(icon, common_1.makeIsArgs(isIconType), isIconType, arg1, arg2);
    }
    Icon.render = render;
    function icon(args) {
        var props = args.props ? args.props : {};
        var content = typeof (args.content) !== "undefined" ? isIconType(args.content) ? args.content : args.content.main : -1;
        var className = getClassname(props, content).substring(1);
        return className !== "icon" ? dom_1.i({ props: { className: className } }) : undefined;
    }
    function getClassname(props, content) {
        var className = "";
        if (props.button) {
            className += " button";
        }
        if (props.bordered) {
            className += " bordered";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.fitted) {
            className += " fitted";
        }
        if (props.link) {
            className += " link";
        }
        if (props.flipped) {
            className += " flipped";
        }
        if (props.rotated) {
            className += " rotated";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += enums_1.IconType.ToClassname(content);
        return className + " icon";
    }
    function isIconType(obj) {
        return typeof (obj) === "string" || typeof (obj) === "number";
    }
})(Icon = exports.Icon || (exports.Icon = {}));


/***/ }),
/* 20 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(43)()
	? Object.setPrototypeOf
	: __webpack_require__(44);


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.locationsAreEqual = exports.createLocation = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _resolvePathname = __webpack_require__(126);

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = __webpack_require__(220);

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _PathUtils = __webpack_require__(17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;
  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = (0, _PathUtils.parsePath)(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);

    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  }

  return location;
};

var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};

/***/ }),
/* 23 */
/***/ (function(module, exports) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forOwn(object, iteratee) {
  return object && baseForOwn(object, typeof iteratee == 'function' ? iteratee : identity);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = forOwn;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function vnode(sel, data, children, text, elm) {
    var key = data === undefined ? undefined : data.key;
    return { sel: sel, data: data, children: children,
        text: text, elm: elm, key: key };
}
exports.vnode = vnode;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = vnode;
//# sourceMappingURL=vnode.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
function fromEvent(element, eventName, useCapture) {
    if (useCapture === void 0) { useCapture = false; }
    return xstream_1.Stream.create({
        element: element,
        next: null,
        start: function start(listener) {
            this.next = function next(event) { listener.next(event); };
            this.element.addEventListener(eventName, this.next, useCapture);
        },
        stop: function stop() {
            this.element.removeEventListener(eventName, this.next, useCapture);
        },
    });
}
exports.fromEvent = fromEvent;
//# sourceMappingURL=fromEvent.js.map

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var history_1 = __webpack_require__(120);
var createHistory_1 = __webpack_require__(75);
function makeHistoryDriver(options) {
    var history = history_1.createBrowserHistory(options);
    return function historyDriver(sink$) {
        return createHistory_1.createHistory$(history, sink$);
    };
}
exports.makeHistoryDriver = makeHistoryDriver;
function makeServerHistoryDriver(options) {
    var history = history_1.createMemoryHistory(options);
    return function serverHistoryDriver(sink$) {
        return createHistory_1.createHistory$(history, sink$);
    };
}
exports.makeServerHistoryDriver = makeServerHistoryDriver;
function makeHashHistoryDriver(options) {
    var history = history_1.createHashHistory(options);
    return function hashHistoryDriver(sink$) {
        return createHistory_1.createHistory$(history, sink$);
    };
}
exports.makeHashHistoryDriver = makeHashHistoryDriver;
//# sourceMappingURL=drivers.js.map

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = Object.prototype.toString

  , id = toString.call((function () { return arguments; }()));

module.exports = function (x) { return (toString.call(x) === id); };


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(87)()
	? Object.assign
	: __webpack_require__(88);


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = Object.prototype.toString

  , id = toString.call('');

module.exports = function (x) {
	return (typeof x === 'string') || (x && (typeof x === 'object') &&
		((x instanceof String) || (toString.call(x) === id))) || false;
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear    = __webpack_require__(42)
  , assign   = __webpack_require__(29)
  , callable = __webpack_require__(11)
  , value    = __webpack_require__(9)
  , d        = __webpack_require__(10)
  , autoBind = __webpack_require__(79)
  , Symbol   = __webpack_require__(16)

  , defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , Iterator;

module.exports = Iterator = function (list, context) {
	if (!(this instanceof Iterator)) return new Iterator(list, context);
	defineProperties(this, {
		__list__: d('w', value(list)),
		__context__: d('w', context),
		__nextIndex__: d('w', 0)
	});
	if (!context) return;
	callable(context.on);
	context.on('_add', this._onAdd);
	context.on('_delete', this._onDelete);
	context.on('_clear', this._onClear);
};

defineProperties(Iterator.prototype, assign({
	constructor: d(Iterator),
	_next: d(function () {
		var i;
		if (!this.__list__) return;
		if (this.__redo__) {
			i = this.__redo__.shift();
			if (i !== undefined) return i;
		}
		if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
		this._unBind();
	}),
	next: d(function () { return this._createResult(this._next()); }),
	_createResult: d(function (i) {
		if (i === undefined) return { done: true, value: undefined };
		return { done: false, value: this._resolve(i) };
	}),
	_resolve: d(function (i) { return this.__list__[i]; }),
	_unBind: d(function () {
		this.__list__ = null;
		delete this.__redo__;
		if (!this.__context__) return;
		this.__context__.off('_add', this._onAdd);
		this.__context__.off('_delete', this._onDelete);
		this.__context__.off('_clear', this._onClear);
		this.__context__ = null;
	}),
	toString: d(function () { return '[object Iterator]'; })
}, autoBind({
	_onAdd: d(function (index) {
		if (index >= this.__nextIndex__) return;
		++this.__nextIndex__;
		if (!this.__redo__) {
			defineProperty(this, '__redo__', d('c', [index]));
			return;
		}
		this.__redo__.forEach(function (redo, i) {
			if (redo >= index) this.__redo__[i] = ++redo;
		}, this);
		this.__redo__.push(index);
	}),
	_onDelete: d(function (index) {
		var i;
		if (index >= this.__nextIndex__) return;
		--this.__nextIndex__;
		if (!this.__redo__) return;
		i = this.__redo__.indexOf(index);
		if (i !== -1) this.__redo__.splice(i, 1);
		this.__redo__.forEach(function (redo, i) {
			if (redo > index) this.__redo__[i] = --redo;
		}, this);
	}),
	_onClear: d(function () {
		if (this.__redo__) clear.call(this.__redo__);
		this.__nextIndex__ = 0;
	})
})));

defineProperty(Iterator.prototype, Symbol.iterator, d(function () {
	return this;
}));
defineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _warning = __webpack_require__(25);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time') : void 0;

    prompt = nextPrompt;

    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;

          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);

    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

exports.default = createTransitionManager;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match HTML entities and HTML characters. */
var reUnescapedHtml = /[&<>"'`]/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

/** Used to map characters to HTML entities. */
var htmlEscapes = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '`': '&#96;'
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */
var escapeHtmlChar = basePropertyOf(htmlEscapes);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
 * their corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * Backticks are escaped because in IE < 9, they can break out of
 * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
 * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
 * [#133](https://html5sec.org/#133) of the
 * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */
function escape(string) {
  string = toString(string);
  return (string && reHasUnescapedHtml.test(string))
    ? string.replace(reUnescapedHtml, escapeHtmlChar)
    : string;
}

module.exports = escape;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var isolate_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var xstream_1 = __webpack_require__(0);
var Menu;
(function (Menu) {
    function render(arg1, arg2) {
        if (arg2 === void 0) { arg2 = []; }
        return common_1.renderPropsAndContent(menu, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    Menu.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of([]);
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var click$ = sources.DOM.select(".menu > .item").events("click");
            var items$ = sources.content$.map(function (c) { return isContent(c) ? c : c.main; }).remember();
            var clickedId$ = click$.map(function (ev) { return parseInt(ev.currentTarget.id); })
                .filter(function (n) { return !isNaN(n) && typeof (n) !== "undefined"; });
            var clickedItem$ = items$.map(function (items) { return clickedId$.map(function (id) { return items[id]; }); }).flatten()
                .filter(function (item) { return !item.disabled; });
            var vtree$ = xstream_1.default.combine(sources.props$, items$).map(function (_a) {
                var props = _a[0], content = _a[1];
                return menu({ props: props, content: content });
            });
            return {
                DOM: vtree$,
                events: function (type) { return sources.DOM.select(".menu").events(type); },
                value$: clickedItem$
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Menu.run = run;
    function menu(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props, content.length) } }, content.map(renderItem));
    }
    function getClassname(props, length) {
        var className = "ui";
        if (props.secondary) {
            className += " secondary";
        }
        if (props.fluid) {
            className += " fluid";
        }
        if (props.right) {
            className += " right";
        }
        if (props.pointing) {
            className += " pointing";
        }
        if (props.tabular) {
            className += " tabular";
        }
        if (props.text) {
            className += " text";
        }
        if (props.vertical) {
            className += " vertical";
        }
        if (props.pagination) {
            className += " pagination";
        }
        if (props.fixed) {
            className += " fixed";
        }
        if (props.stackable) {
            className += " stackable";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.icon) {
            className += " icon";
        }
        if (props.labeledIcons) {
            className += " labeled icon";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.borderless) {
            className += " borderless";
        }
        if (props.equalWidth) {
            className += utils_1.numToText(length) + " item";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += " menu";
        if (props.submenu) {
            className = className.substring(3);
        }
        return className;
    }
    function getItemClassname(item) {
        var className = "";
        if (item.active) {
            className += " active";
        }
        if (item.header) {
            className += " header";
        }
        if (item.fitted) {
            className += " fitted";
        }
        if (item.verticallyFitted) {
            className += " vertically fitted";
        }
        if (item.horizontallyFitted) {
            className += " horizontally fitted";
        }
        if (item.link) {
            className += " link";
        }
        if (item.icon) {
            className += " icon";
        }
        if (item.disabled) {
            className += " disabled";
        }
        if (typeof (item.float) !== "undefined") {
            className += enums_1.Float.ToClassname(item.float);
        }
        if (typeof (item.color) !== "undefined") {
            className += enums_1.Color.ToClassname(item.color);
        }
        className += " item";
        className = className.substring(1);
        return className;
    }
    function renderItem(item, id) {
        if (item.divider) {
            return dom_1.div({ props: { className: "divider" } });
        }
        if (item.headerOnly) {
            return dom_1.div({ props: { className: "header" } }, item.main);
        }
        if (item.rightMenu) {
            return dom_1.div({ props: { className: "right menu" } }, item.main.map(renderItem));
        }
        if (item.dropdown) {
            var content = item.main;
            content.data.props.className += " " + getItemClassname(item);
            return content;
        }
        if (item.href) {
            return dom_1.a({ props: { className: getItemClassname(item), id: id, href: item.href } }, item.main);
        }
        return dom_1.div({ props: { className: getItemClassname(item), id: id } }, item.main);
    }
    function isContent(obj) {
        return obj instanceof Array && (obj.length === 0 ||
            typeof (obj[0].main) !== "undefined" ||
            typeof (obj[0].divider) !== "undefined" ||
            typeof (obj[0].headerOnly) !== "undefined");
    }
})(Menu = exports.Menu || (exports.Menu = {}));


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isolate_1 = __webpack_require__(8);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var transition_1 = __webpack_require__(12);
var utils_1 = __webpack_require__(2);
var enums_1 = __webpack_require__(4);
var types_1 = __webpack_require__(6);
var Dimmer;
(function (Dimmer) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            var evt = function (type) { return sources.DOM.select(".dimmable").events(type); };
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? c : c.main; }) : xstream_1.default.of([]);
            /*** Create animation$ ***/
            var on$ = sources.args && sources.args.on$ ? sources.args.on$.remember() : onHover(evt);
            var target$ = sources.args && sources.args.target$ ? sources.args.target$.remember() : xstream_1.default.of("page");
            var transition$ = on$
                .fold(function (prevAnim, active) { return prevAnim.direction === enums_1.Direction.None
                ? ({ animation: enums_1.Animation.None, direction: active ? enums_1.Direction.In : enums_1.Direction.Out })
                : {
                    animation: enums_1.Animation.Fade, direction: active ? enums_1.Direction.In : enums_1.Direction.Out
                }; }, ({ animation: enums_1.Animation.None, direction: enums_1.Direction.None }));
            /*** Animate content ***/
            var children$ = xstream_1.default.combine(content$, props$, target$)
                .map(function (_a) {
                var content = _a[0], props = _a[1], target = _a[2];
                return dimmer(content, props, target);
            });
            var animatedContent = transition_1.Transition.run({ DOM: sources.DOM, transition$: transition$, target$: children$ }, scope);
            /*** Render view ***/
            var vTree$ = xstream_1.default.combine(target$, animatedContent.DOM, on$)
                .map(function (_a) {
                var target = _a[0], content = _a[1], active = _a[2];
                return dimElement(target, content, active);
            });
            return {
                DOM: vTree$,
                events: function (type) { return xstream_1.default.merge(sources.DOM.select(".dimmer").events(type), animatedContent.events(type)); }
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Dimmer.run = run;
    function dimmer(content, props, target) {
        if (target === void 0) { target = "page"; }
        return target === "page"
            ? dom_1.div({ props: { className: "ui " + (props.inverted ? "inverted " : "") + "dimmer modals page dimmer" } }, content)
            : dom_1.div({ props: { className: "ui " + (props.inverted ? "inverted " : "") + "targetted dimmer" } }, [
                dom_1.div({ props: { className: "content" } }, [
                    dom_1.div({ props: { className: "center" } }, content)
                ])
            ]);
    }
    function dimElement(targetOrString, content, active) {
        var isPage = typeof (targetOrString) === "string";
        var target = isPage ? content : targetOrString;
        var className = isPage ? "" : "dimmable", c;
        if (active) {
            className += isPage ? "active" : " dimmed";
        }
        var data = utils_1.patchClassList(target, ["dimmable", "dimmed", "inverted", "active"], className);
        if (isPage) {
            if (target.children) {
                c = target.children;
            }
            else if (target.text) {
                c = target.text;
            }
        }
        else {
            c = utils_1.addElement(content, target, "targetted");
        }
        return dom_1.h(target.sel, data, c);
    }
    function onHover(events) {
        return xstream_1.default.merge(events("mouseenter"), events("mouseleave"))
            .map(function (evt) { return evt.type === "mouseenter"; }).startWith(false);
    }
})(Dimmer = exports.Dimmer || (exports.Dimmer = {}));


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var index_1 = __webpack_require__(0);
var DelayOperator = (function () {
    function DelayOperator(dt, ins) {
        this.dt = dt;
        this.ins = ins;
        this.type = 'delay';
        this.out = null;
    }
    DelayOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    DelayOperator.prototype._stop = function () {
        this.ins._remove(this);
        this.out = null;
    };
    DelayOperator.prototype._n = function (t) {
        var u = this.out;
        if (!u)
            return;
        var id = setInterval(function () {
            u._n(t);
            clearInterval(id);
        }, this.dt);
    };
    DelayOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        var id = setInterval(function () {
            u._e(err);
            clearInterval(id);
        }, this.dt);
    };
    DelayOperator.prototype._c = function () {
        var u = this.out;
        if (!u)
            return;
        var id = setInterval(function () {
            u._c();
            clearInterval(id);
        }, this.dt);
    };
    return DelayOperator;
}());
/**
 * Delays periodic events by a given time period.
 *
 * Marble diagram:
 *
 * ```text
 * 1----2--3--4----5|
 *     delay(60)
 * ---1----2--3--4----5|
 * ```
 *
 * Example:
 *
 * ```js
 * import fromDiagram from 'xstream/extra/fromDiagram'
 * import delay from 'xstream/extra/delay'
 *
 * const stream = fromDiagram('1----2--3--4----5|')
 *  .compose(delay(60))
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > 1  (after 60 ms)
 * > 2  (after 160 ms)
 * > 3  (after 220 ms)
 * > 4  (after 280 ms)
 * > 5  (after 380 ms)
 * > completed
 * ```
 *
 * @param {number} period The amount of silence required in milliseconds.
 * @return {Stream}
 */
function delay(period) {
    return function delayOperator(ins) {
        return new index_1.Stream(new DelayOperator(period, ins));
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = delay;
//# sourceMappingURL=delay.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var index_1 = __webpack_require__(0);
var empty = {};
var DropRepeatsOperator = (function () {
    function DropRepeatsOperator(ins, fn) {
        this.ins = ins;
        this.fn = fn;
        this.type = 'dropRepeats';
        this.out = null;
        this.v = empty;
    }
    DropRepeatsOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    DropRepeatsOperator.prototype._stop = function () {
        this.ins._remove(this);
        this.out = null;
        this.v = empty;
    };
    DropRepeatsOperator.prototype.isEq = function (x, y) {
        return this.fn ? this.fn(x, y) : x === y;
    };
    DropRepeatsOperator.prototype._n = function (t) {
        var u = this.out;
        if (!u)
            return;
        var v = this.v;
        if (v !== empty && this.isEq(t, v))
            return;
        this.v = t;
        u._n(t);
    };
    DropRepeatsOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        u._e(err);
    };
    DropRepeatsOperator.prototype._c = function () {
        var u = this.out;
        if (!u)
            return;
        u._c();
    };
    return DropRepeatsOperator;
}());
exports.DropRepeatsOperator = DropRepeatsOperator;
/**
 * Drops consecutive duplicate values in a stream.
 *
 * Marble diagram:
 *
 * ```text
 * --1--2--1--1--1--2--3--4--3--3|
 *     dropRepeats
 * --1--2--1--------2--3--4--3---|
 * ```
 *
 * Example:
 *
 * ```js
 * import dropRepeats from 'xstream/extra/dropRepeats'
 *
 * const stream = xs.of(1, 2, 1, 1, 1, 2, 3, 4, 3, 3)
 *   .compose(dropRepeats())
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > 1
 * > 2
 * > 1
 * > 2
 * > 3
 * > 4
 * > 3
 * > completed
 * ```
 *
 * Example with a custom isEqual function:
 *
 * ```js
 * import dropRepeats from 'xstream/extra/dropRepeats'
 *
 * const stream = xs.of('a', 'b', 'a', 'A', 'B', 'b')
 *   .compose(dropRepeats((x, y) => x.toLowerCase() === y.toLowerCase()))
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > a
 * > b
 * > a
 * > B
 * > completed
 * ```
 *
 * @param {Function} isEqual An optional function of type
 * `(x: T, y: T) => boolean` that takes an event from the input stream and
 * checks if it is equal to previous event, by returning a boolean.
 * @return {Stream}
 */
function dropRepeats(isEqual) {
    if (isEqual === void 0) { isEqual = void 0; }
    return function dropRepeatsOperator(ins) {
        return new index_1.Stream(new DropRepeatsOperator(ins, isEqual));
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = dropRepeats;
//# sourceMappingURL=dropRepeats.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(13);
var HTMLSource = (function () {
    function HTMLSource(html$, _name) {
        this._name = _name;
        this._html$ = html$;
        this._empty$ = adapt_1.adapt(xstream_1.default.empty());
    }
    HTMLSource.prototype.elements = function () {
        var out = adapt_1.adapt(this._html$);
        out._isCycleSource = this._name;
        return out;
    };
    HTMLSource.prototype.select = function (selector) {
        return new HTMLSource(xstream_1.default.empty(), this._name);
    };
    HTMLSource.prototype.events = function (eventType, options) {
        var out = this._empty$;
        out._isCycleSource = this._name;
        return out;
    };
    return HTMLSource;
}());
exports.HTMLSource = HTMLSource;
//# sourceMappingURL=HTMLSource.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var adapt_1 = __webpack_require__(13);
var DocumentDOMSource_1 = __webpack_require__(63);
var BodyDOMSource_1 = __webpack_require__(62);
var ElementFinder_1 = __webpack_require__(64);
var fromEvent_1 = __webpack_require__(26);
var isolate_1 = __webpack_require__(69);
var EventDelegator_1 = __webpack_require__(65);
var utils_1 = __webpack_require__(15);
var eventTypesThatDontBubble = [
    "blur",
    "canplay",
    "canplaythrough",
    "change",
    "durationchange",
    "emptied",
    "ended",
    "focus",
    "load",
    "loadeddata",
    "loadedmetadata",
    "mouseenter",
    "mouseleave",
    "pause",
    "play",
    "playing",
    "ratechange",
    "reset",
    "scroll",
    "seeked",
    "seeking",
    "stalled",
    "submit",
    "suspend",
    "timeupdate",
    "unload",
    "volumechange",
    "waiting",
];
function determineUseCapture(eventType, options) {
    var result = false;
    if (typeof options.useCapture === 'boolean') {
        result = options.useCapture;
    }
    if (eventTypesThatDontBubble.indexOf(eventType) !== -1) {
        result = true;
    }
    return result;
}
function filterBasedOnIsolation(domSource, fullScope) {
    return function filterBasedOnIsolationOperator(rootElement$) {
        var initialState = {
            wasIsolated: false,
            shouldPass: false,
            element: null,
        };
        return rootElement$
            .fold(function checkIfShouldPass(state, element) {
            var isIsolated = !!domSource._isolateModule.getElement(fullScope);
            var shouldPass = isIsolated && !state.wasIsolated;
            return { wasIsolated: isIsolated, shouldPass: shouldPass, element: element };
        }, initialState)
            .drop(1)
            .filter(function (s) { return s.shouldPass; })
            .map(function (s) { return s.element; });
    };
}
var MainDOMSource = (function () {
    function MainDOMSource(_rootElement$, _sanitation$, _namespace, _isolateModule, _delegators, _name) {
        if (_namespace === void 0) { _namespace = []; }
        var _this = this;
        this._rootElement$ = _rootElement$;
        this._sanitation$ = _sanitation$;
        this._namespace = _namespace;
        this._isolateModule = _isolateModule;
        this._delegators = _delegators;
        this._name = _name;
        this.isolateSource = isolate_1.isolateSource;
        this.isolateSink = function (sink, scope) {
            if (scope === ':root') {
                return sink;
            }
            else if (utils_1.isClassOrId(scope)) {
                return isolate_1.siblingIsolateSink(sink, scope);
            }
            else {
                var prevFullScope = utils_1.getFullScope(_this._namespace);
                var nextFullScope = [prevFullScope, scope].filter(function (x) { return !!x; }).join('-');
                return isolate_1.totalIsolateSink(sink, nextFullScope);
            }
        };
    }
    MainDOMSource.prototype.elements = function () {
        var output$;
        if (this._namespace.length === 0) {
            output$ = this._rootElement$;
        }
        else {
            var elementFinder_1 = new ElementFinder_1.ElementFinder(this._namespace, this._isolateModule);
            output$ = this._rootElement$.map(function (el) { return elementFinder_1.call(el); });
        }
        var out = adapt_1.adapt(output$.remember());
        out._isCycleSource = this._name;
        return out;
    };
    Object.defineProperty(MainDOMSource.prototype, "namespace", {
        get: function () {
            return this._namespace;
        },
        enumerable: true,
        configurable: true
    });
    MainDOMSource.prototype.select = function (selector) {
        if (typeof selector !== 'string') {
            throw new Error("DOM driver's select() expects the argument to be a " +
                "string as a CSS selector");
        }
        if (selector === 'document') {
            return new DocumentDOMSource_1.DocumentDOMSource(this._name);
        }
        if (selector === 'body') {
            return new BodyDOMSource_1.BodyDOMSource(this._name);
        }
        var trimmedSelector = selector.trim();
        var childNamespace = trimmedSelector === ":root" ?
            this._namespace :
            this._namespace.concat(trimmedSelector);
        return new MainDOMSource(this._rootElement$, this._sanitation$, childNamespace, this._isolateModule, this._delegators, this._name);
    };
    MainDOMSource.prototype.events = function (eventType, options) {
        if (options === void 0) { options = {}; }
        if (typeof eventType !== "string") {
            throw new Error("DOM driver's events() expects argument to be a " +
                "string representing the event type to listen for.");
        }
        var useCapture = determineUseCapture(eventType, options);
        var namespace = this._namespace;
        var fullScope = utils_1.getFullScope(namespace);
        var keyParts = [eventType, useCapture];
        if (fullScope) {
            keyParts.push(fullScope);
        }
        var key = keyParts.join('~');
        var domSource = this;
        var rootElement$;
        if (fullScope) {
            rootElement$ = this._rootElement$
                .compose(filterBasedOnIsolation(domSource, fullScope));
        }
        else {
            rootElement$ = this._rootElement$.take(2);
        }
        var event$ = rootElement$
            .map(function setupEventDelegatorOnTopElement(rootElement) {
            // Event listener just for the root element
            if (!namespace || namespace.length === 0) {
                return fromEvent_1.fromEvent(rootElement, eventType, useCapture);
            }
            // Event listener on the origin element as an EventDelegator
            var delegators = domSource._delegators;
            var origin = domSource._isolateModule.getElement(fullScope) || rootElement;
            var delegator;
            if (delegators.has(key)) {
                delegator = delegators.get(key);
                delegator.updateOrigin(origin);
            }
            else {
                delegator = new EventDelegator_1.EventDelegator(origin, eventType, useCapture, domSource._isolateModule);
                delegators.set(key, delegator);
            }
            if (fullScope) {
                domSource._isolateModule.addEventDelegator(fullScope, delegator);
            }
            var subject = delegator.createDestination(namespace);
            return subject;
        })
            .flatten();
        var out = adapt_1.adapt(event$);
        out._isCycleSource = domSource._name;
        return out;
    };
    MainDOMSource.prototype.dispose = function () {
        this._sanitation$.shamefullySendNext(null);
        this._isolateModule.reset();
    };
    return MainDOMSource;
}());
exports.MainDOMSource = MainDOMSource;
//# sourceMappingURL=MainDOMSource.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ScopeChecker = (function () {
    function ScopeChecker(fullScope, isolateModule) {
        this.fullScope = fullScope;
        this.isolateModule = isolateModule;
    }
    /**
     * Checks whether the given element is *directly* in the scope of this
     * scope checker. Being contained *indirectly* through other scopes
     * is not valid. This is crucial for implementing parent-child isolation,
     * so that the parent selectors don't search inside a child scope.
     */
    ScopeChecker.prototype.isDirectlyInScope = function (leaf) {
        for (var el = leaf; el; el = el.parentElement) {
            var fullScope = this.isolateModule.getFullScope(el);
            if (fullScope && fullScope !== this.fullScope) {
                return false;
            }
            if (fullScope) {
                return true;
            }
        }
        return true;
    };
    return ScopeChecker;
}());
exports.ScopeChecker = ScopeChecker;
//# sourceMappingURL=ScopeChecker.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function createMatchesSelector() {
    var vendor;
    try {
        var proto = Element.prototype;
        vendor = proto.matches
            || proto.matchesSelector
            || proto.webkitMatchesSelector
            || proto.mozMatchesSelector
            || proto.msMatchesSelector
            || proto.oMatchesSelector;
    }
    catch (err) {
        vendor = null;
    }
    return function match(elem, selector) {
        if (vendor) {
            return vendor.call(elem, selector);
        }
        var nodes = elem.parentNode.querySelectorAll(selector);
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i] === elem) {
                return true;
            }
        }
        return false;
    };
}
exports.matchesSelector = createMatchesSelector();
//# sourceMappingURL=matchesSelector.js.map

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Inspired by Google Closure:
// http://closure-library.googlecode.com/svn/docs/
// closure_goog_array_array.js.html#goog.array.clear



var value = __webpack_require__(9);

module.exports = function () {
	value(this).length = 0;
	return this;
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = Object.create, getPrototypeOf = Object.getPrototypeOf
  , x = {};

module.exports = function (/*customCreate*/) {
	var setPrototypeOf = Object.setPrototypeOf
	  , customCreate = arguments[0] || create;
	if (typeof setPrototypeOf !== 'function') return false;
	return getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Big thanks to @WebReflection for sorting this out
// https://gist.github.com/WebReflection/5593554



var isObject      = __webpack_require__(93)
  , value         = __webpack_require__(9)

  , isPrototypeOf = Object.prototype.isPrototypeOf
  , defineProperty = Object.defineProperty
  , nullDesc = { configurable: true, enumerable: false, writable: true,
		value: undefined }
  , validate;

validate = function (obj, prototype) {
	value(obj);
	if ((prototype === null) || isObject(prototype)) return obj;
	throw new TypeError('Prototype must be null or an object');
};

module.exports = (function (status) {
	var fn, set;
	if (!status) return null;
	if (status.level === 2) {
		if (status.set) {
			set = status.set;
			fn = function (obj, prototype) {
				set.call(validate(obj, prototype), prototype);
				return obj;
			};
		} else {
			fn = function (obj, prototype) {
				validate(obj, prototype).__proto__ = prototype;
				return obj;
			};
		}
	} else {
		fn = function self(obj, prototype) {
			var isNullBase;
			validate(obj, prototype);
			isNullBase = isPrototypeOf.call(self.nullPolyfill, obj);
			if (isNullBase) delete self.nullPolyfill.__proto__;
			if (prototype === null) prototype = self.nullPolyfill;
			obj.__proto__ = prototype;
			if (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);
			return obj;
		};
	}
	return Object.defineProperty(fn, 'level', { configurable: false,
		enumerable: false, writable: false, value: status.level });
}((function () {
	var x = Object.create(null), y = {}, set
	  , desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');

	if (desc) {
		try {
			set = desc.set; // Opera crashes at this point
			set.call(x, y);
		} catch (ignore) { }
		if (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };
	}

	x.__proto__ = y;
	if (Object.getPrototypeOf(x) === y) return { level: 2 };

	x = {};
	x.__proto__ = y;
	if (Object.getPrototypeOf(x) === y) return { level: 1 };

	return false;
}())));

__webpack_require__(90);


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(100)()
	? String.prototype.contains
	: __webpack_require__(101);


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isIterable = __webpack_require__(105);

module.exports = function (value) {
	if (!isIterable(value)) throw new TypeError(value + " is not iterable");
	return value;
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(107)() ? Map : __webpack_require__(111);


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};

var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};

var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = exports.supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

  return window.history && 'pushState' in window.history;
};

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function selectorParser(_a) {
    var sel = _a.sel;
    var hashIdx = sel.indexOf('#');
    var dotIdx = sel.indexOf('.', hashIdx);
    var hash = hashIdx > 0 ? hashIdx : sel.length;
    var dot = dotIdx > 0 ? dotIdx : sel.length;
    var tagName = hashIdx !== -1 || dotIdx !== -1 ?
        sel.slice(0, Math.min(hash, dot)) :
        sel;
    var id = hash < dot ? sel.slice(hash + 1, dot) : void 0;
    var className = dotIdx > 0 ? sel.slice(dot + 1).replace(/\./g, ' ') : void 0;
    return {
        tagName: tagName,
        id: id,
        className: className,
    };
}
exports.selectorParser = selectorParser;
//# sourceMappingURL=selectorParser.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports) {


// All SVG children elements, not in this list, should self-close

exports.CONTAINER = {
  // http://www.w3.org/TR/SVG/intro.html#TermContainerElement
  'a': true,
  'defs': true,
  'glyph': true,
  'g': true,
  'marker': true,
  'mask': true,
  'missing-glyph': true,
  'pattern': true,
  'svg': true,
  'switch': true,
  'symbol': true,

  // http://www.w3.org/TR/SVG/intro.html#TermDescriptiveElement
  'desc': true,
  'metadata': true,
  'title': true
}

// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements

exports.VOID = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
}


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function createElement(tagName) {
    return document.createElement(tagName);
}
function createElementNS(namespaceURI, qualifiedName) {
    return document.createElementNS(namespaceURI, qualifiedName);
}
function createTextNode(text) {
    return document.createTextNode(text);
}
function createComment(text) {
    return document.createComment(text);
}
function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
    node.removeChild(child);
}
function appendChild(node, child) {
    node.appendChild(child);
}
function parentNode(node) {
    return node.parentNode;
}
function nextSibling(node) {
    return node.nextSibling;
}
function tagName(elm) {
    return elm.tagName;
}
function setTextContent(node, text) {
    node.textContent = text;
}
function getTextContent(node) {
    return node.textContent;
}
function isElement(node) {
    return node.nodeType === 1;
}
function isText(node) {
    return node.nodeType === 3;
}
function isComment(node) {
    return node.nodeType === 8;
}
exports.htmlDomApi = {
    createElement: createElement,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    getTextContent: getTextContent,
    isElement: isElement,
    isText: isText,
    isComment: isComment,
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.htmlDomApi;
//# sourceMappingURL=htmldomapi.js.map

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.array = Array.isArray;
function primitive(s) {
    return typeof s === 'string' || typeof s === 'number';
}
exports.primitive = primitive;
//# sourceMappingURL=is.js.map

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var h_1 = __webpack_require__(18);
function copyToThunk(vnode, thunk) {
    thunk.elm = vnode.elm;
    vnode.data.fn = thunk.data.fn;
    vnode.data.args = thunk.data.args;
    thunk.data = vnode.data;
    thunk.children = vnode.children;
    thunk.text = vnode.text;
    thunk.elm = vnode.elm;
}
function init(thunk) {
    var cur = thunk.data;
    var vnode = cur.fn.apply(undefined, cur.args);
    copyToThunk(vnode, thunk);
}
function prepatch(oldVnode, thunk) {
    var i, old = oldVnode.data, cur = thunk.data;
    var oldArgs = old.args, args = cur.args;
    if (old.fn !== cur.fn || oldArgs.length !== args.length) {
        copyToThunk(cur.fn.apply(undefined, args), thunk);
    }
    for (i = 0; i < args.length; ++i) {
        if (oldArgs[i] !== args[i]) {
            copyToThunk(cur.fn.apply(undefined, args), thunk);
            return;
        }
    }
    copyToThunk(oldVnode, thunk);
}
exports.thunk = function thunk(sel, key, fn, args) {
    if (args === undefined) {
        args = fn;
        fn = key;
        key = undefined;
    }
    return h_1.h(sel, {
        key: key,
        hook: { init: init, prepatch: prepatch },
        fn: fn,
        args: args
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.thunk;
//# sourceMappingURL=thunk.js.map

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(192));
__export(__webpack_require__(200));
__export(__webpack_require__(212));
__export(__webpack_require__(218));
__export(__webpack_require__(6));
__export(__webpack_require__(4));


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var xstream_1 = __webpack_require__(0);
var dropRepeats_1 = __webpack_require__(37);
var debounce_1 = __webpack_require__(59);
var dom_1 = __webpack_require__(1);
function getClassName(className, props) {
    if (props.rightAligned) {
        className += " right";
    }
    if (props.selection) {
        className += " selection";
    }
    if (props.inline) {
        className += " inline";
    }
    if (props.floating) {
        className += " floating";
    }
    if (props.loading) {
        className += " loading";
    }
    if (props.disabled) {
        className += " disabled";
    }
    if (props.scrolling) {
        className += " scrolling";
    }
    if (props.compact) {
        className += " compact";
    }
    if (props.pointing) {
        className += " pointing";
    }
    if (typeof (props.size) !== "undefined") {
        className += enums_1.Size.ToClassname(props.size);
    }
    if (typeof (props.color) !== "undefined") {
        className += enums_1.Color.ToClassname(props.color);
    }
    return className + " dropdown";
}
exports.getClassName = getClassName;
function createTransition$(evt, args) {
    var itemClick$ = evt("click").filter(function (evt) { return evt.srcElement.classList.contains("item") && !evt.srcElement.classList.contains("dropdown"); });
    var dropdownClick$ = evt("click")
        .filter(function (evt) {
        return !evt.srcElement.classList.contains("item") ||
            evt.srcElement.classList.contains("dropdown");
    })
        .mapTo(enums_1.Direction.In);
    var mouseleave$ = xstream_1.default.merge(evt("mouseleave").filter(function (evt) { return !isDropdownIcon(evt) && !searchIsActive(args); }), evt("mouseenter"))
        .map(function (evt) { return evt.type === "mouseenter" ? enums_1.Direction.In : enums_1.Direction.Out; })
        .compose(debounce_1.default(250))
        .filter(function (dir) { return dir === enums_1.Direction.Out; });
    var inputEnter$ = evt("keypress").map(function (evt) { return (evt.charCode === 13 || evt.charCode === 9) ? enums_1.Direction.Out : enums_1.Direction.In; });
    return xstream_1.default.merge(dropdownClick$, itemClick$.mapTo(enums_1.Direction.Out), mouseleave$, inputEnter$)
        .startWith(enums_1.Direction.Out)
        .map(function (dir) { return ({
        animation: enums_1.Animation.Fade,
        direction: dir
    }); })
        .compose(dropRepeats_1.default(function (a, b) { return a.direction === b.direction && a.animation === b.animation; }))
        .drop(1)
        .startWith({ animation: enums_1.Animation.None, direction: enums_1.Direction.Out });
}
exports.createTransition$ = createTransition$;
function getText(item, props, stat, filter) {
    if (typeof (stat) !== "undefined") {
        if (types_1.isVNode(props.default)) {
            return props.default;
        }
        return dom_1.div({ props: { className: "text" } }, props.default);
    }
    if (item === null || typeof (item) === "undefined") {
        if (types_1.isVNode(props.default)) {
            return props.default;
        }
        return dom_1.div({ props: { className: "default text" } }, props.default);
    }
    if (filter && filter.length > 0) {
        if (types_1.isVNode(item.main)) {
            return item.main;
        }
        return dom_1.div({ props: { className: "filtered text" } }, item.main);
    }
    if (types_1.isVNode(item.main)) {
        return item.main;
    }
    return dom_1.div({ props: { className: "text" } }, item.main);
}
exports.getText = getText;
function isMenuItem(obj) {
    return obj && obj.main;
}
exports.isMenuItem = isMenuItem;
function isDropdownIcon(evt) {
    return evt.srcElement.className.indexOf("dropdown icon") !== -1 && !evt.srcElement.classList.contains("ui");
}
function searchIsActive(args) {
    return (args && args.search && typeof (document) !== "undefined" && document.activeElement.classList.contains("search"));
}


/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var index_1 = __webpack_require__(0);
var DebounceOperator = (function () {
    function DebounceOperator(dt, ins) {
        this.dt = dt;
        this.ins = ins;
        this.type = 'debounce';
        this.out = null;
        this.id = null;
    }
    DebounceOperator.prototype._start = function (out) {
        this.out = out;
        this.ins._add(this);
    };
    DebounceOperator.prototype._stop = function () {
        this.ins._remove(this);
        this.out = null;
        this.id = null;
    };
    DebounceOperator.prototype.clearInterval = function () {
        var id = this.id;
        if (id !== null) {
            clearInterval(id);
        }
        this.id = null;
    };
    DebounceOperator.prototype._n = function (t) {
        var _this = this;
        var u = this.out;
        if (!u)
            return;
        this.clearInterval();
        this.id = setInterval(function () {
            _this.clearInterval();
            u._n(t);
        }, this.dt);
    };
    DebounceOperator.prototype._e = function (err) {
        var u = this.out;
        if (!u)
            return;
        this.clearInterval();
        u._e(err);
    };
    DebounceOperator.prototype._c = function () {
        var u = this.out;
        if (!u)
            return;
        this.clearInterval();
        u._c();
    };
    return DebounceOperator;
}());
/**
 * Delays events until a certain amount of silence has passed. If that timespan
 * of silence is not met the event is dropped.
 *
 * Marble diagram:
 *
 * ```text
 * --1----2--3--4----5|
 *     debounce(60)
 * -----1----------4--|
 * ```
 *
 * Example:
 *
 * ```js
 * import fromDiagram from 'xstream/extra/fromDiagram'
 * import debounce from 'xstream/extra/debounce'
 *
 * const stream = fromDiagram('--1----2--3--4----5|')
 *  .compose(debounce(60))
 *
 * stream.addListener({
 *   next: i => console.log(i),
 *   error: err => console.error(err),
 *   complete: () => console.log('completed')
 * })
 * ```
 *
 * ```text
 * > 1
 * > 4
 * > completed
 * ```
 *
 * @param {number} period The amount of silence required in milliseconds.
 * @return {Stream}
 */
function debounce(period) {
    return function debounceOperator(ins) {
        return new index_1.Stream(new DebounceOperator(period, ins));
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),
/* 60 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var run_1 = __webpack_require__(77);
var dom_1 = __webpack_require__(1);
var history_1 = __webpack_require__(76);
var xstream_1 = __webpack_require__(0);
var router_1 = __webpack_require__(181);
var routes_1 = __webpack_require__(182);
var layout_1 = __webpack_require__(179);
function app(drivers) {
    var page = router_1.default(Object.assign({}, drivers, { routes: routes_1.default }));
    var layout = layout_1.Layout.run(drivers, page);
    var sinks = {
        DOM: layout.DOM.map(function (layout) { return dom_1.div("#app.app", layout); }),
        router: xstream_1.default.merge(page.router, layout.router),
    };
    return sinks;
}
run_1.run(app, {
    DOM: dom_1.makeDOMDriver(".app"),
    router: history_1.captureClicks(history_1.makeHistoryDriver())
});


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(13);
var fromEvent_1 = __webpack_require__(26);
var BodyDOMSource = (function () {
    function BodyDOMSource(_name) {
        this._name = _name;
    }
    BodyDOMSource.prototype.select = function (selector) {
        // This functionality is still undefined/undecided.
        return this;
    };
    BodyDOMSource.prototype.elements = function () {
        var out = adapt_1.adapt(xstream_1.default.of(document.body));
        out._isCycleSource = this._name;
        return out;
    };
    BodyDOMSource.prototype.events = function (eventType, options) {
        if (options === void 0) { options = {}; }
        var stream;
        if (options && typeof options.useCapture === 'boolean') {
            stream = fromEvent_1.fromEvent(document.body, eventType, options.useCapture);
        }
        else {
            stream = fromEvent_1.fromEvent(document.body, eventType);
        }
        var out = adapt_1.adapt(stream);
        out._isCycleSource = this._name;
        return out;
    };
    return BodyDOMSource;
}());
exports.BodyDOMSource = BodyDOMSource;
//# sourceMappingURL=BodyDOMSource.js.map

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(13);
var fromEvent_1 = __webpack_require__(26);
var DocumentDOMSource = (function () {
    function DocumentDOMSource(_name) {
        this._name = _name;
    }
    DocumentDOMSource.prototype.select = function (selector) {
        // This functionality is still undefined/undecided.
        return this;
    };
    DocumentDOMSource.prototype.elements = function () {
        var out = adapt_1.adapt(xstream_1.default.of(document));
        out._isCycleSource = this._name;
        return out;
    };
    DocumentDOMSource.prototype.events = function (eventType, options) {
        if (options === void 0) { options = {}; }
        var stream;
        if (options && typeof options.useCapture === 'boolean') {
            stream = fromEvent_1.fromEvent(document, eventType, options.useCapture);
        }
        else {
            stream = fromEvent_1.fromEvent(document, eventType);
        }
        var out = adapt_1.adapt(stream);
        out._isCycleSource = this._name;
        return out;
    };
    return DocumentDOMSource;
}());
exports.DocumentDOMSource = DocumentDOMSource;
//# sourceMappingURL=DocumentDOMSource.js.map

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ScopeChecker_1 = __webpack_require__(40);
var utils_1 = __webpack_require__(15);
var matchesSelector_1 = __webpack_require__(41);
function toElArray(input) {
    return Array.prototype.slice.call(input);
}
var ElementFinder = (function () {
    function ElementFinder(namespace, isolateModule) {
        this.namespace = namespace;
        this.isolateModule = isolateModule;
    }
    ElementFinder.prototype.call = function (rootElement) {
        var namespace = this.namespace;
        var selector = utils_1.getSelectors(namespace);
        if (!selector) {
            return rootElement;
        }
        var fullScope = utils_1.getFullScope(namespace);
        var scopeChecker = new ScopeChecker_1.ScopeChecker(fullScope, this.isolateModule);
        var topNode = fullScope ?
            this.isolateModule.getElement(fullScope) || rootElement :
            rootElement;
        var topNodeMatchesSelector = !!fullScope && !!selector && matchesSelector_1.matchesSelector(topNode, selector);
        return toElArray(topNode.querySelectorAll(selector))
            .filter(scopeChecker.isDirectlyInScope, scopeChecker)
            .concat(topNodeMatchesSelector ? [topNode] : []);
    };
    return ElementFinder;
}());
exports.ElementFinder = ElementFinder;
//# sourceMappingURL=ElementFinder.js.map

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var ScopeChecker_1 = __webpack_require__(40);
var utils_1 = __webpack_require__(15);
var matchesSelector_1 = __webpack_require__(41);
/**
 * Finds (with binary search) index of the destination that id equal to searchId
 * among the destinations in the given array.
 */
function indexOf(arr, searchId) {
    var minIndex = 0;
    var maxIndex = arr.length - 1;
    var currentIndex;
    var current;
    while (minIndex <= maxIndex) {
        currentIndex = (minIndex + maxIndex) / 2 | 0; // tslint:disable-line:no-bitwise
        current = arr[currentIndex];
        var currentId = current.id;
        if (currentId < searchId) {
            minIndex = currentIndex + 1;
        }
        else if (currentId > searchId) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}
/**
 * Manages "Event delegation", by connecting an origin with multiple
 * destinations.
 *
 * Attaches a DOM event listener to the DOM element called the "origin",
 * and delegates events to "destinations", which are subjects as outputs
 * for the DOMSource. Simulates bubbling or capturing, with regards to
 * isolation boundaries too.
 */
var EventDelegator = (function () {
    function EventDelegator(origin, eventType, useCapture, isolateModule) {
        var _this = this;
        this.origin = origin;
        this.eventType = eventType;
        this.useCapture = useCapture;
        this.isolateModule = isolateModule;
        this.destinations = [];
        this._lastId = 0;
        if (useCapture) {
            this.listener = function (ev) { return _this.capture(ev); };
        }
        else {
            this.listener = function (ev) { return _this.bubble(ev); };
        }
        origin.addEventListener(eventType, this.listener, useCapture);
    }
    EventDelegator.prototype.updateOrigin = function (newOrigin) {
        this.origin.removeEventListener(this.eventType, this.listener, this.useCapture);
        newOrigin.addEventListener(this.eventType, this.listener, this.useCapture);
        this.origin = newOrigin;
    };
    /**
     * Creates a *new* destination given the namespace and returns the subject
     * representing the destination of events. Is not referentially transparent,
     * will always return a different output for the same input.
     */
    EventDelegator.prototype.createDestination = function (namespace) {
        var _this = this;
        var id = this._lastId++;
        var selector = utils_1.getSelectors(namespace);
        var scopeChecker = new ScopeChecker_1.ScopeChecker(utils_1.getFullScope(namespace), this.isolateModule);
        var subject = xstream_1.default.create({
            start: function () { },
            stop: function () {
                if ('requestIdleCallback' in window) {
                    requestIdleCallback(function () {
                        _this.removeDestination(id);
                    });
                }
                else {
                    _this.removeDestination(id);
                }
            },
        });
        var destination = { id: id, selector: selector, scopeChecker: scopeChecker, subject: subject };
        this.destinations.push(destination);
        return subject;
    };
    /**
     * Removes the destination that has the given id.
     */
    EventDelegator.prototype.removeDestination = function (id) {
        var i = indexOf(this.destinations, id);
        i >= 0 && this.destinations.splice(i, 1); // tslint:disable-line:no-unused-expression
    };
    EventDelegator.prototype.capture = function (ev) {
        var n = this.destinations.length;
        for (var i = 0; i < n; i++) {
            var dest = this.destinations[i];
            if (matchesSelector_1.matchesSelector(ev.target, dest.selector)) {
                dest.subject._n(ev);
            }
        }
    };
    EventDelegator.prototype.bubble = function (rawEvent) {
        var origin = this.origin;
        if (!origin.contains(rawEvent.currentTarget)) {
            return;
        }
        var roof = origin.parentElement;
        var ev = this.patchEvent(rawEvent);
        for (var el = ev.target; el && el !== roof; el = el.parentElement) {
            if (!origin.contains(el)) {
                ev.stopPropagation();
            }
            if (ev.propagationHasBeenStopped) {
                return;
            }
            this.matchEventAgainstDestinations(el, ev);
        }
    };
    EventDelegator.prototype.patchEvent = function (event) {
        var pEvent = event;
        pEvent.propagationHasBeenStopped = false;
        var oldStopPropagation = pEvent.stopPropagation;
        pEvent.stopPropagation = function stopPropagation() {
            oldStopPropagation.call(this);
            this.propagationHasBeenStopped = true;
        };
        return pEvent;
    };
    EventDelegator.prototype.matchEventAgainstDestinations = function (el, ev) {
        var n = this.destinations.length;
        for (var i = 0; i < n; i++) {
            var dest = this.destinations[i];
            if (!dest.scopeChecker.isDirectlyInScope(el)) {
                continue;
            }
            if (matchesSelector_1.matchesSelector(el, dest.selector)) {
                this.mutateEventCurrentTarget(ev, el);
                dest.subject._n(ev);
            }
        }
    };
    EventDelegator.prototype.mutateEventCurrentTarget = function (event, currentTargetElement) {
        try {
            Object.defineProperty(event, "currentTarget", {
                value: currentTargetElement,
                configurable: true,
            });
        }
        catch (err) {
            console.log("please use event.ownerTarget");
        }
        event.ownerTarget = currentTargetElement;
    };
    return EventDelegator;
}());
exports.EventDelegator = EventDelegator;
//# sourceMappingURL=EventDelegator.js.map

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MapPolyfill = __webpack_require__(47);
var IsolateModule = (function () {
    function IsolateModule() {
        this.elementsByFullScope = new MapPolyfill();
        this.delegatorsByFullScope = new MapPolyfill();
        this.fullScopesBeingUpdated = [];
    }
    IsolateModule.prototype.cleanupVNode = function (_a) {
        var data = _a.data, elm = _a.elm;
        var fullScope = (data || {}).isolate || '';
        var isCurrentElm = this.elementsByFullScope.get(fullScope) === elm;
        var isScopeBeingUpdated = this.fullScopesBeingUpdated.indexOf(fullScope) >= 0;
        if (fullScope && isCurrentElm && !isScopeBeingUpdated) {
            this.elementsByFullScope.delete(fullScope);
            this.delegatorsByFullScope.delete(fullScope);
        }
    };
    IsolateModule.prototype.getElement = function (fullScope) {
        return this.elementsByFullScope.get(fullScope);
    };
    IsolateModule.prototype.getFullScope = function (elm) {
        var iterator = this.elementsByFullScope.entries();
        for (var result = iterator.next(); !!result.value; result = iterator.next()) {
            var _a = result.value, fullScope = _a[0], element = _a[1];
            if (elm === element) {
                return fullScope;
            }
        }
        return '';
    };
    IsolateModule.prototype.addEventDelegator = function (fullScope, eventDelegator) {
        var delegators = this.delegatorsByFullScope.get(fullScope);
        if (!delegators) {
            delegators = [];
            this.delegatorsByFullScope.set(fullScope, delegators);
        }
        delegators[delegators.length] = eventDelegator;
    };
    IsolateModule.prototype.reset = function () {
        this.elementsByFullScope.clear();
        this.delegatorsByFullScope.clear();
        this.fullScopesBeingUpdated = [];
    };
    IsolateModule.prototype.createModule = function () {
        var self = this;
        return {
            create: function (oldVNode, vNode) {
                var _a = oldVNode.data, oldData = _a === void 0 ? {} : _a;
                var elm = vNode.elm, _b = vNode.data, data = _b === void 0 ? {} : _b;
                var oldFullScope = oldData.isolate || '';
                var fullScope = data.isolate || '';
                // Update data structures with the newly-created element
                if (fullScope) {
                    self.fullScopesBeingUpdated.push(fullScope);
                    if (oldFullScope) {
                        self.elementsByFullScope.delete(oldFullScope);
                    }
                    self.elementsByFullScope.set(fullScope, elm);
                    // Update delegators for this scope
                    var delegators = self.delegatorsByFullScope.get(fullScope);
                    if (delegators) {
                        var len = delegators.length;
                        for (var i = 0; i < len; ++i) {
                            delegators[i].updateOrigin(elm);
                        }
                    }
                }
                if (oldFullScope && !fullScope) {
                    self.elementsByFullScope.delete(fullScope);
                }
            },
            update: function (oldVNode, vNode) {
                var _a = oldVNode.data, oldData = _a === void 0 ? {} : _a;
                var elm = vNode.elm, _b = vNode.data, data = _b === void 0 ? {} : _b;
                var oldFullScope = oldData.isolate || '';
                var fullScope = data.isolate || '';
                // Same element, but different scope, so update the data structures
                if (fullScope && fullScope !== oldFullScope) {
                    if (oldFullScope) {
                        self.elementsByFullScope.delete(oldFullScope);
                    }
                    self.elementsByFullScope.set(fullScope, elm);
                    var delegators = self.delegatorsByFullScope.get(oldFullScope);
                    if (delegators) {
                        self.delegatorsByFullScope.delete(oldFullScope);
                        self.delegatorsByFullScope.set(fullScope, delegators);
                    }
                }
                // Same element, but lost the scope, so update the data structures
                if (oldFullScope && !fullScope) {
                    self.elementsByFullScope.delete(oldFullScope);
                    self.delegatorsByFullScope.delete(oldFullScope);
                }
            },
            destroy: function (vNode) {
                self.cleanupVNode(vNode);
            },
            remove: function (vNode, cb) {
                self.cleanupVNode(vNode);
                cb();
            },
            post: function () {
                self.fullScopesBeingUpdated = [];
            },
        };
    };
    return IsolateModule;
}());
exports.IsolateModule = IsolateModule;
//# sourceMappingURL=IsolateModule.js.map

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var h_1 = __webpack_require__(18);
var classNameFromVNode_1 = __webpack_require__(127);
var selectorParser_1 = __webpack_require__(51);
var VNodeWrapper = (function () {
    function VNodeWrapper(rootElement) {
        this.rootElement = rootElement;
    }
    VNodeWrapper.prototype.call = function (vnode) {
        if (vnode === null) {
            return this.wrap([]);
        }
        var _a = selectorParser_1.selectorParser(vnode), selTagName = _a.tagName, selId = _a.id;
        var vNodeClassName = classNameFromVNode_1.classNameFromVNode(vnode);
        var vNodeData = vnode.data || {};
        var vNodeDataProps = vNodeData.props || {};
        var _b = vNodeDataProps.id, vNodeId = _b === void 0 ? selId : _b;
        var isVNodeAndRootElementIdentical = typeof vNodeId === 'string' &&
            vNodeId.toUpperCase() === this.rootElement.id.toUpperCase() &&
            selTagName.toUpperCase() === this.rootElement.tagName.toUpperCase() &&
            vNodeClassName.toUpperCase() === this.rootElement.className.toUpperCase();
        if (isVNodeAndRootElementIdentical) {
            return vnode;
        }
        return this.wrap([vnode]);
    };
    VNodeWrapper.prototype.wrap = function (children) {
        var _a = this.rootElement, tagName = _a.tagName, id = _a.id, className = _a.className;
        var selId = id ? "#" + id : '';
        var selClass = className ?
            "." + className.split(" ").join(".") : '';
        return h_1.h("" + tagName.toLowerCase() + selId + selClass, {}, children);
    };
    return VNodeWrapper;
}());
exports.VNodeWrapper = VNodeWrapper;
//# sourceMappingURL=VNodeWrapper.js.map

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var h_1 = __webpack_require__(18);
function isValidString(param) {
    return typeof param === 'string' && param.length > 0;
}
function isSelector(param) {
    return isValidString(param) && (param[0] === '.' || param[0] === '#');
}
function createTagFunction(tagName) {
    return function hyperscript(a, b, c) {
        var hasA = typeof a !== 'undefined';
        var hasB = typeof b !== 'undefined';
        var hasC = typeof c !== 'undefined';
        if (isSelector(a)) {
            if (hasB && hasC) {
                return h_1.h(tagName + a, b, c);
            }
            else if (hasB) {
                return h_1.h(tagName + a, b);
            }
            else {
                return h_1.h(tagName + a, {});
            }
        }
        else if (hasC) {
            return h_1.h(tagName + a, b, c);
        }
        else if (hasB) {
            return h_1.h(tagName, a, b);
        }
        else if (hasA) {
            return h_1.h(tagName, a);
        }
        else {
            return h_1.h(tagName, {});
        }
    };
}
var SVG_TAG_NAMES = [
    'a', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor',
    'animateMotion', 'animateTransform', 'circle', 'clipPath', 'colorProfile',
    'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',
    'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting',
    'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB',
    'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode',
    'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting',
    'feSpotlight', 'feTile', 'feTurbulence', 'filter', 'font', 'fontFace',
    'fontFaceFormat', 'fontFaceName', 'fontFaceSrc', 'fontFaceUri',
    'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image', 'line',
    'linearGradient', 'marker', 'mask', 'metadata', 'missingGlyph', 'mpath',
    'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'script',
    'set', 'stop', 'style', 'switch', 'symbol', 'text', 'textPath', 'title',
    'tref', 'tspan', 'use', 'view', 'vkern',
];
var svg = createTagFunction('svg');
SVG_TAG_NAMES.forEach(function (tag) {
    svg[tag] = createTagFunction(tag);
});
var TAG_NAMES = [
    'a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base',
    'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption',
    'cite', 'code', 'col', 'colgroup', 'dd', 'del', 'dfn', 'dir', 'div', 'dl',
    'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html',
    'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend',
    'li', 'link', 'main', 'map', 'mark', 'menu', 'meta', 'nav', 'noscript',
    'object', 'ol', 'optgroup', 'option', 'p', 'param', 'pre', 'progress', 'q',
    'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small',
    'source', 'span', 'strong', 'style', 'sub', 'sup', 'table', 'tbody', 'td',
    'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'u', 'ul', 'video',
];
var exported = { SVG_TAG_NAMES: SVG_TAG_NAMES, TAG_NAMES: TAG_NAMES, svg: svg, isSelector: isSelector, createTagFunction: createTagFunction };
TAG_NAMES.forEach(function (n) {
    exported[n] = createTagFunction(n);
});
exports.default = exported;
//# sourceMappingURL=hyperscript-helpers.js.map

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var vnode_1 = __webpack_require__(24);
var utils_1 = __webpack_require__(15);
function totalIsolateSource(source, scope) {
    return source.select(utils_1.SCOPE_PREFIX + scope);
}
function siblingIsolateSource(source, scope) {
    return source.select(scope);
}
function isolateSource(source, scope) {
    if (scope === ':root') {
        return source;
    }
    else if (utils_1.isClassOrId(scope)) {
        return siblingIsolateSource(source, scope);
    }
    else {
        return totalIsolateSource(source, scope);
    }
}
exports.isolateSource = isolateSource;
function siblingIsolateSink(sink, scope) {
    return sink.map(function (node) {
        return vnode_1.vnode(node.sel + scope, node.data, node.children, node.text, node.elm);
    });
}
exports.siblingIsolateSink = siblingIsolateSink;
function totalIsolateSink(sink, fullScope) {
    return sink.map(function (node) {
        // Ignore if already had up-to-date full scope in vnode.data.isolate
        if (node.data && node.data.isolate) {
            var isolateData = node.data.isolate;
            var prevFullScopeNum = isolateData.replace(/(cycle|\-)/g, '');
            var fullScopeNum = fullScope.replace(/(cycle|\-)/g, '');
            if (isNaN(parseInt(prevFullScopeNum))
                || isNaN(parseInt(fullScopeNum))
                || prevFullScopeNum > fullScopeNum) {
                return node;
            }
        }
        // Insert up-to-date full scope in vnode.data.isolate, and also a key if needed
        node.data = node.data || {};
        node.data.isolate = fullScope;
        if (typeof node.key === 'undefined') {
            node.key = utils_1.SCOPE_PREFIX + fullScope;
        }
        return node;
    });
}
exports.totalIsolateSink = totalIsolateSink;
//# sourceMappingURL=isolate.js.map

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var snabbdom_1 = __webpack_require__(139);
var xstream_1 = __webpack_require__(0);
var MainDOMSource_1 = __webpack_require__(39);
var tovnode_1 = __webpack_require__(140);
var VNodeWrapper_1 = __webpack_require__(67);
var utils_1 = __webpack_require__(15);
var modules_1 = __webpack_require__(73);
var IsolateModule_1 = __webpack_require__(66);
var MapPolyfill = __webpack_require__(47);
function makeDOMDriverInputGuard(modules) {
    if (!Array.isArray(modules)) {
        throw new Error("Optional modules option must be " +
            "an array for snabbdom modules");
    }
}
function domDriverInputGuard(view$) {
    if (!view$
        || typeof view$.addListener !== "function"
        || typeof view$.fold !== "function") {
        throw new Error("The DOM driver function expects as input a Stream of " +
            "virtual DOM elements");
    }
}
function dropCompletion(input) {
    return xstream_1.default.merge(input, xstream_1.default.never());
}
function unwrapElementFromVNode(vnode) {
    return vnode.elm;
}
function reportSnabbdomError(err) {
    (console.error || console.log)(err);
}
function makeDOMDriver(container, options) {
    if (!options) {
        options = {};
    }
    var modules = options.modules || modules_1.default;
    var isolateModule = new IsolateModule_1.IsolateModule();
    var patch = snabbdom_1.init([isolateModule.createModule()].concat(modules));
    var rootElement = utils_1.getElement(container) || document.body;
    var vnodeWrapper = new VNodeWrapper_1.VNodeWrapper(rootElement);
    var delegators = new MapPolyfill();
    makeDOMDriverInputGuard(modules);
    function DOMDriver(vnode$, name) {
        if (name === void 0) { name = 'DOM'; }
        domDriverInputGuard(vnode$);
        var sanitation$ = xstream_1.default.create();
        var rootElement$ = xstream_1.default.merge(vnode$.endWhen(sanitation$), sanitation$)
            .map(function (vnode) { return vnodeWrapper.call(vnode); })
            .fold(patch, tovnode_1.toVNode(rootElement))
            .drop(1)
            .map(unwrapElementFromVNode)
            .compose(dropCompletion) // don't complete this stream
            .startWith(rootElement);
        // Start the snabbdom patching, over time
        var listener = { error: reportSnabbdomError };
        if (document.readyState === 'loading') {
            document.addEventListener('readystatechange', function () {
                if (document.readyState === 'interactive') {
                    rootElement$.addListener(listener);
                }
            });
        }
        else {
            rootElement$.addListener(listener);
        }
        return new MainDOMSource_1.MainDOMSource(rootElement$, sanitation$, [], isolateModule, delegators, name);
    }
    ;
    return DOMDriver;
}
exports.makeDOMDriver = makeDOMDriver;
//# sourceMappingURL=makeDOMDriver.js.map

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var HTMLSource_1 = __webpack_require__(38);
var init = __webpack_require__(128);
var modulesForHTML = __webpack_require__(131);
var defaultModules = [
    modulesForHTML.attributes,
    modulesForHTML.props,
    modulesForHTML.class,
    modulesForHTML.style,
];
var noop = function () { };
function makeHTMLDriver(effect, options) {
    if (!options) {
        options = {};
    }
    var modules = options.modules || defaultModules;
    var toHTML = init(modules);
    function htmlDriver(vnode$, name) {
        var html$ = vnode$.map(toHTML);
        html$.addListener({
            next: effect || noop,
            error: noop,
            complete: noop,
        });
        return new HTMLSource_1.HTMLSource(html$, name);
    }
    ;
    return htmlDriver;
}
exports.makeHTMLDriver = makeHTMLDriver;
//# sourceMappingURL=makeHTMLDriver.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(13);
var SCOPE_PREFIX = '___';
var MockedDOMSource = (function () {
    function MockedDOMSource(_mockConfig) {
        this._mockConfig = _mockConfig;
        if (_mockConfig['elements']) {
            this._elements = _mockConfig['elements'];
        }
        else {
            this._elements = adapt_1.adapt(xstream_1.default.empty());
        }
    }
    MockedDOMSource.prototype.elements = function () {
        var out = this._elements;
        out._isCycleSource = 'MockedDOM';
        return out;
    };
    MockedDOMSource.prototype.events = function (eventType, options) {
        var streamForEventType = this._mockConfig[eventType];
        var out = adapt_1.adapt(streamForEventType || xstream_1.default.empty());
        out._isCycleSource = 'MockedDOM';
        return out;
    };
    MockedDOMSource.prototype.select = function (selector) {
        var mockConfigForSelector = this._mockConfig[selector] || {};
        return new MockedDOMSource(mockConfigForSelector);
    };
    MockedDOMSource.prototype.isolateSource = function (source, scope) {
        return source.select('.' + SCOPE_PREFIX + scope);
    };
    MockedDOMSource.prototype.isolateSink = function (sink, scope) {
        return sink.map(function (vnode) {
            if (vnode.sel && vnode.sel.indexOf(SCOPE_PREFIX + scope) !== -1) {
                return vnode;
            }
            else {
                vnode.sel += "." + SCOPE_PREFIX + scope;
                return vnode;
            }
        });
    };
    return MockedDOMSource;
}());
exports.MockedDOMSource = MockedDOMSource;
function mockDOMSource(mockConfig) {
    return new MockedDOMSource(mockConfig);
}
exports.mockDOMSource = mockDOMSource;
//# sourceMappingURL=mockDOMSource.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var class_1 = __webpack_require__(135);
exports.ClassModule = class_1.default;
var props_1 = __webpack_require__(137);
exports.PropsModule = props_1.default;
var attributes_1 = __webpack_require__(134);
exports.AttrsModule = attributes_1.default;
var style_1 = __webpack_require__(138);
exports.StyleModule = style_1.default;
var dataset_1 = __webpack_require__(136);
exports.DatasetModule = dataset_1.default;
var modules = [style_1.default, class_1.default, props_1.default, attributes_1.default, dataset_1.default];
exports.default = modules;
//# sourceMappingURL=modules.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
var CLICK_EVENT = typeof document !== 'undefined' && document.ontouchstart ?
    'touchstart' :
    'click';
function which(ev) {
    if (typeof window === 'undefined') {
        return false;
    }
    var e = ev || window.event;
    return e.which === null ? e.button : e.which;
}
function sameOrigin(href) {
    if (typeof window === 'undefined') {
        return false;
    }
    return href && href.indexOf(window.location.origin) === 0;
}
function makeClickListener(push) {
    return function clickListener(event) {
        if (which(event) !== 1) {
            return;
        }
        if (event.metaKey || event.ctrlKey || event.shiftKey) {
            return;
        }
        if (event.defaultPrevented) {
            return;
        }
        var element = event.target;
        while (element && element.nodeName !== 'A') {
            element = element.parentNode;
        }
        if (!element || element.nodeName !== 'A') {
            return;
        }
        if (element.hasAttribute('download') ||
            element.getAttribute('rel') === 'external') {
            return;
        }
        if (element.target) {
            return;
        }
        var link = element.getAttribute('href');
        if (link && link.indexOf('mailto:') > -1 || link.charAt(0) === '#') {
            return;
        }
        if (!sameOrigin(element.href)) {
            return;
        }
        event.preventDefault();
        var pathname = element.pathname, search = element.search, _a = element.hash, hash = _a === void 0 ? '' : _a;
        push(pathname + search + hash);
    };
}
function captureAnchorClicks(push) {
    var listener = makeClickListener(push);
    if (typeof window !== 'undefined') {
        document.addEventListener(CLICK_EVENT, listener, false);
    }
}
function captureClicks(historyDriver) {
    return function historyDriverWithClickCapture(sink$) {
        var internalSink$ = xstream_1.default.create();
        captureAnchorClicks(function (pathname) {
            internalSink$._n({ type: 'push', pathname: pathname });
        });
        sink$._add(internalSink$);
        return historyDriver(internalSink$);
    };
}
exports.captureClicks = captureClicks;
//# sourceMappingURL=captureClicks.js.map

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var xstream_1 = __webpack_require__(0);
function createHistory$(history, sink$) {
    var history$ = xstream_1.default.createWithMemory().startWith(history.location);
    var call = makeCallOnHistory(history);
    var unlisten = history.listen(function (loc) { history$._n(loc); });
    var sub = sink$.subscribe(createObserver(call, unlisten));
    history$.dispose = function () { sub.unsubscribe(); unlisten(); };
    return history$;
}
exports.createHistory$ = createHistory$;
;
function makeCallOnHistory(history) {
    return function call(input) {
        if (input.type === 'push') {
            history.push(input.pathname, input.state);
        }
        if (input.type === 'replace') {
            history.replace(input.pathname, input.state);
        }
        if (input.type === 'go') {
            history.go(input.amount);
        }
        if (input.type === 'goBack') {
            history.goBack();
        }
        if (input.type === 'goForward') {
            history.goForward();
        }
    };
}
function createObserver(call, unlisten) {
    return {
        next: function (input) {
            if (typeof input === 'string') {
                call({ type: 'push', pathname: input });
            }
            else {
                call(input);
            }
        },
        error: function (err) { unlisten(); },
        complete: function () { setTimeout(unlisten); },
    };
}
//# sourceMappingURL=createHistory$.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Wraps a History Driver to add "click capturing" functionality.
 *
 * If you want to intercept and handle any click event that leads to a link,
 * like on an `<a>` element, you pass your existing driver (e.g. created from
 * `makeHistoryDriver()`) as argument and this function will return another
 * driver of the same nature, but including click capturing logic.
 *
 * @param {Function} driver an existing History Driver function.
 * @return {Function} a History Driver function
 * @function captureClicks
 */
var captureClicks_1 = __webpack_require__(74);
exports.captureClicks = captureClicks_1.captureClicks;
/**
 * Create a History Driver to be used in the browser.
 *
 * This is a function which, when called, returns a History Driver for Cycle.js
 * apps. The driver is also a function, and it takes a stream of new locations
 * (strings representing pathnames or location objects) as input, and outputs
 * another stream of locations that were applied.
 *
 * @param {object} options an object with some options specific to
 * this driver. These options are the same as for the corresponding
 * `createBrowserHistory()` function in History v4. Check its
 * [docs](https://github.com/mjackson/history/tree/v4.5.1#usage) for a good
 * description on the options.
 * @return {Function} the History Driver function
 * @function makeHistoryDriver
 */
var drivers_1 = __webpack_require__(27);
exports.makeHistoryDriver = drivers_1.makeHistoryDriver;
/**
 * Create a History Driver for older browsers using hash routing.
 *
 * This is a function which, when called, returns a History Driver for Cycle.js
 * apps. The driver is also a function, and it takes a stream of new locations
 * (strings representing pathnames or location objects) as input, and outputs
 * another stream of locations that were applied.
 *
 * @param {object} options an object with some options specific to
 * this driver. These options are the same as for the corresponding
 * `createHashHistory()` function in History v4. Check its
 * [docs](https://github.com/mjackson/history/tree/v4.5.1#usage) for a good
 * description on the options.
 * @return {Function} the History Driver function
 * @function makeHashHistoryDriver
 */
var drivers_2 = __webpack_require__(27);
exports.makeHashHistoryDriver = drivers_2.makeHashHistoryDriver;
/**
 * Create a History Driver to be used in non-browser enviroments such as
 * server-side Node.js.
 *
 * This is a function which, when called, returns a History Driver for Cycle.js
 * apps. The driver is also a function, and it takes a stream of new locations
 * (strings representing pathnames or location objects) as input, and outputs
 * another stream of locations that were applied.
 *
 * @param {object} options an object with some options specific to
 * this driver. These options are the same as for the corresponding
 * `createMemoryHistory()` function in History v4. Check its
 * [docs](https://github.com/mjackson/history/tree/v4.5.1#usage) for a good
 * description on the options.
 * @return {Function} the History Driver function
 * @function makeHashHistoryDriver
 */
var drivers_3 = __webpack_require__(27);
exports.makeServerHistoryDriver = drivers_3.makeServerHistoryDriver;
//# sourceMappingURL=index.js.map

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var adapt_1 = __webpack_require__(13);
function logToConsoleError(err) {
    var target = err.stack || err;
    if (console && console.error) {
        console.error(target);
    }
    else if (console && console.log) {
        console.log(target);
    }
}
function makeSinkProxies(drivers) {
    var sinkProxies = {};
    for (var name_1 in drivers) {
        if (drivers.hasOwnProperty(name_1)) {
            sinkProxies[name_1] = xstream_1.default.createWithMemory();
        }
    }
    return sinkProxies;
}
function callDrivers(drivers, sinkProxies) {
    var sources = {};
    for (var name_2 in drivers) {
        if (drivers.hasOwnProperty(name_2)) {
            sources[name_2] = drivers[name_2](sinkProxies[name_2], name_2);
            if (sources[name_2] && typeof sources[name_2] === 'object') {
                sources[name_2]._isCycleSource = name_2;
            }
        }
    }
    return sources;
}
// NOTE: this will mutate `sources`.
function adaptSources(sources) {
    for (var name_3 in sources) {
        if (sources.hasOwnProperty(name_3)
            && sources[name_3]
            && typeof sources[name_3]['shamefullySendNext'] === 'function') {
            sources[name_3] = adapt_1.adapt(sources[name_3]);
        }
    }
    return sources;
}
function replicateMany(sinks, sinkProxies) {
    var sinkNames = Object.keys(sinks).filter(function (name) { return !!sinkProxies[name]; });
    var buffers = {};
    var replicators = {};
    sinkNames.forEach(function (name) {
        buffers[name] = { _n: [], _e: [] };
        replicators[name] = {
            next: function (x) { return buffers[name]._n.push(x); },
            error: function (err) { return buffers[name]._e.push(err); },
            complete: function () { },
        };
    });
    var subscriptions = sinkNames
        .map(function (name) { return xstream_1.default.fromObservable(sinks[name]).subscribe(replicators[name]); });
    sinkNames.forEach(function (name) {
        var listener = sinkProxies[name];
        var next = function (x) { listener._n(x); };
        var error = function (err) { logToConsoleError(err); listener._e(err); };
        buffers[name]._n.forEach(next);
        buffers[name]._e.forEach(error);
        replicators[name].next = next;
        replicators[name].error = error;
        // because sink.subscribe(replicator) had mutated replicator to add
        // _n, _e, _c, we must also update these:
        replicators[name]._n = next;
        replicators[name]._e = error;
    });
    buffers = null; // free up for GC
    return function disposeReplication() {
        subscriptions.forEach(function (s) { return s.unsubscribe(); });
        sinkNames.forEach(function (name) { return sinkProxies[name]._c(); });
    };
}
function disposeSources(sources) {
    for (var k in sources) {
        if (sources.hasOwnProperty(k) && sources[k] && sources[k].dispose) {
            sources[k].dispose();
        }
    }
}
function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
}
/**
 * A function that prepares the Cycle application to be executed. Takes a `main`
 * function and prepares to circularly connects it to the given collection of
 * driver functions. As an output, `setup()` returns an object with three
 * properties: `sources`, `sinks` and `run`. Only when `run()` is called will
 * the application actually execute. Refer to the documentation of `run()` for
 * more details.
 *
 * **Example:**
 * ```js
 * import {setup} from '@cycle/run';
 * const {sources, sinks, run} = setup(main, drivers);
 * // ...
 * const dispose = run(); // Executes the application
 * // ...
 * dispose();
 * ```
 *
 * @param {Function} main a function that takes `sources` as input and outputs
 * `sinks`.
 * @param {Object} drivers an object where keys are driver names and values
 * are driver functions.
 * @return {Object} an object with three properties: `sources`, `sinks` and
 * `run`. `sources` is the collection of driver sources, `sinks` is the
 * collection of driver sinks, these can be used for debugging or testing. `run`
 * is the function that once called will execute the application.
 * @function setup
 */
function setup(main, drivers) {
    if (typeof main !== "function") {
        throw new Error("First argument given to Cycle must be the 'main' " +
            "function.");
    }
    if (typeof drivers !== "object" || drivers === null) {
        throw new Error("Second argument given to Cycle must be an object " +
            "with driver functions as properties.");
    }
    if (isObjectEmpty(drivers)) {
        throw new Error("Second argument given to Cycle must be an object " +
            "with at least one driver function declared as a property.");
    }
    var sinkProxies = makeSinkProxies(drivers);
    var sources = callDrivers(drivers, sinkProxies);
    var adaptedSources = adaptSources(sources);
    var sinks = main(adaptedSources);
    if (typeof window !== 'undefined') {
        window.Cyclejs = window.Cyclejs || {};
        window.Cyclejs.sinks = sinks;
    }
    function run() {
        var disposeReplication = replicateMany(sinks, sinkProxies);
        return function dispose() {
            disposeSources(sources);
            disposeReplication();
        };
    }
    ;
    return { sinks: sinks, sources: sources, run: run };
}
exports.setup = setup;
/**
 * Takes a `main` function and circularly connects it to the given collection
 * of driver functions.
 *
 * **Example:**
 * ```js
 * import run from '@cycle/run';
 * const dispose = run(main, drivers);
 * // ...
 * dispose();
 * ```
 *
 * The `main` function expects a collection of "source" streams (returned from
 * drivers) as input, and should return a collection of "sink" streams (to be
 * given to drivers). A "collection of streams" is a JavaScript object where
 * keys match the driver names registered by the `drivers` object, and values
 * are the streams. Refer to the documentation of each driver to see more
 * details on what types of sources it outputs and sinks it receives.
 *
 * @param {Function} main a function that takes `sources` as input and outputs
 * `sinks`.
 * @param {Object} drivers an object where keys are driver names and values
 * are driver functions.
 * @return {Function} a dispose function, used to terminate the execution of the
 * Cycle.js program, cleaning up resources used.
 * @function run
 */
function run(main, drivers) {
    var _a = setup(main, drivers), run = _a.run, sinks = _a.sinks;
    if (typeof window !== 'undefined' && window['CyclejsDevTool_startGraphSerializer']) {
        window['CyclejsDevTool_startGraphSerializer'](sinks);
    }
    return run();
}
exports.run = run;
exports.default = run;
//# sourceMappingURL=index.js.map

/***/ }),
/* 78 */
/***/ (function(module, exports) {

/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var copy       = __webpack_require__(89)
  , map        = __webpack_require__(97)
  , callable   = __webpack_require__(11)
  , validValue = __webpack_require__(9)

  , bind = Function.prototype.bind, defineProperty = Object.defineProperty
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , define;

define = function (name, desc, bindTo) {
	var value = validValue(desc) && callable(desc.value), dgs;
	dgs = copy(desc);
	delete dgs.writable;
	delete dgs.value;
	dgs.get = function () {
		if (hasOwnProperty.call(this, name)) return value;
		desc.value = bind.call(value, (bindTo == null) ? this : this[bindTo]);
		defineProperty(this, name, desc);
		return this[name];
	};
	return dgs;
};

module.exports = function (props/*, bindTo*/) {
	var bindTo = arguments[1];
	return map(props, function (desc, name) {
		return define(name, desc, bindTo);
	});
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toPosInt = __webpack_require__(85)
  , value    = __webpack_require__(9)

  , indexOf = Array.prototype.indexOf
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , abs = Math.abs, floor = Math.floor;

module.exports = function (searchElement/*, fromIndex*/) {
	var i, l, fromIndex, val;
	if (searchElement === searchElement) { //jslint: ignore
		return indexOf.apply(this, arguments);
	}

	l = toPosInt(value(this).length);
	fromIndex = arguments[1];
	if (isNaN(fromIndex)) fromIndex = 0;
	else if (fromIndex >= 0) fromIndex = floor(fromIndex);
	else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

	for (i = fromIndex; i < l; ++i) {
		if (hasOwnProperty.call(this, i)) {
			val = this[i];
			if (val !== val) return i; //jslint: ignore
		}
	}
	return -1;
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(82)()
	? Math.sign
	: __webpack_require__(83);


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== 'function') return false;
	return ((sign(10) === 1) && (sign(-20) === -1));
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || (value === 0)) return value;
	return (value > 0) ? 1 : -1;
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sign = __webpack_require__(81)

  , abs = Math.abs, floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if ((value === 0) || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(84)

  , max = Math.max;

module.exports = function (value) { return max(0, toInteger(value)); };


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Internal method, used by iteration functions.
// Calls a function for each key-value pair found in object
// Optionally takes compareFn to iterate object in specific order



var callable = __webpack_require__(11)
  , value    = __webpack_require__(9)

  , bind = Function.prototype.bind, call = Function.prototype.call, keys = Object.keys
  , propertyIsEnumerable = Object.prototype.propertyIsEnumerable;

module.exports = function (method, defVal) {
	return function (obj, cb/*, thisArg, compareFn*/) {
		var list, thisArg = arguments[2], compareFn = arguments[3];
		obj = Object(value(obj));
		callable(cb);

		list = keys(obj);
		if (compareFn) {
			list.sort((typeof compareFn === 'function') ? bind.call(compareFn, obj) : undefined);
		}
		if (typeof method !== 'function') method = list[method];
		return call.call(method, list, function (key, index) {
			if (!propertyIsEnumerable.call(obj, key)) return defVal;
			return call.call(cb, thisArg, obj[key], key, obj, index);
		});
	};
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== 'function') return false;
	obj = { foo: 'raz' };
	assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
	return (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys  = __webpack_require__(94)
  , value = __webpack_require__(9)

  , max = Math.max;

module.exports = function (dest, src/*, …srcn*/) {
	var error, i, l = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try { dest[key] = src[key]; } catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < l; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assign = __webpack_require__(29)
  , value  = __webpack_require__(9);

module.exports = function (obj) {
	var copy = Object(value(obj));
	if (copy !== obj) return copy;
	return assign({}, obj);
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Workaround for http://code.google.com/p/v8/issues/detail?id=2804



var create = Object.create, shim;

if (!__webpack_require__(43)()) {
	shim = __webpack_require__(44);
}

module.exports = (function () {
	var nullObject, props, desc;
	if (!shim) return create;
	if (shim.level !== 1) return create;

	nullObject = {};
	props = {};
	desc = { configurable: false, enumerable: false, writable: true,
		value: undefined };
	Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
		if (name === '__proto__') {
			props[name] = { configurable: true, enumerable: false, writable: true,
				value: undefined };
			return;
		}
		props[name] = desc;
	});
	Object.defineProperties(nullObject, props);

	Object.defineProperty(shim, 'nullPolyfill', { configurable: false,
		enumerable: false, writable: false, value: nullObject });

	return function (prototype, props) {
		return create((prototype === null) ? nullObject : prototype, props);
	};
}());


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(86)('forEach');


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Deprecated



module.exports = function (obj) { return typeof obj === 'function'; };


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var map = { 'function': true, object: true };

module.exports = function (x) {
	return ((x != null) && map[typeof x]) || false;
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(95)()
	? Object.keys
	: __webpack_require__(96);


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	try {
		Object.keys('primitive');
		return true;
	} catch (e) { return false; }
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys = Object.keys;

module.exports = function (object) {
	return keys(object == null ? object : Object(object));
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var callable = __webpack_require__(11)
  , forEach  = __webpack_require__(91)

  , call = Function.prototype.call;

module.exports = function (obj, cb/*, thisArg*/) {
	var o = {}, thisArg = arguments[2];
	callable(cb);
	forEach(obj, function (value, key, obj, index) {
		o[key] = call.call(cb, thisArg, value, key, obj, index);
	});
	return o;
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

module.exports = function (options/*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (options == null) return;
		process(Object(options), result);
	});
	return result;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var forEach = Array.prototype.forEach, create = Object.create;

module.exports = function (arg/*, …args*/) {
	var set = create(null);
	forEach.call(arguments, function (name) { set[name] = true; });
	return set;
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var str = 'razdwatrzy';

module.exports = function () {
	if (typeof str.contains !== 'function') return false;
	return ((str.contains('dwa') === true) && (str.contains('foo') === false));
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = String.prototype.indexOf;

module.exports = function (searchString/*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf = __webpack_require__(21)
  , contains       = __webpack_require__(45)
  , d              = __webpack_require__(10)
  , Iterator       = __webpack_require__(31)

  , defineProperty = Object.defineProperty
  , ArrayIterator;

ArrayIterator = module.exports = function (arr, kind) {
	if (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);
	Iterator.call(this, arr);
	if (!kind) kind = 'value';
	else if (contains.call(kind, 'key+value')) kind = 'key+value';
	else if (contains.call(kind, 'key')) kind = 'key';
	else kind = 'value';
	defineProperty(this, '__kind__', d('', kind));
};
if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

ArrayIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(ArrayIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__list__[i];
		if (this.__kind__ === 'key+value') return [i, this.__list__[i]];
		return i;
	}),
	toString: d(function () { return '[object Array Iterator]'; })
});


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments = __webpack_require__(28)
  , callable    = __webpack_require__(11)
  , isString    = __webpack_require__(30)
  , get         = __webpack_require__(104)

  , isArray = Array.isArray, call = Function.prototype.call
  , some = Array.prototype.some;

module.exports = function (iterable, cb/*, thisArg*/) {
	var mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;
	if (isArray(iterable) || isArguments(iterable)) mode = 'array';
	else if (isString(iterable)) mode = 'string';
	else iterable = get(iterable);

	callable(cb);
	doBreak = function () { broken = true; };
	if (mode === 'array') {
		some.call(iterable, function (value) {
			call.call(cb, thisArg, value, doBreak);
			if (broken) return true;
		});
		return;
	}
	if (mode === 'string') {
		l = iterable.length;
		for (i = 0; i < l; ++i) {
			char = iterable[i];
			if ((i + 1) < l) {
				code = char.charCodeAt(0);
				if ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];
			}
			call.call(cb, thisArg, char, doBreak);
			if (broken) break;
		}
		return;
	}
	result = iterable.next();

	while (!result.done) {
		call.call(cb, thisArg, result.value, doBreak);
		if (broken) return;
		result = iterable.next();
	}
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments    = __webpack_require__(28)
  , isString       = __webpack_require__(30)
  , ArrayIterator  = __webpack_require__(102)
  , StringIterator = __webpack_require__(106)
  , iterable       = __webpack_require__(46)
  , iteratorSymbol = __webpack_require__(16).iterator;

module.exports = function (obj) {
	if (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();
	if (isArguments(obj)) return new ArrayIterator(obj);
	if (isString(obj)) return new StringIterator(obj);
	return new ArrayIterator(obj);
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArguments    = __webpack_require__(28)
  , isString       = __webpack_require__(30)
  , iteratorSymbol = __webpack_require__(16).iterator

  , isArray = Array.isArray;

module.exports = function (value) {
	if (value == null) return false;
	if (isArray(value)) return true;
	if (isString(value)) return true;
	if (isArguments(value)) return true;
	return (typeof value[iteratorSymbol] === 'function');
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Thanks @mathiasbynens
// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols



var setPrototypeOf = __webpack_require__(21)
  , d              = __webpack_require__(10)
  , Iterator       = __webpack_require__(31)

  , defineProperty = Object.defineProperty
  , StringIterator;

StringIterator = module.exports = function (str) {
	if (!(this instanceof StringIterator)) return new StringIterator(str);
	str = String(str);
	Iterator.call(this, str);
	defineProperty(this, '__length__', d('', str.length));

};
if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

StringIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(StringIterator),
	_next: d(function () {
		if (!this.__list__) return;
		if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
		this._unBind();
	}),
	_resolve: d(function (i) {
		var char = this.__list__[i], code;
		if (this.__nextIndex__ === this.__length__) return char;
		code = char.charCodeAt(0);
		if ((code >= 0xD800) && (code <= 0xDBFF)) return char + this.__list__[this.__nextIndex__++];
		return char;
	}),
	toString: d(function () { return '[object String Iterator]'; })
});


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
	var map, iterator, result;
	if (typeof Map !== 'function') return false;
	try {
		// WebKit doesn't support arguments and crashes
		map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);
	} catch (e) {
		return false;
	}
	if (String(map) !== '[object Map]') return false;
	if (map.size !== 3) return false;
	if (typeof map.clear !== 'function') return false;
	if (typeof map.delete !== 'function') return false;
	if (typeof map.entries !== 'function') return false;
	if (typeof map.forEach !== 'function') return false;
	if (typeof map.get !== 'function') return false;
	if (typeof map.has !== 'function') return false;
	if (typeof map.keys !== 'function') return false;
	if (typeof map.set !== 'function') return false;
	if (typeof map.values !== 'function') return false;

	iterator = map.entries();
	result = iterator.next();
	if (result.done !== false) return false;
	if (!result.value) return false;
	if (result.value[0] !== 'raz') return false;
	if (result.value[1] !== 'one') return false;

	return true;
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Exports true if environment provides native `Map` implementation,
// whatever that is.



module.exports = (function () {
	if (typeof Map === 'undefined') return false;
	return (Object.prototype.toString.call(new Map()) === '[object Map]');
}());


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(99)('key',
	'value', 'key+value');


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var setPrototypeOf    = __webpack_require__(21)
  , d                 = __webpack_require__(10)
  , Iterator          = __webpack_require__(31)
  , toStringTagSymbol = __webpack_require__(16).toStringTag
  , kinds             = __webpack_require__(109)

  , defineProperties = Object.defineProperties
  , unBind = Iterator.prototype._unBind
  , MapIterator;

MapIterator = module.exports = function (map, kind) {
	if (!(this instanceof MapIterator)) return new MapIterator(map, kind);
	Iterator.call(this, map.__mapKeysData__, map);
	if (!kind || !kinds[kind]) kind = 'key+value';
	defineProperties(this, {
		__kind__: d('', kind),
		__values__: d('w', map.__mapValuesData__)
	});
};
if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);

MapIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(MapIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__values__[i];
		if (this.__kind__ === 'key') return this.__list__[i];
		return [this.__list__[i], this.__values__[i]];
	}),
	_unBind: d(function () {
		this.__values__ = null;
		unBind.call(this);
	}),
	toString: d(function () { return '[object Map Iterator]'; })
});
Object.defineProperty(MapIterator.prototype, toStringTagSymbol,
	d('c', 'Map Iterator'));


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clear          = __webpack_require__(42)
  , eIndexOf       = __webpack_require__(80)
  , setPrototypeOf = __webpack_require__(21)
  , callable       = __webpack_require__(11)
  , validValue     = __webpack_require__(9)
  , d              = __webpack_require__(10)
  , ee             = __webpack_require__(116)
  , Symbol         = __webpack_require__(16)
  , iterator       = __webpack_require__(46)
  , forOf          = __webpack_require__(103)
  , Iterator       = __webpack_require__(110)
  , isNative       = __webpack_require__(108)

  , call = Function.prototype.call
  , defineProperties = Object.defineProperties, getPrototypeOf = Object.getPrototypeOf
  , MapPoly;

module.exports = MapPoly = function (/*iterable*/) {
	var iterable = arguments[0], keys, values, self;
	if (!(this instanceof MapPoly)) throw new TypeError('Constructor requires \'new\'');
	if (isNative && setPrototypeOf && (Map !== MapPoly)) {
		self = setPrototypeOf(new Map(), getPrototypeOf(this));
	} else {
		self = this;
	}
	if (iterable != null) iterator(iterable);
	defineProperties(self, {
		__mapKeysData__: d('c', keys = []),
		__mapValuesData__: d('c', values = [])
	});
	if (!iterable) return self;
	forOf(iterable, function (value) {
		var key = validValue(value)[0];
		value = value[1];
		if (eIndexOf.call(keys, key) !== -1) return;
		keys.push(key);
		values.push(value);
	}, self);
	return self;
};

if (isNative) {
	if (setPrototypeOf) setPrototypeOf(MapPoly, Map);
	MapPoly.prototype = Object.create(Map.prototype, {
		constructor: d(MapPoly)
	});
}

ee(defineProperties(MapPoly.prototype, {
	clear: d(function () {
		if (!this.__mapKeysData__.length) return;
		clear.call(this.__mapKeysData__);
		clear.call(this.__mapValuesData__);
		this.emit('_clear');
	}),
	delete: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return false;
		this.__mapKeysData__.splice(index, 1);
		this.__mapValuesData__.splice(index, 1);
		this.emit('_delete', index, key);
		return true;
	}),
	entries: d(function () { return new Iterator(this, 'key+value'); }),
	forEach: d(function (cb/*, thisArg*/) {
		var thisArg = arguments[1], iterator, result;
		callable(cb);
		iterator = this.entries();
		result = iterator._next();
		while (result !== undefined) {
			call.call(cb, thisArg, this.__mapValuesData__[result],
				this.__mapKeysData__[result], this);
			result = iterator._next();
		}
	}),
	get: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return;
		return this.__mapValuesData__[index];
	}),
	has: d(function (key) {
		return (eIndexOf.call(this.__mapKeysData__, key) !== -1);
	}),
	keys: d(function () { return new Iterator(this, 'key'); }),
	set: d(function (key, value) {
		var index = eIndexOf.call(this.__mapKeysData__, key), emit;
		if (index === -1) {
			index = this.__mapKeysData__.push(key) - 1;
			emit = true;
		}
		this.__mapValuesData__[index] = value;
		if (emit) this.emit('_add', index, key);
		return this;
	}),
	size: d.gs(function () { return this.__mapKeysData__.length; }),
	values: d(function () { return new Iterator(this, 'value'); }),
	toString: d(function () { return '[object Map]'; })
}));
Object.defineProperty(MapPoly.prototype, Symbol.iterator, d(function () {
	return this.entries();
}));
Object.defineProperty(MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var validTypes = { object: true, symbol: true };

module.exports = function () {
	var symbol;
	if (typeof Symbol !== 'function') return false;
	symbol = Symbol('test symbol');
	try { String(symbol); } catch (e) { return false; }

	// Return 'true' also for polyfills
	if (!validTypes[typeof Symbol.iterator]) return false;
	if (!validTypes[typeof Symbol.toPrimitive]) return false;
	if (!validTypes[typeof Symbol.toStringTag]) return false;

	return true;
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (x) {
	if (!x) return false;
	if (typeof x === 'symbol') return true;
	if (!x.constructor) return false;
	if (x.constructor.name !== 'Symbol') return false;
	return (x[x.constructor.toStringTag] === 'Symbol');
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ES2015 Symbol polyfill for environments that do not support it (or partially support it)



var d              = __webpack_require__(10)
  , validateSymbol = __webpack_require__(115)

  , create = Object.create, defineProperties = Object.defineProperties
  , defineProperty = Object.defineProperty, objPrototype = Object.prototype
  , NativeSymbol, SymbolPolyfill, HiddenSymbol, globalSymbols = create(null)
  , isNativeSafe;

if (typeof Symbol === 'function') {
	NativeSymbol = Symbol;
	try {
		String(NativeSymbol());
		isNativeSafe = true;
	} catch (ignore) {}
}

var generateName = (function () {
	var created = create(null);
	return function (desc) {
		var postfix = 0, name, ie11BugWorkaround;
		while (created[desc + (postfix || '')]) ++postfix;
		desc += (postfix || '');
		created[desc] = true;
		name = '@@' + desc;
		defineProperty(objPrototype, name, d.gs(null, function (value) {
			// For IE11 issue see:
			// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
			//    ie11-broken-getters-on-dom-objects
			// https://github.com/medikoo/es6-symbol/issues/12
			if (ie11BugWorkaround) return;
			ie11BugWorkaround = true;
			defineProperty(this, name, d(value));
			ie11BugWorkaround = false;
		}));
		return name;
	};
}());

// Internal constructor (not one exposed) for creating Symbol instances.
// This one is used to ensure that `someSymbol instanceof Symbol` always return false
HiddenSymbol = function Symbol(description) {
	if (this instanceof HiddenSymbol) throw new TypeError('TypeError: Symbol is not a constructor');
	return SymbolPolyfill(description);
};

// Exposed `Symbol` constructor
// (returns instances of HiddenSymbol)
module.exports = SymbolPolyfill = function Symbol(description) {
	var symbol;
	if (this instanceof Symbol) throw new TypeError('TypeError: Symbol is not a constructor');
	if (isNativeSafe) return NativeSymbol(description);
	symbol = create(HiddenSymbol.prototype);
	description = (description === undefined ? '' : String(description));
	return defineProperties(symbol, {
		__description__: d('', description),
		__name__: d('', generateName(description))
	});
};
defineProperties(SymbolPolyfill, {
	for: d(function (key) {
		if (globalSymbols[key]) return globalSymbols[key];
		return (globalSymbols[key] = SymbolPolyfill(String(key)));
	}),
	keyFor: d(function (s) {
		var key;
		validateSymbol(s);
		for (key in globalSymbols) if (globalSymbols[key] === s) return key;
	}),

	// If there's native implementation of given symbol, let's fallback to it
	// to ensure proper interoperability with other native functions e.g. Array.from
	hasInstance: d('', (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill('hasInstance')),
	isConcatSpreadable: d('', (NativeSymbol && NativeSymbol.isConcatSpreadable) ||
		SymbolPolyfill('isConcatSpreadable')),
	iterator: d('', (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill('iterator')),
	match: d('', (NativeSymbol && NativeSymbol.match) || SymbolPolyfill('match')),
	replace: d('', (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill('replace')),
	search: d('', (NativeSymbol && NativeSymbol.search) || SymbolPolyfill('search')),
	species: d('', (NativeSymbol && NativeSymbol.species) || SymbolPolyfill('species')),
	split: d('', (NativeSymbol && NativeSymbol.split) || SymbolPolyfill('split')),
	toPrimitive: d('', (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill('toPrimitive')),
	toStringTag: d('', (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill('toStringTag')),
	unscopables: d('', (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill('unscopables'))
});

// Internal tweaks for real symbol producer
defineProperties(HiddenSymbol.prototype, {
	constructor: d(SymbolPolyfill),
	toString: d('', function () { return this.__name__; })
});

// Proper implementation of methods exposed on Symbol.prototype
// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
defineProperties(SymbolPolyfill.prototype, {
	toString: d(function () { return 'Symbol (' + validateSymbol(this).__description__ + ')'; }),
	valueOf: d(function () { return validateSymbol(this); })
});
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {
	var symbol = validateSymbol(this);
	if (typeof symbol === 'symbol') return symbol;
	return symbol.toString();
}));
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));

// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
	d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));

// Note: It's important to define `toPrimitive` as last one, as some implementations
// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
// And that may invoke error in definition flow:
// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
	d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isSymbol = __webpack_require__(113);

module.exports = function (value) {
	if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
	return value;
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var d        = __webpack_require__(10)
  , callable = __webpack_require__(11)

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(25);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(50);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(22);

var _PathUtils = __webpack_require__(17);

var _createTransitionManager = __webpack_require__(32);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _ExecutionEnvironment = __webpack_require__(49);

var _DOMUtils = __webpack_require__(48);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

var getHistoryState = function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/mjackson/history/pull/289
    return {};
  }
};

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;

  var globalHistory = window.history;
  var canUseHistory = (0, _DOMUtils.supportsHistory)();
  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

  var _props$basename = props.basename,
      basename = _props$basename === undefined ? '' : _props$basename,
      _props$forceRefresh = props.forceRefresh,
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


  var getDOMLocation = function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;


    var path = pathname + search + hash;

    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);

    return _extends({}, (0, _PathUtils.parsePath)(path), {
      state: state,
      key: key
    });
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var handlePopState = function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

    handlePop(getDOMLocation(event.state));
  };

  var handleHashChange = function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  };

  var forceNextPop = false;

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      (function () {
        var action = 'POP';

        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({ action: action, location: location });
          } else {
            revertPop(location);
          }
        });
      })();
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allKeys.indexOf(fromLocation.key);

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];

  // Public interface

  var createHref = function createHref(location) {
    return basename + (0, _PathUtils.createPath)(location);
  };

  var push = function push(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.pushState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

          nextKeys.push(location.key);
          allKeys = nextKeys;

          setState({ action: action, location: location });
        }
      } else {
        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;

        window.location.href = href;
      }
    });
  };

  var replace = function replace(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.replaceState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);

          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

          setState({ action: action, location: location });
        }
      } else {
        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;

        window.location.replace(href);
      }
    });
  };

  var go = function go(n) {
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      return unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createBrowserHistory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(25);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(50);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(22);

var _PathUtils = __webpack_require__(17);

var _createTransitionManager = __webpack_require__(32);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _ExecutionEnvironment = __webpack_require__(49);

var _DOMUtils = __webpack_require__(48);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HashChangeEvent = 'hashchange';

var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: _PathUtils.stripLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  },
  slash: {
    encodePath: _PathUtils.addLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  }
};

var getHashPath = function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};

var pushHashPath = function pushHashPath(path) {
  return window.location.hash = path;
};

var replaceHashPath = function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');

  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};

var createHashHistory = function createHashHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Hash history needs a DOM') : (0, _invariant2.default)(false) : void 0;

  var globalHistory = window.history;
  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

  var _props$basename = props.basename,
      basename = _props$basename === undefined ? '' : _props$basename,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$hashType = props.hashType,
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;


  var getDOMLocation = function getDOMLocation() {
    var path = decodePath(getHashPath());

    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);

    return (0, _PathUtils.parsePath)(path);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var forceNextPop = false;
  var ignorePath = null;

  var handleHashChange = function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;

      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;

      handlePop(location);
    }
  };

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      (function () {
        var action = 'POP';

        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({ action: action, location: location });
          } else {
            revertPop(location);
          }
        });
      })();
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  // Ensure the hash is encoded properly before doing anything else.
  var path = getHashPath();
  var encodedPath = encodePath(path);

  if (path !== encodedPath) replaceHashPath(encodedPath);

  var initialLocation = getDOMLocation();
  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

  // Public interface

  var createHref = function createHref(location) {
    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
  };

  var push = function push(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);

        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

        nextPaths.push(path);
        allPaths = nextPaths;

        setState({ action: action, location: location });
      } else {
        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;

        setState();
      }
    });
  };

  var replace = function replace(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

      if (prevIndex !== -1) allPaths[prevIndex] = path;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;

    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      return unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createHashHistory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = __webpack_require__(25);

var _warning2 = _interopRequireDefault(_warning);

var _PathUtils = __webpack_require__(17);

var _LocationUtils = __webpack_require__(22);

var _createTransitionManager = __webpack_require__(32);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clamp = function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
};

/**
 * Creates a history object that stores locations in memory.
 */
var createMemoryHistory = function createMemoryHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getUserConfirmation = props.getUserConfirmation,
      _props$initialEntries = props.initialEntries,
      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
      _props$initialIndex = props.initialIndex,
      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry, index) {
    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, index ? createKey() : undefined) : (0, _LocationUtils.createLocation)(entry, undefined, index ? entry.key || createKey() : undefined);
  });

  // Public interface

  var createHref = _PathUtils.createPath;

  var push = function push(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;

      var nextEntries = history.entries.slice(0);
      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  };

  var replace = function replace(path, state) {
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      history.entries[history.index] = location;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

    var action = 'POP';
    var location = history.entries[nextIndex];

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var canGo = function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  };

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return transitionManager.setPrompt(prompt);
  };

  var listen = function listen(listener) {
    return transitionManager.appendListener(listener);
  };

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createMemoryHistory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

var _LocationUtils = __webpack_require__(22);

Object.defineProperty(exports, 'createLocation', {
  enumerable: true,
  get: function get() {
    return _LocationUtils.createLocation;
  }
});
Object.defineProperty(exports, 'locationsAreEqual', {
  enumerable: true,
  get: function get() {
    return _LocationUtils.locationsAreEqual;
  }
});

var _PathUtils = __webpack_require__(17);

Object.defineProperty(exports, 'parsePath', {
  enumerable: true,
  get: function get() {
    return _PathUtils.parsePath;
  }
});
Object.defineProperty(exports, 'createPath', {
  enumerable: true,
  get: function get() {
    return _PathUtils.createPath;
  }
});

var _createBrowserHistory2 = __webpack_require__(117);

var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);

var _createHashHistory2 = __webpack_require__(118);

var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

var _createMemoryHistory2 = __webpack_require__(119);

var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.createBrowserHistory = _createBrowserHistory3.default;
exports.createHashHistory = _createHashHistory3.default;
exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    rsComboSymbolsRange = '\\u20d0-\\u20f0',
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
  rsUpper + '+' + rsOptUpperContr,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 'ss'
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */
var kebabCase = createCompounder(function(result, word, index) {
  return result + (index ? '-' : '') + word.toLowerCase();
});

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = kebabCase;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for comparison styles. */
var UNORDERED_COMPARE_FLAG = 1,
    PARTIAL_COMPARE_FLAG = 2;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {boolean} [bitmask] The bitmask of comparison flags.
 *  The bitmask may be composed of the following flags:
 *     1 - Unordered comparison
 *     2 - Partial comparison
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, bitmask, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag && !isHostObject(object),
      othIsObj = othTag == objectTag && !isHostObject(other),
      isSameTag = objTag == othTag;

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
  }
  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
}

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */
function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0,
      lastIndex = length - 1;

  while (length--) {
    var index = indexes[length];
    if (length == lastIndex || index !== previous) {
      var previous = index;
      if (isIndex(index)) {
        splice.call(array, index, 1);
      }
      else if (!isKey(index, array)) {
        var path = castPath(index),
            object = parent(array, path);

        if (object != null) {
          delete object[toKey(last(path))];
        }
      }
      else {
        delete array[toKey(index)];
      }
    }
  }
  return array;
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!seen.has(othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, customizer, bitmask, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= UNORDERED_COMPARE_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} customizer The function to customize comparisons.
 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
 *  for more details.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = isKey(path, object) ? [path] : castPath(path);

  var result,
      index = -1,
      length = path.length;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result) {
    return result;
  }
  var length = object ? object.length : 0;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array ? array.length : 0;
  return length ? array[length - 1] : undefined;
}

/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity]
 *  The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */
function remove(array, predicate) {
  var result = [];
  if (!(array && array.length)) {
    return result;
  }
  var index = -1,
      indexes = [],
      length = array.length;

  predicate = baseIteratee(predicate, 3);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }
  basePullAt(array, indexes);
  return result;
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = remove;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20), __webpack_require__(58)(module)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * Checks if a cache value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    Set = getNative(root, 'Set'),
    nativeCreate = getNative(Object, 'create');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each
 * element is kept.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return (array && array.length)
    ? baseUniq(array)
    : [];
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = uniq;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {


// https://github.com/Matt-Esch/virtual-dom/blob/master/virtual-hyperscript/parse-tag.js

var split = __webpack_require__(78)

var classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/
var notClassId = /^\.|#/

module.exports = function parseSelector (selector, upper) {
  selector = selector || ''
  var tagName
  var id = ''
  var classes = []

  var tagParts = split(selector, classIdSplit)

  if (notClassId.test(tagParts[1]) || selector === '') {
    tagName = 'div'
  }

  var part, type, i

  for (i = 0; i < tagParts.length; i++) {
    part = tagParts[i]

    if (!part) {
      continue
    }

    type = part.charAt(0)

    if (!tagName) {
      tagName = part
    } else if (type === '.') {
      classes.push(part.substring(1, part.length))
    } else if (type === '#') {
      id = part.substring(1, part.length)
    }
  }

  return {
    tagName: upper === true ? tagName.toUpperCase() : tagName,
    id: id,
    className: classes.join(' ')
  }
}


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsolute = function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
};

// About 1.5x faster than the two-arg version of Array#splice()
var spliceOne = function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }list.pop();
};

// This implementation is based heavily on node's url.parse
var resolvePathname = function resolvePathname(to) {
  var from = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
};

module.exports = resolvePathname;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var selectorParser_1 = __webpack_require__(51);
function classNameFromVNode(vNode) {
    var _a = selectorParser_1.selectorParser(vNode).className, cn = _a === void 0 ? '' : _a;
    if (!vNode.data) {
        return cn;
    }
    var _b = vNode.data, dataClass = _b.class, props = _b.props;
    if (dataClass) {
        var c = Object.keys(dataClass)
            .filter(function (cl) { return dataClass[cl]; });
        cn += " " + c.join(" ");
    }
    if (props && props.className) {
        cn += " " + props.className;
    }
    return cn && cn.trim();
}
exports.classNameFromVNode = classNameFromVNode;
//# sourceMappingURL=classNameFromVNode.js.map

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {


var parseSelector = __webpack_require__(125)
var VOID_ELEMENTS = __webpack_require__(52).VOID
var CONTAINER_ELEMENTS = __webpack_require__(52).CONTAINER

module.exports = function init (modules) {
  function parse (vnode, node) {
    var result = []
    var attributes = new Map([
      // These can be overwritten because that’s what happens in snabbdom
      ['id', node.id],
      ['class', node.className]
    ])

    modules.forEach(function (fn, index) {
      fn(vnode, attributes)
    })
    attributes.forEach(function (value, key) {
      if (value && value !== '') {
        result.push(key + '="' + value + '"')
      }
    })

    return result.join(' ')
  }

  return function renderToString (vnode) {
    if (!vnode.sel && vnode.text) {
      return vnode.text
    }

    vnode.data = vnode.data || {}

    // Support thunks
    if (vnode.data.hook &&
      typeof vnode.data.hook.init === 'function' &&
      typeof vnode.data.fn === 'function') {
      vnode.data.hook.init(vnode)
    }

    var node = parseSelector(vnode.sel)
    var tagName = node.tagName
    var attributes = parse(vnode, node)
    var svg = vnode.data.ns === 'http://www.w3.org/2000/svg'
    var tag = []

    // Open tag
    tag.push('<' + tagName)
    if (attributes.length) {
      tag.push(' ' + attributes)
    }
    if (svg && CONTAINER_ELEMENTS[tagName] !== true) {
      tag.push(' /')
    }
    tag.push('>')

    // Close tag, if needed
    if ((VOID_ELEMENTS[tagName] !== true && !svg) ||
        (svg && CONTAINER_ELEMENTS[tagName] === true)) {
      if (vnode.data.props && vnode.data.props.innerHTML) {
        tag.push(vnode.data.props.innerHTML)
      } else if (vnode.text) {
        tag.push(vnode.text)
      } else if (vnode.children) {
        vnode.children.forEach(function (child) {
          tag.push(renderToString(child))
        })
      }
      tag.push('</' + tagName + '>')
    }

    return tag.join('')
  }
}


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {


var forOwn = __webpack_require__(23)
var escape = __webpack_require__(33)

// data.attrs

module.exports = function attrsModule (vnode, attributes) {
  var attrs = vnode.data.attrs || {}

  forOwn(attrs, function (value, key) {
    attributes.set(key, escape(value))
  })
}


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {


var forOwn = __webpack_require__(23)
var remove = __webpack_require__(122)
var uniq = __webpack_require__(123)

// data.class

module.exports = function classModule (vnode, attributes) {
  var values
  var _add = []
  var _remove = []
  var classes = vnode.data.class || {}
  var existing = attributes.get('class')
  existing = existing.length > 0 ? existing.split(' ') : []

  forOwn(classes, function (value, key) {
    if (value === true) {
      _add.push(key)
    } else {
      _remove.push(key)
    }
  })

  values = remove(uniq(existing.concat(_add)), function (value) {
    return _remove.indexOf(value) < 0
  })

  if (values.length) {
    attributes.set('class', values.join(' '))
  }
}


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = {
  class: __webpack_require__(130),
  props: __webpack_require__(132),
  attributes: __webpack_require__(129),
  style: __webpack_require__(133)
}


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {


var forOwn = __webpack_require__(23)
var escape = __webpack_require__(33)

// https://developer.mozilla.org/en-US/docs/Web/API/element
var omit = [
  'attributes',
  'childElementCount',
  'children',
  'classList',
  'clientHeight',
  'clientLeft',
  'clientTop',
  'clientWidth',
  'currentStyle',
  'firstElementChild',
  'innerHTML',
  'lastElementChild',
  'nextElementSibling',
  'ongotpointercapture',
  'onlostpointercapture',
  'onwheel',
  'outerHTML',
  'previousElementSibling',
  'runtimeStyle',
  'scrollHeight',
  'scrollLeft',
  'scrollLeftMax',
  'scrollTop',
  'scrollTopMax',
  'scrollWidth',
  'tabStop',
  'tagName'
]

// data.props

module.exports = function propsModule (vnode, attributes) {
  var props = vnode.data.props || {}

  forOwn(props, function (value, key) {
    if (omit.indexOf(key) > -1) {
      return
    }
    if (key === 'htmlFor') {
      key = 'for'
    }
    if (key === 'className') {
      key = 'class'
    }

    attributes.set(key.toLowerCase(), escape(value))
  })
}


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {


var assign = __webpack_require__(124)
var forOwn = __webpack_require__(23)
var escape = __webpack_require__(33)
var kebabCase = __webpack_require__(121)

// data.style

module.exports = function styleModule (vnode, attributes) {
  var values = []
  var style = vnode.data.style || {}

  // merge in `delayed` properties
  if (style.delayed) {
    assign(style, style.delayed)
  }

  forOwn(style, function (value, key) {
    // omit hook objects
    if (typeof value === 'string' || typeof value === 'number') {
      values.push(kebabCase(key) + ': ' + escape(value))
    }
  })

  if (values.length) {
    attributes.set('style', values.join('; '))
  }
}


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NamespaceURIs = {
    "xlink": "http://www.w3.org/1999/xlink"
};
var booleanAttrs = ["allowfullscreen", "async", "autofocus", "autoplay", "checked", "compact", "controls", "declare",
    "default", "defaultchecked", "defaultmuted", "defaultselected", "defer", "disabled", "draggable",
    "enabled", "formnovalidate", "hidden", "indeterminate", "inert", "ismap", "itemscope", "loop", "multiple",
    "muted", "nohref", "noresize", "noshade", "novalidate", "nowrap", "open", "pauseonexit", "readonly",
    "required", "reversed", "scoped", "seamless", "selected", "sortable", "spellcheck", "translate",
    "truespeed", "typemustmatch", "visible"];
var booleanAttrsDict = Object.create(null);
for (var i = 0, len = booleanAttrs.length; i < len; i++) {
    booleanAttrsDict[booleanAttrs[i]] = true;
}
function updateAttrs(oldVnode, vnode) {
    var key, cur, old, elm = vnode.elm, oldAttrs = oldVnode.data.attrs, attrs = vnode.data.attrs, namespaceSplit;
    if (!oldAttrs && !attrs)
        return;
    if (oldAttrs === attrs)
        return;
    oldAttrs = oldAttrs || {};
    attrs = attrs || {};
    // update modified attributes, add new attributes
    for (key in attrs) {
        cur = attrs[key];
        old = oldAttrs[key];
        if (old !== cur) {
            if (!cur && booleanAttrsDict[key])
                elm.removeAttribute(key);
            else {
                namespaceSplit = key.split(":");
                if (namespaceSplit.length > 1 && NamespaceURIs.hasOwnProperty(namespaceSplit[0]))
                    elm.setAttributeNS(NamespaceURIs[namespaceSplit[0]], key, cur);
                else
                    elm.setAttribute(key, cur);
            }
        }
    }
    //remove removed attributes
    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
    // the other option is to remove all attributes with value == undefined
    for (key in oldAttrs) {
        if (!(key in attrs)) {
            elm.removeAttribute(key);
        }
    }
}
exports.attributesModule = { create: updateAttrs, update: updateAttrs };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.attributesModule;
//# sourceMappingURL=attributes.js.map

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function updateClass(oldVnode, vnode) {
    var cur, name, elm = vnode.elm, oldClass = oldVnode.data.class, klass = vnode.data.class;
    if (!oldClass && !klass)
        return;
    if (oldClass === klass)
        return;
    oldClass = oldClass || {};
    klass = klass || {};
    for (name in oldClass) {
        if (!klass[name]) {
            elm.classList.remove(name);
        }
    }
    for (name in klass) {
        cur = klass[name];
        if (cur !== oldClass[name]) {
            elm.classList[cur ? 'add' : 'remove'](name);
        }
    }
}
exports.classModule = { create: updateClass, update: updateClass };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.classModule;
//# sourceMappingURL=class.js.map

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var CAPS_REGEX = /[A-Z]/g;
function updateDataset(oldVnode, vnode) {
    var elm = vnode.elm, oldDataset = oldVnode.data.dataset, dataset = vnode.data.dataset, key;
    if (!oldDataset && !dataset)
        return;
    if (oldDataset === dataset)
        return;
    oldDataset = oldDataset || {};
    dataset = dataset || {};
    var d = elm.dataset;
    for (key in oldDataset) {
        if (!dataset[key]) {
            if (d) {
                delete d[key];
            }
            else {
                elm.removeAttribute('data-' + key.replace(CAPS_REGEX, '-$&').toLowerCase());
            }
        }
    }
    for (key in dataset) {
        if (oldDataset[key] !== dataset[key]) {
            if (d) {
                d[key] = dataset[key];
            }
            else {
                elm.setAttribute('data-' + key.replace(CAPS_REGEX, '-$&').toLowerCase(), dataset[key]);
            }
        }
    }
}
exports.datasetModule = { create: updateDataset, update: updateDataset };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.datasetModule;
//# sourceMappingURL=dataset.js.map

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function updateProps(oldVnode, vnode) {
    var key, cur, old, elm = vnode.elm, oldProps = oldVnode.data.props, props = vnode.data.props;
    if (!oldProps && !props)
        return;
    if (oldProps === props)
        return;
    oldProps = oldProps || {};
    props = props || {};
    for (key in oldProps) {
        if (!props[key]) {
            delete elm[key];
        }
    }
    for (key in props) {
        cur = props[key];
        old = oldProps[key];
        if (old !== cur && (key !== 'value' || elm[key] !== cur)) {
            elm[key] = cur;
        }
    }
}
exports.propsModule = { create: updateProps, update: updateProps };
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.propsModule;
//# sourceMappingURL=props.js.map

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var raf = (typeof window !== 'undefined' && window.requestAnimationFrame) || setTimeout;
var nextFrame = function (fn) { raf(function () { raf(fn); }); };
function setNextFrame(obj, prop, val) {
    nextFrame(function () { obj[prop] = val; });
}
function updateStyle(oldVnode, vnode) {
    var cur, name, elm = vnode.elm, oldStyle = oldVnode.data.style, style = vnode.data.style;
    if (!oldStyle && !style)
        return;
    if (oldStyle === style)
        return;
    oldStyle = oldStyle || {};
    style = style || {};
    var oldHasDel = 'delayed' in oldStyle;
    for (name in oldStyle) {
        if (!style[name]) {
            if (name[0] === '-' && name[1] === '-') {
                elm.style.removeProperty(name);
            }
            else {
                elm.style[name] = '';
            }
        }
    }
    for (name in style) {
        cur = style[name];
        if (name === 'delayed') {
            for (name in style.delayed) {
                cur = style.delayed[name];
                if (!oldHasDel || cur !== oldStyle.delayed[name]) {
                    setNextFrame(elm.style, name, cur);
                }
            }
        }
        else if (name !== 'remove' && cur !== oldStyle[name]) {
            if (name[0] === '-' && name[1] === '-') {
                elm.style.setProperty(name, cur);
            }
            else {
                elm.style[name] = cur;
            }
        }
    }
}
function applyDestroyStyle(vnode) {
    var style, name, elm = vnode.elm, s = vnode.data.style;
    if (!s || !(style = s.destroy))
        return;
    for (name in style) {
        elm.style[name] = style[name];
    }
}
function applyRemoveStyle(vnode, rm) {
    var s = vnode.data.style;
    if (!s || !s.remove) {
        rm();
        return;
    }
    var name, elm = vnode.elm, i = 0, compStyle, style = s.remove, amount = 0, applied = [];
    for (name in style) {
        applied.push(name);
        elm.style[name] = style[name];
    }
    compStyle = getComputedStyle(elm);
    var props = compStyle['transition-property'].split(', ');
    for (; i < props.length; ++i) {
        if (applied.indexOf(props[i]) !== -1)
            amount++;
    }
    elm.addEventListener('transitionend', function (ev) {
        if (ev.target === elm)
            --amount;
        if (amount === 0)
            rm();
    });
}
exports.styleModule = {
    create: updateStyle,
    update: updateStyle,
    destroy: applyDestroyStyle,
    remove: applyRemoveStyle
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.styleModule;
//# sourceMappingURL=style.js.map

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var vnode_1 = __webpack_require__(24);
var is = __webpack_require__(54);
var htmldomapi_1 = __webpack_require__(53);
function isUndef(s) { return s === undefined; }
function isDef(s) { return s !== undefined; }
var emptyNode = vnode_1.default('', {}, [], undefined, undefined);
function sameVnode(vnode1, vnode2) {
    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;
}
function isVnode(vnode) {
    return vnode.sel !== undefined;
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, map = {}, key, ch;
    for (i = beginIdx; i <= endIdx; ++i) {
        ch = children[i];
        if (ch != null) {
            key = ch.key;
            if (key !== undefined)
                map[key] = i;
        }
    }
    return map;
}
var hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];
var h_1 = __webpack_require__(18);
exports.h = h_1.h;
var thunk_1 = __webpack_require__(55);
exports.thunk = thunk_1.thunk;
function init(modules, domApi) {
    var i, j, cbs = {};
    var api = domApi !== undefined ? domApi : htmldomapi_1.default;
    for (i = 0; i < hooks.length; ++i) {
        cbs[hooks[i]] = [];
        for (j = 0; j < modules.length; ++j) {
            var hook = modules[j][hooks[i]];
            if (hook !== undefined) {
                cbs[hooks[i]].push(hook);
            }
        }
    }
    function emptyNodeAt(elm) {
        var id = elm.id ? '#' + elm.id : '';
        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';
        return vnode_1.default(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
    }
    function createRmCb(childElm, listeners) {
        return function rmCb() {
            if (--listeners === 0) {
                var parent_1 = api.parentNode(childElm);
                api.removeChild(parent_1, childElm);
            }
        };
    }
    function createElm(vnode, insertedVnodeQueue) {
        var i, data = vnode.data;
        if (data !== undefined) {
            if (isDef(i = data.hook) && isDef(i = i.init)) {
                i(vnode);
                data = vnode.data;
            }
        }
        var children = vnode.children, sel = vnode.sel;
        if (sel === '!') {
            if (isUndef(vnode.text)) {
                vnode.text = '';
            }
            vnode.elm = api.createComment(vnode.text);
        }
        else if (sel !== undefined) {
            // Parse selector
            var hashIdx = sel.indexOf('#');
            var dotIdx = sel.indexOf('.', hashIdx);
            var hash = hashIdx > 0 ? hashIdx : sel.length;
            var dot = dotIdx > 0 ? dotIdx : sel.length;
            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;
            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)
                : api.createElement(tag);
            if (hash < dot)
                elm.id = sel.slice(hash + 1, dot);
            if (dotIdx > 0)
                elm.className = sel.slice(dot + 1).replace(/\./g, ' ');
            for (i = 0; i < cbs.create.length; ++i)
                cbs.create[i](emptyNode, vnode);
            if (is.array(children)) {
                for (i = 0; i < children.length; ++i) {
                    var ch = children[i];
                    if (ch != null) {
                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                    }
                }
            }
            else if (is.primitive(vnode.text)) {
                api.appendChild(elm, api.createTextNode(vnode.text));
            }
            i = vnode.data.hook; // Reuse variable
            if (isDef(i)) {
                if (i.create)
                    i.create(emptyNode, vnode);
                if (i.insert)
                    insertedVnodeQueue.push(vnode);
            }
        }
        else {
            vnode.elm = api.createTextNode(vnode.text);
        }
        return vnode.elm;
    }
    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
        for (; startIdx <= endIdx; ++startIdx) {
            var ch = vnodes[startIdx];
            if (ch != null) {
                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
            }
        }
    }
    function invokeDestroyHook(vnode) {
        var i, j, data = vnode.data;
        if (data !== undefined) {
            if (isDef(i = data.hook) && isDef(i = i.destroy))
                i(vnode);
            for (i = 0; i < cbs.destroy.length; ++i)
                cbs.destroy[i](vnode);
            if (vnode.children !== undefined) {
                for (j = 0; j < vnode.children.length; ++j) {
                    i = vnode.children[j];
                    if (i != null && typeof i !== "string") {
                        invokeDestroyHook(i);
                    }
                }
            }
        }
    }
    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
        for (; startIdx <= endIdx; ++startIdx) {
            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];
            if (ch != null) {
                if (isDef(ch.sel)) {
                    invokeDestroyHook(ch);
                    listeners = cbs.remove.length + 1;
                    rm = createRmCb(ch.elm, listeners);
                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)
                        cbs.remove[i_1](ch, rm);
                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {
                        i_1(ch, rm);
                    }
                    else {
                        rm();
                    }
                }
                else {
                    api.removeChild(parentElm, ch.elm);
                }
            }
        }
    }
    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
        var oldStartIdx = 0, newStartIdx = 0;
        var oldEndIdx = oldCh.length - 1;
        var oldStartVnode = oldCh[0];
        var oldEndVnode = oldCh[oldEndIdx];
        var newEndIdx = newCh.length - 1;
        var newStartVnode = newCh[0];
        var newEndVnode = newCh[newEndIdx];
        var oldKeyToIdx;
        var idxInOld;
        var elmToMove;
        var before;
        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (oldStartVnode == null) {
                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
            }
            else if (oldEndVnode == null) {
                oldEndVnode = oldCh[--oldEndIdx];
            }
            else if (newStartVnode == null) {
                newStartVnode = newCh[++newStartIdx];
            }
            else if (newEndVnode == null) {
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newStartVnode)) {
                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                oldStartVnode = oldCh[++oldStartIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else if (sameVnode(oldEndVnode, newEndVnode)) {
                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                oldEndVnode = oldCh[--oldEndIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newEndVnode)) {
                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                oldStartVnode = oldCh[++oldStartIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldEndVnode, newStartVnode)) {
                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                oldEndVnode = oldCh[--oldEndIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                if (oldKeyToIdx === undefined) {
                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                }
                idxInOld = oldKeyToIdx[newStartVnode.key];
                if (isUndef(idxInOld)) {
                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    newStartVnode = newCh[++newStartIdx];
                }
                else {
                    elmToMove = oldCh[idxInOld];
                    if (elmToMove.sel !== newStartVnode.sel) {
                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    }
                    else {
                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                        oldCh[idxInOld] = undefined;
                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                    }
                    newStartVnode = newCh[++newStartIdx];
                }
            }
        }
        if (oldStartIdx > oldEndIdx) {
            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
        }
        else if (newStartIdx > newEndIdx) {
            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
        }
    }
    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
        var i, hook;
        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {
            i(oldVnode, vnode);
        }
        var elm = vnode.elm = oldVnode.elm;
        var oldCh = oldVnode.children;
        var ch = vnode.children;
        if (oldVnode === vnode)
            return;
        if (vnode.data !== undefined) {
            for (i = 0; i < cbs.update.length; ++i)
                cbs.update[i](oldVnode, vnode);
            i = vnode.data.hook;
            if (isDef(i) && isDef(i = i.update))
                i(oldVnode, vnode);
        }
        if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
                if (oldCh !== ch)
                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);
            }
            else if (isDef(ch)) {
                if (isDef(oldVnode.text))
                    api.setTextContent(elm, '');
                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            }
            else if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            else if (isDef(oldVnode.text)) {
                api.setTextContent(elm, '');
            }
        }
        else if (oldVnode.text !== vnode.text) {
            api.setTextContent(elm, vnode.text);
        }
        if (isDef(hook) && isDef(i = hook.postpatch)) {
            i(oldVnode, vnode);
        }
    }
    return function patch(oldVnode, vnode) {
        var i, elm, parent;
        var insertedVnodeQueue = [];
        for (i = 0; i < cbs.pre.length; ++i)
            cbs.pre[i]();
        if (!isVnode(oldVnode)) {
            oldVnode = emptyNodeAt(oldVnode);
        }
        if (sameVnode(oldVnode, vnode)) {
            patchVnode(oldVnode, vnode, insertedVnodeQueue);
        }
        else {
            elm = oldVnode.elm;
            parent = api.parentNode(elm);
            createElm(vnode, insertedVnodeQueue);
            if (parent !== null) {
                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                removeVnodes(parent, [oldVnode], 0, 0);
            }
        }
        for (i = 0; i < insertedVnodeQueue.length; ++i) {
            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
        }
        for (i = 0; i < cbs.post.length; ++i)
            cbs.post[i]();
        return vnode;
    };
}
exports.init = init;
//# sourceMappingURL=snabbdom.js.map

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var vnode_1 = __webpack_require__(24);
var htmldomapi_1 = __webpack_require__(53);
function toVNode(node, domApi) {
    var api = domApi !== undefined ? domApi : htmldomapi_1.default;
    var text;
    if (api.isElement(node)) {
        var id = node.id ? '#' + node.id : '';
        var cn = node.getAttribute('class');
        var c = cn ? '.' + cn.split(' ').join('.') : '';
        var sel = api.tagName(node).toLowerCase() + id + c;
        var attrs = {};
        var children = [];
        var name_1;
        var i = void 0, n = void 0;
        var elmAttrs = node.attributes;
        var elmChildren = node.childNodes;
        for (i = 0, n = elmAttrs.length; i < n; i++) {
            name_1 = elmAttrs[i].nodeName;
            if (name_1 !== 'id' && name_1 !== 'class') {
                attrs[name_1] = elmAttrs[i].nodeValue;
            }
        }
        for (i = 0, n = elmChildren.length; i < n; i++) {
            children.push(toVNode(elmChildren[i]));
        }
        return vnode_1.default(sel, { attrs: attrs }, children, undefined, node);
    }
    else if (api.isText(node)) {
        text = api.getTextContent(node);
        return vnode_1.default(undefined, undefined, undefined, text, node);
    }
    else if (api.isComment(node)) {
        text = api.getTextContent(node);
        return vnode_1.default('!', undefined, undefined, text, undefined);
    }
    else {
        return vnode_1.default('', {}, [], undefined, undefined);
    }
}
exports.toVNode = toVNode;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = toVNode;
//# sourceMappingURL=tovnode.js.map

/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(142);
/* harmony export (immutable) */ __webpack_exports__["default"] = switchPath;

function switchPathInputGuard(path, routes) {
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["a" /* isPattern */])(path)) {
        throw new Error("First parameter to switchPath must be a route path.");
    }
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* isRouteDefinition */])(routes)) {
        throw new Error("Second parameter to switchPath must be an object " +
            "containing route patterns.");
    }
}
function validatePath(sourcePath, matchedPath) {
    var sourceParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(sourcePath);
    var matchedParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(matchedPath);
    for (var i = 0; i < matchedParts.length; ++i) {
        if (matchedParts[i] !== sourceParts[i]) {
            return null;
        }
    }
    return "/" + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* extractPartial */])(sourcePath, matchedPath);
}
function betterMatch(candidate, reference) {
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* isNotNull */])(candidate)) {
        return false;
    }
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* isNotNull */])(reference)) {
        return true;
    }
    if (!validatePath(candidate, reference)) {
        return false;
    }
    return candidate.length >= reference.length;
}
function matchesWithParams(sourcePath, pattern) {
    var sourceParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(sourcePath);
    var patternParts = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["c" /* splitPath */])(pattern);
    var params = patternParts
        .map(function (part, i) { return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["f" /* isParam */])(part) ? sourceParts[i] : null; })
        .filter(__WEBPACK_IMPORTED_MODULE_0__util__["e" /* isNotNull */]);
    var matched = patternParts
        .every(function (part, i) { return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["f" /* isParam */])(part) || part === sourceParts[i]; });
    return matched ? params : [];
}
function getParamFnValue(paramFn, params) {
    var _paramFn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* isRouteDefinition */])(paramFn) ? paramFn["/"] : paramFn;
    return typeof _paramFn === "function" ? _paramFn.apply(void 0, params) : _paramFn;
}
function validate(_a) {
    var sourcePath = _a.sourcePath, matchedPath = _a.matchedPath, matchedValue = _a.matchedValue, routes = _a.routes;
    var path = matchedPath ? validatePath(sourcePath, matchedPath) : null;
    var value = matchedValue;
    if (!path) {
        path = routes["*"] ? sourcePath : null;
        value = path ? routes["*"] : null;
    }
    return { path: path, value: value };
}
function switchPath(sourcePath, routes) {
    switchPathInputGuard(sourcePath, routes);
    var matchedPath = null;
    var matchedValue = null;
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["g" /* traverseRoutes */])(routes, function matchPattern(pattern) {
        if (sourcePath.search(pattern) === 0 && betterMatch(pattern, matchedPath)) {
            matchedPath = pattern;
            matchedValue = routes[pattern];
        }
        var params = matchesWithParams(sourcePath, pattern).filter(Boolean);
        if (params.length > 0 && betterMatch(sourcePath, matchedPath)) {
            matchedPath = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* extractPartial */])(sourcePath, pattern);
            matchedValue = getParamFnValue(routes[pattern], params);
        }
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* isRouteDefinition */])(routes[pattern]) && params.length === 0) {
            if (sourcePath !== "/") {
                var child = switchPath(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["h" /* unprefixed */])(sourcePath, pattern) || "/", routes[pattern]);
                var nestedPath = pattern + child.path;
                if (child.path !== null &&
                    betterMatch(nestedPath, matchedPath)) {
                    matchedPath = nestedPath;
                    matchedValue = child.value;
                }
            }
        }
    });
    return validate({ sourcePath: sourcePath, matchedPath: matchedPath, matchedValue: matchedValue, routes: routes });
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isPattern;
/* harmony export (immutable) */ __webpack_exports__["b"] = isRouteDefinition;
/* harmony export (immutable) */ __webpack_exports__["g"] = traverseRoutes;
/* harmony export (immutable) */ __webpack_exports__["e"] = isNotNull;
/* harmony export (immutable) */ __webpack_exports__["c"] = splitPath;
/* harmony export (immutable) */ __webpack_exports__["f"] = isParam;
/* harmony export (immutable) */ __webpack_exports__["d"] = extractPartial;
/* harmony export (immutable) */ __webpack_exports__["h"] = unprefixed;
function isPattern(candidate) {
    return candidate.charAt(0) === "/" || candidate === "*";
}
function isRouteDefinition(candidate) {
    return !candidate || typeof candidate !== "object" ?
        false : isPattern(Object.keys(candidate)[0]);
}
function traverseRoutes(routes, callback) {
    var keys = Object.keys(routes);
    for (var i = 0; i < keys.length; ++i) {
        var pattern = keys[i];
        if (pattern === "*")
            continue;
        callback(pattern);
    }
}
function isNotNull(candidate) {
    return candidate !== null;
}
function splitPath(path) {
    return path.split("/").filter(function (s) { return !!s; });
}
function isParam(candidate) {
    return candidate.match(/:\w+/) !== null;
}
function extractPartial(sourcePath, pattern) {
    var patternParts = splitPath(pattern);
    var sourceParts = splitPath(sourcePath);
    var matchedParts = [];
    for (var i = 0; i < patternParts.length; ++i) {
        matchedParts.push(sourceParts[i]);
    }
    return matchedParts.filter(isNotNull).join("/");
}
function unprefixed(fullString, prefix) {
    return fullString.split(prefix)[1];
}
//# sourceMappingURL=util.js.map

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(144);


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = __webpack_require__(145);

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20), __webpack_require__(58)(module)))

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether 1.4.0 */

(function(root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    module.exports = factory(require, exports, module);
  } else {
    root.Tether = factory();
  }
}(this, function(require, exports, module) {

'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TetherBase = undefined;
if (typeof TetherBase === 'undefined') {
  TetherBase = { modules: [] };
}

var zeroElement = null;

// Same as native getBoundingClientRect, except it takes into account parent <frame> offsets
// if the element lies within a nested document (<frame> or <iframe>-like).
function getActualBoundingClientRect(node) {
  var boundingRect = node.getBoundingClientRect();

  // The original object returned by getBoundingClientRect is immutable, so we clone it
  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
  var rect = {};
  for (var k in boundingRect) {
    rect[k] = boundingRect[k];
  }

  if (node.ownerDocument !== document) {
    var _frameElement = node.ownerDocument.defaultView.frameElement;
    if (_frameElement) {
      var frameRect = getActualBoundingClientRect(_frameElement);
      rect.top += frameRect.top;
      rect.bottom += frameRect.top;
      rect.left += frameRect.left;
      rect.right += frameRect.left;
    }
  }

  return rect;
}

function getScrollParents(el) {
  // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  var computedStyle = getComputedStyle(el) || {};
  var position = computedStyle.position;
  var parents = [];

  if (position === 'fixed') {
    return [el];
  }

  var parent = el;
  while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {
    var style = undefined;
    try {
      style = getComputedStyle(parent);
    } catch (err) {}

    if (typeof style === 'undefined' || style === null) {
      parents.push(parent);
      return parents;
    }

    var _style = style;
    var overflow = _style.overflow;
    var overflowX = _style.overflowX;
    var overflowY = _style.overflowY;

    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
        parents.push(parent);
      }
    }
  }

  parents.push(el.ownerDocument.body);

  // If the node is within a frame, account for the parent window scroll
  if (el.ownerDocument !== document) {
    parents.push(el.ownerDocument.defaultView);
  }

  return parents;
}

var uniqueId = (function () {
  var id = 0;
  return function () {
    return ++id;
  };
})();

var zeroPosCache = {};
var getOrigin = function getOrigin() {
  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
  // jitter as the user scrolls that messes with our ability to detect if two positions
  // are equivilant or not.  We place an element at the top left of the page that will
  // get the same jitter, so we can cancel the two out.
  var node = zeroElement;
  if (!node || !document.body.contains(node)) {
    node = document.createElement('div');
    node.setAttribute('data-tether-id', uniqueId());
    extend(node.style, {
      top: 0,
      left: 0,
      position: 'absolute'
    });

    document.body.appendChild(node);

    zeroElement = node;
  }

  var id = node.getAttribute('data-tether-id');
  if (typeof zeroPosCache[id] === 'undefined') {
    zeroPosCache[id] = getActualBoundingClientRect(node);

    // Clear the cache when this position call is done
    defer(function () {
      delete zeroPosCache[id];
    });
  }

  return zeroPosCache[id];
};

function removeUtilElements() {
  if (zeroElement) {
    document.body.removeChild(zeroElement);
  }
  zeroElement = null;
};

function getBounds(el) {
  var doc = undefined;
  if (el === document) {
    doc = document;
    el = document.documentElement;
  } else {
    doc = el.ownerDocument;
  }

  var docEl = doc.documentElement;

  var box = getActualBoundingClientRect(el);

  var origin = getOrigin();

  box.top -= origin.top;
  box.left -= origin.left;

  if (typeof box.width === 'undefined') {
    box.width = document.body.scrollWidth - box.left - box.right;
  }
  if (typeof box.height === 'undefined') {
    box.height = document.body.scrollHeight - box.top - box.bottom;
  }

  box.top = box.top - docEl.clientTop;
  box.left = box.left - docEl.clientLeft;
  box.right = doc.body.clientWidth - box.width - box.left;
  box.bottom = doc.body.clientHeight - box.height - box.top;

  return box;
}

function getOffsetParent(el) {
  return el.offsetParent || document.documentElement;
}

var _scrollBarSize = null;
function getScrollBarSize() {
  if (_scrollBarSize) {
    return _scrollBarSize;
  }
  var inner = document.createElement('div');
  inner.style.width = '100%';
  inner.style.height = '200px';

  var outer = document.createElement('div');
  extend(outer.style, {
    position: 'absolute',
    top: 0,
    left: 0,
    pointerEvents: 'none',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });

  outer.appendChild(inner);

  document.body.appendChild(outer);

  var widthContained = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var widthScroll = inner.offsetWidth;

  if (widthContained === widthScroll) {
    widthScroll = outer.clientWidth;
  }

  document.body.removeChild(outer);

  var width = widthContained - widthScroll;

  _scrollBarSize = { width: width, height: width };
  return _scrollBarSize;
}

function extend() {
  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var args = [];

  Array.prototype.push.apply(args, arguments);

  args.slice(1).forEach(function (obj) {
    if (obj) {
      for (var key in obj) {
        if (({}).hasOwnProperty.call(obj, key)) {
          out[key] = obj[key];
        }
      }
    }
  });

  return out;
}

function removeClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.remove(cls);
      }
    });
  } else {
    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
    var className = getClassName(el).replace(regex, ' ');
    setClassName(el, className);
  }
}

function addClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    name.split(' ').forEach(function (cls) {
      if (cls.trim()) {
        el.classList.add(cls);
      }
    });
  } else {
    removeClass(el, name);
    var cls = getClassName(el) + (' ' + name);
    setClassName(el, cls);
  }
}

function hasClass(el, name) {
  if (typeof el.classList !== 'undefined') {
    return el.classList.contains(name);
  }
  var className = getClassName(el);
  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
}

function getClassName(el) {
  // Can't use just SVGAnimatedString here since nodes within a Frame in IE have
  // completely separately SVGAnimatedString base classes
  if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {
    return el.className.baseVal;
  }
  return el.className;
}

function setClassName(el, className) {
  el.setAttribute('class', className);
}

function updateClasses(el, add, all) {
  // Of the set of 'all' classes, we need the 'add' classes, and only the
  // 'add' classes to be set.
  all.forEach(function (cls) {
    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
      removeClass(el, cls);
    }
  });

  add.forEach(function (cls) {
    if (!hasClass(el, cls)) {
      addClass(el, cls);
    }
  });
}

var deferred = [];

var defer = function defer(fn) {
  deferred.push(fn);
};

var flush = function flush() {
  var fn = undefined;
  while (fn = deferred.pop()) {
    fn();
  }
};

var Evented = (function () {
  function Evented() {
    _classCallCheck(this, Evented);
  }

  _createClass(Evented, [{
    key: 'on',
    value: function on(event, handler, ctx) {
      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

      if (typeof this.bindings === 'undefined') {
        this.bindings = {};
      }
      if (typeof this.bindings[event] === 'undefined') {
        this.bindings[event] = [];
      }
      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
    }
  }, {
    key: 'once',
    value: function once(event, handler, ctx) {
      this.on(event, handler, ctx, true);
    }
  }, {
    key: 'off',
    value: function off(event, handler) {
      if (typeof this.bindings === 'undefined' || typeof this.bindings[event] === 'undefined') {
        return;
      }

      if (typeof handler === 'undefined') {
        delete this.bindings[event];
      } else {
        var i = 0;
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }, {
    key: 'trigger',
    value: function trigger(event) {
      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
        var i = 0;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        while (i < this.bindings[event].length) {
          var _bindings$event$i = this.bindings[event][i];
          var handler = _bindings$event$i.handler;
          var ctx = _bindings$event$i.ctx;
          var once = _bindings$event$i.once;

          var context = ctx;
          if (typeof context === 'undefined') {
            context = this;
          }

          handler.apply(context, args);

          if (once) {
            this.bindings[event].splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    }
  }]);

  return Evented;
})();

TetherBase.Utils = {
  getActualBoundingClientRect: getActualBoundingClientRect,
  getScrollParents: getScrollParents,
  getBounds: getBounds,
  getOffsetParent: getOffsetParent,
  extend: extend,
  addClass: addClass,
  removeClass: removeClass,
  hasClass: hasClass,
  updateClasses: updateClasses,
  defer: defer,
  flush: flush,
  uniqueId: uniqueId,
  Evented: Evented,
  getScrollBarSize: getScrollBarSize,
  removeUtilElements: removeUtilElements
};
/* globals TetherBase, performance */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (typeof TetherBase === 'undefined') {
  throw new Error('You must include the utils.js file before tether.js');
}

var _TetherBase$Utils = TetherBase.Utils;
var getScrollParents = _TetherBase$Utils.getScrollParents;
var getBounds = _TetherBase$Utils.getBounds;
var getOffsetParent = _TetherBase$Utils.getOffsetParent;
var extend = _TetherBase$Utils.extend;
var addClass = _TetherBase$Utils.addClass;
var removeClass = _TetherBase$Utils.removeClass;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;
var flush = _TetherBase$Utils.flush;
var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;
var removeUtilElements = _TetherBase$Utils.removeUtilElements;

function within(a, b) {
  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

  return a + diff >= b && b >= a - diff;
}

var transformKey = (function () {
  if (typeof document === 'undefined') {
    return '';
  }
  var el = document.createElement('div');

  var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
  for (var i = 0; i < transforms.length; ++i) {
    var key = transforms[i];
    if (el.style[key] !== undefined) {
      return key;
    }
  }
})();

var tethers = [];

var position = function position() {
  tethers.forEach(function (tether) {
    tether.position(false);
  });
  flush();
};

function now() {
  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
    return performance.now();
  }
  return +new Date();
}

(function () {
  var lastCall = null;
  var lastDuration = null;
  var pendingTimeout = null;

  var tick = function tick() {
    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
      // We voluntarily throttle ourselves if we can't manage 60fps
      lastDuration = Math.min(lastDuration - 16, 250);

      // Just in case this is the last event, remember to position just once more
      pendingTimeout = setTimeout(tick, 250);
      return;
    }

    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
      // Some browsers call events a little too frequently, refuse to run more than is reasonable
      return;
    }

    if (pendingTimeout != null) {
      clearTimeout(pendingTimeout);
      pendingTimeout = null;
    }

    lastCall = now();
    position();
    lastDuration = now() - lastCall;
  };

  if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {
    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
      window.addEventListener(event, tick);
    });
  }
})();

var MIRROR_LR = {
  center: 'center',
  left: 'right',
  right: 'left'
};

var MIRROR_TB = {
  middle: 'middle',
  top: 'bottom',
  bottom: 'top'
};

var OFFSET_MAP = {
  top: 0,
  left: 0,
  middle: '50%',
  center: '50%',
  bottom: '100%',
  right: '100%'
};

var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (left === 'auto') {
    left = MIRROR_LR[relativeToAttachment.left];
  }

  if (top === 'auto') {
    top = MIRROR_TB[relativeToAttachment.top];
  }

  return { left: left, top: top };
};

var attachmentToOffset = function attachmentToOffset(attachment) {
  var left = attachment.left;
  var top = attachment.top;

  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
    left = OFFSET_MAP[attachment.left];
  }

  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
    top = OFFSET_MAP[attachment.top];
  }

  return { left: left, top: top };
};

function addOffset() {
  var out = { top: 0, left: 0 };

  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
    offsets[_key] = arguments[_key];
  }

  offsets.forEach(function (_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (typeof top === 'string') {
      top = parseFloat(top, 10);
    }
    if (typeof left === 'string') {
      left = parseFloat(left, 10);
    }

    out.top += top;
    out.left += left;
  });

  return out;
}

function offsetToPx(offset, size) {
  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
  }
  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
  }

  return offset;
}

var parseOffset = function parseOffset(value) {
  var _value$split = value.split(' ');

  var _value$split2 = _slicedToArray(_value$split, 2);

  var top = _value$split2[0];
  var left = _value$split2[1];

  return { top: top, left: left };
};
var parseAttachment = parseOffset;

var TetherClass = (function (_Evented) {
  _inherits(TetherClass, _Evented);

  function TetherClass(options) {
    var _this = this;

    _classCallCheck(this, TetherClass);

    _get(Object.getPrototypeOf(TetherClass.prototype), 'constructor', this).call(this);
    this.position = this.position.bind(this);

    tethers.push(this);

    this.history = [];

    this.setOptions(options, false);

    TetherBase.modules.forEach(function (module) {
      if (typeof module.initialize !== 'undefined') {
        module.initialize.call(_this);
      }
    });

    this.position();
  }

  _createClass(TetherClass, [{
    key: 'getClass',
    value: function getClass() {
      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var classes = this.options.classes;

      if (typeof classes !== 'undefined' && classes[key]) {
        return this.options.classes[key];
      } else if (this.options.classPrefix) {
        return this.options.classPrefix + '-' + key;
      } else {
        return key;
      }
    }
  }, {
    key: 'setOptions',
    value: function setOptions(options) {
      var _this2 = this;

      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var defaults = {
        offset: '0 0',
        targetOffset: '0 0',
        targetAttachment: 'auto auto',
        classPrefix: 'tether'
      };

      this.options = extend(defaults, options);

      var _options = this.options;
      var element = _options.element;
      var target = _options.target;
      var targetModifier = _options.targetModifier;

      this.element = element;
      this.target = target;
      this.targetModifier = targetModifier;

      if (this.target === 'viewport') {
        this.target = document.body;
        this.targetModifier = 'visible';
      } else if (this.target === 'scroll-handle') {
        this.target = document.body;
        this.targetModifier = 'scroll-handle';
      }

      ['element', 'target'].forEach(function (key) {
        if (typeof _this2[key] === 'undefined') {
          throw new Error('Tether Error: Both element and target must be defined');
        }

        if (typeof _this2[key].jquery !== 'undefined') {
          _this2[key] = _this2[key][0];
        } else if (typeof _this2[key] === 'string') {
          _this2[key] = document.querySelector(_this2[key]);
        }
      });

      addClass(this.element, this.getClass('element'));
      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('target'));
      }

      if (!this.options.attachment) {
        throw new Error('Tether Error: You must provide an attachment');
      }

      this.targetAttachment = parseAttachment(this.options.targetAttachment);
      this.attachment = parseAttachment(this.options.attachment);
      this.offset = parseOffset(this.options.offset);
      this.targetOffset = parseOffset(this.options.targetOffset);

      if (typeof this.scrollParents !== 'undefined') {
        this.disable();
      }

      if (this.targetModifier === 'scroll-handle') {
        this.scrollParents = [this.target];
      } else {
        this.scrollParents = getScrollParents(this.target);
      }

      if (!(this.options.enabled === false)) {
        this.enable(pos);
      }
    }
  }, {
    key: 'getTargetBounds',
    value: function getTargetBounds() {
      if (typeof this.targetModifier !== 'undefined') {
        if (this.targetModifier === 'visible') {
          if (this.target === document.body) {
            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
          } else {
            var bounds = getBounds(this.target);

            var out = {
              height: bounds.height,
              width: bounds.width,
              top: bounds.top,
              left: bounds.left
            };

            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
            out.height = Math.min(innerHeight, out.height);
            out.height -= 2;

            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
            out.width = Math.min(innerWidth, out.width);
            out.width -= 2;

            if (out.top < pageYOffset) {
              out.top = pageYOffset;
            }
            if (out.left < pageXOffset) {
              out.left = pageXOffset;
            }

            return out;
          }
        } else if (this.targetModifier === 'scroll-handle') {
          var bounds = undefined;
          var target = this.target;
          if (target === document.body) {
            target = document.documentElement;

            bounds = {
              left: pageXOffset,
              top: pageYOffset,
              height: innerHeight,
              width: innerWidth
            };
          } else {
            bounds = getBounds(target);
          }

          var style = getComputedStyle(target);

          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;

          var scrollBottom = 0;
          if (hasBottomScroll) {
            scrollBottom = 15;
          }

          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;

          var out = {
            width: 15,
            height: height * 0.975 * (height / target.scrollHeight),
            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
          };

          var fitAdj = 0;
          if (height < 408 && this.target === document.body) {
            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
          }

          if (this.target !== document.body) {
            out.height = Math.max(out.height, 24);
          }

          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);

          if (this.target === document.body) {
            out.height = Math.max(out.height, 24);
          }

          return out;
        }
      } else {
        return getBounds(this.target);
      }
    }
  }, {
    key: 'clearCache',
    value: function clearCache() {
      this._cache = {};
    }
  }, {
    key: 'cache',
    value: function cache(k, getter) {
      // More than one module will often need the same DOM info, so
      // we keep a cache which is cleared on each position call
      if (typeof this._cache === 'undefined') {
        this._cache = {};
      }

      if (typeof this._cache[k] === 'undefined') {
        this._cache[k] = getter.call(this);
      }

      return this._cache[k];
    }
  }, {
    key: 'enable',
    value: function enable() {
      var _this3 = this;

      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      if (!(this.options.addTargetClasses === false)) {
        addClass(this.target, this.getClass('enabled'));
      }
      addClass(this.element, this.getClass('enabled'));
      this.enabled = true;

      this.scrollParents.forEach(function (parent) {
        if (parent !== _this3.target.ownerDocument) {
          parent.addEventListener('scroll', _this3.position);
        }
      });

      if (pos) {
        this.position();
      }
    }
  }, {
    key: 'disable',
    value: function disable() {
      var _this4 = this;

      removeClass(this.target, this.getClass('enabled'));
      removeClass(this.element, this.getClass('enabled'));
      this.enabled = false;

      if (typeof this.scrollParents !== 'undefined') {
        this.scrollParents.forEach(function (parent) {
          parent.removeEventListener('scroll', _this4.position);
        });
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this5 = this;

      this.disable();

      tethers.forEach(function (tether, i) {
        if (tether === _this5) {
          tethers.splice(i, 1);
        }
      });

      // Remove any elements we were using for convenience from the DOM
      if (tethers.length === 0) {
        removeUtilElements();
      }
    }
  }, {
    key: 'updateAttachClasses',
    value: function updateAttachClasses(elementAttach, targetAttach) {
      var _this6 = this;

      elementAttach = elementAttach || this.attachment;
      targetAttach = targetAttach || this.targetAttachment;
      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];

      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
        // updateAttachClasses can be called more than once in a position call, so
        // we need to clean up after ourselves such that when the last defer gets
        // ran it doesn't add any extra classes from previous calls.
        this._addAttachClasses.splice(0, this._addAttachClasses.length);
      }

      if (typeof this._addAttachClasses === 'undefined') {
        this._addAttachClasses = [];
      }
      var add = this._addAttachClasses;

      if (elementAttach.top) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
      }
      if (elementAttach.left) {
        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
      }
      if (targetAttach.top) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
      }
      if (targetAttach.left) {
        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
      }

      var all = [];
      sides.forEach(function (side) {
        all.push(_this6.getClass('element-attached') + '-' + side);
        all.push(_this6.getClass('target-attached') + '-' + side);
      });

      defer(function () {
        if (!(typeof _this6._addAttachClasses !== 'undefined')) {
          return;
        }

        updateClasses(_this6.element, _this6._addAttachClasses, all);
        if (!(_this6.options.addTargetClasses === false)) {
          updateClasses(_this6.target, _this6._addAttachClasses, all);
        }

        delete _this6._addAttachClasses;
      });
    }
  }, {
    key: 'position',
    value: function position() {
      var _this7 = this;

      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
      // tethers (in which case call Tether.Utils.flush yourself when you're done)

      if (!this.enabled) {
        return;
      }

      this.clearCache();

      // Turn 'auto' attachments into the appropriate corner or edge
      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);

      this.updateAttachClasses(this.attachment, targetAttachment);

      var elementPos = this.cache('element-bounds', function () {
        return getBounds(_this7.element);
      });

      var width = elementPos.width;
      var height = elementPos.height;

      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
        var _lastSize = this.lastSize;

        // We cache the height and width to make it possible to position elements that are
        // getting hidden.
        width = _lastSize.width;
        height = _lastSize.height;
      } else {
        this.lastSize = { width: width, height: height };
      }

      var targetPos = this.cache('target-bounds', function () {
        return _this7.getTargetBounds();
      });
      var targetSize = targetPos;

      // Get an actual px offset from the attachment
      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);

      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);

      // Add the manually provided offset
      offset = addOffset(offset, manualOffset);
      targetOffset = addOffset(targetOffset, manualTargetOffset);

      // It's now our goal to make (element position + offset) == (target position + target offset)
      var left = targetPos.left + targetOffset.left - offset.left;
      var top = targetPos.top + targetOffset.top - offset.top;

      for (var i = 0; i < TetherBase.modules.length; ++i) {
        var _module2 = TetherBase.modules[i];
        var ret = _module2.position.call(this, {
          left: left,
          top: top,
          targetAttachment: targetAttachment,
          targetPos: targetPos,
          elementPos: elementPos,
          offset: offset,
          targetOffset: targetOffset,
          manualOffset: manualOffset,
          manualTargetOffset: manualTargetOffset,
          scrollbarSize: scrollbarSize,
          attachment: this.attachment
        });

        if (ret === false) {
          return false;
        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
          continue;
        } else {
          top = ret.top;
          left = ret.left;
        }
      }

      // We describe the position three different ways to give the optimizer
      // a chance to decide the best possible way to position the element
      // with the fewest repaints.
      var next = {
        // It's position relative to the page (absolute positioning when
        // the element is a child of the body)
        page: {
          top: top,
          left: left
        },

        // It's position relative to the viewport (fixed positioning)
        viewport: {
          top: top - pageYOffset,
          bottom: pageYOffset - top - height + innerHeight,
          left: left - pageXOffset,
          right: pageXOffset - left - width + innerWidth
        }
      };

      var doc = this.target.ownerDocument;
      var win = doc.defaultView;

      var scrollbarSize = undefined;
      if (win.innerHeight > doc.documentElement.clientHeight) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.bottom -= scrollbarSize.height;
      }

      if (win.innerWidth > doc.documentElement.clientWidth) {
        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
        next.viewport.right -= scrollbarSize.width;
      }

      if (['', 'static'].indexOf(doc.body.style.position) === -1 || ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {
        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
        next.page.bottom = doc.body.scrollHeight - top - height;
        next.page.right = doc.body.scrollWidth - left - width;
      }

      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
        (function () {
          var offsetParent = _this7.cache('target-offsetparent', function () {
            return getOffsetParent(_this7.target);
          });
          var offsetPosition = _this7.cache('target-offsetparent-bounds', function () {
            return getBounds(offsetParent);
          });
          var offsetParentStyle = getComputedStyle(offsetParent);
          var offsetParentSize = offsetPosition;

          var offsetBorder = {};
          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
          });

          offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
          offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;

          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
              // We're within the visible part of the target's scroll parent
              var scrollTop = offsetParent.scrollTop;
              var scrollLeft = offsetParent.scrollLeft;

              // It's position relative to the target's offset parent (absolute positioning when
              // the element is moved to be a child of the target's offset parent).
              next.offset = {
                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
              };
            }
          }
        })();
      }

      // We could also travel up the DOM and try each containing context, rather than only
      // looking at the body, but we're gonna get diminishing returns.

      this.move(next);

      this.history.unshift(next);

      if (this.history.length > 3) {
        this.history.pop();
      }

      if (flushChanges) {
        flush();
      }

      return true;
    }

    // THE ISSUE
  }, {
    key: 'move',
    value: function move(pos) {
      var _this8 = this;

      if (!(typeof this.element.parentNode !== 'undefined')) {
        return;
      }

      var same = {};

      for (var type in pos) {
        same[type] = {};

        for (var key in pos[type]) {
          var found = false;

          for (var i = 0; i < this.history.length; ++i) {
            var point = this.history[i];
            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
              found = true;
              break;
            }
          }

          if (!found) {
            same[type][key] = true;
          }
        }
      }

      var css = { top: '', left: '', right: '', bottom: '' };

      var transcribe = function transcribe(_same, _pos) {
        var hasOptimizations = typeof _this8.options.optimizations !== 'undefined';
        var gpu = hasOptimizations ? _this8.options.optimizations.gpu : null;
        if (gpu !== false) {
          var yPos = undefined,
              xPos = undefined;
          if (_same.top) {
            css.top = 0;
            yPos = _pos.top;
          } else {
            css.bottom = 0;
            yPos = -_pos.bottom;
          }

          if (_same.left) {
            css.left = 0;
            xPos = _pos.left;
          } else {
            css.right = 0;
            xPos = -_pos.right;
          }

          if (window.matchMedia) {
            // HubSpot/tether#207
            var retina = window.matchMedia('only screen and (min-resolution: 1.3dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3)').matches;
            if (!retina) {
              xPos = Math.round(xPos);
              yPos = Math.round(yPos);
            }
          }

          css[transformKey] = 'translateX(' + xPos + 'px) translateY(' + yPos + 'px)';

          if (transformKey !== 'msTransform') {
            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
            // but IE9 doesn't support 3d transforms and will choke.
            css[transformKey] += " translateZ(0)";
          }
        } else {
          if (_same.top) {
            css.top = _pos.top + 'px';
          } else {
            css.bottom = _pos.bottom + 'px';
          }

          if (_same.left) {
            css.left = _pos.left + 'px';
          } else {
            css.right = _pos.right + 'px';
          }
        }
      };

      var moved = false;
      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
        css.position = 'absolute';
        transcribe(same.page, pos.page);
      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
        css.position = 'fixed';
        transcribe(same.viewport, pos.viewport);
      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
        (function () {
          css.position = 'absolute';
          var offsetParent = _this8.cache('target-offsetparent', function () {
            return getOffsetParent(_this8.target);
          });

          if (getOffsetParent(_this8.element) !== offsetParent) {
            defer(function () {
              _this8.element.parentNode.removeChild(_this8.element);
              offsetParent.appendChild(_this8.element);
            });
          }

          transcribe(same.offset, pos.offset);
          moved = true;
        })();
      } else {
        css.position = 'absolute';
        transcribe({ top: true, left: true }, pos.page);
      }

      if (!moved) {
        if (this.options.bodyElement) {
          this.options.bodyElement.appendChild(this.element);
        } else {
          var offsetParentIsBody = true;
          var currentNode = this.element.parentNode;
          while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {
            if (getComputedStyle(currentNode).position !== 'static') {
              offsetParentIsBody = false;
              break;
            }

            currentNode = currentNode.parentNode;
          }

          if (!offsetParentIsBody) {
            this.element.parentNode.removeChild(this.element);
            this.element.ownerDocument.body.appendChild(this.element);
          }
        }
      }

      // Any css change will trigger a repaint, so let's avoid one if nothing changed
      var writeCSS = {};
      var write = false;
      for (var key in css) {
        var val = css[key];
        var elVal = this.element.style[key];

        if (elVal !== val) {
          write = true;
          writeCSS[key] = val;
        }
      }

      if (write) {
        defer(function () {
          extend(_this8.element.style, writeCSS);
          _this8.trigger('repositioned');
        });
      }
    }
  }]);

  return TetherClass;
})(Evented);

TetherClass.modules = [];

TetherBase.position = position;

var Tether = extend(TetherClass, TetherBase);
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var extend = _TetherBase$Utils.extend;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

function getBoundingRect(tether, to) {
  if (to === 'scrollParent') {
    to = tether.scrollParents[0];
  } else if (to === 'window') {
    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
  }

  if (to === document) {
    to = to.documentElement;
  }

  if (typeof to.nodeType !== 'undefined') {
    (function () {
      var node = to;
      var size = getBounds(to);
      var pos = size;
      var style = getComputedStyle(to);

      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];

      // Account any parent Frames scroll offset
      if (node.ownerDocument !== document) {
        var win = node.ownerDocument.defaultView;
        to[0] += win.pageXOffset;
        to[1] += win.pageYOffset;
        to[2] += win.pageXOffset;
        to[3] += win.pageYOffset;
      }

      BOUNDS_FORMAT.forEach(function (side, i) {
        side = side[0].toUpperCase() + side.substr(1);
        if (side === 'Top' || side === 'Left') {
          to[i] += parseFloat(style['border' + side + 'Width']);
        } else {
          to[i] -= parseFloat(style['border' + side + 'Width']);
        }
      });
    })();
  }

  return to;
}

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;
    var targetAttachment = _ref.targetAttachment;

    if (!this.options.constraints) {
      return true;
    }

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
      var _lastSize = this.lastSize;

      // Handle the item getting hidden as a result of our positioning without glitching
      // the classes in and out
      width = _lastSize.width;
      height = _lastSize.height;
    }

    var targetSize = this.cache('target-bounds', function () {
      return _this.getTargetBounds();
    });

    var targetHeight = targetSize.height;
    var targetWidth = targetSize.width;

    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];

    this.options.constraints.forEach(function (constraint) {
      var outOfBoundsClass = constraint.outOfBoundsClass;
      var pinnedClass = constraint.pinnedClass;

      if (outOfBoundsClass) {
        allClasses.push(outOfBoundsClass);
      }
      if (pinnedClass) {
        allClasses.push(pinnedClass);
      }
    });

    allClasses.forEach(function (cls) {
      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
        allClasses.push(cls + '-' + side);
      });
    });

    var addClasses = [];

    var tAttachment = extend({}, targetAttachment);
    var eAttachment = extend({}, this.attachment);

    this.options.constraints.forEach(function (constraint) {
      var to = constraint.to;
      var attachment = constraint.attachment;
      var pin = constraint.pin;

      if (typeof attachment === 'undefined') {
        attachment = '';
      }

      var changeAttachX = undefined,
          changeAttachY = undefined;
      if (attachment.indexOf(' ') >= 0) {
        var _attachment$split = attachment.split(' ');

        var _attachment$split2 = _slicedToArray(_attachment$split, 2);

        changeAttachY = _attachment$split2[0];
        changeAttachX = _attachment$split2[1];
      } else {
        changeAttachX = changeAttachY = attachment;
      }

      var bounds = getBoundingRect(_this, to);

      if (changeAttachY === 'target' || changeAttachY === 'both') {
        if (top < bounds[1] && tAttachment.top === 'top') {
          top += targetHeight;
          tAttachment.top = 'bottom';
        }

        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
          top -= targetHeight;
          tAttachment.top = 'top';
        }
      }

      if (changeAttachY === 'together') {
        if (tAttachment.top === 'top') {
          if (eAttachment.top === 'bottom' && top < bounds[1]) {
            top += targetHeight;
            tAttachment.top = 'bottom';

            top += height;
            eAttachment.top = 'top';
          } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {
            top -= height - targetHeight;
            tAttachment.top = 'bottom';

            eAttachment.top = 'bottom';
          }
        }

        if (tAttachment.top === 'bottom') {
          if (eAttachment.top === 'top' && top + height > bounds[3]) {
            top -= targetHeight;
            tAttachment.top = 'top';

            top -= height;
            eAttachment.top = 'bottom';
          } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {
            top += height - targetHeight;
            tAttachment.top = 'top';

            eAttachment.top = 'top';
          }
        }

        if (tAttachment.top === 'middle') {
          if (top + height > bounds[3] && eAttachment.top === 'top') {
            top -= height;
            eAttachment.top = 'bottom';
          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
            top += height;
            eAttachment.top = 'top';
          }
        }
      }

      if (changeAttachX === 'target' || changeAttachX === 'both') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          left += targetWidth;
          tAttachment.left = 'right';
        }

        if (left + width > bounds[2] && tAttachment.left === 'right') {
          left -= targetWidth;
          tAttachment.left = 'left';
        }
      }

      if (changeAttachX === 'together') {
        if (left < bounds[0] && tAttachment.left === 'left') {
          if (eAttachment.left === 'right') {
            left += targetWidth;
            tAttachment.left = 'right';

            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'left') {
            left += targetWidth;
            tAttachment.left = 'right';

            left -= width;
            eAttachment.left = 'right';
          }
        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
          if (eAttachment.left === 'left') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'right') {
            left -= targetWidth;
            tAttachment.left = 'left';

            left += width;
            eAttachment.left = 'left';
          }
        } else if (tAttachment.left === 'center') {
          if (left + width > bounds[2] && eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (left < bounds[0] && eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          }
        }
      }

      if (changeAttachY === 'element' || changeAttachY === 'both') {
        if (top < bounds[1] && eAttachment.top === 'bottom') {
          top += height;
          eAttachment.top = 'top';
        }

        if (top + height > bounds[3] && eAttachment.top === 'top') {
          top -= height;
          eAttachment.top = 'bottom';
        }
      }

      if (changeAttachX === 'element' || changeAttachX === 'both') {
        if (left < bounds[0]) {
          if (eAttachment.left === 'right') {
            left += width;
            eAttachment.left = 'left';
          } else if (eAttachment.left === 'center') {
            left += width / 2;
            eAttachment.left = 'left';
          }
        }

        if (left + width > bounds[2]) {
          if (eAttachment.left === 'left') {
            left -= width;
            eAttachment.left = 'right';
          } else if (eAttachment.left === 'center') {
            left -= width / 2;
            eAttachment.left = 'right';
          }
        }
      }

      if (typeof pin === 'string') {
        pin = pin.split(',').map(function (p) {
          return p.trim();
        });
      } else if (pin === true) {
        pin = ['top', 'left', 'right', 'bottom'];
      }

      pin = pin || [];

      var pinned = [];
      var oob = [];

      if (top < bounds[1]) {
        if (pin.indexOf('top') >= 0) {
          top = bounds[1];
          pinned.push('top');
        } else {
          oob.push('top');
        }
      }

      if (top + height > bounds[3]) {
        if (pin.indexOf('bottom') >= 0) {
          top = bounds[3] - height;
          pinned.push('bottom');
        } else {
          oob.push('bottom');
        }
      }

      if (left < bounds[0]) {
        if (pin.indexOf('left') >= 0) {
          left = bounds[0];
          pinned.push('left');
        } else {
          oob.push('left');
        }
      }

      if (left + width > bounds[2]) {
        if (pin.indexOf('right') >= 0) {
          left = bounds[2] - width;
          pinned.push('right');
        } else {
          oob.push('right');
        }
      }

      if (pinned.length) {
        (function () {
          var pinnedClass = undefined;
          if (typeof _this.options.pinnedClass !== 'undefined') {
            pinnedClass = _this.options.pinnedClass;
          } else {
            pinnedClass = _this.getClass('pinned');
          }

          addClasses.push(pinnedClass);
          pinned.forEach(function (side) {
            addClasses.push(pinnedClass + '-' + side);
          });
        })();
      }

      if (oob.length) {
        (function () {
          var oobClass = undefined;
          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
            oobClass = _this.options.outOfBoundsClass;
          } else {
            oobClass = _this.getClass('out-of-bounds');
          }

          addClasses.push(oobClass);
          oob.forEach(function (side) {
            addClasses.push(oobClass + '-' + side);
          });
        })();
      }

      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
        eAttachment.left = tAttachment.left = false;
      }
      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
        eAttachment.top = tAttachment.top = false;
      }

      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
        _this.updateAttachClasses(eAttachment, tAttachment);
        _this.trigger('update', {
          attachment: eAttachment,
          targetAttachment: tAttachment
        });
      }
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return { top: top, left: left };
  }
});
/* globals TetherBase */

'use strict';

var _TetherBase$Utils = TetherBase.Utils;
var getBounds = _TetherBase$Utils.getBounds;
var updateClasses = _TetherBase$Utils.updateClasses;
var defer = _TetherBase$Utils.defer;

TetherBase.modules.push({
  position: function position(_ref) {
    var _this = this;

    var top = _ref.top;
    var left = _ref.left;

    var _cache = this.cache('element-bounds', function () {
      return getBounds(_this.element);
    });

    var height = _cache.height;
    var width = _cache.width;

    var targetPos = this.getTargetBounds();

    var bottom = top + height;
    var right = left + width;

    var abutted = [];
    if (top <= targetPos.bottom && bottom >= targetPos.top) {
      ['left', 'right'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === left || targetPosSide === right) {
          abutted.push(side);
        }
      });
    }

    if (left <= targetPos.right && right >= targetPos.left) {
      ['top', 'bottom'].forEach(function (side) {
        var targetPosSide = targetPos[side];
        if (targetPosSide === top || targetPosSide === bottom) {
          abutted.push(side);
        }
      });
    }

    var allClasses = [];
    var addClasses = [];

    var sides = ['left', 'top', 'right', 'bottom'];
    allClasses.push(this.getClass('abutted'));
    sides.forEach(function (side) {
      allClasses.push(_this.getClass('abutted') + '-' + side);
    });

    if (abutted.length) {
      addClasses.push(this.getClass('abutted'));
    }

    abutted.forEach(function (side) {
      addClasses.push(_this.getClass('abutted') + '-' + side);
    });

    defer(function () {
      if (!(_this.options.addTargetClasses === false)) {
        updateClasses(_this.target, addClasses, allClasses);
      }
      updateClasses(_this.element, addClasses, allClasses);
    });

    return true;
  }
});
/* globals TetherBase */

'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

TetherBase.modules.push({
  position: function position(_ref) {
    var top = _ref.top;
    var left = _ref.left;

    if (!this.options.shift) {
      return;
    }

    var shift = this.options.shift;
    if (typeof this.options.shift === 'function') {
      shift = this.options.shift.call(this, { top: top, left: left });
    }

    var shiftTop = undefined,
        shiftLeft = undefined;
    if (typeof shift === 'string') {
      shift = shift.split(' ');
      shift[1] = shift[1] || shift[0];

      var _shift = shift;

      var _shift2 = _slicedToArray(_shift, 2);

      shiftTop = _shift2[0];
      shiftLeft = _shift2[1];

      shiftTop = parseFloat(shiftTop, 10);
      shiftLeft = parseFloat(shiftLeft, 10);
    } else {
      shiftTop = shift.top;
      shiftLeft = shift.left;
    }

    top += shiftTop;
    left += shiftLeft;

    return { top: top, left: left };
  }
});
return Tether;

}));


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Breadcrumb;
(function (Breadcrumb) {
    function run(sources) {
        var basics = createBasicExamples(sources);
        var content = createContentExamples(sources);
        var variations = createVariationExamples(sources);
        var vTree$ = xstream_1.default.combine(basics, content, variations).map(function (_a) {
            var basics = _a[0], content = _a[1], variations = _a[2];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Breadcrumb",
                                subtext: "A breadcrumb is used to show hierarchy between content"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")].concat(basics)),
                    UI.Segment.render({ basic: true }, [UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")].concat(content)),
                    UI.Segment.render({ basic: true }, [UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")].concat(variations))
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Breadcrumb.run = run;
    function createBasicExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render([
                { text: "Home", href: "#" },
                { text: "Store", href: "#" },
                { text: "T-Shirt", active: true }
            ])),
            code: "UI.Breadcrumb.render([\n        { text: \"Home\", href: \"#\" },\n        { text: \"Store\", href: \"#\" },\n        { text: \"T-Shirt\", active: true }\n      ])",
            header: "Breadcrumb",
            description: "A standard breadcrumb."
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.AngleRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Store", href: "#" },
                    { text: "T-Shirt", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.AngleRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Store\", href: \"#\" },\n          { text: \"T-Shirt\", active: true }\n        ]\n      })"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM);
    }
    function createContentExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Divider",
            description: "A breadcrumb can contain a divider to show the relationship between sections, this can be formatted as an icon or text.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: "|" },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: \"|\" },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex3 = components_1.Example.run(sources, {
            header: "Section",
            description: "A breadcrumb can contain sections that can either be formatted as a link or text.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.AngleRight) },
                content: [
                    { text: "Home" },
                    { text: "Search", active: true },
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.AngleRight) },\n        content: [\n          { text: \"Home\" },\n          { text: \"Search\", active: true },\n        ]\n      })"
        });
        var ex4 = components_1.Example.run(sources, {
            header: "Link",
            description: "A section may be linkable or contain a link.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { divider: UI.Icon.render(UI.IconType.AngleRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: ["Search for: ", dom_1.a("paper towels")], active: true },
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { divider: UI.Icon.render(UI.IconType.AngleRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: [\"Search for: \", a(\"paper towels\")], active: true },\n        ]\n      })"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM, ex3.DOM, ex4.DOM);
    }
    function createVariationExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Size",
            description: "A breadcrumb can vary in size.",
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Mini, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Mini, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Tiny, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Tiny, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Small, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Small, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Medium, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Medium, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Large, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Large, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex6 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Big, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Big, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex7 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Huge, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Huge, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        var ex8 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Breadcrumb.render({
                props: { size: UI.Size.Massive, divider: UI.Icon.render(UI.IconType.ArrowRight) },
                content: [
                    { text: "Home", href: "#" },
                    { text: "Registration", href: "#" },
                    { text: "Personal Information", active: true }
                ]
            })),
            code: "UI.Breadcrumb.render({\n        props: { size: UI.Size.Massive, divider: UI.Icon.render(UI.IconType.ArrowRight) },\n        content: [\n          { text: \"Home\", href: \"#\" },\n          { text: \"Registration\", href: \"#\" },\n          { text: \"Personal Information\", active: true }\n        ]\n      })"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM, ex6.DOM, ex7.DOM, ex8.DOM);
    }
})(Breadcrumb = exports.Breadcrumb || (exports.Breadcrumb = {}));


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var Content;
(function (Content) {
    function run(sources) {
        var fieldExamples = createFieldExamples(sources);
        var fieldsExamples = createFieldsExamples(sources);
        var textareaExamples = createTextAreaExamples(sources);
        var checkboxExamples = createCheckboxExamples(sources);
        var radioCheckboxExamples = createRadioCheckboxExamples(sources);
        var dropdownExamples = createDropdownExamples(sources);
        var multipleSelectExamples = createMultipleSelectExamples(sources);
        var messageExamples = createMessageExamples(sources);
        return xstream_1.default.combine.apply(null, [].concat(fieldExamples, fieldsExamples, textareaExamples, checkboxExamples, radioCheckboxExamples, dropdownExamples, multipleSelectExamples, messageExamples).map(function (x) { return x.DOM; }));
    }
    Content.run = run;
    function createFieldExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Field",
            description: "A field is a form element containing a label and an input",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({ content: { label: "User Input", main: [UI.Textbox.render()] } })
            ])),
            code: "UI.Form.render([\n        UI.Field.render({ content: { label: \"User Input\", main: [UI.Textbox.render()]}})\n      ])"
        });
        return [ex];
    }
    function createFieldsExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Fields",
            description: "A set of fields can appear grouped together",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render([
                    UI.Field.render({ content: { label: "First name", main: [UI.Textbox.render({ placeholder: "First Name" })] } }),
                    UI.Field.render({ content: { label: "Middle name", main: [UI.Textbox.render({ placeholder: "Middle Name" })] } }),
                    UI.Field.render({ content: { label: "Last name", main: [UI.Textbox.render({ placeholder: "Last Name" })] } })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render([\n          UI.Field.render({content: { label: \"First name\", main: [UI.Textbox.render({placeholder: \"First Name\"})]}}),\n          UI.Field.render({content: { label: \"Middle name\", main: [UI.Textbox.render({placeholder: \"Middle Name\"})]}}),\n          UI.Field.render({content: { label: \"Last name\", main: [UI.Textbox.render({placeholder: \"Last Name\"})]}})\n        ])\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({ content: { label: "First name", main: [UI.Textbox.render({ placeholder: "First Name" })] } }),
                    UI.Field.render({ content: { label: "Middle name", main: [UI.Textbox.render({ placeholder: "Middle Name" })] } }),
                    UI.Field.render({ content: { label: "Last name", main: [UI.Textbox.render({ placeholder: "Last Name" })] } })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({content: { label: \"First name\", main: [UI.Textbox.render({placeholder: \"First Name\"})]}}),\n          UI.Field.render({content: { label: \"Middle name\", main: [UI.Textbox.render({placeholder: \"Middle Name\"})]}}),\n          UI.Field.render({content: { label: \"Last name\", main: [UI.Textbox.render({placeholder: \"Last Name\"})]}})\n        ])\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ inline: true }, [
                    UI.Field.render({
                        props: { width: 8 },
                        content: { label: "Name", main: [UI.Textbox.render({ placeholder: "First Name" })] }
                    }),
                    UI.Field.render({
                        props: { width: 3 },
                        content: [UI.Textbox.render({ placeholder: "Middle Name" })]
                    }),
                    UI.Field.render({
                        props: { width: 5 },
                        content: [UI.Textbox.render({ placeholder: "Last Name" })]
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({inline: true}, [\n          UI.Field.render({\n            props: {width: 8},\n            content: { label: \"Name\", main: [UI.Textbox.render({placeholder: \"First Name\"})]}\n          }),\n          UI.Field.render({\n            props: {width: 3},\n            content: [UI.Textbox.render({placeholder: \"Middle Name\"})]\n          }),\n          UI.Field.render({\n            props: {width: 5},\n            content: [UI.Textbox.render({placeholder: \"Last Name\"})]\n          })\n        ])\n      ])"
        });
        return [ex1, ex2, ex3];
    }
    function createTextAreaExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Text Area",
            description: "A textarea can be used to allow for extended user input.",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({
                    content: {
                        label: "Text",
                        main: [UI.Textbox.render({ rows: 10 })]
                    }
                }),
                UI.Field.render({
                    content: {
                        label: "Short text",
                        main: [UI.Textbox.render({ rows: 2 })]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Field.render({content: { \n          label: \"Text\",\n          main: [UI.Textbox.render({rows: 10})]\n        }}),\n        UI.Field.render({content: { \n          label: \"Short text\",\n          main: [UI.Textbox.render({rows: 2})]\n        }})\n      ])"
        });
        return [ex];
    }
    function createCheckboxExamples(sources) {
        var example = components_1.Example.run(sources, {
            header: "Checkbox",
            description: "A form can contain a checkbox",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({ inline: true }, [UI.Checkbox.render("Checkbox")]),
                UI.Field.render({ inline: true }, [UI.Checkbox.render({ slider: true }, "Slider")]),
                UI.Field.render({ inline: true }, [UI.Checkbox.render({ toggle: true }, "Toggle")])
            ])),
            code: "UI.Form.render([\n        UI.Field.render({inline: true}, [UI.Checkbox.render(\"Checkbox\")]),\n        UI.Field.render({inline: true}, [UI.Checkbox.render({slider: true}, \"Slider\")]),\n        UI.Field.render({inline: true}, [UI.Checkbox.render({toggle: true}, \"Toggle\")])\n      ])"
        });
        return [example];
    }
    function createRadioCheckboxExamples(sources) {
        var example = components_1.Example.run(sources, {
            header: "Radio Checkbox",
            description: "A form can contain a radio checkbox",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({
                    props: { inline: true },
                    content: {
                        label: "Select your favourite fruit:",
                        main: [
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Apples")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Oranges")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Pears")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Grapefruit")])
                        ]
                    }
                }),
                UI.Fields.render({
                    props: { grouped: true },
                    content: {
                        label: "Select your favourite fruit:",
                        main: [
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Apples")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Oranges")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Pears")]),
                            UI.Field.render([UI.Checkbox.render({ radio: true, name: "fruit" }, "Grapefruit")])
                        ]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({\n          props: { inline: true },\n          content: {\n            label: \"Select your favourite fruit:\",\n            main: [\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Apples\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Oranges\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Pears\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Grapefruit\")])\n            ]\n          }\n        }),\n        UI.Fields.render({\n          props: { grouped: true },\n          content: {\n            label: \"Select your favourite fruit:\",\n            main: [\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Apples\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Oranges\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Pears\")]),\n              UI.Field.render([UI.Checkbox.render({radio: true, name: \"fruit\"}, \"Grapefruit\")])\n            ]\n          }\n        })\n      ])"
        });
        return [example];
    }
    function createDropdownExamples(sources) {
        var ddlGender = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ default: "Gender", selection: true }),
            content$: xstream_1.default.of([
                { main: "Male", value: "Male" },
                { main: "Female", value: "Female" }
            ])
        });
        var ex1 = components_1.Example.run(sources, {
            header: "Dropdown",
            description: "A form can contain a dropdown",
            VNode$: ddlGender.DOM.map(function (ddlGender) { return UI.Form.render([
                UI.Field.render({ content: { label: "Gender", main: ddlGender } })
            ]); }),
            code: "let ddlGender = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({default: \"Gender\", selection: true}),\n      content$: xs.of([\n        {main: \"Male\", value: \"Male\"},\n        {main: \"Female\", value: \"Female\"}\n      ])\n    });\n    let vTree$ = ddlGender.DOM.map(\n        ddlGender => UI.Form.render([\n        UI.Field.render({content: {label: \"Gender\", main: ddlGender}})\n      ])\n    );"
        });
        var countries = ["United States", "The Netherlands", "Belgium", "Germany", "France"];
        var ddlCountries = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true, search: true }),
            content$: xstream_1.default.of(countries.map(function (country) { return ({ main: country, value: country }); }))
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: ddlCountries.DOM.map(function (ddlCountries) { return UI.Form.render([
                UI.Field.render({ content: { label: "Country", main: ddlCountries } })
            ]); }),
            code: "let countries = [\"United States\", \"The Netherlands\", \"Belgium\", \"Germany\", \"France\"];\n    let ddlCountries = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({ selection: true, search: true }),\n      content$: xs.of(countries.map(country => ({ main: country, value: country })))\n    })\n    let vTree$: ddlCountries.DOM.map(\n      ddlCountries => UI.Form.render([\n        UI.Field.render({content: { label: \"Country\", main: ddlCountries}})\n      ])\n    )"
        });
        return [ex1, ex2];
    }
    function createMultipleSelectExamples(sources) {
        return [];
    }
    function createMessageExamples(sources) {
        var example = components_1.Example.run(sources, {
            header: "Message",
            description: "A form can contain a message",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Message.render({
                    props: { color: UI.Color.Error },
                    content: {
                        header: "We had some issues",
                        body: [UI.List.render({ bulleted: true }, [
                                { main: "Please enter your first name" },
                                { main: "Please enter your last name" }
                            ])]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Message.render({\n          props: { color: UI.Color.Error },\n          content: {\n            header: \"We had some issues\",\n            body: [UI.List.render({ bulleted: true }, [\n              { main: \"Please enter your first name\" },\n              { main: \"Please enter your last name\" }\n            ])]\n          }\n        })\n      ])"
        });
        return [example];
    }
})(Content = exports.Content || (exports.Content = {}));


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var FieldsVariations;
(function (FieldsVariations) {
    function run(sources) {
        var equalWidthEx = components_1.Example.run(sources, {
            header: "Evenly Divided",
            description: "Fields can have their widths divided evenly",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        content: {
                            label: "First name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Middle name",
                            main: [UI.Textbox.render({ placeholder: "Middle Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({ equalWidth: true }, [\n          UI.Field.render({\n            content: {\n              label: \"First name\",\n              main: [UI.Textbox.render({ placeholder: \"First Name\" })]\n            }\n          }),\n          UI.Field.render({\n            content: {\n              label: \"Middle name\",\n              main: [UI.Textbox.render({ placeholder: \"Middle Name\" })]\n            }\n          }),\n          UI.Field.render({\n            content: {\n              label: \"Last name\",\n              main: [UI.Textbox.render({ placeholder: \"Last Name\" })]\n            }\n          })\n        ])\n      ])"
        });
        var groupedEx = components_1.Example.run(sources, {
            header: "Grouped fields",
            description: "Fields can show related choices",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ grouped: true }, [
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Apples")]),
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Oranges")]),
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Pears")]),
                    UI.Field.render([UI.Checkbox.render({ name: "fruit", radio: true }, "Grapefruit")])
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({ grouped: true }, [\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Apples\")]),\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Oranges\")]),\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Pears\")]),\n          UI.Field.render([UI.Checkbox.render({ name: \"fruit\", radio: true }, \"Grapefruit\")])\n        ])\n      ])"
        });
        var inlineEx = components_1.Example.run(sources, {
            header: "Inline",
            description: "Multiple fields may be inline in a row",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({
                    props: { inline: true },
                    content: {
                        label: "Phone Number",
                        main: [
                            UI.Field.render([UI.Textbox.render({ placeholder: "(xxx)" })]),
                            UI.Field.render([UI.Textbox.render({ placeholder: "xxx" })]),
                            UI.Field.render([UI.Textbox.render({ placeholder: "xxxx" })])
                        ]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({\n          props: { inline: true },\n          content: {\n            label: \"Phone Number\",\n            main: [\n              UI.Field.render([UI.Textbox.render({placeholder: \"(xxx)\"})]),\n              UI.Field.render([UI.Textbox.render({placeholder: \"xxx\"})]),\n              UI.Field.render([UI.Textbox.render({placeholder: \"xxxx\"})])\n            ]\n          }\n        })\n      ])"
        });
        return xstream_1.default.combine(equalWidthEx.DOM, groupedEx.DOM, inlineEx.DOM);
    }
    FieldsVariations.run = run;
})(FieldsVariations = exports.FieldsVariations || (exports.FieldsVariations = {}));


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var FieldVariations;
(function (FieldVariations) {
    function run(sources) {
        var inlineEx = components_1.Example.run(sources, {
            header: "Inline",
            description: "A field can have its label next to instead of above it.",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({
                    props: { inline: true },
                    content: {
                        label: "Full name",
                        main: [UI.Textbox.render({ placeholder: "Full Name" })]
                    }
                })
            ])),
            code: "UI.Form.render([\n        UI.Field.render({\n          props: {inline: true},\n          content: {\n            label: \"Full name\",\n            main: [UI.Textbox.render({placeholder: \"Full Name\"})]\n          }\n        })\n      ])"
        });
        var widthEx = components_1.Example.run(sources, {
            header: "Width",
            description: "A field can specify its width in grid columns",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render([
                    UI.Field.render({
                        props: { width: 6 },
                        content: {
                            label: "First name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        props: { width: 4 },
                        content: {
                            label: "Middle",
                            main: [UI.Textbox.render({ placeholder: "Middle Name" })]
                        }
                    }),
                    UI.Field.render({
                        props: { width: 6 },
                        content: {
                            label: "Last name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Fields.render([
                    UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: "2 Wide" })]),
                    UI.Field.render({ width: 12 }, [UI.Textbox.render({ placeholder: "12 Wide" })]),
                    UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: "2 Wide" })])
                ]),
                UI.Fields.render([
                    UI.Field.render({ width: 8 }, [UI.Textbox.render({ placeholder: "8 Wide" })]),
                    UI.Field.render({ width: 6 }, [UI.Textbox.render({ placeholder: "6 Wide" })]),
                    UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: "2 Wide" })])
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render([\n          UI.Field.render({\n            props: { width: 6 },\n            content: {\n              label: \"First name\",\n              main: [UI.Textbox.render({ placeholder: \"First Name\" })]\n            }\n          }),\n          UI.Field.render({\n            props: { width: 4 },\n            content: {\n              label: \"Middle\",\n              main: [UI.Textbox.render({ placeholder: \"Middle Name\" })]\n            }\n          }),\n          UI.Field.render({\n            props: { width: 6 },\n            content: {\n              label: \"Last name\",\n              main: [UI.Textbox.render({ placeholder: \"Last Name\" })]\n            }\n          })\n        ]),\n        UI.Fields.render([\n          UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: \"2 Wide\" })]),\n          UI.Field.render({ width: 12 }, [UI.Textbox.render({ placeholder: \"12 Wide\" })]),\n          UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: \"2 Wide\" })])\n        ]),\n        UI.Fields.render([\n          UI.Field.render({ width: 8 }, [UI.Textbox.render({ placeholder: \"8 Wide\" })]),\n          UI.Field.render({ width: 6 }, [UI.Textbox.render({ placeholder: \"6 Wide\" })]),\n          UI.Field.render({ width: 2 }, [UI.Textbox.render({ placeholder: \"2 Wide\" })])\n        ])\n      ])"
        });
        var requiredEx = components_1.Example.run(sources, {
            header: "Required",
            description: "A field can show that input is mandetory",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({
                    props: { required: true },
                    content: {
                        label: "Full name",
                        main: [UI.Textbox.render({ placeholder: "Full Name" })]
                    }
                }),
                UI.Field.render([UI.Checkbox.render("I agree to the Terms and Conditions")])
            ])),
            code: "UI.Form.render([\n        UI.Field.render({\n          props: {required: true},\n          content: {\n            label: \"Full name\",\n            main: [UI.Textbox.render({placeholder: \"Full Name\"})]\n          }\n        }),\n        UI.Field.render([UI.Checkbox.render(\"I agree to the Terms and Conditions\")])\n      ])"
        });
        return xstream_1.default.combine(inlineEx.DOM, widthEx.DOM, requiredEx.DOM);
    }
    FieldVariations.run = run;
})(FieldVariations = exports.FieldVariations || (exports.FieldVariations = {}));


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var FormVariations;
(function (FormVariations) {
    function run(sources) {
        var equalWidthExample = components_1.Example.run(sources, {
            header: "Equal Width",
            description: "Forms can automatically divide fields to be equal width",
            VNode$: xstream_1.default.of(UI.Form.render({ equalWidth: true }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "Username",
                            main: [UI.Textbox.render({ placeholder: "Username" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Password",
                            main: [UI.Textbox.render({ type: "password", placeholder: "Password" })]
                        }
                    })
                ]),
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Middle name",
                            main: [UI.Textbox.render({ placeholder: "Middle Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render({ equalWidth: true}, [\n        UI.Fields.render([\n          UI.Field.render({content: {\n            label: \"Username\",\n            main: [UI.Textbox.render({placeholder: \"Username\"})]\n          }}),\n          UI.Field.render({content: {\n            label: \"Password\",\n            main: [UI.Textbox.render({type: \"password\", placeholder: \"Password\"})]\n          }})\n        ]),\n        UI.Fields.render([\n          UI.Field.render({content: {\n            label: \"First name\",\n            main: [UI.Textbox.render({placeholder: \"First Name\"})]\n          }}),\n          UI.Field.render({content: {\n            label: \"Middle name\",\n            main: [UI.Textbox.render({placeholder: \"Middle Name\"})]\n          }}),\n          UI.Field.render({content: {\n            label: \"Last name\",\n            main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n          }})\n        ])\n      ])"
        });
        var invertedEx = components_1.Example.run(sources, {
            header: "Inverted",
            description: "A form on a dark background may have to invert its color scheme",
            VNode$: xstream_1.default.of(UI.Segment.render({ inverted: true }, [
                UI.Form.render({ inverted: true }, [
                    UI.Fields.render({ equalWidth: true }, [
                        UI.Field.render({
                            content: {
                                label: "First Name",
                                main: [UI.Textbox.render({ placeholder: "First Name" })]
                            }
                        }),
                        UI.Field.render({
                            content: {
                                label: "Last name",
                                main: [UI.Textbox.render({ placeholder: "Last Name" })]
                            }
                        })
                    ]),
                    UI.Field.render({ inline: true }, [UI.Checkbox.render("I agree to the Terms and Conditions")]),
                    UI.Button.render("Submit")
                ])
            ])),
            code: "UI.Segment.render({ inverted: true }, [\n        UI.Form.render({ inverted: true }, [\n          UI.Fields.render({ equalWidth: true }, [\n            UI.Field.render({\n              content: {\n                label: \"First Name\",\n                main: [UI.Textbox.render({ placeholder: \"First Name\" })]\n              }\n            }),\n            UI.Field.render({\n              content: {\n                label: \"Last name\",\n                main: [UI.Textbox.render({ placeholder: \"Last Name\" })]\n              }\n            })\n          ]),\n          UI.Field.render({inline: true}, [UI.Checkbox.render(\"I agree to the Terms and Conditions\")]),\n          UI.Button.render(\"Submit\")\n        ])\n      ])"
        });
        var examples = [].concat(createSizeVariations(sources), equalWidthExample, invertedEx);
        return xstream_1.default.combine.apply(null, examples.map(function (ex) { return ex.DOM; }));
    }
    FormVariations.run = run;
    function createSizeVariations(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Size",
            description: "A form can vary in size",
            VNode$: xstream_1.default.of(UI.Form.render({ size: "mini" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"mini\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "tiny" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"tiny\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "small" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"small\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "medium" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "medium"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "large" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"large\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex6 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "big" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"big\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex7 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "huge" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"huge\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ex8 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Form.render({ size: "massive" }, [
                UI.Fields.render([
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({size: \"massive\"}, [\n        UI.Fields.render([\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        return [ex, ex2, ex3, ex4, ex5, ex6, ex7, ex8];
    }
})(FormVariations = exports.FormVariations || (exports.FormVariations = {}));


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(154);
var content_1 = __webpack_require__(148);
var states_1 = __webpack_require__(153);
var formvariations_1 = __webpack_require__(151);
var fieldvariations_1 = __webpack_require__(150);
var fieldsvariations_1 = __webpack_require__(149);
var Form;
(function (Form) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var content = content_1.Content.run(sources);
        var states = states_1.States.run(sources);
        var formVariations = formvariations_1.FormVariations.run(sources);
        var fieldVariations = fieldvariations_1.FieldVariations.run(sources);
        var fieldsVariations = fieldsvariations_1.FieldsVariations.run(sources);
        var vTree$ = xstream_1.default.combine(types, content, states, formVariations, fieldVariations, fieldsVariations).map(function (_a) {
            var types = _a[0], content = _a[1], states = _a[2], formVariations = _a[3], fieldVariations = _a[4], fieldsVariations = _a[5];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Form",
                                subtext: "A form displays a set of related user input fields in a structured way"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                    ]
                        .concat(types)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")
                    ]
                        .concat(content)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "States")
                    ]
                        .concat(states)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Form Variations")
                    ]
                        .concat(formVariations)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Field Variations")
                    ]
                        .concat(fieldVariations)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Group Variations")
                    ]
                        .concat(fieldsVariations))
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Form.run = run;
})(Form = exports.Form || (exports.Form = {}));


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var States;
(function (States) {
    function run(sources) {
        var loadingEx = components_1.Example.run(sources, {
            header: "Loading",
            description: "If a form is in loading state, it will automatically show a loading indicator.",
            VNode$: xstream_1.default.of(UI.Form.render({ loading: true }, [
                UI.Field.render({ content: { label: "Email", main: [UI.Textbox.render()] } }),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render({loading: true}, [\n        UI.Field.render({ content: { label: \"Email\", main: [UI.Textbox.render()] } }),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var ddlGender = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ default: "Gender", selection: true }),
            content$: xstream_1.default.of([
                { main: "Male", value: "Male" },
                { main: "Female", value: "Female" }
            ])
        });
        var fieldErrorEx = components_1.Example.run(sources, {
            header: "Field Error",
            description: "Individual fields may display an error state",
            VNode$: ddlGender.DOM.map(function (ddlGender) { return UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        props: { error: true },
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ placeholder: "First Name" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ placeholder: "Last Name" })]
                        }
                    })
                ]),
                UI.Field.render({
                    props: { error: true },
                    content: { label: "Gender", main: ddlGender }
                }),
                UI.Field.render({
                    props: { error: true },
                    content: [UI.Checkbox.render("I agree to the Terms and Conditions")]
                }),
            ]); }),
            code: "let ddlGender = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({ default: \"Gender\", selection: true }),\n      content$: xs.of([\n        { main: \"Male\", value: \"Male\" },\n        { main: \"Female\", value: \"Female\" }\n      ])\n    });\n    let vTree$ = ddlGender.DOM.map(\n      ddlGender => UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({\n            props: {error: true},\n            content: {\n              label: \"First Name\",\n              main: [UI.Textbox.render({placeholder: \"First Name\"})]\n            }\n          }),\n          UI.Field.render({\n            content: {\n              label: \"Last Name\",\n              main: [UI.Textbox.render({placeholder: \"Last Name\"})]\n            }\n          })\n        ]),\n        UI.Field.render({\n          props: {error: true},\n          content: {label: \"Gender\", main: ddlGender}\n        }),\n        UI.Field.render({\n          props: {error: true},\n          content: [UI.Checkbox.render(\"I agree to the Terms and Conditions\")]\n        }),\n      ])\n    )"
        });
        var disabledFieldEx = components_1.Example.run(sources, {
            header: "Disabled Field",
            description: "Individual fields may be disabled",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        props: { disabled: true },
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ disabled: true, placeholder: "Disabled" })]
                        }
                    }),
                    UI.Field.render({
                        props: { disabled: true },
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ disabled: true, placeholder: "Disabled" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({\n            props: { disabled: true},\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({disabled: true, placeholder: \"Disabled\"})]\n            }\n          }),\n          UI.Field.render({\n            props: { disabled: true},\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({disabled: true, placeholder: \"Disabled\"})]\n            }\n          })\n        ])\n      ])"
        });
        var readOnlyEx = components_1.Example.run(sources, {
            header: "Read-Only Field",
            description: "Invidual fields may be read only",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Fields.render({ equalWidth: true }, [
                    UI.Field.render({
                        content: {
                            label: "First Name",
                            main: [UI.Textbox.render({ readonly: true, placeholder: "Read Only" })]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Last Name",
                            main: [UI.Textbox.render({ readonly: true, placeholder: "Read Only" })]
                        }
                    })
                ])
            ])),
            code: "UI.Form.render([\n        UI.Fields.render({equalWidth: true}, [\n          UI.Field.render({\n            content: { \n              label: \"First Name\",\n              main: [UI.Textbox.render({readonly: true, placeholder: \"Read Only\"})]\n            }\n          }),\n          UI.Field.render({\n            content: { \n              label: \"Last Name\",\n              main: [UI.Textbox.render({readonly: true, placeholder: \"Read Only\"})]\n            }\n          })\n        ])\n      ])"
        });
        return xstream_1.default.combine(loadingEx.DOM, fieldErrorEx.DOM, disabledFieldEx.DOM, readOnlyEx.DOM);
    }
    States.run = run;
})(States = exports.States || (exports.States = {}));


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var Types;
(function (Types) {
    function run(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Form",
            description: "A form",
            VNode$: xstream_1.default.of(UI.Form.render([
                UI.Field.render({ content: { label: "First Name", main: UI.Textbox.render({ placeholder: "First Name" }) } }),
                UI.Field.render({ content: { label: "Last Name", main: UI.Textbox.render({ placeholder: "Last Name" }) } }),
                UI.Field.render([UI.Checkbox.render("I agree to the Terms and Conditions")]),
                UI.Button.render("Submit")
            ])),
            code: "UI.Form.render([\n        UI.Field.render({ content: { label: \"First Name\", main: UI.Textbox.render({ placeholder: \"First Name\" }) } }),\n        UI.Field.render({ content: { label: \"Last Name\", main: UI.Textbox.render({ placeholder: \"Last Name\" }) } }),\n        UI.Field.render([UI.Checkbox.render(\"I agree to the Terms and Conditions\")]),\n        UI.Button.render(\"Submit\")\n      ])"
        });
        var states = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware"];
        var ddlStates = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true }),
            content$: xstream_1.default.of(states.map(function (state) { return ({ main: state, value: state }); }))
        });
        var countries = ["United States", "The Netherlands", "Belgium", "Germany", "France"];
        var ddlCountries = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true, search: true }),
            content$: xstream_1.default.of(countries.map(function (country) { return ({ main: country, value: country }); }))
        });
        var cards = ["Visa", "American Express", "Discover"];
        var ddlCards = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true }),
            content$: xstream_1.default.of(cards.map(function (card) { return ({ main: card, value: card }); }))
        });
        var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        var ddlMonths = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ selection: true, search: true, size: UI.Size.Fluid }),
            content$: xstream_1.default.of(months.map(function (month) { return ({ main: month, value: month }); }))
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.combine(ddlStates.DOM, ddlCountries.DOM, ddlCards.DOM, ddlMonths.DOM).map(function (_a) {
                var ddlStates = _a[0], ddlCountries = _a[1], ddlCards = _a[2], ddlMonths = _a[3];
                return UI.Form.render([
                    UI.Header.render({ dividing: true }, "Shipping Information"),
                    UI.Field.render({
                        content: {
                            label: "Name", main: [
                                UI.Fields.render({ equalWidth: true }, [
                                    UI.Field.render(UI.Textbox.render({ placeholder: "First Name" })),
                                    UI.Field.render(UI.Textbox.render({ placeholder: "Last Name" }))
                                ])
                            ]
                        }
                    }),
                    UI.Field.render({
                        content: {
                            label: "Billing adress", main: [
                                UI.Fields.render([
                                    UI.Field.render({ width: 12 }, [UI.Textbox.render({ placeholder: "Street Adress" })]),
                                    UI.Field.render({ width: 4 }, [UI.Textbox.render({ placeholder: "Apt #" })])
                                ])
                            ]
                        }
                    }),
                    UI.Fields.render({ equalWidth: true }, [
                        UI.Field.render({ content: { label: "State", main: ddlStates } }),
                        UI.Field.render({ content: { label: "Country", main: ddlCountries } })
                    ]),
                    UI.Header.render({ dividing: true }, "Billing Information"),
                    UI.Field.render({ content: { label: "Card Type", main: ddlCards } }),
                    UI.Fields.render([
                        UI.Field.render({ props: { width: 7 }, content: { label: "Card Number", main: [UI.Textbox.render({ placeholder: "Card #" })] } }),
                        UI.Field.render({ props: { width: 3 }, content: { label: "CVC", main: [UI.Textbox.render({ placeholder: "CVC" })] } }),
                        UI.Field.render({
                            props: { width: 6 }, content: {
                                label: "Expiration", main: [
                                    UI.Fields.render({ equalWidth: true }, [
                                        UI.Field.render([ddlMonths]),
                                        UI.Field.render([UI.Textbox.render({ placeholder: "Year" })])
                                    ])
                                ]
                            }
                        })
                    ]),
                    UI.Header.render({ dividing: true }, "Receipt"),
                    //TODO Multiple dropdown example,
                    UI.Segment.render([
                        UI.Checkbox.render({ toggle: true }, "Do not include a receipt in the package")
                    ]),
                    UI.Button.render("Submit order")
                ]);
            }),
            code: "let states = [\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\"];\n      let ddlStates = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true}),\n        content$: xs.of(states.map(state => ({main: state, value: state})))\n      });\n      let countries = [\"United States\", \"The Netherlands\", \"Belgium\", \"Germany\", \"France\"];\n      let ddlCountries = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true, search: true}),\n        content$: xs.of(countries.map(country => ({main: country, value: country})))\n      });\n      let cards = [\"Visa\", \"American Express\", \"Discover\"];\n      let ddlCards = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true}),\n        content$: xs.of(cards.map(card => ({main: card, value: card})))\n      });\n      let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n      let ddlMonths = UI.Dropdown.run({\n        DOM: sources.DOM,\n        props$: xs.of({selection: true, search: true, size: UI.Size.Fluid}),\n        content$: xs.of(months.map(month => ({main: month, value: month})))\n      });\n      let vTree$: xs.combine(ddlStates.DOM, ddlCountries.DOM, ddlCards.DOM, ddlMonths.DOM).map(\n        ([ddlStates, ddlCountries, ddlCards, ddlMonths]) => UI.Form.render([\n          UI.Header.render({dividing: true}, \"Shipping Information\"),\n          UI.Field.render({ content: { label: \"Name\", main: [\n            UI.Fields.render({equalWidth: true}, [\n              UI.Field.render(UI.Textbox.render({placeholder: \"First Name\"})),\n              UI.Field.render(UI.Textbox.render({placeholder: \"Last Name\"}))\n            ])\n          ]}}),\n          UI.Field.render({ content: { label: \"Billing adress\", main: [\n            UI.Fields.render([\n              UI.Field.render({ width: 12}, [UI.Textbox.render({placeholder: \"Street Adress\"})]),\n              UI.Field.render({ width: 4}, [UI.Textbox.render({placeholder: \"Apt #\"})])\n            ])\n          ]}}),\n          UI.Fields.render({equalWidth: true}, [\n            UI.Field.render({content: {label: \"State\", main: ddlStates}}),\n            UI.Field.render({content: {label: \"Country\", main: ddlCountries}})\n          ]),\n          UI.Header.render({dividing: true}, \"Billing Information\"),\n          UI.Field.render({content: { label: \"Card Type\", main: ddlCards}}),\n          UI.Fields.render([\n            UI.Field.render({props: {width: 7}, content: { label: \"Card Number\", main: [UI.Textbox.render({placeholder: \"Card #\"})]}}),\n            UI.Field.render({props: {width: 3}, content: { label: \"CVC\", main: [UI.Textbox.render({placeholder: \"CVC\"})]}}),\n            UI.Field.render({props: {width: 6}, content: { label: \"Expiration\", main: [\n              UI.Fields.render({equalWidth: true}, [\n                UI.Field.render([ddlMonths]),\n                UI.Field.render([UI.Textbox.render({placeholder: \"Year\"})])\n              ])\n            ]}})\n          ]),\n          UI.Header.render({dividing: true}, \"Receipt\"),\n          //TODO Multiple dropdown example,\n          UI.Segment.render([\n            UI.Checkbox.render({toggle: true}, \"Do not include a receipt in the package\")\n          ]),\n          UI.Button.render(\"Submit order\")\n        ])\n      )"
        });
        return xstream_1.default.combine(ex.DOM, ex2.DOM);
    }
    Types.run = run;
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Content;
(function (Content) {
    function run(sources) {
        var rowsEx = components_1.Example.run(sources, {
            header: "Rows",
            description: "A row is a horizontal grouping of columns",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3 }, [
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ]),
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Grid.render({ width: 3 }, [\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render([\n          UI.Column.render(), \n          UI.Column.render(), \n          UI.Column.render()\n        ])\n      ])"
        });
        var columnsEx = components_1.Example.run(sources, {
            header: "Columns",
            description: "Columns each contain gutters giving them equal spacing from other columns.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 8 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 8}),\n        UI.Column.render({width: 8}),\n        UI.Column.render({width: 8}),\n        UI.Column.render({width: 8})\n      ])"
        });
        return xstream_1.default.combine(rowsEx.DOM, columnsEx.DOM);
    }
    Content.run = run;
})(Content = exports.Content || (exports.Content = {}));


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var types_1 = __webpack_require__(158);
var content_1 = __webpack_require__(155);
var variations_1 = __webpack_require__(159);
var responsiveVariations_1 = __webpack_require__(157);
var Definition;
(function (Definition) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var content = content_1.Content.run(sources);
        var variations = variations_1.Variations.run(sources);
        var responsive = responsiveVariations_1.ResponsiveVariations.run(sources);
        var vTree$ = xstream_1.default.combine(types, content, variations, responsive).map(function (_a) {
            var types = _a[0], content = _a[1], variations = _a[2], responsive = _a[3];
            return UI.Container.render([
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                ]
                    .concat(types)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")
                ]
                    .concat(content)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")
                ]
                    .concat(variations)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Responsive Variants")
                ]
                    .concat(responsive)),
            ]);
        });
        return vTree$;
    }
    Definition.run = run;
})(Definition = exports.Definition || (exports.Definition = {}));


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var ResponsiveVariations;
(function (ResponsiveVariations) {
    function run(sources) {
        var doublingEx = createDoublingExamples(sources);
        var stackableEx = createStackableExamples(sources);
        var reversedEx = createReversedExamples(sources);
        var deviceVisibilityEx = createDeviceVisiblityExamples(sources);
        var responsiveWidthEx = createResponsiveWithExamples(sources);
        var examples = [].concat(doublingEx, stackableEx, reversedEx, deviceVisibilityEx, responsiveWidthEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    ResponsiveVariations.run = run;
    function createDoublingExamples(sources) {
        var doublingEx = components_1.Example.run(sources, {
            header: "Doubling",
            description: [
                dom_1.p("A grid can double its column width on tablet and mobile sizes"),
                UI.Message.render({ color: UI.Color.Info }, "A grid will round its columns to the closest reasonable value when doubling, for example a five column grid will use 2 mobile, 3 tablet, 5 desktop. To force 1 column on mobile you can add stackable")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 5, doubling: true }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({width: 5, doubling: true}, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        return [doublingEx.DOM];
    }
    function createStackableExamples(sources) {
        var stackableEx = components_1.Example.run(sources, {
            header: "Stackable",
            description: [
                dom_1.p("A grid can have its columns stack on-top of each other after reaching mobile breakpoints"),
                UI.Message.render({ color: UI.Color.Info }, "To see a grid stack, try resizing your browser to a small width")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 2, stackable: true }, [
                UI.Column.render([
                    UI.Segment.render([
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                    ])
                ]),
                UI.Column.render([
                    UI.Segment.render([
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ width: 2, stackable: true }, [\n        UI.Column.render([\n          UI.Segment.render([\n\n          ])\n        ]),\n        UI.Column.render([\n          UI.Segment.render([\n\n          ])\n        ])\n      ])"
        });
        return [stackableEx.DOM];
    }
    function createReversedExamples(sources) {
        var reversedEx = components_1.Example.run(sources, {
            header: "Reversed",
            description: [
                dom_1.p("A grid or row can specify that its columns should reverse order at different device sizes"),
                UI.Message.render({ color: UI.Color.Info }, "Reversed grids are compatible with divided grids and other complex grid types.")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Grid.render({ reversedComputer: true, equalWidth: true }, [
                    UI.Row.render([
                        UI.Column.render("Computer A Fourth"),
                        UI.Column.render("Computer A Third"),
                        UI.Column.render("Computer A Second"),
                        UI.Column.render("Computer A First")
                    ]),
                    UI.Row.render([
                        UI.Column.render("Computer B Fourth"),
                        UI.Column.render("Computer B Third"),
                        UI.Column.render("Computer B Second"),
                        UI.Column.render("Computer B First")
                    ]),
                ]),
                UI.Grid.render({ reversedTablet: true, equalWidth: true }, [
                    UI.Row.render([
                        UI.Column.render("Tablet A Fourth"),
                        UI.Column.render("Tablet A Third"),
                        UI.Column.render("Tablet A Second"),
                        UI.Column.render("Tablet A First")
                    ])
                ]),
                UI.Grid.render({ reversedMobile: true, equalWidth: true }, [
                    UI.Row.render([
                        UI.Column.render("Mobile A Fourth"),
                        UI.Column.render("Mobile A Third"),
                        UI.Column.render("Mobile A Second"),
                        UI.Column.render("Mobile A First")
                    ])
                ]),
            ])),
            code: "UI.Grid.render({ reversedComputer: true, equalWidth: true }, [\n          UI.Row.render([\n            UI.Column.render(\"Computer A Fourth\"),\n            UI.Column.render(\"Computer A Third\"),\n            UI.Column.render(\"Computer A Second\"),\n            UI.Column.render(\"Computer A First\")\n          ]),\n          UI.Row.render([\n            UI.Column.render(\"Computer B Fourth\"),\n            UI.Column.render(\"Computer B Third\"),\n            UI.Column.render(\"Computer B Second\"),\n            UI.Column.render(\"Computer B First\")\n          ]),\n        ]),\n        UI.Grid.render({ reversedTablet: true, equalWidth: true }, [\n          UI.Row.render([\n            UI.Column.render(\"Tablet A Fourth\"),\n            UI.Column.render(\"Tablet A Third\"),\n            UI.Column.render(\"Tablet A Second\"),\n            UI.Column.render(\"Tablet A First\")\n          ])\n        ]),\n        UI.Grid.render({ reversedMobile: true, equalWidth: true }, [\n          UI.Row.render([\n            UI.Column.render(\"Mobile A Fourth\"),\n            UI.Column.render(\"Mobile A Third\"),\n            UI.Column.render(\"Mobile A Second\"),\n            UI.Column.render(\"Mobile A First\")\n          ])\n        ])"
        });
        var reversedEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ vertReversedComputer: true, equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render("Computer Row 4")
                ]),
                UI.Row.render([
                    UI.Column.render("Computer Row 3")
                ]),
                UI.Row.render([
                    UI.Column.render("Computer Row 2")
                ]),
                UI.Row.render([
                    UI.Column.render("Computer Row 1")
                ])
            ])),
            code: "UI.Grid.render({ vertReversedComputer: true, equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 4\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 3\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 2\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Computer Row 1\")\n        ])\n      ])"
        });
        var reversedEx3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ vertReversedTablet: true, equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render("Tablet Row 4")
                ]),
                UI.Row.render([
                    UI.Column.render("Tablet Row 3")
                ]),
                UI.Row.render([
                    UI.Column.render("Tablet Row 2")
                ]),
                UI.Row.render([
                    UI.Column.render("Tablet Row 1")
                ])
            ])),
            code: "UI.Grid.render({ vertReversedTablet: true, equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 4\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 3\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 2\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Tablet Row 1\")\n        ])\n      ])"
        });
        var reversedEx4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ vertReversedMobile: true, equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render("Mobile Row 4")
                ]),
                UI.Row.render([
                    UI.Column.render("Mobile Row 3")
                ]),
                UI.Row.render([
                    UI.Column.render("Mobile Row 2")
                ]),
                UI.Row.render([
                    UI.Column.render("Mobile Row 1")
                ])
            ])),
            code: "UI.Grid.render({ vertReversedMobile: true, equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 4\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 3\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 2\")\n        ]),\n        UI.Row.render([\n          UI.Column.render(\"Mobile Row 1\")\n        ])\n      ])"
        });
        return [reversedEx.DOM, reversedEx2.DOM, reversedEx3.DOM, reversedEx4.DOM];
    }
    function createDeviceVisiblityExamples(sources) {
        var visibilityEx = components_1.Example.run(sources, {
            header: "Device Visibility",
            description: [
                dom_1.p("A columns or row can appear only for a specific device, or screen sizes"),
                UI.Message.render({ color: UI.Color.Info }, "See container documentation for information on breakpoint calculations")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ width: 2, largescreenOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Large Screen")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Large Screen")
                    ])
                ]),
                UI.Row.render({ width: 2, mobileOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Mobile")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Mobile")
                    ])
                ]),
                UI.Row.render({ width: 3 }, [
                    UI.Column.render({ computerOnly: true }, [
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render({ mobileOnly: true }, [
                        UI.Segment.render("Tablet and Mobile")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("All Sizes")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("All Sizes")
                    ])
                ]),
                UI.Row.render({ width: 4, computerOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Computer")
                    ])
                ]),
                UI.Row.render({ width: 3, tabletOnly: true }, [
                    UI.Column.render([
                        UI.Segment.render("Tablet")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Tablet")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("Tablet")
                    ])
                ]),
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ width: 2, largescreenOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Large Screen\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Large Screen\")\n          ])\n        ]),\n        UI.Row.render({ width: 2, mobileOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Mobile\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Mobile\")\n          ])\n        ]),\n        UI.Row.render({ width: 3 }, [\n          UI.Column.render({ computerOnly: true }, [\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render({ mobileOnly: true }, [\n            UI.Segment.render(\"Tablet and Mobile\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"All Sizes\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"All Sizes\")\n          ])\n        ]),\n        UI.Row.render({ width: 4, computerOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Computer\")\n          ])\n        ]),\n        UI.Row.render({ width: 3, tabletOnly: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"Tablet\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Tablet\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"Tablet\")\n          ])\n        ]),\n      ])"
        });
        return [visibilityEx.DOM];
    }
    function createResponsiveWithExamples(sources) {
        var widthEx = components_1.Example.run(sources, {
            header: "Responsive Width",
            description: [
                dom_1.p("A column can specify a width for a specific device"),
                UI.Message.render({ color: UI.Color.Info }, "It's recommended to use a responsive pattern like doubling or stackable to reduce complexity when designing responsively, however in some circumstances specifying exact widths for screen sizes may be necessary.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ mobile: 16, tablet: 8, computer: 4 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4}),\n        UI.Column.render({mobile: 16, tablet: 8, computer: 4})\n      ])"
        });
        var widthEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
                UI.Column.render({ width: 4, largescreen: 2 }, [
                    dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")
                ]),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 4, largescreen: 2}),\n        UI.Column.render({width: 4, largescreen: 2}),\n        UI.Column.render({width: 4, largescreen: 2}),\n        UI.Column.render({width: 4, largescreen: 2}),\n      ])"
        });
        return [widthEx.DOM, widthEx2.DOM];
    }
})(ResponsiveVariations = exports.ResponsiveVariations || (exports.ResponsiveVariations = {}));


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Types;
(function (Types) {
    function run(sources) {
        var basicEx = components_1.Example.run(sources, {
            highlighted: true,
            header: ["Grid", UI.Label.render({ color: UI.Color.Primary }, "Flexbox")],
            description: "A basic grid",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render()
            ])),
            code: "UI.Grid.render([\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var dividedEx = components_1.Example.run(sources, {
            header: ["Divided", UI.Label.render({ color: UI.Color.Secondary }, "Requires rows")],
            description: "A grid can have dividers between its columns",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3, divided: true }, [
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                ]),
                UI.Row.render([
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                ])
            ])),
            code: "UI.Grid.render({width: 3, divided: true}, [\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var verticalEx = components_1.Example.run(sources, {
            header: ["Vertical Divided", UI.Label.render({ color: UI.Color.Secondary }, "Requires Rows")],
            description: "A grid can have dividers between rows",
            VNode$: xstream_1.default.of(UI.Grid.render({ verticallyDivided: true }, [
                UI.Row.render({ width: 2 }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                ]),
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Grid.render({ verticallyDivided: true }, [\n        UI.Row.render({ width: 2 }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ width: 3 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var celledEx = components_1.Example.run(sources, {
            header: ["Celled", UI.Label.render({ color: UI.Color.Secondary }, "Requires Rows")],
            description: "A grid can have rows divided into cells",
            VNode$: xstream_1.default.of(UI.Grid.render({ celled: true }, [
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 13 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
            ])),
            code: "UI.Grid.render({celled: true}, [\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 13})\n        ]),\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 3})\n        ]),\n      ])"
        });
        var intCelledEx = components_1.Example.run(sources, {
            header: ["Internally Celled", UI.Label.render({ color: UI.Color.Secondary }, "Requires Rows")],
            description: "A grid can have rows divisions only between internal rows",
            VNode$: xstream_1.default.of(UI.Grid.render({ intCelled: true }, [
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ intCelled: true }, [\n        UI.Row.render([\n          UI.Column.render({ width: 3 }),\n          UI.Column.render({ width: 10 }),\n          UI.Column.render({ width: 3 })\n        ]),\n        UI.Row.render([\n          UI.Column.render({ width: 3 }),\n          UI.Column.render({ width: 10 }),\n          UI.Column.render({ width: 3 })\n        ])\n      ])"
        });
        return xstream_1.default.combine(basicEx.DOM, dividedEx.DOM, verticalEx.DOM, celledEx.DOM, intCelledEx.DOM);
    }
    Types.run = run;
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Variations;
(function (Variations) {
    function run(sources) {
        var floatedEx = createFloatedExamples(sources);
        var widthEx = createWidthExamples(sources);
        var countEx = createCountExamples(sources);
        var equalWidthEx = createEqualWidthExamples(sources);
        var stretchedEx = createStretchedExamples(sources);
        var paddedEx = createPaddedExamples(sources);
        var relaxedEx = createRelaxedExamples(sources);
        var centeredEx = createCenteredExamples(sources);
        var textEx = createTextAlignmentExamples(sources);
        var alignmentEx = createAlignmentExamples(sources);
        var examples = [].concat(floatedEx, widthEx, countEx, equalWidthEx, stretchedEx, paddedEx, relaxedEx, centeredEx, textEx, alignmentEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Variations.run = run;
    function createFloatedExamples(sources) {
        var floatedEx = components_1.Example.run(sources, {
            header: "Floated",
            description: "A column can sit flush against the left or right edge of a row",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ float: "left", width: 5 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ float: "right", width: 5 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({float: \"left\", width: 5}),\n        UI.Column.render({float: \"right\", width: 5}),\n      ])"
        });
        return [floatedEx.DOM];
    }
    function createWidthExamples(sources) {
        var widthEx = components_1.Example.run(sources, {
            header: "Column Width",
            description: "A column can vary in width taking up more than a single grid column.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }, [
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render({ width: 9 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                UI.Column.render({ width: 3 }, [dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 9}),\n        UI.Column.render({width: 3})\n      ])"
        });
        return [widthEx.DOM];
    }
    function createCountExamples(sources) {
        var countEx = components_1.Example.run(sources, {
            header: "Column Count",
            description: "A grid can have a different number of columns per row",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ width: 4 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ width: 5 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ width: 3 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ width: 4 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ width: 5 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        return [countEx.DOM];
    }
    function createEqualWidthExamples(sources) {
        var equalWidthEx = components_1.Example.run(sources, {
            header: "Equal Width",
            description: "A grid can automatically resize all elements to split the available width evenly",
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Column.render([
                    UI.Segment.render("1")
                ]),
                UI.Column.render({ width: 8 }, [
                    UI.Segment.render("2")
                ]),
                UI.Column.render([
                    UI.Segment.render("3")
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Column.render([\n          UI.Segment.render(\"1\")\n        ]), \n        UI.Column.render({width: 8}, [\n          UI.Segment.render(\"2\")\n        ]), \n        UI.Column.render([\n          UI.Segment.render(\"3\")\n        ])\n      ])"
        });
        var equalWidthEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("3")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("4")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("3")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("2")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"3\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"4\")\n          ])\n        ]),\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"3\")\n          ])\n        ]),\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render( [\n            UI.Segment.render(\"2\")\n          ])\n        ])\n      ])"
        });
        return [equalWidthEx.DOM, equalWidthEx2.DOM];
    }
    function createStretchedExamples(sources) {
        var stretchedEx = components_1.Example.run(sources, {
            header: "Stretched",
            description: "A row can stretch its contents to take up the entire column height",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3, divided: true }, [
                UI.Row.render({ stretched: true }, [
                    UI.Column.render([
                        UI.Segment.render("1")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2"),
                        UI.Segment.render("3")
                    ])
                ])
            ])),
            code: "UI.Grid.render({width: 3, divided: true}, [\n        UI.Row.render({ stretched: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"1\")\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ]), \n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\"),\n            UI.Segment.render(\"3\")\n          ])\n        ])\n      ])"
        });
        var stretchedEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Row.render({ stretched: true }, [
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render({ width: 6 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ]),
                    UI.Column.render({ width: 6 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Segment.render("1"),
                        UI.Segment.render("2")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Row.render({ stretched: true }, [\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render({ width: 6 }, [\n            UI.Image.render({ size: UI.Size.Fluid })\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ])\n        ]),\n        UI.Row.render([\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ]),\n          UI.Column.render({ width: 6 }, [\n            UI.Image.render({ size: UI.Size.Fluid })\n          ]),\n          UI.Column.render([\n            UI.Segment.render(\"1\"),\n            UI.Segment.render(\"2\")\n          ])\n        ])\n      ])"
        });
        return [stretchedEx.DOM, stretchedEx2.DOM];
    }
    function createPaddedExamples(sources) {
        var paddedEx = components_1.Example.run(sources, {
            header: "Padded",
            description: [
                dom_1.p("A grid can preserve its vertical and horizontal gutters on first and last columns"),
                dom_1.p("The following grid has vertical and horizontal gutters")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Divider.render(),
                UI.Grid.render({ width: 2, padded: true }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Divider.render(),\n        UI.Grid.render({ width: 2, padded: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])"
        });
        var paddedEx2 = components_1.Example.run(sources, {
            description: "The following grid has vertical gutters.",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Divider.render(),
                UI.Grid.render({ width: 2, verticallyPadded: true }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Divider.render(),\n        UI.Grid.render({ width: 2, verticallyPadded: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])"
        });
        var paddedEx3 = components_1.Example.run(sources, {
            description: "The following grid has horizontal gutters.",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Divider.render(),
                UI.Grid.render({ width: 2, horizontallyPadded: true }, [
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")]),
                    UI.Column.render([dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cuius quidem, quoniam Stoicus fuit, sententia condemnata mihi videtur esse inanitas ista verborum. Istam voluptatem perpetuam quis potest praestare sapienti?")])
                ])
            ])),
            code: "UI.Divider.render(),\n        UI.Grid.render({ width: 2, horizontallyPadded: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])"
        });
        return [paddedEx.DOM, paddedEx2.DOM, paddedEx3.DOM];
    }
    function createRelaxedExamples(sources) {
        var relaxedEx = components_1.Example.run(sources, {
            header: "Relaxed",
            description: "A grid can increase its gutters to allow for more negative space",
            VNode$: xstream_1.default.of(UI.Grid.render({ relaxed: true, width: 4 }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({relaxed: true, width: 4}, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var relaxedEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ veryRelaxed: true, width: 4 }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({veryRelaxed: true, width: 4}, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        return [relaxedEx.DOM, relaxedEx2.DOM];
    }
    function createCenteredExamples(sources) {
        var centeredEx = components_1.Example.run(sources, {
            header: "Centered",
            description: "A grid can have its columns centered",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 2, centered: true }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Row.render({ width: 4, centered: true }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ width: 4 }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({width: 2, centered: true}, [\n        UI.Column.render(),\n        UI.Row.render({width:4, centered: true}, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),        \n        UI.Row.render({width:4}, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        return [centeredEx.DOM];
    }
    function createTextAlignmentExamples(sources) {
        var textEx = components_1.Example.run(sources, {
            header: "Text Alignment",
            description: "A grid, row, or column can specify its text alignment",
            VNode$: xstream_1.default.of(UI.Grid.render({ textAlignment: "center" }, [
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Cats" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Dogs" },
                            { main: "Poodle" },
                            { main: "Cockerspaniel" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Monkeys" }
                        ])
                    ])
                ])
            ])),
            code: "UI.Grid.render({ textAlignment: \"center\"}, [\n        UI.Row.render({width: 3}, [\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Cats\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Dogs\" },\n              { main: \"Poodle\" },\n              { main: \"Cockerspaniel\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Monkeys\" }\n            ])\n          ])\n        ])\n      ])"
        });
        var textEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ textAlignment: "center" }, [
                UI.Row.render({ width: 3 }, [
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Cats" }
                        ])
                    ]),
                    UI.Column.render({ textAlignment: "left" }, [
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Dogs" },
                            { main: "Poodle" },
                            { main: "Cockerspaniel" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Monkeys" }
                        ])
                    ])
                ]),
                UI.Row.render({ textAlignment: "justified" }, [
                    UI.Column.render("Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other.")
                ])
            ])),
            code: "UI.Grid.render({ textAlignment: \"center\"}, [\n        UI.Row.render({width: 3}, [\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Cats\" }\n            ])\n          ]),\n          UI.Column.render({textAlignment: \"left\"}, [\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Dogs\" },\n              { main: \"Poodle\" },\n              { main: \"Cockerspaniel\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Monkeys\" }\n            ])\n          ])\n        ]), \n        UI.Row.render({textAlignment: \"justified\"}, [\n          UI.Column.render(\"Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other. Justified content fits exactly inside the grid column, taking up the entire width from one side to the other.\")\n        ])\n      ])"
        });
        var textEx3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ textAlignment: "right", width: 3 }, [
                UI.Row.render([
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Cats" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Dogs" },
                            { main: "Poodle" },
                            { main: "Cockerspaniel" }
                        ])
                    ]),
                    UI.Column.render([
                        UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [
                            { header: true, main: "Monkeys" }
                        ])
                    ])
                ])
            ])),
            code: "UI.Grid.render({ textAlignment: \"right\", width: 3 }, [\n        UI.Row.render([\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Cats\" }\n            ])\n          ]),\n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Dogs\" },\n              { main: \"Poodle\" },\n              { main: \"Cockerspaniel\" }\n            ])\n          ]), \n          UI.Column.render([\n            UI.Menu.render({ size: UI.Size.Fluid, vertical: true }, [\n              { header: true, main: \"Monkeys\" }\n            ])\n          ])\n        ])\n      ])"
        });
        return [textEx.DOM, textEx2.DOM, textEx3.DOM];
    }
    function createAlignmentExamples(sources) {
        var alignmentEx = components_1.Example.run(sources, {
            header: "Vertical Alignment",
            description: "A grid, row, or column can specify its vertical alignment to have all its columns vertically centered.",
            VNode$: xstream_1.default.of(UI.Grid.render({ alignment: "middle", centered: true, width: 4 }, [
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ]),
                UI.Column.render([
                    UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                ])
            ])),
            code: "UI.Grid.render({ alignment: \"middle\", centered: true, width: 4 }, [\n        UI.Column.render([\n          UI.Image.render({ size: UI.Size.Fluid }, \"\")\n        ]),\n        UI.Column.render([\n          UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n          UI.Image.render({ size: UI.Size.Fluid }, \"\")\n        ]),\n        UI.Column.render([\n          UI.Image.render({ size: UI.Size.Fluid }, \"\")\n        ])\n      ])"
        });
        var alignmentEx2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render({ centered: true, width: 4 }, [
                UI.Row.render({ alignment: "top" }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ alignment: "middle" }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render({ alignment: "bottom" }, [
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000"),
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({ centered: true, width: 4 }, [\n        UI.Row.render({ alignment: \"top\" }, [\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ])\n        ]),\n        UI.Row.render({ alignment: \"middle\" }, [\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ])\n        ]),\n        UI.Row.render({ alignment: \"bottom\" }, [\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\"),\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ]),\n          UI.Column.render([\n            UI.Image.render({ size: UI.Size.Fluid }, \"\")\n          ])\n        ])\n      ])"
        });
        return [alignmentEx.DOM, alignmentEx2.DOM];
    }
})(Variations = exports.Variations || (exports.Variations = {}));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var overview_1 = __webpack_require__(162);
var definition_1 = __webpack_require__(156);
var Grid;
(function (Grid) {
    function run(sources) {
        var overview = overview_1.Overview.run(sources);
        var definition = definition_1.Definition.run(sources);
        var tabs = UI.Tabs.run({
            DOM: sources.DOM,
            labels: ["Overview", "Definition"],
            content: [overview.map(function (o) { return [o]; }), definition.map(function (o) { return [o]; })],
            menuProps$: xstream_1.default.of({ equalWidth: true }),
            segmentProps$: xstream_1.default.of({ basic: true })
        });
        var vTree$ = xstream_1.default.combine(tabs.DOM).map(function (_a) {
            var tabs = _a[0];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Grid",
                                subtext: "A grid is used to harmonize negative space in a layout"
                            }
                        })
                    ])
                ]),
                UI.Container.render([
                    UI.Divider.render({ hidden: true }),
                    tabs
                ])
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Grid.run = run;
})(Grid = exports.Grid || (exports.Grid = {}));


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var Columns;
(function (Columns) {
    function run(sources) {
        var flowEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Automatic Flow",
            description: "Most grids do not need to specify rows. Content will automatically flow to the next row when all the grid columns are taken in the current row.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 })
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 })\n      ])"
        });
        var contentEx = components_1.Example.run(sources, {
            header: "Column Content",
            description: "Since columns use padding to create gutters, content stylings should not be applied directly to columns, but to elements inside of columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 3 }, [
                UI.Column.render([
                    UI.Segment.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Column.render([
                    UI.Segment.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Column.render([
                    UI.Segment.render([
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render([\n          UI.Segment.render([\n            UI.Image.render(\"\")\n          ])\n        ]),\n        UI.Column.render([\n          UI.Segment.render([\n            UI.Image.render(\"\")\n          ])\n        ]),\n        UI.Column.render([\n          UI.Segment.render([\n            UI.Image.render(\"\")\n          ])\n        ])\n      ])"
        });
        var widthEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Column Widths",
            description: "Column widths can be specified using the width property. If a column cannot fit in a row it will automatically flow to the next row",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 8 }),
                UI.Column.render({ width: 8 }),
                UI.Column.render({ width: 10 }),
                UI.Column.render({ width: 6 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 12 }),
                UI.Column.render({ width: 2 }),
                UI.Column.render({ width: 14 }),
                UI.Column.render({ width: 16 })
            ])),
            code: "UI.Grid.render([\n       UI.Column.render({ width: 8 }),\n        UI.Column.render({ width: 8 }),\n        UI.Column.render({ width: 10 }),\n        UI.Column.render({ width: 6 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 12 }),\n        UI.Column.render({ width: 2}),\n        UI.Column.render({ width: 14 }),\n        UI.Column.render({ width: 16})\n      ])"
        });
        return xstream_1.default.combine(flowEx.DOM, contentEx.DOM, widthEx.DOM);
    }
    Columns.run = run;
})(Columns = exports.Columns || (exports.Columns = {}));


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var introduction_1 = __webpack_require__(163);
var columns_1 = __webpack_require__(161);
var rows_1 = __webpack_require__(165);
var varyingGrids_1 = __webpack_require__(166);
var responsiveGrids_1 = __webpack_require__(164);
var Overview;
(function (Overview) {
    function run(sources) {
        var intro = introduction_1.Introduction.run(sources);
        var columns = columns_1.Columns.run(sources);
        var rows = rows_1.Rows.run(sources);
        var varyingGrids = varyingGrids_1.VaryingGrids.run(sources);
        var responsiveGrids = responsiveGrids_1.ResponsiveGrids.run(sources);
        var vTree$ = xstream_1.default.combine(intro, columns, rows, varyingGrids, responsiveGrids).map(function (_a) {
            var intro = _a[0], columns = _a[1], rows = _a[2], varyingGrids = _a[3], responsiveGrids = _a[4];
            return UI.Container.render([
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Introduction")
                ]
                    .concat(intro)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Columns")
                ]
                    .concat(columns)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Rows")
                ]
                    .concat(rows)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Varying Grids")
                ]
                    .concat(varyingGrids)),
                UI.Segment.render({ basic: true }, [
                    UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Responsive Grids")
                ]
                    .concat(responsiveGrids))
            ]);
        });
        return vTree$;
    }
    Overview.run = run;
})(Overview = exports.Overview || (exports.Overview = {}));


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Introduction;
(function (Introduction) {
    function run(sources) {
        var gridEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Grids",
            description: [dom_1.p(["A grid is a structure with a ", dom_1.a({ attrs: { href: "http://99designs.com/designer-blog/2013/03/21/history-of-the-grid-part-1/" } }, "long history"), " used to align negative space in designs."]),
                dom_1.p("Using a grid makes content appear to flow more naturally on your page.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 })
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 4}),\n        UI.Column.render({width: 4})\n      ])"
        });
        var columnsEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Columns",
            description: [
                dom_1.p("Grids divide horizontal space into indivisible units called \"columns\". All columns in a grid must specify their width as proportion of the total available row width."),
                dom_1.p("All grid systems chooses an arbitrary column count to allow per row. Semantic's default theme uses 16 columns."),
                dom_1.p(["The example below shows four four wide columns will fit in the first row, ", dom_1.code("16 / 4 = 4"), " and three various sized columns in the second row. ", dom_1.code("2 + 8 + 6 = 16")]),
                dom_1.p("The default column count, and other arbitrary features of grids can be changed by adjusting Semantic UI's underlying theming variables.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 2 }),
                UI.Column.render({ width: 8 }),
                UI.Column.render({ width: 6 }),
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 2 }),\n        UI.Column.render({ width: 8 }),\n        UI.Column.render({ width: 6 }),\n      ])"
        });
        var rowsEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Rows",
            description: [
                dom_1.p("Rows are groups of columns which are aligned horizontally."),
                dom_1.p(["Rows can either be ", dom_1.i("explicit"), " marked with an additional row element, or ", dom_1.i("implicit"), ", automatically occurring when no more space is left in a previous row."])
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 4 }, [
                UI.Row.render([
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ]),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
            ])),
            code: "UI.Grid.render({ width: 4 }, [\n        UI.Row.render([\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n      ])"
        });
        var guttersEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Gutters",
            description: [
                dom_1.p(["Grid columns are separated by areas of white space referred to as \"gutters\". Gutters improve legibility by providing, ",
                    dom_1.a({ attrs: { href: "https://en.wikipedia.org/wiki/Negative_space" } }, "negative space"), " between page elements."]),
                dom_1.p("Gutters remain a constant size regardless of the width of the grid, or how many columns are in a row. To increase the size of gutters in a particular grid, you can use a relaxed grid variation.")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Grid.render([
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                    ]),
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render()
                    ])
                ]),
                UI.Grid.render({ relaxed: true }, [
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                    ]),
                    UI.Row.render({ equalWidth: true }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render()
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n          ]),\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render()\n          ])\n        ]),\n        UI.Grid.render({relaxed: true}, [\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n          ]),\n          UI.Row.render({ equalWidth: true }, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render()\n          ])\n        ])"
        });
        var negMarginsEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Negative margins",
            description: [dom_1.p(["Since all grid columns include gutters, grids use ", dom_1.a({ attrs: { href: "https://csswizardry.com/2011/08/building-better-grid-systems/" } }, "negative margins"),
                    " to make sure that the first and last columns sit flush with content outside the grid."]),
                dom_1.p("In the following example, you can see even though the top row has padding, the attached button still sits flush with the edge of the grid."),
                dom_1.p("In some cases you may want to avoid using negative margins. You can do this by using a padded grid variation.")
            ],
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Button.render({ attachment: UI.Attachment.Top }, "Button before grid"),
                UI.Grid.render([
                    UI.Column.render({ width: 16 }),
                    UI.Column.render({ width: 10 }),
                    UI.Column.render({ width: 6 })
                ]),
                UI.Grid.render([
                    UI.Column.render({ width: 16 }),
                ]),
                UI.Button.render({ attachment: UI.Attachment.Bottom }, "Button after grid")
            ])),
            code: "UI.Button.render({attachment: UI.Attachment.Top}, \"Button before grid\"),\n        UI.Grid.render([\n          UI.Column.render({width: 16}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 6})\n        ]),\n        UI.Grid.render([\n          UI.Column.render({width: 16}),\n        ]),\n        UI.Button.render({attachment: UI.Attachment.Bottom}, \"Button after grid\")"
        });
        var containerEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Container grids",
            description: [
                dom_1.p("Grids are fluid and will automatically flow in size to take the maximum available width."),
                dom_1.p("Containers are elements designed to limit page content to a reasonable maximum width for display based on the size of the user's screen."),
                dom_1.p("Using a grid container is the best way to include top-level page content inside a grid.")
            ],
            VNode$: xstream_1.default.of(UI.Grid.render({ container: true }, [
                UI.Column.render({ width: 16 })
            ])),
            code: "UI.Grid.render({container: true}, [\n        UI.Column.render({width: 16})\n      ])"
        });
        return xstream_1.default.combine(gridEx.DOM, columnsEx.DOM, rowsEx.DOM, guttersEx.DOM, negMarginsEx.DOM, containerEx.DOM);
    }
    Introduction.run = run;
})(Introduction = exports.Introduction || (exports.Introduction = {}));


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var ResponsiveGrids;
(function (ResponsiveGrids) {
    function run(sources) {
        var containerEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Containers",
            description: "A grid container variant can be used to provide a responsive, fixed width container for wrapping the contents of a page.",
            VNode$: xstream_1.default.of(UI.Grid.render({ container: true }, [
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 }),
                UI.Column.render({ width: 4 })
            ])),
            code: "UI.Grid.render({container: true}, [\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 }),\n        UI.Column.render({ width: 4 })\n      ])"
        });
        var stackableEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Stackable",
            description: "A stackable grid will automatically stack rows to a single columns on mobile devices",
            VNode$: xstream_1.default.of(UI.Grid.render({ stackable: true, width: 4 }, [
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render()
            ])),
            code: "UI.Grid.render({ stackable: true, width: 4 }, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var reverseEx = components_1.Example.run(sources, {
            header: "Reverse Order",
            description: "Semantic includes special reversed variations that allow you to reverse the order of columns or rows by device",
            VNode$: xstream_1.default.of(UI.Grid.render({ reversedMobile: true, equalWidth: true }, [
                UI.Column.render("First"),
                UI.Column.render("Second"),
                UI.Column.render("Third"),
            ])),
            code: "UI.Grid.render({ reversedMobile: true, equalWidth: true }, [\n        UI.Column.render(\"First\"),\n        UI.Column.render(\"Second\"),\n        UI.Column.render(\"Third\"),\n      ])"
        });
        var doublingEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Doubling",
            description: "A doubling grid will double column widths for each device jump.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ doubling: true, width: 8 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ]),
                UI.Row.render({ doubling: true, width: 6 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ]),
                UI.Row.render({ doubling: true, width: 4 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render(),
                    UI.Column.render()
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ doubling: true, width: 8 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ doubling: true, width: 6 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ]),\n        UI.Row.render({ doubling: true, width: 4 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var manualEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Manual Tweaks",
            description: "Although design patterns like doubling or stackable are useful at simplifying responsive styling, you can also manually tweak device presentation by specifying the width for a devicetype on columns or setting the device only properties on grids, rows or columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ centered: true }, [
                UI.Row.render({ computerOnly: true }, [
                    UI.Column.render()
                ]),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
                UI.Column.render({ tablet: 6, computer: 8 }),
            ])),
            code: "UI.Grid.render({centered: true}, [\n        UI.Row.render({computerOnly: true}, [\n          UI.Column.render()\n        ]),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n        UI.Column.render({tablet: 6, computer: 8}),\n      ])"
        });
        return xstream_1.default.combine(containerEx.DOM, stackableEx.DOM, reverseEx.DOM, doublingEx.DOM, manualEx.DOM);
    }
    ResponsiveGrids.run = run;
})(ResponsiveGrids = exports.ResponsiveGrids || (exports.ResponsiveGrids = {}));


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Rows;
(function (Rows) {
    function run(sources) {
        var groupingEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Grouping",
            description: "Row wrappers allow you to apply variations to a group of columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 4 }, [
                UI.Row.render({ width: 2 }, [
                    UI.Column.render()
                ]),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render()
            ])),
            code: "UI.Grid.render({width: 4}, [\n        UI.Row.render({width: 2}, [\n          UI.Column.render()\n        ]),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render()\n      ])"
        });
        var clearEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Clearing Content",
            description: "Row wrappers will automatically clear previous columns, making them useful when using floated variations.",
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Row.render({ width: 4 }, [
                    UI.Column.render({ float: "left" }),
                    UI.Column.render({ float: "right" })
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }),
                    UI.Column.render({ width: 8 }),
                    UI.Column.render({ width: 5 })
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Row.render({ width: 4 }, [\n          UI.Column.render({ float: \"left\" }),\n          UI.Column.render({ float: \"right\" })\n        ]),\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 8}),\n          UI.Column.render({width: 5})\n        ])\n      ])"
        });
        var specialEx = components_1.Example.run(sources, {
            header: "Special Grids",
            description: "Additionally, some types of grids, like divided or celled require row wrappers to apply formatting correctly.",
            VNode$: xstream_1.default.of(UI.Grid.render({ intCelled: true }, [
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at purus nibh. Cras metus nulla, vestibulum in auctor ac, fermentum vitae tellus. Donec sed aliquam nisl. Sed eu leo id est pretium euismod. Nulla id justo at mi venenatis volutpat. Fusce nisi leo, placerat id condimentum a, accumsan vitae tortor. Nunc magna nunc, venenatis nec elementum eu, ultrices in sem. Maecenas tincidunt semper molestie. Nulla nec neque sit amet libero molestie feugiat. Cras id metus velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam lobortis arcu non leo porta ut euismod ante luctus. Praesent elementum sodales dolor id scelerisque.")
                    ]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ]),
                UI.Row.render([
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ]),
                    UI.Column.render({ width: 10 }, [
                        dom_1.p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at purus nibh. Cras metus nulla, vestibulum in auctor ac, fermentum vitae tellus. Donec sed aliquam nisl. Sed eu leo id est pretium euismod. Nulla id justo at mi venenatis volutpat. Fusce nisi leo, placerat id condimentum a, accumsan vitae tortor. Nunc magna nunc, venenatis nec elementum eu, ultrices in sem. Maecenas tincidunt semper molestie. Nulla nec neque sit amet libero molestie feugiat. Cras id metus velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam lobortis arcu non leo porta ut euismod ante luctus. Praesent elementum sodales dolor id scelerisque.")
                    ]),
                    UI.Column.render({ width: 3 }, [
                        UI.Image.render({ size: UI.Size.Fluid }, "https://placeholdit.imgix.net/~text?txtsize=330&txt=Placeholder&w=1000&h=1000")
                    ])
                ])
            ])),
            code: "UI.Grid.render({intCelled: true}, [\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 3})\n        ]),\n        UI.Row.render([\n          UI.Column.render({width: 3}),\n          UI.Column.render({width: 10}),\n          UI.Column.render({width: 3})\n        ])\n      ])"
        });
        return xstream_1.default.combine(groupingEx.DOM, clearEx.DOM, specialEx.DOM);
    }
    Rows.run = run;
})(Rows = exports.Rows || (exports.Rows = {}));


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var VaryingGrids;
(function (VaryingGrids) {
    function run(sources) {
        var nestedEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Nesting Grids",
            description: "Grids can be placed inside of other grids, letting you sub-divide columns.",
            VNode$: xstream_1.default.of(UI.Grid.render({ width: 2 }, [
                UI.Column.render([
                    UI.Grid.render({ width: 3 }, [
                        UI.Column.render(),
                        UI.Column.render(),
                        UI.Column.render(),
                    ])
                ]),
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render([
                    UI.Grid.render([
                        UI.Column.render({ width: 10 }),
                        UI.Column.render({ width: 6 }),
                    ])
                ]),
            ])),
            code: "UI.Grid.render({ width: 2}, [\n        UI.Column.render({\n          UI.Grid.render({width: 3}, [\n            UI.Column.render(),\n            UI.Column.render(),\n            UI.Column.render(),\n          ])\n        }),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render([\n          UI.Grid.render([\n            UI.Column.render({width: 10}),\n            UI.Column.render({width: 6}),\n          ])\n        ]),\n      ])"
        }).DOM.map(function (ex) { return dom_1.div(".special", [ex]); });
        var colCountEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Automatic Column Count",
            description: "The equalWidth variation will automatically divide column width evenly. This is useful with dynamic content where you do not know the column count in advance.",
            VNode$: xstream_1.default.of(UI.Grid.render({ equalWidth: true }, [
                UI.Column.render(),
                UI.Column.render(),
                UI.Column.render(),
                UI.Row.render({ equalWidth: true }, [
                    UI.Column.render(),
                    UI.Column.render()
                ])
            ])),
            code: "UI.Grid.render({ equalWidth: true }, [\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Column.render(),\n        UI.Row.render({ equalWidth: true }, [\n          UI.Column.render(),\n          UI.Column.render()\n        ])\n      ])"
        });
        var centeringEx = components_1.Example.run(sources, {
            highlighted: true,
            header: "Centering Content",
            description: "If a row does not take up all sixteen grid columns, you can use a centered variation to center the column contents inside the grid.",
            VNode$: xstream_1.default.of(UI.Grid.render({ centered: true, width: 2 }, [
                UI.Column.render(),
                UI.Row.render({ width: 4 }, [
                    UI.Column.render(),
                    UI.Column.render(),
                ])
            ])),
            code: "UI.Grid.render({ centered: true, width: 2 }, [\n        UI.Column.render(),\n        UI.Row.render({ width: 4 }, [\n          UI.Column.render(),\n          UI.Column.render(),\n        ])\n      ])"
        });
        return xstream_1.default.combine(nestedEx, colCountEx.DOM, centeringEx.DOM);
    }
    VaryingGrids.run = run;
})(VaryingGrids = exports.VaryingGrids || (exports.VaryingGrids = {}));


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(147));
__export(__webpack_require__(152));
__export(__webpack_require__(160));
__export(__webpack_require__(169));
__export(__webpack_require__(173));


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Content;
(function (Content) {
    function run(sources) {
        var headerEx = createHeaderExamples(sources);
        var textEx = createTextExamples(sources);
        var inputEx = createInputExamples(sources);
        var buttonEx = createButtonExamples(sources);
        var linkEx = createLinkExamples(sources);
        var dropdownEx = createDropdownExamples(sources);
        var popupEx = createPopupExamples(sources);
        var searchEx = createSearchExamples(sources);
        var menuEx = createMenuExamples(sources);
        var subMenuEx = createSubMenuExamples(sources);
        var examples = [].concat(headerEx, textEx, inputEx, buttonEx, linkEx, dropdownEx, popupEx, searchEx, menuEx, subMenuEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Content.run = run;
    function createHeaderExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Header",
            description: "A menu item may include a header or may itself be a header",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { header: true, main: "Our company" },
                { main: "About us" },
                { main: "Jobs" },
                { main: "Locations" }
            ])),
            code: "UI.Menu.render([\n        {header: true, main: \"Our company\"},\n        {main: \"About us\"},\n        {main: \"Jobs\"},\n        {main: \"Locations\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    header: true,
                    main: [
                        "Products",
                        UI.Menu.render({ submenu: true }, [
                            { main: "Enterprise" },
                            { main: "Consumer" }
                        ])
                    ]
                },
                {
                    header: true,
                    main: [
                        "CMS Solutions",
                        UI.Menu.render({ submenu: true }, [
                            { main: "Rails" },
                            { main: "Python" },
                            { main: "PHP" }
                        ])
                    ]
                }, {
                    header: true,
                    main: [
                        "Hosting",
                        UI.Menu.render({ submenu: true }, [
                            { main: "Shared" },
                            { main: "Dedicated" }
                        ])
                    ]
                }, {
                    header: true,
                    main: [
                        "Support",
                        UI.Menu.render({ submenu: true }, [
                            { main: "E-mail Support" },
                            { main: "FAQs" }
                        ])
                    ]
                }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          header: true,\n          main: [\n            \"Products\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"Enterprise\" },\n              { main: \"Consumer\" }\n            ])\n          ]\n        },\n        {\n          header: true,\n          main: [\n            \"CMS Solutions\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"Rails\" },\n              { main: \"Python\" },\n              { main: \"PHP\" }\n            ])\n          ]\n        }, {\n          header: true,\n          main: [\n            \"Hosting\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"Shared\" },\n              { main: \"Dedicated\" }\n            ])\n          ]\n        }, {\n          header: true,\n          main: [\n            \"Support\",\n            UI.Menu.render({ submenu: true }, [\n              { main: \"E-mail Support\" },\n              { main: \"FAQs\" }\n            ])\n          ]\n        }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createTextExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Text",
            description: "A vertical menu item can include any type of text content.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    main: [
                        UI.Header.render("Promotions"),
                        dom_1.p("Check out our new promotions"),
                    ]
                },
                {
                    main: [
                        UI.Header.render("Coupons"),
                        dom_1.p("Check out our collection of coupons"),
                    ]
                },
                {
                    main: [
                        UI.Header.render("Rebates"),
                        dom_1.p("Visit our rebate forum for information on claiming rebates"),
                    ]
                }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          main: [\n            UI.Header.render(\"Promotions\"),\n            p(\"Check out our new promotions\"),\n          ]\n        },\n        {\n          main: [\n            UI.Header.render(\"Coupons\"),\n            p(\"Check out our collection of coupons\"),\n          ]\n        },\n        {\n          main: [\n            UI.Header.render(\"Rebates\"),\n            p(\"Visit our rebate forum for information on claiming rebates\"),\n          ]\n        }\n      ])"
        });
        return [ex.DOM];
    }
    function createInputExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Input",
            description: "A menu item can contain an input inside of it",
            VNode$: xstream_1.default.of(UI.Menu.render([
                {
                    main: [
                        UI.Textbox.render({ placeholder: "Search..", icon: true }, [
                            UI.Icon.render(UI.IconType.Search)
                        ])
                    ]
                }, {
                    float: "right", main: [
                        UI.Textbox.render({ placeholder: "Navigate to..", rightContent: true, action: true }, [
                            UI.Button.render("Go")
                        ])
                    ]
                }
            ])),
            code: "UI.Menu.render([\n        {main: [\n          UI.Textbox.render({placeholder: \"Search..\", icon: true}, [\n            UI.Icon.render(UI.IconType.Search)\n          ])\n        ]}, {float: \"right\", main: [\n          UI.Textbox.render({placeholder: \"Navigate to..\", rightContent: true, action: true}, [\n            UI.Button.render(\"Go\")\n          ])\n        ]}\n      ])"
        });
        return [ex.DOM];
    }
    function createButtonExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Button",
            description: "A menu item can contain a button inside of it",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] },
                { main: [UI.Button.render("Log-in")] }
            ])),
            code: "UI.Menu.render([\n        {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]},\n        {main: [UI.Button.render(\"Log-in\")]}\n      ])"
        });
        return [ex.DOM];
    }
    function createLinkExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Link Item",
            description: "A menu may contain a link item, or an item formatted as if it is a link.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                { href: "#", main: "Visit google" },
                { link: true, main: "Javascript link" }
            ])),
            code: "UI.Menu.render({vertical: true}, [\n        {href: \"#\", main: \"Visit google\"},\n        {link: true, main: \"Javascript link\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createDropdownExamples(sources) {
        // let ex = Example.run(sources, {
        //   header: "",
        //   description: "",
        //   VNode$: xs.of(),
        //   code: ``
        // });
        return [];
    }
    function createPopupExamples(sources) {
        // let ex = Example.run(sources, {
        //   header: "",
        //   description: "",
        //   VNode$: xs.of(),
        //   code: ``
        // });
        return [];
    }
    function createSearchExamples(sources) {
        // let ex = Example.run(sources, {
        //   header: "",
        //   description: "",
        //   VNode$: xs.of(),
        //   code: ``
        // });
        return [];
    }
    function createMenuExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Menu",
            description: "A menu may contain another menu group in the same level as menu items.",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { main: "Browse" },
                { main: "Submit" },
                {
                    rightMenu: true, main: [
                        { main: "Sign Up" },
                        { main: "Help" }
                    ]
                }
            ])),
            code: "UI.Menu.render([\n        { main: \"Browse\" },\n        { main: \"Submit\" },\n        {\n          rightMenu: true, main: [\n            { main: \"Sign Up\" },\n            { main: \"Help\" }\n          ]\n        }\n      ])"
        });
        return [ex.DOM];
    }
    function createSubMenuExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Sub Menu",
            description: "A menu item may contain another menu nested inside that acts as a grouped sub-menu.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    main: [
                        UI.Textbox.render({ placeholder: "Search..." })
                    ]
                },
                {
                    main: [
                        "Home",
                        UI.Menu.render({ submenu: true }, [
                            { active: true, main: "Search" },
                            { main: "Add" },
                            { main: "Remove" }
                        ])
                    ]
                },
                { main: [UI.Icon.render(UI.IconType.GridLayout), "Browse"] },
                { main: "Messages" },
                { main: "More" }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          main: [\n            UI.Textbox.render({ placeholder: \"Search...\" })\n          ]\n        },\n        {\n          main: [\n            \"Home\",\n            UI.Menu.render({submenu: true}, [\n              { active: true, main: \"Search\" },\n              { main: \"Add\" },\n              { main: \"Remove\" }\n            ])\n          ]\n        },\n        { main: [UI.Icon.render(UI.IconType.GridLayout), \"Browse\"] },\n        { main: \"Messages\" },\n        { main: \"More\" }\n      ])"
        });
        return [ex.DOM];
    }
})(Content = exports.Content || (exports.Content = {}));


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(171);
var content_1 = __webpack_require__(168);
var states_1 = __webpack_require__(170);
var variations_1 = __webpack_require__(172);
var Menu;
(function (Menu) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var content = content_1.Content.run(sources);
        var states = states_1.States.run(sources);
        var variations = variations_1.Variations.run(sources);
        var vTree$ = xstream_1.default.combine(types, content, states, variations).map(function (_a) {
            var types = _a[0], content = _a[1], states = _a[2], variations = _a[3];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Menu",
                                subtext: "A menu displays grouped navigation actions"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                    ]
                        .concat(types)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Content")
                    ]
                        .concat(content)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "States")
                    ]
                        .concat(states)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")
                    ]
                        .concat(variations)),
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Menu.run = run;
})(Menu = exports.Menu || (exports.Menu = {}));


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var States;
(function (States) {
    function run(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Hover",
            description: [
                dom_1.p("A menu item can be hovered"),
                UI.Message.render({ color: UI.Color.Warning }, "Menu items are only hoverable if they have the href or link property.")
            ],
            VNode$: xstream_1.default.of(UI.Menu.render({ compact: true }, [
                { href: "#", main: "A link" },
                { link: true, main: "div link" }
            ])),
            code: "UI.Menu.render({compact: true}, [\n        {href: \"#\", main: \"A link\"},\n        {link: true, main: \"div link\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            header: "Active",
            description: "A menu item can be active",
            VNode$: xstream_1.default.of(UI.Menu.render({ compact: true }, [
                { active: true, main: "Link" }
            ])),
            code: "UI.Menu.render({compact: true}, [\n        {active: true, main: \"Link\"}\n      ])"
        });
        return xstream_1.default.combine(ex.DOM, ex2.DOM);
    }
    States.run = run;
})(States = exports.States || (exports.States = {}));


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Types;
(function (Types) {
    function run(sources) {
        var basicEx = createBasicExamples(sources);
        var secondaryEx = createSecondaryExamples(sources);
        var pointingEx = createPointingExamples(sources);
        var tabularEx = createTabularExamples(sources);
        var textEx = createTextExamples(sources);
        var verticalEx = createVerticalExamples(sources);
        var paginationEx = createPaginationExamples(sources);
        var examples = [].concat(basicEx, secondaryEx, pointingEx, tabularEx, textEx, verticalEx, paginationEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Types.run = run;
    function createBasicExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Menu",
            description: "A menu",
            VNode$: xstream_1.default.of(UI.Menu.render({ equalWidth: true }, [
                { active: true, main: "Editorials" },
                { main: "Reviews" },
                { main: "Upcoming Events" }
            ])),
            code: "UI.Menu.render({equalWidth: true}, [\n        {active: true, main: \"Editorials\"},\n        {main: \"Reviews\"},\n        {main: \"Upcoming Events\"}\n      ])"
        });
        //Todo add popup example
        var ddlNavigation = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ static: "More" }),
            content$: xstream_1.default.of([
                { main: "Applications", value: "applications" },
                { main: "International Students", value: "international" },
                { main: "Scholarships", value: "scholarships" }
            ])
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.combine(ddlNavigation.DOM).map(function (_a) {
                var ddlNavigation = _a[0];
                return UI.Menu.render({ text: true }, [
                    { main: [UI.Image.render("https://placeholdit.imgix.net/~text?txtsize=33&txt=Logo&w=80&h=80")] },
                    { float: "right", main: [ddlNavigation] }
                ]);
            }),
            code: "let ddlNavigation = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({static: \"More\"}),\n      content$: xs.of([\n        { main: \"Applications\", value: \"applications\" },\n        { main: \"International Students\", value: \"international\" },\n        { main: \"Scholarships\", value: \"scholarships\" }\n      ])\n    });\n    let vTree$ = xs.combine(ddlNavigation.DOM).map(\n      ([ddlNavigation]) => UI.Menu.render({text: true}, [\n        {main: [UI.Image.render(\"\")]},\n        {float: \"right\", main: [ddlNavigation]}\n      ])\n    )"
        });
        //Todo dropdown menu's
        var ddlNavigation2 = UI.Dropdown.run({
            DOM: sources.DOM,
            props$: xstream_1.default.of({ simple: true, default: UI.Icon.render(UI.IconType.Wrench) }),
            content$: xstream_1.default.of([
                { main: "New...", value: "new" },
                { main: "Open...", value: "open" },
                { main: "Save...", value: "save" },
                { main: "Edit permissions...", value: "permissions" },
                { divider: true },
                { main: "Export", headerOnly: true },
                { main: "Share...", value: "" }
            ]),
            args: {
                static: true
            }
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.combine(ddlNavigation2.DOM).map(function (_a) {
                var ddlNavigation = _a[0];
                return dom_1.div([
                    UI.Menu.render({ attachment: "top" }, [
                        { icon: true, dropdown: true, main: ddlNavigation },
                        {
                            float: "right", main: [UI.Textbox.render({ icon: true, transparent: true }, [
                                    UI.Icon.render(UI.IconType.Search)
                                ])]
                        }
                    ]),
                    UI.Segment.render({ attachment: UI.Attachment.Bottom })
                ]);
            }),
            code: "let ddlNavigation2 = UI.Dropdown.run({\n      DOM: sources.DOM,\n      props$: xs.of({ simple: true, default: [UI.Icon.render(UI.IconType.Wrench)] }),\n      content$: xs.of([\n        { main: \"New...\", value: \"new\" },\n        { main: \"Open...\", value: \"open\" },\n        { main: \"Save...\", value: \"save\" },\n        { main: \"Edit permissions...\", value: \"permissions\" },\n        { divider: true },\n        { main: \"Export\", headerOnly: true },\n        { main: \"Share...\", value: \"\" }\n      ]),\n      args: {\n        static: true\n      }\n    });\n    let vTree$ = xs.combine(ddlNavigation2.DOM).map(\n      ([ddlNavigation]) => div([\n        UI.Menu.render({ attachment: \"top\" }, [\n          { icon: true, dropdown: true, main: ddlNavigation },\n          {\n            float: \"right\", main: [UI.Textbox.render({ icon: true, transparent: true }, [\n              UI.Icon.render(UI.IconType.Search)\n            ])]\n          }\n        ]),\n        UI.Segment.render({ attachment: UI.Attachment.Bottom })\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM];
    }
    function createSecondaryExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Secondary Menu",
            description: "A menu can adjust its appearance to de-emphasize its contents",
            VNode$: xstream_1.default.of(UI.Menu.render({ secondary: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" },
                {
                    float: "right", main: [
                        UI.Textbox.render({ placeholder: "Search...", icon: true }, [
                            UI.Icon.render(UI.IconType.Search)
                        ])
                    ]
                },
                { float: "right", main: "Logout" }
            ])),
            code: "UI.Menu.render({ secondary: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n        { float: \"right\", main: [\n          UI.Textbox.render({placeholder: \"Search...\", icon: true}, [\n            UI.Icon.render(UI.IconType.Search)\n          ])\n        ]},\n        { float: \"right\", main: \"Logout\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createPointingExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Pointing",
            description: "A menu can point to show its relationship to nearby content",
            VNode$: xstream_1.default.of(dom_1.div([UI.Menu.render({ pointing: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" },
                    {
                        float: "right", main: [
                            UI.Textbox.render({ placeholder: "Search...", icon: true }, [
                                UI.Icon.render(UI.IconType.Search)
                            ])
                        ]
                    }
                ]),
                UI.Segment.render()
            ])),
            code: "UI.Menu.render({ pointing: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n        {\n          float: \"right\", main: [\n            UI.Textbox.render({ placeholder: \"Search...\", icon: true }, [\n              UI.Icon.render(UI.IconType.Search)\n            ])\n          ]\n        }\n      ]),\n      UI.Segment.render()"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([UI.Menu.render({ pointing: true, secondary: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" },
                    { float: "right", main: "Logout" }
                ]),
                UI.Segment.render()
            ])),
            code: "UI.Menu.render({ pointing: true, secondary: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n        { float: \"right\", main: \"Logout\" }\n      ]),\n      UI.Segment.render()"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createTabularExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Tabular",
            description: "A menu can be formatted to show tabs of information",
            VNode$: xstream_1.default.of(UI.Menu.render({ tabular: true }, [
                { main: "Bio", active: true },
                { main: "Photos" }
            ])),
            code: "UI.Menu.render({ tabular: true }, [\n        { main: \"Bio\", active: true },\n        { main: \"Photos\" }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ tabular: true, attachment: "top" }, [
                    { main: "Bio", active: true },
                    { main: "Photos" }
                ]),
                UI.Segment.render({ attachment: UI.Attachment.Bottom })
            ])),
            code: "UI.Menu.render({ tabular: true, attachment: \"top\" }, [\n          { main: \"Bio\", active: true },\n          { main: \"Photos\" }\n        ]),\n        UI.Segment.render({attachment: UI.Attachment.Bottom})"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Segment.render({ attachment: UI.Attachment.Top }),
                UI.Menu.render({ tabular: true, attachment: "bottom" }, [
                    { main: "Active project", active: true },
                    { main: "Project #2" },
                    { main: "Project #3" },
                    { float: "right", main: [UI.Icon.render(UI.IconType.Plus), "New Tab"] }
                ]),
            ])),
            code: "UI.Segment.render({ attachment: UI.Attachment.Top }),\n        UI.Menu.render({ tabular: true, attachment: \"bottom\" }, [\n          { main: \"Active project\", active: true },\n          { main: \"Project #2\" },\n          { main: \"Project #3\" },\n          { float: \"right\", main: [UI.Icon.render(UI.IconType.Plus), \"New Tab\"]}\n        ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 4 }, [
                    UI.Menu.render({ vertical: true, size: "fluid", tabular: true }, [
                        { main: "Bio", active: true },
                        { main: "Pics" },
                        { main: "Companies" },
                        { main: "Links" }
                    ])
                ]),
                UI.Column.render({ width: 12, stretched: true }, [
                    UI.Segment.render("This is an stretched grid column. This segment will always match the tab height")
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({ width: 4 }, [\n          UI.Menu.render({ vertical: true, size: \"fluid\", tabular: true }, [\n            { main: \"Bio\", active: true },\n            { main: \"Pics\" },\n            { main: \"Companies\" },\n            { main: \"Links\" }\n          ])\n        ]),\n        UI.Column.render({width: 12, stretched: true}, [\n          UI.Segment.render(\"This is an stretched grid column. This segment will always match the tab height\")\n        ])\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Grid.render([
                UI.Column.render({ width: 12, stretched: true }, [
                    UI.Segment.render("This is an stretched grid column. This segment will always match the tab height")
                ]),
                UI.Column.render({ width: 4 }, [
                    UI.Menu.render({ vertical: true, size: "fluid", tabular: true, right: true }, [
                        { main: "Bio", active: true },
                        { main: "Pics" },
                        { main: "Companies" },
                        { main: "Links" }
                    ])
                ])
            ])),
            code: "UI.Grid.render([\n        UI.Column.render({width: 12, stretched: true}, [\n          UI.Segment.render(\"This is an stretched grid column. This segment will always match the tab height\")\n        ]),\n        UI.Column.render({ width: 4 }, [\n          UI.Menu.render({ vertical: true, size: \"fluid\", tabular: true, right: true }, [\n            { main: \"Bio\", active: true },\n            { main: \"Pics\" },\n            { main: \"Companies\" },\n            { main: \"Links\" }\n          ])\n        ])\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM];
    }
    function createTextExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Text",
            description: "A menu can be formatted for text content",
            VNode$: xstream_1.default.of(UI.Menu.render({ text: true }, [
                { header: true, main: "Sort by" },
                { active: true, main: "Closest" },
                { main: "Most Comments" },
                { main: "Most Popular" }
            ])),
            code: "UI.Menu.render({ text: true }, [\n        { header: true, main: \"Editorials\" },\n        { active: true, main: \"Closest\" },\n        { main: \"Most Comments\" },\n        { main: \"Most Popular\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createVerticalExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Vertical Menu",
            description: "A vertical menu displays elements vertically.",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true }, [
                {
                    active: true, color: "primary", main: [
                        "Inbox", UI.Label.render({ leftPointing: true, color: UI.Color.Primary }, "1")
                    ]
                }, {
                    main: [
                        "Spam", UI.Label.render("51")
                    ]
                }, {
                    main: [
                        "Updates", UI.Label.render("1")
                    ]
                }, {
                    main: [
                        UI.Textbox.render({ transparent: true, icon: true, placeholder: "Search mail..." }, [
                            UI.Icon.render(UI.IconType.Search)
                        ])
                    ]
                }
            ])),
            code: "UI.Menu.render({ vertical: true }, [\n        {\n          active: true, color: \"primary\", main: [\n            \"Inbox\", UI.Label.render({ leftPointing: true, color: UI.Color.Primary }, \"1\")\n          ]\n        }, {\n          main: [\n            \"Spam\", UI.Label.render(\"51\")\n          ]\n        },{\n          main: [\n            \"Updates\", UI.Label.render(\"1\")\n          ]\n        }, {\n          main: [\n            UI.Textbox.render({transparent: true, icon: true, placeholder: \"Search mail...\"}, [\n              UI.Icon.render(UI.IconType.Search)\n            ])\n          ]\n        }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ secondary: true, vertical: true }, [
                { active: true, main: "Account" },
                { main: "Settings" },
                { main: "Display Options" },
            ])),
            code: "UI.Menu.render({ secondary: true, vertical: true }, [\n        { active: true, main: \"Account\" },\n        { main: \"Settings\" },\n        { main: \"Display Options\" },\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true, text: true }, [
                { header: true, main: "Sort by" },
                { active: true, main: "Closest" },
                { main: "Most Comments" },
                { main: "Most Popular" }
            ])),
            code: "UI.Menu.render({ vertical: true, text: true }, [\n        { header: true, main: \"Editorials\" },\n        { active: true, main: \"Closest\" },\n        { main: \"Most Comments\" },\n        { main: \"Most Popular\"}\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true, pointing: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" },
            ])),
            code: "UI.Menu.render({ vertical: true, pointing: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ secondary: true, vertical: true, pointing: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" },
            ])),
            code: "UI.Menu.render({ secondary: true, vertical: true, pointing: true }, [\n        { active: true, main: \"Home\" },\n        { main: \"Messages\" },\n        { main: \"Friends\" },\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM];
    }
    function createPaginationExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Pagination",
            description: "A pagination menu is specially formatted to present links to pages of content",
            VNode$: xstream_1.default.of(UI.Menu.render({ pagination: true }, [
                { active: true, main: "1" },
                { disabled: true, main: "..." },
                { main: "10" },
                { main: "11" },
                { main: "12" }
            ])),
            code: "UI.Menu.render({ pagination: true }, [\n        { active: true, main: \"1\" },\n        { disabled: true, main: \"...\" },\n        { main: \"10\" },\n        { main: \"11\" },\n        { main: \"12\" }\n      ])"
        });
        return [ex.DOM];
    }
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Variations;
(function (Variations) {
    function run(sources) {
        var stackableEx = createStackableExamples(sources);
        var invertedEx = createInvertedExamples(sources);
        var coloredEx = createColoredExamples(sources);
        var iconsEx = createIconsExamples(sources);
        var labelledIconsEx = createLabeledIconsExamples(sources);
        var fluidEx = createFluidExamples(sources);
        var compactEx = createCompactExamples(sources);
        var equalWidthEx = createEqualWidthExamples(sources);
        var pointingEx = createPointingExamples(sources);
        var attachedEx = createAttachedExamples(sources);
        var sizeEx = createSizeExamples(sources);
        var fittedEx = createFittedExamples(sources);
        var borderlessEx = createBorderlessExamples(sources);
        var examples = [].concat(stackableEx, invertedEx, coloredEx, iconsEx, labelledIconsEx, fluidEx, compactEx, equalWidthEx, pointingEx, attachedEx, sizeEx, fittedEx, borderlessEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Variations.run = run;
    function createStackableExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Stackable",
            description: [
                dom_1.p("A menu can stack at mobile resolutions"),
                UI.Message.render({ color: UI.Color.Info }, "Stackable menus are intended to be used with only simple menu content. Stacked menus will not replicate all additional stylings for vertical menus like adjusting dropdown position.")
            ],
            VNode$: xstream_1.default.of(UI.Menu.render([
                { main: "Features" },
                { main: "Testimonials" },
                { main: "Sign-in" }
            ])),
            code: "UI.Menu.render([\n        {main: \"Features\"},\n        {main: \"Testimonials\"},\n        {main: \"Sign-in\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createInvertedExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Inverted",
            description: "A menu may have its colors inverted to show greater contrast",
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" }
            ])),
            code: "UI.Menu.render({inverted: true}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {main: \"Friends\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true, vertical: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" }
            ])),
            code: "UI.Menu.render({inverted: true, vertical: true}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {main: \"Friends\"}\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true, pointing: true, vertical: true }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                { main: "Friends" }
            ])),
            code: "UI.Menu.render({inverted: true, pointing: true, vertical: true}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {main: \"Friends\"}\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Segment.render({ inverted: true }, [
                UI.Menu.render({ inverted: true, secondary: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "UI.Segment.render({ inverted: true }, [\n        UI.Menu.render({ inverted: true, secondary: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Segment.render({ inverted: true }, [
                UI.Menu.render({ inverted: true, secondary: true, pointing: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "UI.Segment.render({ inverted: true }, [\n        UI.Menu.render({ inverted: true, secondary: true, pointing: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM];
    }
    function createColoredExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Colored",
            description: "Additional colors can be specified",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { active: true, color: "primary", main: "Primary" },
                { color: "secondary", main: "Secondary" },
                { color: "success", main: "Success" },
                { color: "info", main: "Info" },
                { color: "warning", main: "Warning" },
                { color: "error", main: "Error" }
            ])),
            code: "UI.Menu.render([\n        {active: true, color: \"primary\", main: \"Primary\"},\n        {color: \"secondary\", main: \"Secondary\"},\n        {color: \"success\", main: \"Success\"},\n        {color: \"info\", main: \"Info\"},\n        {color: \"warning\", main: \"Warning\"},\n        {color: \"error\", main: \"Error\"}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ color: "primary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "secondary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "success", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "info", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "warning", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ color: "error", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "UI.Menu.render({ color: \"primary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"secondary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"success\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"info\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"warning\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ color: \"error\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])"
        });
        var ex3 = components_1.Example.run(sources, {
            description: "These colors can also be inverted",
            VNode$: xstream_1.default.of(UI.Menu.render({ inverted: true }, [
                { active: true, color: "primary", main: "Primary" },
                { color: "secondary", main: "Secondary" },
                { color: "success", main: "Success" },
                { color: "info", main: "Info" },
                { color: "warning", main: "Warning" },
                { color: "error", main: "Error" }
            ])),
            code: "UI.Menu.render({inverted: true}, [\n        { active: true, color: \"primary\", main: \"Primary\" },\n        { color: \"secondary\", main: \"Secondary\" },\n        { color: \"success\", main: \"Success\" },\n        { color: \"info\", main: \"Info\" },\n        { color: \"warning\", main: \"Warning\" },\n        { color: \"error\", main: \"Error\" }\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ inverted: true, color: "primary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "secondary", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "success", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "info", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "warning", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ]),
                UI.Menu.render({ inverted: true, color: "error", equalWidth: true }, [
                    { active: true, main: "Home" },
                    { main: "Messages" },
                    { main: "Friends" }
                ])
            ])),
            code: "        UI.Menu.render({ inverted: true, color: \"primary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"secondary\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"success\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"info\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"warning\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ]),\n        UI.Menu.render({ inverted: true, color: \"error\", equalWidth: true }, [\n          { active: true, main: \"Home\" },\n          { main: \"Messages\" },\n          { main: \"Friends\" }\n        ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM];
    }
    function createIconsExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Icons",
            description: "A menu may have just icons",
            VNode$: xstream_1.default.of(UI.Menu.render({ icon: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad)] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera)] },
                { main: [UI.Icon.render(UI.IconType.Play)] }
            ])),
            code: "UI.Menu.render({icon: true}, [\n        {main: [UI.Icon.render(UI.IconType.Gamepad)]},\n        {main: [UI.Icon.render(UI.IconType.VideoCamera)]},\n        {main: [UI.Icon.render(UI.IconType.Play)]}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ icon: true, vertical: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad)] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera)] },
                { main: [UI.Icon.render(UI.IconType.Play)] }
            ])),
            code: "UI.Menu.render({ icon: true, vertical: true }, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad)] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera)] },\n        { main: [UI.Icon.render(UI.IconType.Play)] }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createLabeledIconsExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Labeled Icon",
            description: "A menu may have labeled icons",
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({labeledIcons: true}, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true, vertical: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({ labeledIcons: true, vertical: true }, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createFluidExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Fluid",
            description: "A vertical menu may take the size of its container.",
            VNode$: xstream_1.default.of(UI.Menu.render({ fluid: true }, [
                { main: "Run" },
                { main: "Walk" },
                { main: "Bike" }
            ])),
            code: "UI.Menu.render({fluid: true}, [\n        {main: \"Run\"},\n        {main: \"Walk\"},\n        {main: \"Bike\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createCompactExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Compact",
            description: "A menu can take up only the space necessary to fit its content",
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true, compact: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({labeledIcons: true, compact: true}, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ labeledIcons: true, compact: true, vertical: true }, [
                { main: [UI.Icon.render(UI.IconType.Gamepad), "Games"] },
                { main: [UI.Icon.render(UI.IconType.VideoCamera), "Channels"] },
                { main: [UI.Icon.render(UI.IconType.Play), "Videos"] }
            ])),
            code: "UI.Menu.render({labeledIcons: true, compact: true, vertical: true}, [\n        { main: [UI.Icon.render(UI.IconType.Gamepad), \"Games\"] },\n        { main: [UI.Icon.render(UI.IconType.VideoCamera), \"Channels\"] },\n        { main: [UI.Icon.render(UI.IconType.Play), \"Videos\"] }\n      ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createEqualWidthExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Equal Width",
            description: "A menu may divide its items evenly",
            VNode$: xstream_1.default.of(UI.Menu.render({ equalWidth: true }, [
                { main: "Buy" },
                { main: "Sell" },
                { main: "Rent" }
            ])),
            code: "UI.Menu.render({equalWidth: true}, [\n        {main: \"Buy\"},\n        {main: \"Sell\"},\n        {main: \"Rent\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createPointingExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Pointing",
            description: "A vertical menu can point to content adjacent to itself to show ownership",
            VNode$: xstream_1.default.of(UI.Menu.render({ vertical: true, pointing: true }, [
                { main: "Site Title" },
                {
                    header: true, main: ["Grouped Section", UI.Menu.render({ submenu: true }, [
                            { main: "Subsection 1" },
                            { main: "Subsection 2", active: true },
                            { main: "Subsection 3" }
                        ])]
                }
            ])),
            code: "UI.Menu.render({ vertical: true, pointing: true }, [\n        { main: \"Site Title\" },\n        {\n          header: true, main: [\"Grouped Section\", UI.Menu.render({ submenu: true }, [\n            { main: \"Subsection 1\" },\n            { main: \"Subsection 2\", active: true },\n            { main: \"Subsection 3\" }\n          ])]\n        }\n      ])"
        });
        return [ex.DOM];
    }
    function createAttachedExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Attached",
            description: "A menu may be attached to other content segments",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ attachment: "top", tabular: true }, [
                    { active: true, main: "Tab 1" },
                    { main: "Tab 2" }
                ]),
                UI.Segment.render({ attachment: UI.Attachment.Bottom }, [
                    dom_1.p("There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.")
                ])
            ])),
            code: "UI.Menu.render({ attachment: \"top\", tabular: true }, [\n          { active: true, main: \"Tab 1\" },\n          { main: \"Tab 2\" }\n        ]),\n        UI.Segment.render({ attachment: UI.Attachment.Bottom })"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Menu.render({ attachment: "top" }, [
                    { active: true, main: "Section 1" },
                    { main: "Section 2" }
                ]),
                UI.Segment.render({ attachment: UI.Attachment.None }, [
                    dom_1.p("There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.")
                ]),
                UI.Menu.render({ attachment: "bottom" }, [
                    { active: true, main: "Section 1" },
                    { main: "Section 2" }
                ])
            ])),
            code: "UI.Menu.render({ attachment: \"top\" }, [\n          { active: true, main: \"Section 1\" },\n          { main: \"Section 2\" }\n        ]),\n        UI.Segment.render({ attachment: UI.Attachment.None }),\n        UI.Menu.render({ attachment: \"bottom\" }, [\n          { active: true, main: \"Section 1\" },\n          { main: \"Section 2\" }\n        ])"
        });
        return [ex.DOM, ex2.DOM];
    }
    function createSizeExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Size",
            description: "A menu can vary in size",
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "mini" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"mini\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex2 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "tiny" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"tiny\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex3 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "small" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"small\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "medium" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"medium\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex5 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "large" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"large\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex7 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "huge" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"huge\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        var ex8 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Menu.render({ size: "massive" }, [
                { active: true, main: "Home" },
                { main: "Messages" },
                {
                    rightMenu: true, main: [
                        { main: [UI.Button.render({ color: UI.Color.Primary }, "Sign up")] }
                    ]
                }
            ])),
            code: "UI.Menu.render({size: \"massive\"}, [\n        {active: true, main: \"Home\"},\n        {main: \"Messages\"},\n        {rightMenu: true, main: [\n          {main: [UI.Button.render({color: UI.Color.Primary}, \"Sign up\")]}\n        ]}\n      ])"
        });
        return [ex.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM, ex7.DOM, ex8.DOM];
    }
    function createFittedExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Fitted",
            description: "A menu item or menu can remove element padding, vertically or horizontally",
            VNode$: xstream_1.default.of(UI.Menu.render([
                { fitted: true, main: "No padding whatsoever" },
                { horizontallyFitted: true, main: "No horizontal padding" },
                { verticallyFitted: true, main: "No vertical padding" }
            ])),
            code: "UI.Menu.render([\n        {fitted: true, main: \"No padding whatsoever\"},\n        {horizontallyFitted: true, main: \"No horizontal padding\"},\n        {verticallyFitted: true, main: \"No vertical padding\"}\n      ])"
        });
        return [ex.DOM];
    }
    function createBorderlessExamples(sources) {
        var ex = components_1.Example.run(sources, {
            header: "Borderless",
            description: "A menu or menu item can have no borders",
            VNode$: xstream_1.default.of(UI.Menu.render({ borderless: true }, [
                { main: "1" },
                { main: "2" },
                { main: "3" },
                { main: "4" },
                { main: "5" },
                { main: "6" }
            ])),
            code: "UI.Menu.render({borderless: true}, [\n        {main: \"1\"},\n        {main: \"2\"},\n        {main: \"3\"},\n        {main: \"4\"},\n        {main: \"5\"},\n        {main: \"6\"}\n      ])"
        });
        return [ex.DOM];
    }
})(Variations = exports.Variations || (exports.Variations = {}));


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(175);
var states_1 = __webpack_require__(174);
var variations_1 = __webpack_require__(176);
var Message;
(function (Message) {
    function run(sources) {
        var types = types_1.Types.run(sources);
        var states = states_1.States.run(sources);
        var variations = variations_1.Variations.run(sources);
        var vTree$ = xstream_1.default.combine(types, states, variations).map(function (_a) {
            var types = _a[0], states = _a[1], variations = _a[2];
            return dom_1.div({ props: { className: "article" } }, [
                UI.Segment.render({ vertical: true }, [
                    UI.Container.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Message",
                                subtext: "A message displays information that explains nearby content"
                            }
                        }),
                    ]),
                ]),
                UI.Container.render([
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Types")
                    ]
                        .concat(types)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "States")
                    ]
                        .concat(states)),
                    UI.Segment.render({ basic: true }, [
                        UI.Header.render({ dividing: true, size: UI.Size.Huge }, "Variations")
                    ]
                        .concat(variations))
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Message.run = run;
})(Message = exports.Message || (exports.Message = {}));


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var States;
(function (States) {
    function run(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Hidden",
            description: "A message can be hidden",
            VNode$: xstream_1.default.of(UI.Message.render({ hidden: true }, "You can't see me!")),
            code: "UI.Message.render({hidden: true}, \"You can't see me!\")"
        });
        var ex2 = components_1.Example.run(sources, {
            header: "Visible",
            description: "A message can be set to visible to force itself to be shown.",
            VNode$: xstream_1.default.of(UI.Message.render({ forceVisible: true }, "You can always see me.")),
            code: "UI.Message.render({forceVisible: true}, \"You can always see me.\")"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM);
    }
    States.run = run;
})(States = exports.States || (exports.States = {}));


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var components_1 = __webpack_require__(7);
var Types;
(function (Types) {
    function run(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Message",
            description: "A basic message",
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    header: "Changes in Service",
                    main: "We just updated our privacy policy here to better service our customers. We recommend reviewing the changes."
                }
            })),
            code: "UI.Message.render({\n        content: {\n          header: \"Changes in Service\",\n          main: \"We just updated our privacy policy here to better service our customers. We recommend reviewing the changes.\"\n        }\n      })"
        });
        var ex2 = components_1.Example.run(sources, {
            header: "List message",
            description: "A message with a list",
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    header: "New Site Features",
                    main: [
                        UI.List.render({ bulleted: true }, [
                            { main: "You can now have cover images on blog pages" },
                            { main: "Drafts will now auto-save while writing" }
                        ])
                    ]
                }
            })),
            code: "UI.Message.render({\n        content: {\n          header: \"New Site Features\",\n          main: [\n            UI.List.render({bulleted: true}, [\n              {main: \"You can now have cover images on blog pages\"},\n              {main: \"Drafts will now auto-save while writing\"}\n            ])\n          ]\n        }\n      })"
        });
        var ex3 = components_1.Example.run(sources, {
            header: ["Icon Message", UI.Label.render({ color: "primary" }, "flexbox")],
            description: "A message can contain an icon.",
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    icon: [UI.Icon.render("inbox")],
                    header: "Have you heard about our mailing list?",
                    main: "Get the best news in your e-mail every day."
                }
            })),
            code: "UI.Message.render({\n        content: {\n          icon: [UI.Icon.render(\"inbox\")],\n          header: \"Have you heard about our mailing list?\",\n          main: \"Get the best news in your e-mail every day.\"\n        }\n      })"
        });
        var ex4 = components_1.Example.run(sources, {
            VNode$: xstream_1.default.of(UI.Message.render({
                content: {
                    icon: [UI.Icon.render({ loading: true }, "notched circle")],
                    header: "Just one second",
                    main: "We're fetching that content for you."
                }
            })),
            code: "UI.Message.render({\n        content: {\n          icon: [UI.Icon.render({loading: true}, \"notched circle\")],\n          header: \"Just one second\",\n          main: \"We're fetching that content for you.\"\n        }\n      })"
        });
        var msg = UI.Message.run({
            DOM: sources.DOM,
            content$: xstream_1.default.of({
                header: "Welcome back!",
                main: "This is a special notification which you can dismiss if you're bored with it."
            }), args: {
                closeable: true
            }
        });
        var ex5 = components_1.Example.run(sources, {
            header: "Dismissable Block",
            description: "A message that the user can choose to hide",
            VNode$: msg.DOM,
            code: "let msg = UI.Message.run({\n        DOM: sources.DOM,\n        content$: xs.of({\n          header: \"Welcome back!\",\n          main: \"This is a special notification which you can dismiss if you're bored with it.\"\n        }), args: {\n          closeable: true\n        }\n      });"
        });
        return xstream_1.default.combine(ex1.DOM, ex2.DOM, ex3.DOM, ex4.DOM, ex5.DOM);
    }
    Types.run = run;
})(Types = exports.Types || (exports.Types = {}));


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var components_1 = __webpack_require__(7);
var Variations;
(function (Variations) {
    function run(sources) {
        var floatingEx = makeFloatingExamples(sources);
        var compactEx = makeCompactExamples(sources);
        var attachedEx = makeAttachedExamples(sources);
        var coloredEx = makeColoredExamples(sources);
        var sizeEx = makeSizeExamples(sources);
        var examples = [].concat(floatingEx, compactEx, attachedEx, coloredEx, sizeEx);
        return xstream_1.default.combine.apply(null, examples);
    }
    Variations.run = run;
    function makeFloatingExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Floating",
            description: "A message can float above content that it is related to",
            VNode$: xstream_1.default.of(UI.Message.render({ floating: true }, "Way to go!")),
            code: "UI.Message.render({floating: true}, \"Way to go!\")"
        });
        return [ex1.DOM];
    }
    function makeCompactExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Compact",
            description: "A message can only take up the width of its content.",
            VNode$: xstream_1.default.of(UI.Message.render({ compact: true }, "Get all the best inventions in your e-mail every day. Sign up now!")),
            code: "UI.Message.render({hidden: true}, \"Get all the best inventions in your e-mail every day. Sign up now!\")"
        });
        return [ex1.DOM];
    }
    function makeAttachedExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Attached",
            description: "A message can be formatted to attach itself to other content",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Message.render({
                    props: { attachment: "top" },
                    content: {
                        header: "Welcome to our site!",
                        main: "Fill out the form below to sign-up for a new account"
                    }
                }),
                UI.Segment.render({ attachment: "none" }, [
                    UI.Form.render([
                        UI.Fields.render({ equalWidth: true }, [
                            UI.Field.render({
                                content: {
                                    label: "First Name",
                                    main: UI.Textbox.render({ placeholder: "First Name" })
                                }
                            }),
                            UI.Field.render({
                                content: {
                                    label: "Last Name",
                                    main: UI.Textbox.render({ placeholder: "Last Name" })
                                }
                            })
                        ]),
                        UI.Field.render({
                            content: {
                                label: "Username",
                                main: UI.Textbox.render({ placeholder: "Username" })
                            }
                        }),
                        UI.Field.render({
                            content: {
                                label: "Password",
                                main: UI.Textbox.render({ type: "password" })
                            }
                        }),
                        UI.Field.render({ inline: true }, [UI.Checkbox.render("I agree to the terms and conditions.")]),
                        UI.Button.render({ color: "primary" }, "Submit")
                    ])
                ]),
                UI.Message.render({
                    props: { attachment: "bottom", color: "warning" },
                    content: {
                        icon: [UI.Icon.render("help")],
                        main: ["Already signed up? ", dom_1.a({ attrs: { href: "#" } }, "Login here"), " instead"]
                    }
                })
            ])),
            code: "UI.Message.render({\n          props: { attachment: \"top\" },\n          content: {\n            header: \"Welcome to our site!\",\n            main: \"Fill out the form below to sign-up for a new account\"\n          }\n        }),\n        UI.Segment.render({ attachment: \"none\" }, [\n          UI.Form.render([\n            UI.Fields.render({ equalWidth: true }, [\n              UI.Field.render({\n                content: {\n                  label: \"First Name\",\n                  main: UI.Textbox.render({ placeholder: \"First Name\" })\n                }\n              }),\n              UI.Field.render({\n                content: {\n                  label: \"Last Name\",\n                  main: UI.Textbox.render({ placeholder: \"Last Name\" })\n                }\n              })\n            ]),\n            UI.Field.render({\n              content: {\n                label: \"Username\",\n                main: UI.Textbox.render({ placeholder: \"Username\" })\n              }\n            }),\n            UI.Field.render({\n              content: {\n                label: \"Password\",\n                main: UI.Textbox.render({ type: \"password\" })\n              }\n            }),\n            UI.Field.render({inline: true}, [UI.Checkbox.render(\"I agree to the terms and conditions.\")]),\n            UI.Button.render({color: \"primary\"}, \"Submit\")\n          ])\n        ]),\n        UI.Message.render({\n          props : {attachment: \"bottom\", color: \"warning\"},\n          content: {\n            icon: [UI.Icon.render(\"help\")],\n            main: [\"Already signed up?\", a({attrs: {href: \"#\"}}, \"Login here\"), \" instead\"]\n          }\n        })\n      ])"
        });
        return [ex1.DOM];
    }
    function makeColoredExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Colored",
            description: "A message can be formatted to be different colors",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Message.render({ color: "primary" }, "Primary"),
                UI.Message.render({ color: "secondary" }, "Secondary"),
                UI.Message.render({ color: "success" }, "Success"),
                UI.Message.render({ color: "info" }, "Info"),
                UI.Message.render({ color: "warning" }, "Warning"),
                UI.Message.render({ color: "error" }, "Error")
            ])),
            code: "\n        UI.Message.render({ color: \"primary\" }, \"Primary\"),\n        UI.Message.render({ color: \"secondary\" }, \"Secondary\"),\n        UI.Message.render({ color: \"success\" }, \"Success\"),\n        UI.Message.render({ color: \"info\" }, \"Info\"),\n        UI.Message.render({ color: \"warning\" }, \"Warning\"),\n        UI.Message.render({ color: \"error\" }, \"Error\")"
        });
        return [ex1.DOM];
    }
    function makeSizeExamples(sources) {
        var ex1 = components_1.Example.run(sources, {
            header: "Size",
            description: "A message can have different sizes",
            VNode$: xstream_1.default.of(dom_1.div([
                UI.Message.render({ size: "mini" }, "This is a mini message"),
                UI.Message.render({ size: "tiny" }, "This is a tiny message"),
                UI.Message.render({ size: "small" }, "This is a small message"),
                UI.Message.render({ size: "medium" }, "This is a medium message"),
                UI.Message.render({ size: "large" }, "This is a large message"),
                UI.Message.render({ size: "big" }, "This is a big message"),
                UI.Message.render({ size: "huge" }, "This is a huge message"),
                UI.Message.render({ size: "massive" }, "This is a massive message")
            ])),
            code: "\n        UI.Message.render({ size: \"mini\" }, \"This is a mini message\"),\n        UI.Message.render({ size: \"tiny\" }, \"This is a tiny message\"),\n        UI.Message.render({ size: \"small\" }, \"This is a small message\"),\n        UI.Message.render({ size: \"medium\" }, \"This is a medium message\"),\n        UI.Message.render({ size: \"large\" }, \"This is a large message\"),\n        UI.Message.render({ size: \"big\" }, \"This is a big message\"),\n        UI.Message.render({ size: \"huge\" }, \"This is a huge message\"),\n        UI.Message.render({ size: \"massive\" }, \"This is a massive message\")"
        });
        return [ex1.DOM];
    }
})(Variations = exports.Variations || (exports.Variations = {}));


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var isolate_1 = __webpack_require__(8);
var Example;
(function (Example) {
    function run(sources, args) {
        function main(sources) {
            //Show code icon
            var btnShow = UI.Icon.run({
                DOM: sources.DOM,
                content$: xstream_1.default.of(UI.IconType.Code)
            });
            var transition$ = btnShow.events("click").fold(function (prev, n) { return !prev; }, false).drop(1).map(function (n) { return ({
                animation: UI.Animation.Slide,
                direction: n ? UI.Direction.In : UI.Direction.Out
            }); }).startWith({
                animation: UI.Animation.None,
                direction: UI.Direction.Out
            });
            //Sliding code view
            var codelines = args.code.split(/\r?\n/);
            //Trim leading whitespace
            var baseWhitespace = codelines.length > 1 ? countLeadingWhitespace(codelines[1]) - 2 : 0;
            codelines = codelines.map(function (line, i) { return i === 0 ? line : line.substring(baseWhitespace); });
            var code$ = xstream_1.default.of(UI.Segment.render({ attachment: UI.Attachment.Bottom }, [dom_1.pre([
                    dom_1.code({
                        props: { className: "javascript" }, hook: {
                            insert: function (vnode) { hljs.highlightBlock(vnode.elm); }
                        }
                    }, codelines.map(function (line) { return [line, dom_1.br()]; }).reduce(function (acc, n) { return acc.concat(n); }, []))
                ])
            ]));
            var animatedCode$ = UI.Transition.run({
                DOM: sources.DOM,
                target$: code$,
                transition$: transition$
            });
            //Example bar
            var top$ = xstream_1.default.combine(transition$, args.VNode$).map(function (_a) {
                var animation = _a[0], obj = _a[1];
                var isActive = animation.direction === UI.Direction.In;
                var elem = dom_1.div({ props: { className: isActive ? "ui top attached segment code" : "code" } }, [
                    isActive ? UI.Label.render({ attachment: UI.Attachment.Top }, [
                        "Example"
                    ]) : dom_1.div({ style: { display: "none" }, props: { className: "" } }),
                    obj
                ]);
                return elem;
            });
            var vTree$ = xstream_1.default.combine(btnShow.DOM, animatedCode$.DOM, top$).map(function (_a) {
                var btnShow = _a[0], code = _a[1], top = _a[2];
                var content = [btnShow, top, code];
                if (typeof (args.description) !== "undefined") {
                    content = typeof (args.description) === "string" ? [dom_1.p(args.description)].concat(content) : [].concat(args.description, content);
                }
                if (typeof (args.header) !== "undefined") {
                    content = [UI.Header.render(args.header)].concat(content);
                }
                return dom_1.div({ props: { className: args.highlighted ? "highlighted example" : "example" } }, content);
            });
            return {
                DOM: vTree$
            };
        }
        var isolatedMain = isolate_1.default(main);
        return isolatedMain(sources);
    }
    Example.run = run;
    function countLeadingWhitespace(string) {
        for (var i = 0; i < string.length; i++) {
            if (string[i] !== " " && string[i] !== "\t") {
                return (i);
            }
        }
        return (string.length);
    }
})(Example = exports.Example || (exports.Example = {}));


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
// tslint:disable-next-line:no-unused-variable
var dom_1 = __webpack_require__(1);
var Index;
(function (Index) {
    function run(sources) {
        var vTree$ = xstream_1.default.of(dom_1.div(".centered", [
            UI.Container.render([
                UI.Grid.render({ centered: true }, [
                    UI.Row.render([
                        UI.Header.render({
                            props: { size: UI.Size.Huge },
                            content: {
                                main: "Welcome.",
                                subtext: "At the moment the docs are a WIP. Planned pages are scaffolded in the sidemenu."
                            }
                        }),
                    ])
                ])
            ])
        ]));
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Index.run = run;
})(Index = exports.Index || (exports.Index = {}));


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-unused-variable
var xstream_1 = __webpack_require__(0);
// tslint:disable-next-line:no-unused-variable
var dom_1 = __webpack_require__(1);
var sidebar_1 = __webpack_require__(180);
var Layout;
(function (Layout) {
    function run(sources, page) {
        /*** Create components ***/
        var sidebar = sidebar_1.Sidebar.run(sources);
        /*** Compose view ***/
        var vTree$ = xstream_1.default.combine(sidebar.DOM, page.DOM)
            .map(function (_a) {
            var sidebar = _a[0], page = _a[1];
            return dom_1.div(".full.height", [
                dom_1.div(".content.pusher", [
                    sidebar,
                    page
                ]),
            ]);
        });
        return {
            DOM: vTree$,
            router: page.router
        };
    }
    Layout.run = run;
})(Layout = exports.Layout || (exports.Layout = {}));


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UI = __webpack_require__(3);
var xstream_1 = __webpack_require__(0);
var dom_1 = __webpack_require__(1);
var Sidebar;
(function (Sidebar) {
    function run(sources) {
        var currentPage$ = sources.router.map(function (x) { return x.pathname; });
        var prefix = "/cycle-semantic-ui";
        var vTree$ = currentPage$.map(function (page) {
            return dom_1.div(".left.menu", [
                dom_1.div(".fixed", [
                    UI.Menu.render({
                        vertical: true, inverted: true,
                        attachment: UI.Attachment.None, size: UI.Size.Fluid
                    }, [{
                            header: true,
                            main: ["Introduction", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/", active: page === prefix + "/" || page === prefix + "/home",
                                        main: "About"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Elements", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/elements/button", active: page === prefix + "/elements/button",
                                        main: "Button"
                                    }, {
                                        link: true, href: prefix + "/elements/container", active: page === prefix + "/elements/container",
                                        main: "Container"
                                    }, {
                                        link: true, href: prefix + "/elements/divider", active: page === prefix + "/elements/divider",
                                        main: "Divider"
                                    }, {
                                        link: true, href: prefix + "/elements/header", active: page === prefix + "/elements/header",
                                        main: "Header"
                                    }, {
                                        link: true, href: prefix + "/elements/icon", active: page === prefix + "/elements/icon",
                                        main: "Icon"
                                    }, {
                                        link: true, href: prefix + "/elements/image", active: page === prefix + "/elements/image",
                                        main: "Image"
                                    }, {
                                        link: true, href: prefix + "/elements/label", active: page === prefix + "/elements/label",
                                        main: "Label"
                                    }, {
                                        link: true, href: prefix + "/elements/list", active: page === prefix + "/elements/list",
                                        main: "List"
                                    }, {
                                        link: true, href: prefix + "/elements/loader", active: page === prefix + "/elements/loader",
                                        main: "Loader"
                                    }, {
                                        link: true, href: prefix + "/elements/segment", active: page === prefix + "/elements/segment",
                                        main: "Segment"
                                    }, {
                                        link: true, href: prefix + "/elements/step", active: page === prefix + "/elements/step",
                                        main: "Step"
                                    }, {
                                        link: true, href: prefix + "/elements/textbox", active: page === prefix + "/elements/textbox",
                                        main: "Textbox"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Collections", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/collections/breadcrumb", active: page === prefix + "/collections/breadcrumb",
                                        main: "Breadcrumb"
                                    }, {
                                        link: true, href: prefix + "/collections/form", active: page === prefix + "/collections/form",
                                        main: "Form"
                                    }, {
                                        link: true, href: prefix + "/collections/grid", active: page === prefix + "/collections/grid",
                                        main: "Grid"
                                    }, {
                                        link: true, href: prefix + "/collections/menu", active: page === prefix + "/collections/menu",
                                        main: "Menu"
                                    }, {
                                        link: true, href: prefix + "/collections/message", active: page === prefix + "/collections/message",
                                        main: "Message"
                                    }, {
                                        link: true, href: prefix + "/collections/table", active: page === prefix + "/collections/table",
                                        main: "Table"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Modules", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/modules/checkbox", active: page === prefix + "/modules/checkbox",
                                        main: "Checkbox"
                                    }, {
                                        link: true, href: prefix + "/modules/dimmer", active: page === prefix + "/modules/dimmer",
                                        main: "Dimmer"
                                    }, {
                                        link: true, href: prefix + "/modules/dropdown", active: page === prefix + "/modules/dropdown",
                                        main: "Dropdown"
                                    }, {
                                        link: true, href: prefix + "/modules/modal", active: page === prefix + "/modules/modal",
                                        main: "Modal"
                                    }, {
                                        link: true, href: prefix + "/modules/popup", active: page === prefix + "/modules/popup",
                                        main: "Popup"
                                    }, {
                                        link: true, href: prefix + "/modules/progress", active: page === prefix + "/modules/progress",
                                        main: "Progress"
                                    }, {
                                        link: true, href: prefix + "/modules/transition", active: page === prefix + "/modules/transition",
                                        main: "Transition"
                                    }])]
                        },
                        {
                            header: true,
                            main: ["Views", UI.Menu.render({ submenu: true, }, [{
                                        link: true, href: prefix + "/views/statistic", active: page === prefix + "/views/statistic",
                                        main: "Statistic"
                                    }])]
                        }])
                ])
            ]);
        });
        return {
            DOM: vTree$,
            router: xstream_1.default.never()
        };
    }
    Sidebar.run = run;
})(Sidebar = exports.Sidebar || (exports.Sidebar = {}));


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isolate_1 = __webpack_require__(8);
var xstream_1 = __webpack_require__(0);
var switch_path_1 = __webpack_require__(141);
var callPage = function (sources) {
    return function (_a) {
        var value = _a.value;
        var isolatedPage = isolate_1.default(value)(sources);
        return isolatedPage;
    };
};
function propOrNever(key, x) {
    if (x.hasOwnProperty(key)) {
        return x[key];
    }
    return xstream_1.default.never();
}
function flattenByKey(key, stream) {
    return stream.map(function (x) { return propOrNever(key, x); }).flatten();
}
function ComponentRouter(sources) {
    var component$ = sources.router.map(function (l) { return switch_path_1.default(l.pathname, sources.routes); })
        .map(function (route) { return callPage(sources)(route); })
        .remember();
    var pluck = function (key) { return flattenByKey(key, component$); };
    var sinks = {
        pluck: pluck,
        DOM: pluck("DOM"),
        router: pluck("router"),
    };
    return sinks;
}
exports.default = function (sources) { return isolate_1.default(ComponentRouter)(sources); };


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = __webpack_require__(178);
var collections_1 = __webpack_require__(167);
var prefix = "/cycle-semantic-ui";
var routes = {
    "/": index_1.Index.run,
};
routes[prefix + "/"] = index_1.Index.run;
routes[prefix + "/collections/breadcrumb"] = collections_1.Breadcrumb.run;
routes[prefix + "/collections/form"] = collections_1.Form.run;
routes[prefix + "/collections/grid"] = collections_1.Grid.run;
routes[prefix + "/collections/menu"] = collections_1.Menu.run;
routes[prefix + "/collections/message"] = collections_1.Message.run;
exports.default = routes;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Breadcrumb;
(function (Breadcrumb) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(breadcrumb, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    Breadcrumb.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, breadcrumb, ".breadcrumb", scope);
    }
    Breadcrumb.run = run;
    function breadcrumb(args) {
        var props = args.props ? args.props : { divider: "/" };
        var content = [];
        if (args.content) {
            if (isContent(args.content)) {
                content = args.content;
            }
            else if (isContent(args.content.main)) {
                content = args.content.main;
            }
        }
        if (!props.divider) {
            props.divider = "/";
        }
        var children = content.map(function (c) { return [
            section(c), divider(props)
        ]; }).reduce(function (a, n) { return a.concat(n); }, []);
        children.splice(-1, 1);
        return dom_1.div({ props: { className: getClassName(props) } }, children);
    }
    function getClassName(props) {
        var className = "ui";
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        return className + " breadcrumb";
    }
    function section(section) {
        return section.active
            ? dom_1.div({ props: { className: "active section" } }, section.text)
            : section.href
                ? dom_1.a({ props: { className: "section", href: section.href } }, section.text)
                : dom_1.div({ props: { className: "section" } }, section.text);
    }
    function divider(props) {
        if (typeof (props.divider) === "string") {
            return dom_1.span({ props: { className: "divider" } }, props.divider);
        }
        if (props.divider.data.props.className.indexOf("ui") !== -1) {
            props.divider.data.props.className = props.divider.data.props.className.substring(3);
        }
        if (props.divider.data.props.className.indexOf("divider") === -1) {
            props.divider.data.props.className += " divider";
        }
        return props.divider;
    }
    function isContent(obj) {
        return obj instanceof Array;
    }
})(Breadcrumb = exports.Breadcrumb || (exports.Breadcrumb = {}));


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(2);
var common_1 = __webpack_require__(5);
var Field;
(function (Field) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(field, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Field.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, field, ".field", scope);
    }
    Field.run = run;
    function field(args) {
        var props = typeof (args.props) === "undefined" ? {} : args.props;
        var lbl = "";
        var content = [];
        if (typeof (args.content) !== "undefined") {
            if (types_1.isDOMContent(args.content)) {
                content = args.content;
            }
            else {
                lbl = args.content.label ? args.content.label : "";
                content = args.content.main ? args.content.main : [];
            }
        }
        return dom_1.div({ props: { className: getClassname(props) } }, [].concat(lbl ? dom_1.label(lbl) : [], content));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.width) {
            className += utils_1.numToText(props.width) + " wide";
        }
        if (props.inline) {
            className += " inline";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.error) {
            className += " error";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.required) {
            className += " required";
        }
        className += " field";
        return className;
    }
    function isArgs(obj) {
        return obj && (typeof (obj.props) !== "undefined" ||
            (typeof (obj.content) !== "undefined" &&
                (types_1.isDOMContent(obj.content) || types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.label))));
    }
})(Field = exports.Field || (exports.Field = {}));


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(2);
var common_1 = __webpack_require__(5);
var Fields;
(function (Fields) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(fields, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Fields.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, fields, ".fields", scope);
    }
    Fields.run = run;
    function fields(args) {
        var props = typeof (args.props) === "undefined" ? {} : args.props;
        var lbl = "";
        var content = [];
        if (typeof (args.content) !== "undefined") {
            if (types_1.isDOMContent(args.content)) {
                content = args.content;
            }
            else {
                lbl = args.content.label ? args.content.label : "";
                content = args.content.main ? args.content.main : [];
            }
        }
        return dom_1.div({ props: { className: getClassname(props, content) } }, [].concat(lbl ? dom_1.label(lbl) : [], content));
    }
    function getClassname(props, content) {
        var className = "ui";
        if (props.equalWidth && content.length) {
            className += utils_1.numToText(content.length);
        }
        if (props.inline) {
            className += " inline";
        }
        if (props.grouped) {
            className += " grouped";
        }
        if (props.required) {
            className += " required";
        }
        className += " fields";
        return className;
    }
    function isArgs(obj) {
        return obj && (typeof (obj.props) !== "undefined" ||
            (typeof (obj.content) !== "undefined" &&
                (types_1.isDOMContent(obj.content) || types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.label))));
    }
})(Fields = exports.Fields || (exports.Fields = {}));


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Form;
(function (Form) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(form, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Form.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, form, ".form", scope);
    }
    Form.run = run;
    function form(args) {
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        var props = typeof (args.props) !== "undefined" ? args.props : {};
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.loading) {
            className += " loading";
        }
        if (props.equalWidth) {
            className += " equal width";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += " form";
        return className;
    }
})(Form = exports.Form || (exports.Form = {}));


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(186));
__export(__webpack_require__(184));
__export(__webpack_require__(185));


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(2);
var Column;
(function (Column) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(column, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Column.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, column, ".column", scope);
    }
    Column.run = run;
    function column(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.width) {
            className += utils_1.numToText(props.width) + " wide";
        }
        if (props.mobile) {
            className += utils_1.numToText(props.mobile) + " wide mobile";
        }
        if (props.tablet) {
            className += utils_1.numToText(props.tablet) + " wide tablet";
        }
        if (props.computer) {
            className += utils_1.numToText(props.computer) + " wide computer";
        }
        if (props.largescreen) {
            className += utils_1.numToText(props.largescreen) + " wide large screen";
        }
        if (props.mobileOnly) {
            className += " mobile only";
        }
        if (props.tabletOnly) {
            className += " tablet only";
        }
        if (props.computerOnly) {
            className += " computer only";
        }
        if (props.largescreenOnly) {
            className += " large screen only";
        }
        if (props.stretched) {
            className += " stretched";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        className += " column";
        return className;
    }
})(Column = exports.Column || (exports.Column = {}));


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(2);
var Grid;
(function (Grid) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(grid, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Grid.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, grid, ".grid", scope);
    }
    Grid.run = run;
    function grid(args) {
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        var props = typeof (args.props) !== "undefined" ? args.props : {};
        return dom_1.div({ props: { className: getClassname(props, content) } }, content);
    }
    Grid.grid = grid;
    function getClassname(props, content) {
        var className = "ui";
        if (props.equalWidth) {
            className += " equal width";
        }
        if (props.divided) {
            className += " divided";
        }
        if (props.verticallyDivided) {
            className += " vertically divided";
        }
        if (props.container) {
            className += " container";
        }
        if (props.celled) {
            className += " celled";
        }
        if (props.intCelled) {
            className += " internally celled";
        }
        if (props.padded) {
            className += " padded";
        }
        if (props.verticallyPadded) {
            className += " vertically padded";
        }
        if (props.horizontallyPadded) {
            className += " horizontally padded";
        }
        if (props.relaxed) {
            className += " relaxed";
        }
        if (props.veryRelaxed) {
            className += " very relaxed";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.stackable) {
            className += " stackable";
        }
        if (props.doubling) {
            className += " doubling";
        }
        if (props.reversedMobile) {
            className += " mobile reversed";
        }
        if (props.reversedTablet) {
            className += " tablet reversed";
        }
        if (props.reversedComputer) {
            className += " computer reversed";
        }
        if (props.reversedLargescreen) {
            className += " large screen reversed";
        }
        if (props.vertReversedMobile) {
            className += " mobile vertically reversed";
        }
        if (props.vertReversedTablet) {
            className += " tablet vertically reversed";
        }
        if (props.vertReversedComputer) {
            className += " computer vertically reversed";
        }
        if (props.vertReversedLargescreen) {
            className += " large screen vertically reversed";
        }
        if (props.mobileOnly) {
            className += " mobile only";
        }
        if (props.tabletOnly) {
            className += " tablet only";
        }
        if (props.computerOnly) {
            className += " computer only";
        }
        if (props.largescreenOnly) {
            className += " large screen only";
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (props.width) {
            className += utils_1.numToText(props.width) + " column";
        }
        className += " grid";
        return className;
    }
    Grid.getClassname = getClassname;
})(Grid = exports.Grid || (exports.Grid = {}));


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(189));
__export(__webpack_require__(191));
__export(__webpack_require__(188));


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var enums_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(2);
var Row;
(function (Row) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(row, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Row.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, row, ".row", scope);
    }
    Row.run = run;
    function row(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props, content) } }, content);
    }
    Row.row = row;
    function getClassname(props, content) {
        var className = "ui";
        if (props.doubling) {
            className += " doubling";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.stretched) {
            className += " stretched";
        }
        if (props.mobileOnly) {
            className += " mobile only";
        }
        if (props.tabletOnly) {
            className += " tablet only";
        }
        if (props.computerOnly) {
            className += " computer only";
        }
        if (props.largescreenOnly) {
            className += " large screen only";
        }
        if (props.equalWidth) {
            className += " equal width";
        }
        if (props.width) {
            className += utils_1.numToText(props.width) + " column";
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        className += " row";
        return className;
    }
})(Row = exports.Row || (exports.Row = {}));


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(183));
__export(__webpack_require__(187));
__export(__webpack_require__(190));
__export(__webpack_require__(34));
__export(__webpack_require__(193));
__export(__webpack_require__(194));


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var icon_1 = __webpack_require__(19);
var transition_1 = __webpack_require__(12);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Message;
(function (Message) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(message, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Message.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? { main: c } : c; }) : xstream_1.default.of({ main: [] });
            var on$ = sources.args && sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var vTree$, active$, icon;
            if (sources.args && sources.args.closeable) {
                icon = icon_1.Icon.run({ DOM: sources.DOM, content$: xstream_1.default.of(enums_1.IconType.Close) }, scope);
                var close$ = icon.events("click").mapTo(false);
                vTree$ = xstream_1.default.combine(props$, content$, icon.DOM)
                    .map(function (_a) {
                    var props = _a[0], content = _a[1], closeIcon = _a[2];
                    return message({ props: props, content: content }, closeIcon);
                });
                active$ = xstream_1.default.merge(on$, close$);
            }
            else {
                vTree$ = xstream_1.default.combine(props$, content$).map(function (_a) {
                    var props = _a[0], content = _a[1];
                    return message({ props: props, content: content });
                });
                active$ = on$;
            }
            var transition$ = active$.fold(function (prevAnim, active) { return prevAnim.direction === enums_1.Direction.None
                ? { animation: enums_1.Animation.None, direction: active ? enums_1.Direction.In : enums_1.Direction.Out }
                : { animation: enums_1.Animation.Fade, direction: active ? enums_1.Direction.In : enums_1.Direction.Out }; }, { animation: enums_1.Animation.None, direction: enums_1.Direction.None });
            var animation = transition_1.Transition.run({ DOM: sources.DOM, target$: vTree$, transition$: transition$ }, scope);
            var evt;
            if (sources.args && sources.args.closeable) {
                evt = function (type) { return xstream_1.default.merge(sources.DOM.select(".message").events(type), icon.events(type), animation.events(type)); };
            }
            else {
                evt = function (type) { return sources.DOM.select(".message").events(type); };
            }
            return {
                DOM: animation.DOM,
                events: evt
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Message.run = run;
    function message(args, closeIcon) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        if (content.icon) {
            props.icon = true;
        }
        if (typeof (content.main) === "string") {
            content.main = [dom_1.p(content.main)];
        }
        return dom_1.div({ props: { className: getClassname(props) } }, [].concat(content.icon ? content.icon : [], closeIcon ? closeIcon : [], dom_1.div({ props: { className: "content" } }, [].concat(content.header ? dom_1.div({ props: { className: "header" } }, content.header) : [], content.main))));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.icon) {
            className += " icon";
        }
        if (props.floating) {
            className += " floating";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.forceVisible) {
            className += " visible";
        }
        if (props.hidden) {
            className += " hidden";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " message";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" || isContent(obj.content) || types_1.isDOMContent(obj.content));
    }
    function isContent(content) {
        return content !== undefined && (types_1.isDOMContent(content.icon) || types_1.isDOMContent(content.header) || types_1.isDOMContent(content.main));
    }
})(Message = exports.Message || (exports.Message = {}));


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Table;
(function (Table) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(tableR, isArgs, isMain, arg1, arg2);
    }
    Table.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, tableR, ".table", scope);
    }
    Table.run = run;
    function tableR(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : { main: args.content } : { main: [] };
        var header = content.header ? dom_1.thead([dom_1.tr(content.header.map(function (h) { return dom_1.th(h); }))]) : [];
        var footer;
        if (types_1.isDOMContent(content.footer)) {
            footer = dom_1.tfoot(content.footer);
        }
        else {
            footer = content.footer ? dom_1.tfoot([dom_1.tr(content.footer.map(function (f) { return dom_1.th(f); }))]) : [];
        }
        return dom_1.table({ props: { className: getClassname(props) } }, [].concat(header, dom_1.tbody(content.main.map(function (r) { return dom_1.tr(r.map(function (c) { return dom_1.td(c); })); })), footer));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.singleLine) {
            className += " single line";
        }
        if (props.fixed) {
            className += " fixed";
        }
        if (props.selectable) {
            className += " selectable";
        }
        if (props.striped) {
            className += " striped";
        }
        if (props.celled) {
            className += " celled";
        }
        if (props.basic) {
            className += " basic";
        }
        if (props.veryBasic) {
            className += " very basic";
        }
        if (props.collapsing) {
            className += " collapsing";
        }
        if (props.padded) {
            className += " padded";
        }
        if (props.veryPadded) {
            className += " very padded";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.veryCompact) {
            className += " very compact";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " table";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            (typeof (obj.content) !== "undefined" && (isContent(obj.content) || isMain(obj.content))));
    }
    function isContent(content) {
        return content !== undefined && (content.main !== undefined ||
            (content.header !== undefined ||
                content.footer !== undefined));
    }
    function isMain(obj) {
        return typeof (obj) !== "undefined" && obj instanceof Array;
    }
})(Table = exports.Table || (exports.Table = {}));


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Button;
(function (Button) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(button, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Button.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, button, ".button", scope);
    }
    Button.run = run;
    function button(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        var children = content.hidden
            ? [dom_1.div({ props: { className: "visible content" } }, content.main),
                dom_1.div({ props: { className: "hidden content" } }, content.hidden)]
            : content.main;
        return props.href
            ? dom_1.a({ props: { href: props.href, className: getClassname(props) } }, children)
            : dom_1.div({ props: { className: getClassname(props) } }, children);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.animated) {
            className += " animated";
        }
        if (props.verticalAnimated) {
            className += " vertical animated";
        }
        if (props.labeled) {
            className += " labeled";
        }
        if (props.rightlabeled) {
            className += " right labeled";
        }
        if (props.icon) {
            className += " icon";
        }
        if (props.basic) {
            className += " basic";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.active) {
            className += " active";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.fluid) {
            className += " fluid";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " button";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            types_1.isDOMContent(obj.content) || (typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.hidden))));
    }
})(Button = exports.Button || (exports.Button = {}));


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Container;
(function (Container) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, container, ".container", scope);
    }
    Container.run = run;
    function render(arg1) {
        return common_1.renderPropsAndContent(container, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1);
    }
    Container.render = render;
    function container(args) {
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: "ui container" } }, content);
    }
})(Container = exports.Container || (exports.Container = {}));


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Divider;
(function (Divider) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, divider, ".divider", scope);
    }
    Divider.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(divider, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Divider.render = render;
    function divider(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassName(props) } }, content);
    }
    function getClassName(props) {
        var className = "ui";
        if (props.vertical) {
            className += " vertical";
        }
        else if (props.horizontal) {
            className += " horizontal";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.fitted) {
            className += " fitted";
        }
        if (props.hidden) {
            className += " hidden";
        }
        if (props.section) {
            className += " section";
        }
        if (props.clearing) {
            className += " clearing";
        }
        if (props.header) {
            className += " header";
        }
        className += " divider";
        return className;
    }
})(Divider = exports.Divider || (exports.Divider = {}));


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Header;
(function (Header) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, header, ".header", scope);
    }
    Header.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(header, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Header.render = render;
    function header(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        var children = [].concat(content.main ? content.main : [], content.subtext ? dom_1.div({ props: { className: "sub header" } }, content.subtext) : []);
        return dom_1.div({ props: { className: getClassname(props) } }, content.icon
            ? [].concat(content.icon, dom_1.div({ props: { className: "content" } }, children))
            : children);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.icon) {
            className += " icon";
        }
        if (props.dividing) {
            className += " dividing";
        }
        if (props.divider) {
            className += " divider";
        }
        if (props.block) {
            className += " block";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " header";
        return className;
    }
    function isArgs(obj) {
        return (typeof (obj) !== "undefined") && (typeof (obj.props) !== "undefined" ||
            types_1.isDOMContent(obj.content) || (typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content.main) ||
            types_1.isDOMContent(obj.content.icon) ||
            types_1.isDOMContent(obj.content.subtext))));
    }
})(Header = exports.Header || (exports.Header = {}));


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Image;
(function (Image) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, image, ".image", scope);
    }
    Image.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(image, common_1.makeIsArgs(isUrl), isUrl, arg1, arg2);
    }
    Image.render = render;
    function image(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isUrl(args.content) ? args.content : args.content.main : "";
        var image = dom_1.img({ props: { className: getClassname(props), src: content } });
        return props.href ? dom_1.a({ props: { href: props.href } }, image) : image;
    }
    Image.image = image;
    function getClassname(props) {
        var className = "ui";
        if (props.href) {
            className += " link";
        }
        if (props.hidden) {
            className += " hidden";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.avatar) {
            className += " avatar";
        }
        if (props.bordered) {
            className += " bordered";
        }
        if (props.spaced) {
            className += " spaced";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.rounded) {
            className += " rounded";
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        return className + " image";
    }
    function isUrl(obj) {
        return typeof (obj) === "string";
    }
})(Image = exports.Image || (exports.Image = {}));


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(195));
__export(__webpack_require__(196));
__export(__webpack_require__(197));
__export(__webpack_require__(198));
__export(__webpack_require__(19));
__export(__webpack_require__(199));
__export(__webpack_require__(201));
__export(__webpack_require__(202));
__export(__webpack_require__(203));
__export(__webpack_require__(204));
__export(__webpack_require__(205));
__export(__webpack_require__(206));


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Label;
(function (Label) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, label, ".label", scope);
    }
    Label.run = run;
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(label, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Label.render = render;
    function label(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        var children = [].concat(content.main ? content.main : [], content.detail ? dom_1.div({ props: { className: "detail" } }, content.detail) : []);
        return dom_1.div({ props: { className: getClassname(props) } }, children);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.circular) {
            className += " circular";
        }
        if (props.empty) {
            className += " empty";
        }
        if (props.pointing) {
            className += " pointing";
        }
        if (props.leftPointing) {
            className += " left pointing";
        }
        if (props.rightPointing) {
            className += " right pointing";
        }
        if (props.basic) {
            className += " basic";
        }
        if (props.leftCorner) {
            className += " left corner";
        }
        if (props.rightCorner) {
            className += " right corner";
        }
        if (props.tag) {
            className += " tag";
        }
        if (props.ribbon) {
            className += " ribbon";
        }
        if (props.rightRibbon) {
            className += " right ribbon";
        }
        if (props.horizontal) {
            className += " horizontal";
        }
        if (props.floating) {
            className += " floating";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " label";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content) || (types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.detail))));
    }
})(Label = exports.Label || (exports.Label = {}));


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var List;
(function (List) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(list, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    List.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, list, ".list", scope);
    }
    List.run = run;
    function list(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content.map(function (_a) {
            var header = _a.header, icon = _a.icon, main = _a.main, description = _a.description, href = _a.href, left = _a.left, right = _a.right;
            var l = left ? dom_1.div({ props: { className: "left floated content" } }, left) : [];
            var r = right ? dom_1.div({ props: { className: "right floated content" } }, right) : [];
            var h = header ? dom_1.div({ props: { className: "header" } }, header) : [];
            var d = description ? dom_1.div({ props: { className: "description" } }, description) : [];
            var i = icon ? icon : [];
            var c = (header || description) ? dom_1.div({ props: { className: "content" } }, [].concat(h, d, main)) : main;
            var children = [].concat(l, i, c, r);
            return href
                ? dom_1.a({ props: { className: "item", href: href } }, children)
                : dom_1.div({ props: { className: "item" } }, children);
        }));
    }
    List.list = list;
    function getClassname(props) {
        var className = "ui";
        if (props.bulleted) {
            className += " bulleted";
        }
        if (props.ordered) {
            className += " ordered";
        }
        if (props.horizontal) {
            className += " horizontal";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.selection) {
            className += " selection";
        }
        if (props.animated) {
            className += " animated";
        }
        if (props.relaxed) {
            className += " relaxed";
        }
        if (props.divided) {
            className += " divided";
        }
        if (props.celled) {
            className += " celled";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.alignment) !== "undefined") {
            className += enums_1.VerticalAlignment.ToClassname(props.alignment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        className += " list";
        return className;
    }
    function isContent(obj) {
        return obj instanceof Array;
    }
})(List = exports.List || (exports.List = {}));


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var dimmer_1 = __webpack_require__(35);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Loader;
(function (Loader) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(loader, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Loader.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({ type: LoaderType.Page });
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of(undefined);
            var on$ = sources.args && sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var props$ = sources.props$.remember();
            var vTree$ = xstream_1.default.combine(props$, sources.content$)
                .map(function (_a) {
                var props = _a[0], content = _a[1];
                return loader({ props: props, content: content });
            });
            var target$ = props$.map(function (props) { return props.type === LoaderType.Page ? xstream_1.default.of("page") : sources.args.element$; }).flatten();
            var dimmer = dimmer_1.Dimmer.run({
                DOM: sources.DOM,
                props$: props$.map(function (props) { return ({ inverted: props.inverted }); }),
                content$: vTree$.map(function (v) { return [v]; }),
                args: { on$: on$, target$: target$ }
            }, scope);
            var result$ = props$.map(function (props) { return props.type === LoaderType.Inline ? vTree$ : dimmer.DOM; }).flatten();
            return {
                DOM: result$,
                events: function (type) { return xstream_1.default.merge(sources.DOM.select(".loader").events(type), dimmer.events(type)); }
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Loader.run = run;
    function loader(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.active) {
            className += " active";
        }
        if (props.centered) {
            className += " centered";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.indeterminate) {
            className += " indeterminate";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.text) {
            className += " text";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += LoaderType.ToClassname(typeof (props.type) !== "undefined" ? props.type : LoaderType.Page);
        return className;
    }
    var LoaderType;
    (function (LoaderType) {
        LoaderType[LoaderType["Inline"] = 0] = "Inline";
        LoaderType[LoaderType["Page"] = 1] = "Page";
        LoaderType[LoaderType["Content"] = 2] = "Content";
    })(LoaderType = Loader.LoaderType || (Loader.LoaderType = {}));
    (function (LoaderType) {
        function ToEnum(attachmentstring) {
            return typeof (attachmentstring) === "number"
                ? attachmentstring
                : LoaderType[utils_1.capitalize(attachmentstring)];
        }
        LoaderType.ToEnum = ToEnum;
        function ToClassname(type) {
            type = LoaderType.ToEnum(type);
            switch (type) {
                case LoaderType.Inline: return " inline loader";
                case LoaderType.Page: return " loader";
                case LoaderType.Content: return " loader";
            }
        }
        LoaderType.ToClassname = ToClassname;
    })(LoaderType = Loader.LoaderType || (Loader.LoaderType = {}));
})(Loader = exports.Loader || (exports.Loader = {}));


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Segment;
(function (Segment) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(segment, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Segment.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, segment, ".segment", scope);
    }
    Segment.run = run;
    function segment(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, content);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.raised) {
            className += " raised";
        }
        if (props.stacked) {
            className += " stacked";
        }
        if (props.tallStacked) {
            className += " tall stacked";
        }
        if (props.piled) {
            className += " piled";
        }
        if (props.vertical) {
            className += " vertical";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.padded) {
            className += " padded";
        }
        if (props.veryPadded) {
            className += " very padded";
        }
        if (props.compact) {
            className += " compact";
        }
        if (props.circular) {
            className += " circular";
        }
        if (props.clearing) {
            className += " clearing";
        }
        if (props.basic) {
            className += " basic";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        if (typeof (props.textAlignment) !== "undefined") {
            className += enums_1.TextAlignment.ToClassname(props.textAlignment);
        }
        className += " segment";
        return className;
    }
})(Segment = exports.Segment || (exports.Segment = {}));


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var enums_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(2);
var common_1 = __webpack_require__(5);
var Steps;
(function (Steps) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(steps, common_1.makeIsArgs(isContent), isContent, arg1, arg2);
    }
    Steps.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, steps, ".steps", scope);
    }
    Steps.run = run;
    function steps(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? isContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props, content.length) } }, content.map(stepItem));
    }
    function stepItem(item, i) {
        var icon = item.icon ? item.icon : [];
        var header = item.header ? dom_1.div({ props: { className: "title" } }, item.header) : [];
        var description = item.description ? dom_1.div({ props: { className: "description" } }, item.description) : [];
        var content = [].concat(header, description);
        var children = [].concat(icon, content.length > 0 ? [dom_1.div({ props: { className: "content" } }, content)] : []);
        return item.href
            ? dom_1.a({ props: { id: i, className: getStepClassname(item), href: item.href } }, children)
            : dom_1.div({ props: { id: i, className: getStepClassname(item) } }, children);
    }
    function getClassname(props, length) {
        var className = "ui";
        if (props.vertical) {
            className += " vertical";
        }
        if (props.stackable) {
            className += " stackable";
        }
        if (props.fluid) {
            className += " fluid";
        }
        if (props.equalWidth) {
            className += utils_1.numToText(length);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        className += " steps";
        return className;
    }
    function getStepClassname(item) {
        var className = "";
        if (item.active) {
            className += "active";
        }
        if (item.completed) {
            className += " completed";
        }
        if (item.disabled) {
            className += " disabled";
        }
        if (item.link) {
            className += " link";
        }
        className += " step";
        return className;
    }
    function isContent(obj) {
        return obj instanceof Array;
    }
})(Steps = exports.Steps || (exports.Steps = {}));


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var isolate_1 = __webpack_require__(8);
var xstream_1 = __webpack_require__(0);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Textbox;
(function (Textbox) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(textbox, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Textbox.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of([]);
            var evt = function (type) { return sources.DOM.select(".input").events(type); };
            var props$ = sources.props$.remember();
            var value$ = evt("input").map(function (ev) { return ev.target.value; });
            var vtree$ = xstream_1.default.combine(props$, sources.content$).map(function (_a) {
                var props = _a[0], content = _a[1];
                return textbox({ props: props, content: content });
            });
            return {
                DOM: vtree$,
                events: evt,
                value$: value$
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Textbox.run = run;
    function textbox(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        var textbox = props.rows
            ? dom_1.textarea({ attrs: { rows: props.rows, readonly: props.readonly, placeholder: props.placeholder }, props: { value: props.value } })
            : dom_1.input({ attrs: { readonly: props.readonly, type: props.type ? props.type : "text", placeholder: props.placeholder }, props: { value: props.value } });
        return props.rightContent
            ? dom_1.div({ props: { className: getClassname(props) } }, [].concat(textbox, content))
            : dom_1.div({ props: { className: getClassname(props) } }, [].concat(content, textbox));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.leftContent) {
            className += " left";
        }
        if (props.rightContent) {
            className += " right";
        }
        if (props.icon) {
            className += " icon";
        }
        if (props.labeled) {
            className += " labeled";
        }
        if (props.action) {
            className += " action";
        }
        if (props.transparent) {
            className += " transparent";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (props.focus) {
            className += " focus";
        }
        if (props.loading) {
            className += " loading";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        className += " input";
        return className;
    }
})(Textbox = exports.Textbox || (exports.Textbox = {}));


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IconType;
(function (IconType) {
    function ToClassname(type) {
        if (typeof (type) === "string") {
            return " " + type;
        }
        if (type < 0) {
            return "";
        }
        var name = IconType[type];
        return " " + name.match(/[A-Z][a-z]+/g).join(" ").toLowerCase();
    }
    IconType.ToClassname = ToClassname;
})(IconType = exports.IconType || (exports.IconType = {}));
(function (IconType) {
    IconType[IconType["Search"] = 0] = "Search";
    IconType[IconType["MailOutline"] = 1] = "MailOutline";
    IconType[IconType["External"] = 2] = "External";
    IconType[IconType["Signal"] = 3] = "Signal";
    IconType[IconType["Setting"] = 4] = "Setting";
    IconType[IconType["Home"] = 5] = "Home";
    IconType[IconType["Inbox"] = 6] = "Inbox";
    IconType[IconType["Browser"] = 7] = "Browser";
    IconType[IconType["Tag"] = 8] = "Tag";
    IconType[IconType["Tags"] = 9] = "Tags";
    IconType[IconType["Calendar"] = 10] = "Calendar";
    IconType[IconType["Comment"] = 11] = "Comment";
    IconType[IconType["Comments"] = 12] = "Comments";
    IconType[IconType["Shop"] = 13] = "Shop";
    IconType[IconType["Privacy"] = 14] = "Privacy";
    IconType[IconType["Settings"] = 15] = "Settings";
    IconType[IconType["Trophy"] = 16] = "Trophy";
    IconType[IconType["Payment"] = 17] = "Payment";
    IconType[IconType["Feed"] = 18] = "Feed";
    IconType[IconType["AlarmOutline"] = 19] = "AlarmOutline";
    IconType[IconType["Tasks"] = 20] = "Tasks";
    IconType[IconType["Cloud"] = 21] = "Cloud";
    IconType[IconType["Lab"] = 22] = "Lab";
    IconType[IconType["Mail"] = 23] = "Mail";
    IconType[IconType["Idea"] = 24] = "Idea";
    IconType[IconType["Dashboard"] = 25] = "Dashboard";
    IconType[IconType["Sitemap"] = 26] = "Sitemap";
    IconType[IconType["Alarm"] = 27] = "Alarm";
    IconType[IconType["Terminal"] = 28] = "Terminal";
    IconType[IconType["Code"] = 29] = "Code";
    IconType[IconType["Protect"] = 30] = "Protect";
    IconType[IconType["CalendarOutline"] = 31] = "CalendarOutline";
    IconType[IconType["Ticket"] = 32] = "Ticket";
    IconType[IconType["ExternalSquare"] = 33] = "ExternalSquare";
    IconType[IconType["Map"] = 34] = "Map";
    IconType[IconType["Bug"] = 35] = "Bug";
    IconType[IconType["MailSquare"] = 36] = "MailSquare";
    IconType[IconType["History"] = 37] = "History";
    IconType[IconType["Options"] = 38] = "Options";
    IconType[IconType["CommentOutline"] = 39] = "CommentOutline";
    IconType[IconType["CommentsOutline"] = 40] = "CommentsOutline";
    IconType[IconType["TextTelephone"] = 41] = "TextTelephone";
    IconType[IconType["Find"] = 42] = "Find";
    IconType[IconType["Wifi"] = 43] = "Wifi";
    IconType[IconType["AlarmSlash"] = 44] = "AlarmSlash";
    IconType[IconType["AlarmSlashOutline"] = 45] = "AlarmSlashOutline";
    IconType[IconType["Copyright"] = 46] = "Copyright";
    IconType[IconType["At"] = 47] = "At";
    IconType[IconType["Eyedropper"] = 48] = "Eyedropper";
    IconType[IconType["PaintBrush"] = 49] = "PaintBrush";
    IconType[IconType["Heartbeat"] = 50] = "Heartbeat";
    IconType[IconType["Download"] = 51] = "Download";
    IconType[IconType["Repeat"] = 52] = "Repeat";
    IconType[IconType["Refresh"] = 53] = "Refresh";
    IconType[IconType["Lock"] = 54] = "Lock";
    IconType[IconType["Bookmark"] = 55] = "Bookmark";
    IconType[IconType["Print"] = 56] = "Print";
    IconType[IconType["Write"] = 57] = "Write";
    IconType[IconType["Theme"] = 58] = "Theme";
    IconType[IconType["Adjust"] = 59] = "Adjust";
    IconType[IconType["Edit"] = 60] = "Edit";
    IconType[IconType["ExternalShare"] = 61] = "ExternalShare";
    IconType[IconType["Ban"] = 62] = "Ban";
    IconType[IconType["MailForward"] = 63] = "MailForward";
    IconType[IconType["Share"] = 64] = "Share";
    IconType[IconType["Expand"] = 65] = "Expand";
    IconType[IconType["Compress"] = 66] = "Compress";
    IconType[IconType["Unhide"] = 67] = "Unhide";
    IconType[IconType["Hide"] = 68] = "Hide";
    IconType[IconType["Random"] = 69] = "Random";
    IconType[IconType["Retweet"] = 70] = "Retweet";
    IconType[IconType["SignOut"] = 71] = "SignOut";
    IconType[IconType["Pin"] = 72] = "Pin";
    IconType[IconType["SignIn"] = 73] = "SignIn";
    IconType[IconType["Upload"] = 74] = "Upload";
    IconType[IconType["Call"] = 75] = "Call";
    IconType[IconType["CallSquare"] = 76] = "CallSquare";
    IconType[IconType["RemoveBookmark"] = 77] = "RemoveBookmark";
    IconType[IconType["Unlock"] = 78] = "Unlock";
    IconType[IconType["Configure"] = 79] = "Configure";
    IconType[IconType["Filter"] = 80] = "Filter";
    IconType[IconType["Wizard"] = 81] = "Wizard";
    IconType[IconType["Undo"] = 82] = "Undo";
    IconType[IconType["Exchange"] = 83] = "Exchange";
    IconType[IconType["CloudDownload"] = 84] = "CloudDownload";
    IconType[IconType["CloudUpload"] = 85] = "CloudUpload";
    IconType[IconType["Reply"] = 86] = "Reply";
    IconType[IconType["ReplyAll"] = 87] = "ReplyAll";
    IconType[IconType["Erase"] = 88] = "Erase";
    IconType[IconType["UnlockAlternate"] = 89] = "UnlockAlternate";
    IconType[IconType["Archive"] = 90] = "Archive";
    IconType[IconType["Translate"] = 91] = "Translate";
    IconType[IconType["Recycle"] = 92] = "Recycle";
    IconType[IconType["Send"] = 93] = "Send";
    IconType[IconType["SendOutline"] = 94] = "SendOutline";
    IconType[IconType["ShareAlternate"] = 95] = "ShareAlternate";
    IconType[IconType["ShareAlternateSquare"] = 96] = "ShareAlternateSquare";
    IconType[IconType["Wait"] = 97] = "Wait";
    IconType[IconType["WriteSquare"] = 98] = "WriteSquare";
    IconType[IconType["ShareSquare"] = 99] = "ShareSquare";
    IconType[IconType["AddToCart"] = 100] = "AddToCart";
    IconType[IconType["InCart"] = 101] = "InCart";
    IconType[IconType["AddUser"] = 102] = "AddUser";
    IconType[IconType["RemoveUser"] = 103] = "RemoveUser";
    IconType[IconType["HelpCircle"] = 104] = "HelpCircle";
    IconType[IconType["InfoCircle"] = 105] = "InfoCircle";
    IconType[IconType["Warning"] = 106] = "Warning";
    IconType[IconType["WarningCircle"] = 107] = "WarningCircle";
    IconType[IconType["WarningSign"] = 108] = "WarningSign";
    IconType[IconType["Help"] = 109] = "Help";
    IconType[IconType["Info"] = 110] = "Info";
    IconType[IconType["Announcement"] = 111] = "Announcement";
    IconType[IconType["Birthday"] = 112] = "Birthday";
    IconType[IconType["Users"] = 113] = "Users";
    IconType[IconType["Doctor"] = 114] = "Doctor";
    IconType[IconType["Child"] = 115] = "Child";
    IconType[IconType["User"] = 116] = "User";
    IconType[IconType["Handicap"] = 117] = "Handicap";
    IconType[IconType["Student"] = 118] = "Student";
    IconType[IconType["Spy"] = 119] = "Spy";
    IconType[IconType["GridLayout"] = 120] = "GridLayout";
    IconType[IconType["ListLayout"] = 121] = "ListLayout";
    IconType[IconType["BlockLayout"] = 122] = "BlockLayout";
    IconType[IconType["Zoom"] = 123] = "Zoom";
    IconType[IconType["ZoomOut"] = 124] = "ZoomOut";
    IconType[IconType["ResizeVertical"] = 125] = "ResizeVertical";
    IconType[IconType["ResizeHorizontal"] = 126] = "ResizeHorizontal";
    IconType[IconType["Maximize"] = 127] = "Maximize";
    IconType[IconType["Crop"] = 128] = "Crop";
    IconType[IconType["Female"] = 129] = "Female";
    IconType[IconType["Male"] = 130] = "Male";
    IconType[IconType["Woman"] = 131] = "Woman";
    IconType[IconType["Man"] = 132] = "Man";
    IconType[IconType["NonBinaryTransgender"] = 133] = "NonBinaryTransgender";
    IconType[IconType["Intergender"] = 134] = "Intergender";
    IconType[IconType["Transgender"] = 135] = "Transgender";
    IconType[IconType["Lesbian"] = 136] = "Lesbian";
    IconType[IconType["Gay"] = 137] = "Gay";
    IconType[IconType["Heterosexual"] = 138] = "Heterosexual";
    IconType[IconType["OtherGender"] = 139] = "OtherGender";
    IconType[IconType["OtherGenderVertical"] = 140] = "OtherGenderVertical";
    IconType[IconType["OtherGenderHorizontal"] = 141] = "OtherGenderHorizontal";
    IconType[IconType["Neuter"] = 142] = "Neuter";
    IconType[IconType["Cocktail"] = 143] = "Cocktail";
    IconType[IconType["Road"] = 144] = "Road";
    IconType[IconType["Flag"] = 145] = "Flag";
    IconType[IconType["Book"] = 146] = "Book";
    IconType[IconType["Gift"] = 147] = "Gift";
    IconType[IconType["Leaf"] = 148] = "Leaf";
    IconType[IconType["Fire"] = 149] = "Fire";
    IconType[IconType["Plane"] = 150] = "Plane";
    IconType[IconType["Magnet"] = 151] = "Magnet";
    IconType[IconType["Legal"] = 152] = "Legal";
    IconType[IconType["Lemon"] = 153] = "Lemon";
    IconType[IconType["World"] = 154] = "World";
    IconType[IconType["Travel"] = 155] = "Travel";
    IconType[IconType["Shipping"] = 156] = "Shipping";
    IconType[IconType["Money"] = 157] = "Money";
    IconType[IconType["Lightning"] = 158] = "Lightning";
    IconType[IconType["Rain"] = 159] = "Rain";
    IconType[IconType["Treatment"] = 160] = "Treatment";
    IconType[IconType["Suitcase"] = 161] = "Suitcase";
    IconType[IconType["Bar"] = 162] = "Bar";
    IconType[IconType["FlagOutline"] = 163] = "FlagOutline";
    IconType[IconType["FlagCheckered"] = 164] = "FlagCheckered";
    IconType[IconType["Puzzle"] = 165] = "Puzzle";
    IconType[IconType["FireExtinguisher"] = 166] = "FireExtinguisher";
    IconType[IconType["Rocket"] = 167] = "Rocket";
    IconType[IconType["Anchor"] = 168] = "Anchor";
    IconType[IconType["Bullseye"] = 169] = "Bullseye";
    IconType[IconType["Sun"] = 170] = "Sun";
    IconType[IconType["Moon"] = 171] = "Moon";
    IconType[IconType["Fax"] = 172] = "Fax";
    IconType[IconType["LifeRing"] = 173] = "LifeRing";
    IconType[IconType["Bomb"] = 174] = "Bomb";
    IconType[IconType["Soccer"] = 175] = "Soccer";
    IconType[IconType["Calculator"] = 176] = "Calculator";
    IconType[IconType["Diamond"] = 177] = "Diamond";
    IconType[IconType["Crosshairs"] = 178] = "Crosshairs";
    IconType[IconType["Asterisk"] = 179] = "Asterisk";
    IconType[IconType["Certificate"] = 180] = "Certificate";
    IconType[IconType["Circle"] = 181] = "Circle";
    IconType[IconType["QuoteLeft"] = 182] = "QuoteLeft";
    IconType[IconType["QuoteRight"] = 183] = "QuoteRight";
    IconType[IconType["EllipsisHorizontal"] = 184] = "EllipsisHorizontal";
    IconType[IconType["EllipsisVertical"] = 185] = "EllipsisVertical";
    IconType[IconType["Cube"] = 186] = "Cube";
    IconType[IconType["Cubes"] = 187] = "Cubes";
    IconType[IconType["CircleNotched"] = 188] = "CircleNotched";
    IconType[IconType["CircleThin"] = 189] = "CircleThin";
    IconType[IconType["SquareOutline"] = 190] = "SquareOutline";
    IconType[IconType["Square"] = 191] = "Square";
    IconType[IconType["Checkmark"] = 192] = "Checkmark";
    IconType[IconType["Remove"] = 193] = "Remove";
    IconType[IconType["CheckmarkBox"] = 194] = "CheckmarkBox";
    IconType[IconType["Move"] = 195] = "Move";
    IconType[IconType["AddCircle"] = 196] = "AddCircle";
    IconType[IconType["MinusCircle"] = 197] = "MinusCircle";
    IconType[IconType["RemoveCircle"] = 198] = "RemoveCircle";
    IconType[IconType["CheckCircle"] = 199] = "CheckCircle";
    IconType[IconType["RemoveCircleOutline"] = 200] = "RemoveCircleOutline";
    IconType[IconType["CheckCircleOutline"] = 201] = "CheckCircleOutline";
    IconType[IconType["Plus"] = 202] = "Plus";
    IconType[IconType["Minus"] = 203] = "Minus";
    IconType[IconType["AddSquare"] = 204] = "AddSquare";
    IconType[IconType["Radio"] = 205] = "Radio";
    IconType[IconType["SelectedRadio"] = 206] = "SelectedRadio";
    IconType[IconType["MinusSquare"] = 207] = "MinusSquare";
    IconType[IconType["MinusSquareOutline"] = 208] = "MinusSquareOutline";
    IconType[IconType["CheckSquare"] = 209] = "CheckSquare";
    IconType[IconType["PlusSquareOutline"] = 210] = "PlusSquareOutline";
    IconType[IconType["ToggleOff"] = 211] = "ToggleOff";
    IconType[IconType["ToggleOn"] = 212] = "ToggleOn";
    IconType[IconType["Film"] = 213] = "Film";
    IconType[IconType["Sound"] = 214] = "Sound";
    IconType[IconType["Photo"] = 215] = "Photo";
    IconType[IconType["BarChart"] = 216] = "BarChart";
    IconType[IconType["CameraRetro"] = 217] = "CameraRetro";
    IconType[IconType["Newspaper"] = 218] = "Newspaper";
    IconType[IconType["AreaChart"] = 219] = "AreaChart";
    IconType[IconType["PieChart"] = 220] = "PieChart";
    IconType[IconType["LineChart"] = 221] = "LineChart";
    IconType[IconType["ArrowCircleOutlineDown"] = 222] = "ArrowCircleOutlineDown";
    IconType[IconType["ArrowCircleOutlineUp"] = 223] = "ArrowCircleOutlineUp";
    IconType[IconType["ChevronLeft"] = 224] = "ChevronLeft";
    IconType[IconType["ChevronRight"] = 225] = "ChevronRight";
    IconType[IconType["ArrowLeft"] = 226] = "ArrowLeft";
    IconType[IconType["ArrowRight"] = 227] = "ArrowRight";
    IconType[IconType["ArrowUp"] = 228] = "ArrowUp";
    IconType[IconType["ArrowDown"] = 229] = "ArrowDown";
    IconType[IconType["ChevronUp"] = 230] = "ChevronUp";
    IconType[IconType["ChevronDown"] = 231] = "ChevronDown";
    IconType[IconType["PointingRight"] = 232] = "PointingRight";
    IconType[IconType["PointingLeft"] = 233] = "PointingLeft";
    IconType[IconType["PointingUp"] = 234] = "PointingUp";
    IconType[IconType["PointingDown"] = 235] = "PointingDown";
    IconType[IconType["ArrowCircleLeft"] = 236] = "ArrowCircleLeft";
    IconType[IconType["ArrowCircleRight"] = 237] = "ArrowCircleRight";
    IconType[IconType["ArrowCircleUp"] = 238] = "ArrowCircleUp";
    IconType[IconType["ArrowCircleDown"] = 239] = "ArrowCircleDown";
    IconType[IconType["CaretDown"] = 240] = "CaretDown";
    IconType[IconType["CaretUp"] = 241] = "CaretUp";
    IconType[IconType["CaretLeft"] = 242] = "CaretLeft";
    IconType[IconType["CaretRight"] = 243] = "CaretRight";
    IconType[IconType["AngleDoubleLeft"] = 244] = "AngleDoubleLeft";
    IconType[IconType["AngleDoubleRight"] = 245] = "AngleDoubleRight";
    IconType[IconType["AngleDoubleUp"] = 246] = "AngleDoubleUp";
    IconType[IconType["AngleDoubleDown"] = 247] = "AngleDoubleDown";
    IconType[IconType["AngleLeft"] = 248] = "AngleLeft";
    IconType[IconType["AngleRight"] = 249] = "AngleRight";
    IconType[IconType["AngleUp"] = 250] = "AngleUp";
    IconType[IconType["AngleDown"] = 251] = "AngleDown";
    IconType[IconType["ChevronCircleLeft"] = 252] = "ChevronCircleLeft";
    IconType[IconType["ChevronCircleRight"] = 253] = "ChevronCircleRight";
    IconType[IconType["ChevronCircleUp"] = 254] = "ChevronCircleUp";
    IconType[IconType["ChevronCircleDown"] = 255] = "ChevronCircleDown";
    IconType[IconType["ToggleDown"] = 256] = "ToggleDown";
    IconType[IconType["ToggleUp"] = 257] = "ToggleUp";
    IconType[IconType["ToggleRight"] = 258] = "ToggleRight";
    IconType[IconType["LongArrowDown"] = 259] = "LongArrowDown";
    IconType[IconType["LongArrowUp"] = 260] = "LongArrowUp";
    IconType[IconType["LongArrowLeft"] = 261] = "LongArrowLeft";
    IconType[IconType["LongArrowRight"] = 262] = "LongArrowRight";
    IconType[IconType["ArrowCircleOutlineRight"] = 263] = "ArrowCircleOutlineRight";
    IconType[IconType["ArrowCircleOutlineLeft"] = 264] = "ArrowCircleOutlineLeft";
    IconType[IconType["ToggleLeft"] = 265] = "ToggleLeft";
    IconType[IconType["Power"] = 266] = "Power";
    IconType[IconType["Trash"] = 267] = "Trash";
    IconType[IconType["TrashOutline"] = 268] = "TrashOutline";
    IconType[IconType["DiskOutline"] = 269] = "DiskOutline";
    IconType[IconType["Desktop"] = 270] = "Desktop";
    IconType[IconType["Laptop"] = 271] = "Laptop";
    IconType[IconType["Tablet"] = 272] = "Tablet";
    IconType[IconType["Mobile"] = 273] = "Mobile";
    IconType[IconType["Game"] = 274] = "Game";
    IconType[IconType["Keyboard"] = 275] = "Keyboard";
    IconType[IconType["Plug"] = 276] = "Plug";
    IconType[IconType["Folder"] = 277] = "Folder";
    IconType[IconType["FolderOpen"] = 278] = "FolderOpen";
    IconType[IconType["LevelUp"] = 279] = "LevelUp";
    IconType[IconType["LevelDown"] = 280] = "LevelDown";
    IconType[IconType["File"] = 281] = "File";
    IconType[IconType["FileOutline"] = 282] = "FileOutline";
    IconType[IconType["FileText"] = 283] = "FileText";
    IconType[IconType["FileTextOutline"] = 284] = "FileTextOutline";
    IconType[IconType["FolderOutline"] = 285] = "FolderOutline";
    IconType[IconType["FolderOpenOutline"] = 286] = "FolderOpenOutline";
    IconType[IconType["FilePdfOutline"] = 287] = "FilePdfOutline";
    IconType[IconType["FileWordOutline"] = 288] = "FileWordOutline";
    IconType[IconType["FileExcelOutline"] = 289] = "FileExcelOutline";
    IconType[IconType["FilePowerpointOutline"] = 290] = "FilePowerpointOutline";
    IconType[IconType["FileImageOutline"] = 291] = "FileImageOutline";
    IconType[IconType["FileArchiveOutline"] = 292] = "FileArchiveOutline";
    IconType[IconType["FileAudioOutline"] = 293] = "FileAudioOutline";
    IconType[IconType["FileVideoOutline"] = 294] = "FileVideoOutline";
    IconType[IconType["FileCodeOutline"] = 295] = "FileCodeOutline";
    IconType[IconType["Barcode"] = 296] = "Barcode";
    IconType[IconType["Qrcode"] = 297] = "Qrcode";
    IconType[IconType["Fork"] = 298] = "Fork";
    IconType[IconType["Html5"] = 299] = "Html5";
    IconType[IconType["Css3"] = 300] = "Css3";
    IconType[IconType["Rss"] = 301] = "Rss";
    IconType[IconType["RssSquare"] = 302] = "RssSquare";
    IconType[IconType["Openid"] = 303] = "Openid";
    IconType[IconType["Database"] = 304] = "Database";
    IconType[IconType["Server"] = 305] = "Server";
    IconType[IconType["Heart"] = 306] = "Heart";
    IconType[IconType["Star"] = 307] = "Star";
    IconType[IconType["EmptyStar"] = 308] = "EmptyStar";
    IconType[IconType["ThumbsOutlineUp"] = 309] = "ThumbsOutlineUp";
    IconType[IconType["ThumbsOutlineDown"] = 310] = "ThumbsOutlineDown";
    IconType[IconType["StarHalf"] = 311] = "StarHalf";
    IconType[IconType["EmptyHeart"] = 312] = "EmptyHeart";
    IconType[IconType["Smile"] = 313] = "Smile";
    IconType[IconType["Frown"] = 314] = "Frown";
    IconType[IconType["Meh"] = 315] = "Meh";
    IconType[IconType["StarHalfEmpty"] = 316] = "StarHalfEmpty";
    IconType[IconType["ThumbsUp"] = 317] = "ThumbsUp";
    IconType[IconType["ThumbsDown"] = 318] = "ThumbsDown";
    IconType[IconType["Music"] = 319] = "Music";
    IconType[IconType["VideoPlayOutline"] = 320] = "VideoPlayOutline";
    IconType[IconType["VolumeOff"] = 321] = "VolumeOff";
    IconType[IconType["VolumeDown"] = 322] = "VolumeDown";
    IconType[IconType["VolumeUp"] = 323] = "VolumeUp";
    IconType[IconType["Record"] = 324] = "Record";
    IconType[IconType["StepBackward"] = 325] = "StepBackward";
    IconType[IconType["FastBackward"] = 326] = "FastBackward";
    IconType[IconType["Backward"] = 327] = "Backward";
    IconType[IconType["Play"] = 328] = "Play";
    IconType[IconType["Pause"] = 329] = "Pause";
    IconType[IconType["Stop"] = 330] = "Stop";
    IconType[IconType["Forward"] = 331] = "Forward";
    IconType[IconType["FastForward"] = 332] = "FastForward";
    IconType[IconType["StepForward"] = 333] = "StepForward";
    IconType[IconType["Eject"] = 334] = "Eject";
    IconType[IconType["Unmute"] = 335] = "Unmute";
    IconType[IconType["Mute"] = 336] = "Mute";
    IconType[IconType["VideoPlay"] = 337] = "VideoPlay";
    IconType[IconType["ClosedCaptioning"] = 338] = "ClosedCaptioning";
    IconType[IconType["Marker"] = 339] = "Marker";
    IconType[IconType["Coffee"] = 340] = "Coffee";
    IconType[IconType["Food"] = 341] = "Food";
    IconType[IconType["BuildingOutline"] = 342] = "BuildingOutline";
    IconType[IconType["Hospital"] = 343] = "Hospital";
    IconType[IconType["Emergency"] = 344] = "Emergency";
    IconType[IconType["FirstAid"] = 345] = "FirstAid";
    IconType[IconType["Military"] = 346] = "Military";
    IconType[IconType["H"] = 347] = "H";
    IconType[IconType["LocationArrow"] = 348] = "LocationArrow";
    IconType[IconType["SpaceShuttle"] = 349] = "SpaceShuttle";
    IconType[IconType["University"] = 350] = "University";
    IconType[IconType["Building"] = 351] = "Building";
    IconType[IconType["Paw"] = 352] = "Paw";
    IconType[IconType["Spoon"] = 353] = "Spoon";
    IconType[IconType["Car"] = 354] = "Car";
    IconType[IconType["Taxi"] = 355] = "Taxi";
    IconType[IconType["Tree"] = 356] = "Tree";
    IconType[IconType["Bicycle"] = 357] = "Bicycle";
    IconType[IconType["Bus"] = 358] = "Bus";
    IconType[IconType["Ship"] = 359] = "Ship";
    IconType[IconType["Motorcycle"] = 360] = "Motorcycle";
    IconType[IconType["StreetView"] = 361] = "StreetView";
    IconType[IconType["Hotel"] = 362] = "Hotel";
    IconType[IconType["Train"] = 363] = "Train";
    IconType[IconType["Subway"] = 364] = "Subway";
    IconType[IconType["Table"] = 365] = "Table";
    IconType[IconType["Columns"] = 366] = "Columns";
    IconType[IconType["Sort"] = 367] = "Sort";
    IconType[IconType["SortAscending"] = 368] = "SortAscending";
    IconType[IconType["SortDescending"] = 369] = "SortDescending";
    IconType[IconType["SortAlphabetAscending"] = 370] = "SortAlphabetAscending";
    IconType[IconType["SortAlphabetDescending"] = 371] = "SortAlphabetDescending";
    IconType[IconType["SortContentAscending"] = 372] = "SortContentAscending";
    IconType[IconType["SortContentDescending"] = 373] = "SortContentDescending";
    IconType[IconType["SortNumericAscending"] = 374] = "SortNumericAscending";
    IconType[IconType["SortNumericDescending"] = 375] = "SortNumericDescending";
    IconType[IconType["Font"] = 376] = "Font";
    IconType[IconType["Bold"] = 377] = "Bold";
    IconType[IconType["Italic"] = 378] = "Italic";
    IconType[IconType["TextHeight"] = 379] = "TextHeight";
    IconType[IconType["TextWidth"] = 380] = "TextWidth";
    IconType[IconType["AlignLeft"] = 381] = "AlignLeft";
    IconType[IconType["AlignCenter"] = 382] = "AlignCenter";
    IconType[IconType["AlignRight"] = 383] = "AlignRight";
    IconType[IconType["AlignJustify"] = 384] = "AlignJustify";
    IconType[IconType["List"] = 385] = "List";
    IconType[IconType["Outdent"] = 386] = "Outdent";
    IconType[IconType["Indent"] = 387] = "Indent";
    IconType[IconType["Linkify"] = 388] = "Linkify";
    IconType[IconType["Cut"] = 389] = "Cut";
    IconType[IconType["Copy"] = 390] = "Copy";
    IconType[IconType["Attach"] = 391] = "Attach";
    IconType[IconType["Save"] = 392] = "Save";
    IconType[IconType["Content"] = 393] = "Content";
    IconType[IconType["UnorderedList"] = 394] = "UnorderedList";
    IconType[IconType["OrderedList"] = 395] = "OrderedList";
    IconType[IconType["Strikethrough"] = 396] = "Strikethrough";
    IconType[IconType["Underline"] = 397] = "Underline";
    IconType[IconType["Paste"] = 398] = "Paste";
    IconType[IconType["Unlink"] = 399] = "Unlink";
    IconType[IconType["Superscript"] = 400] = "Superscript";
    IconType[IconType["Subscript"] = 401] = "Subscript";
    IconType[IconType["Header"] = 402] = "Header";
    IconType[IconType["Paragraph"] = 403] = "Paragraph";
    IconType[IconType["Euro"] = 404] = "Euro";
    IconType[IconType["Pound"] = 405] = "Pound";
    IconType[IconType["Dollar"] = 406] = "Dollar";
    IconType[IconType["Rupee"] = 407] = "Rupee";
    IconType[IconType["Yen"] = 408] = "Yen";
    IconType[IconType["Ruble"] = 409] = "Ruble";
    IconType[IconType["Won"] = 410] = "Won";
    IconType[IconType["Lira"] = 411] = "Lira";
    IconType[IconType["Shekel"] = 412] = "Shekel";
    IconType[IconType["Paypal"] = 413] = "Paypal";
    IconType[IconType["PaypalCard"] = 414] = "PaypalCard";
    IconType[IconType["GoogleWallet"] = 415] = "GoogleWallet";
    IconType[IconType["Visa"] = 416] = "Visa";
    IconType[IconType["Mastercard"] = 417] = "Mastercard";
    IconType[IconType["Discover"] = 418] = "Discover";
    IconType[IconType["AmericanExpress"] = 419] = "AmericanExpress";
    IconType[IconType["Stripe"] = 420] = "Stripe";
    IconType[IconType["TwitterSquare"] = 421] = "TwitterSquare";
    IconType[IconType["FacebookSquare"] = 422] = "FacebookSquare";
    IconType[IconType["LinkedinSquare"] = 423] = "LinkedinSquare";
    IconType[IconType["GithubSquare"] = 424] = "GithubSquare";
    IconType[IconType["Twitter"] = 425] = "Twitter";
    IconType[IconType["Facebook"] = 426] = "Facebook";
    IconType[IconType["Github"] = 427] = "Github";
    IconType[IconType["Pinterest"] = 428] = "Pinterest";
    IconType[IconType["PinterestSquare"] = 429] = "PinterestSquare";
    IconType[IconType["GooglePlusSquare"] = 430] = "GooglePlusSquare";
    IconType[IconType["GooglePlus"] = 431] = "GooglePlus";
    IconType[IconType["Linkedin"] = 432] = "Linkedin";
    IconType[IconType["GithubAlternate"] = 433] = "GithubAlternate";
    IconType[IconType["Maxcdn"] = 434] = "Maxcdn";
    IconType[IconType["Bitcoin"] = 435] = "Bitcoin";
    IconType[IconType["YoutubeSquare"] = 436] = "YoutubeSquare";
    IconType[IconType["Youtube"] = 437] = "Youtube";
    IconType[IconType["Xing"] = 438] = "Xing";
    IconType[IconType["XingSquare"] = 439] = "XingSquare";
    IconType[IconType["YoutubePlay"] = 440] = "YoutubePlay";
    IconType[IconType["Dropbox"] = 441] = "Dropbox";
    IconType[IconType["StackOverflow"] = 442] = "StackOverflow";
    IconType[IconType["Instagram"] = 443] = "Instagram";
    IconType[IconType["Flickr"] = 444] = "Flickr";
    IconType[IconType["Adn"] = 445] = "Adn";
    IconType[IconType["Bitbucket"] = 446] = "Bitbucket";
    IconType[IconType["BitbucketSquare"] = 447] = "BitbucketSquare";
    IconType[IconType["Tumblr"] = 448] = "Tumblr";
    IconType[IconType["TumblrSquare"] = 449] = "TumblrSquare";
    IconType[IconType["Apple"] = 450] = "Apple";
    IconType[IconType["Windows"] = 451] = "Windows";
    IconType[IconType["Android"] = 452] = "Android";
    IconType[IconType["Linux"] = 453] = "Linux";
    IconType[IconType["Dribbble"] = 454] = "Dribbble";
    IconType[IconType["Skype"] = 455] = "Skype";
    IconType[IconType["Foursquare"] = 456] = "Foursquare";
    IconType[IconType["Trello"] = 457] = "Trello";
    IconType[IconType["Gittip"] = 458] = "Gittip";
    IconType[IconType["Vk"] = 459] = "Vk";
    IconType[IconType["Weibo"] = 460] = "Weibo";
    IconType[IconType["Renren"] = 461] = "Renren";
    IconType[IconType["Pagelines"] = 462] = "Pagelines";
    IconType[IconType["StackExchange"] = 463] = "StackExchange";
    IconType[IconType["Vimeo"] = 464] = "Vimeo";
    IconType[IconType["Slack"] = 465] = "Slack";
    IconType[IconType["Wordpress"] = 466] = "Wordpress";
    IconType[IconType["Yahoo"] = 467] = "Yahoo";
    IconType[IconType["Google"] = 468] = "Google";
    IconType[IconType["Reddit"] = 469] = "Reddit";
    IconType[IconType["RedditSquare"] = 470] = "RedditSquare";
    IconType[IconType["StumbleuponCircle"] = 471] = "StumbleuponCircle";
    IconType[IconType["Stumbleupon"] = 472] = "Stumbleupon";
    IconType[IconType["Delicious"] = 473] = "Delicious";
    IconType[IconType["Digg"] = 474] = "Digg";
    IconType[IconType["PiedPiper"] = 475] = "PiedPiper";
    IconType[IconType["PiedPiperAlternate"] = 476] = "PiedPiperAlternate";
    IconType[IconType["Drupal"] = 477] = "Drupal";
    IconType[IconType["Joomla"] = 478] = "Joomla";
    IconType[IconType["Behance"] = 479] = "Behance";
    IconType[IconType["BehanceSquare"] = 480] = "BehanceSquare";
    IconType[IconType["Steam"] = 481] = "Steam";
    IconType[IconType["SteamSquare"] = 482] = "SteamSquare";
    IconType[IconType["Spotify"] = 483] = "Spotify";
    IconType[IconType["Deviantart"] = 484] = "Deviantart";
    IconType[IconType["Soundcloud"] = 485] = "Soundcloud";
    IconType[IconType["Vine"] = 486] = "Vine";
    IconType[IconType["Codepen"] = 487] = "Codepen";
    IconType[IconType["Jsfiddle"] = 488] = "Jsfiddle";
    IconType[IconType["Rebel"] = 489] = "Rebel";
    IconType[IconType["Empire"] = 490] = "Empire";
    IconType[IconType["GitSquare"] = 491] = "GitSquare";
    IconType[IconType["Git"] = 492] = "Git";
    IconType[IconType["HackerNews"] = 493] = "HackerNews";
    IconType[IconType["TencentWeibo"] = 494] = "TencentWeibo";
    IconType[IconType["Qq"] = 495] = "Qq";
    IconType[IconType["Wechat"] = 496] = "Wechat";
    IconType[IconType["Slideshare"] = 497] = "Slideshare";
    IconType[IconType["Twitch"] = 498] = "Twitch";
    IconType[IconType["Yelp"] = 499] = "Yelp";
    IconType[IconType["Lastfm"] = 500] = "Lastfm";
    IconType[IconType["LastfmSquare"] = 501] = "LastfmSquare";
    IconType[IconType["Ioxhost"] = 502] = "Ioxhost";
    IconType[IconType["Angellist"] = 503] = "Angellist";
    IconType[IconType["Meanpath"] = 504] = "Meanpath";
    IconType[IconType["Buysellads"] = 505] = "Buysellads";
    IconType[IconType["Connectdevelop"] = 506] = "Connectdevelop";
    IconType[IconType["Dashcube"] = 507] = "Dashcube";
    IconType[IconType["Forumbee"] = 508] = "Forumbee";
    IconType[IconType["Leanpub"] = 509] = "Leanpub";
    IconType[IconType["Sellsy"] = 510] = "Sellsy";
    IconType[IconType["Shirtsinbulk"] = 511] = "Shirtsinbulk";
    IconType[IconType["Simplybuilt"] = 512] = "Simplybuilt";
    IconType[IconType["Skyatlas"] = 513] = "Skyatlas";
    IconType[IconType["Whatsapp"] = 514] = "Whatsapp";
    IconType[IconType["Viacoin"] = 515] = "Viacoin";
    IconType[IconType["Medium"] = 516] = "Medium";
    IconType[IconType["Like"] = 517] = "Like";
    IconType[IconType["Favorite"] = 518] = "Favorite";
    IconType[IconType["Video"] = 519] = "Video";
    IconType[IconType["Check"] = 520] = "Check";
    IconType[IconType["Close"] = 521] = "Close";
    IconType[IconType["Cancel"] = 522] = "Cancel";
    IconType[IconType["Delete"] = 523] = "Delete";
    IconType[IconType["X"] = 524] = "X";
    IconType[IconType["UserTimes"] = 525] = "UserTimes";
    IconType[IconType["UserClose"] = 526] = "UserClose";
    IconType[IconType["UserCancel"] = 527] = "UserCancel";
    IconType[IconType["UserDelete"] = 528] = "UserDelete";
    IconType[IconType["UserX"] = 529] = "UserX";
    IconType[IconType["ZoomIn"] = 530] = "ZoomIn";
    IconType[IconType["Magnify"] = 531] = "Magnify";
    IconType[IconType["Shutdown"] = 532] = "Shutdown";
    IconType[IconType["Clock"] = 533] = "Clock";
    IconType[IconType["Time"] = 534] = "Time";
    IconType[IconType["PlayCircleOutline"] = 535] = "PlayCircleOutline";
    IconType[IconType["Headphone"] = 536] = "Headphone";
    IconType[IconType["Camera"] = 537] = "Camera";
    IconType[IconType["VideoCamera"] = 538] = "VideoCamera";
    IconType[IconType["Picture"] = 539] = "Picture";
    IconType[IconType["Pencil"] = 540] = "Pencil";
    IconType[IconType["Compose"] = 541] = "Compose";
    IconType[IconType["Point"] = 542] = "Point";
    IconType[IconType["Tint"] = 543] = "Tint";
    IconType[IconType["Signup"] = 544] = "Signup";
    IconType[IconType["PlusCircle"] = 545] = "PlusCircle";
    IconType[IconType["Dont"] = 546] = "Dont";
    IconType[IconType["Minimize"] = 547] = "Minimize";
    IconType[IconType["Add"] = 548] = "Add";
    IconType[IconType["Eye"] = 549] = "Eye";
    IconType[IconType["Attention"] = 550] = "Attention";
    IconType[IconType["Cart"] = 551] = "Cart";
    IconType[IconType["Shuffle"] = 552] = "Shuffle";
    IconType[IconType["Talk"] = 553] = "Talk";
    IconType[IconType["Chat"] = 554] = "Chat";
    IconType[IconType["ShoppingCart"] = 555] = "ShoppingCart";
    IconType[IconType["BarGraph"] = 556] = "BarGraph";
    IconType[IconType["AreaGraph"] = 557] = "AreaGraph";
    IconType[IconType["PieGraph"] = 558] = "PieGraph";
    IconType[IconType["LineGraph"] = 559] = "LineGraph";
    IconType[IconType["Key"] = 560] = "Key";
    IconType[IconType["Cogs"] = 561] = "Cogs";
    IconType[IconType["Discussions"] = 562] = "Discussions";
    IconType[IconType["LikeOutline"] = 563] = "LikeOutline";
    IconType[IconType["DislikeOutline"] = 564] = "DislikeOutline";
    IconType[IconType["HeartOutline"] = 565] = "HeartOutline";
    IconType[IconType["LogOut"] = 566] = "LogOut";
    IconType[IconType["ThumbTack"] = 567] = "ThumbTack";
    IconType[IconType["Winner"] = 568] = "Winner";
    IconType[IconType["BookmarkOutline"] = 569] = "BookmarkOutline";
    IconType[IconType["Phone"] = 570] = "Phone";
    IconType[IconType["PhoneSquare"] = 571] = "PhoneSquare";
    IconType[IconType["CreditCard"] = 572] = "CreditCard";
    IconType[IconType["HddOutline"] = 573] = "HddOutline";
    IconType[IconType["Bullhorn"] = 574] = "Bullhorn";
    IconType[IconType["Bell"] = 575] = "Bell";
    IconType[IconType["BellOutline"] = 576] = "BellOutline";
    IconType[IconType["BellSlash"] = 577] = "BellSlash";
    IconType[IconType["BellSlashOutline"] = 578] = "BellSlashOutline";
    IconType[IconType["HandOutlineRight"] = 579] = "HandOutlineRight";
    IconType[IconType["HandOutlineLeft"] = 580] = "HandOutlineLeft";
    IconType[IconType["HandOutlineUp"] = 581] = "HandOutlineUp";
    IconType[IconType["HandOutlineDown"] = 582] = "HandOutlineDown";
    IconType[IconType["Globe"] = 583] = "Globe";
    IconType[IconType["Wrench"] = 584] = "Wrench";
    IconType[IconType["Briefcase"] = 585] = "Briefcase";
    IconType[IconType["Group"] = 586] = "Group";
    IconType[IconType["Flask"] = 587] = "Flask";
    IconType[IconType["Sidebar"] = 588] = "Sidebar";
    IconType[IconType["Bars"] = 589] = "Bars";
    IconType[IconType["ListUl"] = 590] = "ListUl";
    IconType[IconType["ListOl"] = 591] = "ListOl";
    IconType[IconType["NumberedList"] = 592] = "NumberedList";
    IconType[IconType["Magic"] = 593] = "Magic";
    IconType[IconType["Truck"] = 594] = "Truck";
    IconType[IconType["Currency"] = 595] = "Currency";
    IconType[IconType["TriangleDown"] = 596] = "TriangleDown";
    IconType[IconType["Dropdown"] = 597] = "Dropdown";
    IconType[IconType["TriangleUp"] = 598] = "TriangleUp";
    IconType[IconType["TriangleLeft"] = 599] = "TriangleLeft";
    IconType[IconType["TriangleRight"] = 600] = "TriangleRight";
    IconType[IconType["Envelope"] = 601] = "Envelope";
    IconType[IconType["Conversation"] = 602] = "Conversation";
    IconType[IconType["Umbrella"] = 603] = "Umbrella";
    IconType[IconType["Clipboard"] = 604] = "Clipboard";
    IconType[IconType["Lightbulb"] = 605] = "Lightbulb";
    IconType[IconType["Ambulance"] = 606] = "Ambulance";
    IconType[IconType["Medkit"] = 607] = "Medkit";
    IconType[IconType["FighterJet"] = 608] = "FighterJet";
    IconType[IconType["Beer"] = 609] = "Beer";
    IconType[IconType["PlusSquare"] = 610] = "PlusSquare";
    IconType[IconType["Computer"] = 611] = "Computer";
    IconType[IconType["CircleOutline"] = 612] = "CircleOutline";
    IconType[IconType["Intersex"] = 613] = "Intersex";
    IconType[IconType["Asexual"] = 614] = "Asexual";
    IconType[IconType["Spinner"] = 615] = "Spinner";
    IconType[IconType["Gamepad"] = 616] = "Gamepad";
    IconType[IconType["StarHalfFull"] = 617] = "StarHalfFull";
    IconType[IconType["Question"] = 618] = "Question";
    IconType[IconType["Eraser"] = 619] = "Eraser";
    IconType[IconType["Microphone"] = 620] = "Microphone";
    IconType[IconType["MicrophoneSlash"] = 621] = "MicrophoneSlash";
    IconType[IconType["Shield"] = 622] = "Shield";
    IconType[IconType["Target"] = 623] = "Target";
    IconType[IconType["PlayCircle"] = 624] = "PlayCircle";
    IconType[IconType["PencilSquare"] = 625] = "PencilSquare";
    IconType[IconType["Compass"] = 626] = "Compass";
    IconType[IconType["Amex"] = 627] = "Amex";
    IconType[IconType["Eur"] = 628] = "Eur";
    IconType[IconType["Gbp"] = 629] = "Gbp";
    IconType[IconType["Usd"] = 630] = "Usd";
    IconType[IconType["Inr"] = 631] = "Inr";
    IconType[IconType["Cny"] = 632] = "Cny";
    IconType[IconType["Rmb"] = 633] = "Rmb";
    IconType[IconType["Jpy"] = 634] = "Jpy";
    IconType[IconType["Rouble"] = 635] = "Rouble";
    IconType[IconType["Rub"] = 636] = "Rub";
    IconType[IconType["Krw"] = 637] = "Krw";
    IconType[IconType["Btc"] = 638] = "Btc";
    IconType[IconType["Sheqel"] = 639] = "Sheqel";
    IconType[IconType["Ils"] = 640] = "Ils";
    IconType[IconType["Try"] = 641] = "Try";
    IconType[IconType["Zip"] = 642] = "Zip";
    IconType[IconType["DotCircleOutline"] = 643] = "DotCircleOutline";
    IconType[IconType["Sliders"] = 644] = "Sliders";
    IconType[IconType["Wi"] = 645] = "Wi";
    IconType[IconType["Graduation"] = 646] = "Graduation";
    IconType[IconType["Weixin"] = 647] = "Weixin";
    IconType[IconType["Binoculars"] = 648] = "Binoculars";
    IconType[IconType["Gratipay"] = 649] = "Gratipay";
    IconType[IconType["Genderless"] = 650] = "Genderless";
    IconType[IconType["Teletype"] = 651] = "Teletype";
    IconType[IconType["PowerCord"] = 652] = "PowerCord";
    IconType[IconType["Tty"] = 653] = "Tty";
    IconType[IconType["Cc"] = 654] = "Cc";
    IconType[IconType["PlusCart"] = 655] = "PlusCart";
    IconType[IconType["ArrowDownCart"] = 656] = "ArrowDownCart";
    IconType[IconType["Detective"] = 657] = "Detective";
    IconType[IconType["Venus"] = 658] = "Venus";
    IconType[IconType["Mars"] = 659] = "Mars";
    IconType[IconType["Mercury"] = 660] = "Mercury";
    IconType[IconType["VenusDouble"] = 661] = "VenusDouble";
    IconType[IconType["FemaleHomosexual"] = 662] = "FemaleHomosexual";
    IconType[IconType["MarsDouble"] = 663] = "MarsDouble";
    IconType[IconType["MaleHomosexual"] = 664] = "MaleHomosexual";
    IconType[IconType["VenusMars"] = 665] = "VenusMars";
    IconType[IconType["MarsStroke"] = 666] = "MarsStroke";
    IconType[IconType["MarsAlternate"] = 667] = "MarsAlternate";
    IconType[IconType["MarsVertical"] = 668] = "MarsVertical";
    IconType[IconType["MarsHorizontal"] = 669] = "MarsHorizontal";
    IconType[IconType["MarsStrokeVertical"] = 670] = "MarsStrokeVertical";
    IconType[IconType["MarsStrokeHorizontal"] = 671] = "MarsStrokeHorizontal";
    IconType[IconType["FacebookOfficial"] = 672] = "FacebookOfficial";
    IconType[IconType["PinterestOfficial"] = 673] = "PinterestOfficial";
    IconType[IconType["Bed"] = 674] = "Bed";
})(IconType = exports.IconType || (exports.IconType = {}));


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Checkbox;
(function (Checkbox) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(checkbox, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Checkbox.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            sources.props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            sources.content$ = sources.content$ ? sources.content$ : xstream_1.default.of("");
            var evt = function (type) { return sources.DOM.select(".checkbox").events(type); };
            var props$ = sources.props$.remember();
            var vTree$ = xstream_1.default.combine(props$, sources.content$).map(function (_a) {
                var props = _a[0], content = _a[1];
                return checkbox({ props: props, content: content });
            });
            var value$ = evt("click").map(function (evt) { return evt.srcElement.checked; });
            return {
                DOM: vTree$,
                events: evt,
                value$: value$
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Checkbox.run = run;
    function checkbox(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassName(props) } }, [
            dom_1.input({
                props: {
                    type: props.radio ? "radio" : "checkbox",
                    name: props.name,
                    checked: props.checked,
                    disabled: props.readonly || props.disabled
                }
            }),
            dom_1.label({ props: { for: props.name } }, props.fitted ? "" : content)
        ]);
    }
    function getClassName(props) {
        var className = "ui";
        if (props.readonly) {
            className += " read-only";
        }
        if (props.checked) {
            className += " checked";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.fitted) {
            className += " fitted";
        }
        if (props.radio) {
            className += " radio";
        }
        if (props.toggle) {
            className += " toggle";
        }
        if (props.slider) {
            className += " slider";
        }
        return className + " checkbox";
    }
})(Checkbox = exports.Checkbox || (exports.Checkbox = {}));


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
var delay_1 = __webpack_require__(36);
var dom_1 = __webpack_require__(1);
var common_1 = __webpack_require__(57);
var menu_1 = __webpack_require__(34);
var icon_1 = __webpack_require__(19);
var transition_1 = __webpack_require__(12);
var enums_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(2);
function run(sources, scope) {
    if (scope === void 0) { scope = utils_1.getScope(); }
    function main(sources) {
        /*** Main streams ***/
        var evt = function (type) { return sources.DOM.select(".dropdown").events(type); };
        var content$ = sources.content$ ? sources.content$.map(function (c) { return c instanceof Array ? c : c.main; }) : xstream_1.default.of([]);
        var props$ = sources.props$ ? sources.props$.remember() : xstream_1.default.of({});
        var value$proxy = xstream_1.default.create();
        var initialValue$ = props$.map(function (props) { return props.initial; }).remember();
        var value$ = initialValue$.map(function (value) { return value$proxy.startWith(value); }).flatten().remember();
        var menuItems$ = xstream_1.default.combine(content$, value$).map(function (_a) {
            var content = _a[0], value = _a[1];
            return content.map(function (item) { return item.value === value ? Object.assign({}, item, { active: true }) : item; });
        }).remember();
        var activeItem$ = menuItems$.map(function (content) { return content.filter(function (item) { return item.active; })[0]; });
        var menu = menu_1.Menu.run({ DOM: sources.DOM, props$: xstream_1.default.of({ submenu: true }), content$: menuItems$ }, scope);
        value$proxy.imitate(menu.value$.map(function (item) { return item.value; }));
        var transition$ = common_1.createTransition$(evt, sources.args);
        var active$ = xstream_1.default.merge(transition$.filter(function (x) { return x.direction === enums_1.Direction.In; }).mapTo(true), transition$.filter(function (x) { return x.direction === enums_1.Direction.Out; }).compose(delay_1.default(250)).mapTo(false));
        var animatedMenu = transition_1.Transition.run({ DOM: sources.DOM, target$: menu.DOM, transition$: transition$ }, scope);
        var vTree$ = xstream_1.default.combine(props$, active$, animatedMenu.DOM, activeItem$).map(function (_a) {
            var props = _a[0], isActive = _a[1], menu = _a[2], activeItem = _a[3];
            return dom_1.div({ props: { className: common_1.getClassName(isActive ? "ui active" : "ui", props) } }, [].concat(common_1.getText(activeItem, props, sources.args && sources.args.static), !props.simple ? icon_1.Icon.render(enums_1.IconType.Dropdown) : [], menu));
        });
        return {
            DOM: vTree$,
            events: function (type) { return xstream_1.default.merge(evt(type), menu.events(type), animatedMenu.events(type)); },
            value$: menu.value$.map(function (item) { return item.value; })
        };
    }
    if (scope === null) {
        return main(sources);
    }
    var isolatedMain = isolate_1.default(main, scope);
    return isolatedMain(sources);
}
exports.default = run;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(2);
var searchdropdown_1 = __webpack_require__(211);
var dropdown_1 = __webpack_require__(209);
var Dropdown;
(function (Dropdown) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        if (sources.args && sources.args.search) {
            return searchdropdown_1.default(sources, scope);
        }
        else {
            return dropdown_1.default(sources, scope);
        }
    }
    Dropdown.run = run;
})(Dropdown = exports.Dropdown || (exports.Dropdown = {}));


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
var delay_1 = __webpack_require__(36);
var dom_1 = __webpack_require__(1);
var common_1 = __webpack_require__(57);
var menu_1 = __webpack_require__(34);
var icon_1 = __webpack_require__(19);
var transition_1 = __webpack_require__(12);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(2);
function run(sources, scope) {
    if (scope === void 0) { scope = utils_1.getScope(); }
    function main(sources) {
        /*** Main streams ***/
        var evt = function (type) { return sources.DOM.select(".dropdown").events(type); };
        var content$ = (sources.content$ ? sources.content$.map(function (c) { return c instanceof Array ? c : c.main; }) : xstream_1.default.of([]));
        var props$ = (sources.props$ ? sources.props$.remember() : xstream_1.default.of({}));
        var value$proxy = xstream_1.default.create();
        var initialValue$ = props$.map(function (props) { return props.initial; }).remember();
        var value$ = initialValue$.map(function (value) { return value$proxy.startWith(value); }).flatten().remember();
        var input$ = sources.DOM.select("input").events("keyup")
            .map(function (ev) { return ev.target.value; });
        var filter$ = xstream_1.default.merge(input$, value$proxy.map(function (v) { return ""; })).startWith("");
        /** Create menu component **/
        var menuItems$ = xstream_1.default.combine(content$, value$).map(function (_a) {
            var content = _a[0], value = _a[1];
            return content.map(function (item) { return item.value === value ? Object.assign({}, item, { active: true }) : item; });
        }).remember();
        var activeItem$ = menuItems$.map(function (content) { return content.filter(function (item) { return item.active; })[0]; });
        var filteredItems$ = xstream_1.default.combine(content$, filter$).map(function (_a) {
            var content = _a[0], filter = _a[1];
            return content.filter(function (c) { return filterContent(c, filter); });
        }).remember();
        var menu = menu_1.Menu.run({ DOM: sources.DOM, props$: xstream_1.default.of({ submenu: true }), content$: filteredItems$ }, scope);
        var inputEnter$ = sources.DOM.select("input").events("keypress");
        var enterValue$ = inputEnter$.map(function (evt) {
            return (evt.charCode === 13 || evt.charCode === 9) ? filteredItems$.map(function (items) { return items[0]; }).take(1) : xstream_1.default.never();
        }).flatten();
        value$proxy.imitate(xstream_1.default.merge(menu.value$, enterValue$).map(function (item) { return item.value; }));
        var transition$ = common_1.createTransition$(evt, sources.args);
        var active$ = xstream_1.default.merge(transition$.filter(function (x) { return x.direction === enums_1.Direction.In; }).mapTo(true), transition$.filter(function (x) { return x.direction === enums_1.Direction.Out; }).compose(delay_1.default(250)).mapTo(false));
        var animatedMenu = transition_1.Transition.run({ DOM: sources.DOM, target$: menu.DOM, transition$: transition$ }, scope);
        var vTree$ = xstream_1.default.combine(props$, active$, animatedMenu.DOM, filter$, activeItem$).map(function (_a) {
            var props = _a[0], isActive = _a[1], menu = _a[2], filter = _a[3], activeItem = _a[4];
            return dom_1.div({ props: { className: common_1.getClassName(isActive ? "ui active search " : "ui search", props) } }, [].concat(dom_1.input({ props: { className: "search", value: filter } }), common_1.getText(activeItem, props, sources.args && sources.args.static, filter), !props.simple ? icon_1.Icon.render(enums_1.IconType.Dropdown) : [], menu));
        });
        return {
            DOM: vTree$,
            events: function (type) { return xstream_1.default.merge(evt(type), menu.events(type), animatedMenu.events(type)); },
            value$: value$proxy
        };
    }
    if (scope === null) {
        return main(sources);
    }
    var isolatedMain = isolate_1.default(main, scope);
    return isolatedMain(sources);
}
exports.default = run;
function filterContent(item, filter) {
    function f(node) {
        if (typeof (node) === "string") {
            return node === filter;
        }
        if (node.text) {
            return node.text.indexOf(filter) !== -1 || !filter;
        }
        else {
            for (var c in node.children) {
                if (f(c)) {
                    return true;
                }
            }
            return false;
        }
    }
    if (typeof (item.main) === "undefined") {
        return true;
    }
    else if (typeof (item.main) === "string") {
        return item.main.indexOf(filter) !== -1 || !filter;
    }
    else if (types_1.isVNode(item.main)) {
        return f(item.main);
    }
    else if (item.main instanceof Array) {
        for (var _i = 0, _a = item.main; _i < _a.length; _i++) {
            var c = _a[_i];
            if (common_1.isMenuItem(c)) {
                return filterContent(c, filter);
            }
            if (f(c)) {
                return true;
            }
        }
    }
    return false;
}


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(208));
__export(__webpack_require__(35));
__export(__webpack_require__(210));
__export(__webpack_require__(213));
__export(__webpack_require__(214));
__export(__webpack_require__(215));
__export(__webpack_require__(12));
__export(__webpack_require__(216));


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isolate_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(1);
var xstream_1 = __webpack_require__(0);
var enums_1 = __webpack_require__(4);
var dimmer_1 = __webpack_require__(35);
var icon_1 = __webpack_require__(19);
var transition_1 = __webpack_require__(12);
var types_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(2);
var Modal;
(function (Modal) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({});
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? { main: c } : c; }) : xstream_1.default.of({ main: [] });
            var target$ = sources.args && sources.args.target$ ? sources.args.target$ : xstream_1.default.of("page");
            var show$ = sources.args && sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var closeIcon = icon_1.Icon.run({ DOM: sources.DOM, props$: xstream_1.default.of({ link: true }), content$: xstream_1.default.of(enums_1.IconType.Close) }, scope);
            var close$ = closeIcon.events("click").mapTo(false);
            /*** Render modal ***/
            var dimmerclick$proxy = xstream_1.default.create();
            var on$ = xstream_1.default.merge(show$, dimmerclick$proxy, close$).remember();
            var modal$ = xstream_1.default.combine(content$, closeIcon.DOM).map(function (_a) {
                var content = _a[0], icon = _a[1];
                return dom_1.div({ props: { className: "ui scrolling active modal" } }, [].concat(icon, content.header ? dom_1.div({ props: { className: "header" } }, content.header) : [], dom_1.div({ props: { className: "content" } }, content.main), content.actions ? dom_1.div({ props: { className: "actions" } }, content.actions) : []));
            }).remember();
            /*** Animation ***/
            var transition$ = on$
                .fold(function (prevAnim, active) { return prevAnim.direction === enums_1.Direction.None
                ? ({ animation: enums_1.Animation.None, direction: active ? enums_1.Direction.In : enums_1.Direction.Out })
                : {
                    animation: enums_1.Animation.Scale, direction: active ? enums_1.Direction.In : enums_1.Direction.Out
                }; }, ({ animation: enums_1.Animation.None, direction: enums_1.Direction.None }));
            var animatedContent = transition_1.Transition.run({ DOM: sources.DOM, target$: modal$, transition$: transition$ }, scope === null ? "transition" : scope + "_transition");
            /*** Activate dimmer ***/
            var dimmerContent$ = animatedContent.DOM.map(function (x) { return [x]; });
            var dimmer = dimmer_1.Dimmer.run({
                DOM: sources.DOM,
                props$: props$.map(function (x) { return ({ inverted: x.inverted }); }),
                content$: dimmerContent$,
                args: { target$: target$, on$: on$ }
            }, scope);
            var dimmerclick$ = dimmer.events("mousedown")
                .filter(function (evt) { return evt.srcElement === evt.currentTarget; })
                .mapTo(false);
            dimmerclick$proxy.imitate(dimmerclick$);
            return {
                DOM: dimmer.DOM,
                events: function (type) { return xstream_1.default.merge(sources.DOM.select(".modal").events(type), dimmer.events(type), closeIcon.events(type)); }
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Modal.run = run;
})(Modal = exports.Modal || (exports.Modal = {}));


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var xstream_1 = __webpack_require__(0);
var isolate_1 = __webpack_require__(8);
var debounce_1 = __webpack_require__(59);
var dropRepeats_1 = __webpack_require__(37);
var delay_1 = __webpack_require__(36);
var Tether = __webpack_require__(146);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var transition_1 = __webpack_require__(12);
var utils_1 = __webpack_require__(2);
var Popup;
(function (Popup) {
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        function main(sources) {
            if (!(sources.args && sources.args.target$)) {
                throw ("Popups must be attached to an element");
            }
            var props$ = sources.props$ ? sources.props$ : xstream_1.default.of({ attachment: Attachment.BottomLeft });
            var content$ = sources.content$ ? sources.content$.map(function (c) { return types_1.isDOMContent(c) ? { main: c } : c; }) : xstream_1.default.of({ main: [] });
            var on$ = sources.args.on$ ? sources.args.on$ : xstream_1.default.of(true);
            var timeout = sources.args.timeout === void 0 ? 1000 : sources.args.timeout;
            var evt = function (type) { return sources.DOM.select(".popup").events(type); };
            var vTree$ = xstream_1.default.combine(props$, content$, sources.args.target$).map(function (_a) {
                var props = _a[0], content = _a[1], target = _a[2];
                return popup(props, content, target);
            });
            var mouseenter$proxy = xstream_1.default.create();
            var mouseleave$proxy = xstream_1.default.create();
            var mouserInteract$ = xstream_1.default.merge(mouseleave$proxy, mouseenter$proxy)
                .map(function (evt) { return evt.type === "mouseenter" ? enums_1.Direction.In : enums_1.Direction.Out; })
                .compose(debounce_1.default(200))
                .filter(function (dir) { return dir === enums_1.Direction.Out; });
            var active$ = on$.map(function (active) { return active ? enums_1.Direction.In : enums_1.Direction.Out; }).drop(1);
            var timer$ = active$.map(function (dir) { return dir === enums_1.Direction.Out ? xstream_1.default.never()
                : timeout === null ? xstream_1.default.never() : xstream_1.default.of(enums_1.Direction.Out).compose(delay_1.default(timeout)).endWhen(mouseenter$proxy); }).flatten();
            var transition$ = xstream_1.default.merge(active$, mouserInteract$, timer$)
                .map(function (dir) { return ({
                animation: enums_1.Animation.Fade,
                direction: dir
            }); })
                .compose(dropRepeats_1.default(function (a, b) { return a.direction === b.direction
                && a.animation === b.animation; }))
                .startWith({ animation: enums_1.Animation.None, direction: enums_1.Direction.Out });
            var animatedPopup = transition_1.Transition.run({ DOM: sources.DOM, target$: vTree$, transition$: transition$ }, scope);
            mouseenter$proxy.imitate(animatedPopup.events("mouseenter"));
            mouseleave$proxy.imitate(animatedPopup.events("mouseleave"));
            return {
                DOM: animatedPopup.DOM,
                events: function (type) { return xstream_1.default.merge(evt(type), animatedPopup.events(type)); }
            };
        }
        if (scope === null) {
            return main(sources);
        }
        var isolatedMain = isolate_1.default(main, scope);
        return isolatedMain(sources);
    }
    Popup.run = run;
    function popup(props, content, target) {
        return dom_1.div({
            props: { className: getClassname(props) }, hook: {
                insert: function (vnode) {
                    new Tether({
                        element: vnode.elm,
                        target: target.hasOwnProperty("elm") ? target["elm"] : target,
                        attachment: Attachment.ToOppositeTether(props.attachment),
                        targetAttachment: Attachment.ToTether(props.attachment)
                    });
                }
            }
        }, [].concat(content.header ? dom_1.div({ props: { className: "header" } }, content.header) : [], content.main));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.wide) {
            className += " wide";
        }
        if (props.veryWide) {
            className += " very wide";
        }
        if (props.flowing) {
            className += " flowing";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += Attachment.ToClassname(props.attachment) + " popup";
        return className;
    }
    var Attachment;
    (function (Attachment) {
        Attachment[Attachment["TopLeft"] = 0] = "TopLeft";
        Attachment[Attachment["TopMiddle"] = 1] = "TopMiddle";
        Attachment[Attachment["TopRight"] = 2] = "TopRight";
        Attachment[Attachment["LeftCenter"] = 3] = "LeftCenter";
        Attachment[Attachment["RightCenter"] = 4] = "RightCenter";
        Attachment[Attachment["BottomLeft"] = 5] = "BottomLeft";
        Attachment[Attachment["BottomMiddle"] = 6] = "BottomMiddle";
        Attachment[Attachment["BottomRight"] = 7] = "BottomRight";
        Attachment[Attachment["Center"] = 8] = "Center";
    })(Attachment = Popup.Attachment || (Popup.Attachment = {}));
    (function (Attachment) {
        function ToEnum(attachmentstring) {
            if (typeof (attachmentstring) === "number") {
                return attachmentstring;
            }
            return Attachment[attachmentstring.split(" ").map(utils_1.capitalize).join("")];
        }
        Attachment.ToEnum = ToEnum;
        function ToClassname(attachment) {
            attachment = Attachment.ToEnum(attachment);
            switch (attachment) {
                case Attachment.TopLeft: return " top left";
                case Attachment.TopMiddle: return " top center";
                case Attachment.TopRight: return " top right";
                case Attachment.LeftCenter: return " left center";
                case Attachment.RightCenter: return " right center";
                case Attachment.BottomLeft: return " bottom left";
                case Attachment.BottomMiddle: return " bottom center";
                case Attachment.BottomRight: return " bottom right";
                case Attachment.Center: return " center";
                default: return " bottom left";
            }
        }
        Attachment.ToClassname = ToClassname;
        function ToTether(attachment) {
            attachment = Attachment.ToEnum(attachment);
            switch (attachment) {
                case Attachment.TopLeft: return "top left";
                case Attachment.TopMiddle: return "top center";
                case Attachment.TopRight: return "top right";
                case Attachment.LeftCenter: return "left middle";
                case Attachment.RightCenter: return "right middle";
                case Attachment.BottomLeft: return "bottom left";
                case Attachment.BottomMiddle: return "bottom center";
                case Attachment.BottomRight: return "bottom right";
                case Attachment.Center: return "center";
                default: return "bottom left";
            }
        }
        Attachment.ToTether = ToTether;
        function ToOppositeTether(attachment) {
            attachment = Attachment.ToEnum(attachment);
            switch (attachment) {
                case Attachment.TopLeft: return "bottom right";
                case Attachment.TopMiddle: return "bottom center";
                case Attachment.TopRight: return "bottom left";
                case Attachment.LeftCenter: return "right middle";
                case Attachment.RightCenter: return "left middle";
                case Attachment.BottomLeft: return "top right";
                case Attachment.BottomMiddle: return "top center";
                case Attachment.BottomRight: return "top left";
                case Attachment.Center: return "center";
                default: return "bottom left";
            }
        }
        Attachment.ToOppositeTether = ToOppositeTether;
    })(Attachment = Popup.Attachment || (Popup.Attachment = {}));
})(Popup = exports.Popup || (exports.Popup = {}));


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Progress;
(function (Progress) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(progress, common_1.makeIsArgs(types_1.isDOMContent), types_1.isDOMContent, arg1, arg2);
    }
    Progress.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, progress, ".progress", scope);
    }
    Progress.run = run;
    function progress(args) {
        var props = args.props ? args.props : { progress: 0 };
        var content = args.content ? types_1.isDOMContent(args.content) ? args.content : args.content.main : [];
        return dom_1.div({ props: { className: getClassname(props) } }, [
            dom_1.div({ props: { className: "bar" }, style: { width: props.progress + "%" } }, [
                dom_1.div({ props: { className: "progress" } }, [props.progress + "%"])
            ]),
            dom_1.div({ props: { className: "label" } }, content)
        ]);
    }
    function getClassname(props) {
        var className = "ui";
        if (props.active) {
            className += " active";
        }
        if (props.disabled) {
            className += " disabled";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.attachment) !== "undefined") {
            className += enums_1.Attachment.ToClassname(props.attachment);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        className += " progress";
        return className;
    }
})(Progress = exports.Progress || (exports.Progress = {}));


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = __webpack_require__(0);
var dropRepeats_1 = __webpack_require__(37);
var dom_1 = __webpack_require__(1);
var index_1 = __webpack_require__(56);
var Tabs;
(function (Tabs) {
    function run(sources) {
        var menuProps$ = sources.menuProps$ ? sources.menuProps$ : xstream_1.default.of({ tabular: true, attachment: index_1.Attachment.Top });
        var segmentProps$ = sources.segmentProps$ ? sources.segmentProps$ : xstream_1.default.of({ attachment: index_1.Attachment.Bottom });
        var menuValue$ = xstream_1.default.create();
        var activeTab$ = menuValue$.startWith(sources.active ? sources.active : sources.labels[0]).compose(dropRepeats_1.default()).remember();
        var menu = index_1.Menu.run({
            DOM: sources.DOM,
            props$: menuProps$,
            content$: activeTab$.map(function (activeTab) {
                return sources.labels.map(function (label) {
                    return ({
                        link: true,
                        active: activeTab === label,
                        main: label
                    });
                });
            })
        });
        menuValue$.imitate(menu.value$.map(function (x) { return x.body; }));
        var tabContent$ = activeTab$.map(function (tab) { return xstream_1.default.merge(xstream_1.default.of([dom_1.div()]), sources.content[sources.labels.indexOf(tab)]); }).flatten();
        var vTree$ = xstream_1.default.combine(menu.DOM, tabContent$, segmentProps$).map(function (_a) {
            var menu = _a[0], tabcontent = _a[1], segmentProps = _a[2];
            return dom_1.div([
                menu,
                index_1.Segment.render(segmentProps, tabcontent)
            ]);
        });
        return {
            DOM: vTree$,
            active$: activeTab$
        };
    }
    Tabs.run = run;
})(Tabs = exports.Tabs || (exports.Tabs = {}));


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isDOMContent(content) {
    if (!content) {
        return false;
    }
    if (typeof (content) === "string") {
        return true;
    }
    if (isVNode(content)) {
        return true;
    }
    if (content instanceof Array) {
        if (content.length === 0) {
            return true;
        }
        else {
            return isVNode(content[0]) || typeof (content[0]) === "string";
        }
        ;
    }
    return false;
}
exports.isDOMContent = isDOMContent;
function isVNode(obj) {
    return obj && obj.sel !== undefined;
}
exports.isVNode = isVNode;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(219));


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var enums_1 = __webpack_require__(4);
var common_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(2);
var Statistic;
(function (Statistic) {
    function render(arg1, arg2) {
        return common_1.renderPropsAndContent(statistic, isArgs, types_1.isDOMContent, arg1, arg2);
    }
    Statistic.render = render;
    function run(sources, scope) {
        if (scope === void 0) { scope = utils_1.getScope(); }
        return common_1.runPropsAndContent(sources, statistic, ".statistic", scope);
    }
    Statistic.run = run;
    function statistic(args) {
        var props = args.props ? args.props : {};
        var content = args.content ? types_1.isDOMContent(args.content) ? { main: args.content } : args.content : { main: [] };
        return dom_1.div({ props: { className: getClassname(props) } }, [].concat(dom_1.div({ props: { className: props.text ? "text value" : "value" } }, content.main), content.label ? dom_1.div({ props: { className: "label" } }, content.label) : []));
    }
    function getClassname(props) {
        var className = "ui";
        if (props.horizontal) {
            className += " horizontal";
        }
        if (props.text) {
            className += " text";
        }
        if (props.inverted) {
            className += " inverted";
        }
        if (typeof (props.color) !== "undefined") {
            className += enums_1.Color.ToClassname(props.color);
        }
        if (typeof (props.size) !== "undefined") {
            className += enums_1.Size.ToClassname(props.size);
        }
        if (typeof (props.float) !== "undefined") {
            className += enums_1.Float.ToClassname(props.float);
        }
        className += " statistic";
        return className;
    }
    function isArgs(obj) {
        return typeof (obj) !== "undefined" && (typeof (obj.props) !== "undefined" ||
            typeof (obj.content) !== "undefined" && (types_1.isDOMContent(obj.content) ||
                types_1.isDOMContent(obj.content.main) || types_1.isDOMContent(obj.content.label)));
    }
})(Statistic = exports.Statistic || (exports.Statistic = {}));


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var valueEqual = function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    if (!Array.isArray(b) || a.length !== b.length) return false;

    return a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
};

exports.default = valueEqual;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(61);
module.exports = __webpack_require__(60);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTQzNTRjZWFmNTAyMDkwZWI4MmEiLCJ3ZWJwYWNrOi8vLy4vfi94c3RyZWFtL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL3VpLnRzIiwid2VicGFjazovLy8uL3NyYy9lbnVtcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy90eXBlcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb21wb25lbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2lzb2xhdGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvdmFsaWQtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdHJhbnNpdGlvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9ydW4vbGliL2FkYXB0LmpzIiwid2VicGFjazovLy8uL34vcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS9oLmpzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9pY29uL2luZGV4LnRzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoLmZvcm93bi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL3Zub2RlLmpzIiwid2VicGFjazovLy8uL34vd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvZnJvbUV2ZW50LmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3RvcnkvbGliL2RyaXZlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L2Z1bmN0aW9uL2lzLWFyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvc3RyaW5nL2lzLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1pdGVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2guZXNjYXBlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9tZW51L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2RpbW1lci9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9+L3hzdHJlYW0vZXh0cmEvZGVsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi94c3RyZWFtL2V4dHJhL2Ryb3BSZXBlYXRzLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvSFRNTFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL01haW5ET01Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9TY29wZUNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9tYXRjaGVzU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L2FycmF5LyMvY2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mL2lzLWltcGxlbWVudGVkLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi9zaGltLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1pdGVyYXRvci92YWxpZC1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20tc2VsZWN0b3IvbGliL2NvbW1vbmpzL3NlbGVjdG9yUGFyc2VyLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20tdG8taHRtbC9lbGVtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL2h0bWxkb21hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS9pcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL3RodW5rLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9kcm9wZG93bi9jb21tb24udHMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3hzdHJlYW0vZXh0cmEvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvZG9jcy5sZXNzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL0JvZHlET01Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9Eb2N1bWVudERPTVNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL0VsZW1lbnRGaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9FdmVudERlbGVnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL0lzb2xhdGVNb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9WTm9kZVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9oeXBlcnNjcmlwdC1oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2RvbS9saWIvaXNvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL21ha2VET01Ecml2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9tYWtlSFRNTERyaXZlci5qcyIsIndlYnBhY2s6Ly8vLi9+L0BjeWNsZS9kb20vbGliL21vY2tET01Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvZG9tL2xpYi9tb2R1bGVzLmpzIiwid2VicGFjazovLy8uL34vQGN5Y2xlL2hpc3RvcnkvbGliL2NhcHR1cmVDbGlja3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvaGlzdG9yeS9saWIvY3JlYXRlSGlzdG9yeSQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvaGlzdG9yeS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9AY3ljbGUvcnVuL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2Jyb3dzZXItc3BsaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9kL2F1dG8tYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvYXJyYXkvIy9lLWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9tYXRoL3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L21hdGgvc2lnbi9pcy1pbXBsZW1lbnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvbWF0aC9zaWduL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L251bWJlci90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9udW1iZXIvdG8tcG9zLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9faXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9pcy1pbXBsZW1lbnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9zaGltLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvY29weS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2Zvci1lYWNoLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L29iamVjdC9rZXlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3Qva2V5cy9pcy1pbXBsZW1lbnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L2tleXMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L21hcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvb2JqZWN0L25vcm1hbGl6ZS1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL34vZXM1LWV4dC9vYmplY3QvcHJpbWl0aXZlLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaXMtaW1wbGVtZW50ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtaXRlcmF0b3IvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtaXRlcmF0b3IvZm9yLW9mLmpzIiwid2VicGFjazovLy8uL34vZXM2LWl0ZXJhdG9yL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1pdGVyYXRvci9pcy1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1pdGVyYXRvci9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtbWFwL2lzLWltcGxlbWVudGVkLmpzIiwid2VicGFjazovLy8uL34vZXM2LW1hcC9pcy1uYXRpdmUtaW1wbGVtZW50ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtbWFwL2xpYi9pdGVyYXRvci1raW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1tYXAvbGliL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL34vZXM2LW1hcC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1zeW1ib2wvaXMtaW1wbGVtZW50ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtc3ltYm9sL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2VzNi1zeW1ib2wvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9lczYtc3ltYm9sL3ZhbGlkYXRlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2V2ZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9oaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gua2ViYWJjYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoLnJlbW92ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC51bmlxL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3BhcnNlLXNlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS1zZWxlY3Rvci9saWIvY29tbW9uanMvY2xhc3NOYW1lRnJvbVZOb2RlLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20tdG8taHRtbC9pbml0LmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20tdG8taHRtbC9tb2R1bGVzL2F0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvY2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvcHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS9tb2R1bGVzL2F0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS9tb2R1bGVzL2NsYXNzLmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20vbW9kdWxlcy9kYXRhc2V0LmpzIiwid2VicGFjazovLy8uL34vc25hYmJkb20vbW9kdWxlcy9wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL21vZHVsZXMvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zbmFiYmRvbS9zbmFiYmRvbS5qcyIsIndlYnBhY2s6Ly8vLi9+L3NuYWJiZG9tL3Rvdm5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zd2l0Y2gtcGF0aC9saWIvZXMyMDE1L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vc3dpdGNoLXBhdGgvbGliL2VzMjAxNS91dGlsLmpzIiwid2VicGFjazovLy8uL34vc3ltYm9sLW9ic2VydmFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zeW1ib2wtb2JzZXJ2YWJsZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zeW1ib2wtb2JzZXJ2YWJsZS9saWIvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi90ZXRoZXIvZGlzdC9qcy90ZXRoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvYnJlYWRjcnVtYi50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL2NvbnRlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9maWVsZHN2YXJpYXRpb25zLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZmllbGR2YXJpYXRpb25zLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZm9ybXZhcmlhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL3N0YXRlcy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL3R5cGVzLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi9jb250ZW50LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL2RlZmluaXRpb24vcmVzcG9uc2l2ZVZhcmlhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9kZWZpbml0aW9uL3R5cGVzLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi92YXJpYXRpb25zLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9vdmVydmlldy9jb2x1bW5zLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9vdmVydmlldy9pbnRyb2R1Y3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9vdmVydmlldy9yZXNwb25zaXZlR3JpZHMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9vdmVydmlldy9yb3dzLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvdmFyeWluZ0dyaWRzLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lbnUvY29udGVudC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZW51L2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lbnUvc3RhdGVzLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lbnUvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS92YXJpYXRpb25zLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lc3NhZ2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVzc2FnZS9zdGF0ZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVzc2FnZS90eXBlcy50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL3ZhcmlhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvY29tcG9uZW50cy9leGFtcGxlLnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2luZGV4L2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3Mtc3JjL2xheW91dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9sYXlvdXQvc2lkZWJhci9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9kb2NzLXNyYy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jcy1zcmMvcm91dGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9icmVhZGNydW1iL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9mb3JtL2ZpZWxkLnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9mb3JtL2ZpZWxkcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sbGVjdGlvbnMvZm9ybS9mb3JtLnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9mb3JtL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9ncmlkL2NvbHVtbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sbGVjdGlvbnMvZ3JpZC9ncmlkLnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9ncmlkL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb2xsZWN0aW9ucy9ncmlkL3Jvdy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sbGVjdGlvbnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL21lc3NhZ2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbGxlY3Rpb25zL3RhYmxlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9idXR0b24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL2NvbnRhaW5lci9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvZGl2aWRlci9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvaGVhZGVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9pbWFnZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZWxlbWVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL2xhYmVsL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9saXN0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy9sb2FkZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL3NlZ21lbnQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VsZW1lbnRzL3N0ZXBzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbGVtZW50cy90ZXh0Ym94L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9lbnVtcy9pY29uVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9jaGVja2JveC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9kcm9wZG93bi9kcm9wZG93bi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9kcm9wZG93bi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9kcm9wZG93bi9zZWFyY2hkcm9wZG93bi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tb2RhbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9wb3B1cC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9wcm9ncmVzcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90YWJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy90eXBlcy9kb21jb250ZW50LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdGlzdGljL2luZGV4LnRzIiwid2VicGFjazovLy8uL34vdmFsdWUtZXF1YWwvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1EQUEyQyxjQUFjOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNULG9DQUFvQyxXQUFXLEVBQUU7QUFDakQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtCQUFrQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHdCQUF3QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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LE9BQU87QUFDdEI7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0EsaUM7Ozs7OztBQ1hBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwy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O0FDL0ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxpQzs7Ozs7OztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJ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RUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFOzs7Ozs7O0FDcERBOztBQUVBO0FBQ0EsMEg7Ozs7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx5QkFBeUIsRUFBRTtBQUNyRTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEM7Ozs7Ozs7QUNsQkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QyxDQUFDO1FBQ2xDLEVBQUUsQ0FBQyxDQUFDLGVBQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLENBQUMsU0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ25ELEVBQUUsQ0FBQyxDQUFDLGVBQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLENBQUMsU0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLGVBQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25CLENBQUM7UUFDRCxNQUFNLENBQUMsU0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxlQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztR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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLCtDOzs7Ozs7O0FDN0VBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUM7Ozs7Ozs7QUNuREE7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0EsMENBQTBDLGtCQUFrQixFQUFFO0FBQzlEO0FBQ0E7Ozs7Ozs7O0FDUkE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDUEE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7OztBQ05BOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLDBCQUEwQixrQ0FBa0MsRUFBRTtBQUM5RCxDQUFDOzs7Ozs7OztBQzdCRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUM3Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNkQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDZEE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRiwwQkFBMEIsbUNBQW1DLEVBQUU7QUFDL0QsQ0FBQzs7Ozs7Ozs7QUNwQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7OztBQy9CQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7Ozs7O0FDUkQ7O0FBRUE7QUFDQTs7Ozs7Ozs7QUNIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsMEJBQTBCLGdDQUFnQyxFQUFFO0FBQzVELENBQUM7QUFDRDtBQUNBOzs7Ozs7OztBQ3JDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLHlCQUF5Qix3Q0FBd0MsRUFBRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0Es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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQzs7Ozs7Ozs7QUN6S0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7QUFDQSw0RDs7Ozs7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLEVBQUU7QUFDakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FB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bEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEI7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsTUFBTTtBQUNqQixXQUFXLFNBQVM7QUFDcEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsYUFBYTtBQUN4QixXQUFXLEVBQUU7QUFDYixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0EsaUJBQWlCLFFBQVEsT0FBTyxTQUFTLEVBQUU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLGFBQWE7QUFDeEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSwwQkFBMEIsZ0JBQWdCLFNBQVMsR0FBRztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxNQUFNLE9BQU8sU0FBUyxFQUFFO0FBQ3hCLE1BQU0sT0FBTyxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7O0FDbnlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQzs7QUFFcEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsRUFBRTtBQUNiLFdBQVcsU0FBUztBQUNwQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxFQUFFO0FBQ2IsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLEVBQUU7QUFDYixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLEVBQUU7QUFDYixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLEVBQUU7QUFDYixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7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QTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDeEVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7Ozs7OztBQ1hBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNMQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOzs7Ozs7OztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTs7Ozs7Ozs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxTQUFTO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFD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OztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7O0FBRUEsK0JBQStCO0FBQy9CLCtCQUErQjs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTCxZQUFZO0FBQ1o7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7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LEVBQUUsQ0FBQyxTQUFHLENBQUM7Z0JBQ2hCLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRTtvQkFDckUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7b0JBQzlCLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtvQkFDcEIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2lCQUNwQixDQUFDO2dCQUNGLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRTtvQkFDdkUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7b0JBQzlCLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtvQkFDcEIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2lCQUNwQixDQUFDO2dCQUNGLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRTtvQkFDckUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7b0JBQzlCLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtvQkFDcEIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2lCQUNwQixDQUFDO2dCQUNGLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRTtvQkFDbEUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7b0JBQzlCLEVBQUUsSUFBSSxF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QyxDQUFDLENBQUM7WUFDdEIsU0FBUyxJQUFJLGVBQWUsQ0FBQztRQUMvQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFFBQVEsQ0FBQztRQUN4QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbEIsU0FBUyxJQUFJLFVBQVUsQ0FBQztRQUMxQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakIsU0FBUyxJQUFJLFNBQVMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckIsU0FBUyxJQUFJLGNBQWMsQ0FBQztRQUM5QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbEIsU0FBUyxJQUFJLFVBQVUsQ0FBQztRQUMxQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbkIsU0FBUyxJQUFJLFdBQVcsQ0FBQztRQUMzQixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEIsU0FBUyxJQUFJLFFB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QUcsS0FBSyxDQUFDLElBQUk7Y0FDcEIsY0FBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7Y0FDbEksV0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxSixNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVk7Y0FDckIsU0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7Y0FDL0UsU0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsc0JBQXNCLEtBQXFCO1FBQ3pDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztRQUNyQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN0QixTQUFTLElBQUksT0FBTyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFD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QUFDO2dCQUN6QixvQkFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksb0JBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUNsRSxDQUNGLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxFQXBFZ0IsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFvRXpCOzs7Ozs7OztBQzFFRDs7QUFFQTs7QUFFQSxvR0FBb0csbUJBQW1CLEVBQUUsbUJBQW1CLDhIQUE4SDs7QUFFMVE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUEsNkIiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2N5Y2xlLXNlbWFudGljLXVpL1wiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIyMSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOTQzNTRjZWFmNTAyMDkwZWI4MmEiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHN5bWJvbF9vYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwic3ltYm9sLW9ic2VydmFibGVcIik7XG52YXIgTk8gPSB7fTtcbmV4cG9ydHMuTk8gPSBOTztcbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmZ1bmN0aW9uIGNwKGEpIHtcbiAgICB2YXIgbCA9IGEubGVuZ3RoO1xuICAgIHZhciBiID0gQXJyYXkobCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyArK2kpXG4gICAgICAgIGJbaV0gPSBhW2ldO1xuICAgIHJldHVybiBiO1xufVxuZnVuY3Rpb24gYW5kKGYxLCBmMikge1xuICAgIHJldHVybiBmdW5jdGlvbiBhbmRGbih0KSB7XG4gICAgICAgIHJldHVybiBmMSh0KSAmJiBmMih0KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gX3RyeShjLCB0LCB1KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGMuZih0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdS5fZShlKTtcbiAgICAgICAgcmV0dXJuIE5PO1xuICAgIH1cbn1cbnZhciBOT19JTCA9IHtcbiAgICBfbjogbm9vcCxcbiAgICBfZTogbm9vcCxcbiAgICBfYzogbm9vcCxcbn07XG5leHBvcnRzLk5PX0lMID0gTk9fSUw7XG4vLyBtdXRhdGVzIHRoZSBpbnB1dFxuZnVuY3Rpb24gaW50ZXJuYWxpemVQcm9kdWNlcihwcm9kdWNlcikge1xuICAgIHByb2R1Y2VyLl9zdGFydCA9IGZ1bmN0aW9uIF9zdGFydChpbCkge1xuICAgICAgICBpbC5uZXh0ID0gaWwuX247XG4gICAgICAgIGlsLmVycm9yID0gaWwuX2U7XG4gICAgICAgIGlsLmNvbXBsZXRlID0gaWwuX2M7XG4gICAgICAgIHRoaXMuc3RhcnQoaWwpO1xuICAgIH07XG4gICAgcHJvZHVjZXIuX3N0b3AgPSBwcm9kdWNlci5zdG9wO1xufVxudmFyIFN0cmVhbVN1YiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RyZWFtU3ViKF9zdHJlYW0sIF9saXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9zdHJlYW0gPSBfc3RyZWFtO1xuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IF9saXN0ZW5lcjtcbiAgICB9XG4gICAgU3RyZWFtU3ViLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3RyZWFtLnJlbW92ZUxpc3RlbmVyKHRoaXMuX2xpc3RlbmVyKTtcbiAgICB9O1xuICAgIHJldHVybiBTdHJlYW1TdWI7XG59KCkpO1xudmFyIE9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZlcihfbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBfbGlzdGVuZXI7XG4gICAgfVxuICAgIE9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyLl9uKHZhbHVlKTtcbiAgICB9O1xuICAgIE9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIuX2UoZXJyKTtcbiAgICB9O1xuICAgIE9ic2VydmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZlcjtcbn0oKSk7XG52YXIgRnJvbU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZyb21PYnNlcnZhYmxlKG9ic2VydmFibGUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Zyb21PYnNlcnZhYmxlJztcbiAgICAgICAgdGhpcy5pbnMgPSBvYnNlcnZhYmxlO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBGcm9tT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zdWIgPSB0aGlzLmlucy5zdWJzY3JpYmUobmV3IE9ic2VydmVyKG91dCkpO1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKVxuICAgICAgICAgICAgdGhpcy5fc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBGcm9tT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdWIpXG4gICAgICAgICAgICB0aGlzLl9zdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBGcm9tT2JzZXJ2YWJsZTtcbn0oKSk7XG52YXIgTWVyZ2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlKGluc0Fycikge1xuICAgICAgICB0aGlzLnR5cGUgPSAnbWVyZ2UnO1xuICAgICAgICB0aGlzLmluc0FyciA9IGluc0FycjtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5hYyA9IDA7XG4gICAgfVxuICAgIE1lcmdlLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB2YXIgcyA9IHRoaXMuaW5zQXJyO1xuICAgICAgICB2YXIgTCA9IHMubGVuZ3RoO1xuICAgICAgICB0aGlzLmFjID0gTDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBMOyBpKyspXG4gICAgICAgICAgICBzW2ldLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBNZXJnZS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5pbnNBcnI7XG4gICAgICAgIHZhciBMID0gcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKVxuICAgICAgICAgICAgc1tpXS5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgTWVyZ2UucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgTWVyZ2UucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIE1lcmdlLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5hYyA8PSAwKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlO1xufSgpKTtcbnZhciBDb21iaW5lTGlzdGVuZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbWJpbmVMaXN0ZW5lcihpLCBvdXQsIHApIHtcbiAgICAgICAgdGhpcy5pID0gaTtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMucCA9IHA7XG4gICAgICAgIHAuaWxzLnB1c2godGhpcyk7XG4gICAgfVxuICAgIENvbWJpbmVMaXN0ZW5lci5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgcCA9IHRoaXMucCwgb3V0ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmIChvdXQgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAocC51cCh0LCB0aGlzLmkpKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHAudmFscztcbiAgICAgICAgICAgIHZhciBsID0gYS5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgYiA9IEFycmF5KGwpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyArK2kpXG4gICAgICAgICAgICAgICAgYltpXSA9IGFbaV07XG4gICAgICAgICAgICBvdXQuX24oYik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmVMaXN0ZW5lci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKG91dCA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIG91dC5fZShlcnIpO1xuICAgIH07XG4gICAgQ29tYmluZUxpc3RlbmVyLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLnA7XG4gICAgICAgIGlmIChwLm91dCA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICgtLXAuTmMgPT09IDApXG4gICAgICAgICAgICBwLm91dC5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmVMaXN0ZW5lcjtcbn0oKSk7XG52YXIgQ29tYmluZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tYmluZShpbnNBcnIpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2NvbWJpbmUnO1xuICAgICAgICB0aGlzLmluc0FyciA9IGluc0FycjtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5pbHMgPSBbXTtcbiAgICAgICAgdGhpcy5OYyA9IHRoaXMuTm4gPSAwO1xuICAgICAgICB0aGlzLnZhbHMgPSBbXTtcbiAgICB9XG4gICAgQ29tYmluZS5wcm90b3R5cGUudXAgPSBmdW5jdGlvbiAodCwgaSkge1xuICAgICAgICB2YXIgdiA9IHRoaXMudmFsc1tpXTtcbiAgICAgICAgdmFyIE5uID0gIXRoaXMuTm4gPyAwIDogdiA9PT0gTk8gPyAtLXRoaXMuTm4gOiB0aGlzLk5uO1xuICAgICAgICB0aGlzLnZhbHNbaV0gPSB0O1xuICAgICAgICByZXR1cm4gTm4gPT09IDA7XG4gICAgfTtcbiAgICBDb21iaW5lLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB2YXIgcyA9IHRoaXMuaW5zQXJyO1xuICAgICAgICB2YXIgbiA9IHRoaXMuTmMgPSB0aGlzLk5uID0gcy5sZW5ndGg7XG4gICAgICAgIHZhciB2YWxzID0gdGhpcy52YWxzID0gbmV3IEFycmF5KG4pO1xuICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgb3V0Ll9uKFtdKTtcbiAgICAgICAgICAgIG91dC5fYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWxzW2ldID0gTk87XG4gICAgICAgICAgICAgICAgc1tpXS5fYWRkKG5ldyBDb21iaW5lTGlzdGVuZXIoaSwgb3V0LCB0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbWJpbmUucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcyA9IHRoaXMuaW5zQXJyO1xuICAgICAgICB2YXIgbiA9IHMubGVuZ3RoO1xuICAgICAgICB2YXIgaWxzID0gdGhpcy5pbHM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKVxuICAgICAgICAgICAgc1tpXS5fcmVtb3ZlKGlsc1tpXSk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuaWxzID0gW107XG4gICAgICAgIHRoaXMudmFscyA9IFtdO1xuICAgIH07XG4gICAgcmV0dXJuIENvbWJpbmU7XG59KCkpO1xudmFyIEZyb21BcnJheSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJvbUFycmF5KGEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Zyb21BcnJheSc7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgfVxuICAgIEZyb21BcnJheS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuYTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhLmxlbmd0aDsgaSA8IG47IGkrKylcbiAgICAgICAgICAgIG91dC5fbihhW2ldKTtcbiAgICAgICAgb3V0Ll9jKCk7XG4gICAgfTtcbiAgICBGcm9tQXJyYXkucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgcmV0dXJuIEZyb21BcnJheTtcbn0oKSk7XG52YXIgRnJvbVByb21pc2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZyb21Qcm9taXNlKHApIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Zyb21Qcm9taXNlJztcbiAgICAgICAgdGhpcy5vbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnAgPSBwO1xuICAgIH1cbiAgICBGcm9tUHJvbWlzZS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB2YXIgcHJvZCA9IHRoaXM7XG4gICAgICAgIHRoaXMub24gPSB0cnVlO1xuICAgICAgICB0aGlzLnAudGhlbihmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgaWYgKHByb2Qub24pIHtcbiAgICAgICAgICAgICAgICBvdXQuX24odik7XG4gICAgICAgICAgICAgICAgb3V0Ll9jKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBvdXQuX2UoZSk7XG4gICAgICAgIH0pLnRoZW4obm9vcCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVByb21pc2UucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9uID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbVByb21pc2U7XG59KCkpO1xudmFyIFBlcmlvZGljID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQZXJpb2RpYyhwZXJpb2QpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3BlcmlvZGljJztcbiAgICAgICAgdGhpcy5wZXJpb2QgPSBwZXJpb2Q7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxJRCA9IC0xO1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgIH1cbiAgICBQZXJpb2RpYy5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGZ1bmN0aW9uIGludGVydmFsSGFuZGxlcigpIHsgb3V0Ll9uKHNlbGYuaSsrKTsgfVxuICAgICAgICB0aGlzLmludGVydmFsSUQgPSBzZXRJbnRlcnZhbChpbnRlcnZhbEhhbmRsZXIsIHRoaXMucGVyaW9kKTtcbiAgICB9O1xuICAgIFBlcmlvZGljLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJ2YWxJRCAhPT0gLTEpXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJRCk7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxJRCA9IC0xO1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIFBlcmlvZGljO1xufSgpKTtcbnZhciBEZWJ1ZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVidWcoaW5zLCBhcmcpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2RlYnVnJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMucyA9IG5vb3A7XG4gICAgICAgIHRoaXMubCA9ICcnO1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aGlzLmwgPSBhcmc7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aGlzLnMgPSBhcmc7XG4gICAgfVxuICAgIERlYnVnLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRGVidWcucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgRGVidWcucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgcyA9IHRoaXMucywgbCA9IHRoaXMubDtcbiAgICAgICAgaWYgKHMgIT09IG5vb3ApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcyh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdS5fZShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsKVxuICAgICAgICAgICAgY29uc29sZS5sb2cobCArICc6JywgdCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHQpO1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgRGVidWcucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIERlYnVnLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVidWc7XG59KCkpO1xudmFyIERyb3AgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyb3AobWF4LCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Ryb3AnO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICAgIHRoaXMuZHJvcHBlZCA9IDA7XG4gICAgfVxuICAgIERyb3AucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuZHJvcHBlZCA9IDA7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBEcm9wLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIERyb3AucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5kcm9wcGVkKysgPj0gdGhpcy5tYXgpXG4gICAgICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgRHJvcC5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRHJvcC5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIERyb3A7XG59KCkpO1xudmFyIEVuZFdoZW5MaXN0ZW5lciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRW5kV2hlbkxpc3RlbmVyKG91dCwgb3ApIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMub3AgPSBvcDtcbiAgICB9XG4gICAgRW5kV2hlbkxpc3RlbmVyLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcC5lbmQoKTtcbiAgICB9O1xuICAgIEVuZFdoZW5MaXN0ZW5lci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMub3V0Ll9lKGVycik7XG4gICAgfTtcbiAgICBFbmRXaGVuTGlzdGVuZXIucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9wLmVuZCgpO1xuICAgIH07XG4gICAgcmV0dXJuIEVuZFdoZW5MaXN0ZW5lcjtcbn0oKSk7XG52YXIgRW5kV2hlbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRW5kV2hlbihvLCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2VuZFdoZW4nO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5vID0gbztcbiAgICAgICAgdGhpcy5vaWwgPSBOT19JTDtcbiAgICB9XG4gICAgRW5kV2hlbi5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5vLl9hZGQodGhpcy5vaWwgPSBuZXcgRW5kV2hlbkxpc3RlbmVyKG91dCwgdGhpcykpO1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRW5kV2hlbi5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMuby5fcmVtb3ZlKHRoaXMub2lsKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5vaWwgPSBOT19JTDtcbiAgICB9O1xuICAgIEVuZFdoZW4ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICBFbmRXaGVuLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbih0KTtcbiAgICB9O1xuICAgIEVuZFdoZW4ucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIEVuZFdoZW4ucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVuZCgpO1xuICAgIH07XG4gICAgcmV0dXJuIEVuZFdoZW47XG59KCkpO1xudmFyIEZpbHRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmlsdGVyKHBhc3NlcywgaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmaWx0ZXInO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5mID0gcGFzc2VzO1xuICAgIH1cbiAgICBGaWx0ZXIucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBGaWx0ZXIucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgRmlsdGVyLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHIgPSBfdHJ5KHRoaXMsIHQsIHUpO1xuICAgICAgICBpZiAociA9PT0gTk8gfHwgIXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX24odCk7XG4gICAgfTtcbiAgICBGaWx0ZXIucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIEZpbHRlci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbHRlcjtcbn0oKSk7XG52YXIgRmxhdHRlbkxpc3RlbmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGbGF0dGVuTGlzdGVuZXIob3V0LCBvcCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5vcCA9IG9wO1xuICAgIH1cbiAgICBGbGF0dGVuTGlzdGVuZXIucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdGhpcy5vdXQuX24odCk7XG4gICAgfTtcbiAgICBGbGF0dGVuTGlzdGVuZXIucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLm91dC5fZShlcnIpO1xuICAgIH07XG4gICAgRmxhdHRlbkxpc3RlbmVyLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcC5pbm5lciA9IE5PO1xuICAgICAgICB0aGlzLm9wLmxlc3MoKTtcbiAgICB9O1xuICAgIHJldHVybiBGbGF0dGVuTGlzdGVuZXI7XG59KCkpO1xudmFyIEZsYXR0ZW4gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZsYXR0ZW4oaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmbGF0dGVuJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgIH1cbiAgICBGbGF0dGVuLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmlubmVyID0gTk87XG4gICAgICAgIHRoaXMuaWwgPSBOT19JTDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIEZsYXR0ZW4ucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5pbm5lciAhPT0gTk8pXG4gICAgICAgICAgICB0aGlzLmlubmVyLl9yZW1vdmUodGhpcy5pbCk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUubGVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMub3BlbiAmJiB0aGlzLmlubmVyID09PSBOTylcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIEZsYXR0ZW4ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBpbm5lciA9IF9hLmlubmVyLCBpbCA9IF9hLmlsO1xuICAgICAgICBpZiAoaW5uZXIgIT09IE5PICYmIGlsICE9PSBOT19JTClcbiAgICAgICAgICAgIGlubmVyLl9yZW1vdmUoaWwpO1xuICAgICAgICAodGhpcy5pbm5lciA9IHMpLl9hZGQodGhpcy5pbCA9IG5ldyBGbGF0dGVuTGlzdGVuZXIodSwgdGhpcykpO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlc3MoKTtcbiAgICB9O1xuICAgIHJldHVybiBGbGF0dGVuO1xufSgpKTtcbnZhciBGb2xkID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGb2xkKGYsIHNlZWQsIGlucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnR5cGUgPSAnZm9sZCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmYgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gZihfdGhpcy5hY2MsIHQpOyB9O1xuICAgICAgICB0aGlzLmFjYyA9IHRoaXMuc2VlZCA9IHNlZWQ7XG4gICAgfVxuICAgIEZvbGQucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuYWNjID0gdGhpcy5zZWVkO1xuICAgICAgICBvdXQuX24odGhpcy5hY2MpO1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRm9sZC5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuYWNjID0gdGhpcy5zZWVkO1xuICAgIH07XG4gICAgRm9sZC5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciByID0gX3RyeSh0aGlzLCB0LCB1KTtcbiAgICAgICAgaWYgKHIgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9uKHRoaXMuYWNjID0gcik7XG4gICAgfTtcbiAgICBGb2xkLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBGb2xkLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRm9sZDtcbn0oKSk7XG52YXIgTGFzdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGFzdChpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2xhc3QnO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5oYXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52YWwgPSBOTztcbiAgICB9XG4gICAgTGFzdC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5oYXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIExhc3QucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLnZhbCA9IE5PO1xuICAgIH07XG4gICAgTGFzdC5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLmhhcyA9IHRydWU7XG4gICAgICAgIHRoaXMudmFsID0gdDtcbiAgICB9O1xuICAgIExhc3QucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIExhc3QucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLmhhcykge1xuICAgICAgICAgICAgdS5fbih0aGlzLnZhbCk7XG4gICAgICAgICAgICB1Ll9jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdS5fZShuZXcgRXJyb3IoJ2xhc3QoKSBmYWlsZWQgYmVjYXVzZSBpbnB1dCBzdHJlYW0gY29tcGxldGVkJykpO1xuICAgIH07XG4gICAgcmV0dXJuIExhc3Q7XG59KCkpO1xudmFyIE1hcEZsYXR0ZW5MaXN0ZW5lciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwRmxhdHRlbkxpc3RlbmVyKG91dCwgb3ApIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMub3AgPSBvcDtcbiAgICB9XG4gICAgTWFwRmxhdHRlbkxpc3RlbmVyLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHRoaXMub3V0Ll9uKHIpO1xuICAgIH07XG4gICAgTWFwRmxhdHRlbkxpc3RlbmVyLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5vdXQuX2UoZXJyKTtcbiAgICB9O1xuICAgIE1hcEZsYXR0ZW5MaXN0ZW5lci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3AuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5vcC5sZXNzKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFwRmxhdHRlbkxpc3RlbmVyO1xufSgpKTtcbnZhciBNYXBGbGF0dGVuID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBGbGF0dGVuKG1hcE9wKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IG1hcE9wLnR5cGUgKyBcIitmbGF0dGVuXCI7XG4gICAgICAgIHRoaXMuaW5zID0gbWFwT3AuaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLm1hcE9wID0gbWFwT3A7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgIH1cbiAgICBNYXBGbGF0dGVuLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmlubmVyID0gTk87XG4gICAgICAgIHRoaXMuaWwgPSBOT19JTDtcbiAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXBPcC5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIE1hcEZsYXR0ZW4ucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1hcE9wLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5pbm5lciAhPT0gTk8pXG4gICAgICAgICAgICB0aGlzLmlubmVyLl9yZW1vdmUodGhpcy5pbCk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgIH07XG4gICAgTWFwRmxhdHRlbi5wcm90b3R5cGUubGVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wZW4gJiYgdGhpcy5pbm5lciA9PT0gTk8pIHtcbiAgICAgICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdS5fYygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNYXBGbGF0dGVuLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaW5uZXIgPSBfYS5pbm5lciwgaWwgPSBfYS5pbDtcbiAgICAgICAgdmFyIHMgPSBfdHJ5KHRoaXMubWFwT3AsIHYsIHUpO1xuICAgICAgICBpZiAocyA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpbm5lciAhPT0gTk8gJiYgaWwgIT09IE5PX0lMKVxuICAgICAgICAgICAgaW5uZXIuX3JlbW92ZShpbCk7XG4gICAgICAgICh0aGlzLmlubmVyID0gcykuX2FkZCh0aGlzLmlsID0gbmV3IE1hcEZsYXR0ZW5MaXN0ZW5lcih1LCB0aGlzKSk7XG4gICAgfTtcbiAgICBNYXBGbGF0dGVuLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBNYXBGbGF0dGVuLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVzcygpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcEZsYXR0ZW47XG59KCkpO1xudmFyIE1hcE9wID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBPcChwcm9qZWN0LCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ21hcCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmYgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBNYXBPcC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIE1hcE9wLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIE1hcE9wLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHIgPSBfdHJ5KHRoaXMsIHQsIHUpO1xuICAgICAgICBpZiAociA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX24ocik7XG4gICAgfTtcbiAgICBNYXBPcC5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgTWFwT3AucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBPcDtcbn0oKSk7XG52YXIgRmlsdGVyTWFwRnVzaW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlsdGVyTWFwRnVzaW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbHRlck1hcEZ1c2lvbihwYXNzZXMsIHByb2plY3QsIGlucykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9qZWN0LCBpbnMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnR5cGUgPSAnZmlsdGVyK21hcCc7XG4gICAgICAgIF90aGlzLnBhc3NlcyA9IHBhc3NlcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGaWx0ZXJNYXBGdXNpb24ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnBhc3Nlcyh0KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgciA9IF90cnkodGhpcywgdCwgdSk7XG4gICAgICAgIGlmIChyID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbihyKTtcbiAgICB9O1xuICAgIHJldHVybiBGaWx0ZXJNYXBGdXNpb247XG59KE1hcE9wKSk7XG52YXIgUmVtZW1iZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbWVtYmVyKGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAncmVtZW1iZXInO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9XG4gICAgUmVtZW1iZXIucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQob3V0KTtcbiAgICB9O1xuICAgIFJlbWVtYmVyLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzLm91dCk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgfTtcbiAgICByZXR1cm4gUmVtZW1iZXI7XG59KCkpO1xudmFyIFJlcGxhY2VFcnJvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVwbGFjZUVycm9yKHJlcGxhY2VyLCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3JlcGxhY2VFcnJvcic7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmYgPSByZXBsYWNlcjtcbiAgICB9XG4gICAgUmVwbGFjZUVycm9yLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgUmVwbGFjZUVycm9yLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIFJlcGxhY2VFcnJvci5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX24odCk7XG4gICAgfTtcbiAgICBSZXBsYWNlRXJyb3IucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgKHRoaXMuaW5zID0gdGhpcy5mKGVycikpLl9hZGQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHUuX2UoZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlcGxhY2VFcnJvci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcGxhY2VFcnJvcjtcbn0oKSk7XG52YXIgU3RhcnRXaXRoID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGFydFdpdGgoaW5zLCB2YWwpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3N0YXJ0V2l0aCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLnZhbCA9IHZhbDtcbiAgICB9XG4gICAgU3RhcnRXaXRoLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLm91dC5fbih0aGlzLnZhbCk7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQob3V0KTtcbiAgICB9O1xuICAgIFN0YXJ0V2l0aC5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcy5vdXQpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgcmV0dXJuIFN0YXJ0V2l0aDtcbn0oKSk7XG52YXIgVGFrZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFrZShtYXgsIGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAndGFrZSc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLm1heCA9IG1heDtcbiAgICAgICAgdGhpcy50YWtlbiA9IDA7XG4gICAgfVxuICAgIFRha2UucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMudGFrZW4gPSAwO1xuICAgICAgICBpZiAodGhpcy5tYXggPD0gMClcbiAgICAgICAgICAgIG91dC5fYygpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgVGFrZS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgfTtcbiAgICBUYWtlLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIG0gPSArK3RoaXMudGFrZW47XG4gICAgICAgIGlmIChtIDwgdGhpcy5tYXgpXG4gICAgICAgICAgICB1Ll9uKHQpO1xuICAgICAgICBlbHNlIGlmIChtID09PSB0aGlzLm1heCkge1xuICAgICAgICAgICAgdS5fbih0KTtcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGFrZS5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgVGFrZS5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIFRha2U7XG59KCkpO1xudmFyIFN0cmVhbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RyZWFtKHByb2R1Y2VyKSB7XG4gICAgICAgIHRoaXMuX3Byb2QgPSBwcm9kdWNlciB8fCBOTztcbiAgICAgICAgdGhpcy5faWxzID0gW107XG4gICAgICAgIHRoaXMuX3N0b3BJRCA9IE5PO1xuICAgICAgICB0aGlzLl9kbCA9IE5PO1xuICAgICAgICB0aGlzLl9kID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3RhcmdldCA9IE5PO1xuICAgICAgICB0aGlzLl9lcnIgPSBOTztcbiAgICB9XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5faWxzO1xuICAgICAgICB2YXIgTCA9IGEubGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5fZClcbiAgICAgICAgICAgIHRoaXMuX2RsLl9uKHQpO1xuICAgICAgICBpZiAoTCA9PSAxKVxuICAgICAgICAgICAgYVswXS5fbih0KTtcbiAgICAgICAgZWxzZSBpZiAoTCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBiID0gY3AoYSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKylcbiAgICAgICAgICAgICAgICBiW2ldLl9uKHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5fZXJyICE9PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fZXJyID0gZXJyO1xuICAgICAgICB2YXIgYSA9IHRoaXMuX2lscztcbiAgICAgICAgdmFyIEwgPSBhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5feCgpO1xuICAgICAgICBpZiAodGhpcy5fZClcbiAgICAgICAgICAgIHRoaXMuX2RsLl9lKGVycik7XG4gICAgICAgIGlmIChMID09IDEpXG4gICAgICAgICAgICBhWzBdLl9lKGVycik7XG4gICAgICAgIGVsc2UgaWYgKEwgPT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYiA9IGNwKGEpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBMOyBpKyspXG4gICAgICAgICAgICAgICAgYltpXS5fZShlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZCAmJiBMID09IDApXG4gICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnI7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuX2lscztcbiAgICAgICAgdmFyIEwgPSBhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5feCgpO1xuICAgICAgICBpZiAodGhpcy5fZClcbiAgICAgICAgICAgIHRoaXMuX2RsLl9jKCk7XG4gICAgICAgIGlmIChMID09IDEpXG4gICAgICAgICAgICBhWzBdLl9jKCk7XG4gICAgICAgIGVsc2UgaWYgKEwgPT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYiA9IGNwKGEpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBMOyBpKyspXG4gICAgICAgICAgICAgICAgYltpXS5fYygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5faWxzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuX3Byb2QgIT09IE5PKVxuICAgICAgICAgICAgdGhpcy5fcHJvZC5fc3RvcCgpO1xuICAgICAgICB0aGlzLl9lcnIgPSBOTztcbiAgICAgICAgdGhpcy5faWxzID0gW107XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl9zdG9wTm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXQVJOSU5HOiBjb2RlIHRoYXQgY2FsbHMgdGhpcyBtZXRob2Qgc2hvdWxkXG4gICAgICAgIC8vIGZpcnN0IGNoZWNrIGlmIHRoaXMuX3Byb2QgaXMgdmFsaWQgKG5vdCBgTk9gKVxuICAgICAgICB0aGlzLl9wcm9kLl9zdG9wKCk7XG4gICAgICAgIHRoaXMuX2VyciA9IE5PO1xuICAgICAgICB0aGlzLl9zdG9wSUQgPSBOTztcbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuX2FkZCA9IGZ1bmN0aW9uIChpbCkge1xuICAgICAgICB2YXIgdGEgPSB0aGlzLl90YXJnZXQ7XG4gICAgICAgIGlmICh0YSAhPT0gTk8pXG4gICAgICAgICAgICByZXR1cm4gdGEuX2FkZChpbCk7XG4gICAgICAgIHZhciBhID0gdGhpcy5faWxzO1xuICAgICAgICBhLnB1c2goaWwpO1xuICAgICAgICBpZiAoYS5sZW5ndGggPiAxKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5fc3RvcElEICE9PSBOTykge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3N0b3BJRCk7XG4gICAgICAgICAgICB0aGlzLl9zdG9wSUQgPSBOTztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwID0gdGhpcy5fcHJvZDtcbiAgICAgICAgICAgIGlmIChwICE9PSBOTylcbiAgICAgICAgICAgICAgICBwLl9zdGFydCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fcmVtb3ZlID0gZnVuY3Rpb24gKGlsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB0YSA9IHRoaXMuX3RhcmdldDtcbiAgICAgICAgaWYgKHRhICE9PSBOTylcbiAgICAgICAgICAgIHJldHVybiB0YS5fcmVtb3ZlKGlsKTtcbiAgICAgICAgdmFyIGEgPSB0aGlzLl9pbHM7XG4gICAgICAgIHZhciBpID0gYS5pbmRleE9mKGlsKTtcbiAgICAgICAgaWYgKGkgPiAtMSkge1xuICAgICAgICAgICAgYS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJvZCAhPT0gTk8gJiYgYS5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VyciA9IE5PO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3N0b3BOb3coKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BydW5lQ3ljbGVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIElmIGFsbCBwYXRocyBzdGVtbWluZyBmcm9tIGB0aGlzYCBzdHJlYW0gZXZlbnR1YWxseSBlbmQgYXQgYHRoaXNgXG4gICAgLy8gc3RyZWFtLCB0aGVuIHdlIHJlbW92ZSB0aGUgc2luZ2xlIGxpc3RlbmVyIG9mIGB0aGlzYCBzdHJlYW0sIHRvXG4gICAgLy8gZm9yY2UgaXQgdG8gZW5kIGl0cyBleGVjdXRpb24gYW5kIGRpc3Bvc2UgcmVzb3VyY2VzLiBUaGlzIG1ldGhvZFxuICAgIC8vIGFzc3VtZXMgYXMgYSBwcmVjb25kaXRpb24gdGhhdCB0aGlzLl9pbHMgaGFzIGp1c3Qgb25lIGxpc3RlbmVyLlxuICAgIFN0cmVhbS5wcm90b3R5cGUuX3BydW5lQ3ljbGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5faGFzTm9TaW5rcyh0aGlzLCBbXSkpXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmUodGhpcy5faWxzWzBdKTtcbiAgICB9O1xuICAgIC8vIENoZWNrcyB3aGV0aGVyICp0aGVyZSBpcyBubyogcGF0aCBzdGFydGluZyBmcm9tIGB4YCB0aGF0IGxlYWRzIHRvIGFuIGVuZFxuICAgIC8vIGxpc3RlbmVyIChzaW5rKSBpbiB0aGUgc3RyZWFtIGdyYXBoLCBmb2xsb3dpbmcgZWRnZXMgQS0+QiB3aGVyZSBCIGlzIGFcbiAgICAvLyBsaXN0ZW5lciBvZiBBLiBUaGlzIG1lYW5zIHRoZXNlIHBhdGhzIGNvbnN0aXR1dGUgYSBjeWNsZSBzb21laG93LiBJcyBnaXZlblxuICAgIC8vIGEgdHJhY2Ugb2YgYWxsIHZpc2l0ZWQgbm9kZXMgc28gZmFyLlxuICAgIFN0cmVhbS5wcm90b3R5cGUuX2hhc05vU2lua3MgPSBmdW5jdGlvbiAoeCwgdHJhY2UpIHtcbiAgICAgICAgaWYgKHRyYWNlLmluZGV4T2YoeCkgIT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2UgaWYgKHgub3V0ID09PSB0aGlzKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2UgaWYgKHgub3V0ICYmIHgub3V0ICE9PSBOTylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNOb1NpbmtzKHgub3V0LCB0cmFjZS5jb25jYXQoeCkpO1xuICAgICAgICBlbHNlIGlmICh4Ll9pbHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBOID0geC5faWxzLmxlbmd0aDsgaSA8IE47IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2hhc05vU2lua3MoeC5faWxzW2ldLCB0cmFjZS5jb25jYXQoeCkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLmN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgTWVtb3J5U3RyZWFtID8gTWVtb3J5U3RyZWFtIDogU3RyZWFtO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIExpc3RlbmVyIHRvIHRoZSBTdHJlYW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xpc3RlbmVyfSBsaXN0ZW5lclxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIuX24gPSBsaXN0ZW5lci5uZXh0IHx8IG5vb3A7XG4gICAgICAgIGxpc3RlbmVyLl9lID0gbGlzdGVuZXIuZXJyb3IgfHwgbm9vcDtcbiAgICAgICAgbGlzdGVuZXIuX2MgPSBsaXN0ZW5lci5jb21wbGV0ZSB8fCBub29wO1xuICAgICAgICB0aGlzLl9hZGQobGlzdGVuZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIExpc3RlbmVyIGZyb20gdGhlIFN0cmVhbSwgYXNzdW1pbmcgdGhlIExpc3RlbmVyIHdhcyBhZGRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TGlzdGVuZXI8VD59IGxpc3RlbmVyXG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9yZW1vdmUobGlzdGVuZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIExpc3RlbmVyIHRvIHRoZSBTdHJlYW0gcmV0dXJuaW5nIGEgU3Vic2NyaXB0aW9uIHRvIHJlbW92ZSB0aGF0XG4gICAgICogbGlzdGVuZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xpc3RlbmVyfSBsaXN0ZW5lclxuICAgICAqIEByZXR1cm5zIHtTdWJzY3JpcHRpb259XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtU3ViKHRoaXMsIGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBpbnRlcm9wIGJldHdlZW4gbW9zdC5qcyBhbmQgUnhKUyA1XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGVbc3ltYm9sX29ic2VydmFibGVfMS5kZWZhdWx0XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFN0cmVhbSBnaXZlbiBhIFByb2R1Y2VyLlxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSB7UHJvZHVjZXJ9IHByb2R1Y2VyIEFuIG9wdGlvbmFsIFByb2R1Y2VyIHRoYXQgZGljdGF0ZXMgaG93IHRvXG4gICAgICogc3RhcnQsIGdlbmVyYXRlIGV2ZW50cywgYW5kIHN0b3AgdGhlIFN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uIChwcm9kdWNlcikge1xuICAgICAgICBpZiAocHJvZHVjZXIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvZHVjZXIuc3RhcnQgIT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICB8fCB0eXBlb2YgcHJvZHVjZXIuc3RvcCAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2R1Y2VyIHJlcXVpcmVzIGJvdGggc3RhcnQgYW5kIHN0b3AgZnVuY3Rpb25zJyk7XG4gICAgICAgICAgICBpbnRlcm5hbGl6ZVByb2R1Y2VyKHByb2R1Y2VyKTsgLy8gbXV0YXRlcyB0aGUgaW5wdXRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShwcm9kdWNlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE1lbW9yeVN0cmVhbSBnaXZlbiBhIFByb2R1Y2VyLlxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSB7UHJvZHVjZXJ9IHByb2R1Y2VyIEFuIG9wdGlvbmFsIFByb2R1Y2VyIHRoYXQgZGljdGF0ZXMgaG93IHRvXG4gICAgICogc3RhcnQsIGdlbmVyYXRlIGV2ZW50cywgYW5kIHN0b3AgdGhlIFN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtNZW1vcnlTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLmNyZWF0ZVdpdGhNZW1vcnkgPSBmdW5jdGlvbiAocHJvZHVjZXIpIHtcbiAgICAgICAgaWYgKHByb2R1Y2VyKVxuICAgICAgICAgICAgaW50ZXJuYWxpemVQcm9kdWNlcihwcm9kdWNlcik7IC8vIG11dGF0ZXMgdGhlIGlucHV0XG4gICAgICAgIHJldHVybiBuZXcgTWVtb3J5U3RyZWFtKHByb2R1Y2VyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdHJlYW0gdGhhdCBkb2VzIG5vdGhpbmcgd2hlbiBzdGFydGVkLiBJdCBuZXZlciBlbWl0cyBhbnkgZXZlbnQuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAgICAgICAgICBuZXZlclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5uZXZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oeyBfc3RhcnQ6IG5vb3AsIF9zdG9wOiBub29wIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFN0cmVhbSB0aGF0IGltbWVkaWF0ZWx5IGVtaXRzIHRoZSBcImNvbXBsZXRlXCIgbm90aWZpY2F0aW9uIHdoZW5cbiAgICAgKiBzdGFydGVkLCBhbmQgdGhhdCdzIGl0LlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogZW1wdHlcbiAgICAgKiAtfFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKHtcbiAgICAgICAgICAgIF9zdGFydDogZnVuY3Rpb24gKGlsKSB7IGlsLl9jKCk7IH0sXG4gICAgICAgICAgICBfc3RvcDogbm9vcCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU3RyZWFtIHRoYXQgaW1tZWRpYXRlbHkgZW1pdHMgYW4gXCJlcnJvclwiIG5vdGlmaWNhdGlvbiB3aXRoIHRoZVxuICAgICAqIHZhbHVlIHlvdSBwYXNzZWQgYXMgdGhlIGBlcnJvcmAgYXJndW1lbnQgd2hlbiB0aGUgc3RyZWFtIHN0YXJ0cywgYW5kIHRoYXQnc1xuICAgICAqIGl0LlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogdGhyb3coWClcbiAgICAgKiAtWFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSBlcnJvciBUaGUgZXJyb3IgZXZlbnQgdG8gZW1pdCBvbiB0aGUgY3JlYXRlZCBzdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS50aHJvdyA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbSh7XG4gICAgICAgICAgICBfc3RhcnQ6IGZ1bmN0aW9uIChpbCkgeyBpbC5fZShlcnJvcik7IH0sXG4gICAgICAgICAgICBfc3RvcDogbm9vcCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RyZWFtIGZyb20gYW4gQXJyYXksIFByb21pc2UsIG9yIGFuIE9ic2VydmFibGUuXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtBcnJheXxQcm9taXNlfE9ic2VydmFibGV9IGlucHV0IFRoZSBpbnB1dCB0byBtYWtlIGEgc3RyZWFtIGZyb20uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5mcm9tID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXRbc3ltYm9sX29ic2VydmFibGVfMS5kZWZhdWx0XSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHJldHVybiBTdHJlYW0uZnJvbU9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQudGhlbiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHJldHVybiBTdHJlYW0uZnJvbVByb21pc2UoaW5wdXQpO1xuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSlcbiAgICAgICAgICAgIHJldHVybiBTdHJlYW0uZnJvbUFycmF5KGlucHV0KTtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlR5cGUgb2YgaW5wdXQgdG8gZnJvbSgpIG11c3QgYmUgYW4gQXJyYXksIFByb21pc2UsIG9yIE9ic2VydmFibGVcIik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU3RyZWFtIHRoYXQgaW1tZWRpYXRlbHkgZW1pdHMgdGhlIGFyZ3VtZW50cyB0aGF0IHlvdSBnaXZlIHRvXG4gICAgICogKm9mKiwgdGhlbiBjb21wbGV0ZXMuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiBvZigxLDIsMylcbiAgICAgKiAxMjN8XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIGEgVGhlIGZpcnN0IHZhbHVlIHlvdSB3YW50IHRvIGVtaXQgYXMgYW4gZXZlbnQgb24gdGhlIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0gYiBUaGUgc2Vjb25kIHZhbHVlIHlvdSB3YW50IHRvIGVtaXQgYXMgYW4gZXZlbnQgb24gdGhlIHN0cmVhbS4gT25lXG4gICAgICogb3IgbW9yZSBvZiB0aGVzZSB2YWx1ZXMgbWF5IGJlIGdpdmVuIGFzIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLm9mID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGl0ZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tQXJyYXkoaXRlbXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gYXJyYXkgdG8gYSBzdHJlYW0uIFRoZSByZXR1cm5lZCBzdHJlYW0gd2lsbCBlbWl0IHN5bmNocm9ub3VzbHlcbiAgICAgKiBhbGwgdGhlIGl0ZW1zIGluIHRoZSBhcnJheSwgYW5kIHRoZW4gY29tcGxldGUuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiBmcm9tQXJyYXkoWzEsMiwzXSlcbiAgICAgKiAxMjN8XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGJlIGNvbnZlcnRlZCBhcyBhIHN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLmZyb21BcnJheSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgRnJvbUFycmF5KGFycmF5KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHByb21pc2UgdG8gYSBzdHJlYW0uIFRoZSByZXR1cm5lZCBzdHJlYW0gd2lsbCBlbWl0IHRoZSByZXNvbHZlZFxuICAgICAqIHZhbHVlIG9mIHRoZSBwcm9taXNlLCBhbmQgdGhlbiBjb21wbGV0ZS4gSG93ZXZlciwgaWYgdGhlIHByb21pc2UgaXNcbiAgICAgKiByZWplY3RlZCwgdGhlIHN0cmVhbSB3aWxsIGVtaXQgdGhlIGNvcnJlc3BvbmRpbmcgZXJyb3IuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiBmcm9tUHJvbWlzZSggLS0tLTQyIClcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLTQyfFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gcHJvbWlzZSBUaGUgcHJvbWlzZSB0byBiZSBjb252ZXJ0ZWQgYXMgYSBzdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5mcm9tUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGcm9tUHJvbWlzZShwcm9taXNlKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbiBPYnNlcnZhYmxlIGludG8gYSBTdHJlYW0uXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHthbnl9IG9ic2VydmFibGUgVGhlIG9ic2VydmFibGUgdG8gYmUgY29udmVydGVkIGFzIGEgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uZnJvbU9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JzKSB7XG4gICAgICAgIGlmIChvYnMuZW5kV2hlbilcbiAgICAgICAgICAgIHJldHVybiBvYnM7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGcm9tT2JzZXJ2YWJsZShvYnMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdHJlYW0gdGhhdCBwZXJpb2RpY2FsbHkgZW1pdHMgaW5jcmVtZW50YWwgbnVtYmVycywgZXZlcnlcbiAgICAgKiBgcGVyaW9kYCBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAgICAgcGVyaW9kaWMoMTAwMClcbiAgICAgKiAtLS0wLS0tMS0tLTItLS0zLS0tNC0tLS4uLlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwZXJpb2QgVGhlIGludGVydmFsIGluIG1pbGxpc2Vjb25kcyB0byB1c2UgYXMgYSByYXRlIG9mXG4gICAgICogZW1pc3Npb24uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wZXJpb2RpYyA9IGZ1bmN0aW9uIChwZXJpb2QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IFBlcmlvZGljKHBlcmlvZCkpO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fbWFwID0gZnVuY3Rpb24gKHByb2plY3QpIHtcbiAgICAgICAgdmFyIHAgPSB0aGlzLl9wcm9kO1xuICAgICAgICB2YXIgY3RvciA9IHRoaXMuY3RvcigpO1xuICAgICAgICBpZiAocCBpbnN0YW5jZW9mIEZpbHRlcilcbiAgICAgICAgICAgIHJldHVybiBuZXcgY3RvcihuZXcgRmlsdGVyTWFwRnVzaW9uKHAuZiwgcHJvamVjdCwgcC5pbnMpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBjdG9yKG5ldyBNYXBPcChwcm9qZWN0LCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGVhY2ggZXZlbnQgZnJvbSB0aGUgaW5wdXQgU3RyZWFtIHRocm91Z2ggYSBgcHJvamVjdGAgZnVuY3Rpb24sXG4gICAgICogdG8gZ2V0IGEgU3RyZWFtIHRoYXQgZW1pdHMgdGhvc2UgdHJhbnNmb3JtZWQgZXZlbnRzLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tMy0tNS0tLS0tNy0tLS0tLVxuICAgICAqICAgIG1hcChpID0+IGkgKiAxMClcbiAgICAgKiAtLTEwLS0zMC01MC0tLS03MC0tLS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9qZWN0IEEgZnVuY3Rpb24gb2YgdHlwZSBgKHQ6IFQpID0+IFVgIHRoYXQgdGFrZXMgZXZlbnRcbiAgICAgKiBgdGAgb2YgdHlwZSBgVGAgZnJvbSB0aGUgaW5wdXQgU3RyZWFtIGFuZCBwcm9kdWNlcyBhbiBldmVudCBvZiB0eXBlIGBVYCwgdG9cbiAgICAgKiBiZSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgU3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChwcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAocHJvamVjdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJdCdzIGxpa2UgYG1hcGAsIGJ1dCB0cmFuc2Zvcm1zIGVhY2ggaW5wdXQgZXZlbnQgdG8gYWx3YXlzIHRoZSBzYW1lXG4gICAgICogY29uc3RhbnQgdmFsdWUgb24gdGhlIG91dHB1dCBTdHJlYW0uXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLTEtLS0zLS01LS0tLS03LS0tLS1cbiAgICAgKiAgICAgICBtYXBUbygxMClcbiAgICAgKiAtLTEwLS0xMC0xMC0tLS0xMC0tLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9qZWN0ZWRWYWx1ZSBBIHZhbHVlIHRvIGVtaXQgb24gdGhlIG91dHB1dCBTdHJlYW0gd2hlbmV2ZXIgdGhlXG4gICAgICogaW5wdXQgU3RyZWFtIGVtaXRzIGFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5tYXBUbyA9IGZ1bmN0aW9uIChwcm9qZWN0ZWRWYWx1ZSkge1xuICAgICAgICB2YXIgcyA9IHRoaXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb2plY3RlZFZhbHVlOyB9KTtcbiAgICAgICAgdmFyIG9wID0gcy5fcHJvZDtcbiAgICAgICAgb3AudHlwZSA9IG9wLnR5cGUucmVwbGFjZSgnbWFwJywgJ21hcFRvJyk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT25seSBhbGxvd3MgZXZlbnRzIHRoYXQgcGFzcyB0aGUgdGVzdCBnaXZlbiBieSB0aGUgYHBhc3Nlc2AgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBFYWNoIGV2ZW50IGZyb20gdGhlIGlucHV0IHN0cmVhbSBpcyBnaXZlbiB0byB0aGUgYHBhc3Nlc2AgZnVuY3Rpb24uIElmIHRoZVxuICAgICAqIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgLCB0aGUgZXZlbnQgaXMgZm9yd2FyZGVkIHRvIHRoZSBvdXRwdXQgc3RyZWFtLFxuICAgICAqIG90aGVyd2lzZSBpdCBpcyBpZ25vcmVkIGFuZCBub3QgZm9yd2FyZGVkLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tMi0tMy0tLS0tNC0tLS0tNS0tLTYtLTctOC0tXG4gICAgICogICAgIGZpbHRlcihpID0+IGkgJSAyID09PSAwKVxuICAgICAqIC0tLS0tLTItLS0tLS0tLTQtLS0tLS0tLS02LS0tLTgtLVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcGFzc2VzIEEgZnVuY3Rpb24gb2YgdHlwZSBgKHQ6IFQpICs+IGJvb2xlYW5gIHRoYXQgdGFrZXNcbiAgICAgKiBhbiBldmVudCBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gYW5kIGNoZWNrcyBpZiBpdCBwYXNzZXMsIGJ5IHJldHVybmluZyBhXG4gICAgICogYm9vbGVhbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAocGFzc2VzKSB7XG4gICAgICAgIHZhciBwID0gdGhpcy5fcHJvZDtcbiAgICAgICAgaWYgKHAgaW5zdGFuY2VvZiBGaWx0ZXIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgRmlsdGVyKGFuZChwLmYsIHBhc3NlcyksIHAuaW5zKSk7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGaWx0ZXIocGFzc2VzLCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMZXRzIHRoZSBmaXJzdCBgYW1vdW50YCBtYW55IGV2ZW50cyBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gcGFzcyB0byB0aGVcbiAgICAgKiBvdXRwdXQgc3RyZWFtLCB0aGVuIG1ha2VzIHRoZSBvdXRwdXQgc3RyZWFtIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS1hLS0tYi0tYy0tLS1kLS0tZS0tXG4gICAgICogICAgdGFrZSgzKVxuICAgICAqIC0tYS0tLWItLWN8XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IEhvdyBtYW55IGV2ZW50cyB0byBhbGxvdyBmcm9tIHRoZSBpbnB1dCBzdHJlYW1cbiAgICAgKiBiZWZvcmUgY29tcGxldGluZyB0aGUgb3V0cHV0IHN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS50YWtlID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICByZXR1cm4gbmV3ICh0aGlzLmN0b3IoKSkobmV3IFRha2UoYW1vdW50LCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJZ25vcmVzIHRoZSBmaXJzdCBgYW1vdW50YCBtYW55IGV2ZW50cyBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIGFuZCB0aGVuXG4gICAgICogYWZ0ZXIgdGhhdCBzdGFydHMgZm9yd2FyZGluZyBldmVudHMgZnJvbSB0aGUgaW5wdXQgc3RyZWFtIHRvIHRoZSBvdXRwdXRcbiAgICAgKiBzdHJlYW0uXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLWEtLS1iLS1jLS0tLWQtLS1lLS1cbiAgICAgKiAgICAgICBkcm9wKDMpXG4gICAgICogLS0tLS0tLS0tLS0tLS1kLS0tZS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IEhvdyBtYW55IGV2ZW50cyB0byBpZ25vcmUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtXG4gICAgICogYmVmb3JlIGZvcndhcmRpbmcgYWxsIGV2ZW50cyBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gdG8gdGhlIG91dHB1dCBzdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IERyb3AoYW1vdW50LCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBpbnB1dCBzdHJlYW0gY29tcGxldGVzLCB0aGUgb3V0cHV0IHN0cmVhbSB3aWxsIGVtaXQgdGhlIGxhc3QgZXZlbnRcbiAgICAgKiBlbWl0dGVkIGJ5IHRoZSBpbnB1dCBzdHJlYW0sIGFuZCB0aGVuIHdpbGwgYWxzbyBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tYS0tLWItLWMtLWQtLS0tfFxuICAgICAqICAgICAgIGxhc3QoKVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tZHxcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBMYXN0KHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByZXBlbmRzIHRoZSBnaXZlbiBgaW5pdGlhbGAgdmFsdWUgdG8gdGhlIHNlcXVlbmNlIG9mIGV2ZW50cyBlbWl0dGVkIGJ5IHRoZVxuICAgICAqIGlucHV0IHN0cmVhbS4gVGhlIHJldHVybmVkIHN0cmVhbSBpcyBhIE1lbW9yeVN0cmVhbSwgd2hpY2ggbWVhbnMgaXQgaXNcbiAgICAgKiBhbHJlYWR5IGByZW1lbWJlcigpYCdkLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0tMS0tLTItLS0tLTMtLS1cbiAgICAgKiAgIHN0YXJ0V2l0aCgwKVxuICAgICAqIDAtLTEtLS0yLS0tLS0zLS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5pdGlhbCBUaGUgdmFsdWUgb3IgZXZlbnQgdG8gcHJlcGVuZC5cbiAgICAgKiBAcmV0dXJuIHtNZW1vcnlTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5zdGFydFdpdGggPSBmdW5jdGlvbiAoaW5pdGlhbCkge1xuICAgICAgICByZXR1cm4gbmV3IE1lbW9yeVN0cmVhbShuZXcgU3RhcnRXaXRoKHRoaXMsIGluaXRpYWwpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZXMgYW5vdGhlciBzdHJlYW0gdG8gZGV0ZXJtaW5lIHdoZW4gdG8gY29tcGxldGUgdGhlIGN1cnJlbnQgc3RyZWFtLlxuICAgICAqXG4gICAgICogV2hlbiB0aGUgZ2l2ZW4gYG90aGVyYCBzdHJlYW0gZW1pdHMgYW4gZXZlbnQgb3IgY29tcGxldGVzLCB0aGUgb3V0cHV0XG4gICAgICogc3RyZWFtIHdpbGwgY29tcGxldGUuIEJlZm9yZSB0aGF0IGhhcHBlbnMsIHRoZSBvdXRwdXQgc3RyZWFtIHdpbGwgYmVoYXZlc1xuICAgICAqIGxpa2UgdGhlIGlucHV0IHN0cmVhbS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tLTEtLS0yLS0tLS0zLS00LS0tLTUtLS0tNi0tLVxuICAgICAqICAgZW5kV2hlbiggLS0tLS0tLS1hLS1iLS18IClcbiAgICAgKiAtLS0xLS0tMi0tLS0tMy0tNC0tfFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIFNvbWUgb3RoZXIgc3RyZWFtIHRoYXQgaXMgdXNlZCB0byBrbm93IHdoZW4gc2hvdWxkIHRoZSBvdXRwdXRcbiAgICAgKiBzdHJlYW0gb2YgdGhpcyBvcGVyYXRvciBjb21wbGV0ZS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5lbmRXaGVuID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgKHRoaXMuY3RvcigpKShuZXcgRW5kV2hlbihvdGhlciwgdGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogXCJGb2xkc1wiIHRoZSBzdHJlYW0gb250byBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBDb21iaW5lcyBldmVudHMgZnJvbSB0aGUgcGFzdCB0aHJvdWdob3V0XG4gICAgICogdGhlIGVudGlyZSBleGVjdXRpb24gb2YgdGhlIGlucHV0IHN0cmVhbSwgYWxsb3dpbmcgeW91IHRvIGFjY3VtdWxhdGUgdGhlbVxuICAgICAqIHRvZ2V0aGVyLiBJdCdzIGVzc2VudGlhbGx5IGxpa2UgYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgLiBUaGUgcmV0dXJuZWRcbiAgICAgKiBzdHJlYW0gaXMgYSBNZW1vcnlTdHJlYW0sIHdoaWNoIG1lYW5zIGl0IGlzIGFscmVhZHkgYHJlbWVtYmVyKClgJ2QuXG4gICAgICpcbiAgICAgKiBUaGUgb3V0cHV0IHN0cmVhbSBzdGFydHMgYnkgZW1pdHRpbmcgdGhlIGBzZWVkYCB3aGljaCB5b3UgZ2l2ZSBhcyBhcmd1bWVudC5cbiAgICAgKiBUaGVuLCB3aGVuIGFuIGV2ZW50IGhhcHBlbnMgb24gdGhlIGlucHV0IHN0cmVhbSwgaXQgaXMgY29tYmluZWQgd2l0aCB0aGF0XG4gICAgICogc2VlZCB2YWx1ZSB0aHJvdWdoIHRoZSBgYWNjdW11bGF0ZWAgZnVuY3Rpb24sIGFuZCB0aGUgb3V0cHV0IHZhbHVlIGlzXG4gICAgICogZW1pdHRlZCBvbiB0aGUgb3V0cHV0IHN0cmVhbS4gYGZvbGRgIHJlbWVtYmVycyB0aGF0IG91dHB1dCB2YWx1ZSBhcyBgYWNjYFxuICAgICAqIChcImFjY3VtdWxhdG9yXCIpLCBhbmQgdGhlbiB3aGVuIGEgbmV3IGlucHV0IGV2ZW50IGB0YCBoYXBwZW5zLCBgYWNjYCB3aWxsIGJlXG4gICAgICogY29tYmluZWQgd2l0aCB0aGF0IHRvIHByb2R1Y2UgdGhlIG5ldyBgYWNjYCBhbmQgc28gZm9ydGguXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLS0tLS0xLS0tLS0xLS0yLS0tLTEtLS0tMS0tLS0tLVxuICAgICAqICAgZm9sZCgoYWNjLCB4KSA9PiBhY2MgKyB4LCAzKVxuICAgICAqIDMtLS0tLTQtLS0tLTUtLTctLS0tOC0tLS05LS0tLS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhY2N1bXVsYXRlIEEgZnVuY3Rpb24gb2YgdHlwZSBgKGFjYzogUiwgdDogVCkgPT4gUmAgdGhhdFxuICAgICAqIHRha2VzIHRoZSBwcmV2aW91cyBhY2N1bXVsYXRlZCB2YWx1ZSBgYWNjYCBhbmQgdGhlIGluY29taW5nIGV2ZW50IGZyb20gdGhlXG4gICAgICogaW5wdXQgc3RyZWFtIGFuZCBwcm9kdWNlcyB0aGUgbmV3IGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSBzZWVkIFRoZSBpbml0aWFsIGFjY3VtdWxhdGVkIHZhbHVlLCBvZiB0eXBlIGBSYC5cbiAgICAgKiBAcmV0dXJuIHtNZW1vcnlTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5mb2xkID0gZnVuY3Rpb24gKGFjY3VtdWxhdGUsIHNlZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZW1vcnlTdHJlYW0obmV3IEZvbGQoYWNjdW11bGF0ZSwgc2VlZCwgdGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYW4gZXJyb3Igd2l0aCBhbm90aGVyIHN0cmVhbS5cbiAgICAgKlxuICAgICAqIFdoZW4gKGFuZCBpZikgYW4gZXJyb3IgaGFwcGVucyBvbiB0aGUgaW5wdXQgc3RyZWFtLCBpbnN0ZWFkIG9mIGZvcndhcmRpbmdcbiAgICAgKiB0aGF0IGVycm9yIHRvIHRoZSBvdXRwdXQgc3RyZWFtLCAqcmVwbGFjZUVycm9yKiB3aWxsIGNhbGwgdGhlIGByZXBsYWNlYFxuICAgICAqIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgdGhlIHN0cmVhbSB0aGF0IHRoZSBvdXRwdXQgc3RyZWFtIHdpbGwgcmVwbGljYXRlLlxuICAgICAqIEFuZCwgaW4gY2FzZSB0aGF0IG5ldyBzdHJlYW0gYWxzbyBlbWl0cyBhbiBlcnJvciwgYHJlcGxhY2VgIHdpbGwgYmUgY2FsbGVkXG4gICAgICogYWdhaW4gdG8gZ2V0IGFub3RoZXIgc3RyZWFtIHRvIHN0YXJ0IHJlcGxpY2F0aW5nLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tMi0tLS0tMy0tNC0tLS0tWFxuICAgICAqICAgcmVwbGFjZUVycm9yKCAoKSA9PiAtLTEwLS18IClcbiAgICAgKiAtLTEtLS0yLS0tLS0zLS00LS0tLS0tLS0xMC0tfFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVwbGFjZSBBIGZ1bmN0aW9uIG9mIHR5cGUgYChlcnIpID0+IFN0cmVhbWAgdGhhdCB0YWtlc1xuICAgICAqIHRoZSBlcnJvciB0aGF0IG9jY3VycmVkIG9uIHRoZSBpbnB1dCBzdHJlYW0gb3Igb24gdGhlIHByZXZpb3VzIHJlcGxhY2VtZW50XG4gICAgICogc3RyZWFtIGFuZCByZXR1cm5zIGEgbmV3IHN0cmVhbS4gVGhlIG91dHB1dCBzdHJlYW0gd2lsbCBiZWhhdmUgbGlrZSB0aGVcbiAgICAgKiBzdHJlYW0gdGhhdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMuXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUucmVwbGFjZUVycm9yID0gZnVuY3Rpb24gKHJlcGxhY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAodGhpcy5jdG9yKCkpKG5ldyBSZXBsYWNlRXJyb3IocmVwbGFjZSwgdGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYSBcInN0cmVhbSBvZiBzdHJlYW1zXCIsIGhhbmRsaW5nIG9ubHkgb25lIG5lc3RlZCBzdHJlYW0gYXQgYSB0aW1lXG4gICAgICogKG5vIGNvbmN1cnJlbmN5KS5cbiAgICAgKlxuICAgICAqIElmIHRoZSBpbnB1dCBzdHJlYW0gaXMgYSBzdHJlYW0gdGhhdCBlbWl0cyBzdHJlYW1zLCB0aGVuIHRoaXMgb3BlcmF0b3Igd2lsbFxuICAgICAqIHJldHVybiBhbiBvdXRwdXQgc3RyZWFtIHdoaWNoIGlzIGEgZmxhdCBzdHJlYW06IGVtaXRzIHJlZ3VsYXIgZXZlbnRzLiBUaGVcbiAgICAgKiBmbGF0dGVuaW5nIGhhcHBlbnMgd2l0aG91dCBjb25jdXJyZW5jeS4gSXQgd29ya3MgbGlrZSB0aGlzOiB3aGVuIHRoZSBpbnB1dFxuICAgICAqIHN0cmVhbSBlbWl0cyBhIG5lc3RlZCBzdHJlYW0sICpmbGF0dGVuKiB3aWxsIHN0YXJ0IGltaXRhdGluZyB0aGF0IG5lc3RlZFxuICAgICAqIG9uZS4gSG93ZXZlciwgYXMgc29vbiBhcyB0aGUgbmV4dCBuZXN0ZWQgc3RyZWFtIGlzIGVtaXR0ZWQgb24gdGhlIGlucHV0XG4gICAgICogc3RyZWFtLCAqZmxhdHRlbiogd2lsbCBmb3JnZXQgdGhlIHByZXZpb3VzIG5lc3RlZCBvbmUgaXQgd2FzIGltaXRhdGluZywgYW5kXG4gICAgICogd2lsbCBzdGFydCBpbWl0YXRpbmcgdGhlIG5ldyBuZXN0ZWQgb25lLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0rLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tXG4gICAgICogICBcXCAgICAgICAgXFxcbiAgICAgKiAgICBcXCAgICAgICAtLS0tMS0tLS0yLS0tMy0tXG4gICAgICogICAgLS1hLS1iLS0tLWMtLS0tZC0tLS0tLS0tXG4gICAgICogICAgICAgICAgIGZsYXR0ZW5cbiAgICAgKiAtLS0tLWEtLWItLS0tLS0xLS0tLTItLS0zLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmZsYXR0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwID0gdGhpcy5fcHJvZDtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0ocCBpbnN0YW5jZW9mIE1hcE9wICYmICEocCBpbnN0YW5jZW9mIEZpbHRlck1hcEZ1c2lvbikgP1xuICAgICAgICAgICAgbmV3IE1hcEZsYXR0ZW4ocCkgOlxuICAgICAgICAgICAgbmV3IEZsYXR0ZW4odGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFzc2VzIHRoZSBpbnB1dCBzdHJlYW0gdG8gYSBjdXN0b20gb3BlcmF0b3IsIHRvIHByb2R1Y2UgYW4gb3V0cHV0IHN0cmVhbS5cbiAgICAgKlxuICAgICAqICpjb21wb3NlKiBpcyBhIGhhbmR5IHdheSBvZiB1c2luZyBhbiBleGlzdGluZyBmdW5jdGlvbiBpbiBhIGNoYWluZWQgc3R5bGUuXG4gICAgICogSW5zdGVhZCBvZiB3cml0aW5nIGBvdXRTdHJlYW0gPSBmKGluU3RyZWFtKWAgeW91IGNhbiB3cml0ZVxuICAgICAqIGBvdXRTdHJlYW0gPSBpblN0cmVhbS5jb21wb3NlKGYpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wZXJhdG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHN0cmVhbSBhcyBpbnB1dCBhbmRcbiAgICAgKiByZXR1cm5zIGEgc3RyZWFtIGFzIHdlbGwuXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuY29tcG9zZSA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICByZXR1cm4gb3BlcmF0b3IodGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG91dHB1dCBzdHJlYW0gdGhhdCBiZWhhdmVzIGxpa2UgdGhlIGlucHV0IHN0cmVhbSwgYnV0IGFsc29cbiAgICAgKiByZW1lbWJlcnMgdGhlIG1vc3QgcmVjZW50IGV2ZW50IHRoYXQgaGFwcGVucyBvbiB0aGUgaW5wdXQgc3RyZWFtLCBzbyB0aGF0IGFcbiAgICAgKiBuZXdseSBhZGRlZCBsaXN0ZW5lciB3aWxsIGltbWVkaWF0ZWx5IHJlY2VpdmUgdGhhdCBtZW1vcmlzZWQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtNZW1vcnlTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5yZW1lbWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZW1vcnlTdHJlYW0obmV3IFJlbWVtYmVyKHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb3V0cHV0IHN0cmVhbSB0aGF0IGlkZW50aWNhbGx5IGJlaGF2ZXMgbGlrZSB0aGUgaW5wdXQgc3RyZWFtLFxuICAgICAqIGJ1dCBhbHNvIHJ1bnMgYSBgc3B5YCBmdW5jdGlvbiBmbyBlYWNoIGV2ZW50LCB0byBoZWxwIHlvdSBkZWJ1ZyB5b3VyIGFwcC5cbiAgICAgKlxuICAgICAqICpkZWJ1ZyogdGFrZXMgYSBgc3B5YCBmdW5jdGlvbiBhcyBhcmd1bWVudCwgYW5kIHJ1bnMgdGhhdCBmb3IgZWFjaCBldmVudFxuICAgICAqIGhhcHBlbmluZyBvbiB0aGUgaW5wdXQgc3RyZWFtLiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSB0aGUgYHNweWAgYXJndW1lbnQsXG4gICAgICogdGhlbiAqZGVidWcqIHdpbGwganVzdCBgY29uc29sZS5sb2dgIGVhY2ggZXZlbnQuIFRoaXMgaGVscHMgeW91IHRvXG4gICAgICogdW5kZXJzdGFuZCB0aGUgZmxvdyBvZiBldmVudHMgdGhyb3VnaCBzb21lIG9wZXJhdG9yIGNoYWluLlxuICAgICAqXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCBpZiB0aGUgb3V0cHV0IHN0cmVhbSBoYXMgbm8gbGlzdGVuZXJzLCB0aGVuIGl0IHdpbGwgbm90XG4gICAgICogc3RhcnQsIHdoaWNoIG1lYW5zIGBzcHlgIHdpbGwgbmV2ZXIgcnVuIGJlY2F1c2Ugbm8gYWN0dWFsIGV2ZW50IGhhcHBlbnMgaW5cbiAgICAgKiB0aGF0IGNhc2UuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLTEtLS0tMi0tLS0tMy0tLS0tNC0tXG4gICAgICogICAgICAgICBkZWJ1Z1xuICAgICAqIC0tMS0tLS0yLS0tLS0zLS0tLS00LS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxhYmVsT3JTcHkgQSBzdHJpbmcgdG8gdXNlIGFzIHRoZSBsYWJlbCB3aGVuIHByaW50aW5nXG4gICAgICogZGVidWcgaW5mb3JtYXRpb24gb24gdGhlIGNvbnNvbGUsIG9yIGEgJ3NweScgZnVuY3Rpb24gdGhhdCB0YWtlcyBhbiBldmVudFxuICAgICAqIGFzIGFyZ3VtZW50LCBhbmQgZG9lcyBub3QgbmVlZCB0byByZXR1cm4gYW55dGhpbmcuXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAobGFiZWxPclNweSkge1xuICAgICAgICByZXR1cm4gbmV3ICh0aGlzLmN0b3IoKSkobmV3IERlYnVnKHRoaXMsIGxhYmVsT3JTcHkpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqICppbWl0YXRlKiBjaGFuZ2VzIHRoaXMgY3VycmVudCBTdHJlYW0gdG8gZW1pdCB0aGUgc2FtZSBldmVudHMgdGhhdCB0aGVcbiAgICAgKiBgb3RoZXJgIGdpdmVuIFN0cmVhbSBkb2VzLiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vdGhpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBleGlzdHMgdG8gYWxsb3cgb25lIHRoaW5nOiAqKmNpcmN1bGFyIGRlcGVuZGVuY3kgb2Ygc3RyZWFtcyoqLlxuICAgICAqIEZvciBpbnN0YW5jZSwgbGV0J3MgaW1hZ2luZSB0aGF0IGZvciBzb21lIHJlYXNvbiB5b3UgbmVlZCB0byBjcmVhdGUgYVxuICAgICAqIGNpcmN1bGFyIGRlcGVuZGVuY3kgd2hlcmUgc3RyZWFtIGBmaXJzdCRgIGRlcGVuZHMgb24gc3RyZWFtIGBzZWNvbmQkYFxuICAgICAqIHdoaWNoIGluIHR1cm4gZGVwZW5kcyBvbiBgZmlyc3QkYDpcbiAgICAgKlxuICAgICAqIDwhLS0gc2tpcC1leGFtcGxlIC0tPlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IGRlbGF5IGZyb20gJ3hzdHJlYW0vZXh0cmEvZGVsYXknXG4gICAgICpcbiAgICAgKiB2YXIgZmlyc3QkID0gc2Vjb25kJC5tYXAoeCA9PiB4ICogMTApLnRha2UoMyk7XG4gICAgICogdmFyIHNlY29uZCQgPSBmaXJzdCQubWFwKHggPT4geCArIDEpLnN0YXJ0V2l0aCgxKS5jb21wb3NlKGRlbGF5KDEwMCkpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSG93ZXZlciwgdGhhdCBpcyBpbnZhbGlkIEphdmFTY3JpcHQsIGJlY2F1c2UgYHNlY29uZCRgIGlzIHVuZGVmaW5lZFxuICAgICAqIG9uIHRoZSBmaXJzdCBsaW5lLiBUaGlzIGlzIGhvdyAqaW1pdGF0ZSogY2FuIGhlbHAgc29sdmUgaXQ6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCBkZWxheSBmcm9tICd4c3RyZWFtL2V4dHJhL2RlbGF5J1xuICAgICAqXG4gICAgICogdmFyIHNlY29uZFByb3h5JCA9IHhzLmNyZWF0ZSgpO1xuICAgICAqIHZhciBmaXJzdCQgPSBzZWNvbmRQcm94eSQubWFwKHggPT4geCAqIDEwKS50YWtlKDMpO1xuICAgICAqIHZhciBzZWNvbmQkID0gZmlyc3QkLm1hcCh4ID0+IHggKyAxKS5zdGFydFdpdGgoMSkuY29tcG9zZShkZWxheSgxMDApKTtcbiAgICAgKiBzZWNvbmRQcm94eSQuaW1pdGF0ZShzZWNvbmQkKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFdlIGNyZWF0ZSBgc2Vjb25kUHJveHkkYCBiZWZvcmUgdGhlIG90aGVycywgc28gaXQgY2FuIGJlIHVzZWQgaW4gdGhlXG4gICAgICogZGVjbGFyYXRpb24gb2YgYGZpcnN0JGAuIFRoZW4sIGFmdGVyIGJvdGggYGZpcnN0JGAgYW5kIGBzZWNvbmQkYCBhcmVcbiAgICAgKiBkZWZpbmVkLCB3ZSBob29rIGBzZWNvbmRQcm94eSRgIHdpdGggYHNlY29uZCRgIHdpdGggYGltaXRhdGUoKWAgdG8gdGVsbFxuICAgICAqIHRoYXQgdGhleSBhcmUgXCJ0aGUgc2FtZVwiLiBgaW1pdGF0ZWAgd2lsbCBub3QgdHJpZ2dlciB0aGUgc3RhcnQgb2YgYW55XG4gICAgICogc3RyZWFtLCBpdCBqdXN0IGJpbmRzIGBzZWNvbmRQcm94eSRgIGFuZCBgc2Vjb25kJGAgdG9nZXRoZXIuXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIGlzIGFuIGV4YW1wbGUgd2hlcmUgYGltaXRhdGUoKWAgaXMgaW1wb3J0YW50IGluIEN5Y2xlLmpzXG4gICAgICogYXBwbGljYXRpb25zLiBBIHBhcmVudCBjb21wb25lbnQgY29udGFpbnMgc29tZSBjaGlsZCBjb21wb25lbnRzLiBBIGNoaWxkXG4gICAgICogaGFzIGFuIGFjdGlvbiBzdHJlYW0gd2hpY2ggaXMgZ2l2ZW4gdG8gdGhlIHBhcmVudCB0byBkZWZpbmUgaXRzIHN0YXRlOlxuICAgICAqXG4gICAgICogPCEtLSBza2lwLWV4YW1wbGUgLS0+XG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBjaGlsZEFjdGlvblByb3h5JCA9IHhzLmNyZWF0ZSgpO1xuICAgICAqIGNvbnN0IHBhcmVudCA9IFBhcmVudCh7Li4uc291cmNlcywgY2hpbGRBY3Rpb24kOiBjaGlsZEFjdGlvblByb3h5JH0pO1xuICAgICAqIGNvbnN0IGNoaWxkQWN0aW9uJCA9IHBhcmVudC5zdGF0ZSQubWFwKHMgPT4gcy5jaGlsZC5hY3Rpb24kKS5mbGF0dGVuKCk7XG4gICAgICogY2hpbGRBY3Rpb25Qcm94eSQuaW1pdGF0ZShjaGlsZEFjdGlvbiQpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogTm90ZSwgdGhvdWdoLCB0aGF0ICoqYGltaXRhdGUoKWAgZG9lcyBub3Qgc3VwcG9ydCBNZW1vcnlTdHJlYW1zKiouIElmIHdlXG4gICAgICogd291bGQgYXR0ZW1wdCB0byBpbWl0YXRlIGEgTWVtb3J5U3RyZWFtIGluIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSwgd2Ugd291bGRcbiAgICAgKiBlaXRoZXIgZ2V0IGEgcmFjZSBjb25kaXRpb24gKHdoZXJlIHRoZSBzeW1wdG9tIHdvdWxkIGJlIFwibm90aGluZyBoYXBwZW5zXCIpXG4gICAgICogb3IgYW4gaW5maW5pdGUgY3ljbGljIGVtaXNzaW9uIG9mIHZhbHVlcy4gSXQncyB1c2VmdWwgdG8gdGhpbmsgYWJvdXRcbiAgICAgKiBNZW1vcnlTdHJlYW1zIGFzIGNlbGxzIGluIGEgc3ByZWFkc2hlZXQuIEl0IGRvZXNuJ3QgbWFrZSBhbnkgc2Vuc2UgdG9cbiAgICAgKiBkZWZpbmUgYSBzcHJlYWRzaGVldCBjZWxsIGBBMWAgd2l0aCBhIGZvcm11bGEgdGhhdCBkZXBlbmRzIG9uIGBCMWAgYW5kXG4gICAgICogY2VsbCBgQjFgIGRlZmluZWQgd2l0aCBhIGZvcm11bGEgdGhhdCBkZXBlbmRzIG9uIGBBMWAuXG4gICAgICpcbiAgICAgKiBJZiB5b3UgZmluZCB5b3Vyc2VsZiB3YW50aW5nIHRvIHVzZSBgaW1pdGF0ZSgpYCB3aXRoIGFcbiAgICAgKiBNZW1vcnlTdHJlYW0sIHlvdSBzaG91bGQgcmV3b3JrIHlvdXIgY29kZSBhcm91bmQgYGltaXRhdGUoKWAgdG8gdXNlIGFcbiAgICAgKiBTdHJlYW0gaW5zdGVhZC4gTG9vayBmb3IgdGhlIHN0cmVhbSBpbiB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeSB0aGF0XG4gICAgICogcmVwcmVzZW50cyBhbiBldmVudCBzdHJlYW0sIGFuZCB0aGF0IHdvdWxkIGJlIGEgY2FuZGlkYXRlIGZvciBjcmVhdGluZyBhXG4gICAgICogcHJveHkgU3RyZWFtIHdoaWNoIHRoZW4gaW1pdGF0ZXMgdGhlIHRhcmdldCBTdHJlYW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmVhbX0gdGFyZ2V0IFRoZSBvdGhlciBzdHJlYW0gdG8gaW1pdGF0ZSBvbiB0aGUgY3VycmVudCBvbmUuIE11c3RcbiAgICAgKiBub3QgYmUgYSBNZW1vcnlTdHJlYW0uXG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5pbWl0YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgTWVtb3J5U3RyZWFtKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIE1lbW9yeVN0cmVhbSB3YXMgZ2l2ZW4gdG8gaW1pdGF0ZSgpLCBidXQgaXQgb25seSAnICtcbiAgICAgICAgICAgICAgICAnc3VwcG9ydHMgYSBTdHJlYW0uIFJlYWQgbW9yZSBhYm91dCB0aGlzIHJlc3RyaWN0aW9uIGhlcmU6ICcgK1xuICAgICAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vc3RhbHR6L3hzdHJlYW0jZmFxJyk7XG4gICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgZm9yICh2YXIgaWxzID0gdGhpcy5faWxzLCBOID0gaWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBOOyBpKyspXG4gICAgICAgICAgICB0YXJnZXQuX2FkZChpbHNbaV0pO1xuICAgICAgICB0aGlzLl9pbHMgPSBbXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvcmNlcyB0aGUgU3RyZWFtIHRvIGVtaXQgdGhlIGdpdmVuIHZhbHVlIHRvIGl0cyBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBBcyB0aGUgbmFtZSBpbmRpY2F0ZXMsIGlmIHlvdSB1c2UgdGhpcywgeW91IGFyZSBtb3N0IGxpa2VseSBkb2luZyBzb21ldGhpbmdcbiAgICAgKiBUaGUgV3JvbmcgV2F5LiBQbGVhc2UgdHJ5IHRvIHVuZGVyc3RhbmQgdGhlIHJlYWN0aXZlIHdheSBiZWZvcmUgdXNpbmcgdGhpc1xuICAgICAqIG1ldGhvZC4gVXNlIGl0IG9ubHkgd2hlbiB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIFwibmV4dFwiIHZhbHVlIHlvdSB3YW50IHRvIGJyb2FkY2FzdCB0byBhbGwgbGlzdGVuZXJzIG9mXG4gICAgICogdGhpcyBTdHJlYW0uXG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5zaGFtZWZ1bGx5U2VuZE5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbih2YWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGb3JjZXMgdGhlIFN0cmVhbSB0byBlbWl0IHRoZSBnaXZlbiBlcnJvciB0byBpdHMgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQXMgdGhlIG5hbWUgaW5kaWNhdGVzLCBpZiB5b3UgdXNlIHRoaXMsIHlvdSBhcmUgbW9zdCBsaWtlbHkgZG9pbmcgc29tZXRoaW5nXG4gICAgICogVGhlIFdyb25nIFdheS4gUGxlYXNlIHRyeSB0byB1bmRlcnN0YW5kIHRoZSByZWFjdGl2ZSB3YXkgYmVmb3JlIHVzaW5nIHRoaXNcbiAgICAgKiBtZXRob2QuIFVzZSBpdCBvbmx5IHdoZW4geW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHthbnl9IGVycm9yIFRoZSBlcnJvciB5b3Ugd2FudCB0byBicm9hZGNhc3QgdG8gYWxsIHRoZSBsaXN0ZW5lcnMgb2ZcbiAgICAgKiB0aGlzIFN0cmVhbS5cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnNoYW1lZnVsbHlTZW5kRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5fZShlcnJvcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGb3JjZXMgdGhlIFN0cmVhbSB0byBlbWl0IHRoZSBcImNvbXBsZXRlZFwiIGV2ZW50IHRvIGl0cyBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBBcyB0aGUgbmFtZSBpbmRpY2F0ZXMsIGlmIHlvdSB1c2UgdGhpcywgeW91IGFyZSBtb3N0IGxpa2VseSBkb2luZyBzb21ldGhpbmdcbiAgICAgKiBUaGUgV3JvbmcgV2F5LiBQbGVhc2UgdHJ5IHRvIHVuZGVyc3RhbmQgdGhlIHJlYWN0aXZlIHdheSBiZWZvcmUgdXNpbmcgdGhpc1xuICAgICAqIG1ldGhvZC4gVXNlIGl0IG9ubHkgd2hlbiB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5zaGFtZWZ1bGx5U2VuZENvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgXCJkZWJ1Z1wiIGxpc3RlbmVyIHRvIHRoZSBzdHJlYW0uIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBkZWJ1Z1xuICAgICAqIGxpc3RlbmVyLCB0aGF0J3Mgd2h5IHRoaXMgaXMgJ3NldERlYnVnTGlzdGVuZXInLiBUbyByZW1vdmUgdGhlIGRlYnVnXG4gICAgICogbGlzdGVuZXIsIGp1c3QgY2FsbCBzZXREZWJ1Z0xpc3RlbmVyKG51bGwpLlxuICAgICAqXG4gICAgICogQSBkZWJ1ZyBsaXN0ZW5lciBpcyBsaWtlIGFueSBvdGhlciBsaXN0ZW5lci4gVGhlIG9ubHkgZGlmZmVyZW5jZSBpcyB0aGF0IGFcbiAgICAgKiBkZWJ1ZyBsaXN0ZW5lciBpcyBcInN0ZWFsdGh5XCI6IGl0cyBwcmVzZW5jZS9hYnNlbmNlIGRvZXMgbm90IHRyaWdnZXIgdGhlXG4gICAgICogc3RhcnQvc3RvcCBvZiB0aGUgc3RyZWFtIChvciB0aGUgcHJvZHVjZXIgaW5zaWRlIHRoZSBzdHJlYW0pLiBUaGlzIGlzXG4gICAgICogdXNlZnVsIHNvIHlvdSBjYW4gaW5zcGVjdCB3aGF0IGlzIGdvaW5nIG9uIHdpdGhvdXQgY2hhbmdpbmcgdGhlIGJlaGF2aW9yXG4gICAgICogb2YgdGhlIHByb2dyYW0uIElmIHlvdSBoYXZlIGFuIGlkbGUgc3RyZWFtIGFuZCB5b3UgYWRkIGEgbm9ybWFsIGxpc3RlbmVyIHRvXG4gICAgICogaXQsIHRoZSBzdHJlYW0gd2lsbCBzdGFydCBleGVjdXRpbmcuIEJ1dCBpZiB5b3Ugc2V0IGEgZGVidWcgbGlzdGVuZXIgb24gYW5cbiAgICAgKiBpZGxlIHN0cmVhbSwgaXQgd29uJ3Qgc3RhcnQgZXhlY3V0aW5nIChub3QgdW50aWwgdGhlIGZpcnN0IG5vcm1hbCBsaXN0ZW5lclxuICAgICAqIGlzIGFkZGVkKS5cbiAgICAgKlxuICAgICAqIEFzIHRoZSBuYW1lIGluZGljYXRlcywgd2UgZG9uJ3QgcmVjb21tZW5kIHVzaW5nIHRoaXMgbWV0aG9kIHRvIGJ1aWxkIGFwcFxuICAgICAqIGxvZ2ljLiBJbiBmYWN0LCBpbiBtb3N0IGNhc2VzIHRoZSBkZWJ1ZyBvcGVyYXRvciB3b3JrcyBqdXN0IGZpbmUuIE9ubHkgdXNlXG4gICAgICogdGhpcyBvbmUgaWYgeW91IGtub3cgd2hhdCB5b3UncmUgZG9pbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xpc3RlbmVyPFQ+fSBsaXN0ZW5lclxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuc2V0RGVidWdMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9kbCA9IE5PO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZCA9IHRydWU7XG4gICAgICAgICAgICBsaXN0ZW5lci5fbiA9IGxpc3RlbmVyLm5leHQgfHwgbm9vcDtcbiAgICAgICAgICAgIGxpc3RlbmVyLl9lID0gbGlzdGVuZXIuZXJyb3IgfHwgbm9vcDtcbiAgICAgICAgICAgIGxpc3RlbmVyLl9jID0gbGlzdGVuZXIuY29tcGxldGUgfHwgbm9vcDtcbiAgICAgICAgICAgIHRoaXMuX2RsID0gbGlzdGVuZXI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdHJlYW07XG59KCkpO1xuLyoqXG4gKiBCbGVuZHMgbXVsdGlwbGUgc3RyZWFtcyB0b2dldGhlciwgZW1pdHRpbmcgZXZlbnRzIGZyb20gYWxsIG9mIHRoZW1cbiAqIGNvbmN1cnJlbnRseS5cbiAqXG4gKiAqbWVyZ2UqIHRha2VzIG11bHRpcGxlIHN0cmVhbXMgYXMgYXJndW1lbnRzLCBhbmQgY3JlYXRlcyBhIHN0cmVhbSB0aGF0XG4gKiBiZWhhdmVzIGxpa2UgZWFjaCBvZiB0aGUgYXJndW1lbnQgc3RyZWFtcywgaW4gcGFyYWxsZWwuXG4gKlxuICogTWFyYmxlIGRpYWdyYW06XG4gKlxuICogYGBgdGV4dFxuICogLS0xLS0tLTItLS0tLTMtLS0tLS0tLTQtLS1cbiAqIC0tLS1hLS0tLS1iLS0tLWMtLS1kLS0tLS0tXG4gKiAgICAgICAgICAgIG1lcmdlXG4gKiAtLTEtYS0tMi0tYi0tMy1jLS0tZC0tNC0tLVxuICogYGBgXG4gKlxuICogQGZhY3RvcnkgdHJ1ZVxuICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbTEgQSBzdHJlYW0gdG8gbWVyZ2UgdG9nZXRoZXIgd2l0aCBvdGhlciBzdHJlYW1zLlxuICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbTIgQSBzdHJlYW0gdG8gbWVyZ2UgdG9nZXRoZXIgd2l0aCBvdGhlciBzdHJlYW1zLiBUd29cbiAqIG9yIG1vcmUgc3RyZWFtcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnRzLlxuICogQHJldHVybiB7U3RyZWFtfVxuICovXG5TdHJlYW0ubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSgpIHtcbiAgICB2YXIgc3RyZWFtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHN0cmVhbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IE1lcmdlKHN0cmVhbXMpKTtcbn07XG4vKipcbiAqIENvbWJpbmVzIG11bHRpcGxlIGlucHV0IHN0cmVhbXMgdG9nZXRoZXIgdG8gcmV0dXJuIGEgc3RyZWFtIHdob3NlIGV2ZW50c1xuICogYXJlIGFycmF5cyB0aGF0IGNvbGxlY3QgdGhlIGxhdGVzdCBldmVudHMgZnJvbSBlYWNoIGlucHV0IHN0cmVhbS5cbiAqXG4gKiAqY29tYmluZSogaW50ZXJuYWxseSByZW1lbWJlcnMgdGhlIG1vc3QgcmVjZW50IGV2ZW50IGZyb20gZWFjaCBvZiB0aGUgaW5wdXRcbiAqIHN0cmVhbXMuIFdoZW4gYW55IG9mIHRoZSBpbnB1dCBzdHJlYW1zIGVtaXRzIGFuIGV2ZW50LCB0aGF0IGV2ZW50IHRvZ2V0aGVyXG4gKiB3aXRoIGFsbCB0aGUgb3RoZXIgc2F2ZWQgZXZlbnRzIGFyZSBjb21iaW5lZCBpbnRvIGFuIGFycmF5LiBUaGF0IGFycmF5IHdpbGxcbiAqIGJlIGVtaXR0ZWQgb24gdGhlIG91dHB1dCBzdHJlYW0uIEl0J3MgZXNzZW50aWFsbHkgYSB3YXkgb2Ygam9pbmluZyB0b2dldGhlclxuICogdGhlIGV2ZW50cyBmcm9tIG11bHRpcGxlIHN0cmVhbXMuXG4gKlxuICogTWFyYmxlIGRpYWdyYW06XG4gKlxuICogYGBgdGV4dFxuICogLS0xLS0tLTItLS0tLTMtLS0tLS0tLTQtLS1cbiAqIC0tLS1hLS0tLS1iLS0tLS1jLS1kLS0tLS0tXG4gKiAgICAgICAgICBjb21iaW5lXG4gKiAtLS0tMWEtMmEtMmItM2ItM2MtM2QtNGQtLVxuICogYGBgXG4gKlxuICogTm90ZTogdG8gbWluaW1pemUgZ2FyYmFnZSBjb2xsZWN0aW9uLCAqY29tYmluZSogdXNlcyB0aGUgc2FtZSBhcnJheVxuICogaW5zdGFuY2UgZm9yIGVhY2ggZW1pc3Npb24uICBJZiB5b3UgbmVlZCB0byBjb21wYXJlIGVtaXNzaW9ucyBvdmVyIHRpbWUsXG4gKiBjYWNoZSB0aGUgdmFsdWVzIHdpdGggYG1hcGAgZmlyc3Q6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBwYWlyd2lzZSBmcm9tICd4c3RyZWFtL2V4dHJhL3BhaXJ3aXNlJ1xuICpcbiAqIGNvbnN0IHN0cmVhbTEgPSB4cy5vZigxKTtcbiAqIGNvbnN0IHN0cmVhbTIgPSB4cy5vZigyKTtcbiAqXG4gKiB4cy5jb21iaW5lKHN0cmVhbTEsIHN0cmVhbTIpLm1hcChcbiAqICAgY29tYmluZWRFbWlzc2lvbnMgPT4gKFsgLi4uY29tYmluZWRFbWlzc2lvbnMgXSlcbiAqICkuY29tcG9zZShwYWlyd2lzZSlcbiAqIGBgYFxuICpcbiAqIEBmYWN0b3J5IHRydWVcbiAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0xIEEgc3RyZWFtIHRvIGNvbWJpbmUgdG9nZXRoZXIgd2l0aCBvdGhlciBzdHJlYW1zLlxuICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbTIgQSBzdHJlYW0gdG8gY29tYmluZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuXG4gKiBNdWx0aXBsZSBzdHJlYW1zLCBub3QganVzdCB0d28sIG1heSBiZSBnaXZlbiBhcyBhcmd1bWVudHMuXG4gKiBAcmV0dXJuIHtTdHJlYW19XG4gKi9cblN0cmVhbS5jb21iaW5lID0gZnVuY3Rpb24gY29tYmluZSgpIHtcbiAgICB2YXIgc3RyZWFtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHN0cmVhbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IENvbWJpbmUoc3RyZWFtcykpO1xufTtcbmV4cG9ydHMuU3RyZWFtID0gU3RyZWFtO1xudmFyIE1lbW9yeVN0cmVhbSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1lbW9yeVN0cmVhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZW1vcnlTdHJlYW0ocHJvZHVjZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvZHVjZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9oYXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdGhpcy5fdiA9IHg7XG4gICAgICAgIHRoaXMuX2hhcyA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX24uY2FsbCh0aGlzLCB4KTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuX2FkZCA9IGZ1bmN0aW9uIChpbCkge1xuICAgICAgICB2YXIgdGEgPSB0aGlzLl90YXJnZXQ7XG4gICAgICAgIGlmICh0YSAhPT0gTk8pXG4gICAgICAgICAgICByZXR1cm4gdGEuX2FkZChpbCk7XG4gICAgICAgIHZhciBhID0gdGhpcy5faWxzO1xuICAgICAgICBhLnB1c2goaWwpO1xuICAgICAgICBpZiAoYS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faGFzKVxuICAgICAgICAgICAgICAgIGlsLl9uKHRoaXMuX3YpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdG9wSUQgIT09IE5PKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faGFzKVxuICAgICAgICAgICAgICAgIGlsLl9uKHRoaXMuX3YpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3N0b3BJRCk7XG4gICAgICAgICAgICB0aGlzLl9zdG9wSUQgPSBOTztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9oYXMpXG4gICAgICAgICAgICBpbC5fbih0aGlzLl92KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRoaXMuX3Byb2Q7XG4gICAgICAgICAgICBpZiAocCAhPT0gTk8pXG4gICAgICAgICAgICAgICAgcC5fc3RhcnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuX3N0b3BOb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2hhcyA9IGZhbHNlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9zdG9wTm93LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLl94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9oYXMgPSBmYWxzZTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5feC5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAocHJvamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKHByb2plY3QpO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5tYXBUbyA9IGZ1bmN0aW9uIChwcm9qZWN0ZWRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5tYXBUby5jYWxsKHRoaXMsIHByb2plY3RlZFZhbHVlKTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUudGFrZSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUudGFrZS5jYWxsKHRoaXMsIGFtb3VudCk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLmVuZFdoZW4gPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZW5kV2hlbi5jYWxsKHRoaXMsIG90aGVyKTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUucmVwbGFjZUVycm9yID0gZnVuY3Rpb24gKHJlcGxhY2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVwbGFjZUVycm9yLmNhbGwodGhpcywgcmVwbGFjZSk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLnJlbWVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAobGFiZWxPclNweSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5kZWJ1Zy5jYWxsKHRoaXMsIGxhYmVsT3JTcHkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lbW9yeVN0cmVhbTtcbn0oU3RyZWFtKSk7XG5leHBvcnRzLk1lbW9yeVN0cmVhbSA9IE1lbW9yeVN0cmVhbTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IFN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi94c3RyZWFtL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRodW5rXzEgPSByZXF1aXJlKFwic25hYmJkb20vdGh1bmtcIik7XG5leHBvcnRzLnRodW5rID0gdGh1bmtfMS50aHVuaztcbnZhciBNYWluRE9NU291cmNlXzEgPSByZXF1aXJlKFwiLi9NYWluRE9NU291cmNlXCIpO1xuZXhwb3J0cy5NYWluRE9NU291cmNlID0gTWFpbkRPTVNvdXJjZV8xLk1haW5ET01Tb3VyY2U7XG52YXIgSFRNTFNvdXJjZV8xID0gcmVxdWlyZShcIi4vSFRNTFNvdXJjZVwiKTtcbmV4cG9ydHMuSFRNTFNvdXJjZSA9IEhUTUxTb3VyY2VfMS5IVE1MU291cmNlO1xuLyoqXG4gKiBBIGZhY3RvcnkgZm9yIHRoZSBET00gZHJpdmVyIGZ1bmN0aW9uLlxuICpcbiAqIFRha2VzIGEgYGNvbnRhaW5lcmAgdG8gZGVmaW5lIHRoZSB0YXJnZXQgb24gdGhlIGV4aXN0aW5nIERPTSB3aGljaCB0aGlzXG4gKiBkcml2ZXIgd2lsbCBvcGVyYXRlIG9uLCBhbmQgYW4gYG9wdGlvbnNgIG9iamVjdCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LiBUaGVcbiAqIGlucHV0IHRvIHRoaXMgZHJpdmVyIGlzIGEgc3RyZWFtIG9mIHZpcnR1YWwgRE9NIG9iamVjdHMsIG9yIGluIG90aGVyIHdvcmRzLFxuICogU25hYmJkb20gXCJWTm9kZVwiIG9iamVjdHMuIFRoZSBvdXRwdXQgb2YgdGhpcyBkcml2ZXIgaXMgYSBcIkRPTVNvdXJjZVwiOiBhXG4gKiBjb2xsZWN0aW9uIG9mIE9ic2VydmFibGVzIHF1ZXJpZWQgd2l0aCB0aGUgbWV0aG9kcyBgc2VsZWN0KClgIGFuZCBgZXZlbnRzKClgLlxuICpcbiAqIGBET01Tb3VyY2Uuc2VsZWN0KHNlbGVjdG9yKWAgcmV0dXJucyBhIG5ldyBET01Tb3VyY2Ugd2l0aCBzY29wZSByZXN0cmljdGVkIHRvXG4gKiB0aGUgZWxlbWVudChzKSB0aGF0IG1hdGNoZXMgdGhlIENTUyBgc2VsZWN0b3JgIGdpdmVuLlxuICpcbiAqIGBET01Tb3VyY2UuZXZlbnRzKGV2ZW50VHlwZSwgb3B0aW9ucylgIHJldHVybnMgYSBzdHJlYW0gb2YgZXZlbnRzIG9mXG4gKiBgZXZlbnRUeXBlYCBoYXBwZW5pbmcgb24gdGhlIGVsZW1lbnRzIHRoYXQgbWF0Y2ggdGhlIGN1cnJlbnQgRE9NU291cmNlLiBUaGVcbiAqIGV2ZW50IG9iamVjdCBjb250YWlucyB0aGUgYG93bmVyVGFyZ2V0YCBwcm9wZXJ0eSB0aGF0IGJlaGF2ZXMgZXhhY3RseSBsaWtlXG4gKiBgY3VycmVudFRhcmdldGAuIFRoZSByZWFzb24gZm9yIHRoaXMgaXMgdGhhdCBzb21lIGJyb3dzZXJzIGRvZXNuJ3QgYWxsb3dcbiAqIGBjdXJyZW50VGFyZ2V0YCBwcm9wZXJ0eSB0byBiZSBtdXRhdGVkLCBoZW5jZSBhIG5ldyBwcm9wZXJ0eSBpcyBjcmVhdGVkLiBUaGVcbiAqIHJldHVybmVkIHN0cmVhbSBpcyBhbiAqeHN0cmVhbSogU3RyZWFtIGlmIHlvdSB1c2UgYEBjeWNsZS94c3RyZWFtLXJ1bmAgdG8gcnVuXG4gKiB5b3VyIGFwcCB3aXRoIHRoaXMgZHJpdmVyLCBvciBpdCBpcyBhbiBSeEpTIE9ic2VydmFibGUgaWYgeW91IHVzZVxuICogYEBjeWNsZS9yeGpzLXJ1bmAsIGFuZCBzbyBmb3J0aC4gVGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIgY2FuIGhhdmUgdGhlXG4gKiBwcm9wZXJ0eSBgdXNlQ2FwdHVyZWAsIHdoaWNoIGlzIGJ5IGRlZmF1bHQgYGZhbHNlYCwgZXhjZXB0IGl0IGlzIGB0cnVlYCBmb3JcbiAqIGV2ZW50IHR5cGVzIHRoYXQgZG8gbm90IGJ1YmJsZS4gUmVhZCBtb3JlIGhlcmVcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyXG4gKiBhYm91dCB0aGUgYHVzZUNhcHR1cmVgIGFuZCBpdHMgcHVycG9zZS5cbiAqXG4gKiBgRE9NU291cmNlLmVsZW1lbnRzKClgIHJldHVybnMgYSBzdHJlYW0gb2YgdGhlIERPTSBlbGVtZW50KHMpIG1hdGNoZWQgYnkgdGhlXG4gKiBzZWxlY3RvcnMgaW4gdGhlIERPTVNvdXJjZS4gQWxzbywgYERPTVNvdXJjZS5zZWxlY3QoJzpyb290JykuZWxlbWVudHMoKWBcbiAqIHJldHVybnMgYSBzdHJlYW0gb2YgRE9NIGVsZW1lbnQgY29ycmVzcG9uZGluZyB0byB0aGUgcm9vdCAob3IgY29udGFpbmVyKSBvZlxuICogdGhlIGFwcCBvbiB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xIVE1MRWxlbWVudCl9IGNvbnRhaW5lciB0aGUgRE9NIHNlbGVjdG9yIGZvciB0aGUgZWxlbWVudFxuICogKG9yIHRoZSBlbGVtZW50IGl0c2VsZikgdG8gY29udGFpbiB0aGUgcmVuZGVyaW5nIG9mIHRoZSBWVHJlZXMuXG4gKiBAcGFyYW0ge0RPTURyaXZlck9wdGlvbnN9IG9wdGlvbnMgYW4gb2JqZWN0IHdpdGggdHdvIG9wdGlvbmFsIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGBtb2R1bGVzOiBhcnJheWAgb3ZlcnJpZGVzIGBAY3ljbGUvZG9tYCdzIGRlZmF1bHQgU25hYmJkb20gbW9kdWxlcyBhc1xuICogICAgIGFzIGRlZmluZWQgaW4gW2BzcmMvbW9kdWxlcy50c2BdKC4vc3JjL21vZHVsZXMudHMpLlxuICogICAtIGB0cmFuc3Bvc2l0aW9uOiBib29sZWFuYCBlbmFibGVzL2Rpc2FibGVzIHRyYW5zcG9zaXRpb24gb2YgaW5uZXIgc3RyZWFtc1xuICogICAgIGluIHRoZSB2aXJ0dWFsIERPTSB0cmVlLlxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBET00gZHJpdmVyIGZ1bmN0aW9uLiBUaGUgZnVuY3Rpb24gZXhwZWN0cyBhIHN0cmVhbSBvZlxuICogVk5vZGUgYXMgaW5wdXQsIGFuZCBvdXRwdXRzIHRoZSBET01Tb3VyY2Ugb2JqZWN0LlxuICogQGZ1bmN0aW9uIG1ha2VET01Ecml2ZXJcbiAqL1xudmFyIG1ha2VET01Ecml2ZXJfMSA9IHJlcXVpcmUoXCIuL21ha2VET01Ecml2ZXJcIik7XG5leHBvcnRzLm1ha2VET01Ecml2ZXIgPSBtYWtlRE9NRHJpdmVyXzEubWFrZURPTURyaXZlcjtcbi8qKlxuICogQSBmYWN0b3J5IGZvciB0aGUgSFRNTCBkcml2ZXIgZnVuY3Rpb24uXG4gKlxuICogVGFrZXMgYW4gYGVmZmVjdGAgY2FsbGJhY2sgZnVuY3Rpb24gYW5kIGFuIGBvcHRpb25zYCBvYmplY3QgYXMgYXJndW1lbnRzLiBUaGVcbiAqIGlucHV0IHRvIHRoaXMgZHJpdmVyIGlzIGEgc3RyZWFtIG9mIHZpcnR1YWwgRE9NIG9iamVjdHMsIG9yIGluIG90aGVyIHdvcmRzLFxuICogU25hYmJkb20gXCJWTm9kZVwiIG9iamVjdHMuIFRoZSBvdXRwdXQgb2YgdGhpcyBkcml2ZXIgaXMgYSBcIkRPTVNvdXJjZVwiOiBhXG4gKiBjb2xsZWN0aW9uIG9mIE9ic2VydmFibGVzIHF1ZXJpZWQgd2l0aCB0aGUgbWV0aG9kcyBgc2VsZWN0KClgIGFuZCBgZXZlbnRzKClgLlxuICpcbiAqIFRoZSBIVE1MIERyaXZlciBpcyBzdXBwbGVtZW50YXJ5IHRvIHRoZSBET00gRHJpdmVyLiBJbnN0ZWFkIG9mIHByb2R1Y2luZ1xuICogZWxlbWVudHMgb24gdGhlIERPTSwgaXQgZ2VuZXJhdGVzIEhUTUwgYXMgc3RyaW5ncyBhbmQgZG9lcyBhIHNpZGUgZWZmZWN0IG9uXG4gKiB0aG9zZSBIVE1MIHN0cmluZ3MuIFRoYXQgc2lkZSBlZmZlY3QgaXMgZGVzY3JpYmVkIGJ5IHRoZSBgZWZmZWN0YCBjYWxsYmFja1xuICogZnVuY3Rpb24uIFNvLCBpZiB5b3Ugd2FudCB0byB1c2UgdGhlIEhUTUwgRHJpdmVyIG9uIHRoZSBzZXJ2ZXItc2lkZSB0byByZW5kZXJcbiAqIHlvdXIgYXBwbGljYXRpb24gYXMgSFRNTCBhbmQgc2VuZCBhcyBhIHJlc3BvbnNlICh3aGljaCBpcyB0aGUgdHlwaWNhbCB1c2VcbiAqIGNhc2UgZm9yIHRoZSBIVE1MIERyaXZlciksIHlvdSBuZWVkIHRvIHBhc3Mgc29tZXRoaW5nIGxpa2UgdGhlXG4gKiBgaHRtbCA9PiByZXNwb25zZS5zZW5kKGh0bWwpYCBmdW5jdGlvbiBhcyB0aGUgYGVmZmVjdGAgYXJndW1lbnQuIFRoaXMgd2F5LFxuICogdGhlIGRyaXZlciBrbm93cyB3aGF0IHNpZGUgZWZmZWN0IHRvIGNhdXNlIGJhc2VkIG9uIHRoZSBIVE1MIHN0cmluZyBpdCBqdXN0XG4gKiByZW5kZXJlZC5cbiAqXG4gKiBUaGUgSFRNTCBkcml2ZXIgaXMgdXNlZnVsIG9ubHkgZm9yIHRoYXQgc2lkZSBlZmZlY3QgaW4gdGhlIGBlZmZlY3RgIGNhbGxiYWNrLlxuICogSXQgY2FuIGJlIGNvbnNpZGVyZWQgYSBzaW5rLW9ubHkgZHJpdmVyLiBIb3dldmVyLCBpbiBvcmRlciB0byBzZXJ2ZSBhcyBhXG4gKiB0cmFuc3BhcmVudCByZXBsYWNlbWVudCB0byB0aGUgRE9NIERyaXZlciB3aGVuIHJlbmRlcmluZyBmcm9tIHRoZSBzZXJ2ZXIsIHRoZVxuICogSFRNTCBkcml2ZXIgcmV0dXJucyBhIHNvdXJjZSBvYmplY3QgdGhhdCBiZWhhdmVzIGp1c3QgbGlrZSB0aGUgRE9NU291cmNlLlxuICogVGhpcyBoZWxwcyByZXVzZSB0aGUgc2FtZSBhcHBsaWNhdGlvbiB0aGF0IGlzIHdyaXR0ZW4gZm9yIHRoZSBET00gRHJpdmVyLlxuICogVGhpcyBmYWtlIERPTVNvdXJjZSByZXR1cm5zIGVtcHR5IHN0cmVhbXMgd2hlbiB5b3UgcXVlcnkgaXQsIGJlY2F1c2UgdGhlcmVcbiAqIGFyZSBubyB1c2VyIGV2ZW50cyBvbiB0aGUgc2VydmVyLlxuICpcbiAqIGBET01Tb3VyY2Uuc2VsZWN0KHNlbGVjdG9yKWAgcmV0dXJucyBhIG5ldyBET01Tb3VyY2Ugd2l0aCBzY29wZSByZXN0cmljdGVkIHRvXG4gKiB0aGUgZWxlbWVudChzKSB0aGF0IG1hdGNoZXMgdGhlIENTUyBgc2VsZWN0b3JgIGdpdmVuLlxuICpcbiAqIGBET01Tb3VyY2UuZXZlbnRzKGV2ZW50VHlwZSwgb3B0aW9ucylgIHJldHVybnMgYW4gZW1wdHkgc3RyZWFtLiBUaGUgcmV0dXJuZWRcbiAqIHN0cmVhbSBpcyBhbiAqeHN0cmVhbSogU3RyZWFtIGlmIHlvdSB1c2UgYEBjeWNsZS94c3RyZWFtLXJ1bmAgdG8gcnVuIHlvdXIgYXBwXG4gKiB3aXRoIHRoaXMgZHJpdmVyLCBvciBpdCBpcyBhbiBSeEpTIE9ic2VydmFibGUgaWYgeW91IHVzZSBgQGN5Y2xlL3J4anMtcnVuYCxcbiAqIGFuZCBzbyBmb3J0aC5cbiAqXG4gKiBgRE9NU291cmNlLmVsZW1lbnRzKClgIHJldHVybnMgdGhlIHN0cmVhbSBvZiBIVE1MIHN0cmluZyByZW5kZXJlZCBmcm9tIHlvdXJcbiAqIHNpbmsgdmlydHVhbCBET00gc3RyZWFtLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVmZmVjdCBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBzdHJpbmcgb2YgcmVuZGVyZWRcbiAqIEhUTUwgYXMgaW5wdXQgYW5kIHNob3VsZCBydW4gYSBzaWRlIGVmZmVjdCwgcmV0dXJuaW5nIG5vdGhpbmcuXG4gKiBAcGFyYW0ge0hUTUxEcml2ZXJPcHRpb25zfSBvcHRpb25zIGFuIG9iamVjdCB3aXRoIG9uZSBvcHRpb25hbCBwcm9wZXJ0eTpcbiAqIGB0cmFuc3Bvc2l0aW9uOiBib29sZWFuYCBlbmFibGVzL2Rpc2FibGVzIHRyYW5zcG9zaXRpb24gb2YgaW5uZXIgc3RyZWFtcyBpblxuICogdGhlIHZpcnR1YWwgRE9NIHRyZWUuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIEhUTUwgZHJpdmVyIGZ1bmN0aW9uLiBUaGUgZnVuY3Rpb24gZXhwZWN0cyBhIHN0cmVhbSBvZlxuICogVk5vZGUgYXMgaW5wdXQsIGFuZCBvdXRwdXRzIHRoZSBET01Tb3VyY2Ugb2JqZWN0LlxuICogQGZ1bmN0aW9uIG1ha2VIVE1MRHJpdmVyXG4gKi9cbnZhciBtYWtlSFRNTERyaXZlcl8xID0gcmVxdWlyZShcIi4vbWFrZUhUTUxEcml2ZXJcIik7XG5leHBvcnRzLm1ha2VIVE1MRHJpdmVyID0gbWFrZUhUTUxEcml2ZXJfMS5tYWtlSFRNTERyaXZlcjtcbi8qKlxuICogQSBmYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBtb2NrZWQgRE9NU291cmNlIG9iamVjdHMsIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICpcbiAqIFRha2VzIGEgYHN0cmVhbUFkYXB0ZXJgIGFuZCBhIGBtb2NrQ29uZmlnYCBvYmplY3QgYXMgYXJndW1lbnRzLCBhbmQgcmV0dXJuc1xuICogYSBET01Tb3VyY2UgdGhhdCBjYW4gYmUgZ2l2ZW4gdG8gYW55IEN5Y2xlLmpzIGFwcCB0aGF0IGV4cGVjdHMgYSBET01Tb3VyY2UgaW5cbiAqIHRoZSBzb3VyY2VzLCBmb3IgdGVzdGluZy5cbiAqXG4gKiBUaGUgYHN0cmVhbUFkYXB0ZXJgIHBhcmFtZXRlciBpcyBhIHBhY2thZ2Ugc3VjaCBhcyBgQGN5Y2xlL3hzdHJlYW0tYWRhcHRlcmAsXG4gKiBgQGN5Y2xlL3J4anMtYWRhcHRlcmAsIGV0Yy4gSW1wb3J0IGl0IGFzIGBpbXBvcnQgYSBmcm9tICdAY3ljbGUvcngtYWRhcHRlcmAsXG4gKiB0aGVuIHByb3ZpZGUgaXQgdG8gYG1vY2tET01Tb3VyY2UuIFRoaXMgaXMgaW1wb3J0YW50IHNvIHRoZSBET01Tb3VyY2UgY3JlYXRlZFxuICoga25vd3Mgd2hpY2ggc3RyZWFtIGxpYnJhcnkgc2hvdWxkIGl0IHVzZSB0byBleHBvcnQgaXRzIHN0cmVhbXMgd2hlbiB5b3UgY2FsbFxuICogYERPTVNvdXJjZS5ldmVudHMoKWAgZm9yIGluc3RhbmNlLlxuICpcbiAqIFRoZSBgbW9ja0NvbmZpZ2AgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCBzcGVjaWZ5aW5nIHNlbGVjdG9ycywgZXZlbnRUeXBlcyBhbmRcbiAqIHRoZWlyIHN0cmVhbXMuIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGNvbnN0IGRvbVNvdXJjZSA9IG1vY2tET01Tb3VyY2UoUnhBZGFwdGVyLCB7XG4gKiAgICcuZm9vJzoge1xuICogICAgICdjbGljayc6IFJ4Lk9ic2VydmFibGUub2Yoe3RhcmdldDoge319KSxcbiAqICAgICAnbW91c2VvdmVyJzogUnguT2JzZXJ2YWJsZS5vZih7dGFyZ2V0OiB7fX0pLFxuICogICB9LFxuICogICAnLmJhcic6IHtcbiAqICAgICAnc2Nyb2xsJzogUnguT2JzZXJ2YWJsZS5vZih7dGFyZ2V0OiB7fX0pLFxuICogICAgIGVsZW1lbnRzOiBSeC5PYnNlcnZhYmxlLm9mKHt0YWdOYW1lOiAnZGl2J30pLFxuICogICB9XG4gKiB9KTtcbiAqXG4gKiAvLyBVc2FnZVxuICogY29uc3QgY2xpY2skID0gZG9tU291cmNlLnNlbGVjdCgnLmZvbycpLmV2ZW50cygnY2xpY2snKTtcbiAqIGNvbnN0IGVsZW1lbnQkID0gZG9tU291cmNlLnNlbGVjdCgnLmJhcicpLmVsZW1lbnRzKCk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgbW9ja2VkIERPTSBTb3VyY2Ugc3VwcG9ydHMgaXNvbGF0aW9uLiBJdCBoYXMgdGhlIGZ1bmN0aW9ucyBgaXNvbGF0ZVNpbmtgXG4gKiBhbmQgYGlzb2xhdGVTb3VyY2VgIGF0dGFjaGVkIHRvIGl0LCBhbmQgcGVyZm9ybXMgc2ltcGxlIGlzb2xhdGlvbiB1c2luZ1xuICogY2xhc3NOYW1lcy4gKmlzb2xhdGVTaW5rKiB3aXRoIHNjb3BlIGBmb29gIHdpbGwgYXBwZW5kIHRoZSBjbGFzcyBgX19fZm9vYCB0b1xuICogdGhlIHN0cmVhbSBvZiB2aXJ0dWFsIERPTSBub2RlcywgYW5kICppc29sYXRlU291cmNlKiB3aXRoIHNjb3BlIGBmb29gIHdpbGxcbiAqIHBlcmZvcm0gYSBjb252ZW50aW9uYWwgYG1vY2tlZERPTVNvdXJjZS5zZWxlY3QoJy5fX2ZvbycpYCBjYWxsLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtb2NrQ29uZmlnIGFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBzZWxlY3RvciBzdHJpbmdzXG4gKiBhbmQgdmFsdWVzIGFyZSBvYmplY3RzLiBUaG9zZSBuZXN0ZWQgb2JqZWN0cyBoYXZlIGBldmVudFR5cGVgIHN0cmluZ3MgYXMga2V5c1xuICogYW5kIHZhbHVlcyBhcmUgc3RyZWFtcyB5b3UgY3JlYXRlZC5cbiAqIEByZXR1cm4ge09iamVjdH0gZmFrZSBET00gc291cmNlIG9iamVjdCwgd2l0aCBhbiBBUEkgY29udGFpbmluZyBgc2VsZWN0KClgXG4gKiBhbmQgYGV2ZW50cygpYCBhbmQgYGVsZW1lbnRzKClgIHdoaWNoIGNhbiBiZSB1c2VkIGp1c3QgbGlrZSB0aGUgRE9NIERyaXZlcidzXG4gKiBET01Tb3VyY2UuXG4gKlxuICogQGZ1bmN0aW9uIG1vY2tET01Tb3VyY2VcbiAqL1xudmFyIG1vY2tET01Tb3VyY2VfMSA9IHJlcXVpcmUoXCIuL21vY2tET01Tb3VyY2VcIik7XG5leHBvcnRzLm1vY2tET01Tb3VyY2UgPSBtb2NrRE9NU291cmNlXzEubW9ja0RPTVNvdXJjZTtcbmV4cG9ydHMuTW9ja2VkRE9NU291cmNlID0gbW9ja0RPTVNvdXJjZV8xLk1vY2tlZERPTVNvdXJjZTtcbi8qKlxuICogVGhlIGh5cGVyc2NyaXB0IGZ1bmN0aW9uIGBoKClgIGlzIGEgZnVuY3Rpb24gdG8gY3JlYXRlIHZpcnR1YWwgRE9NIG9iamVjdHMsXG4gKiBhbHNvIGtub3duIGFzIFZOb2Rlcy4gQ2FsbFxuICpcbiAqIGBgYGpzXG4gKiBoKCdkaXYubXlDbGFzcycsIHtzdHlsZToge2NvbG9yOiAncmVkJ319LCBbXSlcbiAqIGBgYFxuICpcbiAqIHRvIGNyZWF0ZSBhIFZOb2RlIHRoYXQgcmVwcmVzZW50cyBhIGBESVZgIGVsZW1lbnQgd2l0aCBjbGFzc05hbWUgYG15Q2xhc3NgLFxuICogc3R5bGVkIHdpdGggcmVkIGNvbG9yLCBhbmQgbm8gY2hpbGRyZW4gYmVjYXVzZSB0aGUgYFtdYCBhcnJheSB3YXMgcGFzc2VkLiBUaGVcbiAqIEFQSSBpcyBgaCh0YWdPclNlbGVjdG9yLCBvcHRpb25hbERhdGEsIG9wdGlvbmFsQ2hpbGRyZW5PclRleHQpYC5cbiAqXG4gKiBIb3dldmVyLCB1c3VhbGx5IHlvdSBzaG91bGQgdXNlIFwiaHlwZXJzY3JpcHQgaGVscGVyc1wiLCB3aGljaCBhcmUgc2hvcnRjdXRcbiAqIGZ1bmN0aW9ucyBiYXNlZCBvbiBoeXBlcnNjcmlwdC4gVGhlcmUgaXMgb25lIGh5cGVyc2NyaXB0IGhlbHBlciBmdW5jdGlvbiBmb3JcbiAqIGVhY2ggRE9NIHRhZ05hbWUsIHN1Y2ggYXMgYGgxKClgLCBgaDIoKWAsIGBkaXYoKWAsIGBzcGFuKClgLCBgbGFiZWwoKWAsXG4gKiBgaW5wdXQoKWAuIEZvciBpbnN0YW5jZSwgdGhlIHByZXZpb3VzIGV4YW1wbGUgY291bGQgaGF2ZSBiZWVuIHdyaXR0ZW5cbiAqIGFzOlxuICpcbiAqIGBgYGpzXG4gKiBkaXYoJy5teUNsYXNzJywge3N0eWxlOiB7Y29sb3I6ICdyZWQnfX0sIFtdKVxuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIGFsc28gU1ZHIGhlbHBlciBmdW5jdGlvbnMsIHdoaWNoIGFwcGx5IHRoZSBhcHByb3ByaWF0ZSBTVkdcbiAqIG5hbWVzcGFjZSB0byB0aGUgcmVzdWx0aW5nIGVsZW1lbnRzLiBgc3ZnKClgIGZ1bmN0aW9uIGNyZWF0ZXMgdGhlIHRvcC1tb3N0XG4gKiBTVkcgZWxlbWVudCwgYW5kIGBzdmcuZ2AsIGBzdmcucG9seWdvbmAsIGBzdmcuY2lyY2xlYCwgYHN2Zy5wYXRoYCBhcmUgZm9yXG4gKiBTVkctc3BlY2lmaWMgY2hpbGQgZWxlbWVudHMuIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHN2Zyh7d2lkdGg6IDE1MCwgaGVpZ2h0OiAxNTB9LCBbXG4gKiAgIHN2Zy5wb2x5Z29uKHtcbiAqICAgICBhdHRyczoge1xuICogICAgICAgY2xhc3M6ICd0cmlhbmdsZScsXG4gKiAgICAgICBwb2ludHM6ICcyMCAwIDIwIDE1MCAxNTAgMjAnXG4gKiAgICAgfVxuICogICB9KVxuICogXSlcbiAqIGBgYFxuICpcbiAqIEBmdW5jdGlvbiBoXG4gKi9cbnZhciBoXzEgPSByZXF1aXJlKFwic25hYmJkb20vaFwiKTtcbmV4cG9ydHMuaCA9IGhfMS5oO1xudmFyIGh5cGVyc2NyaXB0X2hlbHBlcnNfMSA9IHJlcXVpcmUoXCIuL2h5cGVyc2NyaXB0LWhlbHBlcnNcIik7XG5leHBvcnRzLnN2ZyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnN2ZztcbmV4cG9ydHMuYSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmE7XG5leHBvcnRzLmFiYnIgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5hYmJyO1xuZXhwb3J0cy5hZGRyZXNzID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYWRkcmVzcztcbmV4cG9ydHMuYXJlYSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmFyZWE7XG5leHBvcnRzLmFydGljbGUgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5hcnRpY2xlO1xuZXhwb3J0cy5hc2lkZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmFzaWRlO1xuZXhwb3J0cy5hdWRpbyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmF1ZGlvO1xuZXhwb3J0cy5iID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYjtcbmV4cG9ydHMuYmFzZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmJhc2U7XG5leHBvcnRzLmJkaSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmJkaTtcbmV4cG9ydHMuYmRvID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYmRvO1xuZXhwb3J0cy5ibG9ja3F1b3RlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYmxvY2txdW90ZTtcbmV4cG9ydHMuYm9keSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmJvZHk7XG5leHBvcnRzLmJyID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuYnI7XG5leHBvcnRzLmJ1dHRvbiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmJ1dHRvbjtcbmV4cG9ydHMuY2FudmFzID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuY2FudmFzO1xuZXhwb3J0cy5jYXB0aW9uID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuY2FwdGlvbjtcbmV4cG9ydHMuY2l0ZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmNpdGU7XG5leHBvcnRzLmNvZGUgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5jb2RlO1xuZXhwb3J0cy5jb2wgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5jb2w7XG5leHBvcnRzLmNvbGdyb3VwID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuY29sZ3JvdXA7XG5leHBvcnRzLmRkID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZGQ7XG5leHBvcnRzLmRlbCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmRlbDtcbmV4cG9ydHMuZGZuID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZGZuO1xuZXhwb3J0cy5kaXIgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5kaXI7XG5leHBvcnRzLmRpdiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmRpdjtcbmV4cG9ydHMuZGwgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5kbDtcbmV4cG9ydHMuZHQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5kdDtcbmV4cG9ydHMuZW0gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5lbTtcbmV4cG9ydHMuZW1iZWQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5lbWJlZDtcbmV4cG9ydHMuZmllbGRzZXQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5maWVsZHNldDtcbmV4cG9ydHMuZmlnY2FwdGlvbiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmZpZ2NhcHRpb247XG5leHBvcnRzLmZpZ3VyZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmZpZ3VyZTtcbmV4cG9ydHMuZm9vdGVyID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZm9vdGVyO1xuZXhwb3J0cy5mb3JtID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuZm9ybTtcbmV4cG9ydHMuaDEgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5oMTtcbmV4cG9ydHMuaDIgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5oMjtcbmV4cG9ydHMuaDMgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5oMztcbmV4cG9ydHMuaDQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5oNDtcbmV4cG9ydHMuaDUgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5oNTtcbmV4cG9ydHMuaDYgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5oNjtcbmV4cG9ydHMuaGVhZCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmhlYWQ7XG5leHBvcnRzLmhlYWRlciA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmhlYWRlcjtcbmV4cG9ydHMuaGdyb3VwID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaGdyb3VwO1xuZXhwb3J0cy5ociA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmhyO1xuZXhwb3J0cy5odG1sID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaHRtbDtcbmV4cG9ydHMuaSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lmk7XG5leHBvcnRzLmlmcmFtZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmlmcmFtZTtcbmV4cG9ydHMuaW1nID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuaW1nO1xuZXhwb3J0cy5pbnB1dCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmlucHV0O1xuZXhwb3J0cy5pbnMgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5pbnM7XG5leHBvcnRzLmtiZCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmtiZDtcbmV4cG9ydHMua2V5Z2VuID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQua2V5Z2VuO1xuZXhwb3J0cy5sYWJlbCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LmxhYmVsO1xuZXhwb3J0cy5sZWdlbmQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5sZWdlbmQ7XG5leHBvcnRzLmxpID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQubGk7XG5leHBvcnRzLmxpbmsgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5saW5rO1xuZXhwb3J0cy5tYWluID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQubWFpbjtcbmV4cG9ydHMubWFwID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQubWFwO1xuZXhwb3J0cy5tYXJrID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQubWFyaztcbmV4cG9ydHMubWVudSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lm1lbnU7XG5leHBvcnRzLm1ldGEgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5tZXRhO1xuZXhwb3J0cy5uYXYgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5uYXY7XG5leHBvcnRzLm5vc2NyaXB0ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQubm9zY3JpcHQ7XG5leHBvcnRzLm9iamVjdCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0Lm9iamVjdDtcbmV4cG9ydHMub2wgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5vbDtcbmV4cG9ydHMub3B0Z3JvdXAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5vcHRncm91cDtcbmV4cG9ydHMub3B0aW9uID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQub3B0aW9uO1xuZXhwb3J0cy5wID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQucDtcbmV4cG9ydHMucGFyYW0gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5wYXJhbTtcbmV4cG9ydHMucHJlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQucHJlO1xuZXhwb3J0cy5wcm9ncmVzcyA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnByb2dyZXNzO1xuZXhwb3J0cy5xID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQucTtcbmV4cG9ydHMucnAgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5ycDtcbmV4cG9ydHMucnQgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5ydDtcbmV4cG9ydHMucnVieSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnJ1Ynk7XG5leHBvcnRzLnMgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zO1xuZXhwb3J0cy5zYW1wID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc2FtcDtcbmV4cG9ydHMuc2NyaXB0ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc2NyaXB0O1xuZXhwb3J0cy5zZWN0aW9uID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc2VjdGlvbjtcbmV4cG9ydHMuc2VsZWN0ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc2VsZWN0O1xuZXhwb3J0cy5zbWFsbCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnNtYWxsO1xuZXhwb3J0cy5zb3VyY2UgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zb3VyY2U7XG5leHBvcnRzLnNwYW4gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zcGFuO1xuZXhwb3J0cy5zdHJvbmcgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC5zdHJvbmc7XG5leHBvcnRzLnN0eWxlID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc3R5bGU7XG5leHBvcnRzLnN1YiA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnN1YjtcbmV4cG9ydHMuc3VwID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQuc3VwO1xuZXhwb3J0cy50YWJsZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRhYmxlO1xuZXhwb3J0cy50Ym9keSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRib2R5O1xuZXhwb3J0cy50ZCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRkO1xuZXhwb3J0cy50ZXh0YXJlYSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRleHRhcmVhO1xuZXhwb3J0cy50Zm9vdCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRmb290O1xuZXhwb3J0cy50aCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRoO1xuZXhwb3J0cy50aGVhZCA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRoZWFkO1xuZXhwb3J0cy50aXRsZSA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRpdGxlO1xuZXhwb3J0cy50ciA9IGh5cGVyc2NyaXB0X2hlbHBlcnNfMS5kZWZhdWx0LnRyO1xuZXhwb3J0cy51ID0gaHlwZXJzY3JpcHRfaGVscGVyc18xLmRlZmF1bHQudTtcbmV4cG9ydHMudWwgPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC51bDtcbmV4cG9ydHMudmlkZW8gPSBoeXBlcnNjcmlwdF9oZWxwZXJzXzEuZGVmYXVsdC52aWRlbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5cbmxldCBjb3VudGVyID0gMDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY29wZSgpOiBzdHJpbmcge1xuICByZXR1cm4gYGNzLXVpJHsrK2NvdW50ZXJ9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0cmluZyA/IHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKSA6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoQ2xhc3NMaXN0KHRhcmdldDogVk5vZGUsIGNsYXNzZXM6IHN0cmluZ1tdLCBjbGFzc2VzVG9BZGQ6IHN0cmluZykge1xuICBsZXQgY2xhc3NOYW1lID0gXCJcIjtcbiAgaWYgKHRhcmdldC5kYXRhKSB7XG4gICAgbGV0IHByb3BzID0gdGFyZ2V0LmRhdGEucHJvcHMgPyB0YXJnZXQuZGF0YS5wcm9wcyA6IHsgY2xhc3NOYW1lOiB0YXJnZXQuc2VsLnNwbGl0KFwiLlwiKS5qb2luKFwiIFwiKSB9O1xuICAgIGxldCBjbGFzc0xpc3QgPSBwcm9wcy5jbGFzc05hbWUuc3BsaXQoXCIgXCIpIGFzIEFycmF5PHN0cmluZz47XG4gICAgY2xhc3NMaXN0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoY2xhc3Nlcy5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xuICAgICAgICBjbGFzc05hbWUgKz0gaXRlbSArIFwiIFwiO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNsYXNzTmFtZSArPSBjbGFzc2VzVG9BZGQ7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQuZGF0YSwge1xuICAgIFwicHJvcHNcIjoge1xuICAgICAgY2xhc3NOYW1lXG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBBZGRzIG9uZSBWTm9kZSB0byBhbm90aGVyIGFuZCBoYW5kbGVzIHVwZGF0ZXMgZm9yIHN0cmVhbSBieSByZXBsYWNpbmcgYmFzZWQgb24gdGhlIGlkZW50aWZpZXIgY2xhc3MuXG4gKiBAcGFyYW0gIHtWTm9kZX0gIGVsZW1lbnQgICAgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWQuXG4gKiBAcGFyYW0gIHtWTm9kZX0gIHRhcmdldCAgICAgVGhlIHRhcmdldCBmb3IgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSAge3N0cmluZ30gaWRlbnRpZmllciBUaGUgaWRlbnRpZnlpbmcgY2xhc3MgZm9yIHRoZSBlbGVtZW50IHRvIGJlIGFkZGVkLlxuICogQHJldHVybiB7QXJyYXl9IFRoZSB0YXJnZXQgZWxlbWVudCdzIGNoaWxkcmVuIHdpdGggdGhlIGVsZW1lbnQgYWRkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFbGVtZW50KGVsZW1lbnQ6IFZOb2RlLCB0YXJnZXQ6IFZOb2RlLCBpZGVudGlmaWVyOiBzdHJpbmcpOiBBcnJheTxWTm9kZT4ge1xuICBsZXQgYyA9IFtdO1xuICBpZiAodGFyZ2V0LmNoaWxkcmVuKSB7XG4gICAgYyA9IHRhcmdldC5jaGlsZHJlbjtcbiAgfVxuICBpZiAodGFyZ2V0LnRleHQpIHtcbiAgICBjLnB1c2godGFyZ2V0LnRleHQpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjaGlsZCA9IGNbaV07XG4gICAgbGV0IGNQcm9wcyA9IGNoaWxkLmRhdGEgPyBjaGlsZC5kYXRhLnByb3BzID8gY2hpbGQuZGF0YS5wcm9wcyA6IHt9IDoge307XG4gICAgaWYgKHR5cGVvZiAoY2hpbGQpICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiAoY1Byb3BzLmNsYXNzTmFtZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGxldCBjbGFzc0xpc3QgPSBjaGlsZC5kYXRhLnByb3BzLmNsYXNzTmFtZS5zcGxpdChcIiBcIikgYXMgQXJyYXk8c3RyaW5nPjtcbiAgICAgIGZvciAobGV0IHMgb2YgY2xhc3NMaXN0KSB7XG4gICAgICAgIGlmIChzID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgICAgYy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYy5wdXNoKGVsZW1lbnQpO1xuICByZXR1cm4gYztcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIGEgbmF0dXJhbCBudW1iZXIgYmV0d2VlbiAxLTE2IHRvIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICBUaGF0IG51bWJlciBhcyB0ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbnVtVG9UZXh0KG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgc3dpdGNoIChudW0pIHtcbiAgICBjYXNlIDE6IHJldHVybiBcIiBvbmVcIjtcbiAgICBjYXNlIDI6IHJldHVybiBcIiB0d29cIjtcbiAgICBjYXNlIDM6IHJldHVybiBcIiB0aHJlZVwiO1xuICAgIGNhc2UgNDogcmV0dXJuIFwiIGZvdXJcIjtcbiAgICBjYXNlIDU6IHJldHVybiBcIiBmaXZlXCI7XG4gICAgY2FzZSA2OiByZXR1cm4gXCIgc2l4XCI7XG4gICAgY2FzZSA3OiByZXR1cm4gXCIgc2V2ZW5cIjtcbiAgICBjYXNlIDg6IHJldHVybiBcIiBlaWdodFwiO1xuICAgIGNhc2UgOTogcmV0dXJuIFwiIG5pbmVcIjtcbiAgICBjYXNlIDEwOiByZXR1cm4gXCIgdGVuXCI7XG4gICAgY2FzZSAxMTogcmV0dXJuIFwiIGVsZXZlblwiO1xuICAgIGNhc2UgMTI6IHJldHVybiBcIiB0d2VsdmVcIjtcbiAgICBjYXNlIDEzOiByZXR1cm4gXCIgdGhpcnRlZW5cIjtcbiAgICBjYXNlIDE0OiByZXR1cm4gXCIgZm91cnRlZW5cIjtcbiAgICBjYXNlIDE1OiByZXR1cm4gXCIgZmlmdGVlblwiO1xuICAgIGNhc2UgMTY6IHJldHVybiBcIiBzaXh0ZWVuXCI7XG4gICAgZGVmYXVsdDogcmV0dXJuIFwiIG9uZVwiO1xuICB9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9pbmRleC50cyIsImV4cG9ydCAqIGZyb20gXCIuLi9zcmNcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL3VpLnRzIiwiaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gXCIuLi91dGlsc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaWNvblR5cGVcIjtcblxuXG5leHBvcnQgZW51bSBTaXplIHtcbiAgTWluaSwgVGlueSwgU21hbGwsIE1lZGl1bSwgTGFyZ2UsIEJpZywgSHVnZSwgTWFzc2l2ZSwgRmx1aWRcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBTaXplIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIFRvRW51bShzaXplT3JTdHJpbmc6IFNpemUgfCBzdHJpbmcpOiBTaXplIHtcbiAgICByZXR1cm4gdHlwZW9mIChzaXplT3JTdHJpbmcpID09PSBcIm51bWJlclwiXG4gICAgICA/IHNpemVPclN0cmluZ1xuICAgICAgOiBTaXplW2NhcGl0YWxpemUoc2l6ZU9yU3RyaW5nKV07XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIFRvQ2xhc3NuYW1lKHNpemU6IFNpemUgfCBzdHJpbmcpIHtcbiAgICBzaXplID0gVG9FbnVtKHNpemUpO1xuICAgIHN3aXRjaCAoc2l6ZSkge1xuICAgICAgY2FzZSBTaXplLk1pbmk6IHJldHVybiBcIiBtaW5pXCI7XG4gICAgICBjYXNlIFNpemUuVGlueTogcmV0dXJuIFwiIHRpbnlcIjtcbiAgICAgIGNhc2UgU2l6ZS5TbWFsbDogcmV0dXJuIFwiIHNtYWxsXCI7XG4gICAgICBjYXNlIFNpemUuTWVkaXVtOiByZXR1cm4gXCIgbWVkaXVtXCI7XG4gICAgICBjYXNlIFNpemUuTGFyZ2U6IHJldHVybiBcIiBsYXJnZVwiO1xuICAgICAgY2FzZSBTaXplLkJpZzogcmV0dXJuIFwiIGJpZ1wiO1xuICAgICAgY2FzZSBTaXplLkh1Z2U6IHJldHVybiBcIiBodWdlXCI7XG4gICAgICBjYXNlIFNpemUuTWFzc2l2ZTogcmV0dXJuIFwiIG1hc3NpdmVcIjtcbiAgICAgIGNhc2UgU2l6ZS5GbHVpZDogcmV0dXJuIFwiIGZsdWlkXCI7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gXCJcIjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gVmVydGljYWxBbGlnbm1lbnQge1xuICBUb3AsIE1pZGRsZSwgQm90dG9tXG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmVydGljYWxBbGlnbm1lbnQge1xuICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKHZBbGlnbm1lbnRPclN0cmluZzogVmVydGljYWxBbGlnbm1lbnQgfCBzdHJpbmcpOiBWZXJ0aWNhbEFsaWdubWVudCB7XG4gICAgcmV0dXJuIHR5cGVvZiAodkFsaWdubWVudE9yU3RyaW5nKSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyB2QWxpZ25tZW50T3JTdHJpbmdcbiAgICAgIDogVmVydGljYWxBbGlnbm1lbnRbY2FwaXRhbGl6ZSh2QWxpZ25tZW50T3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoYWxpZ25tZW50OiBWZXJ0aWNhbEFsaWdubWVudCB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgYWxpZ25tZW50ID0gVmVydGljYWxBbGlnbm1lbnQuVG9FbnVtKGFsaWdubWVudCk7XG4gICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgIGNhc2UgVmVydGljYWxBbGlnbm1lbnQuVG9wOiByZXR1cm4gXCIgdG9wIGFsaWduZWRcIjtcbiAgICAgIGNhc2UgVmVydGljYWxBbGlnbm1lbnQuTWlkZGxlOiByZXR1cm4gXCIgbWlkZGxlIGFsaWduZWRcIjtcbiAgICAgIGNhc2UgVmVydGljYWxBbGlnbm1lbnQuQm90dG9tOiByZXR1cm4gXCIgYm90dG9tIGFsaWduZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBUZXh0QWxpZ25tZW50IHtcbiAgTGVmdCwgUmlnaHQsIENlbnRlciwgSnVzdGlmaWVkXG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVGV4dEFsaWdubWVudCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0VudW0odEFsaWdubWVudE9yU3RyaW5nOiBUZXh0QWxpZ25tZW50IHwgc3RyaW5nKTogVGV4dEFsaWdubWVudCB7XG4gICAgcmV0dXJuIHR5cGVvZiAodEFsaWdubWVudE9yU3RyaW5nKSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyB0QWxpZ25tZW50T3JTdHJpbmdcbiAgICAgIDogVGV4dEFsaWdubWVudFtjYXBpdGFsaXplKHRBbGlnbm1lbnRPclN0cmluZyldO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZShhbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGFsaWdubWVudCA9IFRleHRBbGlnbm1lbnQuVG9FbnVtKGFsaWdubWVudCk7XG4gICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgIGNhc2UgVGV4dEFsaWdubWVudC5MZWZ0OiByZXR1cm4gXCIgbGVmdCBhbGlnbmVkXCI7XG4gICAgICBjYXNlIFRleHRBbGlnbm1lbnQuUmlnaHQ6IHJldHVybiBcIiByaWdodCBhbGlnbmVkXCI7XG4gICAgICBjYXNlIFRleHRBbGlnbm1lbnQuQ2VudGVyOiByZXR1cm4gXCIgY2VudGVyIGFsaWduZWRcIjtcbiAgICAgIGNhc2UgVGV4dEFsaWdubWVudC5KdXN0aWZpZWQ6IHJldHVybiBcIiBqdXN0aWZpZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBGbG9hdCB7XG4gIE5vbmUsIFJpZ2h0LCBMZWZ0XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmxvYXQge1xuICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKGZsb2F0T3JTdHJpbmc6IEZsb2F0IHwgc3RyaW5nKTogRmxvYXQge1xuICAgIHJldHVybiB0eXBlb2YgKGZsb2F0T3JTdHJpbmcpID09PSBcIm51bWJlclwiXG4gICAgICA/IGZsb2F0T3JTdHJpbmdcbiAgICAgIDogRmxvYXRbY2FwaXRhbGl6ZShmbG9hdE9yU3RyaW5nKV07XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIFRvQ2xhc3NuYW1lKGZsb2F0OiBGbG9hdCB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgZmxvYXQgPSBGbG9hdC5Ub0VudW0oZmxvYXQpO1xuICAgIHN3aXRjaCAoZmxvYXQpIHtcbiAgICAgIGNhc2UgRmxvYXQuTGVmdDogcmV0dXJuIFwiIGxlZnQgZmxvYXRlZFwiO1xuICAgICAgY2FzZSBGbG9hdC5SaWdodDogcmV0dXJuIFwiIHJpZ2h0IGZsb2F0ZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBBdHRhY2htZW50IHtcbiAgTm9uZSwgVG9wLCBCb3R0b21cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBBdHRhY2htZW50IHtcbiAgZXhwb3J0IGZ1bmN0aW9uIFRvRW51bShhdHRhY2htZW50T3JTdHJpbmc6IEF0dGFjaG1lbnQgfCBzdHJpbmcpOiBBdHRhY2htZW50IHtcbiAgICByZXR1cm4gdHlwZW9mIChhdHRhY2htZW50T3JTdHJpbmcpID09PSBcIm51bWJlclwiXG4gICAgICA/IGF0dGFjaG1lbnRPclN0cmluZ1xuICAgICAgOiBBdHRhY2htZW50W2NhcGl0YWxpemUoYXR0YWNobWVudE9yU3RyaW5nKV07XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIFRvQ2xhc3NuYW1lKGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGF0dGFjaG1lbnQgPSBBdHRhY2htZW50LlRvRW51bShhdHRhY2htZW50KTtcbiAgICBzd2l0Y2ggKGF0dGFjaG1lbnQpIHtcbiAgICAgIGNhc2UgQXR0YWNobWVudC5Ob25lOiByZXR1cm4gXCIgYXR0YWNoZWRcIjtcbiAgICAgIGNhc2UgQXR0YWNobWVudC5Ub3A6IHJldHVybiBcIiB0b3AgYXR0YWNoZWRcIjtcbiAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b206IHJldHVybiBcIiBib3R0b20gYXR0YWNoZWRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBDb2xvciB7XG4gIE5vbmUsIFByaW1hcnksIFNlY29uZGFyeSwgU3VjY2VzcywgSW5mbywgV2FybmluZywgRXJyb3Jcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDb2xvciB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0VudW0oY29sb3JPclN0cmluZzogQ29sb3IgfCBzdHJpbmcpOiBDb2xvciB7XG4gICAgcmV0dXJuIHR5cGVvZiAoY29sb3JPclN0cmluZykgPT09IFwibnVtYmVyXCJcbiAgICAgID8gY29sb3JPclN0cmluZ1xuICAgICAgOiBDb2xvcltjYXBpdGFsaXplKGNvbG9yT3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoY29sb3I6IENvbG9yIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb2xvciA9IENvbG9yLlRvRW51bShjb2xvcik7XG4gICAgc3dpdGNoIChjb2xvcikge1xuICAgICAgY2FzZSBDb2xvci5QcmltYXJ5OiByZXR1cm4gXCIgcHJpbWFyeUNvbG9yZWRcIjtcbiAgICAgIGNhc2UgQ29sb3IuU2Vjb25kYXJ5OiByZXR1cm4gXCIgc2Vjb25kYXJ5Q29sb3JlZFwiO1xuICAgICAgY2FzZSBDb2xvci5TdWNjZXNzOiByZXR1cm4gXCIgc3VjY2Vzc0NvbG9yZWRcIjtcbiAgICAgIGNhc2UgQ29sb3IuSW5mbzogcmV0dXJuIFwiIGluZm9Db2xvcmVkXCI7XG4gICAgICBjYXNlIENvbG9yLldhcm5pbmc6IHJldHVybiBcIiB3YXJuaW5nQ29sb3JlZFwiO1xuICAgICAgY2FzZSBDb2xvci5FcnJvcjogcmV0dXJuIFwiIGVycm9yQ29sb3JlZCBcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZW51bSBBbmltYXRpb24ge1xuICBCcm93c2UsIERyb3AsIEZhZGUsIEZsaXAsIFNjYWxlLCBGbHksIFNsaWRlLCBTd2luZyxcbiAgRmxhc2gsIFNoYWtlLCBCb3VuY2UsIFRhZGEsIFB1bHNlLCBKaWdnbGUsXG4gIE5vbmVcbn1cbmV4cG9ydCBuYW1lc3BhY2UgQW5pbWF0aW9uIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIFRvRW51bShhbmltYXRpb25PclN0cmluZzogQW5pbWF0aW9uIHwgc3RyaW5nKTogQW5pbWF0aW9uIHtcbiAgICByZXR1cm4gdHlwZW9mIChhbmltYXRpb25PclN0cmluZykgPT09IFwibnVtYmVyXCJcbiAgICAgID8gYW5pbWF0aW9uT3JTdHJpbmdcbiAgICAgIDogQW5pbWF0aW9uW2NhcGl0YWxpemUoYW5pbWF0aW9uT3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoYW5pbTogQW5pbWF0aW9uIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICBhbmltID0gQW5pbWF0aW9uLlRvRW51bShhbmltKTtcbiAgICBzd2l0Y2ggKGFuaW0pIHtcbiAgICAgIGNhc2UgQW5pbWF0aW9uLkJyb3dzZTogcmV0dXJuIFwiIGJyb3dzZVwiO1xuICAgICAgY2FzZSBBbmltYXRpb24uRHJvcDogcmV0dXJuIFwiIGRyb3BcIjtcbiAgICAgIGNhc2UgQW5pbWF0aW9uLkZhZGU6IHJldHVybiBcIiBmYWRlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5GbGlwOiByZXR1cm4gXCIgZmxpcFwiO1xuICAgICAgY2FzZSBBbmltYXRpb24uU2NhbGU6IHJldHVybiBcIiBzY2FsZVwiO1xuICAgICAgY2FzZSBBbmltYXRpb24uRmx5OiByZXR1cm4gXCIgZmx5XCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5TbGlkZTogcmV0dXJuIFwiIHNsaWRlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5Td2luZzogcmV0dXJuIFwiIHN3aW5nXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5GbGFzaDogcmV0dXJuIFwiIGZsYXNoXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5TaGFrZTogcmV0dXJuIFwiIHNoYWtlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5Cb3VuY2U6IHJldHVybiBcIiBib3VuY2VcIjtcbiAgICAgIGNhc2UgQW5pbWF0aW9uLlRhZGE6IHJldHVybiBcIiB0YWRhXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5QdWxzZTogcmV0dXJuIFwiIHB1bHNlXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbi5KaWdnbGU6IHJldHVybiBcIiBqaWdnbGVcIjtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc3RhdGljQW5pbWF0aW9ucyA9IFtBbmltYXRpb24uRmxhc2gsIEFuaW1hdGlvbi5TaGFrZSxcbiAgQW5pbWF0aW9uLkJvdW5jZSwgQW5pbWF0aW9uLlRhZGEsIEFuaW1hdGlvbi5QdWxzZSwgQW5pbWF0aW9uLkppZ2dsZV07XG4gIGV4cG9ydCBmdW5jdGlvbiBpc1N0YXRpYyhhbmltOiBBbmltYXRpb258c3RyaW5nKTogQm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0YXRpY0FuaW1hdGlvbnMuaW5kZXhPZihBbmltYXRpb24uVG9FbnVtKGFuaW0pKSAhPT0gLTE7XG4gIH1cbiAgY29uc3QgZGlyZWN0aW9uQW5pbWF0aW9ucyA9IFtBbmltYXRpb24uQnJvd3NlLCBBbmltYXRpb24uRmFkZSxcbiAgQW5pbWF0aW9uLkZseSwgQW5pbWF0aW9uLlNsaWRlLCBBbmltYXRpb24uU3dpbmddO1xuICBleHBvcnQgZnVuY3Rpb24gaXNEaXJlY3Rpb25hbChhbmltOiBBbmltYXRpb258c3RyaW5nKTogQm9vbGVhbiB7XG4gICAgcmV0dXJuIGRpcmVjdGlvbkFuaW1hdGlvbnMuaW5kZXhPZihBbmltYXRpb24uVG9FbnVtKGFuaW0pKSAhPT0gLTE7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gRGlyZWN0aW9uIHtcbiAgSW4sIE91dCwgTm9uZVxufVxuZXhwb3J0IG5hbWVzcGFjZSBEaXJlY3Rpb24ge1xuICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKGRpcmVjdGlvbk9yU3RyaW5nOiBEaXJlY3Rpb24gfCBzdHJpbmcpOiBEaXJlY3Rpb24ge1xuICAgIHJldHVybiB0eXBlb2YgKGRpcmVjdGlvbk9yU3RyaW5nKSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyBkaXJlY3Rpb25PclN0cmluZ1xuICAgICAgOiBEaXJlY3Rpb25bY2FwaXRhbGl6ZShkaXJlY3Rpb25PclN0cmluZyldO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZShkaXJlY3Rpb246IERpcmVjdGlvbiB8IHN0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IERpcmVjdGlvbi5Ub0VudW0oZGlyZWN0aW9uKTtcbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uSW4gPyBcIiBpblwiIDogXCIgb3V0XCI7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gQW5pbWF0aW9uRGlyZWN0aW9uIHtcbiAgVXAsIERvd24sIExlZnQsIFJpZ2h0XG59XG5leHBvcnQgbmFtZXNwYWNlIEFuaW1hdGlvbkRpcmVjdGlvbiB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0VudW0oYW5pbWF0aW9uRGlyZWN0aW9uT3JTdHJpbmc6IEFuaW1hdGlvbkRpcmVjdGlvbiB8IHN0cmluZyk6IEFuaW1hdGlvbkRpcmVjdGlvbiB7XG4gICAgcmV0dXJuIHR5cGVvZihhbmltYXRpb25EaXJlY3Rpb25PclN0cmluZykgPT09IFwibnVtYmVyXCJcbiAgICAgID8gYW5pbWF0aW9uRGlyZWN0aW9uT3JTdHJpbmdcbiAgICAgIDogQW5pbWF0aW9uRGlyZWN0aW9uW2NhcGl0YWxpemUoYW5pbWF0aW9uRGlyZWN0aW9uT3JTdHJpbmcpXTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoZGlyOiBBbmltYXRpb25EaXJlY3Rpb258c3RyaW5nKSA6IHN0cmluZyB7XG4gICAgZGlyID0gQW5pbWF0aW9uRGlyZWN0aW9uLlRvRW51bShkaXIpO1xuICAgIHN3aXRjaCAoZGlyKSB7XG4gICAgICBjYXNlIEFuaW1hdGlvbkRpcmVjdGlvbi5VcDogcmV0dXJuIFwiIHVwXCI7XG4gICAgICBjYXNlIEFuaW1hdGlvbkRpcmVjdGlvbi5Eb3duOiByZXR1cm4gXCIgZG93blwiO1xuICAgICAgY2FzZSBBbmltYXRpb25EaXJlY3Rpb24uTGVmdDogcmV0dXJuIFwiIGxlZnRcIjtcbiAgICAgIGNhc2UgQW5pbWF0aW9uRGlyZWN0aW9uLlJpZ2h0OiByZXR1cm4gXCIgcmlnaHRcIjtcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcIlwiO1xuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VudW1zL2luZGV4LnRzIiwiXG5pbXBvcnQgeHMgZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50U291cmNlcywgQ29udGVudE9iaiwgQ29tcG9uZW50U2lua3MsIFN0eWxlQW5kQ29udGVudEFyZ3MgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgUmVuZGVyRm48UCwgQiwgQyBleHRlbmRzIENvbnRlbnRPYmo8Qj4+ID0gKGFyZzogU3R5bGVBbmRDb250ZW50QXJnczxQLCBCLCBDPikgPT4gVk5vZGU7XG5leHBvcnQgdHlwZSBJc0JGbjxCPiA9IChvYmopID0+IG9iaiBpcyBCO1xuZXhwb3J0IHR5cGUgSXNBcmdzRm48UCxCLEMgZXh0ZW5kcyBDb250ZW50T2JqPEI+PiA9IChvYmopID0+IG9iaiBpcyBTdHlsZUFuZENvbnRlbnRBcmdzPFAsIEIsIEM+O1xuXG4vL0NvbW1vbiByZW5kZXIgZnVuY3Rpb24gZm9yIGFsbCBiYXNpYyBDb21wb25lbnRzXG4vL1JlZm9ybWF0cyB0aGUgdmFyaW91cyBzeW50YXhlcyBpbnRvIFN0eWxlQW5kQ29udGVudEFyZ3MgXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUHJvcHNBbmRDb250ZW50PFAsIEIsIEMgZXh0ZW5kcyBDb250ZW50T2JqPEI+PihcbiAgcmVuZGVyRm46IFJlbmRlckZuPFAsIEIsIEM+LCBpc0FyZ3M6IElzQXJnc0ZuPFAsQixDPiwgaXNCOiBJc0JGbjxCPiwgXG4gIGFyZzE/OiBQYXJ0aWFsPFA+IHwgQiB8IFN0eWxlQW5kQ29udGVudEFyZ3M8UCwgQiwgQz4sIGFyZzI/OiBCXG4pIHtcbiAgaWYgKGlzQXJncyhhcmcxKSkge1xuICAgIHJldHVybiByZW5kZXJGbihhcmcxKTtcbiAgfVxuICBsZXQgYXJncyA9IHt9IGFzIFN0eWxlQW5kQ29udGVudEFyZ3M8UCwgQiwgQz47XG4gIGlmIChpc0IoYXJnMSkpIHtcbiAgICBhcmdzLnByb3BzID0ge30gYXMgUGFydGlhbDxQPjtcbiAgICBhcmdzLmNvbnRlbnQgPSBhcmcxO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MucHJvcHMgPSBhcmcxIHx8IHt9IGFzIFBhcnRpYWw8UD47XG4gICAgYXJncy5jb250ZW50ID0gYXJnMjtcbiAgfVxuICByZXR1cm4gcmVuZGVyRm4oYXJncyk7XG59XG5cbi8vQ29tbW9uIHJ1biBmdW5jdGlvbiBmb3IgYWxsIGJhc2ljIENvbXBvbmVudHNcbi8vSXNvbGF0ZXMgdGhlIHJlbmRlcmVkIGNvbXBvbmVudCBhbmQgZXhwb3NlcyBldmVudHNcbmV4cG9ydCBmdW5jdGlvbiBydW5Qcm9wc0FuZENvbnRlbnQ8UCwgQiwgQyBleHRlbmRzIENvbnRlbnRPYmo8Qj4+KFxuICBzb3VyY2VzOiBDb21wb25lbnRTb3VyY2VzPFAsIEIsIEM+LCByZW5kZXI6IFJlbmRlckZuPFAsIEIsIEM+LFxuICBzZWxlY3Rvcjogc3RyaW5nLCBzY29wZT86IHN0cmluZ1xuKTogQ29tcG9uZW50U2lua3Mge1xuICBmdW5jdGlvbiBtYWluKHNvdXJjZXM6IENvbXBvbmVudFNvdXJjZXM8UCwgQiwgQz4pIHtcbiAgICBzb3VyY2VzLnByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7fSBhcyBQYXJ0aWFsPFA+KTtcbiAgICBzb3VyY2VzLmNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQgOiB4cy5vZih1bmRlZmluZWQgYXMgUGFydGlhbDxDPik7XG4gICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZShzb3VyY2VzLnByb3BzJCwgc291cmNlcy5jb250ZW50JClcbiAgICAgIC5tYXAoKFtwcm9wcywgY29udGVudF0pID0+IHJlbmRlcih7cHJvcHMsY29udGVudH0pXG4gICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIGV2ZW50czogKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChzZWxlY3RvcikuZXZlbnRzKHR5cGUpLFxuICAgIH07XG4gIH1cbiAgaWYgKHNjb3BlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG1haW4oc291cmNlcyk7XG4gIH1cbiAgY29uc3QgaXNvbGF0ZWRNYWluID0gaXNvbGF0ZShtYWluLCBzY29wZSk7XG4gIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSXNBcmdzPFAsQixDIGV4dGVuZHMgQ29udGVudE9iajxCPj4oaXNCOiBJc0JGbjxCPikgOiBJc0FyZ3NGbjxQLEIsQz4ge1xuICByZXR1cm4gPChvYmopID0+IG9iaiBpcyBTdHlsZUFuZENvbnRlbnRBcmdzPFAsQixDPj4oKG9iaikgPT4gaXNBcmdzKG9iaiwgaXNCKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBcmdzPFAsIEIsIEM+KG9iaiwgaXNCOiBJc0JGbjxCPik6IG9iaiBpcyBTdHlsZUFuZENvbnRlbnRBcmdzPFAsIEIsIEM+IHtcbiAgcmV0dXJuIG9iaiAmJiAoXG4gICAgdHlwZW9mIChvYmoucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgKHR5cGVvZiAob2JqLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIChpc0Iob2JqLmNvbnRlbnQpIHx8IGlzQihvYmouY29udGVudC5tYWluKSkpXG4gICk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uL2luZGV4LnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vZG9tY29udGVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9uZW50XCJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy90eXBlcy9pbmRleC50cyIsImV4cG9ydCAqIGZyb20gXCIuL2V4YW1wbGVcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbXBvbmVudHMvaW5kZXgudHMiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGNoZWNrSXNvbGF0ZUFyZ3MoZGF0YWZsb3dDb21wb25lbnQsIHNjb3BlKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhZmxvd0NvbXBvbmVudCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IGdpdmVuIHRvIGlzb2xhdGUoKSBtdXN0IGJlIGEgXCIgK1xuICAgICAgICAgICAgXCInZGF0YWZsb3dDb21wb25lbnQnIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAoc2NvcGUgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vjb25kIGFyZ3VtZW50IGdpdmVuIHRvIGlzb2xhdGUoKSBtdXN0IG5vdCBiZSBudWxsXCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3Blcyhzb3VyY2VzLCBzY29wZXMsIHJhbmRvbVNjb3BlKSB7XG4gICAgdmFyIHBlckNoYW5uZWwgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NvcGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcGVyQ2hhbm5lbFtjaGFubmVsXSA9IHNjb3BlcztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gc2NvcGVzW2NoYW5uZWxdO1xuICAgICAgICBpZiAodHlwZW9mIGNhbmRpZGF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBlckNoYW5uZWxbY2hhbm5lbF0gPSBjYW5kaWRhdGU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdpbGRjYXJkID0gc2NvcGVzWycqJ107XG4gICAgICAgIGlmICh0eXBlb2Ygd2lsZGNhcmQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwZXJDaGFubmVsW2NoYW5uZWxdID0gd2lsZGNhcmQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcGVyQ2hhbm5lbFtjaGFubmVsXSA9IHJhbmRvbVNjb3BlO1xuICAgIH0pO1xuICAgIHJldHVybiBwZXJDaGFubmVsO1xufVxuZnVuY3Rpb24gaXNvbGF0ZUFsbFNvdXJjZXMob3V0ZXJTb3VyY2VzLCBzY29wZXMpIHtcbiAgICB2YXIgaW5uZXJTb3VyY2VzID0ge307XG4gICAgZm9yICh2YXIgY2hhbm5lbCBpbiBvdXRlclNvdXJjZXMpIHtcbiAgICAgICAgdmFyIG91dGVyU291cmNlID0gb3V0ZXJTb3VyY2VzW2NoYW5uZWxdO1xuICAgICAgICBpZiAob3V0ZXJTb3VyY2VzLmhhc093blByb3BlcnR5KGNoYW5uZWwpXG4gICAgICAgICAgICAmJiBvdXRlclNvdXJjZVxuICAgICAgICAgICAgJiYgdHlwZW9mIG91dGVyU291cmNlLmlzb2xhdGVTb3VyY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlubmVyU291cmNlc1tjaGFubmVsXSA9IG91dGVyU291cmNlLmlzb2xhdGVTb3VyY2Uob3V0ZXJTb3VyY2UsIHNjb3Blc1tjaGFubmVsXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3V0ZXJTb3VyY2VzLmhhc093blByb3BlcnR5KGNoYW5uZWwpKSB7XG4gICAgICAgICAgICBpbm5lclNvdXJjZXNbY2hhbm5lbF0gPSBvdXRlclNvdXJjZXNbY2hhbm5lbF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlubmVyU291cmNlcztcbn1cbmZ1bmN0aW9uIGlzb2xhdGVBbGxTaW5rcyhzb3VyY2VzLCBpbm5lclNpbmtzLCBzY29wZXMpIHtcbiAgICB2YXIgb3V0ZXJTaW5rcyA9IHt9O1xuICAgIGZvciAodmFyIGNoYW5uZWwgaW4gaW5uZXJTaW5rcykge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tjaGFubmVsXTtcbiAgICAgICAgdmFyIGlubmVyU2luayA9IGlubmVyU2lua3NbY2hhbm5lbF07XG4gICAgICAgIGlmIChpbm5lclNpbmtzLmhhc093blByb3BlcnR5KGNoYW5uZWwpXG4gICAgICAgICAgICAmJiBzb3VyY2VcbiAgICAgICAgICAgICYmIHR5cGVvZiBzb3VyY2UuaXNvbGF0ZVNpbmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG91dGVyU2lua3NbY2hhbm5lbF0gPSBzb3VyY2UuaXNvbGF0ZVNpbmsoaW5uZXJTaW5rLCBzY29wZXNbY2hhbm5lbF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlubmVyU2lua3MuaGFzT3duUHJvcGVydHkoY2hhbm5lbCkpIHtcbiAgICAgICAgICAgIG91dGVyU2lua3NbY2hhbm5lbF0gPSBpbm5lclNpbmtzW2NoYW5uZWxdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRlclNpbmtzO1xufVxudmFyIGNvdW50ZXIgPSAwO1xuZnVuY3Rpb24gbmV3U2NvcGUoKSB7XG4gICAgcmV0dXJuIFwiY3ljbGVcIiArICsrY291bnRlcjtcbn1cbi8qKlxuICogVGFrZXMgYSBgY29tcG9uZW50YCBmdW5jdGlvbiBhbmQgYW4gb3B0aW9uYWwgYHNjb3BlYCBzdHJpbmcsIGFuZCByZXR1cm5zIGFcbiAqIHNjb3BlZCB2ZXJzaW9uIG9mIHRoZSBgY29tcG9uZW50YCBmdW5jdGlvbi5cbiAqXG4gKiBXaGVuIHRoZSBzY29wZWQgY29tcG9uZW50IGlzIGludm9rZWQsIGVhY2ggc291cmNlIHByb3ZpZGVkIHRvIHRoZSBzY29wZWRcbiAqIGNvbXBvbmVudCBpcyBpc29sYXRlZCB0byB0aGUgZ2l2ZW4gYHNjb3BlYCB1c2luZ1xuICogYHNvdXJjZS5pc29sYXRlU291cmNlKHNvdXJjZSwgc2NvcGUpYCwgaWYgcG9zc2libGUuIExpa2V3aXNlLCB0aGUgc2lua3NcbiAqIHJldHVybmVkIGZyb20gdGhlIHNjb3BlZCBjb21wb25lbnQgYXJlIGlzb2xhdGVkIHRvIHRoZSBgc2NvcGVgIHVzaW5nXG4gKiBgc291cmNlLmlzb2xhdGVTaW5rKHNpbmssIHNjb3BlKWAuXG4gKlxuICogSWYgdGhlIGBzY29wZWAgaXMgbm90IHByb3ZpZGVkLCBhIG5ldyBzY29wZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZC5cbiAqIFRoaXMgbWVhbnMgdGhhdCB3aGlsZSAqKmBpc29sYXRlKGNvbXBvbmVudCwgc2NvcGUpYCBpcyBwdXJlKipcbiAqIChyZWZlcmVudGlhbGx5IHRyYW5zcGFyZW50KSwgKipgaXNvbGF0ZShjb21wb25lbnQpYCBpcyBpbXB1cmUqKlxuICogKG5vdCByZWZlcmVudGlhbGx5IHRyYW5zcGFyZW50KS4gVHdvIGNhbGxzIHRvIGBpc29sYXRlKEZvbywgYmFyKWAgd2lsbFxuICogZ2VuZXJhdGUgdGhlIHNhbWUgY29tcG9uZW50LiBCdXQsIHR3byBjYWxscyB0byBgaXNvbGF0ZShGb28pYCB3aWxsIGdlbmVyYXRlXG4gKiB0d28gZGlzdGluY3QgY29tcG9uZW50cy5cbiAqXG4gKiBOb3RlIHRoYXQgYm90aCBgaXNvbGF0ZVNvdXJjZSgpYCBhbmQgYGlzb2xhdGVTaW5rKClgIGFyZSBzdGF0aWMgbWVtYmVycyBvZlxuICogYHNvdXJjZWAuIFRoZSByZWFzb24gZm9yIHRoaXMgaXMgdGhhdCBkcml2ZXJzIHByb2R1Y2UgYHNvdXJjZWAgd2hpbGUgdGhlXG4gKiBhcHBsaWNhdGlvbiBwcm9kdWNlcyBgc2lua2AsIGFuZCBpdCdzIHRoZSBkcml2ZXIncyByZXNwb25zaWJpbGl0eSB0b1xuICogaW1wbGVtZW50IGBpc29sYXRlU291cmNlKClgIGFuZCBgaXNvbGF0ZVNpbmsoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcG9uZW50IGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBgc291cmNlc2AgYXMgaW5wdXRcbiAqIGFuZCBvdXRwdXRzIGEgY29sbGVjdGlvbiBvZiBgc2lua3NgLlxuICogQHBhcmFtIHtTdHJpbmd9IHNjb3BlIGFuIG9wdGlvbmFsIHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gaXNvbGF0ZSBlYWNoXG4gKiBgc291cmNlc2AgYW5kIGBzaW5rc2Agd2hlbiB0aGUgcmV0dXJuZWQgc2NvcGVkIGNvbXBvbmVudCBpcyBpbnZva2VkLlxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBzY29wZWQgY29tcG9uZW50IGZ1bmN0aW9uIHRoYXQsIGFzIHRoZSBvcmlnaW5hbFxuICogYGNvbXBvbmVudGAgZnVuY3Rpb24sIHRha2VzIGBzb3VyY2VzYCBhbmQgcmV0dXJucyBgc2lua3NgLlxuICogQGZ1bmN0aW9uIGlzb2xhdGVcbiAqL1xuZnVuY3Rpb24gaXNvbGF0ZShjb21wb25lbnQsIHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlID09PSB2b2lkIDApIHsgc2NvcGUgPSBuZXdTY29wZSgpOyB9XG4gICAgY2hlY2tJc29sYXRlQXJncyhjb21wb25lbnQsIHNjb3BlKTtcbiAgICB2YXIgcmFuZG9tU2NvcGUgPSB0eXBlb2Ygc2NvcGUgPT09ICdvYmplY3QnID8gbmV3U2NvcGUoKSA6ICcnO1xuICAgIHZhciBzY29wZXMgPSB0eXBlb2Ygc2NvcGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzY29wZSA9PT0gJ29iamVjdCcgP1xuICAgICAgICBzY29wZSA6XG4gICAgICAgIHNjb3BlLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBwZWRDb21wb25lbnQob3V0ZXJTb3VyY2VzKSB7XG4gICAgICAgIHZhciByZXN0ID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICByZXN0W19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY29wZXNQZXJDaGFubmVsID0gbm9ybWFsaXplU2NvcGVzKG91dGVyU291cmNlcywgc2NvcGVzLCByYW5kb21TY29wZSk7XG4gICAgICAgIHZhciBpbm5lclNvdXJjZXMgPSBpc29sYXRlQWxsU291cmNlcyhvdXRlclNvdXJjZXMsIHNjb3Blc1BlckNoYW5uZWwpO1xuICAgICAgICB2YXIgaW5uZXJTaW5rcyA9IGNvbXBvbmVudC5hcHBseSh2b2lkIDAsIFtpbm5lclNvdXJjZXNdLmNvbmNhdChyZXN0KSk7XG4gICAgICAgIHZhciBvdXRlclNpbmtzID0gaXNvbGF0ZUFsbFNpbmtzKG91dGVyU291cmNlcywgaW5uZXJTaW5rcywgc2NvcGVzUGVyQ2hhbm5lbCk7XG4gICAgICAgIHJldHVybiBvdXRlclNpbmtzO1xuICAgIH07XG59XG5pc29sYXRlLnJlc2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY291bnRlciA9IDA7IH07XG5leHBvcnRzLmRlZmF1bHQgPSBpc29sYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9pc29sYXRlL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdGlmICh2YWx1ZSA9PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSBudWxsIG9yIHVuZGVmaW5lZFwiKTtcblx0cmV0dXJuIHZhbHVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC92YWxpZC12YWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gICAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvYXNzaWduJylcbiAgLCBub3JtYWxpemVPcHRzID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMnKVxuICAsIGlzQ2FsbGFibGUgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9pcy1jYWxsYWJsZScpXG4gICwgY29udGFpbnMgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMnKVxuXG4gICwgZDtcblxuZCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRzY3IsIHZhbHVlLyosIG9wdGlvbnMqLykge1xuXHR2YXIgYywgZSwgdywgb3B0aW9ucywgZGVzYztcblx0aWYgKChhcmd1bWVudHMubGVuZ3RoIDwgMikgfHwgKHR5cGVvZiBkc2NyICE9PSAnc3RyaW5nJykpIHtcblx0XHRvcHRpb25zID0gdmFsdWU7XG5cdFx0dmFsdWUgPSBkc2NyO1xuXHRcdGRzY3IgPSBudWxsO1xuXHR9IGVsc2Uge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbMl07XG5cdH1cblx0aWYgKGRzY3IgPT0gbnVsbCkge1xuXHRcdGMgPSB3ID0gdHJ1ZTtcblx0XHRlID0gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0YyA9IGNvbnRhaW5zLmNhbGwoZHNjciwgJ2MnKTtcblx0XHRlID0gY29udGFpbnMuY2FsbChkc2NyLCAnZScpO1xuXHRcdHcgPSBjb250YWlucy5jYWxsKGRzY3IsICd3Jyk7XG5cdH1cblxuXHRkZXNjID0geyB2YWx1ZTogdmFsdWUsIGNvbmZpZ3VyYWJsZTogYywgZW51bWVyYWJsZTogZSwgd3JpdGFibGU6IHcgfTtcblx0cmV0dXJuICFvcHRpb25zID8gZGVzYyA6IGFzc2lnbihub3JtYWxpemVPcHRzKG9wdGlvbnMpLCBkZXNjKTtcbn07XG5cbmQuZ3MgPSBmdW5jdGlvbiAoZHNjciwgZ2V0LCBzZXQvKiwgb3B0aW9ucyovKSB7XG5cdHZhciBjLCBlLCBvcHRpb25zLCBkZXNjO1xuXHRpZiAodHlwZW9mIGRzY3IgIT09ICdzdHJpbmcnKSB7XG5cdFx0b3B0aW9ucyA9IHNldDtcblx0XHRzZXQgPSBnZXQ7XG5cdFx0Z2V0ID0gZHNjcjtcblx0XHRkc2NyID0gbnVsbDtcblx0fSBlbHNlIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzWzNdO1xuXHR9XG5cdGlmIChnZXQgPT0gbnVsbCkge1xuXHRcdGdldCA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICghaXNDYWxsYWJsZShnZXQpKSB7XG5cdFx0b3B0aW9ucyA9IGdldDtcblx0XHRnZXQgPSBzZXQgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoc2V0ID09IG51bGwpIHtcblx0XHRzZXQgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoc2V0KSkge1xuXHRcdG9wdGlvbnMgPSBzZXQ7XG5cdFx0c2V0ID0gdW5kZWZpbmVkO1xuXHR9XG5cdGlmIChkc2NyID09IG51bGwpIHtcblx0XHRjID0gdHJ1ZTtcblx0XHRlID0gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0YyA9IGNvbnRhaW5zLmNhbGwoZHNjciwgJ2MnKTtcblx0XHRlID0gY29udGFpbnMuY2FsbChkc2NyLCAnZScpO1xuXHR9XG5cblx0ZGVzYyA9IHsgZ2V0OiBnZXQsIHNldDogc2V0LCBjb25maWd1cmFibGU6IGMsIGVudW1lcmFibGU6IGUgfTtcblx0cmV0dXJuICFvcHRpb25zID8gZGVzYyA6IGFzc2lnbihub3JtYWxpemVPcHRzKG9wdGlvbnMpLCBkZXNjKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbikge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG5cdHJldHVybiBmbjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeyBWTm9kZSwgaCwgRE9NU291cmNlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBBbmltYXRpb24sIEFuaW1hdGlvbkRpcmVjdGlvbiwgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBwYXRjaENsYXNzTGlzdCwgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBUcmFuc2l0aW9uIHtcbiAgZXhwb3J0IGludGVyZmFjZSBUcmFuc2l0aW9uIHtcbiAgICBhbmltYXRpb246IEFuaW1hdGlvbiB8IHN0cmluZztcbiAgICBkaXJlY3Rpb24/OiBEaXJlY3Rpb24gfCBzdHJpbmc7XG4gICAgYW5pbWF0aW9uRGlyZWN0aW9uPzogQW5pbWF0aW9uRGlyZWN0aW9uIHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUcmFuc2l0aW9uU291cmNlcyB7XG4gICAgRE9NOiBET01Tb3VyY2U7XG4gICAgdGFyZ2V0JDogU3RyZWFtPFZOb2RlPjtcbiAgICB0cmFuc2l0aW9uJDogU3RyZWFtPFRyYW5zaXRpb24+O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBUcmFuc2l0aW9uU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBUcmFuc2l0aW9uU291cmNlcykgOiBDb21wb25lbnRTaW5rcyB7XG4gICAgICBjb25zdCBldnQgPSAodHlwZSkgPT4gc291cmNlcy5ET00uc2VsZWN0KFwiLnRyYW5zaXRpb25cIikuZXZlbnRzKHR5cGUpO1xuXG4gICAgICBsZXQgYW5pbWF0aW9uRW5kJCA9IGV2dChcImFuaW1hdGlvbmVuZFwiKS5tYXAoZXZ0ID0+ICh7XG4gICAgICAgIGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsXG4gICAgICAgIGRpcmVjdGlvbjogKGV2dC5jdXJyZW50VGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QuY29udGFpbnMoXCJvdXRcIikgPyBEaXJlY3Rpb24uT3V0IDogRGlyZWN0aW9uLkluXG4gICAgICB9KSkgYXMgU3RyZWFtPFRyYW5zaXRpb24+O1xuICAgICAgbGV0IGFuaW1hdGlvbiQgPSB4cy5tZXJnZShzb3VyY2VzLnRyYW5zaXRpb24kLCBhbmltYXRpb25FbmQkKTtcblxuICAgICAgbGV0IHZUcmVlJCA9IHhzLmNvbWJpbmUoYW5pbWF0aW9uJCwgc291cmNlcy50YXJnZXQkKS5tYXAoXG4gICAgICAgIChbdHJhbnNpdGlvbiwgdGFyZ2V0XSkgPT4gcmVuZGVyKHRhcmdldCwgdHJhbnNpdGlvbilcbiAgICAgICk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBET006IHZUcmVlJCxcbiAgICAgICAgZXZlbnRzOiBldnRcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChzY29wZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG1haW4oc291cmNlcyk7XG4gICAgfVxuICAgIGNvbnN0IGlzb2xhdGVkTWFpbiA9IGlzb2xhdGUobWFpbiwgc2NvcGUpO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKHRhcmdldDogVk5vZGUsIGFyZ3M6IFRyYW5zaXRpb24gPSB7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUgfSk6IFZOb2RlIHtcbiAgICBsZXQgYztcbiAgICBsZXQgZGF0YSA9IHBhdGNoQ2xhc3NMaXN0KHRhcmdldCwgW1wiaGlkZGVuXCIsIFwidmlzaWJsZVwiLCBcImFuaW1hdGluZ1wiLCBcInRyYW5zaXRpb25cIl0sIGdldENsYXNzTmFtZShhcmdzKSk7XG4gICAgaWYgKHRhcmdldC5jaGlsZHJlbikge1xuICAgICAgYyA9IHRhcmdldC5jaGlsZHJlbjtcbiAgICB9XG4gICAgaWYgKHRhcmdldC50ZXh0KSB7XG4gICAgICBjID0gdGFyZ2V0LnRleHQ7XG4gICAgfVxuICAgIHJldHVybiBoKHRhcmdldC5zZWwsIGRhdGEsIGMpO1xuICB9XG4gIGZ1bmN0aW9uIGdldENsYXNzTmFtZSh0cmFuc2l0aW9uOiBUcmFuc2l0aW9uKTogc3RyaW5nIHtcbiAgICBpZiAodHJhbnNpdGlvbi5hbmltYXRpb24gPT09IEFuaW1hdGlvbi5Ob25lKSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbi5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5PdXQgPyBcInRyYW5zaXRpb24gaGlkZGVuXCIgOiBcInRyYW5zaXRpb24gdmlzaWJsZVwiO1xuICAgIH1cbiAgICBsZXQgYW5pbWF0aW9uID0gQW5pbWF0aW9uLlRvQ2xhc3NuYW1lKHRyYW5zaXRpb24uYW5pbWF0aW9uKTtcbiAgICBpZiAoQW5pbWF0aW9uLmlzU3RhdGljKHRyYW5zaXRpb24uYW5pbWF0aW9uKSkge1xuICAgICAgcmV0dXJuIFwidmlzaWJsZSBhbmltYXRpbmcgdHJhbnNpdGlvbiBcIiArIGFuaW1hdGlvbjtcbiAgICB9XG4gICAgbGV0IGRpcmVjdGlvbiA9IERpcmVjdGlvbi5Ub0NsYXNzbmFtZSh0cmFuc2l0aW9uLmRpcmVjdGlvbik7XG4gICAgaWYgKEFuaW1hdGlvbi5pc0RpcmVjdGlvbmFsKHRyYW5zaXRpb24uYW5pbWF0aW9uKSkge1xuICAgICAgYW5pbWF0aW9uICs9IEFuaW1hdGlvbkRpcmVjdGlvbi5Ub0NsYXNzbmFtZSh0cmFuc2l0aW9uLmFuaW1hdGlvbkRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBcInZpc2libGUgdHJhbnNpdGlvbiBhbmltYXRpbmcgXCIgKyBkaXJlY3Rpb24gKyBhbmltYXRpb247XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3RyYW5zaXRpb24vaW5kZXgudHMiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBhZGFwdFN0cmVhbSA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9O1xuZnVuY3Rpb24gc2V0QWRhcHQoZikge1xuICAgIGFkYXB0U3RyZWFtID0gZjtcbn1cbmV4cG9ydHMuc2V0QWRhcHQgPSBzZXRBZGFwdDtcbmZ1bmN0aW9uIGFkYXB0KHN0cmVhbSkge1xuICAgIHJldHVybiBhZGFwdFN0cmVhbShzdHJlYW0pO1xufVxuZXhwb3J0cy5hZGFwdCA9IGFkYXB0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRhcHQuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9ydW4vbGliL2FkYXB0LmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgdmFyIEVMRU1fVFlQRSA9IDE7XG4gICAgdmFyIEZSQUdfVFlQRSA9IDExO1xuICAgIHJldHVybiB0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdvYmplY3QnID9cbiAgICAgICAgb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgb2JqIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCA6XG4gICAgICAgIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiZcbiAgICAgICAgICAgIChvYmoubm9kZVR5cGUgPT09IEVMRU1fVFlQRSB8fCBvYmoubm9kZVR5cGUgPT09IEZSQUdfVFlQRSkgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmoubm9kZU5hbWUgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gaXNDbGFzc09ySWQoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5sZW5ndGggPiAxICYmIChzdHJbMF0gPT09ICcuJyB8fCBzdHJbMF0gPT09ICcjJyk7XG59XG5leHBvcnRzLmlzQ2xhc3NPcklkID0gaXNDbGFzc09ySWQ7XG5leHBvcnRzLlNDT1BFX1BSRUZJWCA9ICckJENZQ0xFRE9NJCQtJztcbmZ1bmN0aW9uIGdldEVsZW1lbnQoc2VsZWN0b3JzKSB7XG4gICAgdmFyIGRvbUVsZW1lbnQgPSB0eXBlb2Ygc2VsZWN0b3JzID09PSAnc3RyaW5nJyA/XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzKSA6XG4gICAgICAgIHNlbGVjdG9ycztcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9ycyA9PT0gJ3N0cmluZycgJiYgZG9tRWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVuZGVyIGludG8gdW5rbm93biBlbGVtZW50IGBcIiArIHNlbGVjdG9ycyArIFwiYFwiKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzRWxlbWVudChkb21FbGVtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dpdmVuIGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudCBuZWl0aGVyIGEgJyArXG4gICAgICAgICAgICAnc2VsZWN0b3Igc3RyaW5nLicpO1xuICAgIH1cbiAgICByZXR1cm4gZG9tRWxlbWVudDtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudCA9IGdldEVsZW1lbnQ7XG4vKipcbiAqIFRoZSBmdWxsIHNjb3BlIG9mIGEgbmFtZXNwYWNlIGlzIHRoZSBcImFic29sdXRlIHBhdGhcIiBvZiBzY29wZXMgZnJvbVxuICogcGFyZW50IHRvIGNoaWxkLiBUaGlzIGlzIGV4dHJhY3RlZCBmcm9tIHRoZSBuYW1lc3BhY2UsIGZpbHRlciBvbmx5IGZvclxuICogc2NvcGVzIGluIHRoZSBuYW1lc3BhY2UuXG4gKi9cbmZ1bmN0aW9uIGdldEZ1bGxTY29wZShuYW1lc3BhY2UpIHtcbiAgICByZXR1cm4gbmFtZXNwYWNlXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuaW5kZXhPZihleHBvcnRzLlNDT1BFX1BSRUZJWCkgPiAtMTsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5yZXBsYWNlKGV4cG9ydHMuU0NPUEVfUFJFRklYLCAnJyk7IH0pXG4gICAgICAgIC5qb2luKCctJyk7XG59XG5leHBvcnRzLmdldEZ1bGxTY29wZSA9IGdldEZ1bGxTY29wZTtcbmZ1bmN0aW9uIGdldFNlbGVjdG9ycyhuYW1lc3BhY2UpIHtcbiAgICByZXR1cm4gbmFtZXNwYWNlLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5pbmRleE9mKGV4cG9ydHMuU0NPUEVfUFJFRklYKSA9PT0gLTE7IH0pLmpvaW4oJyAnKTtcbn1cbmV4cG9ydHMuZ2V0U2VsZWN0b3JzID0gZ2V0U2VsZWN0b3JzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL3V0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKCkgPyBTeW1ib2wgOiByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LXN5bWJvbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwUHJlZml4ID0gZXhwb3J0cy5zdHJpcFByZWZpeCA9IGZ1bmN0aW9uIHN0cmlwUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC5pbmRleE9mKHByZWZpeCkgPT09IDAgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2hpc3RvcnkvUGF0aFV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB2bm9kZV8xID0gcmVxdWlyZShcIi4vdm5vZGVcIik7XG52YXIgaXMgPSByZXF1aXJlKFwiLi9pc1wiKTtcbmZ1bmN0aW9uIGFkZE5TKGRhdGEsIGNoaWxkcmVuLCBzZWwpIHtcbiAgICBkYXRhLm5zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgICBpZiAoc2VsICE9PSAnZm9yZWlnbk9iamVjdCcgJiYgY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGREYXRhID0gY2hpbGRyZW5baV0uZGF0YTtcbiAgICAgICAgICAgIGlmIChjaGlsZERhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFkZE5TKGNoaWxkRGF0YSwgY2hpbGRyZW5baV0uY2hpbGRyZW4sIGNoaWxkcmVuW2ldLnNlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBoKHNlbCwgYiwgYykge1xuICAgIHZhciBkYXRhID0ge30sIGNoaWxkcmVuLCB0ZXh0LCBpO1xuICAgIGlmIChjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGF0YSA9IGI7XG4gICAgICAgIGlmIChpcy5hcnJheShjKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzLnByaW1pdGl2ZShjKSkge1xuICAgICAgICAgICAgdGV4dCA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAmJiBjLnNlbCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY107XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpcy5hcnJheShiKSkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzLnByaW1pdGl2ZShiKSkge1xuICAgICAgICAgICAgdGV4dCA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiAmJiBiLnNlbCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbYl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gYjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXMuYXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGlzLnByaW1pdGl2ZShjaGlsZHJlbltpXSkpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gPSB2bm9kZV8xLnZub2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VsWzBdID09PSAncycgJiYgc2VsWzFdID09PSAndicgJiYgc2VsWzJdID09PSAnZycgJiZcbiAgICAgICAgKHNlbC5sZW5ndGggPT09IDMgfHwgc2VsWzNdID09PSAnLicgfHwgc2VsWzNdID09PSAnIycpKSB7XG4gICAgICAgIGFkZE5TKGRhdGEsIGNoaWxkcmVuLCBzZWwpO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGVfMS52bm9kZShzZWwsIGRhdGEsIGNoaWxkcmVuLCB0ZXh0LCB1bmRlZmluZWQpO1xufVxuZXhwb3J0cy5oID0gaDtcbjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS9oLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBWTm9kZSwgaSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgQ29udGVudE9iaiB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgQ29sb3IsIFNpemUsIEljb25UeXBlIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IGdldFNjb3BlfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBJY29uIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgYnV0dG9uOiBib29sZWFuO1xuICAgIGJvcmRlcmVkOiBib29sZWFuO1xuICAgIGNpcmN1bGFyOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgZml0dGVkOiBib29sZWFuO1xuICAgIGxpbms6IGJvb2xlYW47XG4gICAgZmxpcHBlZDogYm9vbGVhbjtcbiAgICByb3RhdGVkOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgSWNvbkFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBJY29uVHlwZSB8IHN0cmluZywgQ29udGVudE9iajxJY29uVHlwZSB8IHN0cmluZz4+O1xuICBleHBvcnQgdHlwZSBJY29uU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIEljb25UeXBlIHwgc3RyaW5nLCBDb250ZW50T2JqPEljb25UeXBlIHwgc3RyaW5nPj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBJY29uU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBpY29uLCBcIi5pY29uXCIsIHNjb3BlKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBJY29uQXJncyB8IFBhcnRpYWw8UHJvcHM+IHwgSWNvblR5cGUgfCBzdHJpbmcsIGFyZzI/OiBJY29uVHlwZSB8IHN0cmluZykge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoaWNvbiwgbWFrZUlzQXJncyhpc0ljb25UeXBlKSwgaXNJY29uVHlwZSwgYXJnMSwgYXJnMik7XG4gIH1cblxuICBmdW5jdGlvbiBpY29uKGFyZ3M6IEljb25BcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSB0eXBlb2YgKGFyZ3MuY29udGVudCkgIT09IFwidW5kZWZpbmVkXCIgPyBpc0ljb25UeXBlKGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IC0xO1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGdldENsYXNzbmFtZShwcm9wcywgY29udGVudCkuc3Vic3RyaW5nKDEpO1xuICAgIHJldHVybiBjbGFzc05hbWUgIT09IFwiaWNvblwiID8gaSh7IHByb3BzOiB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0gfSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPiwgY29udGVudDogSWNvblR5cGUgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcIlwiO1xuICAgIGlmIChwcm9wcy5idXR0b24pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBidXR0b25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmJvcmRlcmVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYm9yZGVyZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNpcmN1bGFyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2lyY3VsYXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmxvYWRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsb2FkaW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5maXR0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXR0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmxpbmspIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsaW5rXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5mbGlwcGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZmxpcHBlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucm90YXRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJvdGF0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludmVydGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW52ZXJ0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBDb2xvci5Ub0NsYXNzbmFtZShwcm9wcy5jb2xvcik7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBJY29uVHlwZS5Ub0NsYXNzbmFtZShjb250ZW50KTtcbiAgICByZXR1cm4gY2xhc3NOYW1lICsgXCIgaWNvblwiO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNJY29uVHlwZShvYmopOiBvYmogaXMgSWNvblR5cGUgfCBzdHJpbmcge1xuICAgIHJldHVybiB0eXBlb2YgKG9iaikgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIChvYmopID09PSBcIm51bWJlclwiO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvaWNvbi9pbmRleC50cyIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaXMtaW1wbGVtZW50ZWQnKSgpXG5cdD8gT2JqZWN0LnNldFByb3RvdHlwZU9mXG5cdDogcmVxdWlyZSgnLi9zaGltJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIC8vIFNhZmFyaSA5IG1ha2VzIGBhcmd1bWVudHMubGVuZ3RoYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICB2YXIgcmVzdWx0ID0gKGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSlcbiAgICA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZylcbiAgICA6IFtdO1xuXG4gIHZhciBsZW5ndGggPSByZXN1bHQubGVuZ3RoLFxuICAgICAgc2tpcEluZGV4ZXMgPSAhIWxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChrZXkgPT0gJ2xlbmd0aCcgfHwgaXNJbmRleChrZXksIGxlbmd0aCkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgLy8gU2FmYXJpIDguMSBtYWtlcyBgYXJndW1lbnRzLmNhbGxlZWAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAoIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKSB8fCBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcmdzVGFnKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQHNlZSBfLmZvck93blJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gaXRlcmF0ZWUgOiBpZGVudGl0eSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvck93bjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2guZm9yb3duL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHZub2RlKHNlbCwgZGF0YSwgY2hpbGRyZW4sIHRleHQsIGVsbSkge1xuICAgIHZhciBrZXkgPSBkYXRhID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBkYXRhLmtleTtcbiAgICByZXR1cm4geyBzZWw6IHNlbCwgZGF0YTogZGF0YSwgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB0ZXh0OiB0ZXh0LCBlbG06IGVsbSwga2V5OiBrZXkgfTtcbn1cbmV4cG9ydHMudm5vZGUgPSB2bm9kZTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZub2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dm5vZGUuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tL3Zub2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93YXJuaW5nL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHhzdHJlYW1fMSA9IHJlcXVpcmUoXCJ4c3RyZWFtXCIpO1xuZnVuY3Rpb24gZnJvbUV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSwgdXNlQ2FwdHVyZSkge1xuICAgIGlmICh1c2VDYXB0dXJlID09PSB2b2lkIDApIHsgdXNlQ2FwdHVyZSA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIHhzdHJlYW1fMS5TdHJlYW0uY3JlYXRlKHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KGxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLm5leHQgPSBmdW5jdGlvbiBuZXh0KGV2ZW50KSB7IGxpc3RlbmVyLm5leHQoZXZlbnQpOyB9O1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLm5leHQsIHVzZUNhcHR1cmUpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLm5leHQsIHVzZUNhcHR1cmUpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tRXZlbnQgPSBmcm9tRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tRXZlbnQuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL2Zyb21FdmVudC5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaGlzdG9yeV8xID0gcmVxdWlyZShcImhpc3RvcnlcIik7XG52YXIgY3JlYXRlSGlzdG9yeV8xID0gcmVxdWlyZShcIi4vY3JlYXRlSGlzdG9yeSRcIik7XG5mdW5jdGlvbiBtYWtlSGlzdG9yeURyaXZlcihvcHRpb25zKSB7XG4gICAgdmFyIGhpc3RvcnkgPSBoaXN0b3J5XzEuY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhpc3RvcnlEcml2ZXIoc2luayQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUhpc3RvcnlfMS5jcmVhdGVIaXN0b3J5JChoaXN0b3J5LCBzaW5rJCk7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZUhpc3RvcnlEcml2ZXIgPSBtYWtlSGlzdG9yeURyaXZlcjtcbmZ1bmN0aW9uIG1ha2VTZXJ2ZXJIaXN0b3J5RHJpdmVyKG9wdGlvbnMpIHtcbiAgICB2YXIgaGlzdG9yeSA9IGhpc3RvcnlfMS5jcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXJ2ZXJIaXN0b3J5RHJpdmVyKHNpbmskKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVIaXN0b3J5XzEuY3JlYXRlSGlzdG9yeSQoaGlzdG9yeSwgc2luayQpO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VTZXJ2ZXJIaXN0b3J5RHJpdmVyID0gbWFrZVNlcnZlckhpc3RvcnlEcml2ZXI7XG5mdW5jdGlvbiBtYWtlSGFzaEhpc3RvcnlEcml2ZXIob3B0aW9ucykge1xuICAgIHZhciBoaXN0b3J5ID0gaGlzdG9yeV8xLmNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiBoYXNoSGlzdG9yeURyaXZlcihzaW5rJCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlSGlzdG9yeV8xLmNyZWF0ZUhpc3RvcnkkKGhpc3RvcnksIHNpbmskKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlSGFzaEhpc3RvcnlEcml2ZXIgPSBtYWtlSGFzaEhpc3RvcnlEcml2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcml2ZXJzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvaGlzdG9yeS9saWIvZHJpdmVycy5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbiAgLCBpZCA9IHRvU3RyaW5nLmNhbGwoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh0b1N0cmluZy5jYWxsKHgpID09PSBpZCk7IH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9mdW5jdGlvbi9pcy1hcmd1bWVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2lzLWltcGxlbWVudGVkJykoKVxuXHQ/IE9iamVjdC5hc3NpZ25cblx0OiByZXF1aXJlKCcuL3NoaW0nKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9hc3NpZ24vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG4gICwgaWQgPSB0b1N0cmluZy5jYWxsKCcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCkge1xuXHRyZXR1cm4gKHR5cGVvZiB4ID09PSAnc3RyaW5nJykgfHwgKHggJiYgKHR5cGVvZiB4ID09PSAnb2JqZWN0JykgJiZcblx0XHQoKHggaW5zdGFuY2VvZiBTdHJpbmcpIHx8ICh0b1N0cmluZy5jYWxsKHgpID09PSBpZCkpKSB8fCBmYWxzZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9zdHJpbmcvaXMtc3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGVhciAgICA9IHJlcXVpcmUoJ2VzNS1leHQvYXJyYXkvIy9jbGVhcicpXG4gICwgYXNzaWduICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9hc3NpZ24nKVxuICAsIGNhbGxhYmxlID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUnKVxuICAsIHZhbHVlICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvdmFsaWQtdmFsdWUnKVxuICAsIGQgICAgICAgID0gcmVxdWlyZSgnZCcpXG4gICwgYXV0b0JpbmQgPSByZXF1aXJlKCdkL2F1dG8tYmluZCcpXG4gICwgU3ltYm9sICAgPSByZXF1aXJlKCdlczYtc3ltYm9sJylcblxuICAsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICwgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG4gICwgSXRlcmF0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gSXRlcmF0b3IgPSBmdW5jdGlvbiAobGlzdCwgY29udGV4dCkge1xuXHRpZiAoISh0aGlzIGluc3RhbmNlb2YgSXRlcmF0b3IpKSByZXR1cm4gbmV3IEl0ZXJhdG9yKGxpc3QsIGNvbnRleHQpO1xuXHRkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcblx0XHRfX2xpc3RfXzogZCgndycsIHZhbHVlKGxpc3QpKSxcblx0XHRfX2NvbnRleHRfXzogZCgndycsIGNvbnRleHQpLFxuXHRcdF9fbmV4dEluZGV4X186IGQoJ3cnLCAwKVxuXHR9KTtcblx0aWYgKCFjb250ZXh0KSByZXR1cm47XG5cdGNhbGxhYmxlKGNvbnRleHQub24pO1xuXHRjb250ZXh0Lm9uKCdfYWRkJywgdGhpcy5fb25BZGQpO1xuXHRjb250ZXh0Lm9uKCdfZGVsZXRlJywgdGhpcy5fb25EZWxldGUpO1xuXHRjb250ZXh0Lm9uKCdfY2xlYXInLCB0aGlzLl9vbkNsZWFyKTtcbn07XG5cbmRlZmluZVByb3BlcnRpZXMoSXRlcmF0b3IucHJvdG90eXBlLCBhc3NpZ24oe1xuXHRjb25zdHJ1Y3RvcjogZChJdGVyYXRvciksXG5cdF9uZXh0OiBkKGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgaTtcblx0XHRpZiAoIXRoaXMuX19saXN0X18pIHJldHVybjtcblx0XHRpZiAodGhpcy5fX3JlZG9fXykge1xuXHRcdFx0aSA9IHRoaXMuX19yZWRvX18uc2hpZnQoKTtcblx0XHRcdGlmIChpICE9PSB1bmRlZmluZWQpIHJldHVybiBpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5fX25leHRJbmRleF9fIDwgdGhpcy5fX2xpc3RfXy5sZW5ndGgpIHJldHVybiB0aGlzLl9fbmV4dEluZGV4X18rKztcblx0XHR0aGlzLl91bkJpbmQoKTtcblx0fSksXG5cdG5leHQ6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY3JlYXRlUmVzdWx0KHRoaXMuX25leHQoKSk7IH0pLFxuXHRfY3JlYXRlUmVzdWx0OiBkKGZ1bmN0aW9uIChpKSB7XG5cdFx0aWYgKGkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuXHRcdHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogdGhpcy5fcmVzb2x2ZShpKSB9O1xuXHR9KSxcblx0X3Jlc29sdmU6IGQoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIHRoaXMuX19saXN0X19baV07IH0pLFxuXHRfdW5CaW5kOiBkKGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9fbGlzdF9fID0gbnVsbDtcblx0XHRkZWxldGUgdGhpcy5fX3JlZG9fXztcblx0XHRpZiAoIXRoaXMuX19jb250ZXh0X18pIHJldHVybjtcblx0XHR0aGlzLl9fY29udGV4dF9fLm9mZignX2FkZCcsIHRoaXMuX29uQWRkKTtcblx0XHR0aGlzLl9fY29udGV4dF9fLm9mZignX2RlbGV0ZScsIHRoaXMuX29uRGVsZXRlKTtcblx0XHR0aGlzLl9fY29udGV4dF9fLm9mZignX2NsZWFyJywgdGhpcy5fb25DbGVhcik7XG5cdFx0dGhpcy5fX2NvbnRleHRfXyA9IG51bGw7XG5cdH0pLFxuXHR0b1N0cmluZzogZChmdW5jdGlvbiAoKSB7IHJldHVybiAnW29iamVjdCBJdGVyYXRvcl0nOyB9KVxufSwgYXV0b0JpbmQoe1xuXHRfb25BZGQ6IGQoZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0aWYgKGluZGV4ID49IHRoaXMuX19uZXh0SW5kZXhfXykgcmV0dXJuO1xuXHRcdCsrdGhpcy5fX25leHRJbmRleF9fO1xuXHRcdGlmICghdGhpcy5fX3JlZG9fXykge1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgJ19fcmVkb19fJywgZCgnYycsIFtpbmRleF0pKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5fX3JlZG9fXy5mb3JFYWNoKGZ1bmN0aW9uIChyZWRvLCBpKSB7XG5cdFx0XHRpZiAocmVkbyA+PSBpbmRleCkgdGhpcy5fX3JlZG9fX1tpXSA9ICsrcmVkbztcblx0XHR9LCB0aGlzKTtcblx0XHR0aGlzLl9fcmVkb19fLnB1c2goaW5kZXgpO1xuXHR9KSxcblx0X29uRGVsZXRlOiBkKGZ1bmN0aW9uIChpbmRleCkge1xuXHRcdHZhciBpO1xuXHRcdGlmIChpbmRleCA+PSB0aGlzLl9fbmV4dEluZGV4X18pIHJldHVybjtcblx0XHQtLXRoaXMuX19uZXh0SW5kZXhfXztcblx0XHRpZiAoIXRoaXMuX19yZWRvX18pIHJldHVybjtcblx0XHRpID0gdGhpcy5fX3JlZG9fXy5pbmRleE9mKGluZGV4KTtcblx0XHRpZiAoaSAhPT0gLTEpIHRoaXMuX19yZWRvX18uc3BsaWNlKGksIDEpO1xuXHRcdHRoaXMuX19yZWRvX18uZm9yRWFjaChmdW5jdGlvbiAocmVkbywgaSkge1xuXHRcdFx0aWYgKHJlZG8gPiBpbmRleCkgdGhpcy5fX3JlZG9fX1tpXSA9IC0tcmVkbztcblx0XHR9LCB0aGlzKTtcblx0fSksXG5cdF9vbkNsZWFyOiBkKGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcy5fX3JlZG9fXykgY2xlYXIuY2FsbCh0aGlzLl9fcmVkb19fKTtcblx0XHR0aGlzLl9fbmV4dEluZGV4X18gPSAwO1xuXHR9KVxufSkpKTtcblxuZGVmaW5lUHJvcGVydHkoSXRlcmF0b3IucHJvdG90eXBlLCBTeW1ib2wuaXRlcmF0b3IsIGQoZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKTtcbmRlZmluZVByb3BlcnR5KEl0ZXJhdG9yLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkKCcnLCAnSXRlcmF0b3InKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LWl0ZXJhdG9yL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9oaXN0b3J5L2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG52YXIgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIidgXS9nLFxuICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbnZhciBodG1sRXNjYXBlcyA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7JyxcbiAgJ2AnOiAnJiM5NjsnXG59O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICovXG52YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBcIidcIiwgYW5kIFwiXFxgXCIgaW4gYHN0cmluZ2AgdG9cbiAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAqXG4gKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICpcbiAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBCYWNrdGlja3MgYXJlIGVzY2FwZWQgYmVjYXVzZSBpbiBJRSA8IDksIHRoZXkgY2FuIGJyZWFrIG91dCBvZlxuICogYXR0cmlidXRlIHZhbHVlcyBvciBIVE1MIGNvbW1lbnRzLiBTZWUgWyM1OV0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzU5KSxcbiAqIFsjMTAyXShodHRwczovL2h0bWw1c2VjLm9yZy8jMTAyKSwgWyMxMDhdKGh0dHBzOi8vaHRtbDVzZWMub3JnLyMxMDgpLCBhbmRcbiAqIFsjMTMzXShodHRwczovL2h0bWw1c2VjLm9yZy8jMTMzKSBvZiB0aGVcbiAqIFtIVE1MNSBTZWN1cml0eSBDaGVhdHNoZWV0XShodHRwczovL2h0bWw1c2VjLm9yZy8pIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAqIFhTUyB2ZWN0b3JzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgOiBzdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC5lc2NhcGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IENvbXBvbmVudFNvdXJjZXMsIFZhbHVlQ29tcG9uZW50U2lua3MsIFN0eWxlQW5kQ29udGVudEFyZ3MsIERPTUNvbnRlbnQsIENvbnRlbnRPYmosIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xvciwgU2l6ZSwgQXR0YWNobWVudCwgRmxvYXQgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IG51bVRvVGV4dCwgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IHsgZGl2LCBhLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeHMsIHtNZW1vcnlTdHJlYW19IGZyb20gXCJ4c3RyZWFtXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTWVudSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIHN1Ym1lbnU6IGJvb2xlYW47XG4gICAgcmlnaHQ6IGJvb2xlYW47XG4gICAgc2Vjb25kYXJ5OiBib29sZWFuO1xuICAgIHBvaW50aW5nOiBib29sZWFuO1xuICAgIHRhYnVsYXI6IGJvb2xlYW47XG4gICAgdGV4dDogYm9vbGVhbjtcbiAgICB2ZXJ0aWNhbDogYm9vbGVhbjtcbiAgICBwYWdpbmF0aW9uOiBib29sZWFuO1xuICAgIGZpeGVkOiBib29sZWFuO1xuICAgIHN0YWNrYWJsZTogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBpY29uOiBib29sZWFuO1xuICAgIGxhYmVsZWRJY29uczogYm9vbGVhbjtcbiAgICBjb21wYWN0OiBib29sZWFuO1xuICAgIGVxdWFsV2lkdGg6IGJvb2xlYW47XG4gICAgYm9yZGVybGVzczogYm9vbGVhbjtcbiAgICBmbHVpZDogYm9vbGVhbjtcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gICAgYXR0YWNobWVudDogQXR0YWNobWVudCB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCB0eXBlIENvbnRlbnQgPSBBcnJheTxQYXJ0aWFsPE1lbnVJdGVtPj47XG4gIGV4cG9ydCBpbnRlcmZhY2UgTWVudUl0ZW0ge1xuICAgIGRyb3Bkb3duOiBib29sZWFuO1xuICAgIGxpbms6IGJvb2xlYW47XG4gICAgYWN0aXZlOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGhlYWRlck9ubHk6IGJvb2xlYW47XG4gICAgaGVhZGVyOiBib29sZWFuO1xuICAgIGZpdHRlZDogYm9vbGVhbjtcbiAgICBkaXZpZGVyOiBib29sZWFuO1xuICAgIHJpZ2h0TWVudTogYm9vbGVhbjtcbiAgICB2ZXJ0aWNhbGx5Rml0dGVkOiBib29sZWFuO1xuICAgIGhvcml6b250YWxseUZpdHRlZDogYm9vbGVhbjtcbiAgICBpY29uOiBib29sZWFuO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgICBmbG9hdDogRmxvYXQgfCBzdHJpbmc7XG4gICAgaHJlZjogc3RyaW5nO1xuICAgIG1haW46IERPTUNvbnRlbnQgfCBDb250ZW50O1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgTWVudUFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBDb250ZW50LCBDb250ZW50T2JqPENvbnRlbnQ+PjtcbiAgZXhwb3J0IHR5cGUgTWVudVNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBDb250ZW50LCBDb250ZW50T2JqPENvbnRlbnQ+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBNZW51QXJncyB8IFBhcnRpYWw8UHJvcHM+IHwgQ29udGVudCwgYXJnMjogQ29udGVudCA9IFtdKTogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQobWVudSwgbWFrZUlzQXJncyhpc0NvbnRlbnQpLCBpc0NvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBydW48ViBleHRlbmRzIE1lbnVJdGVtPihzb3VyY2VzOiBNZW51U291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBWYWx1ZUNvbXBvbmVudFNpbmtzPFBhcnRpYWw8Vj4+IHtcbiAgICBmdW5jdGlvbiBtYWluKHNvdXJjZXM6IE1lbnVTb3VyY2VzKSB7XG4gICAgICBzb3VyY2VzLmNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQgOiB4cy5vZihbXSk7XG4gICAgICBzb3VyY2VzLnByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7fSk7XG5cbiAgICAgIGNvbnN0IGNsaWNrJCA9IHNvdXJjZXMuRE9NLnNlbGVjdChcIi5tZW51ID4gLml0ZW1cIikuZXZlbnRzKFwiY2xpY2tcIik7XG4gICAgICBjb25zdCBpdGVtcyQgPSBzb3VyY2VzLmNvbnRlbnQkLm1hcChjID0+IGlzQ29udGVudChjKSA/IGMgOiBjLm1haW4pLnJlbWVtYmVyKCkgYXMgYW55IGFzIE1lbW9yeVN0cmVhbTxQYXJ0aWFsPFY+W10+O1xuICAgICAgY29uc3QgY2xpY2tlZElkJCA9IGNsaWNrJC5tYXAoZXYgPT4gcGFyc2VJbnQoKGV2IGFzIGFueSkuY3VycmVudFRhcmdldC5pZCkpXG4gICAgICAgIC5maWx0ZXIobiA9PiAhaXNOYU4obikgJiYgdHlwZW9mIChuKSAhPT0gXCJ1bmRlZmluZWRcIik7XG4gICAgICBjb25zdCBjbGlja2VkSXRlbSQgPSBpdGVtcyQubWFwKGl0ZW1zID0+IGNsaWNrZWRJZCQubWFwKGlkID0+IGl0ZW1zW2lkXSkpLmZsYXR0ZW4oKVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gIWl0ZW0uZGlzYWJsZWQpO1xuXG4gICAgICBjb25zdCB2dHJlZSQgPSB4cy5jb21iaW5lKHNvdXJjZXMucHJvcHMkLCBpdGVtcyQpLm1hcChcbiAgICAgICAgKFtwcm9wcywgY29udGVudF0pID0+IG1lbnUoeyBwcm9wcywgY29udGVudCB9KVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogdnRyZWUkLFxuICAgICAgICBldmVudHM6ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIubWVudVwiKS5ldmVudHModHlwZSksXG4gICAgICAgIHZhbHVlJDogY2xpY2tlZEl0ZW0kXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoc2NvcGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtYWluKHNvdXJjZXMpO1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVudShhcmdzOiBNZW51QXJncykge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0NvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzLCBjb250ZW50Lmxlbmd0aCkgfSB9LCBjb250ZW50Lm1hcChyZW5kZXJJdGVtKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+LCBsZW5ndGg6IG51bWJlcikge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLnNlY29uZGFyeSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNlY29uZGFyeVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZmx1aWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmbHVpZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmlnaHQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByaWdodFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucG9pbnRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBwb2ludGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFidWxhcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhYnVsYXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRleHQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0ZXh0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5wYWdpbmF0aW9uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcGFnaW5hdGlvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZml4ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXhlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc3RhY2thYmxlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc3RhY2thYmxlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pY29uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaWNvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFiZWxlZEljb25zKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGFiZWxlZCBpY29uXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wYWN0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGFjdFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYm9yZGVybGVzcykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGJvcmRlcmxlc3NcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVxdWFsV2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQobGVuZ3RoKSArIFwiIGl0ZW1cIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5hdHRhY2htZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEF0dGFjaG1lbnQuVG9DbGFzc25hbWUocHJvcHMuYXR0YWNobWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIG1lbnVcIjtcbiAgICBpZiAocHJvcHMuc3VibWVudSkge1xuICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cmluZygzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRJdGVtQ2xhc3NuYW1lKGl0ZW06IE1lbnVJdGVtKSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwiXCI7XG4gICAgaWYgKGl0ZW0uYWN0aXZlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XG4gICAgfVxuICAgIGlmIChpdGVtLmhlYWRlcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhlYWRlclwiO1xuICAgIH1cbiAgICBpZiAoaXRlbS5maXR0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXR0ZWRcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0udmVydGljYWxseUZpdHRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsbHkgZml0dGVkXCI7XG4gICAgfVxuICAgIGlmIChpdGVtLmhvcml6b250YWxseUZpdHRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhvcml6b250YWxseSBmaXR0ZWRcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0ubGluaykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxpbmtcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uaWNvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGljb25cIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uZGlzYWJsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChpdGVtLmZsb2F0KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEZsb2F0LlRvQ2xhc3NuYW1lKGl0ZW0uZmxvYXQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChpdGVtLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKGl0ZW0uY29sb3IpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgaXRlbVwiO1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHJpbmcoMSk7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlckl0ZW0oaXRlbTogTWVudUl0ZW0sIGlkOiBudW1iZXIpIHtcbiAgICBpZiAoaXRlbS5kaXZpZGVyKSB7XG4gICAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImRpdmlkZXJcIiB9IH0pO1xuICAgIH1cbiAgICBpZiAoaXRlbS5oZWFkZXJPbmx5KSB7XG4gICAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImhlYWRlclwiIH0gfSwgaXRlbS5tYWluKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0ucmlnaHRNZW51KSB7XG4gICAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcInJpZ2h0IG1lbnVcIiB9IH0sIChpdGVtLm1haW4gYXMgYW55W10pLm1hcChyZW5kZXJJdGVtKSk7XG4gICAgfVxuICAgIGlmIChpdGVtLmRyb3Bkb3duKSB7XG4gICAgICBsZXQgY29udGVudCA9IGl0ZW0ubWFpbiBhcyBWTm9kZTtcbiAgICAgIGNvbnRlbnQuZGF0YS5wcm9wcy5jbGFzc05hbWUgKz0gXCIgXCIgKyBnZXRJdGVtQ2xhc3NuYW1lKGl0ZW0pO1xuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuICAgIGlmIChpdGVtLmhyZWYpIHtcbiAgICAgIHJldHVybiBhKHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRJdGVtQ2xhc3NuYW1lKGl0ZW0pLCBpZCwgaHJlZjogaXRlbS5ocmVmIH0gfSwgaXRlbS5tYWluKTtcbiAgICB9XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0SXRlbUNsYXNzbmFtZShpdGVtKSwgaWQgfSB9LCBpdGVtLm1haW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDb250ZW50KG9iaik6IG9iaiBpcyBDb250ZW50IHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgQXJyYXkgJiYgKFxuICAgICAgb2JqLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgdHlwZW9mIChvYmpbMF0ubWFpbikgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgIHR5cGVvZiAob2JqWzBdLmRpdmlkZXIpICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICB0eXBlb2YgKG9ialswXS5oZWFkZXJPbmx5KSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb2xsZWN0aW9ucy9tZW51L2luZGV4LnRzIiwiXG5pbXBvcnQgaXNvbGF0ZSBmcm9tIFwiQGN5Y2xlL2lzb2xhdGVcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0sIE1lbW9yeVN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBoLCBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy90cmFuc2l0aW9uXCI7XG5pbXBvcnQgeyBwYXRjaENsYXNzTGlzdCwgYWRkRWxlbWVudCwgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IEFuaW1hdGlvbiwgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIENvbnRlbnRPYmosIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzLCBFdmVudFNlbGVjdG9yIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRGltbWVyIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgaW52ZXJ0ZWQ6IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIERpbW1lclNvdXJjZXMgZXh0ZW5kcyBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PiB7XG4gICAgYXJncz86IHtcbiAgICAgIG9uJD86IFN0cmVhbTxib29sZWFuPjtcbiAgICAgIHRhcmdldCQ/OiBTdHJlYW08c3RyaW5nIHwgVk5vZGU+O1xuICAgIH07XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IERpbW1lclNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogQ29tcG9uZW50U2lua3Mge1xuICAgIGZ1bmN0aW9uIG1haW4oc291cmNlczogRGltbWVyU291cmNlcykge1xuICAgICAgY29uc3QgZXZ0ID0gKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChcIi5kaW1tYWJsZVwiKS5ldmVudHModHlwZSk7XG4gICAgICBjb25zdCBwcm9wcyQgPSBzb3VyY2VzLnByb3BzJCA/IHNvdXJjZXMucHJvcHMkIDogeHMub2Yoe30pO1xuICAgICAgY29uc3QgY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JC5tYXAoYyA9PiBpc0RPTUNvbnRlbnQoYykgPyBjIDogYy5tYWluKSA6IHhzLm9mKFtdKTtcblxuICAgICAgLyoqKiBDcmVhdGUgYW5pbWF0aW9uJCAqKiovXG4gICAgICBjb25zdCBvbiQgPSBzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLm9uJCA/IHNvdXJjZXMuYXJncy5vbiQucmVtZW1iZXIoKSA6IG9uSG92ZXIoZXZ0KTtcbiAgICAgIGNvbnN0IHRhcmdldCQgPSBzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLnRhcmdldCQgPyBzb3VyY2VzLmFyZ3MudGFyZ2V0JC5yZW1lbWJlcigpIDogeHMub2YoXCJwYWdlXCIpO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbiQgPSBvbiRcbiAgICAgICAgLmZvbGQoKHByZXZBbmltLCBhY3RpdmUpID0+IHByZXZBbmltLmRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5vbmVcbiAgICAgICAgICA/ICh7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogYWN0aXZlID8gRGlyZWN0aW9uLkluIDogRGlyZWN0aW9uLk91dCB9KVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiBBbmltYXRpb24uRmFkZSwgZGlyZWN0aW9uOiBhY3RpdmUgPyBEaXJlY3Rpb24uSW4gOiBEaXJlY3Rpb24uT3V0XG4gICAgICAgICAgfVxuICAgICAgICAsICh7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogRGlyZWN0aW9uLk5vbmUgfSkpO1xuXG4gICAgICAvKioqIEFuaW1hdGUgY29udGVudCAqKiovXG4gICAgICBjb25zdCBjaGlsZHJlbiQgPSB4cy5jb21iaW5lKGNvbnRlbnQkLCBwcm9wcyQsIHRhcmdldCQpXG4gICAgICAgIC5tYXAoKFtjb250ZW50LCBwcm9wcywgdGFyZ2V0XSkgPT4gZGltbWVyKGNvbnRlbnQsIHByb3BzLCB0YXJnZXQpKTtcbiAgICAgIGNvbnN0IGFuaW1hdGVkQ29udGVudCA9IFRyYW5zaXRpb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgdHJhbnNpdGlvbiQsIHRhcmdldCQ6IGNoaWxkcmVuJCB9LCBzY29wZSk7XG5cbiAgICAgIC8qKiogUmVuZGVyIHZpZXcgKioqL1xuICAgICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZSh0YXJnZXQkLCBhbmltYXRlZENvbnRlbnQuRE9NLCBvbiQpXG4gICAgICAgIC5tYXAoKFt0YXJnZXQsIGNvbnRlbnQsIGFjdGl2ZV0pID0+IGRpbUVsZW1lbnQodGFyZ2V0LCBjb250ZW50LCBhY3RpdmUpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogdlRyZWUkLFxuICAgICAgICBldmVudHM6ICh0eXBlKSA9PiB4cy5tZXJnZShzb3VyY2VzLkRPTS5zZWxlY3QoXCIuZGltbWVyXCIpLmV2ZW50cyh0eXBlKSwgYW5pbWF0ZWRDb250ZW50LmV2ZW50cyh0eXBlKSlcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChzY29wZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG1haW4oc291cmNlcyk7XG4gICAgfVxuICAgIGNvbnN0IGlzb2xhdGVkTWFpbiA9IGlzb2xhdGUobWFpbiwgc2NvcGUpO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBkaW1tZXIoY29udGVudDogRE9NQ29udGVudCwgcHJvcHM6IFBhcnRpYWw8UHJvcHM+LCB0YXJnZXQ6IFN0cmluZyB8IFZOb2RlID0gXCJwYWdlXCIpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHRhcmdldCA9PT0gXCJwYWdlXCJcbiAgICAgID8gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcInVpIFwiICsgKHByb3BzLmludmVydGVkID8gXCJpbnZlcnRlZCBcIiA6IFwiXCIpICsgXCJkaW1tZXIgbW9kYWxzIHBhZ2UgZGltbWVyXCIgfSB9LCBjb250ZW50KVxuICAgICAgOiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwidWkgXCIgKyAocHJvcHMuaW52ZXJ0ZWQgPyBcImludmVydGVkIFwiIDogXCJcIikgKyBcInRhcmdldHRlZCBkaW1tZXJcIiB9IH0sIFtcbiAgICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImNvbnRlbnRcIiB9IH0sIFtcbiAgICAgICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiY2VudGVyXCIgfSB9LFxuICAgICAgICAgICAgY29udGVudFxuICAgICAgICAgIClcbiAgICAgICAgXSlcbiAgICAgIF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGltRWxlbWVudCh0YXJnZXRPclN0cmluZzogVk5vZGUgfCBzdHJpbmcsIGNvbnRlbnQ6IFZOb2RlLCBhY3RpdmU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBpc1BhZ2UgPSB0eXBlb2YgKHRhcmdldE9yU3RyaW5nKSA9PT0gXCJzdHJpbmdcIjtcbiAgICBsZXQgdGFyZ2V0ID0gaXNQYWdlID8gY29udGVudCA6IHRhcmdldE9yU3RyaW5nIGFzIFZOb2RlO1xuICAgIGxldCBjbGFzc05hbWUgPSBpc1BhZ2UgPyBcIlwiIDogXCJkaW1tYWJsZVwiLCBjO1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBpc1BhZ2UgPyBcImFjdGl2ZVwiIDogXCIgZGltbWVkXCI7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBwYXRjaENsYXNzTGlzdCh0YXJnZXQsIFtcImRpbW1hYmxlXCIsIFwiZGltbWVkXCIsIFwiaW52ZXJ0ZWRcIiwgXCJhY3RpdmVcIl0sIGNsYXNzTmFtZSk7XG4gICAgaWYgKGlzUGFnZSkge1xuICAgICAgaWYgKHRhcmdldC5jaGlsZHJlbikge1xuICAgICAgICBjID0gdGFyZ2V0LmNoaWxkcmVuO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGFyZ2V0LnRleHQpIHtcbiAgICAgICAgYyA9IHRhcmdldC50ZXh0O1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGMgPSBhZGRFbGVtZW50KGNvbnRlbnQsIHRhcmdldCwgXCJ0YXJnZXR0ZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBoKHRhcmdldC5zZWwsIGRhdGEsIGMpO1xuICB9XG4gIGZ1bmN0aW9uIG9uSG92ZXIoZXZlbnRzOiBFdmVudFNlbGVjdG9yKTogTWVtb3J5U3RyZWFtPGJvb2xlYW4+IHtcbiAgICByZXR1cm4geHMubWVyZ2UoZXZlbnRzKFwibW91c2VlbnRlclwiKSwgZXZlbnRzKFwibW91c2VsZWF2ZVwiKSlcbiAgICAgIC5tYXAoZXZ0ID0+IChldnQgYXMgTW91c2VFdmVudCkudHlwZSA9PT0gXCJtb3VzZWVudGVyXCIpLnN0YXJ0V2l0aChmYWxzZSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2RpbW1lci9pbmRleC50cyIsIlwidXNlIHN0cmljdFwiO1xudmFyIGluZGV4XzEgPSByZXF1aXJlKFwiLi4vaW5kZXhcIik7XG52YXIgRGVsYXlPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsYXlPcGVyYXRvcihkdCwgaW5zKSB7XG4gICAgICAgIHRoaXMuZHQgPSBkdDtcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMudHlwZSA9ICdkZWxheSc7XG4gICAgICAgIHRoaXMub3V0ID0gbnVsbDtcbiAgICB9XG4gICAgRGVsYXlPcGVyYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIERlbGF5T3BlcmF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IG51bGw7XG4gICAgfTtcbiAgICBEZWxheU9wZXJhdG9yLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGlkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdS5fbih0KTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9LCB0aGlzLmR0KTtcbiAgICB9O1xuICAgIERlbGF5T3BlcmF0b3IucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAoIXUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHUuX2UoZXJyKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9LCB0aGlzLmR0KTtcbiAgICB9O1xuICAgIERlbGF5T3BlcmF0b3IucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAoIXUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9LCB0aGlzLmR0KTtcbiAgICB9O1xuICAgIHJldHVybiBEZWxheU9wZXJhdG9yO1xufSgpKTtcbi8qKlxuICogRGVsYXlzIHBlcmlvZGljIGV2ZW50cyBieSBhIGdpdmVuIHRpbWUgcGVyaW9kLlxuICpcbiAqIE1hcmJsZSBkaWFncmFtOlxuICpcbiAqIGBgYHRleHRcbiAqIDEtLS0tMi0tMy0tNC0tLS01fFxuICogICAgIGRlbGF5KDYwKVxuICogLS0tMS0tLS0yLS0zLS00LS0tLTV8XG4gKiBgYGBcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgZnJvbURpYWdyYW0gZnJvbSAneHN0cmVhbS9leHRyYS9mcm9tRGlhZ3JhbSdcbiAqIGltcG9ydCBkZWxheSBmcm9tICd4c3RyZWFtL2V4dHJhL2RlbGF5J1xuICpcbiAqIGNvbnN0IHN0cmVhbSA9IGZyb21EaWFncmFtKCcxLS0tLTItLTMtLTQtLS0tNXwnKVxuICogIC5jb21wb3NlKGRlbGF5KDYwKSlcbiAqXG4gKiBzdHJlYW0uYWRkTGlzdGVuZXIoe1xuICogICBuZXh0OiBpID0+IGNvbnNvbGUubG9nKGkpLFxuICogICBlcnJvcjogZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSxcbiAqICAgY29tcGxldGU6ICgpID0+IGNvbnNvbGUubG9nKCdjb21wbGV0ZWQnKVxuICogfSlcbiAqIGBgYFxuICpcbiAqIGBgYHRleHRcbiAqID4gMSAgKGFmdGVyIDYwIG1zKVxuICogPiAyICAoYWZ0ZXIgMTYwIG1zKVxuICogPiAzICAoYWZ0ZXIgMjIwIG1zKVxuICogPiA0ICAoYWZ0ZXIgMjgwIG1zKVxuICogPiA1ICAoYWZ0ZXIgMzgwIG1zKVxuICogPiBjb21wbGV0ZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBwZXJpb2QgVGhlIGFtb3VudCBvZiBzaWxlbmNlIHJlcXVpcmVkIGluIG1pbGxpc2Vjb25kcy5cbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqL1xuZnVuY3Rpb24gZGVsYXkocGVyaW9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5T3BlcmF0b3IoaW5zKSB7XG4gICAgICAgIHJldHVybiBuZXcgaW5kZXhfMS5TdHJlYW0obmV3IERlbGF5T3BlcmF0b3IocGVyaW9kLCBpbnMpKTtcbiAgICB9O1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVsYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34veHN0cmVhbS9leHRyYS9kZWxheS5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbnZhciBlbXB0eSA9IHt9O1xudmFyIERyb3BSZXBlYXRzT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyb3BSZXBlYXRzT3BlcmF0b3IoaW5zLCBmbikge1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5mbiA9IGZuO1xuICAgICAgICB0aGlzLnR5cGUgPSAnZHJvcFJlcGVhdHMnO1xuICAgICAgICB0aGlzLm91dCA9IG51bGw7XG4gICAgICAgIHRoaXMudiA9IGVtcHR5O1xuICAgIH1cbiAgICBEcm9wUmVwZWF0c09wZXJhdG9yLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRHJvcFJlcGVhdHNPcGVyYXRvci5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy52ID0gZW1wdHk7XG4gICAgfTtcbiAgICBEcm9wUmVwZWF0c09wZXJhdG9yLnByb3RvdHlwZS5pc0VxID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm4gPyB0aGlzLmZuKHgsIHkpIDogeCA9PT0geTtcbiAgICB9O1xuICAgIERyb3BSZXBlYXRzT3BlcmF0b3IucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKCF1KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdiA9IHRoaXMudjtcbiAgICAgICAgaWYgKHYgIT09IGVtcHR5ICYmIHRoaXMuaXNFcSh0LCB2KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy52ID0gdDtcbiAgICAgICAgdS5fbih0KTtcbiAgICB9O1xuICAgIERyb3BSZXBlYXRzT3BlcmF0b3IucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAoIXUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIERyb3BSZXBlYXRzT3BlcmF0b3IucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAoIXUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBEcm9wUmVwZWF0c09wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuRHJvcFJlcGVhdHNPcGVyYXRvciA9IERyb3BSZXBlYXRzT3BlcmF0b3I7XG4vKipcbiAqIERyb3BzIGNvbnNlY3V0aXZlIGR1cGxpY2F0ZSB2YWx1ZXMgaW4gYSBzdHJlYW0uXG4gKlxuICogTWFyYmxlIGRpYWdyYW06XG4gKlxuICogYGBgdGV4dFxuICogLS0xLS0yLS0xLS0xLS0xLS0yLS0zLS00LS0zLS0zfFxuICogICAgIGRyb3BSZXBlYXRzXG4gKiAtLTEtLTItLTEtLS0tLS0tLTItLTMtLTQtLTMtLS18XG4gKiBgYGBcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgZHJvcFJlcGVhdHMgZnJvbSAneHN0cmVhbS9leHRyYS9kcm9wUmVwZWF0cydcbiAqXG4gKiBjb25zdCBzdHJlYW0gPSB4cy5vZigxLCAyLCAxLCAxLCAxLCAyLCAzLCA0LCAzLCAzKVxuICogICAuY29tcG9zZShkcm9wUmVwZWF0cygpKVxuICpcbiAqIHN0cmVhbS5hZGRMaXN0ZW5lcih7XG4gKiAgIG5leHQ6IGkgPT4gY29uc29sZS5sb2coaSksXG4gKiAgIGVycm9yOiBlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpLFxuICogICBjb21wbGV0ZTogKCkgPT4gY29uc29sZS5sb2coJ2NvbXBsZXRlZCcpXG4gKiB9KVxuICogYGBgXG4gKlxuICogYGBgdGV4dFxuICogPiAxXG4gKiA+IDJcbiAqID4gMVxuICogPiAyXG4gKiA+IDNcbiAqID4gNFxuICogPiAzXG4gKiA+IGNvbXBsZXRlZFxuICogYGBgXG4gKlxuICogRXhhbXBsZSB3aXRoIGEgY3VzdG9tIGlzRXF1YWwgZnVuY3Rpb246XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBkcm9wUmVwZWF0cyBmcm9tICd4c3RyZWFtL2V4dHJhL2Ryb3BSZXBlYXRzJ1xuICpcbiAqIGNvbnN0IHN0cmVhbSA9IHhzLm9mKCdhJywgJ2InLCAnYScsICdBJywgJ0InLCAnYicpXG4gKiAgIC5jb21wb3NlKGRyb3BSZXBlYXRzKCh4LCB5KSA9PiB4LnRvTG93ZXJDYXNlKCkgPT09IHkudG9Mb3dlckNhc2UoKSkpXG4gKlxuICogc3RyZWFtLmFkZExpc3RlbmVyKHtcbiAqICAgbmV4dDogaSA9PiBjb25zb2xlLmxvZyhpKSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmVycm9yKGVyciksXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnY29tcGxldGVkJylcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBgYGB0ZXh0XG4gKiA+IGFcbiAqID4gYlxuICogPiBhXG4gKiA+IEJcbiAqID4gY29tcGxldGVkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpc0VxdWFsIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIG9mIHR5cGVcbiAqIGAoeDogVCwgeTogVCkgPT4gYm9vbGVhbmAgdGhhdCB0YWtlcyBhbiBldmVudCBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gYW5kXG4gKiBjaGVja3MgaWYgaXQgaXMgZXF1YWwgdG8gcHJldmlvdXMgZXZlbnQsIGJ5IHJldHVybmluZyBhIGJvb2xlYW4uXG4gKiBAcmV0dXJuIHtTdHJlYW19XG4gKi9cbmZ1bmN0aW9uIGRyb3BSZXBlYXRzKGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSB2b2lkIDA7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gZHJvcFJlcGVhdHNPcGVyYXRvcihpbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBpbmRleF8xLlN0cmVhbShuZXcgRHJvcFJlcGVhdHNPcGVyYXRvcihpbnMsIGlzRXF1YWwpKTtcbiAgICB9O1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZHJvcFJlcGVhdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wUmVwZWF0cy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34veHN0cmVhbS9leHRyYS9kcm9wUmVwZWF0cy5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZShcInhzdHJlYW1cIik7XG52YXIgYWRhcHRfMSA9IHJlcXVpcmUoXCJAY3ljbGUvcnVuL2xpYi9hZGFwdFwiKTtcbnZhciBIVE1MU291cmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIVE1MU291cmNlKGh0bWwkLCBfbmFtZSkge1xuICAgICAgICB0aGlzLl9uYW1lID0gX25hbWU7XG4gICAgICAgIHRoaXMuX2h0bWwkID0gaHRtbCQ7XG4gICAgICAgIHRoaXMuX2VtcHR5JCA9IGFkYXB0XzEuYWRhcHQoeHN0cmVhbV8xLmRlZmF1bHQuZW1wdHkoKSk7XG4gICAgfVxuICAgIEhUTUxTb3VyY2UucHJvdG90eXBlLmVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3V0ID0gYWRhcHRfMS5hZGFwdCh0aGlzLl9odG1sJCk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBIVE1MU291cmNlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIVE1MU291cmNlKHhzdHJlYW1fMS5kZWZhdWx0LmVtcHR5KCksIHRoaXMuX25hbWUpO1xuICAgIH07XG4gICAgSFRNTFNvdXJjZS5wcm90b3R5cGUuZXZlbnRzID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgb3V0ID0gdGhpcy5fZW1wdHkkO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSB0aGlzLl9uYW1lO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgcmV0dXJuIEhUTUxTb3VyY2U7XG59KCkpO1xuZXhwb3J0cy5IVE1MU291cmNlID0gSFRNTFNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhUTUxTb3VyY2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL0hUTUxTb3VyY2UuanNcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFkYXB0XzEgPSByZXF1aXJlKFwiQGN5Y2xlL3J1bi9saWIvYWRhcHRcIik7XG52YXIgRG9jdW1lbnRET01Tb3VyY2VfMSA9IHJlcXVpcmUoXCIuL0RvY3VtZW50RE9NU291cmNlXCIpO1xudmFyIEJvZHlET01Tb3VyY2VfMSA9IHJlcXVpcmUoXCIuL0JvZHlET01Tb3VyY2VcIik7XG52YXIgRWxlbWVudEZpbmRlcl8xID0gcmVxdWlyZShcIi4vRWxlbWVudEZpbmRlclwiKTtcbnZhciBmcm9tRXZlbnRfMSA9IHJlcXVpcmUoXCIuL2Zyb21FdmVudFwiKTtcbnZhciBpc29sYXRlXzEgPSByZXF1aXJlKFwiLi9pc29sYXRlXCIpO1xudmFyIEV2ZW50RGVsZWdhdG9yXzEgPSByZXF1aXJlKFwiLi9FdmVudERlbGVnYXRvclwiKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgZXZlbnRUeXBlc1RoYXREb250QnViYmxlID0gW1xuICAgIFwiYmx1clwiLFxuICAgIFwiY2FucGxheVwiLFxuICAgIFwiY2FucGxheXRocm91Z2hcIixcbiAgICBcImNoYW5nZVwiLFxuICAgIFwiZHVyYXRpb25jaGFuZ2VcIixcbiAgICBcImVtcHRpZWRcIixcbiAgICBcImVuZGVkXCIsXG4gICAgXCJmb2N1c1wiLFxuICAgIFwibG9hZFwiLFxuICAgIFwibG9hZGVkZGF0YVwiLFxuICAgIFwibG9hZGVkbWV0YWRhdGFcIixcbiAgICBcIm1vdXNlZW50ZXJcIixcbiAgICBcIm1vdXNlbGVhdmVcIixcbiAgICBcInBhdXNlXCIsXG4gICAgXCJwbGF5XCIsXG4gICAgXCJwbGF5aW5nXCIsXG4gICAgXCJyYXRlY2hhbmdlXCIsXG4gICAgXCJyZXNldFwiLFxuICAgIFwic2Nyb2xsXCIsXG4gICAgXCJzZWVrZWRcIixcbiAgICBcInNlZWtpbmdcIixcbiAgICBcInN0YWxsZWRcIixcbiAgICBcInN1Ym1pdFwiLFxuICAgIFwic3VzcGVuZFwiLFxuICAgIFwidGltZXVwZGF0ZVwiLFxuICAgIFwidW5sb2FkXCIsXG4gICAgXCJ2b2x1bWVjaGFuZ2VcIixcbiAgICBcIndhaXRpbmdcIixcbl07XG5mdW5jdGlvbiBkZXRlcm1pbmVVc2VDYXB0dXJlKGV2ZW50VHlwZSwgb3B0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudXNlQ2FwdHVyZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJlc3VsdCA9IG9wdGlvbnMudXNlQ2FwdHVyZTtcbiAgICB9XG4gICAgaWYgKGV2ZW50VHlwZXNUaGF0RG9udEJ1YmJsZS5pbmRleE9mKGV2ZW50VHlwZSkgIT09IC0xKSB7XG4gICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmaWx0ZXJCYXNlZE9uSXNvbGF0aW9uKGRvbVNvdXJjZSwgZnVsbFNjb3BlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZpbHRlckJhc2VkT25Jc29sYXRpb25PcGVyYXRvcihyb290RWxlbWVudCQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgICAgICAgIHdhc0lzb2xhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3VsZFBhc3M6IGZhbHNlLFxuICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJvb3RFbGVtZW50JFxuICAgICAgICAgICAgLmZvbGQoZnVuY3Rpb24gY2hlY2tJZlNob3VsZFBhc3Moc3RhdGUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBpc0lzb2xhdGVkID0gISFkb21Tb3VyY2UuX2lzb2xhdGVNb2R1bGUuZ2V0RWxlbWVudChmdWxsU2NvcGUpO1xuICAgICAgICAgICAgdmFyIHNob3VsZFBhc3MgPSBpc0lzb2xhdGVkICYmICFzdGF0ZS53YXNJc29sYXRlZDtcbiAgICAgICAgICAgIHJldHVybiB7IHdhc0lzb2xhdGVkOiBpc0lzb2xhdGVkLCBzaG91bGRQYXNzOiBzaG91bGRQYXNzLCBlbGVtZW50OiBlbGVtZW50IH07XG4gICAgICAgIH0sIGluaXRpYWxTdGF0ZSlcbiAgICAgICAgICAgIC5kcm9wKDEpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNob3VsZFBhc3M7IH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmVsZW1lbnQ7IH0pO1xuICAgIH07XG59XG52YXIgTWFpbkRPTVNvdXJjZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFpbkRPTVNvdXJjZShfcm9vdEVsZW1lbnQkLCBfc2FuaXRhdGlvbiQsIF9uYW1lc3BhY2UsIF9pc29sYXRlTW9kdWxlLCBfZGVsZWdhdG9ycywgX25hbWUpIHtcbiAgICAgICAgaWYgKF9uYW1lc3BhY2UgPT09IHZvaWQgMCkgeyBfbmFtZXNwYWNlID0gW107IH1cbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQkID0gX3Jvb3RFbGVtZW50JDtcbiAgICAgICAgdGhpcy5fc2FuaXRhdGlvbiQgPSBfc2FuaXRhdGlvbiQ7XG4gICAgICAgIHRoaXMuX25hbWVzcGFjZSA9IF9uYW1lc3BhY2U7XG4gICAgICAgIHRoaXMuX2lzb2xhdGVNb2R1bGUgPSBfaXNvbGF0ZU1vZHVsZTtcbiAgICAgICAgdGhpcy5fZGVsZWdhdG9ycyA9IF9kZWxlZ2F0b3JzO1xuICAgICAgICB0aGlzLl9uYW1lID0gX25hbWU7XG4gICAgICAgIHRoaXMuaXNvbGF0ZVNvdXJjZSA9IGlzb2xhdGVfMS5pc29sYXRlU291cmNlO1xuICAgICAgICB0aGlzLmlzb2xhdGVTaW5rID0gZnVuY3Rpb24gKHNpbmssIHNjb3BlKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGUgPT09ICc6cm9vdCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2luaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHV0aWxzXzEuaXNDbGFzc09ySWQoc2NvcGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzb2xhdGVfMS5zaWJsaW5nSXNvbGF0ZVNpbmsoc2luaywgc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZGdWxsU2NvcGUgPSB1dGlsc18xLmdldEZ1bGxTY29wZShfdGhpcy5fbmFtZXNwYWNlKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEZ1bGxTY29wZSA9IFtwcmV2RnVsbFNjb3BlLCBzY29wZV0uZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiAhIXg7IH0pLmpvaW4oJy0nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNvbGF0ZV8xLnRvdGFsSXNvbGF0ZVNpbmsoc2luaywgbmV4dEZ1bGxTY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLmVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3V0cHV0JDtcbiAgICAgICAgaWYgKHRoaXMuX25hbWVzcGFjZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG91dHB1dCQgPSB0aGlzLl9yb290RWxlbWVudCQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudEZpbmRlcl8xID0gbmV3IEVsZW1lbnRGaW5kZXJfMS5FbGVtZW50RmluZGVyKHRoaXMuX25hbWVzcGFjZSwgdGhpcy5faXNvbGF0ZU1vZHVsZSk7XG4gICAgICAgICAgICBvdXRwdXQkID0gdGhpcy5fcm9vdEVsZW1lbnQkLm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsZW1lbnRGaW5kZXJfMS5jYWxsKGVsKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IGFkYXB0XzEuYWRhcHQob3V0cHV0JC5yZW1lbWJlcigpKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYWluRE9NU291cmNlLnByb3RvdHlwZSwgXCJuYW1lc3BhY2VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYW1lc3BhY2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRE9NIGRyaXZlcidzIHNlbGVjdCgpIGV4cGVjdHMgdGhlIGFyZ3VtZW50IHRvIGJlIGEgXCIgK1xuICAgICAgICAgICAgICAgIFwic3RyaW5nIGFzIGEgQ1NTIHNlbGVjdG9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudERPTVNvdXJjZV8xLkRvY3VtZW50RE9NU291cmNlKHRoaXMuX25hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gJ2JvZHknKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJvZHlET01Tb3VyY2VfMS5Cb2R5RE9NU291cmNlKHRoaXMuX25hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmltbWVkU2VsZWN0b3IgPSBzZWxlY3Rvci50cmltKCk7XG4gICAgICAgIHZhciBjaGlsZE5hbWVzcGFjZSA9IHRyaW1tZWRTZWxlY3RvciA9PT0gXCI6cm9vdFwiID9cbiAgICAgICAgICAgIHRoaXMuX25hbWVzcGFjZSA6XG4gICAgICAgICAgICB0aGlzLl9uYW1lc3BhY2UuY29uY2F0KHRyaW1tZWRTZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgTWFpbkRPTVNvdXJjZSh0aGlzLl9yb290RWxlbWVudCQsIHRoaXMuX3Nhbml0YXRpb24kLCBjaGlsZE5hbWVzcGFjZSwgdGhpcy5faXNvbGF0ZU1vZHVsZSwgdGhpcy5fZGVsZWdhdG9ycywgdGhpcy5fbmFtZSk7XG4gICAgfTtcbiAgICBNYWluRE9NU291cmNlLnByb3RvdHlwZS5ldmVudHMgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnRUeXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJET00gZHJpdmVyJ3MgZXZlbnRzKCkgZXhwZWN0cyBhcmd1bWVudCB0byBiZSBhIFwiICtcbiAgICAgICAgICAgICAgICBcInN0cmluZyByZXByZXNlbnRpbmcgdGhlIGV2ZW50IHR5cGUgdG8gbGlzdGVuIGZvci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZUNhcHR1cmUgPSBkZXRlcm1pbmVVc2VDYXB0dXJlKGV2ZW50VHlwZSwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLl9uYW1lc3BhY2U7XG4gICAgICAgIHZhciBmdWxsU2NvcGUgPSB1dGlsc18xLmdldEZ1bGxTY29wZShuYW1lc3BhY2UpO1xuICAgICAgICB2YXIga2V5UGFydHMgPSBbZXZlbnRUeXBlLCB1c2VDYXB0dXJlXTtcbiAgICAgICAgaWYgKGZ1bGxTY29wZSkge1xuICAgICAgICAgICAga2V5UGFydHMucHVzaChmdWxsU2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSBrZXlQYXJ0cy5qb2luKCd+Jyk7XG4gICAgICAgIHZhciBkb21Tb3VyY2UgPSB0aGlzO1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnQkO1xuICAgICAgICBpZiAoZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICByb290RWxlbWVudCQgPSB0aGlzLl9yb290RWxlbWVudCRcbiAgICAgICAgICAgICAgICAuY29tcG9zZShmaWx0ZXJCYXNlZE9uSXNvbGF0aW9uKGRvbVNvdXJjZSwgZnVsbFNjb3BlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByb290RWxlbWVudCQgPSB0aGlzLl9yb290RWxlbWVudCQudGFrZSgyKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnQkID0gcm9vdEVsZW1lbnQkXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIHNldHVwRXZlbnREZWxlZ2F0b3JPblRvcEVsZW1lbnQocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEV2ZW50IGxpc3RlbmVyIGp1c3QgZm9yIHRoZSByb290IGVsZW1lbnRcbiAgICAgICAgICAgIGlmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUV2ZW50XzEuZnJvbUV2ZW50KHJvb3RFbGVtZW50LCBldmVudFR5cGUsIHVzZUNhcHR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXIgb24gdGhlIG9yaWdpbiBlbGVtZW50IGFzIGFuIEV2ZW50RGVsZWdhdG9yXG4gICAgICAgICAgICB2YXIgZGVsZWdhdG9ycyA9IGRvbVNvdXJjZS5fZGVsZWdhdG9ycztcbiAgICAgICAgICAgIHZhciBvcmlnaW4gPSBkb21Tb3VyY2UuX2lzb2xhdGVNb2R1bGUuZ2V0RWxlbWVudChmdWxsU2NvcGUpIHx8IHJvb3RFbGVtZW50O1xuICAgICAgICAgICAgdmFyIGRlbGVnYXRvcjtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0b3JzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGVsZWdhdG9yID0gZGVsZWdhdG9ycy5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0b3IudXBkYXRlT3JpZ2luKG9yaWdpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0b3IgPSBuZXcgRXZlbnREZWxlZ2F0b3JfMS5FdmVudERlbGVnYXRvcihvcmlnaW4sIGV2ZW50VHlwZSwgdXNlQ2FwdHVyZSwgZG9tU291cmNlLl9pc29sYXRlTW9kdWxlKTtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0b3JzLnNldChrZXksIGRlbGVnYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgZG9tU291cmNlLl9pc29sYXRlTW9kdWxlLmFkZEV2ZW50RGVsZWdhdG9yKGZ1bGxTY29wZSwgZGVsZWdhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdWJqZWN0ID0gZGVsZWdhdG9yLmNyZWF0ZURlc3RpbmF0aW9uKG5hbWVzcGFjZSk7XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5mbGF0dGVuKCk7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdF8xLmFkYXB0KGV2ZW50JCk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IGRvbVNvdXJjZS5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Nhbml0YXRpb24kLnNoYW1lZnVsbHlTZW5kTmV4dChudWxsKTtcbiAgICAgICAgdGhpcy5faXNvbGF0ZU1vZHVsZS5yZXNldCgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1haW5ET01Tb3VyY2U7XG59KCkpO1xuZXhwb3J0cy5NYWluRE9NU291cmNlID0gTWFpbkRPTVNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1haW5ET01Tb3VyY2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL01haW5ET01Tb3VyY2UuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFNjb3BlQ2hlY2tlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NvcGVDaGVja2VyKGZ1bGxTY29wZSwgaXNvbGF0ZU1vZHVsZSkge1xuICAgICAgICB0aGlzLmZ1bGxTY29wZSA9IGZ1bGxTY29wZTtcbiAgICAgICAgdGhpcy5pc29sYXRlTW9kdWxlID0gaXNvbGF0ZU1vZHVsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgaXMgKmRpcmVjdGx5KiBpbiB0aGUgc2NvcGUgb2YgdGhpc1xuICAgICAqIHNjb3BlIGNoZWNrZXIuIEJlaW5nIGNvbnRhaW5lZCAqaW5kaXJlY3RseSogdGhyb3VnaCBvdGhlciBzY29wZXNcbiAgICAgKiBpcyBub3QgdmFsaWQuIFRoaXMgaXMgY3J1Y2lhbCBmb3IgaW1wbGVtZW50aW5nIHBhcmVudC1jaGlsZCBpc29sYXRpb24sXG4gICAgICogc28gdGhhdCB0aGUgcGFyZW50IHNlbGVjdG9ycyBkb24ndCBzZWFyY2ggaW5zaWRlIGEgY2hpbGQgc2NvcGUuXG4gICAgICovXG4gICAgU2NvcGVDaGVja2VyLnByb3RvdHlwZS5pc0RpcmVjdGx5SW5TY29wZSA9IGZ1bmN0aW9uIChsZWFmKSB7XG4gICAgICAgIGZvciAodmFyIGVsID0gbGVhZjsgZWw7IGVsID0gZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGZ1bGxTY29wZSA9IHRoaXMuaXNvbGF0ZU1vZHVsZS5nZXRGdWxsU2NvcGUoZWwpO1xuICAgICAgICAgICAgaWYgKGZ1bGxTY29wZSAmJiBmdWxsU2NvcGUgIT09IHRoaXMuZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZ1bGxTY29wZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIFNjb3BlQ2hlY2tlcjtcbn0oKSk7XG5leHBvcnRzLlNjb3BlQ2hlY2tlciA9IFNjb3BlQ2hlY2tlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjb3BlQ2hlY2tlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvU2NvcGVDaGVja2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXNTZWxlY3RvcigpIHtcbiAgICB2YXIgdmVuZG9yO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuICAgICAgICB2ZW5kb3IgPSBwcm90by5tYXRjaGVzXG4gICAgICAgICAgICB8fCBwcm90by5tYXRjaGVzU2VsZWN0b3JcbiAgICAgICAgICAgIHx8IHByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvclxuICAgICAgICAgICAgfHwgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgICB8fCBwcm90by5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICAgICAgfHwgcHJvdG8ub01hdGNoZXNTZWxlY3RvcjtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICB2ZW5kb3IgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gbWF0Y2goZWxlbSwgc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHZlbmRvcikge1xuICAgICAgICAgICAgcmV0dXJuIHZlbmRvci5jYWxsKGVsZW0sIHNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZXMgPSBlbGVtLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1tpXSA9PT0gZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYXRjaGVzU2VsZWN0b3IgPSBjcmVhdGVNYXRjaGVzU2VsZWN0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGNoZXNTZWxlY3Rvci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvbWF0Y2hlc1NlbGVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBJbnNwaXJlZCBieSBHb29nbGUgQ2xvc3VyZTpcbi8vIGh0dHA6Ly9jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vc3ZuL2RvY3MvXG4vLyBjbG9zdXJlX2dvb2dfYXJyYXlfYXJyYXkuanMuaHRtbCNnb29nLmFycmF5LmNsZWFyXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHZhbHVlID0gcmVxdWlyZSgnLi4vLi4vb2JqZWN0L3ZhbGlkLXZhbHVlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR2YWx1ZSh0aGlzKS5sZW5ndGggPSAwO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9hcnJheS8jL2NsZWFyLmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlLCBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZlxuICAsIHggPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypjdXN0b21DcmVhdGUqLykge1xuXHR2YXIgc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2Zcblx0ICAsIGN1c3RvbUNyZWF0ZSA9IGFyZ3VtZW50c1swXSB8fCBjcmVhdGU7XG5cdGlmICh0eXBlb2Ygc2V0UHJvdG90eXBlT2YgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuIGdldFByb3RvdHlwZU9mKHNldFByb3RvdHlwZU9mKGN1c3RvbUNyZWF0ZShudWxsKSwgeCkpID09PSB4O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBCaWcgdGhhbmtzIHRvIEBXZWJSZWZsZWN0aW9uIGZvciBzb3J0aW5nIHRoaXMgb3V0XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uLzU1OTM1NTRcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNPYmplY3QgICAgICA9IHJlcXVpcmUoJy4uL2lzLW9iamVjdCcpXG4gICwgdmFsdWUgICAgICAgICA9IHJlcXVpcmUoJy4uL3ZhbGlkLXZhbHVlJylcblxuICAsIGlzUHJvdG90eXBlT2YgPSBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2ZcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIG51bGxEZXNjID0geyBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSxcblx0XHR2YWx1ZTogdW5kZWZpbmVkIH1cbiAgLCB2YWxpZGF0ZTtcblxudmFsaWRhdGUgPSBmdW5jdGlvbiAob2JqLCBwcm90b3R5cGUpIHtcblx0dmFsdWUob2JqKTtcblx0aWYgKChwcm90b3R5cGUgPT09IG51bGwpIHx8IGlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiBvYmo7XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3RvdHlwZSBtdXN0IGJlIG51bGwgb3IgYW4gb2JqZWN0Jyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoc3RhdHVzKSB7XG5cdHZhciBmbiwgc2V0O1xuXHRpZiAoIXN0YXR1cykgcmV0dXJuIG51bGw7XG5cdGlmIChzdGF0dXMubGV2ZWwgPT09IDIpIHtcblx0XHRpZiAoc3RhdHVzLnNldCkge1xuXHRcdFx0c2V0ID0gc3RhdHVzLnNldDtcblx0XHRcdGZuID0gZnVuY3Rpb24gKG9iaiwgcHJvdG90eXBlKSB7XG5cdFx0XHRcdHNldC5jYWxsKHZhbGlkYXRlKG9iaiwgcHJvdG90eXBlKSwgcHJvdG90eXBlKTtcblx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZuID0gZnVuY3Rpb24gKG9iaiwgcHJvdG90eXBlKSB7XG5cdFx0XHRcdHZhbGlkYXRlKG9iaiwgcHJvdG90eXBlKS5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmbiA9IGZ1bmN0aW9uIHNlbGYob2JqLCBwcm90b3R5cGUpIHtcblx0XHRcdHZhciBpc051bGxCYXNlO1xuXHRcdFx0dmFsaWRhdGUob2JqLCBwcm90b3R5cGUpO1xuXHRcdFx0aXNOdWxsQmFzZSA9IGlzUHJvdG90eXBlT2YuY2FsbChzZWxmLm51bGxQb2x5ZmlsbCwgb2JqKTtcblx0XHRcdGlmIChpc051bGxCYXNlKSBkZWxldGUgc2VsZi5udWxsUG9seWZpbGwuX19wcm90b19fO1xuXHRcdFx0aWYgKHByb3RvdHlwZSA9PT0gbnVsbCkgcHJvdG90eXBlID0gc2VsZi5udWxsUG9seWZpbGw7XG5cdFx0XHRvYmouX19wcm90b19fID0gcHJvdG90eXBlO1xuXHRcdFx0aWYgKGlzTnVsbEJhc2UpIGRlZmluZVByb3BlcnR5KHNlbGYubnVsbFBvbHlmaWxsLCAnX19wcm90b19fJywgbnVsbERlc2MpO1xuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9O1xuXHR9XG5cdHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdsZXZlbCcsIHsgY29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogc3RhdHVzLmxldmVsIH0pO1xufSgoZnVuY3Rpb24gKCkge1xuXHR2YXIgeCA9IE9iamVjdC5jcmVhdGUobnVsbCksIHkgPSB7fSwgc2V0XG5cdCAgLCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJyk7XG5cblx0aWYgKGRlc2MpIHtcblx0XHR0cnkge1xuXHRcdFx0c2V0ID0gZGVzYy5zZXQ7IC8vIE9wZXJhIGNyYXNoZXMgYXQgdGhpcyBwb2ludFxuXHRcdFx0c2V0LmNhbGwoeCwgeSk7XG5cdFx0fSBjYXRjaCAoaWdub3JlKSB7IH1cblx0XHRpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHgpID09PSB5KSByZXR1cm4geyBzZXQ6IHNldCwgbGV2ZWw6IDIgfTtcblx0fVxuXG5cdHguX19wcm90b19fID0geTtcblx0aWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSA9PT0geSkgcmV0dXJuIHsgbGV2ZWw6IDIgfTtcblxuXHR4ID0ge307XG5cdHguX19wcm90b19fID0geTtcblx0aWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSA9PT0geSkgcmV0dXJuIHsgbGV2ZWw6IDEgfTtcblxuXHRyZXR1cm4gZmFsc2U7XG59KCkpKSk7XG5cbnJlcXVpcmUoJy4uL2NyZWF0ZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2Yvc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaXMtaW1wbGVtZW50ZWQnKSgpXG5cdD8gU3RyaW5nLnByb3RvdHlwZS5jb250YWluc1xuXHQ6IHJlcXVpcmUoJy4vc2hpbScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzSXRlcmFibGUgPSByZXF1aXJlKCcuL2lzLWl0ZXJhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IodmFsdWUgKyBcIiBpcyBub3QgaXRlcmFibGVcIik7XG5cdHJldHVybiB2YWx1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LWl0ZXJhdG9yL3ZhbGlkLWl0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKCkgPyBNYXAgOiByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LW1hcC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZXhwb3J0cy5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgZ2V0Q29uZmlybWF0aW9uID0gZXhwb3J0cy5nZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xudmFyIHN1cHBvcnRzSGlzdG9yeSA9IGV4cG9ydHMuc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbnZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZXhwb3J0cy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xudmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZXhwb3J0cy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xudmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBleHBvcnRzLmlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9oaXN0b3J5L0RPTVV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9oaXN0b3J5L0V4ZWN1dGlvbkVudmlyb25tZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ludmFyaWFudC9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHNlbGVjdG9yUGFyc2VyKF9hKSB7XG4gICAgdmFyIHNlbCA9IF9hLnNlbDtcbiAgICB2YXIgaGFzaElkeCA9IHNlbC5pbmRleE9mKCcjJyk7XG4gICAgdmFyIGRvdElkeCA9IHNlbC5pbmRleE9mKCcuJywgaGFzaElkeCk7XG4gICAgdmFyIGhhc2ggPSBoYXNoSWR4ID4gMCA/IGhhc2hJZHggOiBzZWwubGVuZ3RoO1xuICAgIHZhciBkb3QgPSBkb3RJZHggPiAwID8gZG90SWR4IDogc2VsLmxlbmd0aDtcbiAgICB2YXIgdGFnTmFtZSA9IGhhc2hJZHggIT09IC0xIHx8IGRvdElkeCAhPT0gLTEgP1xuICAgICAgICBzZWwuc2xpY2UoMCwgTWF0aC5taW4oaGFzaCwgZG90KSkgOlxuICAgICAgICBzZWw7XG4gICAgdmFyIGlkID0gaGFzaCA8IGRvdCA/IHNlbC5zbGljZShoYXNoICsgMSwgZG90KSA6IHZvaWQgMDtcbiAgICB2YXIgY2xhc3NOYW1lID0gZG90SWR4ID4gMCA/IHNlbC5zbGljZShkb3QgKyAxKS5yZXBsYWNlKC9cXC4vZywgJyAnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIH07XG59XG5leHBvcnRzLnNlbGVjdG9yUGFyc2VyID0gc2VsZWN0b3JQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RvclBhcnNlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tc2VsZWN0b3IvbGliL2NvbW1vbmpzL3NlbGVjdG9yUGFyc2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbi8vIEFsbCBTVkcgY2hpbGRyZW4gZWxlbWVudHMsIG5vdCBpbiB0aGlzIGxpc3QsIHNob3VsZCBzZWxmLWNsb3NlXG5cbmV4cG9ydHMuQ09OVEFJTkVSID0ge1xuICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvaW50cm8uaHRtbCNUZXJtQ29udGFpbmVyRWxlbWVudFxuICAnYSc6IHRydWUsXG4gICdkZWZzJzogdHJ1ZSxcbiAgJ2dseXBoJzogdHJ1ZSxcbiAgJ2cnOiB0cnVlLFxuICAnbWFya2VyJzogdHJ1ZSxcbiAgJ21hc2snOiB0cnVlLFxuICAnbWlzc2luZy1nbHlwaCc6IHRydWUsXG4gICdwYXR0ZXJuJzogdHJ1ZSxcbiAgJ3N2Zyc6IHRydWUsXG4gICdzd2l0Y2gnOiB0cnVlLFxuICAnc3ltYm9sJzogdHJ1ZSxcblxuICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvaW50cm8uaHRtbCNUZXJtRGVzY3JpcHRpdmVFbGVtZW50XG4gICdkZXNjJzogdHJ1ZSxcbiAgJ21ldGFkYXRhJzogdHJ1ZSxcbiAgJ3RpdGxlJzogdHJ1ZVxufVxuXG4vLyBodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9zeW50YXguaHRtbCN2b2lkLWVsZW1lbnRzXG5cbmV4cG9ydHMuVk9JRCA9IHtcbiAgYXJlYTogdHJ1ZSxcbiAgYmFzZTogdHJ1ZSxcbiAgYnI6IHRydWUsXG4gIGNvbDogdHJ1ZSxcbiAgZW1iZWQ6IHRydWUsXG4gIGhyOiB0cnVlLFxuICBpbWc6IHRydWUsXG4gIGlucHV0OiB0cnVlLFxuICBrZXlnZW46IHRydWUsXG4gIGxpbms6IHRydWUsXG4gIG1ldGE6IHRydWUsXG4gIHBhcmFtOiB0cnVlLFxuICBzb3VyY2U6IHRydWUsXG4gIHRyYWNrOiB0cnVlLFxuICB3YnI6IHRydWVcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS10by1odG1sL2VsZW1lbnRzLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKHRleHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG59XG5mdW5jdGlvbiBjcmVhdGVDb21tZW50KHRleHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KTtcbn1cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5mdW5jdGlvbiByZW1vdmVDaGlsZChub2RlLCBjaGlsZCkge1xuICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQobm9kZSwgY2hpbGQpIHtcbiAgICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIHBhcmVudE5vZGUobm9kZSkge1xuICAgIHJldHVybiBub2RlLnBhcmVudE5vZGU7XG59XG5mdW5jdGlvbiBuZXh0U2libGluZyhub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG59XG5mdW5jdGlvbiB0YWdOYW1lKGVsbSkge1xuICAgIHJldHVybiBlbG0udGFnTmFtZTtcbn1cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50KG5vZGUsIHRleHQpIHtcbiAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50ZXh0Q29udGVudDtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc1RleHQobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAzO1xufVxuZnVuY3Rpb24gaXNDb21tZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gODtcbn1cbmV4cG9ydHMuaHRtbERvbUFwaSA9IHtcbiAgICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuICAgIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICAgIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICAgIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICAgIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gICAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gICAgZ2V0VGV4dENvbnRlbnQ6IGdldFRleHRDb250ZW50LFxuICAgIGlzRWxlbWVudDogaXNFbGVtZW50LFxuICAgIGlzVGV4dDogaXNUZXh0LFxuICAgIGlzQ29tbWVudDogaXNDb21tZW50LFxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuaHRtbERvbUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0bWxkb21hcGkuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tL2h0bWxkb21hcGkuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5hcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBwcmltaXRpdmUocykge1xuICAgIHJldHVybiB0eXBlb2YgcyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHMgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5wcmltaXRpdmUgPSBwcmltaXRpdmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vaXMuanNcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIGhfMSA9IHJlcXVpcmUoXCIuL2hcIik7XG5mdW5jdGlvbiBjb3B5VG9UaHVuayh2bm9kZSwgdGh1bmspIHtcbiAgICB0aHVuay5lbG0gPSB2bm9kZS5lbG07XG4gICAgdm5vZGUuZGF0YS5mbiA9IHRodW5rLmRhdGEuZm47XG4gICAgdm5vZGUuZGF0YS5hcmdzID0gdGh1bmsuZGF0YS5hcmdzO1xuICAgIHRodW5rLmRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHRodW5rLmNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdGh1bmsudGV4dCA9IHZub2RlLnRleHQ7XG4gICAgdGh1bmsuZWxtID0gdm5vZGUuZWxtO1xufVxuZnVuY3Rpb24gaW5pdCh0aHVuaykge1xuICAgIHZhciBjdXIgPSB0aHVuay5kYXRhO1xuICAgIHZhciB2bm9kZSA9IGN1ci5mbi5hcHBseSh1bmRlZmluZWQsIGN1ci5hcmdzKTtcbiAgICBjb3B5VG9UaHVuayh2bm9kZSwgdGh1bmspO1xufVxuZnVuY3Rpb24gcHJlcGF0Y2gob2xkVm5vZGUsIHRodW5rKSB7XG4gICAgdmFyIGksIG9sZCA9IG9sZFZub2RlLmRhdGEsIGN1ciA9IHRodW5rLmRhdGE7XG4gICAgdmFyIG9sZEFyZ3MgPSBvbGQuYXJncywgYXJncyA9IGN1ci5hcmdzO1xuICAgIGlmIChvbGQuZm4gIT09IGN1ci5mbiB8fCBvbGRBcmdzLmxlbmd0aCAhPT0gYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY29weVRvVGh1bmsoY3VyLmZuLmFwcGx5KHVuZGVmaW5lZCwgYXJncyksIHRodW5rKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKG9sZEFyZ3NbaV0gIT09IGFyZ3NbaV0pIHtcbiAgICAgICAgICAgIGNvcHlUb1RodW5rKGN1ci5mbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpLCB0aHVuayk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29weVRvVGh1bmsob2xkVm5vZGUsIHRodW5rKTtcbn1cbmV4cG9ydHMudGh1bmsgPSBmdW5jdGlvbiB0aHVuayhzZWwsIGtleSwgZm4sIGFyZ3MpIHtcbiAgICBpZiAoYXJncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFyZ3MgPSBmbjtcbiAgICAgICAgZm4gPSBrZXk7XG4gICAgICAgIGtleSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGhfMS5oKHNlbCwge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgaG9vazogeyBpbml0OiBpbml0LCBwcmVwYXRjaDogcHJlcGF0Y2ggfSxcbiAgICAgICAgZm46IGZuLFxuICAgICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy50aHVuaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRodW5rLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS90aHVuay5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0ICogZnJvbSBcIi4vY29sbGVjdGlvbnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VsZW1lbnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb2R1bGVzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi92aWV3c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VudW1zXCI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXgudHMiLCJpbXBvcnQgeyBEcm9wZG93biB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBFdmVudFNlbGVjdG9yLCBpc1ZOb2RlIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xvciwgU2l6ZSwgQW5pbWF0aW9uLCBEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy90cmFuc2l0aW9uXCI7XG5pbXBvcnQgeyBNZW51IH0gZnJvbSBcIi4uLy4uL2NvbGxlY3Rpb25zL21lbnVcIjtcblxuaW1wb3J0IHhzLCB7IFN0cmVhbSwgTWVtb3J5U3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCBkcm9wUmVwZWF0cyBmcm9tIFwieHN0cmVhbS9leHRyYS9kcm9wUmVwZWF0c1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCJ4c3RyZWFtL2V4dHJhL2RlYm91bmNlXCI7XG5pbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsYXNzTmFtZShjbGFzc05hbWU6IHN0cmluZywgcHJvcHM6IFBhcnRpYWw8RHJvcGRvd24uUHJvcHM+KTogc3RyaW5nIHtcbiAgaWYgKHByb3BzLnJpZ2h0QWxpZ25lZCkge1xuICAgIGNsYXNzTmFtZSArPSBcIiByaWdodFwiO1xuICB9XG4gIGlmIChwcm9wcy5zZWxlY3Rpb24pIHtcbiAgICBjbGFzc05hbWUgKz0gXCIgc2VsZWN0aW9uXCI7XG4gIH1cbiAgaWYgKHByb3BzLmlubGluZSkge1xuICAgIGNsYXNzTmFtZSArPSBcIiBpbmxpbmVcIjtcbiAgfVxuICBpZiAocHJvcHMuZmxvYXRpbmcpIHtcbiAgICBjbGFzc05hbWUgKz0gXCIgZmxvYXRpbmdcIjtcbiAgfVxuICBpZiAocHJvcHMubG9hZGluZykge1xuICAgIGNsYXNzTmFtZSArPSBcIiBsb2FkaW5nXCI7XG4gIH1cbiAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gIH1cbiAgaWYgKHByb3BzLnNjcm9sbGluZykge1xuICAgIGNsYXNzTmFtZSArPSBcIiBzY3JvbGxpbmdcIjtcbiAgfVxuICBpZiAocHJvcHMuY29tcGFjdCkge1xuICAgIGNsYXNzTmFtZSArPSBcIiBjb21wYWN0XCI7XG4gIH1cbiAgaWYgKHByb3BzLnBvaW50aW5nKSB7XG4gICAgY2xhc3NOYW1lICs9IFwiIHBvaW50aW5nXCI7XG4gIH1cbiAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgfVxuICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICB9XG4gIHJldHVybiBjbGFzc05hbWUgKyBcIiBkcm9wZG93blwiO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uJChldnQ6IEV2ZW50U2VsZWN0b3IsIGFyZ3MpOiBNZW1vcnlTdHJlYW08VHJhbnNpdGlvbi5UcmFuc2l0aW9uPiB7XG4gIGNvbnN0IGl0ZW1DbGljayQgPSBldnQoXCJjbGlja1wiKS5maWx0ZXIoZXZ0ID0+IGV2dC5zcmNFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcIml0ZW1cIikgJiYgIWV2dC5zcmNFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duXCIpKTtcbiAgY29uc3QgZHJvcGRvd25DbGljayQgPSBldnQoXCJjbGlja1wiKVxuICAgIC5maWx0ZXIoZXZ0ID0+XG4gICAgICAhKGV2dC5zcmNFbGVtZW50IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3QuY29udGFpbnMoXCJpdGVtXCIpIHx8XG4gICAgICAoZXZ0LnNyY0VsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duXCIpXG4gICAgKVxuICAgIC5tYXBUbyhEaXJlY3Rpb24uSW4pO1xuICBjb25zdCBtb3VzZWxlYXZlJCA9IHhzLm1lcmdlKGV2dChcIm1vdXNlbGVhdmVcIikuZmlsdGVyKGV2dCA9PiAhaXNEcm9wZG93bkljb24oZXZ0KSAmJiAhc2VhcmNoSXNBY3RpdmUoYXJncykpLCBldnQoXCJtb3VzZWVudGVyXCIpKVxuICAgIC5tYXAoZXZ0ID0+IChldnQgYXMgTW91c2VFdmVudCkudHlwZSA9PT0gXCJtb3VzZWVudGVyXCIgPyBEaXJlY3Rpb24uSW4gOiBEaXJlY3Rpb24uT3V0KVxuICAgIC5jb21wb3NlKGRlYm91bmNlKDI1MCkpXG4gICAgLmZpbHRlcihkaXIgPT4gZGlyID09PSBEaXJlY3Rpb24uT3V0KTtcblxuICBjb25zdCBpbnB1dEVudGVyJCA9IChldnQoXCJrZXlwcmVzc1wiKSBhcyBTdHJlYW08S2V5Ym9hcmRFdmVudD4pLm1hcChldnQgPT4gKGV2dC5jaGFyQ29kZSA9PT0gMTMgfHwgZXZ0LmNoYXJDb2RlID09PSA5KSA/IERpcmVjdGlvbi5PdXQgOiBEaXJlY3Rpb24uSW4pO1xuXG5cbiAgcmV0dXJuIHhzLm1lcmdlKGRyb3Bkb3duQ2xpY2skLCBpdGVtQ2xpY2skLm1hcFRvKERpcmVjdGlvbi5PdXQpLCBtb3VzZWxlYXZlJCwgaW5wdXRFbnRlciQpXG4gICAgLnN0YXJ0V2l0aChEaXJlY3Rpb24uT3V0KVxuICAgIC5tYXAoZGlyID0+ICh7XG4gICAgICBhbmltYXRpb246IEFuaW1hdGlvbi5GYWRlLFxuICAgICAgZGlyZWN0aW9uOiBkaXJcbiAgICB9KSlcbiAgICAuY29tcG9zZShkcm9wUmVwZWF0cyhcbiAgICAgIChhLCBiKSA9PiBhLmRpcmVjdGlvbiA9PT0gYi5kaXJlY3Rpb24gJiYgYS5hbmltYXRpb24gPT09IGIuYW5pbWF0aW9uXG4gICAgKSlcbiAgICAuZHJvcCgxKVxuICAgIC5zdGFydFdpdGgoeyBhbmltYXRpb246IEFuaW1hdGlvbi5Ob25lLCBkaXJlY3Rpb246IERpcmVjdGlvbi5PdXQgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0PFY+KGl0ZW06IFBhcnRpYWw8RHJvcGRvd24uRHJvcGRvd25JdGVtPFY+PiwgcHJvcHM6IFBhcnRpYWw8RHJvcGRvd24uUHJvcHM+LCBzdGF0PzogYm9vbGVhbiwgZmlsdGVyPzogc3RyaW5nKTogVk5vZGUge1xuICBpZiAodHlwZW9mIChzdGF0KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmIChpc1ZOb2RlKHByb3BzLmRlZmF1bHQpKSB7XG4gICAgICByZXR1cm4gcHJvcHMuZGVmYXVsdDtcbiAgICB9XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJ0ZXh0XCIgfSB9LCBwcm9wcy5kZWZhdWx0KTtcbiAgfVxuICBpZiAoaXRlbSA9PT0gbnVsbCB8fCB0eXBlb2YgKGl0ZW0pID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKGlzVk5vZGUocHJvcHMuZGVmYXVsdCkpIHtcbiAgICAgIHJldHVybiBwcm9wcy5kZWZhdWx0O1xuICAgIH1cbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImRlZmF1bHQgdGV4dFwiIH0gfSwgcHJvcHMuZGVmYXVsdCk7XG4gIH1cbiAgaWYgKGZpbHRlciAmJiBmaWx0ZXIubGVuZ3RoID4gMCkge1xuICAgIGlmIChpc1ZOb2RlKGl0ZW0ubWFpbikpIHtcbiAgICAgIHJldHVybiBpdGVtLm1haW47XG4gICAgfVxuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiZmlsdGVyZWQgdGV4dFwiIH0gfSwgaXRlbS5tYWluKTtcbiAgfVxuICBpZiAoaXNWTm9kZShpdGVtLm1haW4pKSB7XG4gICAgcmV0dXJuIGl0ZW0ubWFpbjtcbiAgfVxuICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcInRleHRcIiB9IH0sIGl0ZW0ubWFpbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01lbnVJdGVtKG9iaik6IG9iaiBpcyBQYXJ0aWFsPE1lbnUuTWVudUl0ZW0+IHtcbiAgcmV0dXJuIG9iaiAmJiBvYmoubWFpbjtcbn1cblxuZnVuY3Rpb24gaXNEcm9wZG93bkljb24oZXZ0OiBFdmVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gZXZ0LnNyY0VsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YoXCJkcm9wZG93biBpY29uXCIpICE9PSAtMSAmJiAhZXZ0LnNyY0VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidWlcIik7XG59XG5cbmZ1bmN0aW9uIHNlYXJjaElzQWN0aXZlKGFyZ3MpOiBib29sZWFuIHtcbiAgcmV0dXJuIChhcmdzICYmIGFyZ3Muc2VhcmNoICYmIHR5cGVvZiAoZG9jdW1lbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2VhcmNoXCIpKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2Ryb3Bkb3duL2NvbW1vbi50cyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbnZhciBEZWJvdW5jZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWJvdW5jZU9wZXJhdG9yKGR0LCBpbnMpIHtcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy50eXBlID0gJ2RlYm91bmNlJztcbiAgICAgICAgdGhpcy5vdXQgPSBudWxsO1xuICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB9XG4gICAgRGVib3VuY2VPcGVyYXRvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IG51bGw7XG4gICAgICAgIHRoaXMuaWQgPSBudWxsO1xuICAgIH07XG4gICAgRGVib3VuY2VPcGVyYXRvci5wcm90b3R5cGUuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgaWYgKGlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICB9O1xuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKCF1KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmNsZWFySW50ZXJ2YWwoKTtcbiAgICAgICAgdGhpcy5pZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmNsZWFySW50ZXJ2YWwoKTtcbiAgICAgICAgICAgIHUuX24odCk7XG4gICAgICAgIH0sIHRoaXMuZHQpO1xuICAgIH07XG4gICAgRGVib3VuY2VPcGVyYXRvci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICghdSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5jbGVhckludGVydmFsKCk7XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIERlYm91bmNlT3BlcmF0b3IucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAoIXUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuY2xlYXJJbnRlcnZhbCgpO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVib3VuY2VPcGVyYXRvcjtcbn0oKSk7XG4vKipcbiAqIERlbGF5cyBldmVudHMgdW50aWwgYSBjZXJ0YWluIGFtb3VudCBvZiBzaWxlbmNlIGhhcyBwYXNzZWQuIElmIHRoYXQgdGltZXNwYW5cbiAqIG9mIHNpbGVuY2UgaXMgbm90IG1ldCB0aGUgZXZlbnQgaXMgZHJvcHBlZC5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLS0tMi0tMy0tNC0tLS01fFxuICogICAgIGRlYm91bmNlKDYwKVxuICogLS0tLS0xLS0tLS0tLS0tLTQtLXxcbiAqIGBgYFxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBmcm9tRGlhZ3JhbSBmcm9tICd4c3RyZWFtL2V4dHJhL2Zyb21EaWFncmFtJ1xuICogaW1wb3J0IGRlYm91bmNlIGZyb20gJ3hzdHJlYW0vZXh0cmEvZGVib3VuY2UnXG4gKlxuICogY29uc3Qgc3RyZWFtID0gZnJvbURpYWdyYW0oJy0tMS0tLS0yLS0zLS00LS0tLTV8JylcbiAqICAuY29tcG9zZShkZWJvdW5jZSg2MCkpXG4gKlxuICogc3RyZWFtLmFkZExpc3RlbmVyKHtcbiAqICAgbmV4dDogaSA9PiBjb25zb2xlLmxvZyhpKSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmVycm9yKGVyciksXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnY29tcGxldGVkJylcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBgYGB0ZXh0XG4gKiA+IDFcbiAqID4gNFxuICogPiBjb21wbGV0ZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBwZXJpb2QgVGhlIGFtb3VudCBvZiBzaWxlbmNlIHJlcXVpcmVkIGluIG1pbGxpc2Vjb25kcy5cbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UocGVyaW9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlT3BlcmF0b3IoaW5zKSB7XG4gICAgICAgIHJldHVybiBuZXcgaW5kZXhfMS5TdHJlYW0obmV3IERlYm91bmNlT3BlcmF0b3IocGVyaW9kLCBpbnMpKTtcbiAgICB9O1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVib3VuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34veHN0cmVhbS9leHRyYS9kZWJvdW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RvY3Mtc3JjL2RvY3MubGVzc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgcnVuIH0gZnJvbSBcIkBjeWNsZS9ydW5cIjtcbmltcG9ydCB7IG1ha2VET01Ecml2ZXIsIGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBtYWtlSGlzdG9yeURyaXZlciwgY2FwdHVyZUNsaWNrcyB9IGZyb20gXCJAY3ljbGUvaGlzdG9yeVwiO1xuaW1wb3J0IHhzIGZyb20gXCJ4c3RyZWFtXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vcm91dGVyXCI7XG5pbXBvcnQgcm91dGVzIGZyb20gXCIuL3JvdXRlc1wiO1xuaW1wb3J0IHtMYXlvdXR9IGZyb20gXCIuL2xheW91dFwiO1xuZnVuY3Rpb24gYXBwKGRyaXZlcnMpIHtcbiAgY29uc3QgcGFnZSA9IFJvdXRlcihPYmplY3QuYXNzaWduKHt9LCBkcml2ZXJzLCB7cm91dGVzfSkpO1xuICBjb25zdCBsYXlvdXQgPSBMYXlvdXQucnVuKGRyaXZlcnMsIHBhZ2UpO1xuICBjb25zdCBzaW5rcyA9IHtcbiAgICBET006IGxheW91dC5ET00ubWFwKGxheW91dCA9PiBkaXYoXCIjYXBwLmFwcFwiLCBsYXlvdXQpKSxcbiAgICByb3V0ZXI6IHhzLm1lcmdlKHBhZ2Uucm91dGVyLCBsYXlvdXQucm91dGVyKSxcbiAgfTtcbiAgcmV0dXJuIHNpbmtzO1xufVxuXG5ydW4oYXBwLCB7XG4gIERPTTogbWFrZURPTURyaXZlcihcIi5hcHBcIiksXG4gIHJvdXRlcjogY2FwdHVyZUNsaWNrcyhtYWtlSGlzdG9yeURyaXZlcigpKVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9hcHAudHMiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBhZGFwdF8xID0gcmVxdWlyZShcIkBjeWNsZS9ydW4vbGliL2FkYXB0XCIpO1xudmFyIGZyb21FdmVudF8xID0gcmVxdWlyZShcIi4vZnJvbUV2ZW50XCIpO1xudmFyIEJvZHlET01Tb3VyY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJvZHlET01Tb3VyY2UoX25hbWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IF9uYW1lO1xuICAgIH1cbiAgICBCb2R5RE9NU291cmNlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbmFsaXR5IGlzIHN0aWxsIHVuZGVmaW5lZC91bmRlY2lkZWQuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQm9keURPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdF8xLmFkYXB0KHhzdHJlYW1fMS5kZWZhdWx0Lm9mKGRvY3VtZW50LmJvZHkpKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIEJvZHlET01Tb3VyY2UucHJvdG90eXBlLmV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFR5cGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHN0cmVhbTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMudXNlQ2FwdHVyZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBzdHJlYW0gPSBmcm9tRXZlbnRfMS5mcm9tRXZlbnQoZG9jdW1lbnQuYm9keSwgZXZlbnRUeXBlLCBvcHRpb25zLnVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RyZWFtID0gZnJvbUV2ZW50XzEuZnJvbUV2ZW50KGRvY3VtZW50LmJvZHksIGV2ZW50VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IGFkYXB0XzEuYWRhcHQoc3RyZWFtKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIHJldHVybiBCb2R5RE9NU291cmNlO1xufSgpKTtcbmV4cG9ydHMuQm9keURPTVNvdXJjZSA9IEJvZHlET01Tb3VyY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Cb2R5RE9NU291cmNlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9Cb2R5RE9NU291cmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBhZGFwdF8xID0gcmVxdWlyZShcIkBjeWNsZS9ydW4vbGliL2FkYXB0XCIpO1xudmFyIGZyb21FdmVudF8xID0gcmVxdWlyZShcIi4vZnJvbUV2ZW50XCIpO1xudmFyIERvY3VtZW50RE9NU291cmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudERPTVNvdXJjZShfbmFtZSkge1xuICAgICAgICB0aGlzLl9uYW1lID0gX25hbWU7XG4gICAgfVxuICAgIERvY3VtZW50RE9NU291cmNlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbmFsaXR5IGlzIHN0aWxsIHVuZGVmaW5lZC91bmRlY2lkZWQuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgRG9jdW1lbnRET01Tb3VyY2UucHJvdG90eXBlLmVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3V0ID0gYWRhcHRfMS5hZGFwdCh4c3RyZWFtXzEuZGVmYXVsdC5vZihkb2N1bWVudCkpO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSB0aGlzLl9uYW1lO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgRG9jdW1lbnRET01Tb3VyY2UucHJvdG90eXBlLmV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFR5cGUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHN0cmVhbTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMudXNlQ2FwdHVyZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBzdHJlYW0gPSBmcm9tRXZlbnRfMS5mcm9tRXZlbnQoZG9jdW1lbnQsIGV2ZW50VHlwZSwgb3B0aW9ucy51c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cmVhbSA9IGZyb21FdmVudF8xLmZyb21FdmVudChkb2N1bWVudCwgZXZlbnRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0ID0gYWRhcHRfMS5hZGFwdChzdHJlYW0pO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSB0aGlzLl9uYW1lO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50RE9NU291cmNlO1xufSgpKTtcbmV4cG9ydHMuRG9jdW1lbnRET01Tb3VyY2UgPSBEb2N1bWVudERPTVNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURvY3VtZW50RE9NU291cmNlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9Eb2N1bWVudERPTVNvdXJjZS5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU2NvcGVDaGVja2VyXzEgPSByZXF1aXJlKFwiLi9TY29wZUNoZWNrZXJcIik7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xudmFyIG1hdGNoZXNTZWxlY3Rvcl8xID0gcmVxdWlyZShcIi4vbWF0Y2hlc1NlbGVjdG9yXCIpO1xuZnVuY3Rpb24gdG9FbEFycmF5KGlucHV0KSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGlucHV0KTtcbn1cbnZhciBFbGVtZW50RmluZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbGVtZW50RmluZGVyKG5hbWVzcGFjZSwgaXNvbGF0ZU1vZHVsZSkge1xuICAgICAgICB0aGlzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgICAgICAgdGhpcy5pc29sYXRlTW9kdWxlID0gaXNvbGF0ZU1vZHVsZTtcbiAgICB9XG4gICAgRWxlbWVudEZpbmRlci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChyb290RWxlbWVudCkge1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHV0aWxzXzEuZ2V0U2VsZWN0b3JzKG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiByb290RWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVsbFNjb3BlID0gdXRpbHNfMS5nZXRGdWxsU2NvcGUobmFtZXNwYWNlKTtcbiAgICAgICAgdmFyIHNjb3BlQ2hlY2tlciA9IG5ldyBTY29wZUNoZWNrZXJfMS5TY29wZUNoZWNrZXIoZnVsbFNjb3BlLCB0aGlzLmlzb2xhdGVNb2R1bGUpO1xuICAgICAgICB2YXIgdG9wTm9kZSA9IGZ1bGxTY29wZSA/XG4gICAgICAgICAgICB0aGlzLmlzb2xhdGVNb2R1bGUuZ2V0RWxlbWVudChmdWxsU2NvcGUpIHx8IHJvb3RFbGVtZW50IDpcbiAgICAgICAgICAgIHJvb3RFbGVtZW50O1xuICAgICAgICB2YXIgdG9wTm9kZU1hdGNoZXNTZWxlY3RvciA9ICEhZnVsbFNjb3BlICYmICEhc2VsZWN0b3IgJiYgbWF0Y2hlc1NlbGVjdG9yXzEubWF0Y2hlc1NlbGVjdG9yKHRvcE5vZGUsIHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIHRvRWxBcnJheSh0b3BOb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuICAgICAgICAgICAgLmZpbHRlcihzY29wZUNoZWNrZXIuaXNEaXJlY3RseUluU2NvcGUsIHNjb3BlQ2hlY2tlcilcbiAgICAgICAgICAgIC5jb25jYXQodG9wTm9kZU1hdGNoZXNTZWxlY3RvciA/IFt0b3BOb2RlXSA6IFtdKTtcbiAgICB9O1xuICAgIHJldHVybiBFbGVtZW50RmluZGVyO1xufSgpKTtcbmV4cG9ydHMuRWxlbWVudEZpbmRlciA9IEVsZW1lbnRGaW5kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbGVtZW50RmluZGVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9FbGVtZW50RmluZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBTY29wZUNoZWNrZXJfMSA9IHJlcXVpcmUoXCIuL1Njb3BlQ2hlY2tlclwiKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgbWF0Y2hlc1NlbGVjdG9yXzEgPSByZXF1aXJlKFwiLi9tYXRjaGVzU2VsZWN0b3JcIik7XG4vKipcbiAqIEZpbmRzICh3aXRoIGJpbmFyeSBzZWFyY2gpIGluZGV4IG9mIHRoZSBkZXN0aW5hdGlvbiB0aGF0IGlkIGVxdWFsIHRvIHNlYXJjaElkXG4gKiBhbW9uZyB0aGUgZGVzdGluYXRpb25zIGluIHRoZSBnaXZlbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gaW5kZXhPZihhcnIsIHNlYXJjaElkKSB7XG4gICAgdmFyIG1pbkluZGV4ID0gMDtcbiAgICB2YXIgbWF4SW5kZXggPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB2YXIgY3VycmVudEluZGV4O1xuICAgIHZhciBjdXJyZW50O1xuICAgIHdoaWxlIChtaW5JbmRleCA8PSBtYXhJbmRleCkge1xuICAgICAgICBjdXJyZW50SW5kZXggPSAobWluSW5kZXggKyBtYXhJbmRleCkgLyAyIHwgMDsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1iaXR3aXNlXG4gICAgICAgIGN1cnJlbnQgPSBhcnJbY3VycmVudEluZGV4XTtcbiAgICAgICAgdmFyIGN1cnJlbnRJZCA9IGN1cnJlbnQuaWQ7XG4gICAgICAgIGlmIChjdXJyZW50SWQgPCBzZWFyY2hJZCkge1xuICAgICAgICAgICAgbWluSW5kZXggPSBjdXJyZW50SW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRJZCA+IHNlYXJjaElkKSB7XG4gICAgICAgICAgICBtYXhJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8qKlxuICogTWFuYWdlcyBcIkV2ZW50IGRlbGVnYXRpb25cIiwgYnkgY29ubmVjdGluZyBhbiBvcmlnaW4gd2l0aCBtdWx0aXBsZVxuICogZGVzdGluYXRpb25zLlxuICpcbiAqIEF0dGFjaGVzIGEgRE9NIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBET00gZWxlbWVudCBjYWxsZWQgdGhlIFwib3JpZ2luXCIsXG4gKiBhbmQgZGVsZWdhdGVzIGV2ZW50cyB0byBcImRlc3RpbmF0aW9uc1wiLCB3aGljaCBhcmUgc3ViamVjdHMgYXMgb3V0cHV0c1xuICogZm9yIHRoZSBET01Tb3VyY2UuIFNpbXVsYXRlcyBidWJibGluZyBvciBjYXB0dXJpbmcsIHdpdGggcmVnYXJkcyB0b1xuICogaXNvbGF0aW9uIGJvdW5kYXJpZXMgdG9vLlxuICovXG52YXIgRXZlbnREZWxlZ2F0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50RGVsZWdhdG9yKG9yaWdpbiwgZXZlbnRUeXBlLCB1c2VDYXB0dXJlLCBpc29sYXRlTW9kdWxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgICAgICB0aGlzLmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcbiAgICAgICAgdGhpcy51c2VDYXB0dXJlID0gdXNlQ2FwdHVyZTtcbiAgICAgICAgdGhpcy5pc29sYXRlTW9kdWxlID0gaXNvbGF0ZU1vZHVsZTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdElkID0gMDtcbiAgICAgICAgaWYgKHVzZUNhcHR1cmUpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIF90aGlzLmNhcHR1cmUoZXYpOyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uIChldikgeyByZXR1cm4gX3RoaXMuYnViYmxlKGV2KTsgfTtcbiAgICAgICAgfVxuICAgICAgICBvcmlnaW4uYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHRoaXMubGlzdGVuZXIsIHVzZUNhcHR1cmUpO1xuICAgIH1cbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUudXBkYXRlT3JpZ2luID0gZnVuY3Rpb24gKG5ld09yaWdpbikge1xuICAgICAgICB0aGlzLm9yaWdpbi5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZXZlbnRUeXBlLCB0aGlzLmxpc3RlbmVyLCB0aGlzLnVzZUNhcHR1cmUpO1xuICAgICAgICBuZXdPcmlnaW4uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50VHlwZSwgdGhpcy5saXN0ZW5lciwgdGhpcy51c2VDYXB0dXJlKTtcbiAgICAgICAgdGhpcy5vcmlnaW4gPSBuZXdPcmlnaW47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgKm5ldyogZGVzdGluYXRpb24gZ2l2ZW4gdGhlIG5hbWVzcGFjZSBhbmQgcmV0dXJucyB0aGUgc3ViamVjdFxuICAgICAqIHJlcHJlc2VudGluZyB0aGUgZGVzdGluYXRpb24gb2YgZXZlbnRzLiBJcyBub3QgcmVmZXJlbnRpYWxseSB0cmFuc3BhcmVudCxcbiAgICAgKiB3aWxsIGFsd2F5cyByZXR1cm4gYSBkaWZmZXJlbnQgb3V0cHV0IGZvciB0aGUgc2FtZSBpbnB1dC5cbiAgICAgKi9cbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUuY3JlYXRlRGVzdGluYXRpb24gPSBmdW5jdGlvbiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuX2xhc3RJZCsrO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB1dGlsc18xLmdldFNlbGVjdG9ycyhuYW1lc3BhY2UpO1xuICAgICAgICB2YXIgc2NvcGVDaGVja2VyID0gbmV3IFNjb3BlQ2hlY2tlcl8xLlNjb3BlQ2hlY2tlcih1dGlsc18xLmdldEZ1bGxTY29wZShuYW1lc3BhY2UpLCB0aGlzLmlzb2xhdGVNb2R1bGUpO1xuICAgICAgICB2YXIgc3ViamVjdCA9IHhzdHJlYW1fMS5kZWZhdWx0LmNyZWF0ZSh7XG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICgncmVxdWVzdElkbGVDYWxsYmFjaycgaW4gd2luZG93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZGxlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlRGVzdGluYXRpb24oaWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZURlc3RpbmF0aW9uKGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0geyBpZDogaWQsIHNlbGVjdG9yOiBzZWxlY3Rvciwgc2NvcGVDaGVja2VyOiBzY29wZUNoZWNrZXIsIHN1YmplY3Q6IHN1YmplY3QgfTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbnMucHVzaChkZXN0aW5hdGlvbik7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZGVzdGluYXRpb24gdGhhdCBoYXMgdGhlIGdpdmVuIGlkLlxuICAgICAqL1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5yZW1vdmVEZXN0aW5hdGlvbiA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgaSA9IGluZGV4T2YodGhpcy5kZXN0aW5hdGlvbnMsIGlkKTtcbiAgICAgICAgaSA+PSAwICYmIHRoaXMuZGVzdGluYXRpb25zLnNwbGljZShpLCAxKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLmNhcHR1cmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmRlc3RpbmF0aW9ucy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGVzdCA9IHRoaXMuZGVzdGluYXRpb25zW2ldO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXNTZWxlY3Rvcl8xLm1hdGNoZXNTZWxlY3Rvcihldi50YXJnZXQsIGRlc3Quc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgZGVzdC5zdWJqZWN0Ll9uKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLmJ1YmJsZSA9IGZ1bmN0aW9uIChyYXdFdmVudCkge1xuICAgICAgICB2YXIgb3JpZ2luID0gdGhpcy5vcmlnaW47XG4gICAgICAgIGlmICghb3JpZ2luLmNvbnRhaW5zKHJhd0V2ZW50LmN1cnJlbnRUYXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJvb2YgPSBvcmlnaW4ucGFyZW50RWxlbWVudDtcbiAgICAgICAgdmFyIGV2ID0gdGhpcy5wYXRjaEV2ZW50KHJhd0V2ZW50KTtcbiAgICAgICAgZm9yICh2YXIgZWwgPSBldi50YXJnZXQ7IGVsICYmIGVsICE9PSByb29mOyBlbCA9IGVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICghb3JpZ2luLmNvbnRhaW5zKGVsKSkge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2LnByb3BhZ2F0aW9uSGFzQmVlblN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hdGNoRXZlbnRBZ2FpbnN0RGVzdGluYXRpb25zKGVsLCBldik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5wYXRjaEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBwRXZlbnQgPSBldmVudDtcbiAgICAgICAgcEV2ZW50LnByb3BhZ2F0aW9uSGFzQmVlblN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIG9sZFN0b3BQcm9wYWdhdGlvbiA9IHBFdmVudC5zdG9wUHJvcGFnYXRpb247XG4gICAgICAgIHBFdmVudC5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oKSB7XG4gICAgICAgICAgICBvbGRTdG9wUHJvcGFnYXRpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRpb25IYXNCZWVuU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBwRXZlbnQ7XG4gICAgfTtcbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUubWF0Y2hFdmVudEFnYWluc3REZXN0aW5hdGlvbnMgPSBmdW5jdGlvbiAoZWwsIGV2KSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5kZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgdmFyIGRlc3QgPSB0aGlzLmRlc3RpbmF0aW9uc1tpXTtcbiAgICAgICAgICAgIGlmICghZGVzdC5zY29wZUNoZWNrZXIuaXNEaXJlY3RseUluU2NvcGUoZWwpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hlc1NlbGVjdG9yXzEubWF0Y2hlc1NlbGVjdG9yKGVsLCBkZXN0LnNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlRXZlbnRDdXJyZW50VGFyZ2V0KGV2LCBlbCk7XG4gICAgICAgICAgICAgICAgZGVzdC5zdWJqZWN0Ll9uKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLm11dGF0ZUV2ZW50Q3VycmVudFRhcmdldCA9IGZ1bmN0aW9uIChldmVudCwgY3VycmVudFRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgXCJjdXJyZW50VGFyZ2V0XCIsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogY3VycmVudFRhcmdldEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwbGVhc2UgdXNlIGV2ZW50Lm93bmVyVGFyZ2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50Lm93bmVyVGFyZ2V0ID0gY3VycmVudFRhcmdldEVsZW1lbnQ7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlbnREZWxlZ2F0b3I7XG59KCkpO1xuZXhwb3J0cy5FdmVudERlbGVnYXRvciA9IEV2ZW50RGVsZWdhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXZlbnREZWxlZ2F0b3IuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL0V2ZW50RGVsZWdhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBNYXBQb2x5ZmlsbCA9IHJlcXVpcmUoJ2VzNi1tYXAnKTtcbnZhciBJc29sYXRlTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJc29sYXRlTW9kdWxlKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzQnlGdWxsU2NvcGUgPSBuZXcgTWFwUG9seWZpbGwoKTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0b3JzQnlGdWxsU2NvcGUgPSBuZXcgTWFwUG9seWZpbGwoKTtcbiAgICAgICAgdGhpcy5mdWxsU2NvcGVzQmVpbmdVcGRhdGVkID0gW107XG4gICAgfVxuICAgIElzb2xhdGVNb2R1bGUucHJvdG90eXBlLmNsZWFudXBWTm9kZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGF0YSA9IF9hLmRhdGEsIGVsbSA9IF9hLmVsbTtcbiAgICAgICAgdmFyIGZ1bGxTY29wZSA9IChkYXRhIHx8IHt9KS5pc29sYXRlIHx8ICcnO1xuICAgICAgICB2YXIgaXNDdXJyZW50RWxtID0gdGhpcy5lbGVtZW50c0J5RnVsbFNjb3BlLmdldChmdWxsU2NvcGUpID09PSBlbG07XG4gICAgICAgIHZhciBpc1Njb3BlQmVpbmdVcGRhdGVkID0gdGhpcy5mdWxsU2NvcGVzQmVpbmdVcGRhdGVkLmluZGV4T2YoZnVsbFNjb3BlKSA+PSAwO1xuICAgICAgICBpZiAoZnVsbFNjb3BlICYmIGlzQ3VycmVudEVsbSAmJiAhaXNTY29wZUJlaW5nVXBkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50c0J5RnVsbFNjb3BlLmRlbGV0ZShmdWxsU2NvcGUpO1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0b3JzQnlGdWxsU2NvcGUuZGVsZXRlKGZ1bGxTY29wZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElzb2xhdGVNb2R1bGUucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbiAoZnVsbFNjb3BlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzQnlGdWxsU2NvcGUuZ2V0KGZ1bGxTY29wZSk7XG4gICAgfTtcbiAgICBJc29sYXRlTW9kdWxlLnByb3RvdHlwZS5nZXRGdWxsU2NvcGUgPSBmdW5jdGlvbiAoZWxtKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuZWxlbWVudHNCeUZ1bGxTY29wZS5lbnRyaWVzKCk7XG4gICAgICAgIGZvciAodmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTsgISFyZXN1bHQudmFsdWU7IHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkge1xuICAgICAgICAgICAgdmFyIF9hID0gcmVzdWx0LnZhbHVlLCBmdWxsU2NvcGUgPSBfYVswXSwgZWxlbWVudCA9IF9hWzFdO1xuICAgICAgICAgICAgaWYgKGVsbSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdWxsU2NvcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgSXNvbGF0ZU1vZHVsZS5wcm90b3R5cGUuYWRkRXZlbnREZWxlZ2F0b3IgPSBmdW5jdGlvbiAoZnVsbFNjb3BlLCBldmVudERlbGVnYXRvcikge1xuICAgICAgICB2YXIgZGVsZWdhdG9ycyA9IHRoaXMuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLmdldChmdWxsU2NvcGUpO1xuICAgICAgICBpZiAoIWRlbGVnYXRvcnMpIHtcbiAgICAgICAgICAgIGRlbGVnYXRvcnMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLnNldChmdWxsU2NvcGUsIGRlbGVnYXRvcnMpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGVnYXRvcnNbZGVsZWdhdG9ycy5sZW5ndGhdID0gZXZlbnREZWxlZ2F0b3I7XG4gICAgfTtcbiAgICBJc29sYXRlTW9kdWxlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c0J5RnVsbFNjb3BlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuZnVsbFNjb3Blc0JlaW5nVXBkYXRlZCA9IFtdO1xuICAgIH07XG4gICAgSXNvbGF0ZU1vZHVsZS5wcm90b3R5cGUuY3JlYXRlTW9kdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChvbGRWTm9kZSwgdk5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBvbGRWTm9kZS5kYXRhLCBvbGREYXRhID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2E7XG4gICAgICAgICAgICAgICAgdmFyIGVsbSA9IHZOb2RlLmVsbSwgX2IgPSB2Tm9kZS5kYXRhLCBkYXRhID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2I7XG4gICAgICAgICAgICAgICAgdmFyIG9sZEZ1bGxTY29wZSA9IG9sZERhdGEuaXNvbGF0ZSB8fCAnJztcbiAgICAgICAgICAgICAgICB2YXIgZnVsbFNjb3BlID0gZGF0YS5pc29sYXRlIHx8ICcnO1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBkYXRhIHN0cnVjdHVyZXMgd2l0aCB0aGUgbmV3bHktY3JlYXRlZCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKGZ1bGxTY29wZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmZ1bGxTY29wZXNCZWluZ1VwZGF0ZWQucHVzaChmdWxsU2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkRnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnRzQnlGdWxsU2NvcGUuZGVsZXRlKG9sZEZ1bGxTY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50c0J5RnVsbFNjb3BlLnNldChmdWxsU2NvcGUsIGVsbSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBkZWxlZ2F0b3JzIGZvciB0aGlzIHNjb3BlXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWxlZ2F0b3JzID0gc2VsZi5kZWxlZ2F0b3JzQnlGdWxsU2NvcGUuZ2V0KGZ1bGxTY29wZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWxlZ2F0b3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gZGVsZWdhdG9ycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yc1tpXS51cGRhdGVPcmlnaW4oZWxtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2xkRnVsbFNjb3BlICYmICFmdWxsU2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50c0J5RnVsbFNjb3BlLmRlbGV0ZShmdWxsU2NvcGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChvbGRWTm9kZSwgdk5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBvbGRWTm9kZS5kYXRhLCBvbGREYXRhID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2E7XG4gICAgICAgICAgICAgICAgdmFyIGVsbSA9IHZOb2RlLmVsbSwgX2IgPSB2Tm9kZS5kYXRhLCBkYXRhID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2I7XG4gICAgICAgICAgICAgICAgdmFyIG9sZEZ1bGxTY29wZSA9IG9sZERhdGEuaXNvbGF0ZSB8fCAnJztcbiAgICAgICAgICAgICAgICB2YXIgZnVsbFNjb3BlID0gZGF0YS5pc29sYXRlIHx8ICcnO1xuICAgICAgICAgICAgICAgIC8vIFNhbWUgZWxlbWVudCwgYnV0IGRpZmZlcmVudCBzY29wZSwgc28gdXBkYXRlIHRoZSBkYXRhIHN0cnVjdHVyZXNcbiAgICAgICAgICAgICAgICBpZiAoZnVsbFNjb3BlICYmIGZ1bGxTY29wZSAhPT0gb2xkRnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRGdWxsU2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudHNCeUZ1bGxTY29wZS5kZWxldGUob2xkRnVsbFNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmVsZW1lbnRzQnlGdWxsU2NvcGUuc2V0KGZ1bGxTY29wZSwgZWxtKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbGVnYXRvcnMgPSBzZWxmLmRlbGVnYXRvcnNCeUZ1bGxTY29wZS5nZXQob2xkRnVsbFNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGVnYXRvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGVsZWdhdG9yc0J5RnVsbFNjb3BlLmRlbGV0ZShvbGRGdWxsU2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kZWxlZ2F0b3JzQnlGdWxsU2NvcGUuc2V0KGZ1bGxTY29wZSwgZGVsZWdhdG9ycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU2FtZSBlbGVtZW50LCBidXQgbG9zdCB0aGUgc2NvcGUsIHNvIHVwZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVzXG4gICAgICAgICAgICAgICAgaWYgKG9sZEZ1bGxTY29wZSAmJiAhZnVsbFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudHNCeUZ1bGxTY29wZS5kZWxldGUob2xkRnVsbFNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kZWxlZ2F0b3JzQnlGdWxsU2NvcGUuZGVsZXRlKG9sZEZ1bGxTY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICh2Tm9kZSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2xlYW51cFZOb2RlKHZOb2RlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICh2Tm9kZSwgY2IpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNsZWFudXBWTm9kZSh2Tm9kZSk7XG4gICAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwb3N0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5mdWxsU2NvcGVzQmVpbmdVcGRhdGVkID0gW107XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIElzb2xhdGVNb2R1bGU7XG59KCkpO1xuZXhwb3J0cy5Jc29sYXRlTW9kdWxlID0gSXNvbGF0ZU1vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlzb2xhdGVNb2R1bGUuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL0lzb2xhdGVNb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGhfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS9oXCIpO1xudmFyIGNsYXNzTmFtZUZyb21WTm9kZV8xID0gcmVxdWlyZShcInNuYWJiZG9tLXNlbGVjdG9yL2xpYi9jb21tb25qcy9jbGFzc05hbWVGcm9tVk5vZGVcIik7XG52YXIgc2VsZWN0b3JQYXJzZXJfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS1zZWxlY3Rvci9saWIvY29tbW9uanMvc2VsZWN0b3JQYXJzZXJcIik7XG52YXIgVk5vZGVXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWTm9kZVdyYXBwZXIocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuICAgIH1cbiAgICBWTm9kZVdyYXBwZXIucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgICAgaWYgKHZub2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53cmFwKFtdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSBzZWxlY3RvclBhcnNlcl8xLnNlbGVjdG9yUGFyc2VyKHZub2RlKSwgc2VsVGFnTmFtZSA9IF9hLnRhZ05hbWUsIHNlbElkID0gX2EuaWQ7XG4gICAgICAgIHZhciB2Tm9kZUNsYXNzTmFtZSA9IGNsYXNzTmFtZUZyb21WTm9kZV8xLmNsYXNzTmFtZUZyb21WTm9kZSh2bm9kZSk7XG4gICAgICAgIHZhciB2Tm9kZURhdGEgPSB2bm9kZS5kYXRhIHx8IHt9O1xuICAgICAgICB2YXIgdk5vZGVEYXRhUHJvcHMgPSB2Tm9kZURhdGEucHJvcHMgfHwge307XG4gICAgICAgIHZhciBfYiA9IHZOb2RlRGF0YVByb3BzLmlkLCB2Tm9kZUlkID0gX2IgPT09IHZvaWQgMCA/IHNlbElkIDogX2I7XG4gICAgICAgIHZhciBpc1ZOb2RlQW5kUm9vdEVsZW1lbnRJZGVudGljYWwgPSB0eXBlb2Ygdk5vZGVJZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHZOb2RlSWQudG9VcHBlckNhc2UoKSA9PT0gdGhpcy5yb290RWxlbWVudC5pZC50b1VwcGVyQ2FzZSgpICYmXG4gICAgICAgICAgICBzZWxUYWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHRoaXMucm9vdEVsZW1lbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpICYmXG4gICAgICAgICAgICB2Tm9kZUNsYXNzTmFtZS50b1VwcGVyQ2FzZSgpID09PSB0aGlzLnJvb3RFbGVtZW50LmNsYXNzTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAoaXNWTm9kZUFuZFJvb3RFbGVtZW50SWRlbnRpY2FsKSB7XG4gICAgICAgICAgICByZXR1cm4gdm5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcChbdm5vZGVdKTtcbiAgICB9O1xuICAgIFZOb2RlV3JhcHBlci5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnJvb3RFbGVtZW50LCB0YWdOYW1lID0gX2EudGFnTmFtZSwgaWQgPSBfYS5pZCwgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lO1xuICAgICAgICB2YXIgc2VsSWQgPSBpZCA/IFwiI1wiICsgaWQgOiAnJztcbiAgICAgICAgdmFyIHNlbENsYXNzID0gY2xhc3NOYW1lID9cbiAgICAgICAgICAgIFwiLlwiICsgY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5qb2luKFwiLlwiKSA6ICcnO1xuICAgICAgICByZXR1cm4gaF8xLmgoXCJcIiArIHRhZ05hbWUudG9Mb3dlckNhc2UoKSArIHNlbElkICsgc2VsQ2xhc3MsIHt9LCBjaGlsZHJlbik7XG4gICAgfTtcbiAgICByZXR1cm4gVk5vZGVXcmFwcGVyO1xufSgpKTtcbmV4cG9ydHMuVk5vZGVXcmFwcGVyID0gVk5vZGVXcmFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vk5vZGVXcmFwcGVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9WTm9kZVdyYXBwZXIuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGhfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS9oXCIpO1xuZnVuY3Rpb24gaXNWYWxpZFN0cmluZyhwYXJhbSkge1xuICAgIHJldHVybiB0eXBlb2YgcGFyYW0gPT09ICdzdHJpbmcnICYmIHBhcmFtLmxlbmd0aCA+IDA7XG59XG5mdW5jdGlvbiBpc1NlbGVjdG9yKHBhcmFtKSB7XG4gICAgcmV0dXJuIGlzVmFsaWRTdHJpbmcocGFyYW0pICYmIChwYXJhbVswXSA9PT0gJy4nIHx8IHBhcmFtWzBdID09PSAnIycpO1xufVxuZnVuY3Rpb24gY3JlYXRlVGFnRnVuY3Rpb24odGFnTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBoeXBlcnNjcmlwdChhLCBiLCBjKSB7XG4gICAgICAgIHZhciBoYXNBID0gdHlwZW9mIGEgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICB2YXIgaGFzQiA9IHR5cGVvZiBiICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgdmFyIGhhc0MgPSB0eXBlb2YgYyAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGlmIChpc1NlbGVjdG9yKGEpKSB7XG4gICAgICAgICAgICBpZiAoaGFzQiAmJiBoYXNDKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhfMS5oKHRhZ05hbWUgKyBhLCBiLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc0IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaF8xLmgodGFnTmFtZSArIGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhfMS5oKHRhZ05hbWUgKyBhLCB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzQykge1xuICAgICAgICAgICAgcmV0dXJuIGhfMS5oKHRhZ05hbWUgKyBhLCBiLCBjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNCKSB7XG4gICAgICAgICAgICByZXR1cm4gaF8xLmgodGFnTmFtZSwgYSwgYik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzQSkge1xuICAgICAgICAgICAgcmV0dXJuIGhfMS5oKHRhZ05hbWUsIGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhfMS5oKHRhZ05hbWUsIHt9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgU1ZHX1RBR19OQU1FUyA9IFtcbiAgICAnYScsICdhbHRHbHlwaCcsICdhbHRHbHlwaERlZicsICdhbHRHbHlwaEl0ZW0nLCAnYW5pbWF0ZScsICdhbmltYXRlQ29sb3InLFxuICAgICdhbmltYXRlTW90aW9uJywgJ2FuaW1hdGVUcmFuc2Zvcm0nLCAnY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2NvbG9yUHJvZmlsZScsXG4gICAgJ2N1cnNvcicsICdkZWZzJywgJ2Rlc2MnLCAnZWxsaXBzZScsICdmZUJsZW5kJywgJ2ZlQ29sb3JNYXRyaXgnLFxuICAgICdmZUNvbXBvbmVudFRyYW5zZmVyJywgJ2ZlQ29tcG9zaXRlJywgJ2ZlQ29udm9sdmVNYXRyaXgnLCAnZmVEaWZmdXNlTGlnaHRpbmcnLFxuICAgICdmZURpc3BsYWNlbWVudE1hcCcsICdmZURpc3RhbnRMaWdodCcsICdmZUZsb29kJywgJ2ZlRnVuY0EnLCAnZmVGdW5jQicsXG4gICAgJ2ZlRnVuY0cnLCAnZmVGdW5jUicsICdmZUdhdXNzaWFuQmx1cicsICdmZUltYWdlJywgJ2ZlTWVyZ2UnLCAnZmVNZXJnZU5vZGUnLFxuICAgICdmZU1vcnBob2xvZ3knLCAnZmVPZmZzZXQnLCAnZmVQb2ludExpZ2h0JywgJ2ZlU3BlY3VsYXJMaWdodGluZycsXG4gICAgJ2ZlU3BvdGxpZ2h0JywgJ2ZlVGlsZScsICdmZVR1cmJ1bGVuY2UnLCAnZmlsdGVyJywgJ2ZvbnQnLCAnZm9udEZhY2UnLFxuICAgICdmb250RmFjZUZvcm1hdCcsICdmb250RmFjZU5hbWUnLCAnZm9udEZhY2VTcmMnLCAnZm9udEZhY2VVcmknLFxuICAgICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnZ2x5cGgnLCAnZ2x5cGhSZWYnLCAnaGtlcm4nLCAnaW1hZ2UnLCAnbGluZScsXG4gICAgJ2xpbmVhckdyYWRpZW50JywgJ21hcmtlcicsICdtYXNrJywgJ21ldGFkYXRhJywgJ21pc3NpbmdHbHlwaCcsICdtcGF0aCcsXG4gICAgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc2NyaXB0JyxcbiAgICAnc2V0JywgJ3N0b3AnLCAnc3R5bGUnLCAnc3dpdGNoJywgJ3N5bWJvbCcsICd0ZXh0JywgJ3RleHRQYXRoJywgJ3RpdGxlJyxcbiAgICAndHJlZicsICd0c3BhbicsICd1c2UnLCAndmlldycsICd2a2VybicsXG5dO1xudmFyIHN2ZyA9IGNyZWF0ZVRhZ0Z1bmN0aW9uKCdzdmcnKTtcblNWR19UQUdfTkFNRVMuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgc3ZnW3RhZ10gPSBjcmVhdGVUYWdGdW5jdGlvbih0YWcpO1xufSk7XG52YXIgVEFHX05BTUVTID0gW1xuICAgICdhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJyxcbiAgICAnYmRpJywgJ2JkbycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJyxcbiAgICAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkZCcsICdkZWwnLCAnZGZuJywgJ2RpcicsICdkaXYnLCAnZGwnLFxuICAgICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsXG4gICAgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJyxcbiAgICAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsXG4gICAgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtZW51JywgJ21ldGEnLCAnbmF2JywgJ25vc2NyaXB0JyxcbiAgICAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdwJywgJ3BhcmFtJywgJ3ByZScsICdwcm9ncmVzcycsICdxJyxcbiAgICAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJyxcbiAgICAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLFxuICAgICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aXRsZScsICd0cicsICd1JywgJ3VsJywgJ3ZpZGVvJyxcbl07XG52YXIgZXhwb3J0ZWQgPSB7IFNWR19UQUdfTkFNRVM6IFNWR19UQUdfTkFNRVMsIFRBR19OQU1FUzogVEFHX05BTUVTLCBzdmc6IHN2ZywgaXNTZWxlY3RvcjogaXNTZWxlY3RvciwgY3JlYXRlVGFnRnVuY3Rpb246IGNyZWF0ZVRhZ0Z1bmN0aW9uIH07XG5UQUdfTkFNRVMuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgIGV4cG9ydGVkW25dID0gY3JlYXRlVGFnRnVuY3Rpb24obik7XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHlwZXJzY3JpcHQtaGVscGVycy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvaHlwZXJzY3JpcHQtaGVscGVycy5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdm5vZGVfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS92bm9kZVwiKTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiB0b3RhbElzb2xhdGVTb3VyY2Uoc291cmNlLCBzY29wZSkge1xuICAgIHJldHVybiBzb3VyY2Uuc2VsZWN0KHV0aWxzXzEuU0NPUEVfUFJFRklYICsgc2NvcGUpO1xufVxuZnVuY3Rpb24gc2libGluZ0lzb2xhdGVTb3VyY2Uoc291cmNlLCBzY29wZSkge1xuICAgIHJldHVybiBzb3VyY2Uuc2VsZWN0KHNjb3BlKTtcbn1cbmZ1bmN0aW9uIGlzb2xhdGVTb3VyY2Uoc291cmNlLCBzY29wZSkge1xuICAgIGlmIChzY29wZSA9PT0gJzpyb290Jykge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgICBlbHNlIGlmICh1dGlsc18xLmlzQ2xhc3NPcklkKHNjb3BlKSkge1xuICAgICAgICByZXR1cm4gc2libGluZ0lzb2xhdGVTb3VyY2Uoc291cmNlLCBzY29wZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdG90YWxJc29sYXRlU291cmNlKHNvdXJjZSwgc2NvcGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNvbGF0ZVNvdXJjZSA9IGlzb2xhdGVTb3VyY2U7XG5mdW5jdGlvbiBzaWJsaW5nSXNvbGF0ZVNpbmsoc2luaywgc2NvcGUpIHtcbiAgICByZXR1cm4gc2luay5tYXAoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXzEudm5vZGUobm9kZS5zZWwgKyBzY29wZSwgbm9kZS5kYXRhLCBub2RlLmNoaWxkcmVuLCBub2RlLnRleHQsIG5vZGUuZWxtKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2libGluZ0lzb2xhdGVTaW5rID0gc2libGluZ0lzb2xhdGVTaW5rO1xuZnVuY3Rpb24gdG90YWxJc29sYXRlU2luayhzaW5rLCBmdWxsU2NvcGUpIHtcbiAgICByZXR1cm4gc2luay5tYXAoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgLy8gSWdub3JlIGlmIGFscmVhZHkgaGFkIHVwLXRvLWRhdGUgZnVsbCBzY29wZSBpbiB2bm9kZS5kYXRhLmlzb2xhdGVcbiAgICAgICAgaWYgKG5vZGUuZGF0YSAmJiBub2RlLmRhdGEuaXNvbGF0ZSkge1xuICAgICAgICAgICAgdmFyIGlzb2xhdGVEYXRhID0gbm9kZS5kYXRhLmlzb2xhdGU7XG4gICAgICAgICAgICB2YXIgcHJldkZ1bGxTY29wZU51bSA9IGlzb2xhdGVEYXRhLnJlcGxhY2UoLyhjeWNsZXxcXC0pL2csICcnKTtcbiAgICAgICAgICAgIHZhciBmdWxsU2NvcGVOdW0gPSBmdWxsU2NvcGUucmVwbGFjZSgvKGN5Y2xlfFxcLSkvZywgJycpO1xuICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlSW50KHByZXZGdWxsU2NvcGVOdW0pKVxuICAgICAgICAgICAgICAgIHx8IGlzTmFOKHBhcnNlSW50KGZ1bGxTY29wZU51bSkpXG4gICAgICAgICAgICAgICAgfHwgcHJldkZ1bGxTY29wZU51bSA+IGZ1bGxTY29wZU51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEluc2VydCB1cC10by1kYXRlIGZ1bGwgc2NvcGUgaW4gdm5vZGUuZGF0YS5pc29sYXRlLCBhbmQgYWxzbyBhIGtleSBpZiBuZWVkZWRcbiAgICAgICAgbm9kZS5kYXRhID0gbm9kZS5kYXRhIHx8IHt9O1xuICAgICAgICBub2RlLmRhdGEuaXNvbGF0ZSA9IGZ1bGxTY29wZTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLmtleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG5vZGUua2V5ID0gdXRpbHNfMS5TQ09QRV9QUkVGSVggKyBmdWxsU2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSk7XG59XG5leHBvcnRzLnRvdGFsSXNvbGF0ZVNpbmsgPSB0b3RhbElzb2xhdGVTaW5rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNvbGF0ZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvaXNvbGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc25hYmJkb21fMSA9IHJlcXVpcmUoXCJzbmFiYmRvbVwiKTtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBNYWluRE9NU291cmNlXzEgPSByZXF1aXJlKFwiLi9NYWluRE9NU291cmNlXCIpO1xudmFyIHRvdm5vZGVfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS90b3Zub2RlXCIpO1xudmFyIFZOb2RlV3JhcHBlcl8xID0gcmVxdWlyZShcIi4vVk5vZGVXcmFwcGVyXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBtb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzXCIpO1xudmFyIElzb2xhdGVNb2R1bGVfMSA9IHJlcXVpcmUoXCIuL0lzb2xhdGVNb2R1bGVcIik7XG52YXIgTWFwUG9seWZpbGwgPSByZXF1aXJlKCdlczYtbWFwJyk7XG5mdW5jdGlvbiBtYWtlRE9NRHJpdmVySW5wdXRHdWFyZChtb2R1bGVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZHVsZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbmFsIG1vZHVsZXMgb3B0aW9uIG11c3QgYmUgXCIgK1xuICAgICAgICAgICAgXCJhbiBhcnJheSBmb3Igc25hYmJkb20gbW9kdWxlc1wiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkb21Ecml2ZXJJbnB1dEd1YXJkKHZpZXckKSB7XG4gICAgaWYgKCF2aWV3JFxuICAgICAgICB8fCB0eXBlb2YgdmlldyQuYWRkTGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIlxuICAgICAgICB8fCB0eXBlb2YgdmlldyQuZm9sZCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBET00gZHJpdmVyIGZ1bmN0aW9uIGV4cGVjdHMgYXMgaW5wdXQgYSBTdHJlYW0gb2YgXCIgK1xuICAgICAgICAgICAgXCJ2aXJ0dWFsIERPTSBlbGVtZW50c1wiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkcm9wQ29tcGxldGlvbihpbnB1dCkge1xuICAgIHJldHVybiB4c3RyZWFtXzEuZGVmYXVsdC5tZXJnZShpbnB1dCwgeHN0cmVhbV8xLmRlZmF1bHQubmV2ZXIoKSk7XG59XG5mdW5jdGlvbiB1bndyYXBFbGVtZW50RnJvbVZOb2RlKHZub2RlKSB7XG4gICAgcmV0dXJuIHZub2RlLmVsbTtcbn1cbmZ1bmN0aW9uIHJlcG9ydFNuYWJiZG9tRXJyb3IoZXJyKSB7XG4gICAgKGNvbnNvbGUuZXJyb3IgfHwgY29uc29sZS5sb2cpKGVycik7XG59XG5mdW5jdGlvbiBtYWtlRE9NRHJpdmVyKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHZhciBtb2R1bGVzID0gb3B0aW9ucy5tb2R1bGVzIHx8IG1vZHVsZXNfMS5kZWZhdWx0O1xuICAgIHZhciBpc29sYXRlTW9kdWxlID0gbmV3IElzb2xhdGVNb2R1bGVfMS5Jc29sYXRlTW9kdWxlKCk7XG4gICAgdmFyIHBhdGNoID0gc25hYmJkb21fMS5pbml0KFtpc29sYXRlTW9kdWxlLmNyZWF0ZU1vZHVsZSgpXS5jb25jYXQobW9kdWxlcykpO1xuICAgIHZhciByb290RWxlbWVudCA9IHV0aWxzXzEuZ2V0RWxlbWVudChjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIHZub2RlV3JhcHBlciA9IG5ldyBWTm9kZVdyYXBwZXJfMS5WTm9kZVdyYXBwZXIocm9vdEVsZW1lbnQpO1xuICAgIHZhciBkZWxlZ2F0b3JzID0gbmV3IE1hcFBvbHlmaWxsKCk7XG4gICAgbWFrZURPTURyaXZlcklucHV0R3VhcmQobW9kdWxlcyk7XG4gICAgZnVuY3Rpb24gRE9NRHJpdmVyKHZub2RlJCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSAnRE9NJzsgfVxuICAgICAgICBkb21Ecml2ZXJJbnB1dEd1YXJkKHZub2RlJCk7XG4gICAgICAgIHZhciBzYW5pdGF0aW9uJCA9IHhzdHJlYW1fMS5kZWZhdWx0LmNyZWF0ZSgpO1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnQkID0geHN0cmVhbV8xLmRlZmF1bHQubWVyZ2Uodm5vZGUkLmVuZFdoZW4oc2FuaXRhdGlvbiQpLCBzYW5pdGF0aW9uJClcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHZub2RlKSB7IHJldHVybiB2bm9kZVdyYXBwZXIuY2FsbCh2bm9kZSk7IH0pXG4gICAgICAgICAgICAuZm9sZChwYXRjaCwgdG92bm9kZV8xLnRvVk5vZGUocm9vdEVsZW1lbnQpKVxuICAgICAgICAgICAgLmRyb3AoMSlcbiAgICAgICAgICAgIC5tYXAodW53cmFwRWxlbWVudEZyb21WTm9kZSlcbiAgICAgICAgICAgIC5jb21wb3NlKGRyb3BDb21wbGV0aW9uKSAvLyBkb24ndCBjb21wbGV0ZSB0aGlzIHN0cmVhbVxuICAgICAgICAgICAgLnN0YXJ0V2l0aChyb290RWxlbWVudCk7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBzbmFiYmRvbSBwYXRjaGluZywgb3ZlciB0aW1lXG4gICAgICAgIHZhciBsaXN0ZW5lciA9IHsgZXJyb3I6IHJlcG9ydFNuYWJiZG9tRXJyb3IgfTtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJykge1xuICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCQuYWRkTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcm9vdEVsZW1lbnQkLmFkZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE1haW5ET01Tb3VyY2VfMS5NYWluRE9NU291cmNlKHJvb3RFbGVtZW50JCwgc2FuaXRhdGlvbiQsIFtdLCBpc29sYXRlTW9kdWxlLCBkZWxlZ2F0b3JzLCBuYW1lKTtcbiAgICB9XG4gICAgO1xuICAgIHJldHVybiBET01Ecml2ZXI7XG59XG5leHBvcnRzLm1ha2VET01Ecml2ZXIgPSBtYWtlRE9NRHJpdmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZURPTURyaXZlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvbWFrZURPTURyaXZlci5qc1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgSFRNTFNvdXJjZV8xID0gcmVxdWlyZShcIi4vSFRNTFNvdXJjZVwiKTtcbnZhciBpbml0ID0gcmVxdWlyZSgnc25hYmJkb20tdG8taHRtbC9pbml0Jyk7XG52YXIgbW9kdWxlc0ZvckhUTUwgPSByZXF1aXJlKCdzbmFiYmRvbS10by1odG1sL21vZHVsZXMnKTtcbnZhciBkZWZhdWx0TW9kdWxlcyA9IFtcbiAgICBtb2R1bGVzRm9ySFRNTC5hdHRyaWJ1dGVzLFxuICAgIG1vZHVsZXNGb3JIVE1MLnByb3BzLFxuICAgIG1vZHVsZXNGb3JIVE1MLmNsYXNzLFxuICAgIG1vZHVsZXNGb3JIVE1MLnN0eWxlLFxuXTtcbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyB9O1xuZnVuY3Rpb24gbWFrZUhUTUxEcml2ZXIoZWZmZWN0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFyIG1vZHVsZXMgPSBvcHRpb25zLm1vZHVsZXMgfHwgZGVmYXVsdE1vZHVsZXM7XG4gICAgdmFyIHRvSFRNTCA9IGluaXQobW9kdWxlcyk7XG4gICAgZnVuY3Rpb24gaHRtbERyaXZlcih2bm9kZSQsIG5hbWUpIHtcbiAgICAgICAgdmFyIGh0bWwkID0gdm5vZGUkLm1hcCh0b0hUTUwpO1xuICAgICAgICBodG1sJC5hZGRMaXN0ZW5lcih7XG4gICAgICAgICAgICBuZXh0OiBlZmZlY3QgfHwgbm9vcCxcbiAgICAgICAgICAgIGVycm9yOiBub29wLFxuICAgICAgICAgICAgY29tcGxldGU6IG5vb3AsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IEhUTUxTb3VyY2VfMS5IVE1MU291cmNlKGh0bWwkLCBuYW1lKTtcbiAgICB9XG4gICAgO1xuICAgIHJldHVybiBodG1sRHJpdmVyO1xufVxuZXhwb3J0cy5tYWtlSFRNTERyaXZlciA9IG1ha2VIVE1MRHJpdmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZUhUTUxEcml2ZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9kb20vbGliL21ha2VIVE1MRHJpdmVyLmpzXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBhZGFwdF8xID0gcmVxdWlyZShcIkBjeWNsZS9ydW4vbGliL2FkYXB0XCIpO1xudmFyIFNDT1BFX1BSRUZJWCA9ICdfX18nO1xudmFyIE1vY2tlZERPTVNvdXJjZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9ja2VkRE9NU291cmNlKF9tb2NrQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuX21vY2tDb25maWcgPSBfbW9ja0NvbmZpZztcbiAgICAgICAgaWYgKF9tb2NrQ29uZmlnWydlbGVtZW50cyddKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50cyA9IF9tb2NrQ29uZmlnWydlbGVtZW50cyddO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudHMgPSBhZGFwdF8xLmFkYXB0KHhzdHJlYW1fMS5kZWZhdWx0LmVtcHR5KCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzLl9lbGVtZW50cztcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gJ01vY2tlZERPTSc7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBNb2NrZWRET01Tb3VyY2UucHJvdG90eXBlLmV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFR5cGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHN0cmVhbUZvckV2ZW50VHlwZSA9IHRoaXMuX21vY2tDb25maWdbZXZlbnRUeXBlXTtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0XzEuYWRhcHQoc3RyZWFtRm9yRXZlbnRUeXBlIHx8IHhzdHJlYW1fMS5kZWZhdWx0LmVtcHR5KCkpO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSAnTW9ja2VkRE9NJztcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBtb2NrQ29uZmlnRm9yU2VsZWN0b3IgPSB0aGlzLl9tb2NrQ29uZmlnW3NlbGVjdG9yXSB8fCB7fTtcbiAgICAgICAgcmV0dXJuIG5ldyBNb2NrZWRET01Tb3VyY2UobW9ja0NvbmZpZ0ZvclNlbGVjdG9yKTtcbiAgICB9O1xuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuaXNvbGF0ZVNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Uuc2VsZWN0KCcuJyArIFNDT1BFX1BSRUZJWCArIHNjb3BlKTtcbiAgICB9O1xuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuaXNvbGF0ZVNpbmsgPSBmdW5jdGlvbiAoc2luaywgc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHNpbmsubWFwKGZ1bmN0aW9uICh2bm9kZSkge1xuICAgICAgICAgICAgaWYgKHZub2RlLnNlbCAmJiB2bm9kZS5zZWwuaW5kZXhPZihTQ09QRV9QUkVGSVggKyBzY29wZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuc2VsICs9IFwiLlwiICsgU0NPUEVfUFJFRklYICsgc2NvcGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBNb2NrZWRET01Tb3VyY2U7XG59KCkpO1xuZXhwb3J0cy5Nb2NrZWRET01Tb3VyY2UgPSBNb2NrZWRET01Tb3VyY2U7XG5mdW5jdGlvbiBtb2NrRE9NU291cmNlKG1vY2tDb25maWcpIHtcbiAgICByZXR1cm4gbmV3IE1vY2tlZERPTVNvdXJjZShtb2NrQ29uZmlnKTtcbn1cbmV4cG9ydHMubW9ja0RPTVNvdXJjZSA9IG1vY2tET01Tb3VyY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2NrRE9NU291cmNlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9AY3ljbGUvZG9tL2xpYi9tb2NrRE9NU291cmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjbGFzc18xID0gcmVxdWlyZShcInNuYWJiZG9tL21vZHVsZXMvY2xhc3NcIik7XG5leHBvcnRzLkNsYXNzTW9kdWxlID0gY2xhc3NfMS5kZWZhdWx0O1xudmFyIHByb3BzXzEgPSByZXF1aXJlKFwic25hYmJkb20vbW9kdWxlcy9wcm9wc1wiKTtcbmV4cG9ydHMuUHJvcHNNb2R1bGUgPSBwcm9wc18xLmRlZmF1bHQ7XG52YXIgYXR0cmlidXRlc18xID0gcmVxdWlyZShcInNuYWJiZG9tL21vZHVsZXMvYXR0cmlidXRlc1wiKTtcbmV4cG9ydHMuQXR0cnNNb2R1bGUgPSBhdHRyaWJ1dGVzXzEuZGVmYXVsdDtcbnZhciBzdHlsZV8xID0gcmVxdWlyZShcInNuYWJiZG9tL21vZHVsZXMvc3R5bGVcIik7XG5leHBvcnRzLlN0eWxlTW9kdWxlID0gc3R5bGVfMS5kZWZhdWx0O1xudmFyIGRhdGFzZXRfMSA9IHJlcXVpcmUoXCJzbmFiYmRvbS9tb2R1bGVzL2RhdGFzZXRcIik7XG5leHBvcnRzLkRhdGFzZXRNb2R1bGUgPSBkYXRhc2V0XzEuZGVmYXVsdDtcbnZhciBtb2R1bGVzID0gW3N0eWxlXzEuZGVmYXVsdCwgY2xhc3NfMS5kZWZhdWx0LCBwcm9wc18xLmRlZmF1bHQsIGF0dHJpYnV0ZXNfMS5kZWZhdWx0LCBkYXRhc2V0XzEuZGVmYXVsdF07XG5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlcy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2RvbS9saWIvbW9kdWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgeHN0cmVhbV8xID0gcmVxdWlyZShcInhzdHJlYW1cIik7XG52YXIgQ0xJQ0tfRVZFTlQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50Lm9udG91Y2hzdGFydCA/XG4gICAgJ3RvdWNoc3RhcnQnIDpcbiAgICAnY2xpY2snO1xuZnVuY3Rpb24gd2hpY2goZXYpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZSA9IGV2IHx8IHdpbmRvdy5ldmVudDtcbiAgICByZXR1cm4gZS53aGljaCA9PT0gbnVsbCA/IGUuYnV0dG9uIDogZS53aGljaDtcbn1cbmZ1bmN0aW9uIHNhbWVPcmlnaW4oaHJlZikge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBocmVmICYmIGhyZWYuaW5kZXhPZih3aW5kb3cubG9jYXRpb24ub3JpZ2luKSA9PT0gMDtcbn1cbmZ1bmN0aW9uIG1ha2VDbGlja0xpc3RlbmVyKHB1c2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2xpY2tMaXN0ZW5lcihldmVudCkge1xuICAgICAgICBpZiAod2hpY2goZXZlbnQpICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgIT09ICdBJykge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlTmFtZSAhPT0gJ0EnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkb3dubG9hZCcpIHx8XG4gICAgICAgICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZSgncmVsJykgPT09ICdleHRlcm5hbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC50YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGluayA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIGlmIChsaW5rICYmIGxpbmsuaW5kZXhPZignbWFpbHRvOicpID4gLTEgfHwgbGluay5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2FtZU9yaWdpbihlbGVtZW50LmhyZWYpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIHBhdGhuYW1lID0gZWxlbWVudC5wYXRobmFtZSwgc2VhcmNoID0gZWxlbWVudC5zZWFyY2gsIF9hID0gZWxlbWVudC5oYXNoLCBoYXNoID0gX2EgPT09IHZvaWQgMCA/ICcnIDogX2E7XG4gICAgICAgIHB1c2gocGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY2FwdHVyZUFuY2hvckNsaWNrcyhwdXNoKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbWFrZUNsaWNrTGlzdGVuZXIocHVzaCk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoQ0xJQ0tfRVZFTlQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2FwdHVyZUNsaWNrcyhoaXN0b3J5RHJpdmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhpc3RvcnlEcml2ZXJXaXRoQ2xpY2tDYXB0dXJlKHNpbmskKSB7XG4gICAgICAgIHZhciBpbnRlcm5hbFNpbmskID0geHN0cmVhbV8xLmRlZmF1bHQuY3JlYXRlKCk7XG4gICAgICAgIGNhcHR1cmVBbmNob3JDbGlja3MoZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgICAgICAgICBpbnRlcm5hbFNpbmskLl9uKHsgdHlwZTogJ3B1c2gnLCBwYXRobmFtZTogcGF0aG5hbWUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaW5rJC5fYWRkKGludGVybmFsU2luayQpO1xuICAgICAgICByZXR1cm4gaGlzdG9yeURyaXZlcihpbnRlcm5hbFNpbmskKTtcbiAgICB9O1xufVxuZXhwb3J0cy5jYXB0dXJlQ2xpY2tzID0gY2FwdHVyZUNsaWNrcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcHR1cmVDbGlja3MuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L0BjeWNsZS9oaXN0b3J5L2xpYi9jYXB0dXJlQ2xpY2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbmZ1bmN0aW9uIGNyZWF0ZUhpc3RvcnkkKGhpc3RvcnksIHNpbmskKSB7XG4gICAgdmFyIGhpc3RvcnkkID0geHN0cmVhbV8xLmRlZmF1bHQuY3JlYXRlV2l0aE1lbW9yeSgpLnN0YXJ0V2l0aChoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB2YXIgY2FsbCA9IG1ha2VDYWxsT25IaXN0b3J5KGhpc3RvcnkpO1xuICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2MpIHsgaGlzdG9yeSQuX24obG9jKTsgfSk7XG4gICAgdmFyIHN1YiA9IHNpbmskLnN1YnNjcmliZShjcmVhdGVPYnNlcnZlcihjYWxsLCB1bmxpc3RlbikpO1xuICAgIGhpc3RvcnkkLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7IHN1Yi51bnN1YnNjcmliZSgpOyB1bmxpc3RlbigpOyB9O1xuICAgIHJldHVybiBoaXN0b3J5JDtcbn1cbmV4cG9ydHMuY3JlYXRlSGlzdG9yeSQgPSBjcmVhdGVIaXN0b3J5JDtcbjtcbmZ1bmN0aW9uIG1ha2VDYWxsT25IaXN0b3J5KGhpc3RvcnkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2FsbChpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3B1c2gnKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goaW5wdXQucGF0aG5hbWUsIGlucHV0LnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JlcGxhY2UnKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UoaW5wdXQucGF0aG5hbWUsIGlucHV0LnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2dvJykge1xuICAgICAgICAgICAgaGlzdG9yeS5nbyhpbnB1dC5hbW91bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dC50eXBlID09PSAnZ29CYWNrJykge1xuICAgICAgICAgICAgaGlzdG9yeS5nb0JhY2soKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2dvRm9yd2FyZCcpIHtcbiAgICAgICAgICAgIGhpc3RvcnkuZ29Gb3J3YXJkKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXIoY2FsbCwgdW5saXN0ZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2FsbCh7IHR5cGU6ICdwdXNoJywgcGF0aG5hbWU6IGlucHV0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbChpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHVubGlzdGVuKCk7IH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IHNldFRpbWVvdXQodW5saXN0ZW4pOyB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVIaXN0b3J5JC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2hpc3RvcnkvbGliL2NyZWF0ZUhpc3RvcnkkLmpzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogV3JhcHMgYSBIaXN0b3J5IERyaXZlciB0byBhZGQgXCJjbGljayBjYXB0dXJpbmdcIiBmdW5jdGlvbmFsaXR5LlxuICpcbiAqIElmIHlvdSB3YW50IHRvIGludGVyY2VwdCBhbmQgaGFuZGxlIGFueSBjbGljayBldmVudCB0aGF0IGxlYWRzIHRvIGEgbGluayxcbiAqIGxpa2Ugb24gYW4gYDxhPmAgZWxlbWVudCwgeW91IHBhc3MgeW91ciBleGlzdGluZyBkcml2ZXIgKGUuZy4gY3JlYXRlZCBmcm9tXG4gKiBgbWFrZUhpc3RvcnlEcml2ZXIoKWApIGFzIGFyZ3VtZW50IGFuZCB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGFub3RoZXJcbiAqIGRyaXZlciBvZiB0aGUgc2FtZSBuYXR1cmUsIGJ1dCBpbmNsdWRpbmcgY2xpY2sgY2FwdHVyaW5nIGxvZ2ljLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRyaXZlciBhbiBleGlzdGluZyBIaXN0b3J5IERyaXZlciBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIEhpc3RvcnkgRHJpdmVyIGZ1bmN0aW9uXG4gKiBAZnVuY3Rpb24gY2FwdHVyZUNsaWNrc1xuICovXG52YXIgY2FwdHVyZUNsaWNrc18xID0gcmVxdWlyZShcIi4vY2FwdHVyZUNsaWNrc1wiKTtcbmV4cG9ydHMuY2FwdHVyZUNsaWNrcyA9IGNhcHR1cmVDbGlja3NfMS5jYXB0dXJlQ2xpY2tzO1xuLyoqXG4gKiBDcmVhdGUgYSBIaXN0b3J5IERyaXZlciB0byBiZSB1c2VkIGluIHRoZSBicm93c2VyLlxuICpcbiAqIFRoaXMgaXMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBjYWxsZWQsIHJldHVybnMgYSBIaXN0b3J5IERyaXZlciBmb3IgQ3ljbGUuanNcbiAqIGFwcHMuIFRoZSBkcml2ZXIgaXMgYWxzbyBhIGZ1bmN0aW9uLCBhbmQgaXQgdGFrZXMgYSBzdHJlYW0gb2YgbmV3IGxvY2F0aW9uc1xuICogKHN0cmluZ3MgcmVwcmVzZW50aW5nIHBhdGhuYW1lcyBvciBsb2NhdGlvbiBvYmplY3RzKSBhcyBpbnB1dCwgYW5kIG91dHB1dHNcbiAqIGFub3RoZXIgc3RyZWFtIG9mIGxvY2F0aW9ucyB0aGF0IHdlcmUgYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBhbiBvYmplY3Qgd2l0aCBzb21lIG9wdGlvbnMgc3BlY2lmaWMgdG9cbiAqIHRoaXMgZHJpdmVyLiBUaGVzZSBvcHRpb25zIGFyZSB0aGUgc2FtZSBhcyBmb3IgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGBjcmVhdGVCcm93c2VySGlzdG9yeSgpYCBmdW5jdGlvbiBpbiBIaXN0b3J5IHY0LiBDaGVjayBpdHNcbiAqIFtkb2NzXShodHRwczovL2dpdGh1Yi5jb20vbWphY2tzb24vaGlzdG9yeS90cmVlL3Y0LjUuMSN1c2FnZSkgZm9yIGEgZ29vZFxuICogZGVzY3JpcHRpb24gb24gdGhlIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIEhpc3RvcnkgRHJpdmVyIGZ1bmN0aW9uXG4gKiBAZnVuY3Rpb24gbWFrZUhpc3RvcnlEcml2ZXJcbiAqL1xudmFyIGRyaXZlcnNfMSA9IHJlcXVpcmUoXCIuL2RyaXZlcnNcIik7XG5leHBvcnRzLm1ha2VIaXN0b3J5RHJpdmVyID0gZHJpdmVyc18xLm1ha2VIaXN0b3J5RHJpdmVyO1xuLyoqXG4gKiBDcmVhdGUgYSBIaXN0b3J5IERyaXZlciBmb3Igb2xkZXIgYnJvd3NlcnMgdXNpbmcgaGFzaCByb3V0aW5nLlxuICpcbiAqIFRoaXMgaXMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBjYWxsZWQsIHJldHVybnMgYSBIaXN0b3J5IERyaXZlciBmb3IgQ3ljbGUuanNcbiAqIGFwcHMuIFRoZSBkcml2ZXIgaXMgYWxzbyBhIGZ1bmN0aW9uLCBhbmQgaXQgdGFrZXMgYSBzdHJlYW0gb2YgbmV3IGxvY2F0aW9uc1xuICogKHN0cmluZ3MgcmVwcmVzZW50aW5nIHBhdGhuYW1lcyBvciBsb2NhdGlvbiBvYmplY3RzKSBhcyBpbnB1dCwgYW5kIG91dHB1dHNcbiAqIGFub3RoZXIgc3RyZWFtIG9mIGxvY2F0aW9ucyB0aGF0IHdlcmUgYXBwbGllZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBhbiBvYmplY3Qgd2l0aCBzb21lIG9wdGlvbnMgc3BlY2lmaWMgdG9cbiAqIHRoaXMgZHJpdmVyLiBUaGVzZSBvcHRpb25zIGFyZSB0aGUgc2FtZSBhcyBmb3IgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGBjcmVhdGVIYXNoSGlzdG9yeSgpYCBmdW5jdGlvbiBpbiBIaXN0b3J5IHY0LiBDaGVjayBpdHNcbiAqIFtkb2NzXShodHRwczovL2dpdGh1Yi5jb20vbWphY2tzb24vaGlzdG9yeS90cmVlL3Y0LjUuMSN1c2FnZSkgZm9yIGEgZ29vZFxuICogZGVzY3JpcHRpb24gb24gdGhlIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIEhpc3RvcnkgRHJpdmVyIGZ1bmN0aW9uXG4gKiBAZnVuY3Rpb24gbWFrZUhhc2hIaXN0b3J5RHJpdmVyXG4gKi9cbnZhciBkcml2ZXJzXzIgPSByZXF1aXJlKFwiLi9kcml2ZXJzXCIpO1xuZXhwb3J0cy5tYWtlSGFzaEhpc3RvcnlEcml2ZXIgPSBkcml2ZXJzXzIubWFrZUhhc2hIaXN0b3J5RHJpdmVyO1xuLyoqXG4gKiBDcmVhdGUgYSBIaXN0b3J5IERyaXZlciB0byBiZSB1c2VkIGluIG5vbi1icm93c2VyIGVudmlyb21lbnRzIHN1Y2ggYXNcbiAqIHNlcnZlci1zaWRlIE5vZGUuanMuXG4gKlxuICogVGhpcyBpcyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCwgcmV0dXJucyBhIEhpc3RvcnkgRHJpdmVyIGZvciBDeWNsZS5qc1xuICogYXBwcy4gVGhlIGRyaXZlciBpcyBhbHNvIGEgZnVuY3Rpb24sIGFuZCBpdCB0YWtlcyBhIHN0cmVhbSBvZiBuZXcgbG9jYXRpb25zXG4gKiAoc3RyaW5ncyByZXByZXNlbnRpbmcgcGF0aG5hbWVzIG9yIGxvY2F0aW9uIG9iamVjdHMpIGFzIGlucHV0LCBhbmQgb3V0cHV0c1xuICogYW5vdGhlciBzdHJlYW0gb2YgbG9jYXRpb25zIHRoYXQgd2VyZSBhcHBsaWVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIGFuIG9iamVjdCB3aXRoIHNvbWUgb3B0aW9ucyBzcGVjaWZpYyB0b1xuICogdGhpcyBkcml2ZXIuIFRoZXNlIG9wdGlvbnMgYXJlIHRoZSBzYW1lIGFzIGZvciB0aGUgY29ycmVzcG9uZGluZ1xuICogYGNyZWF0ZU1lbW9yeUhpc3RvcnkoKWAgZnVuY3Rpb24gaW4gSGlzdG9yeSB2NC4gQ2hlY2sgaXRzXG4gKiBbZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL21qYWNrc29uL2hpc3RvcnkvdHJlZS92NC41LjEjdXNhZ2UpIGZvciBhIGdvb2RcbiAqIGRlc2NyaXB0aW9uIG9uIHRoZSBvcHRpb25zLlxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBIaXN0b3J5IERyaXZlciBmdW5jdGlvblxuICogQGZ1bmN0aW9uIG1ha2VIYXNoSGlzdG9yeURyaXZlclxuICovXG52YXIgZHJpdmVyc18zID0gcmVxdWlyZShcIi4vZHJpdmVyc1wiKTtcbmV4cG9ydHMubWFrZVNlcnZlckhpc3RvcnlEcml2ZXIgPSBkcml2ZXJzXzMubWFrZVNlcnZlckhpc3RvcnlEcml2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL2hpc3RvcnkvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB4c3RyZWFtXzEgPSByZXF1aXJlKFwieHN0cmVhbVwiKTtcbnZhciBhZGFwdF8xID0gcmVxdWlyZShcIi4vYWRhcHRcIik7XG5mdW5jdGlvbiBsb2dUb0NvbnNvbGVFcnJvcihlcnIpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZXJyLnN0YWNrIHx8IGVycjtcbiAgICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IodGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29uc29sZSAmJiBjb25zb2xlLmxvZykge1xuICAgICAgICBjb25zb2xlLmxvZyh0YXJnZXQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1ha2VTaW5rUHJveGllcyhkcml2ZXJzKSB7XG4gICAgdmFyIHNpbmtQcm94aWVzID0ge307XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIGRyaXZlcnMpIHtcbiAgICAgICAgaWYgKGRyaXZlcnMuaGFzT3duUHJvcGVydHkobmFtZV8xKSkge1xuICAgICAgICAgICAgc2lua1Byb3hpZXNbbmFtZV8xXSA9IHhzdHJlYW1fMS5kZWZhdWx0LmNyZWF0ZVdpdGhNZW1vcnkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2lua1Byb3hpZXM7XG59XG5mdW5jdGlvbiBjYWxsRHJpdmVycyhkcml2ZXJzLCBzaW5rUHJveGllcykge1xuICAgIHZhciBzb3VyY2VzID0ge307XG4gICAgZm9yICh2YXIgbmFtZV8yIGluIGRyaXZlcnMpIHtcbiAgICAgICAgaWYgKGRyaXZlcnMuaGFzT3duUHJvcGVydHkobmFtZV8yKSkge1xuICAgICAgICAgICAgc291cmNlc1tuYW1lXzJdID0gZHJpdmVyc1tuYW1lXzJdKHNpbmtQcm94aWVzW25hbWVfMl0sIG5hbWVfMik7XG4gICAgICAgICAgICBpZiAoc291cmNlc1tuYW1lXzJdICYmIHR5cGVvZiBzb3VyY2VzW25hbWVfMl0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgc291cmNlc1tuYW1lXzJdLl9pc0N5Y2xlU291cmNlID0gbmFtZV8yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xufVxuLy8gTk9URTogdGhpcyB3aWxsIG11dGF0ZSBgc291cmNlc2AuXG5mdW5jdGlvbiBhZGFwdFNvdXJjZXMoc291cmNlcykge1xuICAgIGZvciAodmFyIG5hbWVfMyBpbiBzb3VyY2VzKSB7XG4gICAgICAgIGlmIChzb3VyY2VzLmhhc093blByb3BlcnR5KG5hbWVfMylcbiAgICAgICAgICAgICYmIHNvdXJjZXNbbmFtZV8zXVxuICAgICAgICAgICAgJiYgdHlwZW9mIHNvdXJjZXNbbmFtZV8zXVsnc2hhbWVmdWxseVNlbmROZXh0J10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNvdXJjZXNbbmFtZV8zXSA9IGFkYXB0XzEuYWRhcHQoc291cmNlc1tuYW1lXzNdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcztcbn1cbmZ1bmN0aW9uIHJlcGxpY2F0ZU1hbnkoc2lua3MsIHNpbmtQcm94aWVzKSB7XG4gICAgdmFyIHNpbmtOYW1lcyA9IE9iamVjdC5rZXlzKHNpbmtzKS5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICEhc2lua1Byb3hpZXNbbmFtZV07IH0pO1xuICAgIHZhciBidWZmZXJzID0ge307XG4gICAgdmFyIHJlcGxpY2F0b3JzID0ge307XG4gICAgc2lua05hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgYnVmZmVyc1tuYW1lXSA9IHsgX246IFtdLCBfZTogW10gfTtcbiAgICAgICAgcmVwbGljYXRvcnNbbmFtZV0gPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gYnVmZmVyc1tuYW1lXS5fbi5wdXNoKHgpOyB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGJ1ZmZlcnNbbmFtZV0uX2UucHVzaChlcnIpOyB9LFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHNpbmtOYW1lc1xuICAgICAgICAubWFwKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiB4c3RyZWFtXzEuZGVmYXVsdC5mcm9tT2JzZXJ2YWJsZShzaW5rc1tuYW1lXSkuc3Vic2NyaWJlKHJlcGxpY2F0b3JzW25hbWVdKTsgfSk7XG4gICAgc2lua05hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gc2lua1Byb3hpZXNbbmFtZV07XG4gICAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gKHgpIHsgbGlzdGVuZXIuX24oeCk7IH07XG4gICAgICAgIHZhciBlcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsgbG9nVG9Db25zb2xlRXJyb3IoZXJyKTsgbGlzdGVuZXIuX2UoZXJyKTsgfTtcbiAgICAgICAgYnVmZmVyc1tuYW1lXS5fbi5mb3JFYWNoKG5leHQpO1xuICAgICAgICBidWZmZXJzW25hbWVdLl9lLmZvckVhY2goZXJyb3IpO1xuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5uZXh0ID0gbmV4dDtcbiAgICAgICAgcmVwbGljYXRvcnNbbmFtZV0uZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgLy8gYmVjYXVzZSBzaW5rLnN1YnNjcmliZShyZXBsaWNhdG9yKSBoYWQgbXV0YXRlZCByZXBsaWNhdG9yIHRvIGFkZFxuICAgICAgICAvLyBfbiwgX2UsIF9jLCB3ZSBtdXN0IGFsc28gdXBkYXRlIHRoZXNlOlxuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5fbiA9IG5leHQ7XG4gICAgICAgIHJlcGxpY2F0b3JzW25hbWVdLl9lID0gZXJyb3I7XG4gICAgfSk7XG4gICAgYnVmZmVycyA9IG51bGw7IC8vIGZyZWUgdXAgZm9yIEdDXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRpc3Bvc2VSZXBsaWNhdGlvbigpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnVuc3Vic2NyaWJlKCk7IH0pO1xuICAgICAgICBzaW5rTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gc2lua1Byb3hpZXNbbmFtZV0uX2MoKTsgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpc3Bvc2VTb3VyY2VzKHNvdXJjZXMpIHtcbiAgICBmb3IgKHZhciBrIGluIHNvdXJjZXMpIHtcbiAgICAgICAgaWYgKHNvdXJjZXMuaGFzT3duUHJvcGVydHkoaykgJiYgc291cmNlc1trXSAmJiBzb3VyY2VzW2tdLmRpc3Bvc2UpIHtcbiAgICAgICAgICAgIHNvdXJjZXNba10uZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCBwcmVwYXJlcyB0aGUgQ3ljbGUgYXBwbGljYXRpb24gdG8gYmUgZXhlY3V0ZWQuIFRha2VzIGEgYG1haW5gXG4gKiBmdW5jdGlvbiBhbmQgcHJlcGFyZXMgdG8gY2lyY3VsYXJseSBjb25uZWN0cyBpdCB0byB0aGUgZ2l2ZW4gY29sbGVjdGlvbiBvZlxuICogZHJpdmVyIGZ1bmN0aW9ucy4gQXMgYW4gb3V0cHV0LCBgc2V0dXAoKWAgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aHJlZVxuICogcHJvcGVydGllczogYHNvdXJjZXNgLCBgc2lua3NgIGFuZCBgcnVuYC4gT25seSB3aGVuIGBydW4oKWAgaXMgY2FsbGVkIHdpbGxcbiAqIHRoZSBhcHBsaWNhdGlvbiBhY3R1YWxseSBleGVjdXRlLiBSZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvZiBgcnVuKClgIGZvclxuICogbW9yZSBkZXRhaWxzLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICogYGBganNcbiAqIGltcG9ydCB7c2V0dXB9IGZyb20gJ0BjeWNsZS9ydW4nO1xuICogY29uc3Qge3NvdXJjZXMsIHNpbmtzLCBydW59ID0gc2V0dXAobWFpbiwgZHJpdmVycyk7XG4gKiAvLyAuLi5cbiAqIGNvbnN0IGRpc3Bvc2UgPSBydW4oKTsgLy8gRXhlY3V0ZXMgdGhlIGFwcGxpY2F0aW9uXG4gKiAvLyAuLi5cbiAqIGRpc3Bvc2UoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1haW4gYSBmdW5jdGlvbiB0aGF0IHRha2VzIGBzb3VyY2VzYCBhcyBpbnB1dCBhbmQgb3V0cHV0c1xuICogYHNpbmtzYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBkcml2ZXJzIGFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBkcml2ZXIgbmFtZXMgYW5kIHZhbHVlc1xuICogYXJlIGRyaXZlciBmdW5jdGlvbnMuXG4gKiBAcmV0dXJuIHtPYmplY3R9IGFuIG9iamVjdCB3aXRoIHRocmVlIHByb3BlcnRpZXM6IGBzb3VyY2VzYCwgYHNpbmtzYCBhbmRcbiAqIGBydW5gLiBgc291cmNlc2AgaXMgdGhlIGNvbGxlY3Rpb24gb2YgZHJpdmVyIHNvdXJjZXMsIGBzaW5rc2AgaXMgdGhlXG4gKiBjb2xsZWN0aW9uIG9mIGRyaXZlciBzaW5rcywgdGhlc2UgY2FuIGJlIHVzZWQgZm9yIGRlYnVnZ2luZyBvciB0ZXN0aW5nLiBgcnVuYFxuICogaXMgdGhlIGZ1bmN0aW9uIHRoYXQgb25jZSBjYWxsZWQgd2lsbCBleGVjdXRlIHRoZSBhcHBsaWNhdGlvbi5cbiAqIEBmdW5jdGlvbiBzZXR1cFxuICovXG5mdW5jdGlvbiBzZXR1cChtYWluLCBkcml2ZXJzKSB7XG4gICAgaWYgKHR5cGVvZiBtYWluICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgYXJndW1lbnQgZ2l2ZW4gdG8gQ3ljbGUgbXVzdCBiZSB0aGUgJ21haW4nIFwiICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24uXCIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRyaXZlcnMgIT09IFwib2JqZWN0XCIgfHwgZHJpdmVycyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWNvbmQgYXJndW1lbnQgZ2l2ZW4gdG8gQ3ljbGUgbXVzdCBiZSBhbiBvYmplY3QgXCIgK1xuICAgICAgICAgICAgXCJ3aXRoIGRyaXZlciBmdW5jdGlvbnMgYXMgcHJvcGVydGllcy5cIik7XG4gICAgfVxuICAgIGlmIChpc09iamVjdEVtcHR5KGRyaXZlcnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBhcmd1bWVudCBnaXZlbiB0byBDeWNsZSBtdXN0IGJlIGFuIG9iamVjdCBcIiArXG4gICAgICAgICAgICBcIndpdGggYXQgbGVhc3Qgb25lIGRyaXZlciBmdW5jdGlvbiBkZWNsYXJlZCBhcyBhIHByb3BlcnR5LlwiKTtcbiAgICB9XG4gICAgdmFyIHNpbmtQcm94aWVzID0gbWFrZVNpbmtQcm94aWVzKGRyaXZlcnMpO1xuICAgIHZhciBzb3VyY2VzID0gY2FsbERyaXZlcnMoZHJpdmVycywgc2lua1Byb3hpZXMpO1xuICAgIHZhciBhZGFwdGVkU291cmNlcyA9IGFkYXB0U291cmNlcyhzb3VyY2VzKTtcbiAgICB2YXIgc2lua3MgPSBtYWluKGFkYXB0ZWRTb3VyY2VzKTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93LkN5Y2xlanMgPSB3aW5kb3cuQ3ljbGVqcyB8fCB7fTtcbiAgICAgICAgd2luZG93LkN5Y2xlanMuc2lua3MgPSBzaW5rcztcbiAgICB9XG4gICAgZnVuY3Rpb24gcnVuKCkge1xuICAgICAgICB2YXIgZGlzcG9zZVJlcGxpY2F0aW9uID0gcmVwbGljYXRlTWFueShzaW5rcywgc2lua1Byb3hpZXMpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICAgIGRpc3Bvc2VTb3VyY2VzKHNvdXJjZXMpO1xuICAgICAgICAgICAgZGlzcG9zZVJlcGxpY2F0aW9uKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIDtcbiAgICByZXR1cm4geyBzaW5rczogc2lua3MsIHNvdXJjZXM6IHNvdXJjZXMsIHJ1bjogcnVuIH07XG59XG5leHBvcnRzLnNldHVwID0gc2V0dXA7XG4vKipcbiAqIFRha2VzIGEgYG1haW5gIGZ1bmN0aW9uIGFuZCBjaXJjdWxhcmx5IGNvbm5lY3RzIGl0IHRvIHRoZSBnaXZlbiBjb2xsZWN0aW9uXG4gKiBvZiBkcml2ZXIgZnVuY3Rpb25zLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICogYGBganNcbiAqIGltcG9ydCBydW4gZnJvbSAnQGN5Y2xlL3J1bic7XG4gKiBjb25zdCBkaXNwb3NlID0gcnVuKG1haW4sIGRyaXZlcnMpO1xuICogLy8gLi4uXG4gKiBkaXNwb3NlKCk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgYG1haW5gIGZ1bmN0aW9uIGV4cGVjdHMgYSBjb2xsZWN0aW9uIG9mIFwic291cmNlXCIgc3RyZWFtcyAocmV0dXJuZWQgZnJvbVxuICogZHJpdmVycykgYXMgaW5wdXQsIGFuZCBzaG91bGQgcmV0dXJuIGEgY29sbGVjdGlvbiBvZiBcInNpbmtcIiBzdHJlYW1zICh0byBiZVxuICogZ2l2ZW4gdG8gZHJpdmVycykuIEEgXCJjb2xsZWN0aW9uIG9mIHN0cmVhbXNcIiBpcyBhIEphdmFTY3JpcHQgb2JqZWN0IHdoZXJlXG4gKiBrZXlzIG1hdGNoIHRoZSBkcml2ZXIgbmFtZXMgcmVnaXN0ZXJlZCBieSB0aGUgYGRyaXZlcnNgIG9iamVjdCwgYW5kIHZhbHVlc1xuICogYXJlIHRoZSBzdHJlYW1zLiBSZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvZiBlYWNoIGRyaXZlciB0byBzZWUgbW9yZVxuICogZGV0YWlscyBvbiB3aGF0IHR5cGVzIG9mIHNvdXJjZXMgaXQgb3V0cHV0cyBhbmQgc2lua3MgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWFpbiBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYHNvdXJjZXNgIGFzIGlucHV0IGFuZCBvdXRwdXRzXG4gKiBgc2lua3NgLlxuICogQHBhcmFtIHtPYmplY3R9IGRyaXZlcnMgYW4gb2JqZWN0IHdoZXJlIGtleXMgYXJlIGRyaXZlciBuYW1lcyBhbmQgdmFsdWVzXG4gKiBhcmUgZHJpdmVyIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIGRpc3Bvc2UgZnVuY3Rpb24sIHVzZWQgdG8gdGVybWluYXRlIHRoZSBleGVjdXRpb24gb2YgdGhlXG4gKiBDeWNsZS5qcyBwcm9ncmFtLCBjbGVhbmluZyB1cCByZXNvdXJjZXMgdXNlZC5cbiAqIEBmdW5jdGlvbiBydW5cbiAqL1xuZnVuY3Rpb24gcnVuKG1haW4sIGRyaXZlcnMpIHtcbiAgICB2YXIgX2EgPSBzZXR1cChtYWluLCBkcml2ZXJzKSwgcnVuID0gX2EucnVuLCBzaW5rcyA9IF9hLnNpbmtzO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3dbJ0N5Y2xlanNEZXZUb29sX3N0YXJ0R3JhcGhTZXJpYWxpemVyJ10pIHtcbiAgICAgICAgd2luZG93WydDeWNsZWpzRGV2VG9vbF9zdGFydEdyYXBoU2VyaWFsaXplciddKHNpbmtzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bigpO1xufVxuZXhwb3J0cy5ydW4gPSBydW47XG5leHBvcnRzLmRlZmF1bHQgPSBydW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGN5Y2xlL3J1bi9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIVxuICogQ3Jvc3MtQnJvd3NlciBTcGxpdCAxLjEuMVxuICogQ29weXJpZ2h0IDIwMDctMjAxMiBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT5cbiAqIEF2YWlsYWJsZSB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIEVDTUFTY3JpcHQgY29tcGxpYW50LCB1bmlmb3JtIGNyb3NzLWJyb3dzZXIgc3BsaXQgbWV0aG9kXG4gKi9cblxuLyoqXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBzdHJpbmdzIHVzaW5nIGEgcmVnZXggb3Igc3RyaW5nIHNlcGFyYXRvci4gTWF0Y2hlcyBvZiB0aGVcbiAqIHNlcGFyYXRvciBhcmUgbm90IGluY2x1ZGVkIGluIHRoZSByZXN1bHQgYXJyYXkuIEhvd2V2ZXIsIGlmIGBzZXBhcmF0b3JgIGlzIGEgcmVnZXggdGhhdCBjb250YWluc1xuICogY2FwdHVyaW5nIGdyb3VwcywgYmFja3JlZmVyZW5jZXMgYXJlIHNwbGljZWQgaW50byB0aGUgcmVzdWx0IGVhY2ggdGltZSBgc2VwYXJhdG9yYCBpcyBtYXRjaGVkLlxuICogRml4ZXMgYnJvd3NlciBidWdzIGNvbXBhcmVkIHRvIHRoZSBuYXRpdmUgYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIGFuZCBjYW4gYmUgdXNlZCByZWxpYWJseVxuICogY3Jvc3MtYnJvd3Nlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNwbGl0LlxuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBzZXBhcmF0b3IgUmVnZXggb3Igc3RyaW5nIHRvIHVzZSBmb3Igc2VwYXJhdGluZyB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtsaW1pdF0gTWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdG8gaW5jbHVkZSBpbiB0aGUgcmVzdWx0IGFycmF5LlxuICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBzdWJzdHJpbmdzLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBCYXNpYyB1c2VcbiAqIHNwbGl0KCdhIGIgYyBkJywgJyAnKTtcbiAqIC8vIC0+IFsnYScsICdiJywgJ2MnLCAnZCddXG4gKlxuICogLy8gV2l0aCBsaW1pdFxuICogc3BsaXQoJ2EgYiBjIGQnLCAnICcsIDIpO1xuICogLy8gLT4gWydhJywgJ2InXVxuICpcbiAqIC8vIEJhY2tyZWZlcmVuY2VzIGluIHJlc3VsdCBhcnJheVxuICogc3BsaXQoJy4ud29yZDEgd29yZDIuLicsIC8oW2Etel0rKShcXGQrKS9pKTtcbiAqIC8vIC0+IFsnLi4nLCAnd29yZCcsICcxJywgJyAnLCAnd29yZCcsICcyJywgJy4uJ11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gc3BsaXQodW5kZWYpIHtcblxuICB2YXIgbmF0aXZlU3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0LFxuICAgIGNvbXBsaWFudEV4ZWNOcGNnID0gLygpPz8vLmV4ZWMoXCJcIilbMV0gPT09IHVuZGVmLFxuICAgIC8vIE5QQ0c6IG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgc2VsZjtcblxuICBzZWxmID0gZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBgbmF0aXZlU3BsaXRgXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzZXBhcmF0b3IpICE9PSBcIltvYmplY3QgUmVnRXhwXVwiKSB7XG4gICAgICByZXR1cm4gbmF0aXZlU3BsaXQuY2FsbChzdHIsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gW10sXG4gICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/IFwiaVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLm11bHRpbGluZSA/IFwibVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLmV4dGVuZGVkID8gXCJ4XCIgOiBcIlwiKSArIC8vIFByb3Bvc2VkIGZvciBFUzZcbiAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gXCJ5XCIgOiBcIlwiKSxcbiAgICAgIC8vIEZpcmVmb3ggMytcbiAgICAgIGxhc3RMYXN0SW5kZXggPSAwLFxuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHNlcGFyYXRvciA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyBcImdcIiksXG4gICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgIHN0ciArPSBcIlwiOyAvLyBUeXBlLWNvbnZlcnRcbiAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnKSB7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKFwiXlwiICsgc2VwYXJhdG9yLnNvdXJjZSArIFwiJCg/IVxcXFxzKVwiLCBmbGFncyk7XG4gICAgfVxuICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAqIElmIHVuZGVmaW5lZDogNDI5NDk2NzI5NSAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICogSWYgMCwgSW5maW5pdHksIG9yIE5hTjogMFxuICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgKiBJZiBuZWdhdGl2ZSBudW1iZXI6IDQyOTQ5NjcyOTYgLSBNYXRoLmZsb29yKE1hdGguYWJzKGxpbWl0KSlcbiAgICAgKiBJZiBvdGhlcjogVHlwZS1jb252ZXJ0LCB0aGVuIHVzZSB0aGUgYWJvdmUgcnVsZXNcbiAgICAgKi9cbiAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZiA/IC0xID4+PiAwIDogLy8gTWF0aC5wb3coMiwgMzIpIC0gMVxuICAgIGxpbWl0ID4+PiAwOyAvLyBUb1VpbnQzMihsaW1pdClcbiAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdHIpKSB7XG4gICAgICAvLyBgc2VwYXJhdG9yLmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goc3RyLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvclxuICAgICAgICAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cHNcbiAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZyAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZikge1xuICAgICAgICAgICAgICAgIG1hdGNoW2ldID0gdW5kZWY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW1pdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VwYXJhdG9yLmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHtcbiAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yLnRlc3QoXCJcIikpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goXCJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0ci5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICB9O1xuXG4gIHJldHVybiBzZWxmO1xufSkoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9icm93c2VyLXNwbGl0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb3B5ICAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvY29weScpXG4gICwgbWFwICAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L21hcCcpXG4gICwgY2FsbGFibGUgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlJylcbiAgLCB2YWxpZFZhbHVlID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvdmFsaWQtdmFsdWUnKVxuXG4gICwgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAsIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIGRlZmluZTtcblxuZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIGRlc2MsIGJpbmRUbykge1xuXHR2YXIgdmFsdWUgPSB2YWxpZFZhbHVlKGRlc2MpICYmIGNhbGxhYmxlKGRlc2MudmFsdWUpLCBkZ3M7XG5cdGRncyA9IGNvcHkoZGVzYyk7XG5cdGRlbGV0ZSBkZ3Mud3JpdGFibGU7XG5cdGRlbGV0ZSBkZ3MudmFsdWU7XG5cdGRncy5nZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwodGhpcywgbmFtZSkpIHJldHVybiB2YWx1ZTtcblx0XHRkZXNjLnZhbHVlID0gYmluZC5jYWxsKHZhbHVlLCAoYmluZFRvID09IG51bGwpID8gdGhpcyA6IHRoaXNbYmluZFRvXSk7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwgZGVzYyk7XG5cdFx0cmV0dXJuIHRoaXNbbmFtZV07XG5cdH07XG5cdHJldHVybiBkZ3M7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwcm9wcy8qLCBiaW5kVG8qLykge1xuXHR2YXIgYmluZFRvID0gYXJndW1lbnRzWzFdO1xuXHRyZXR1cm4gbWFwKHByb3BzLCBmdW5jdGlvbiAoZGVzYywgbmFtZSkge1xuXHRcdHJldHVybiBkZWZpbmUobmFtZSwgZGVzYywgYmluZFRvKTtcblx0fSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2QvYXV0by1iaW5kLmpzXG4vLyBtb2R1bGUgaWQgPSA3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1Bvc0ludCA9IHJlcXVpcmUoJy4uLy4uL251bWJlci90by1wb3MtaW50ZWdlcicpXG4gICwgdmFsdWUgICAgPSByZXF1aXJlKCcuLi8uLi9vYmplY3QvdmFsaWQtdmFsdWUnKVxuXG4gICwgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mXG4gICwgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgYWJzID0gTWF0aC5hYnMsIGZsb29yID0gTWF0aC5mbG9vcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VhcmNoRWxlbWVudC8qLCBmcm9tSW5kZXgqLykge1xuXHR2YXIgaSwgbCwgZnJvbUluZGV4LCB2YWw7XG5cdGlmIChzZWFyY2hFbGVtZW50ID09PSBzZWFyY2hFbGVtZW50KSB7IC8vanNsaW50OiBpZ25vcmVcblx0XHRyZXR1cm4gaW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9XG5cblx0bCA9IHRvUG9zSW50KHZhbHVlKHRoaXMpLmxlbmd0aCk7XG5cdGZyb21JbmRleCA9IGFyZ3VtZW50c1sxXTtcblx0aWYgKGlzTmFOKGZyb21JbmRleCkpIGZyb21JbmRleCA9IDA7XG5cdGVsc2UgaWYgKGZyb21JbmRleCA+PSAwKSBmcm9tSW5kZXggPSBmbG9vcihmcm9tSW5kZXgpO1xuXHRlbHNlIGZyb21JbmRleCA9IHRvUG9zSW50KHRoaXMubGVuZ3RoKSAtIGZsb29yKGFicyhmcm9tSW5kZXgpKTtcblxuXHRmb3IgKGkgPSBmcm9tSW5kZXg7IGkgPCBsOyArK2kpIHtcblx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBpKSkge1xuXHRcdFx0dmFsID0gdGhpc1tpXTtcblx0XHRcdGlmICh2YWwgIT09IHZhbCkgcmV0dXJuIGk7IC8vanNsaW50OiBpZ25vcmVcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L2FycmF5LyMvZS1pbmRleC1vZi5qc1xuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaXMtaW1wbGVtZW50ZWQnKSgpXG5cdD8gTWF0aC5zaWduXG5cdDogcmVxdWlyZSgnLi9zaGltJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9tYXRoL3NpZ24vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzaWduID0gTWF0aC5zaWduO1xuXHRpZiAodHlwZW9mIHNpZ24gIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuICgoc2lnbigxMCkgPT09IDEpICYmIChzaWduKC0yMCkgPT09IC0xKSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvbWF0aC9zaWduL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblx0aWYgKGlzTmFOKHZhbHVlKSB8fCAodmFsdWUgPT09IDApKSByZXR1cm4gdmFsdWU7XG5cdHJldHVybiAodmFsdWUgPiAwKSA/IDEgOiAtMTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9tYXRoL3NpZ24vc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gODNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4uL21hdGgvc2lnbicpXG5cbiAgLCBhYnMgPSBNYXRoLmFicywgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRpZiAoaXNOYU4odmFsdWUpKSByZXR1cm4gMDtcblx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXHRpZiAoKHZhbHVlID09PSAwKSB8fCAhaXNGaW5pdGUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG5cdHJldHVybiBzaWduKHZhbHVlKSAqIGZsb29yKGFicyh2YWx1ZSkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L251bWJlci90by1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvLWludGVnZXInKVxuXG4gICwgbWF4ID0gTWF0aC5tYXg7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBtYXgoMCwgdG9JbnRlZ2VyKHZhbHVlKSk7IH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9udW1iZXIvdG8tcG9zLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEludGVybmFsIG1ldGhvZCwgdXNlZCBieSBpdGVyYXRpb24gZnVuY3Rpb25zLlxuLy8gQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBrZXktdmFsdWUgcGFpciBmb3VuZCBpbiBvYmplY3Rcbi8vIE9wdGlvbmFsbHkgdGFrZXMgY29tcGFyZUZuIHRvIGl0ZXJhdGUgb2JqZWN0IGluIHNwZWNpZmljIG9yZGVyXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxhYmxlID0gcmVxdWlyZSgnLi92YWxpZC1jYWxsYWJsZScpXG4gICwgdmFsdWUgICAgPSByZXF1aXJlKCcuL3ZhbGlkLXZhbHVlJylcblxuICAsIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCwgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLCBrZXlzID0gT2JqZWN0LmtleXNcbiAgLCBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgZGVmVmFsKSB7XG5cdHJldHVybiBmdW5jdGlvbiAob2JqLCBjYi8qLCB0aGlzQXJnLCBjb21wYXJlRm4qLykge1xuXHRcdHZhciBsaXN0LCB0aGlzQXJnID0gYXJndW1lbnRzWzJdLCBjb21wYXJlRm4gPSBhcmd1bWVudHNbM107XG5cdFx0b2JqID0gT2JqZWN0KHZhbHVlKG9iaikpO1xuXHRcdGNhbGxhYmxlKGNiKTtcblxuXHRcdGxpc3QgPSBrZXlzKG9iaik7XG5cdFx0aWYgKGNvbXBhcmVGbikge1xuXHRcdFx0bGlzdC5zb3J0KCh0eXBlb2YgY29tcGFyZUZuID09PSAnZnVuY3Rpb24nKSA/IGJpbmQuY2FsbChjb21wYXJlRm4sIG9iaikgOiB1bmRlZmluZWQpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykgbWV0aG9kID0gbGlzdFttZXRob2RdO1xuXHRcdHJldHVybiBjYWxsLmNhbGwobWV0aG9kLCBsaXN0LCBmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuXHRcdFx0aWYgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwga2V5KSkgcmV0dXJuIGRlZlZhbDtcblx0XHRcdHJldHVybiBjYWxsLmNhbGwoY2IsIHRoaXNBcmcsIG9ialtrZXldLCBrZXksIG9iaiwgaW5kZXgpO1xuXHRcdH0pO1xuXHR9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9faXRlcmF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sIG9iajtcblx0aWYgKHR5cGVvZiBhc3NpZ24gIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0b2JqID0geyBmb286ICdyYXonIH07XG5cdGFzc2lnbihvYmosIHsgYmFyOiAnZHdhJyB9LCB7IHRyenk6ICd0cnp5JyB9KTtcblx0cmV0dXJuIChvYmouZm9vICsgb2JqLmJhciArIG9iai50cnp5KSA9PT0gJ3JhemR3YXRyenknO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9hc3NpZ24vaXMtaW1wbGVtZW50ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgID0gcmVxdWlyZSgnLi4va2V5cycpXG4gICwgdmFsdWUgPSByZXF1aXJlKCcuLi92YWxpZC12YWx1ZScpXG5cbiAgLCBtYXggPSBNYXRoLm1heDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVzdCwgc3JjLyosIOKApnNyY24qLykge1xuXHR2YXIgZXJyb3IsIGksIGwgPSBtYXgoYXJndW1lbnRzLmxlbmd0aCwgMiksIGFzc2lnbjtcblx0ZGVzdCA9IE9iamVjdCh2YWx1ZShkZXN0KSk7XG5cdGFzc2lnbiA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHR0cnkgeyBkZXN0W2tleV0gPSBzcmNba2V5XTsgfSBjYXRjaCAoZSkge1xuXHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlO1xuXHRcdH1cblx0fTtcblx0Zm9yIChpID0gMTsgaSA8IGw7ICsraSkge1xuXHRcdHNyYyA9IGFyZ3VtZW50c1tpXTtcblx0XHRrZXlzKHNyYykuZm9yRWFjaChhc3NpZ24pO1xuXHR9XG5cdGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB0aHJvdyBlcnJvcjtcblx0cmV0dXJuIGRlc3Q7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9zaGltLmpzXG4vLyBtb2R1bGUgaWQgPSA4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL2Fzc2lnbicpXG4gICwgdmFsdWUgID0gcmVxdWlyZSgnLi92YWxpZC12YWx1ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcblx0dmFyIGNvcHkgPSBPYmplY3QodmFsdWUob2JqKSk7XG5cdGlmIChjb3B5ICE9PSBvYmopIHJldHVybiBjb3B5O1xuXHRyZXR1cm4gYXNzaWduKHt9LCBvYmopO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9jb3B5LmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXb3JrYXJvdW5kIGZvciBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yODA0XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsIHNoaW07XG5cbmlmICghcmVxdWlyZSgnLi9zZXQtcHJvdG90eXBlLW9mL2lzLWltcGxlbWVudGVkJykoKSkge1xuXHRzaGltID0gcmVxdWlyZSgnLi9zZXQtcHJvdG90eXBlLW9mL3NoaW0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgbnVsbE9iamVjdCwgcHJvcHMsIGRlc2M7XG5cdGlmICghc2hpbSkgcmV0dXJuIGNyZWF0ZTtcblx0aWYgKHNoaW0ubGV2ZWwgIT09IDEpIHJldHVybiBjcmVhdGU7XG5cblx0bnVsbE9iamVjdCA9IHt9O1xuXHRwcm9wcyA9IHt9O1xuXHRkZXNjID0geyBjb25maWd1cmFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsXG5cdFx0dmFsdWU6IHVuZGVmaW5lZCB9O1xuXHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0aWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0XHRwcm9wc1tuYW1lXSA9IHsgY29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiB1bmRlZmluZWQgfTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0cHJvcHNbbmFtZV0gPSBkZXNjO1xuXHR9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMobnVsbE9iamVjdCwgcHJvcHMpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaGltLCAnbnVsbFBvbHlmaWxsJywgeyBjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIHZhbHVlOiBudWxsT2JqZWN0IH0pO1xuXG5cdHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wcykge1xuXHRcdHJldHVybiBjcmVhdGUoKHByb3RvdHlwZSA9PT0gbnVsbCkgPyBudWxsT2JqZWN0IDogcHJvdG90eXBlLCBwcm9wcyk7XG5cdH07XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2NyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXJhdGUnKSgnZm9yRWFjaCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2Zvci1lYWNoLmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBEZXByZWNhdGVkXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2lzLWNhbGxhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBtYXAgPSB7ICdmdW5jdGlvbic6IHRydWUsIG9iamVjdDogdHJ1ZSB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4KSB7XG5cdHJldHVybiAoKHggIT0gbnVsbCkgJiYgbWFwW3R5cGVvZiB4XSkgfHwgZmFsc2U7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2lzLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaXMtaW1wbGVtZW50ZWQnKSgpXG5cdD8gT2JqZWN0LmtleXNcblx0OiByZXF1aXJlKCcuL3NoaW0nKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L29iamVjdC9rZXlzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR0cnkge1xuXHRcdE9iamVjdC5rZXlzKCdwcmltaXRpdmUnKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3Qva2V5cy9pcy1pbXBsZW1lbnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IE9iamVjdC5rZXlzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcblx0cmV0dXJuIGtleXMob2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBPYmplY3Qob2JqZWN0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvb2JqZWN0L2tleXMvc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbGFibGUgPSByZXF1aXJlKCcuL3ZhbGlkLWNhbGxhYmxlJylcbiAgLCBmb3JFYWNoICA9IHJlcXVpcmUoJy4vZm9yLWVhY2gnKVxuXG4gICwgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmosIGNiLyosIHRoaXNBcmcqLykge1xuXHR2YXIgbyA9IHt9LCB0aGlzQXJnID0gYXJndW1lbnRzWzJdO1xuXHRjYWxsYWJsZShjYik7XG5cdGZvckVhY2gob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSwgb2JqLCBpbmRleCkge1xuXHRcdG9ba2V5XSA9IGNhbGwuY2FsbChjYiwgdGhpc0FyZywgdmFsdWUsIGtleSwgb2JqLCBpbmRleCk7XG5cdH0pO1xuXHRyZXR1cm4gbztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSA5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2gsIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbnZhciBwcm9jZXNzID0gZnVuY3Rpb24gKHNyYywgb2JqKSB7XG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIHNyYykgb2JqW2tleV0gPSBzcmNba2V5XTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMvKiwg4oCmb3B0aW9ucyovKSB7XG5cdHZhciByZXN1bHQgPSBjcmVhdGUobnVsbCk7XG5cdGZvckVhY2guY2FsbChhcmd1bWVudHMsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdFx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgcmV0dXJuO1xuXHRcdHByb2Nlc3MoT2JqZWN0KG9wdGlvbnMpLCByZXN1bHQpO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCwgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJnLyosIOKApmFyZ3MqLykge1xuXHR2YXIgc2V0ID0gY3JlYXRlKG51bGwpO1xuXHRmb3JFYWNoLmNhbGwoYXJndW1lbnRzLCBmdW5jdGlvbiAobmFtZSkgeyBzZXRbbmFtZV0gPSB0cnVlOyB9KTtcblx0cmV0dXJuIHNldDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM1LWV4dC9vYmplY3QvcHJpbWl0aXZlLXNldC5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyID0gJ3JhemR3YXRyenknO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHR5cGVvZiBzdHIuY29udGFpbnMgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuICgoc3RyLmNvbnRhaW5zKCdkd2EnKSA9PT0gdHJ1ZSkgJiYgKHN0ci5jb250YWlucygnZm9vJykgPT09IGZhbHNlKSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaXMtaW1wbGVtZW50ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmRleE9mID0gU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcvKiwgcG9zaXRpb24qLykge1xuXHRyZXR1cm4gaW5kZXhPZi5jYWxsKHRoaXMsIHNlYXJjaFN0cmluZywgYXJndW1lbnRzWzFdKSA+IC0xO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL3NoaW0uanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YnKVxuICAsIGNvbnRhaW5zICAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucycpXG4gICwgZCAgICAgICAgICAgICAgPSByZXF1aXJlKCdkJylcbiAgLCBJdGVyYXRvciAgICAgICA9IHJlcXVpcmUoJy4vJylcblxuICAsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG4gICwgQXJyYXlJdGVyYXRvcjtcblxuQXJyYXlJdGVyYXRvciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyciwga2luZCkge1xuXHRpZiAoISh0aGlzIGluc3RhbmNlb2YgQXJyYXlJdGVyYXRvcikpIHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcihhcnIsIGtpbmQpO1xuXHRJdGVyYXRvci5jYWxsKHRoaXMsIGFycik7XG5cdGlmICgha2luZCkga2luZCA9ICd2YWx1ZSc7XG5cdGVsc2UgaWYgKGNvbnRhaW5zLmNhbGwoa2luZCwgJ2tleSt2YWx1ZScpKSBraW5kID0gJ2tleSt2YWx1ZSc7XG5cdGVsc2UgaWYgKGNvbnRhaW5zLmNhbGwoa2luZCwgJ2tleScpKSBraW5kID0gJ2tleSc7XG5cdGVsc2Uga2luZCA9ICd2YWx1ZSc7XG5cdGRlZmluZVByb3BlcnR5KHRoaXMsICdfX2tpbmRfXycsIGQoJycsIGtpbmQpKTtcbn07XG5pZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKEFycmF5SXRlcmF0b3IsIEl0ZXJhdG9yKTtcblxuQXJyYXlJdGVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yLnByb3RvdHlwZSwge1xuXHRjb25zdHJ1Y3RvcjogZChBcnJheUl0ZXJhdG9yKSxcblx0X3Jlc29sdmU6IGQoZnVuY3Rpb24gKGkpIHtcblx0XHRpZiAodGhpcy5fX2tpbmRfXyA9PT0gJ3ZhbHVlJykgcmV0dXJuIHRoaXMuX19saXN0X19baV07XG5cdFx0aWYgKHRoaXMuX19raW5kX18gPT09ICdrZXkrdmFsdWUnKSByZXR1cm4gW2ksIHRoaXMuX19saXN0X19baV1dO1xuXHRcdHJldHVybiBpO1xuXHR9KSxcblx0dG9TdHJpbmc6IGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gJ1tvYmplY3QgQXJyYXkgSXRlcmF0b3JdJzsgfSlcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1pdGVyYXRvci9hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnZXM1LWV4dC9mdW5jdGlvbi9pcy1hcmd1bWVudHMnKVxuICAsIGNhbGxhYmxlICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvdmFsaWQtY2FsbGFibGUnKVxuICAsIGlzU3RyaW5nICAgID0gcmVxdWlyZSgnZXM1LWV4dC9zdHJpbmcvaXMtc3RyaW5nJylcbiAgLCBnZXQgICAgICAgICA9IHJlcXVpcmUoJy4vZ2V0JylcblxuICAsIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5LCBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGxcbiAgLCBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBjYi8qLCB0aGlzQXJnKi8pIHtcblx0dmFyIG1vZGUsIHRoaXNBcmcgPSBhcmd1bWVudHNbMl0sIHJlc3VsdCwgZG9CcmVhaywgYnJva2VuLCBpLCBsLCBjaGFyLCBjb2RlO1xuXHRpZiAoaXNBcnJheShpdGVyYWJsZSkgfHwgaXNBcmd1bWVudHMoaXRlcmFibGUpKSBtb2RlID0gJ2FycmF5Jztcblx0ZWxzZSBpZiAoaXNTdHJpbmcoaXRlcmFibGUpKSBtb2RlID0gJ3N0cmluZyc7XG5cdGVsc2UgaXRlcmFibGUgPSBnZXQoaXRlcmFibGUpO1xuXG5cdGNhbGxhYmxlKGNiKTtcblx0ZG9CcmVhayA9IGZ1bmN0aW9uICgpIHsgYnJva2VuID0gdHJ1ZTsgfTtcblx0aWYgKG1vZGUgPT09ICdhcnJheScpIHtcblx0XHRzb21lLmNhbGwoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0Y2FsbC5jYWxsKGNiLCB0aGlzQXJnLCB2YWx1ZSwgZG9CcmVhayk7XG5cdFx0XHRpZiAoYnJva2VuKSByZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKG1vZGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0bCA9IGl0ZXJhYmxlLmxlbmd0aDtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgKytpKSB7XG5cdFx0XHRjaGFyID0gaXRlcmFibGVbaV07XG5cdFx0XHRpZiAoKGkgKyAxKSA8IGwpIHtcblx0XHRcdFx0Y29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcblx0XHRcdFx0aWYgKChjb2RlID49IDB4RDgwMCkgJiYgKGNvZGUgPD0gMHhEQkZGKSkgY2hhciArPSBpdGVyYWJsZVsrK2ldO1xuXHRcdFx0fVxuXHRcdFx0Y2FsbC5jYWxsKGNiLCB0aGlzQXJnLCBjaGFyLCBkb0JyZWFrKTtcblx0XHRcdGlmIChicm9rZW4pIGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblx0cmVzdWx0ID0gaXRlcmFibGUubmV4dCgpO1xuXG5cdHdoaWxlICghcmVzdWx0LmRvbmUpIHtcblx0XHRjYWxsLmNhbGwoY2IsIHRoaXNBcmcsIHJlc3VsdC52YWx1ZSwgZG9CcmVhayk7XG5cdFx0aWYgKGJyb2tlbikgcmV0dXJuO1xuXHRcdHJlc3VsdCA9IGl0ZXJhYmxlLm5leHQoKTtcblx0fVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtaXRlcmF0b3IvZm9yLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcmd1bWVudHMgICAgPSByZXF1aXJlKCdlczUtZXh0L2Z1bmN0aW9uL2lzLWFyZ3VtZW50cycpXG4gICwgaXNTdHJpbmcgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L3N0cmluZy9pcy1zdHJpbmcnKVxuICAsIEFycmF5SXRlcmF0b3IgID0gcmVxdWlyZSgnLi9hcnJheScpXG4gICwgU3RyaW5nSXRlcmF0b3IgPSByZXF1aXJlKCcuL3N0cmluZycpXG4gICwgaXRlcmFibGUgICAgICAgPSByZXF1aXJlKCcuL3ZhbGlkLWl0ZXJhYmxlJylcbiAgLCBpdGVyYXRvclN5bWJvbCA9IHJlcXVpcmUoJ2VzNi1zeW1ib2wnKS5pdGVyYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG5cdGlmICh0eXBlb2YgaXRlcmFibGUob2JqKVtpdGVyYXRvclN5bWJvbF0gPT09ICdmdW5jdGlvbicpIHJldHVybiBvYmpbaXRlcmF0b3JTeW1ib2xdKCk7XG5cdGlmIChpc0FyZ3VtZW50cyhvYmopKSByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3Iob2JqKTtcblx0aWYgKGlzU3RyaW5nKG9iaikpIHJldHVybiBuZXcgU3RyaW5nSXRlcmF0b3Iob2JqKTtcblx0cmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKG9iaik7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1pdGVyYXRvci9nZXQuanNcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0FyZ3VtZW50cyAgICA9IHJlcXVpcmUoJ2VzNS1leHQvZnVuY3Rpb24vaXMtYXJndW1lbnRzJylcbiAgLCBpc1N0cmluZyAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvc3RyaW5nL2lzLXN0cmluZycpXG4gICwgaXRlcmF0b3JTeW1ib2wgPSByZXF1aXJlKCdlczYtc3ltYm9sJykuaXRlcmF0b3JcblxuICAsIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRpZiAoaXNBcnJheSh2YWx1ZSkpIHJldHVybiB0cnVlO1xuXHRpZiAoaXNTdHJpbmcodmFsdWUpKSByZXR1cm4gdHJ1ZTtcblx0aWYgKGlzQXJndW1lbnRzKHZhbHVlKSkgcmV0dXJuIHRydWU7XG5cdHJldHVybiAodHlwZW9mIHZhbHVlW2l0ZXJhdG9yU3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1pdGVyYXRvci9pcy1pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFRoYW5rcyBAbWF0aGlhc2J5bmVuc1xuLy8gaHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlI2l0ZXJhdGluZy1vdmVyLXN5bWJvbHNcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mJylcbiAgLCBkICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2QnKVxuICAsIEl0ZXJhdG9yICAgICAgID0gcmVxdWlyZSgnLi8nKVxuXG4gICwgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgLCBTdHJpbmdJdGVyYXRvcjtcblxuU3RyaW5nSXRlcmF0b3IgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmluZ0l0ZXJhdG9yKSkgcmV0dXJuIG5ldyBTdHJpbmdJdGVyYXRvcihzdHIpO1xuXHRzdHIgPSBTdHJpbmcoc3RyKTtcblx0SXRlcmF0b3IuY2FsbCh0aGlzLCBzdHIpO1xuXHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19sZW5ndGhfXycsIGQoJycsIHN0ci5sZW5ndGgpKTtcblxufTtcbmlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoU3RyaW5nSXRlcmF0b3IsIEl0ZXJhdG9yKTtcblxuU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvci5wcm90b3R5cGUsIHtcblx0Y29uc3RydWN0b3I6IGQoU3RyaW5nSXRlcmF0b3IpLFxuXHRfbmV4dDogZChmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLl9fbGlzdF9fKSByZXR1cm47XG5cdFx0aWYgKHRoaXMuX19uZXh0SW5kZXhfXyA8IHRoaXMuX19sZW5ndGhfXykgcmV0dXJuIHRoaXMuX19uZXh0SW5kZXhfXysrO1xuXHRcdHRoaXMuX3VuQmluZCgpO1xuXHR9KSxcblx0X3Jlc29sdmU6IGQoZnVuY3Rpb24gKGkpIHtcblx0XHR2YXIgY2hhciA9IHRoaXMuX19saXN0X19baV0sIGNvZGU7XG5cdFx0aWYgKHRoaXMuX19uZXh0SW5kZXhfXyA9PT0gdGhpcy5fX2xlbmd0aF9fKSByZXR1cm4gY2hhcjtcblx0XHRjb2RlID0gY2hhci5jaGFyQ29kZUF0KDApO1xuXHRcdGlmICgoY29kZSA+PSAweEQ4MDApICYmIChjb2RlIDw9IDB4REJGRikpIHJldHVybiBjaGFyICsgdGhpcy5fX2xpc3RfX1t0aGlzLl9fbmV4dEluZGV4X18rK107XG5cdFx0cmV0dXJuIGNoYXI7XG5cdH0pLFxuXHR0b1N0cmluZzogZChmdW5jdGlvbiAoKSB7IHJldHVybiAnW29iamVjdCBTdHJpbmcgSXRlcmF0b3JdJzsgfSlcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1pdGVyYXRvci9zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDEwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgbWFwLCBpdGVyYXRvciwgcmVzdWx0O1xuXHRpZiAodHlwZW9mIE1hcCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHR0cnkge1xuXHRcdC8vIFdlYktpdCBkb2Vzbid0IHN1cHBvcnQgYXJndW1lbnRzIGFuZCBjcmFzaGVzXG5cdFx0bWFwID0gbmV3IE1hcChbWydyYXonLCAnb25lJ10sIFsnZHdhJywgJ3R3byddLCBbJ3RyenknLCAndGhyZWUnXV0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChTdHJpbmcobWFwKSAhPT0gJ1tvYmplY3QgTWFwXScpIHJldHVybiBmYWxzZTtcblx0aWYgKG1hcC5zaXplICE9PSAzKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2YgbWFwLmNsZWFyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2YgbWFwLmRlbGV0ZSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC5lbnRyaWVzICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2YgbWFwLmZvckVhY2ggIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0aWYgKHR5cGVvZiBtYXAuZ2V0ICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2YgbWFwLmhhcyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC5rZXlzICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG5cdGlmICh0eXBlb2YgbWFwLnNldCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIG1hcC52YWx1ZXMgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblxuXHRpdGVyYXRvciA9IG1hcC5lbnRyaWVzKCk7XG5cdHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0aWYgKHJlc3VsdC5kb25lICE9PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXHRpZiAoIXJlc3VsdC52YWx1ZSkgcmV0dXJuIGZhbHNlO1xuXHRpZiAocmVzdWx0LnZhbHVlWzBdICE9PSAncmF6JykgcmV0dXJuIGZhbHNlO1xuXHRpZiAocmVzdWx0LnZhbHVlWzFdICE9PSAnb25lJykgcmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiB0cnVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtbWFwL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gRXhwb3J0cyB0cnVlIGlmIGVudmlyb25tZW50IHByb3ZpZGVzIG5hdGl2ZSBgTWFwYCBpbXBsZW1lbnRhdGlvbixcbi8vIHdoYXRldmVyIHRoYXQgaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuXHRpZiAodHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcblx0cmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3IE1hcCgpKSA9PT0gJ1tvYmplY3QgTWFwXScpO1xufSgpKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtbWFwL2lzLW5hdGl2ZS1pbXBsZW1lbnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9wcmltaXRpdmUtc2V0JykoJ2tleScsXG5cdCd2YWx1ZScsICdrZXkrdmFsdWUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtbWFwL2xpYi9pdGVyYXRvci1raW5kcy5qc1xuLy8gbW9kdWxlIGlkID0gMTA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNldFByb3RvdHlwZU9mICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZicpXG4gICwgZCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdkJylcbiAgLCBJdGVyYXRvciAgICAgICAgICA9IHJlcXVpcmUoJ2VzNi1pdGVyYXRvcicpXG4gICwgdG9TdHJpbmdUYWdTeW1ib2wgPSByZXF1aXJlKCdlczYtc3ltYm9sJykudG9TdHJpbmdUYWdcbiAgLCBraW5kcyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vaXRlcmF0b3Ita2luZHMnKVxuXG4gICwgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG4gICwgdW5CaW5kID0gSXRlcmF0b3IucHJvdG90eXBlLl91bkJpbmRcbiAgLCBNYXBJdGVyYXRvcjtcblxuTWFwSXRlcmF0b3IgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXAsIGtpbmQpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hcEl0ZXJhdG9yKSkgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcihtYXAsIGtpbmQpO1xuXHRJdGVyYXRvci5jYWxsKHRoaXMsIG1hcC5fX21hcEtleXNEYXRhX18sIG1hcCk7XG5cdGlmICgha2luZCB8fCAha2luZHNba2luZF0pIGtpbmQgPSAna2V5K3ZhbHVlJztcblx0ZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG5cdFx0X19raW5kX186IGQoJycsIGtpbmQpLFxuXHRcdF9fdmFsdWVzX186IGQoJ3cnLCBtYXAuX19tYXBWYWx1ZXNEYXRhX18pXG5cdH0pO1xufTtcbmlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoTWFwSXRlcmF0b3IsIEl0ZXJhdG9yKTtcblxuTWFwSXRlcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvci5wcm90b3R5cGUsIHtcblx0Y29uc3RydWN0b3I6IGQoTWFwSXRlcmF0b3IpLFxuXHRfcmVzb2x2ZTogZChmdW5jdGlvbiAoaSkge1xuXHRcdGlmICh0aGlzLl9fa2luZF9fID09PSAndmFsdWUnKSByZXR1cm4gdGhpcy5fX3ZhbHVlc19fW2ldO1xuXHRcdGlmICh0aGlzLl9fa2luZF9fID09PSAna2V5JykgcmV0dXJuIHRoaXMuX19saXN0X19baV07XG5cdFx0cmV0dXJuIFt0aGlzLl9fbGlzdF9fW2ldLCB0aGlzLl9fdmFsdWVzX19baV1dO1xuXHR9KSxcblx0X3VuQmluZDogZChmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fX3ZhbHVlc19fID0gbnVsbDtcblx0XHR1bkJpbmQuY2FsbCh0aGlzKTtcblx0fSksXG5cdHRvU3RyaW5nOiBkKGZ1bmN0aW9uICgpIHsgcmV0dXJuICdbb2JqZWN0IE1hcCBJdGVyYXRvcl0nOyB9KVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFwSXRlcmF0b3IucHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCxcblx0ZCgnYycsICdNYXAgSXRlcmF0b3InKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXM2LW1hcC9saWIvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDExMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGVhciAgICAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvYXJyYXkvIy9jbGVhcicpXG4gICwgZUluZGV4T2YgICAgICAgPSByZXF1aXJlKCdlczUtZXh0L2FycmF5LyMvZS1pbmRleC1vZicpXG4gICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9zZXQtcHJvdG90eXBlLW9mJylcbiAgLCBjYWxsYWJsZSAgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLWNhbGxhYmxlJylcbiAgLCB2YWxpZFZhbHVlICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvb2JqZWN0L3ZhbGlkLXZhbHVlJylcbiAgLCBkICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2QnKVxuICAsIGVlICAgICAgICAgICAgID0gcmVxdWlyZSgnZXZlbnQtZW1pdHRlcicpXG4gICwgU3ltYm9sICAgICAgICAgPSByZXF1aXJlKCdlczYtc3ltYm9sJylcbiAgLCBpdGVyYXRvciAgICAgICA9IHJlcXVpcmUoJ2VzNi1pdGVyYXRvci92YWxpZC1pdGVyYWJsZScpXG4gICwgZm9yT2YgICAgICAgICAgPSByZXF1aXJlKCdlczYtaXRlcmF0b3IvZm9yLW9mJylcbiAgLCBJdGVyYXRvciAgICAgICA9IHJlcXVpcmUoJy4vbGliL2l0ZXJhdG9yJylcbiAgLCBpc05hdGl2ZSAgICAgICA9IHJlcXVpcmUoJy4vaXMtbmF0aXZlLWltcGxlbWVudGVkJylcblxuICAsIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbFxuICAsIGRlZmluZVByb3BlcnRpZXMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcywgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2ZcbiAgLCBNYXBQb2x5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcFBvbHkgPSBmdW5jdGlvbiAoLyppdGVyYWJsZSovKSB7XG5cdHZhciBpdGVyYWJsZSA9IGFyZ3VtZW50c1swXSwga2V5cywgdmFsdWVzLCBzZWxmO1xuXHRpZiAoISh0aGlzIGluc3RhbmNlb2YgTWFwUG9seSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIHJlcXVpcmVzIFxcJ25ld1xcJycpO1xuXHRpZiAoaXNOYXRpdmUgJiYgc2V0UHJvdG90eXBlT2YgJiYgKE1hcCAhPT0gTWFwUG9seSkpIHtcblx0XHRzZWxmID0gc2V0UHJvdG90eXBlT2YobmV3IE1hcCgpLCBnZXRQcm90b3R5cGVPZih0aGlzKSk7XG5cdH0gZWxzZSB7XG5cdFx0c2VsZiA9IHRoaXM7XG5cdH1cblx0aWYgKGl0ZXJhYmxlICE9IG51bGwpIGl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0ZGVmaW5lUHJvcGVydGllcyhzZWxmLCB7XG5cdFx0X19tYXBLZXlzRGF0YV9fOiBkKCdjJywga2V5cyA9IFtdKSxcblx0XHRfX21hcFZhbHVlc0RhdGFfXzogZCgnYycsIHZhbHVlcyA9IFtdKVxuXHR9KTtcblx0aWYgKCFpdGVyYWJsZSkgcmV0dXJuIHNlbGY7XG5cdGZvck9mKGl0ZXJhYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHR2YXIga2V5ID0gdmFsaWRWYWx1ZSh2YWx1ZSlbMF07XG5cdFx0dmFsdWUgPSB2YWx1ZVsxXTtcblx0XHRpZiAoZUluZGV4T2YuY2FsbChrZXlzLCBrZXkpICE9PSAtMSkgcmV0dXJuO1xuXHRcdGtleXMucHVzaChrZXkpO1xuXHRcdHZhbHVlcy5wdXNoKHZhbHVlKTtcblx0fSwgc2VsZik7XG5cdHJldHVybiBzZWxmO1xufTtcblxuaWYgKGlzTmF0aXZlKSB7XG5cdGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoTWFwUG9seSwgTWFwKTtcblx0TWFwUG9seS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hcC5wcm90b3R5cGUsIHtcblx0XHRjb25zdHJ1Y3RvcjogZChNYXBQb2x5KVxuXHR9KTtcbn1cblxuZWUoZGVmaW5lUHJvcGVydGllcyhNYXBQb2x5LnByb3RvdHlwZSwge1xuXHRjbGVhcjogZChmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLl9fbWFwS2V5c0RhdGFfXy5sZW5ndGgpIHJldHVybjtcblx0XHRjbGVhci5jYWxsKHRoaXMuX19tYXBLZXlzRGF0YV9fKTtcblx0XHRjbGVhci5jYWxsKHRoaXMuX19tYXBWYWx1ZXNEYXRhX18pO1xuXHRcdHRoaXMuZW1pdCgnX2NsZWFyJyk7XG5cdH0pLFxuXHRkZWxldGU6IGQoZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciBpbmRleCA9IGVJbmRleE9mLmNhbGwodGhpcy5fX21hcEtleXNEYXRhX18sIGtleSk7XG5cdFx0aWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXHRcdHRoaXMuX19tYXBLZXlzRGF0YV9fLnNwbGljZShpbmRleCwgMSk7XG5cdFx0dGhpcy5fX21hcFZhbHVlc0RhdGFfXy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdHRoaXMuZW1pdCgnX2RlbGV0ZScsIGluZGV4LCBrZXkpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9KSxcblx0ZW50cmllczogZChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3IodGhpcywgJ2tleSt2YWx1ZScpOyB9KSxcblx0Zm9yRWFjaDogZChmdW5jdGlvbiAoY2IvKiwgdGhpc0FyZyovKSB7XG5cdFx0dmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV0sIGl0ZXJhdG9yLCByZXN1bHQ7XG5cdFx0Y2FsbGFibGUoY2IpO1xuXHRcdGl0ZXJhdG9yID0gdGhpcy5lbnRyaWVzKCk7XG5cdFx0cmVzdWx0ID0gaXRlcmF0b3IuX25leHQoKTtcblx0XHR3aGlsZSAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNhbGwuY2FsbChjYiwgdGhpc0FyZywgdGhpcy5fX21hcFZhbHVlc0RhdGFfX1tyZXN1bHRdLFxuXHRcdFx0XHR0aGlzLl9fbWFwS2V5c0RhdGFfX1tyZXN1bHRdLCB0aGlzKTtcblx0XHRcdHJlc3VsdCA9IGl0ZXJhdG9yLl9uZXh0KCk7XG5cdFx0fVxuXHR9KSxcblx0Z2V0OiBkKGZ1bmN0aW9uIChrZXkpIHtcblx0XHR2YXIgaW5kZXggPSBlSW5kZXhPZi5jYWxsKHRoaXMuX19tYXBLZXlzRGF0YV9fLCBrZXkpO1xuXHRcdGlmIChpbmRleCA9PT0gLTEpIHJldHVybjtcblx0XHRyZXR1cm4gdGhpcy5fX21hcFZhbHVlc0RhdGFfX1tpbmRleF07XG5cdH0pLFxuXHRoYXM6IGQoZnVuY3Rpb24gKGtleSkge1xuXHRcdHJldHVybiAoZUluZGV4T2YuY2FsbCh0aGlzLl9fbWFwS2V5c0RhdGFfXywga2V5KSAhPT0gLTEpO1xuXHR9KSxcblx0a2V5czogZChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3IodGhpcywgJ2tleScpOyB9KSxcblx0c2V0OiBkKGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0dmFyIGluZGV4ID0gZUluZGV4T2YuY2FsbCh0aGlzLl9fbWFwS2V5c0RhdGFfXywga2V5KSwgZW1pdDtcblx0XHRpZiAoaW5kZXggPT09IC0xKSB7XG5cdFx0XHRpbmRleCA9IHRoaXMuX19tYXBLZXlzRGF0YV9fLnB1c2goa2V5KSAtIDE7XG5cdFx0XHRlbWl0ID0gdHJ1ZTtcblx0XHR9XG5cdFx0dGhpcy5fX21hcFZhbHVlc0RhdGFfX1tpbmRleF0gPSB2YWx1ZTtcblx0XHRpZiAoZW1pdCkgdGhpcy5lbWl0KCdfYWRkJywgaW5kZXgsIGtleSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0pLFxuXHRzaXplOiBkLmdzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX19tYXBLZXlzRGF0YV9fLmxlbmd0aDsgfSksXG5cdHZhbHVlczogZChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3IodGhpcywgJ3ZhbHVlJyk7IH0pLFxuXHR0b1N0cmluZzogZChmdW5jdGlvbiAoKSB7IHJldHVybiAnW29iamVjdCBNYXBdJzsgfSlcbn0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXBQb2x5LnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCBkKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuZW50cmllcygpO1xufSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcFBvbHkucHJvdG90eXBlLCBTeW1ib2wudG9TdHJpbmdUYWcsIGQoJ2MnLCAnTWFwJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2VzNi1tYXAvcG9seWZpbGwuanNcbi8vIG1vZHVsZSBpZCA9IDExMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB2YWxpZFR5cGVzID0geyBvYmplY3Q6IHRydWUsIHN5bWJvbDogdHJ1ZSB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHN5bWJvbDtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblx0c3ltYm9sID0gU3ltYm9sKCd0ZXN0IHN5bWJvbCcpO1xuXHR0cnkgeyBTdHJpbmcoc3ltYm9sKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBSZXR1cm4gJ3RydWUnIGFsc28gZm9yIHBvbHlmaWxsc1xuXHRpZiAoIXZhbGlkVHlwZXNbdHlwZW9mIFN5bWJvbC5pdGVyYXRvcl0pIHJldHVybiBmYWxzZTtcblx0aWYgKCF2YWxpZFR5cGVzW3R5cGVvZiBTeW1ib2wudG9QcmltaXRpdmVdKSByZXR1cm4gZmFsc2U7XG5cdGlmICghdmFsaWRUeXBlc1t0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnXSkgcmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiB0cnVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtc3ltYm9sL2lzLWltcGxlbWVudGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4KSB7XG5cdGlmICgheCkgcmV0dXJuIGZhbHNlO1xuXHRpZiAodHlwZW9mIHggPT09ICdzeW1ib2wnKSByZXR1cm4gdHJ1ZTtcblx0aWYgKCF4LmNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2U7XG5cdGlmICh4LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdTeW1ib2wnKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiAoeFt4LmNvbnN0cnVjdG9yLnRvU3RyaW5nVGFnXSA9PT0gJ1N5bWJvbCcpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtc3ltYm9sL2lzLXN5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMTEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEVTMjAxNSBTeW1ib2wgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0IChvciBwYXJ0aWFsbHkgc3VwcG9ydCBpdClcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZCAgICAgICAgICAgICAgPSByZXF1aXJlKCdkJylcbiAgLCB2YWxpZGF0ZVN5bWJvbCA9IHJlcXVpcmUoJy4vdmFsaWRhdGUtc3ltYm9sJylcblxuICAsIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsIGRlZmluZVByb3BlcnRpZXMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllc1xuICAsIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBvYmpQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlXG4gICwgTmF0aXZlU3ltYm9sLCBTeW1ib2xQb2x5ZmlsbCwgSGlkZGVuU3ltYm9sLCBnbG9iYWxTeW1ib2xzID0gY3JlYXRlKG51bGwpXG4gICwgaXNOYXRpdmVTYWZlO1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHROYXRpdmVTeW1ib2wgPSBTeW1ib2w7XG5cdHRyeSB7XG5cdFx0U3RyaW5nKE5hdGl2ZVN5bWJvbCgpKTtcblx0XHRpc05hdGl2ZVNhZmUgPSB0cnVlO1xuXHR9IGNhdGNoIChpZ25vcmUpIHt9XG59XG5cbnZhciBnZW5lcmF0ZU5hbWUgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgY3JlYXRlZCA9IGNyZWF0ZShudWxsKTtcblx0cmV0dXJuIGZ1bmN0aW9uIChkZXNjKSB7XG5cdFx0dmFyIHBvc3RmaXggPSAwLCBuYW1lLCBpZTExQnVnV29ya2Fyb3VuZDtcblx0XHR3aGlsZSAoY3JlYXRlZFtkZXNjICsgKHBvc3RmaXggfHwgJycpXSkgKytwb3N0Zml4O1xuXHRcdGRlc2MgKz0gKHBvc3RmaXggfHwgJycpO1xuXHRcdGNyZWF0ZWRbZGVzY10gPSB0cnVlO1xuXHRcdG5hbWUgPSAnQEAnICsgZGVzYztcblx0XHRkZWZpbmVQcm9wZXJ0eShvYmpQcm90b3R5cGUsIG5hbWUsIGQuZ3MobnVsbCwgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHQvLyBGb3IgSUUxMSBpc3N1ZSBzZWU6XG5cdFx0XHQvLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFja2RldGFpbC92aWV3LzE5Mjg1MDgvXG5cdFx0XHQvLyAgICBpZTExLWJyb2tlbi1nZXR0ZXJzLW9uLWRvbS1vYmplY3RzXG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWtvby9lczYtc3ltYm9sL2lzc3Vlcy8xMlxuXHRcdFx0aWYgKGllMTFCdWdXb3JrYXJvdW5kKSByZXR1cm47XG5cdFx0XHRpZTExQnVnV29ya2Fyb3VuZCA9IHRydWU7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCBuYW1lLCBkKHZhbHVlKSk7XG5cdFx0XHRpZTExQnVnV29ya2Fyb3VuZCA9IGZhbHNlO1xuXHRcdH0pKTtcblx0XHRyZXR1cm4gbmFtZTtcblx0fTtcbn0oKSk7XG5cbi8vIEludGVybmFsIGNvbnN0cnVjdG9yIChub3Qgb25lIGV4cG9zZWQpIGZvciBjcmVhdGluZyBTeW1ib2wgaW5zdGFuY2VzLlxuLy8gVGhpcyBvbmUgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCBgc29tZVN5bWJvbCBpbnN0YW5jZW9mIFN5bWJvbGAgYWx3YXlzIHJldHVybiBmYWxzZVxuSGlkZGVuU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKGRlc2NyaXB0aW9uKSB7XG5cdGlmICh0aGlzIGluc3RhbmNlb2YgSGlkZGVuU3ltYm9sKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdUeXBlRXJyb3I6IFN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuXHRyZXR1cm4gU3ltYm9sUG9seWZpbGwoZGVzY3JpcHRpb24pO1xufTtcblxuLy8gRXhwb3NlZCBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gKHJldHVybnMgaW5zdGFuY2VzIG9mIEhpZGRlblN5bWJvbClcbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sUG9seWZpbGwgPSBmdW5jdGlvbiBTeW1ib2woZGVzY3JpcHRpb24pIHtcblx0dmFyIHN5bWJvbDtcblx0aWYgKHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1R5cGVFcnJvcjogU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG5cdGlmIChpc05hdGl2ZVNhZmUpIHJldHVybiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuXHRzeW1ib2wgPSBjcmVhdGUoSGlkZGVuU3ltYm9sLnByb3RvdHlwZSk7XG5cdGRlc2NyaXB0aW9uID0gKGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhkZXNjcmlwdGlvbikpO1xuXHRyZXR1cm4gZGVmaW5lUHJvcGVydGllcyhzeW1ib2wsIHtcblx0XHRfX2Rlc2NyaXB0aW9uX186IGQoJycsIGRlc2NyaXB0aW9uKSxcblx0XHRfX25hbWVfXzogZCgnJywgZ2VuZXJhdGVOYW1lKGRlc2NyaXB0aW9uKSlcblx0fSk7XG59O1xuZGVmaW5lUHJvcGVydGllcyhTeW1ib2xQb2x5ZmlsbCwge1xuXHRmb3I6IGQoZnVuY3Rpb24gKGtleSkge1xuXHRcdGlmIChnbG9iYWxTeW1ib2xzW2tleV0pIHJldHVybiBnbG9iYWxTeW1ib2xzW2tleV07XG5cdFx0cmV0dXJuIChnbG9iYWxTeW1ib2xzW2tleV0gPSBTeW1ib2xQb2x5ZmlsbChTdHJpbmcoa2V5KSkpO1xuXHR9KSxcblx0a2V5Rm9yOiBkKGZ1bmN0aW9uIChzKSB7XG5cdFx0dmFyIGtleTtcblx0XHR2YWxpZGF0ZVN5bWJvbChzKTtcblx0XHRmb3IgKGtleSBpbiBnbG9iYWxTeW1ib2xzKSBpZiAoZ2xvYmFsU3ltYm9sc1trZXldID09PSBzKSByZXR1cm4ga2V5O1xuXHR9KSxcblxuXHQvLyBJZiB0aGVyZSdzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZiBnaXZlbiBzeW1ib2wsIGxldCdzIGZhbGxiYWNrIHRvIGl0XG5cdC8vIHRvIGVuc3VyZSBwcm9wZXIgaW50ZXJvcGVyYWJpbGl0eSB3aXRoIG90aGVyIG5hdGl2ZSBmdW5jdGlvbnMgZS5nLiBBcnJheS5mcm9tXG5cdGhhc0luc3RhbmNlOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5oYXNJbnN0YW5jZSkgfHwgU3ltYm9sUG9seWZpbGwoJ2hhc0luc3RhbmNlJykpLFxuXHRpc0NvbmNhdFNwcmVhZGFibGU6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSkgfHxcblx0XHRTeW1ib2xQb2x5ZmlsbCgnaXNDb25jYXRTcHJlYWRhYmxlJykpLFxuXHRpdGVyYXRvcjogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuaXRlcmF0b3IpIHx8IFN5bWJvbFBvbHlmaWxsKCdpdGVyYXRvcicpKSxcblx0bWF0Y2g6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLm1hdGNoKSB8fCBTeW1ib2xQb2x5ZmlsbCgnbWF0Y2gnKSksXG5cdHJlcGxhY2U6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnJlcGxhY2UpIHx8IFN5bWJvbFBvbHlmaWxsKCdyZXBsYWNlJykpLFxuXHRzZWFyY2g6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnNlYXJjaCkgfHwgU3ltYm9sUG9seWZpbGwoJ3NlYXJjaCcpKSxcblx0c3BlY2llczogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wuc3BlY2llcykgfHwgU3ltYm9sUG9seWZpbGwoJ3NwZWNpZXMnKSksXG5cdHNwbGl0OiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5zcGxpdCkgfHwgU3ltYm9sUG9seWZpbGwoJ3NwbGl0JykpLFxuXHR0b1ByaW1pdGl2ZTogZCgnJywgKE5hdGl2ZVN5bWJvbCAmJiBOYXRpdmVTeW1ib2wudG9QcmltaXRpdmUpIHx8IFN5bWJvbFBvbHlmaWxsKCd0b1ByaW1pdGl2ZScpKSxcblx0dG9TdHJpbmdUYWc6IGQoJycsIChOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnRvU3RyaW5nVGFnKSB8fCBTeW1ib2xQb2x5ZmlsbCgndG9TdHJpbmdUYWcnKSksXG5cdHVuc2NvcGFibGVzOiBkKCcnLCAoTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC51bnNjb3BhYmxlcykgfHwgU3ltYm9sUG9seWZpbGwoJ3Vuc2NvcGFibGVzJykpXG59KTtcblxuLy8gSW50ZXJuYWwgdHdlYWtzIGZvciByZWFsIHN5bWJvbCBwcm9kdWNlclxuZGVmaW5lUHJvcGVydGllcyhIaWRkZW5TeW1ib2wucHJvdG90eXBlLCB7XG5cdGNvbnN0cnVjdG9yOiBkKFN5bWJvbFBvbHlmaWxsKSxcblx0dG9TdHJpbmc6IGQoJycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX19uYW1lX187IH0pXG59KTtcblxuLy8gUHJvcGVyIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgZXhwb3NlZCBvbiBTeW1ib2wucHJvdG90eXBlXG4vLyBUaGV5IHdvbid0IGJlIGFjY2Vzc2libGUgb24gcHJvZHVjZWQgc3ltYm9sIGluc3RhbmNlcyBhcyB0aGV5IGRlcml2ZSBmcm9tIEhpZGRlblN5bWJvbC5wcm90b3R5cGVcbmRlZmluZVByb3BlcnRpZXMoU3ltYm9sUG9seWZpbGwucHJvdG90eXBlLCB7XG5cdHRvU3RyaW5nOiBkKGZ1bmN0aW9uICgpIHsgcmV0dXJuICdTeW1ib2wgKCcgKyB2YWxpZGF0ZVN5bWJvbCh0aGlzKS5fX2Rlc2NyaXB0aW9uX18gKyAnKSc7IH0pLFxuXHR2YWx1ZU9mOiBkKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlU3ltYm9sKHRoaXMpOyB9KVxufSk7XG5kZWZpbmVQcm9wZXJ0eShTeW1ib2xQb2x5ZmlsbC5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvUHJpbWl0aXZlLCBkKCcnLCBmdW5jdGlvbiAoKSB7XG5cdHZhciBzeW1ib2wgPSB2YWxpZGF0ZVN5bWJvbCh0aGlzKTtcblx0aWYgKHR5cGVvZiBzeW1ib2wgPT09ICdzeW1ib2wnKSByZXR1cm4gc3ltYm9sO1xuXHRyZXR1cm4gc3ltYm9sLnRvU3RyaW5nKCk7XG59KSk7XG5kZWZpbmVQcm9wZXJ0eShTeW1ib2xQb2x5ZmlsbC5wcm90b3R5cGUsIFN5bWJvbFBvbHlmaWxsLnRvU3RyaW5nVGFnLCBkKCdjJywgJ1N5bWJvbCcpKTtcblxuLy8gUHJvcGVyIGltcGxlbWVudGF0b24gb2YgdG9QcmltaXRpdmUgYW5kIHRvU3RyaW5nVGFnIGZvciByZXR1cm5lZCBzeW1ib2wgaW5zdGFuY2VzXG5kZWZpbmVQcm9wZXJ0eShIaWRkZW5TeW1ib2wucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZyxcblx0ZCgnYycsIFN5bWJvbFBvbHlmaWxsLnByb3RvdHlwZVtTeW1ib2xQb2x5ZmlsbC50b1N0cmluZ1RhZ10pKTtcblxuLy8gTm90ZTogSXQncyBpbXBvcnRhbnQgdG8gZGVmaW5lIGB0b1ByaW1pdGl2ZWAgYXMgbGFzdCBvbmUsIGFzIHNvbWUgaW1wbGVtZW50YXRpb25zXG4vLyBpbXBsZW1lbnQgYHRvUHJpbWl0aXZlYCBuYXRpdmVseSB3aXRob3V0IGltcGxlbWVudGluZyBgdG9TdHJpbmdUYWdgIChvciBvdGhlciBzcGVjaWZpZWQgc3ltYm9scylcbi8vIEFuZCB0aGF0IG1heSBpbnZva2UgZXJyb3IgaW4gZGVmaW5pdGlvbiBmbG93OlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbWVkaWtvby9lczYtc3ltYm9sL2lzc3Vlcy8xMyNpc3N1ZWNvbW1lbnQtMTY0MTQ2MTQ5XG5kZWZpbmVQcm9wZXJ0eShIaWRkZW5TeW1ib2wucHJvdG90eXBlLCBTeW1ib2xQb2x5ZmlsbC50b1ByaW1pdGl2ZSxcblx0ZCgnYycsIFN5bWJvbFBvbHlmaWxsLnByb3RvdHlwZVtTeW1ib2xQb2x5ZmlsbC50b1ByaW1pdGl2ZV0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtc3ltYm9sL3BvbHlmaWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRpZiAoIWlzU3ltYm9sKHZhbHVlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcih2YWx1ZSArIFwiIGlzIG5vdCBhIHN5bWJvbFwiKTtcblx0cmV0dXJuIHZhbHVlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9lczYtc3ltYm9sL3ZhbGlkYXRlLXN5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGQgICAgICAgID0gcmVxdWlyZSgnZCcpXG4gICwgY2FsbGFibGUgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZScpXG5cbiAgLCBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSwgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsXG4gICwgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSwgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgLCBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXNcbiAgLCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBkZXNjcmlwdG9yID0geyBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSB9XG5cbiAgLCBvbiwgb25jZSwgb2ZmLCBlbWl0LCBtZXRob2RzLCBkZXNjcmlwdG9ycywgYmFzZTtcblxub24gPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcblx0dmFyIGRhdGE7XG5cblx0Y2FsbGFibGUobGlzdGVuZXIpO1xuXG5cdGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX19lZV9fJykpIHtcblx0XHRkYXRhID0gZGVzY3JpcHRvci52YWx1ZSA9IGNyZWF0ZShudWxsKTtcblx0XHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19lZV9fJywgZGVzY3JpcHRvcik7XG5cdFx0ZGVzY3JpcHRvci52YWx1ZSA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0ZGF0YSA9IHRoaXMuX19lZV9fO1xuXHR9XG5cdGlmICghZGF0YVt0eXBlXSkgZGF0YVt0eXBlXSA9IGxpc3RlbmVyO1xuXHRlbHNlIGlmICh0eXBlb2YgZGF0YVt0eXBlXSA9PT0gJ29iamVjdCcpIGRhdGFbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG5cdGVsc2UgZGF0YVt0eXBlXSA9IFtkYXRhW3R5cGVdLCBsaXN0ZW5lcl07XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG5cdHZhciBvbmNlLCBzZWxmO1xuXG5cdGNhbGxhYmxlKGxpc3RlbmVyKTtcblx0c2VsZiA9IHRoaXM7XG5cdG9uLmNhbGwodGhpcywgdHlwZSwgb25jZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRvZmYuY2FsbChzZWxmLCB0eXBlLCBvbmNlKTtcblx0XHRhcHBseS5jYWxsKGxpc3RlbmVyLCB0aGlzLCBhcmd1bWVudHMpO1xuXHR9KTtcblxuXHRvbmNlLl9fZWVPbmNlTGlzdGVuZXJfXyA9IGxpc3RlbmVyO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuXHR2YXIgZGF0YSwgbGlzdGVuZXJzLCBjYW5kaWRhdGUsIGk7XG5cblx0Y2FsbGFibGUobGlzdGVuZXIpO1xuXG5cdGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX19lZV9fJykpIHJldHVybiB0aGlzO1xuXHRkYXRhID0gdGhpcy5fX2VlX187XG5cdGlmICghZGF0YVt0eXBlXSkgcmV0dXJuIHRoaXM7XG5cdGxpc3RlbmVycyA9IGRhdGFbdHlwZV07XG5cblx0aWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdvYmplY3QnKSB7XG5cdFx0Zm9yIChpID0gMDsgKGNhbmRpZGF0ZSA9IGxpc3RlbmVyc1tpXSk7ICsraSkge1xuXHRcdFx0aWYgKChjYW5kaWRhdGUgPT09IGxpc3RlbmVyKSB8fFxuXHRcdFx0XHRcdChjYW5kaWRhdGUuX19lZU9uY2VMaXN0ZW5lcl9fID09PSBsaXN0ZW5lcikpIHtcblx0XHRcdFx0aWYgKGxpc3RlbmVycy5sZW5ndGggPT09IDIpIGRhdGFbdHlwZV0gPSBsaXN0ZW5lcnNbaSA/IDAgOiAxXTtcblx0XHRcdFx0ZWxzZSBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRpZiAoKGxpc3RlbmVycyA9PT0gbGlzdGVuZXIpIHx8XG5cdFx0XHRcdChsaXN0ZW5lcnMuX19lZU9uY2VMaXN0ZW5lcl9fID09PSBsaXN0ZW5lcikpIHtcblx0XHRcdGRlbGV0ZSBkYXRhW3R5cGVdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuZW1pdCA9IGZ1bmN0aW9uICh0eXBlKSB7XG5cdHZhciBpLCBsLCBsaXN0ZW5lciwgbGlzdGVuZXJzLCBhcmdzO1xuXG5cdGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX19lZV9fJykpIHJldHVybjtcblx0bGlzdGVuZXJzID0gdGhpcy5fX2VlX19bdHlwZV07XG5cdGlmICghbGlzdGVuZXJzKSByZXR1cm47XG5cblx0aWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdvYmplY3QnKSB7XG5cdFx0bCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0YXJncyA9IG5ldyBBcnJheShsIC0gMSk7XG5cdFx0Zm9yIChpID0gMTsgaSA8IGw7ICsraSkgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cblx0XHRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTtcblx0XHRmb3IgKGkgPSAwOyAobGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV0pOyArK2kpIHtcblx0XHRcdGFwcGx5LmNhbGwobGlzdGVuZXIsIHRoaXMsIGFyZ3MpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRjYXNlIDE6XG5cdFx0XHRjYWxsLmNhbGwobGlzdGVuZXJzLCB0aGlzKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdGNhbGwuY2FsbChsaXN0ZW5lcnMsIHRoaXMsIGFyZ3VtZW50c1sxXSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDM6XG5cdFx0XHRjYWxsLmNhbGwobGlzdGVuZXJzLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0bCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KGwgLSAxKTtcblx0XHRcdGZvciAoaSA9IDE7IGkgPCBsOyArK2kpIHtcblx0XHRcdFx0YXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cdFx0XHR9XG5cdFx0XHRhcHBseS5jYWxsKGxpc3RlbmVycywgdGhpcywgYXJncyk7XG5cdFx0fVxuXHR9XG59O1xuXG5tZXRob2RzID0ge1xuXHRvbjogb24sXG5cdG9uY2U6IG9uY2UsXG5cdG9mZjogb2ZmLFxuXHRlbWl0OiBlbWl0XG59O1xuXG5kZXNjcmlwdG9ycyA9IHtcblx0b246IGQob24pLFxuXHRvbmNlOiBkKG9uY2UpLFxuXHRvZmY6IGQob2ZmKSxcblx0ZW1pdDogZChlbWl0KVxufTtcblxuYmFzZSA9IGRlZmluZVByb3BlcnRpZXMoe30sIGRlc2NyaXB0b3JzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZnVuY3Rpb24gKG8pIHtcblx0cmV0dXJuIChvID09IG51bGwpID8gY3JlYXRlKGJhc2UpIDogZGVmaW5lUHJvcGVydGllcyhPYmplY3QobyksIGRlc2NyaXB0b3JzKTtcbn07XG5leHBvcnRzLm1ldGhvZHMgPSBtZXRob2RzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2V2ZW50LWVtaXR0ZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDExNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21qYWNrc29uL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgIV9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0hpc3RvcnkpKCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICEoMCwgX0RPTVV0aWxzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UpKCk7XG5cbiAgdmFyIF9wcm9wcyRiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lLFxuICAgICAgYmFzZW5hbWUgPSBfcHJvcHMkYmFzZW5hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3Byb3BzJGJhc2VuYW1lLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcFByZWZpeCkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGtleVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoKDAsIF9ET01VdGlscy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KShldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgcmV0dXJuIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcm93c2VySGlzdG9yeTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICFfRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCkoKTtcblxuICB2YXIgX3Byb3BzJGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUsXG4gICAgICBiYXNlbmFtZSA9IF9wcm9wcyRiYXNlbmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcHJvcHMkYmFzZW5hbWUsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gX0RPTVV0aWxzLmdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcFByZWZpeCkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHJldHVybiB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlSGFzaEhpc3Rvcnk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGluZGV4ID8gY3JlYXRlS2V5KCkgOiB1bmRlZmluZWQpIDogKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBpbmRleCA/IGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IF9QYXRoVXRpbHMuY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlTWVtb3J5SGlzdG9yeTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jcmVhdGVQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGV4cG9ydHMuY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGV4cG9ydHMuY3JlYXRlSGFzaEhpc3RvcnkgPSBleHBvcnRzLmNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gdW5kZWZpbmVkO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVMb2NhdGlvbicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnbG9jYXRpb25zQXJlRXF1YWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbDtcbiAgfVxufSk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwYXJzZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLnBhcnNlUGF0aDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlQnJvd3Nlckhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVCcm93c2VySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVCcm93c2VySGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZUhhc2hIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlSGFzaEhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIYXNoSGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBfY3JlYXRlQnJvd3Nlckhpc3RvcnkzLmRlZmF1bHQ7XG5leHBvcnRzLmNyZWF0ZUhhc2hIaXN0b3J5ID0gX2NyZWF0ZUhhc2hIaXN0b3J5My5kZWZhdWx0O1xuZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5ID0gX2NyZWF0ZU1lbW9yeUhpc3RvcnkzLmRlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2hpc3RvcnkvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbnZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG52YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmXFxcXHVmZTIwLVxcXFx1ZmUyMycsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGYwJyxcbiAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9NYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSArICddJyxcbiAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJzTG93ZXJNaXNjID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgIHJzVXBwZXJNaXNjID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgIHJzT3B0TG93ZXJDb250ciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgIHJzT3B0VXBwZXJDb250ciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxO1xuXG4vKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbnZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gKi9cbnZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xudmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0TG93ZXJDb250ciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyTWlzYyArICcrJyArIHJzT3B0VXBwZXJDb250ciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc0xvd2VyTWlzYywgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyTWlzYyArICcrJyArIHJzT3B0TG93ZXJDb250cixcbiAgcnNVcHBlciArICcrJyArIHJzT3B0VXBwZXJDb250cixcbiAgcnNEaWdpdHMsXG4gIHJzRW1vamlcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG52YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezIsfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xudmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICdcXHhkZic6ICdzcycsXG4gIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzcydcbn07XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxuLyoqXG4gKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICovXG5mdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG4vKipcbiAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gKi9cbnZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbn1cblxuLyoqXG4gKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICogLy8gPT4gJ2RlamEgdnUnXG4gKi9cbmZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gKiAvLyA9PiAnZm9vLWJhcidcbiAqXG4gKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gKiAvLyA9PiAnZm9vLWJhcidcbiAqXG4gKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAqIC8vID0+ICdmb28tYmFyJ1xuICovXG52YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG59KTtcblxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAqL1xuZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2ViYWJDYXNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC5rZWJhYmNhc2UvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY29tcGFyaXNvbiBzdHlsZXMuICovXG52YXIgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyA9IDEsXG4gICAgUEFSVElBTF9DT01QQVJFX0ZMQUcgPSAyO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgIHJlTGVhZGluZ0RvdCA9IC9eXFwuLyxcbiAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCBpbiBJRSA8IDkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0hvc3RPYmplY3QodmFsdWUpIHtcbiAgLy8gTWFueSBob3N0IG9iamVjdHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3NcbiAgLy8gZGVzcGl0ZSBoYXZpbmcgaW1wcm9wZXJseSBkZWZpbmVkIGB0b1N0cmluZ2AgbWV0aG9kcy5cbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSAhISh2YWx1ZSArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbCxcbiAgICBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5LFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpLFxuICAgIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpLFxuICAgIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0JyksXG4gICAgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfX1snZGVsZXRlJ10oa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBjYWNoZSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChjYWNoZSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGNhY2hlLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjYWNoZSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGNhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgLy8gU2FmYXJpIDguMSBtYWtlcyBgYXJndW1lbnRzLmNhbGxlZWAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgLy8gU2FmYXJpIDkgbWFrZXMgYGFyZ3VtZW50cy5sZW5ndGhgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHZhciByZXN1bHQgPSAoaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKVxuICAgID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKVxuICAgIDogW107XG5cbiAgdmFyIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGgsXG4gICAgICBza2lwSW5kZXhlcyA9ICEhbGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKGtleSA9PSAnbGVuZ3RoJyB8fCBpc0luZGV4KGtleSwgbGVuZ3RoKSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGlzS2V5KHBhdGgsIG9iamVjdCkgPyBbcGF0aF0gOiBjYXN0UGF0aChwYXRoKTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtiaXRtYXNrXSBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLlxuICogIFRoZSBiaXRtYXNrIG1heSBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGZsYWdzOlxuICogICAgIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogICAgIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0KHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYmFzZUlzRXF1YWwsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYml0bWFza10gVGhlIGJpdG1hc2sgb2YgY29tcGFyaXNvbiBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGBcbiAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBhcnJheVRhZyxcbiAgICAgIG90aFRhZyA9IGFycmF5VGFnO1xuXG4gIGlmICghb2JqSXNBcnIpIHtcbiAgICBvYmpUYWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgfVxuICBpZiAoIW90aElzQXJyKSB7XG4gICAgb3RoVGFnID0gZ2V0VGFnKG90aGVyKTtcbiAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcbiAgfVxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnICYmICFpc0hvc3RPYmplY3Qob2JqZWN0KSxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyAmJiAhaXNIb3N0T2JqZWN0KG90aGVyKSxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgY3VzdG9taXplciwgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyB8IFBBUlRJQUxfQ09NUEFSRV9GTEFHLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSldO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCB1bmRlZmluZWQsIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcgfCBQQVJUSUFMX0NPTVBBUkVfRkxBRyk7XG4gIH07XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIWlzS2V5KGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgdmFyIHBhdGggPSBjYXN0UGF0aChpbmRleCksXG4gICAgICAgICAgICBvYmplY3QgPSBwYXJlbnQoYXJyYXksIHBhdGgpO1xuXG4gICAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICAgIGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGFycmF5W3RvS2V5KGluZGV4KV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICB9XG4gIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuZ3RoO1xuICB9XG4gIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgc3RhcnQgPj4+PSAwO1xuXG4gIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBzdHJpbmdUb1BhdGgodmFsdWUpO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgXG4gKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIFBBUlRJQUxfQ09NUEFSRV9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBVTk9SREVSRURfQ09NUEFSRV9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIXNlZW4uaGFzKG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5hZGQob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYFxuICogIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBVTk9SREVSRURfQ09NUEFSRV9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIG9mIGNvbXBhcmlzb24gZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgXG4gKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRyxcbiAgICAgIG9ialByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBrZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEsXG4vLyBmb3IgZGF0YSB2aWV3cyBpbiBFZGdlIDwgMTQsIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzLlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBpc0tleShwYXRoLCBvYmplY3QpID8gW3BhdGhdIDogY2FzdFBhdGgocGF0aCk7XG5cbiAgdmFyIHJlc3VsdCxcbiAgICAgIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IG9iamVjdCA/IG9iamVjdC5sZW5ndGggOiAwO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoID09IDEgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemUoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAocmVMZWFkaW5nRG90LnRlc3Qoc3RyaW5nKSkge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldXG4gKiAgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICogfSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXkpO1xuICogLy8gPT4gWzEsIDNdXG4gKlxuICogY29uc29sZS5sb2coZXZlbnMpO1xuICogLy8gPT4gWzIsIDRdXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBpbmRleGVzID0gW10sXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgcHJlZGljYXRlID0gYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgfVxuICB9XG4gIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEFzc2lnbiBjYWNoZSB0byBgXy5tZW1vaXplYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gucmVtb3ZlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIGlmICh2YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCBpbiBJRSA8IDkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0hvc3RPYmplY3QodmFsdWUpIHtcbiAgLy8gTWFueSBob3N0IG9iamVjdHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3NcbiAgLy8gZGVzcGl0ZSBoYXZpbmcgaW1wcm9wZXJseSBkZWZpbmVkIGB0b1N0cmluZ2AgbWV0aG9kcy5cbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSAhISh2YWx1ZSArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICByZXR1cm4gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLnNldChrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA/IHZhbHVlcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gKGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICByZXN1bHQgPSBbXSxcbiAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gIH1cbiAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICBpZiAoc2V0KSB7XG4gICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgIH1cbiAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgfVxuICBlbHNlIHtcbiAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgfVxuICBvdXRlcjpcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gKi9cbnZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaFxuICogZWxlbWVudCBpcyBrZXB0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlxKFsyLCAxLCAyXSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqL1xuZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICA/IGJhc2VVbmlxKGFycmF5KVxuICAgIDogW107XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLm5vb3ApO1xuICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICovXG5mdW5jdGlvbiBub29wKCkge1xuICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaXE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoLnVuaXEvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L29iamVjdC1hc3NpZ24vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0LUVzY2gvdmlydHVhbC1kb20vYmxvYi9tYXN0ZXIvdmlydHVhbC1oeXBlcnNjcmlwdC9wYXJzZS10YWcuanNcblxudmFyIHNwbGl0ID0gcmVxdWlyZSgnYnJvd3Nlci1zcGxpdCcpXG5cbnZhciBjbGFzc0lkU3BsaXQgPSAvKFtcXC4jXT9bYS16QS1aMC05XFx1MDA3Ri1cXHVGRkZGXzotXSspL1xudmFyIG5vdENsYXNzSWQgPSAvXlxcLnwjL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlU2VsZWN0b3IgKHNlbGVjdG9yLCB1cHBlcikge1xuICBzZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcnXG4gIHZhciB0YWdOYW1lXG4gIHZhciBpZCA9ICcnXG4gIHZhciBjbGFzc2VzID0gW11cblxuICB2YXIgdGFnUGFydHMgPSBzcGxpdChzZWxlY3RvciwgY2xhc3NJZFNwbGl0KVxuXG4gIGlmIChub3RDbGFzc0lkLnRlc3QodGFnUGFydHNbMV0pIHx8IHNlbGVjdG9yID09PSAnJykge1xuICAgIHRhZ05hbWUgPSAnZGl2J1xuICB9XG5cbiAgdmFyIHBhcnQsIHR5cGUsIGlcblxuICBmb3IgKGkgPSAwOyBpIDwgdGFnUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0ID0gdGFnUGFydHNbaV1cblxuICAgIGlmICghcGFydCkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB0eXBlID0gcGFydC5jaGFyQXQoMClcblxuICAgIGlmICghdGFnTmFtZSkge1xuICAgICAgdGFnTmFtZSA9IHBhcnRcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICcuJykge1xuICAgICAgY2xhc3Nlcy5wdXNoKHBhcnQuc3Vic3RyaW5nKDEsIHBhcnQubGVuZ3RoKSlcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICcjJykge1xuICAgICAgaWQgPSBwYXJ0LnN1YnN0cmluZygxLCBwYXJ0Lmxlbmd0aClcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRhZ05hbWU6IHVwcGVyID09PSB0cnVlID8gdGFnTmFtZS50b1VwcGVyQ2FzZSgpIDogdGFnTmFtZSxcbiAgICBpZDogaWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmpvaW4oJyAnKVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcGFyc2Utc2VsL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG52YXIgc3BsaWNlT25lID0gZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9bGlzdC5wb3AoKTtcbn07XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG52YXIgcmVzb2x2ZVBhdGhuYW1lID0gZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gJycgOiBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlUGF0aG5hbWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBzZWxlY3RvclBhcnNlcl8xID0gcmVxdWlyZSgnLi9zZWxlY3RvclBhcnNlcicpO1xuZnVuY3Rpb24gY2xhc3NOYW1lRnJvbVZOb2RlKHZOb2RlKSB7XG4gICAgdmFyIF9hID0gc2VsZWN0b3JQYXJzZXJfMS5zZWxlY3RvclBhcnNlcih2Tm9kZSkuY2xhc3NOYW1lLCBjbiA9IF9hID09PSB2b2lkIDAgPyAnJyA6IF9hO1xuICAgIGlmICghdk5vZGUuZGF0YSkge1xuICAgICAgICByZXR1cm4gY247XG4gICAgfVxuICAgIHZhciBfYiA9IHZOb2RlLmRhdGEsIGRhdGFDbGFzcyA9IF9iLmNsYXNzLCBwcm9wcyA9IF9iLnByb3BzO1xuICAgIGlmIChkYXRhQ2xhc3MpIHtcbiAgICAgICAgdmFyIGMgPSBPYmplY3Qua2V5cyhkYXRhQ2xhc3MpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChjbCkgeyByZXR1cm4gZGF0YUNsYXNzW2NsXTsgfSk7XG4gICAgICAgIGNuICs9IFwiIFwiICsgYy5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgaWYgKHByb3BzICYmIHByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgICBjbiArPSBcIiBcIiArIHByb3BzLmNsYXNzTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNuICYmIGNuLnRyaW0oKTtcbn1cbmV4cG9ydHMuY2xhc3NOYW1lRnJvbVZOb2RlID0gY2xhc3NOYW1lRnJvbVZOb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xhc3NOYW1lRnJvbVZOb2RlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS1zZWxlY3Rvci9saWIvY29tbW9uanMvY2xhc3NOYW1lRnJvbVZOb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG52YXIgcGFyc2VTZWxlY3RvciA9IHJlcXVpcmUoJ3BhcnNlLXNlbCcpXG52YXIgVk9JRF9FTEVNRU5UUyA9IHJlcXVpcmUoJy4vZWxlbWVudHMnKS5WT0lEXG52YXIgQ09OVEFJTkVSX0VMRU1FTlRTID0gcmVxdWlyZSgnLi9lbGVtZW50cycpLkNPTlRBSU5FUlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaXQgKG1vZHVsZXMpIHtcbiAgZnVuY3Rpb24gcGFyc2UgKHZub2RlLCBub2RlKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBuZXcgTWFwKFtcbiAgICAgIC8vIFRoZXNlIGNhbiBiZSBvdmVyd3JpdHRlbiBiZWNhdXNlIHRoYXTigJlzIHdoYXQgaGFwcGVucyBpbiBzbmFiYmRvbVxuICAgICAgWydpZCcsIG5vZGUuaWRdLFxuICAgICAgWydjbGFzcycsIG5vZGUuY2xhc3NOYW1lXVxuICAgIF0pXG5cbiAgICBtb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKGZuLCBpbmRleCkge1xuICAgICAgZm4odm5vZGUsIGF0dHJpYnV0ZXMpXG4gICAgfSlcbiAgICBhdHRyaWJ1dGVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goa2V5ICsgJz1cIicgKyB2YWx1ZSArICdcIicpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiByZXN1bHQuam9pbignICcpXG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcgKHZub2RlKSB7XG4gICAgaWYgKCF2bm9kZS5zZWwgJiYgdm5vZGUudGV4dCkge1xuICAgICAgcmV0dXJuIHZub2RlLnRleHRcbiAgICB9XG5cbiAgICB2bm9kZS5kYXRhID0gdm5vZGUuZGF0YSB8fCB7fVxuXG4gICAgLy8gU3VwcG9ydCB0aHVua3NcbiAgICBpZiAodm5vZGUuZGF0YS5ob29rICYmXG4gICAgICB0eXBlb2Ygdm5vZGUuZGF0YS5ob29rLmluaXQgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiB2bm9kZS5kYXRhLmZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2bm9kZS5kYXRhLmhvb2suaW5pdCh2bm9kZSlcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IHBhcnNlU2VsZWN0b3Iodm5vZGUuc2VsKVxuICAgIHZhciB0YWdOYW1lID0gbm9kZS50YWdOYW1lXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBwYXJzZSh2bm9kZSwgbm9kZSlcbiAgICB2YXIgc3ZnID0gdm5vZGUuZGF0YS5ucyA9PT0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICAgIHZhciB0YWcgPSBbXVxuXG4gICAgLy8gT3BlbiB0YWdcbiAgICB0YWcucHVzaCgnPCcgKyB0YWdOYW1lKVxuICAgIGlmIChhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgdGFnLnB1c2goJyAnICsgYXR0cmlidXRlcylcbiAgICB9XG4gICAgaWYgKHN2ZyAmJiBDT05UQUlORVJfRUxFTUVOVFNbdGFnTmFtZV0gIT09IHRydWUpIHtcbiAgICAgIHRhZy5wdXNoKCcgLycpXG4gICAgfVxuICAgIHRhZy5wdXNoKCc+JylcblxuICAgIC8vIENsb3NlIHRhZywgaWYgbmVlZGVkXG4gICAgaWYgKChWT0lEX0VMRU1FTlRTW3RhZ05hbWVdICE9PSB0cnVlICYmICFzdmcpIHx8XG4gICAgICAgIChzdmcgJiYgQ09OVEFJTkVSX0VMRU1FTlRTW3RhZ05hbWVdID09PSB0cnVlKSkge1xuICAgICAgaWYgKHZub2RlLmRhdGEucHJvcHMgJiYgdm5vZGUuZGF0YS5wcm9wcy5pbm5lckhUTUwpIHtcbiAgICAgICAgdGFnLnB1c2godm5vZGUuZGF0YS5wcm9wcy5pbm5lckhUTUwpXG4gICAgICB9IGVsc2UgaWYgKHZub2RlLnRleHQpIHtcbiAgICAgICAgdGFnLnB1c2godm5vZGUudGV4dClcbiAgICAgIH0gZWxzZSBpZiAodm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICB0YWcucHVzaChyZW5kZXJUb1N0cmluZyhjaGlsZCkpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICB0YWcucHVzaCgnPC8nICsgdGFnTmFtZSArICc+JylcbiAgICB9XG5cbiAgICByZXR1cm4gdGFnLmpvaW4oJycpXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS10by1odG1sL2luaXQuanNcbi8vIG1vZHVsZSBpZCA9IDEyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbnZhciBmb3JPd24gPSByZXF1aXJlKCdsb2Rhc2guZm9yb3duJylcbnZhciBlc2NhcGUgPSByZXF1aXJlKCdsb2Rhc2guZXNjYXBlJylcblxuLy8gZGF0YS5hdHRyc1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF0dHJzTW9kdWxlICh2bm9kZSwgYXR0cmlidXRlcykge1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9XG5cbiAgZm9yT3duKGF0dHJzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIGF0dHJpYnV0ZXMuc2V0KGtleSwgZXNjYXBlKHZhbHVlKSlcbiAgfSlcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvYXR0cmlidXRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxudmFyIGZvck93biA9IHJlcXVpcmUoJ2xvZGFzaC5mb3Jvd24nKVxudmFyIHJlbW92ZSA9IHJlcXVpcmUoJ2xvZGFzaC5yZW1vdmUnKVxudmFyIHVuaXEgPSByZXF1aXJlKCdsb2Rhc2gudW5pcScpXG5cbi8vIGRhdGEuY2xhc3NcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGFzc01vZHVsZSAodm5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgdmFyIHZhbHVlc1xuICB2YXIgX2FkZCA9IFtdXG4gIHZhciBfcmVtb3ZlID0gW11cbiAgdmFyIGNsYXNzZXMgPSB2bm9kZS5kYXRhLmNsYXNzIHx8IHt9XG4gIHZhciBleGlzdGluZyA9IGF0dHJpYnV0ZXMuZ2V0KCdjbGFzcycpXG4gIGV4aXN0aW5nID0gZXhpc3RpbmcubGVuZ3RoID4gMCA/IGV4aXN0aW5nLnNwbGl0KCcgJykgOiBbXVxuXG4gIGZvck93bihjbGFzc2VzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgX2FkZC5wdXNoKGtleSlcbiAgICB9IGVsc2Uge1xuICAgICAgX3JlbW92ZS5wdXNoKGtleSlcbiAgICB9XG4gIH0pXG5cbiAgdmFsdWVzID0gcmVtb3ZlKHVuaXEoZXhpc3RpbmcuY29uY2F0KF9hZGQpKSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZW1vdmUuaW5kZXhPZih2YWx1ZSkgPCAwXG4gIH0pXG5cbiAgaWYgKHZhbHVlcy5sZW5ndGgpIHtcbiAgICBhdHRyaWJ1dGVzLnNldCgnY2xhc3MnLCB2YWx1ZXMuam9pbignICcpKVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tdG8taHRtbC9tb2R1bGVzL2NsYXNzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xhc3M6IHJlcXVpcmUoJy4vY2xhc3MnKSxcbiAgcHJvcHM6IHJlcXVpcmUoJy4vcHJvcHMnKSxcbiAgYXR0cmlidXRlczogcmVxdWlyZSgnLi9hdHRyaWJ1dGVzJyksXG4gIHN0eWxlOiByZXF1aXJlKCcuL3N0eWxlJylcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcbnZhciBmb3JPd24gPSByZXF1aXJlKCdsb2Rhc2guZm9yb3duJylcbnZhciBlc2NhcGUgPSByZXF1aXJlKCdsb2Rhc2guZXNjYXBlJylcblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2VsZW1lbnRcbnZhciBvbWl0ID0gW1xuICAnYXR0cmlidXRlcycsXG4gICdjaGlsZEVsZW1lbnRDb3VudCcsXG4gICdjaGlsZHJlbicsXG4gICdjbGFzc0xpc3QnLFxuICAnY2xpZW50SGVpZ2h0JyxcbiAgJ2NsaWVudExlZnQnLFxuICAnY2xpZW50VG9wJyxcbiAgJ2NsaWVudFdpZHRoJyxcbiAgJ2N1cnJlbnRTdHlsZScsXG4gICdmaXJzdEVsZW1lbnRDaGlsZCcsXG4gICdpbm5lckhUTUwnLFxuICAnbGFzdEVsZW1lbnRDaGlsZCcsXG4gICduZXh0RWxlbWVudFNpYmxpbmcnLFxuICAnb25nb3Rwb2ludGVyY2FwdHVyZScsXG4gICdvbmxvc3Rwb2ludGVyY2FwdHVyZScsXG4gICdvbndoZWVsJyxcbiAgJ291dGVySFRNTCcsXG4gICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJyxcbiAgJ3J1bnRpbWVTdHlsZScsXG4gICdzY3JvbGxIZWlnaHQnLFxuICAnc2Nyb2xsTGVmdCcsXG4gICdzY3JvbGxMZWZ0TWF4JyxcbiAgJ3Njcm9sbFRvcCcsXG4gICdzY3JvbGxUb3BNYXgnLFxuICAnc2Nyb2xsV2lkdGgnLFxuICAndGFiU3RvcCcsXG4gICd0YWdOYW1lJ1xuXVxuXG4vLyBkYXRhLnByb3BzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJvcHNNb2R1bGUgKHZub2RlLCBhdHRyaWJ1dGVzKSB7XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEucHJvcHMgfHwge31cblxuICBmb3JPd24ocHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgaWYgKG9taXQuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnaHRtbEZvcicpIHtcbiAgICAgIGtleSA9ICdmb3InXG4gICAgfVxuICAgIGlmIChrZXkgPT09ICdjbGFzc05hbWUnKSB7XG4gICAgICBrZXkgPSAnY2xhc3MnXG4gICAgfVxuXG4gICAgYXR0cmlidXRlcy5zZXQoa2V5LnRvTG93ZXJDYXNlKCksIGVzY2FwZSh2YWx1ZSkpXG4gIH0pXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20tdG8taHRtbC9tb2R1bGVzL3Byb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG52YXIgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpXG52YXIgZm9yT3duID0gcmVxdWlyZSgnbG9kYXNoLmZvcm93bicpXG52YXIgZXNjYXBlID0gcmVxdWlyZSgnbG9kYXNoLmVzY2FwZScpXG52YXIga2ViYWJDYXNlID0gcmVxdWlyZSgnbG9kYXNoLmtlYmFiY2FzZScpXG5cbi8vIGRhdGEuc3R5bGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHlsZU1vZHVsZSAodm5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgdmFyIHZhbHVlcyA9IFtdXG4gIHZhciBzdHlsZSA9IHZub2RlLmRhdGEuc3R5bGUgfHwge31cblxuICAvLyBtZXJnZSBpbiBgZGVsYXllZGAgcHJvcGVydGllc1xuICBpZiAoc3R5bGUuZGVsYXllZCkge1xuICAgIGFzc2lnbihzdHlsZSwgc3R5bGUuZGVsYXllZClcbiAgfVxuXG4gIGZvck93bihzdHlsZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAvLyBvbWl0IGhvb2sgb2JqZWN0c1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhbHVlcy5wdXNoKGtlYmFiQ2FzZShrZXkpICsgJzogJyArIGVzY2FwZSh2YWx1ZSkpXG4gICAgfVxuICB9KVxuXG4gIGlmICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgYXR0cmlidXRlcy5zZXQoJ3N0eWxlJywgdmFsdWVzLmpvaW4oJzsgJykpXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS10by1odG1sL21vZHVsZXMvc3R5bGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBOYW1lc3BhY2VVUklzID0ge1xuICAgIFwieGxpbmtcIjogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbn07XG52YXIgYm9vbGVhbkF0dHJzID0gW1wiYWxsb3dmdWxsc2NyZWVuXCIsIFwiYXN5bmNcIiwgXCJhdXRvZm9jdXNcIiwgXCJhdXRvcGxheVwiLCBcImNoZWNrZWRcIiwgXCJjb21wYWN0XCIsIFwiY29udHJvbHNcIiwgXCJkZWNsYXJlXCIsXG4gICAgXCJkZWZhdWx0XCIsIFwiZGVmYXVsdGNoZWNrZWRcIiwgXCJkZWZhdWx0bXV0ZWRcIiwgXCJkZWZhdWx0c2VsZWN0ZWRcIiwgXCJkZWZlclwiLCBcImRpc2FibGVkXCIsIFwiZHJhZ2dhYmxlXCIsXG4gICAgXCJlbmFibGVkXCIsIFwiZm9ybW5vdmFsaWRhdGVcIiwgXCJoaWRkZW5cIiwgXCJpbmRldGVybWluYXRlXCIsIFwiaW5lcnRcIiwgXCJpc21hcFwiLCBcIml0ZW1zY29wZVwiLCBcImxvb3BcIiwgXCJtdWx0aXBsZVwiLFxuICAgIFwibXV0ZWRcIiwgXCJub2hyZWZcIiwgXCJub3Jlc2l6ZVwiLCBcIm5vc2hhZGVcIiwgXCJub3ZhbGlkYXRlXCIsIFwibm93cmFwXCIsIFwib3BlblwiLCBcInBhdXNlb25leGl0XCIsIFwicmVhZG9ubHlcIixcbiAgICBcInJlcXVpcmVkXCIsIFwicmV2ZXJzZWRcIiwgXCJzY29wZWRcIiwgXCJzZWFtbGVzc1wiLCBcInNlbGVjdGVkXCIsIFwic29ydGFibGVcIiwgXCJzcGVsbGNoZWNrXCIsIFwidHJhbnNsYXRlXCIsXG4gICAgXCJ0cnVlc3BlZWRcIiwgXCJ0eXBlbXVzdG1hdGNoXCIsIFwidmlzaWJsZVwiXTtcbnZhciBib29sZWFuQXR0cnNEaWN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBib29sZWFuQXR0cnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBib29sZWFuQXR0cnNEaWN0W2Jvb2xlYW5BdHRyc1tpXV0gPSB0cnVlO1xufVxuZnVuY3Rpb24gdXBkYXRlQXR0cnMob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIGtleSwgY3VyLCBvbGQsIGVsbSA9IHZub2RlLmVsbSwgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzLCBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMsIG5hbWVzcGFjZVNwbGl0O1xuICAgIGlmICghb2xkQXR0cnMgJiYgIWF0dHJzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZEF0dHJzID09PSBhdHRycylcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZEF0dHJzID0gb2xkQXR0cnMgfHwge307XG4gICAgYXR0cnMgPSBhdHRycyB8fCB7fTtcbiAgICAvLyB1cGRhdGUgbW9kaWZpZWQgYXR0cmlidXRlcywgYWRkIG5ldyBhdHRyaWJ1dGVzXG4gICAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICAgICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICAgICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICAgICAgICBpZiAoIWN1ciAmJiBib29sZWFuQXR0cnNEaWN0W2tleV0pXG4gICAgICAgICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlU3BsaXQgPSBrZXkuc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2VTcGxpdC5sZW5ndGggPiAxICYmIE5hbWVzcGFjZVVSSXMuaGFzT3duUHJvcGVydHkobmFtZXNwYWNlU3BsaXRbMF0pKVxuICAgICAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlTlMoTmFtZXNwYWNlVVJJc1tuYW1lc3BhY2VTcGxpdFswXV0sIGtleSwgY3VyKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBjdXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vcmVtb3ZlIHJlbW92ZWQgYXR0cmlidXRlc1xuICAgIC8vIHVzZSBgaW5gIG9wZXJhdG9yIHNpbmNlIHRoZSBwcmV2aW91cyBgZm9yYCBpdGVyYXRpb24gdXNlcyBpdCAoLmkuZS4gYWRkIGV2ZW4gYXR0cmlidXRlcyB3aXRoIHVuZGVmaW5lZCB2YWx1ZSlcbiAgICAvLyB0aGUgb3RoZXIgb3B0aW9uIGlzIHRvIHJlbW92ZSBhbGwgYXR0cmlidXRlcyB3aXRoIHZhbHVlID09IHVuZGVmaW5lZFxuICAgIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBhdHRycykpIHtcbiAgICAgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuYXR0cmlidXRlc01vZHVsZSA9IHsgY3JlYXRlOiB1cGRhdGVBdHRycywgdXBkYXRlOiB1cGRhdGVBdHRycyB9O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5hdHRyaWJ1dGVzTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXR0cmlidXRlcy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vbW9kdWxlcy9hdHRyaWJ1dGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiB1cGRhdGVDbGFzcyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgY3VyLCBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIG9sZENsYXNzID0gb2xkVm5vZGUuZGF0YS5jbGFzcywga2xhc3MgPSB2bm9kZS5kYXRhLmNsYXNzO1xuICAgIGlmICghb2xkQ2xhc3MgJiYgIWtsYXNzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZENsYXNzID09PSBrbGFzcylcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZENsYXNzID0gb2xkQ2xhc3MgfHwge307XG4gICAga2xhc3MgPSBrbGFzcyB8fCB7fTtcbiAgICBmb3IgKG5hbWUgaW4gb2xkQ2xhc3MpIHtcbiAgICAgICAgaWYgKCFrbGFzc1tuYW1lXSkge1xuICAgICAgICAgICAgZWxtLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChuYW1lIGluIGtsYXNzKSB7XG4gICAgICAgIGN1ciA9IGtsYXNzW25hbWVdO1xuICAgICAgICBpZiAoY3VyICE9PSBvbGRDbGFzc1tuYW1lXSkge1xuICAgICAgICAgICAgZWxtLmNsYXNzTGlzdFtjdXIgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuY2xhc3NNb2R1bGUgPSB7IGNyZWF0ZTogdXBkYXRlQ2xhc3MsIHVwZGF0ZTogdXBkYXRlQ2xhc3MgfTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuY2xhc3NNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFzcy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc25hYmJkb20vbW9kdWxlcy9jbGFzcy5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIENBUFNfUkVHRVggPSAvW0EtWl0vZztcbmZ1bmN0aW9uIHVwZGF0ZURhdGFzZXQob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSwgb2xkRGF0YXNldCA9IG9sZFZub2RlLmRhdGEuZGF0YXNldCwgZGF0YXNldCA9IHZub2RlLmRhdGEuZGF0YXNldCwga2V5O1xuICAgIGlmICghb2xkRGF0YXNldCAmJiAhZGF0YXNldClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGREYXRhc2V0ID09PSBkYXRhc2V0KVxuICAgICAgICByZXR1cm47XG4gICAgb2xkRGF0YXNldCA9IG9sZERhdGFzZXQgfHwge307XG4gICAgZGF0YXNldCA9IGRhdGFzZXQgfHwge307XG4gICAgdmFyIGQgPSBlbG0uZGF0YXNldDtcbiAgICBmb3IgKGtleSBpbiBvbGREYXRhc2V0KSB7XG4gICAgICAgIGlmICghZGF0YXNldFtrZXldKSB7XG4gICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLScgKyBrZXkucmVwbGFjZShDQVBTX1JFR0VYLCAnLSQmJykudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrZXkgaW4gZGF0YXNldCkge1xuICAgICAgICBpZiAob2xkRGF0YXNldFtrZXldICE9PSBkYXRhc2V0W2tleV0pIHtcbiAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgICAgZFtrZXldID0gZGF0YXNldFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSgnZGF0YS0nICsga2V5LnJlcGxhY2UoQ0FQU19SRUdFWCwgJy0kJicpLnRvTG93ZXJDYXNlKCksIGRhdGFzZXRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRhdGFzZXRNb2R1bGUgPSB7IGNyZWF0ZTogdXBkYXRlRGF0YXNldCwgdXBkYXRlOiB1cGRhdGVEYXRhc2V0IH07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRhdGFzZXRNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhc2V0LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS9tb2R1bGVzL2RhdGFzZXQuanNcbi8vIG1vZHVsZSBpZCA9IDEzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHVwZGF0ZVByb3BzKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBrZXksIGN1ciwgb2xkLCBlbG0gPSB2bm9kZS5lbG0sIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5wcm9wcywgcHJvcHMgPSB2bm9kZS5kYXRhLnByb3BzO1xuICAgIGlmICghb2xkUHJvcHMgJiYgIXByb3BzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZFByb3BzID09PSBwcm9wcylcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZFByb3BzID0gb2xkUHJvcHMgfHwge307XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgICAgICBpZiAoIXByb3BzW2tleV0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBlbG1ba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgICAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgICAgICBvbGQgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICBpZiAob2xkICE9PSBjdXIgJiYgKGtleSAhPT0gJ3ZhbHVlJyB8fCBlbG1ba2V5XSAhPT0gY3VyKSkge1xuICAgICAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnByb3BzTW9kdWxlID0geyBjcmVhdGU6IHVwZGF0ZVByb3BzLCB1cGRhdGU6IHVwZGF0ZVByb3BzIH07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnByb3BzTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcHMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NuYWJiZG9tL21vZHVsZXMvcHJvcHMuanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciByYWYgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkgfHwgc2V0VGltZW91dDtcbnZhciBuZXh0RnJhbWUgPSBmdW5jdGlvbiAoZm4pIHsgcmFmKGZ1bmN0aW9uICgpIHsgcmFmKGZuKTsgfSk7IH07XG5mdW5jdGlvbiBzZXROZXh0RnJhbWUob2JqLCBwcm9wLCB2YWwpIHtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkgeyBvYmpbcHJvcF0gPSB2YWw7IH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlU3R5bGUob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIGN1ciwgbmFtZSwgZWxtID0gdm5vZGUuZWxtLCBvbGRTdHlsZSA9IG9sZFZub2RlLmRhdGEuc3R5bGUsIHN0eWxlID0gdm5vZGUuZGF0YS5zdHlsZTtcbiAgICBpZiAoIW9sZFN0eWxlICYmICFzdHlsZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGRTdHlsZSA9PT0gc3R5bGUpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGRTdHlsZSA9IG9sZFN0eWxlIHx8IHt9O1xuICAgIHN0eWxlID0gc3R5bGUgfHwge307XG4gICAgdmFyIG9sZEhhc0RlbCA9ICdkZWxheWVkJyBpbiBvbGRTdHlsZTtcbiAgICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICAgICAgaWYgKCFzdHlsZVtuYW1lXSkge1xuICAgICAgICAgICAgaWYgKG5hbWVbMF0gPT09ICctJyAmJiBuYW1lWzFdID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgY3VyID0gc3R5bGVbbmFtZV07XG4gICAgICAgIGlmIChuYW1lID09PSAnZGVsYXllZCcpIHtcbiAgICAgICAgICAgIGZvciAobmFtZSBpbiBzdHlsZS5kZWxheWVkKSB7XG4gICAgICAgICAgICAgICAgY3VyID0gc3R5bGUuZGVsYXllZFtuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoIW9sZEhhc0RlbCB8fCBjdXIgIT09IG9sZFN0eWxlLmRlbGF5ZWRbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TmV4dEZyYW1lKGVsbS5zdHlsZSwgbmFtZSwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSAhPT0gJ3JlbW92ZScgJiYgY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgICAgICAgaWYgKG5hbWVbMF0gPT09ICctJyAmJiBuYW1lWzFdID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgY3VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsbS5zdHlsZVtuYW1lXSA9IGN1cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGx5RGVzdHJveVN0eWxlKHZub2RlKSB7XG4gICAgdmFyIHN0eWxlLCBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIHMgPSB2bm9kZS5kYXRhLnN0eWxlO1xuICAgIGlmICghcyB8fCAhKHN0eWxlID0gcy5kZXN0cm95KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGZvciAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBzdHlsZVtuYW1lXTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcHBseVJlbW92ZVN0eWxlKHZub2RlLCBybSkge1xuICAgIHZhciBzID0gdm5vZGUuZGF0YS5zdHlsZTtcbiAgICBpZiAoIXMgfHwgIXMucmVtb3ZlKSB7XG4gICAgICAgIHJtKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5hbWUsIGVsbSA9IHZub2RlLmVsbSwgaSA9IDAsIGNvbXBTdHlsZSwgc3R5bGUgPSBzLnJlbW92ZSwgYW1vdW50ID0gMCwgYXBwbGllZCA9IFtdO1xuICAgIGZvciAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICBhcHBsaWVkLnB1c2gobmFtZSk7XG4gICAgICAgIGVsbS5zdHlsZVtuYW1lXSA9IHN0eWxlW25hbWVdO1xuICAgIH1cbiAgICBjb21wU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsbSk7XG4gICAgdmFyIHByb3BzID0gY29tcFN0eWxlWyd0cmFuc2l0aW9uLXByb3BlcnR5J10uc3BsaXQoJywgJyk7XG4gICAgZm9yICg7IGkgPCBwcm9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYXBwbGllZC5pbmRleE9mKHByb3BzW2ldKSAhPT0gLTEpXG4gICAgICAgICAgICBhbW91bnQrKztcbiAgICB9XG4gICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKGV2LnRhcmdldCA9PT0gZWxtKVxuICAgICAgICAgICAgLS1hbW91bnQ7XG4gICAgICAgIGlmIChhbW91bnQgPT09IDApXG4gICAgICAgICAgICBybSgpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zdHlsZU1vZHVsZSA9IHtcbiAgICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICAgIHVwZGF0ZTogdXBkYXRlU3R5bGUsXG4gICAgZGVzdHJveTogYXBwbHlEZXN0cm95U3R5bGUsXG4gICAgcmVtb3ZlOiBhcHBseVJlbW92ZVN0eWxlXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZU1vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS9tb2R1bGVzL3N0eWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdm5vZGVfMSA9IHJlcXVpcmUoXCIuL3Zub2RlXCIpO1xudmFyIGlzID0gcmVxdWlyZShcIi4vaXNcIik7XG52YXIgaHRtbGRvbWFwaV8xID0gcmVxdWlyZShcIi4vaHRtbGRvbWFwaVwiKTtcbmZ1bmN0aW9uIGlzVW5kZWYocykgeyByZXR1cm4gcyA9PT0gdW5kZWZpbmVkOyB9XG5mdW5jdGlvbiBpc0RlZihzKSB7IHJldHVybiBzICE9PSB1bmRlZmluZWQ7IH1cbnZhciBlbXB0eU5vZGUgPSB2bm9kZV8xLmRlZmF1bHQoJycsIHt9LCBbXSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuZnVuY3Rpb24gc2FtZVZub2RlKHZub2RlMSwgdm5vZGUyKSB7XG4gICAgcmV0dXJuIHZub2RlMS5rZXkgPT09IHZub2RlMi5rZXkgJiYgdm5vZGUxLnNlbCA9PT0gdm5vZGUyLnNlbDtcbn1cbmZ1bmN0aW9uIGlzVm5vZGUodm5vZGUpIHtcbiAgICByZXR1cm4gdm5vZGUuc2VsICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICAgIHZhciBpLCBtYXAgPSB7fSwga2V5LCBjaDtcbiAgICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgICAgICBjaCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoY2ggIT0gbnVsbCkge1xuICAgICAgICAgICAga2V5ID0gY2gua2V5O1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIG1hcFtrZXldID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95JywgJ3ByZScsICdwb3N0J107XG52YXIgaF8xID0gcmVxdWlyZShcIi4vaFwiKTtcbmV4cG9ydHMuaCA9IGhfMS5oO1xudmFyIHRodW5rXzEgPSByZXF1aXJlKFwiLi90aHVua1wiKTtcbmV4cG9ydHMudGh1bmsgPSB0aHVua18xLnRodW5rO1xuZnVuY3Rpb24gaW5pdChtb2R1bGVzLCBkb21BcGkpIHtcbiAgICB2YXIgaSwgaiwgY2JzID0ge307XG4gICAgdmFyIGFwaSA9IGRvbUFwaSAhPT0gdW5kZWZpbmVkID8gZG9tQXBpIDogaHRtbGRvbWFwaV8xLmRlZmF1bHQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBob29rID0gbW9kdWxlc1tqXVtob29rc1tpXV07XG4gICAgICAgICAgICBpZiAoaG9vayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKGhvb2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0KGVsbSkge1xuICAgICAgICB2YXIgaWQgPSBlbG0uaWQgPyAnIycgKyBlbG0uaWQgOiAnJztcbiAgICAgICAgdmFyIGMgPSBlbG0uY2xhc3NOYW1lID8gJy4nICsgZWxtLmNsYXNzTmFtZS5zcGxpdCgnICcpLmpvaW4oJy4nKSA6ICcnO1xuICAgICAgICByZXR1cm4gdm5vZGVfMS5kZWZhdWx0KGFwaS50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSArIGlkICsgYywge30sIFtdLCB1bmRlZmluZWQsIGVsbSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcm1DYigpIHtcbiAgICAgICAgICAgIGlmICgtLWxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IGFwaS5wYXJlbnROb2RlKGNoaWxkRWxtKTtcbiAgICAgICAgICAgICAgICBhcGkucmVtb3ZlQ2hpbGQocGFyZW50XzEsIGNoaWxkRWxtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgICAgdmFyIGksIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgICAgICAgICBpKHZub2RlKTtcbiAgICAgICAgICAgICAgICBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbiwgc2VsID0gdm5vZGUuc2VsO1xuICAgICAgICBpZiAoc2VsID09PSAnIScpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUudGV4dCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdm5vZGUuZWxtID0gYXBpLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFBhcnNlIHNlbGVjdG9yXG4gICAgICAgICAgICB2YXIgaGFzaElkeCA9IHNlbC5pbmRleE9mKCcjJyk7XG4gICAgICAgICAgICB2YXIgZG90SWR4ID0gc2VsLmluZGV4T2YoJy4nLCBoYXNoSWR4KTtcbiAgICAgICAgICAgIHZhciBoYXNoID0gaGFzaElkeCA+IDAgPyBoYXNoSWR4IDogc2VsLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBkb3QgPSBkb3RJZHggPiAwID8gZG90SWR4IDogc2VsLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB0YWcgPSBoYXNoSWR4ICE9PSAtMSB8fCBkb3RJZHggIT09IC0xID8gc2VsLnNsaWNlKDAsIE1hdGgubWluKGhhc2gsIGRvdCkpIDogc2VsO1xuICAgICAgICAgICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLm5zKSA/IGFwaS5jcmVhdGVFbGVtZW50TlMoaSwgdGFnKVxuICAgICAgICAgICAgICAgIDogYXBpLmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICAgICAgICAgIGlmIChoYXNoIDwgZG90KVxuICAgICAgICAgICAgICAgIGVsbS5pZCA9IHNlbC5zbGljZShoYXNoICsgMSwgZG90KTtcbiAgICAgICAgICAgIGlmIChkb3RJZHggPiAwKVxuICAgICAgICAgICAgICAgIGVsbS5jbGFzc05hbWUgPSBzZWwuc2xpY2UoZG90ICsgMSkucmVwbGFjZSgvXFwuL2csICcgJyk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2ldKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgICAgICAgICAgaWYgKGlzLmFycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2ggPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5hcHBlbmRDaGlsZChlbG0sIGNyZWF0ZUVsbShjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpcy5wcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgICAgICAgICAgICBhcGkuYXBwZW5kQ2hpbGQoZWxtLCBhcGkuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICAgICAgICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgICAgICAgICAgIGlmIChpLmNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKGkuaW5zZXJ0KVxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2bm9kZS5lbG0gPSBhcGkuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZub2RlLmVsbTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkVm5vZGVzKHBhcmVudEVsbSwgYmVmb3JlLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgICAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICAgICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgICAgICAgaWYgKGNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhcGkuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgY3JlYXRlRWxtKGNoLCBpbnNlcnRlZFZub2RlUXVldWUpLCBiZWZvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rKHZub2RlKSB7XG4gICAgICAgIHZhciBpLCBqLCBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKVxuICAgICAgICAgICAgICAgIGkodm5vZGUpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKHZub2RlKTtcbiAgICAgICAgICAgIGlmICh2bm9kZS5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSB2bm9kZS5jaGlsZHJlbltqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT0gbnVsbCAmJiB0eXBlb2YgaSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgICAgICAgIHZhciBpXzEgPSB2b2lkIDAsIGxpc3RlbmVycyA9IHZvaWQgMCwgcm0gPSB2b2lkIDAsIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgICAgICAgIGlmIChjaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRGVmKGNoLnNlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHJtID0gY3JlYXRlUm1DYihjaC5lbG0sIGxpc3RlbmVycyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaV8xID0gMDsgaV8xIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraV8xKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2JzLnJlbW92ZVtpXzFdKGNoLCBybSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RlZihpXzEgPSBjaC5kYXRhKSAmJiBpc0RlZihpXzEgPSBpXzEuaG9vaykgJiYgaXNEZWYoaV8xID0gaV8xLnJlbW92ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlfMShjaCwgcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBpLnJlbW92ZUNoaWxkKHBhcmVudEVsbSwgY2guZWxtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4ocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgICAgICB2YXIgb2xkU3RhcnRJZHggPSAwLCBuZXdTdGFydElkeCA9IDA7XG4gICAgICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgICAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgICAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICAgICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICAgICAgdmFyIG9sZEtleVRvSWR4O1xuICAgICAgICB2YXIgaWR4SW5PbGQ7XG4gICAgICAgIHZhciBlbG1Ub01vdmU7XG4gICAgICAgIHZhciBiZWZvcmU7XG4gICAgICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICAgICAgICBpZiAob2xkU3RhcnRWbm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBtaWdodCBoYXZlIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob2xkRW5kVm5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV3U3RhcnRWbm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV3RW5kVm5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICAgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICAgICAgYXBpLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBhcGkubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICAgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICAgICAgYXBpLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvbGRLZXlUb0lkeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZHhJbk9sZCA9IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBpLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsbVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsbVRvTW92ZS5zZWwgIT09IG5ld1N0YXJ0Vm5vZGUuc2VsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSksIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUoZWxtVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIGVsbVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgICAgICAgYmVmb3JlID0gbmV3Q2hbbmV3RW5kSWR4ICsgMV0gPT0gbnVsbCA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICAgICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCBiZWZvcmUsIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaG9vaztcbiAgICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhKSAmJiBpc0RlZihob29rID0gaS5ob29rKSAmJiBpc0RlZihpID0gaG9vay5wcmVwYXRjaCkpIHtcbiAgICAgICAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh2bm9kZS5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTtcbiAgICAgICAgICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7XG4gICAgICAgICAgICBpZiAoaXNEZWYoaSkgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSlcbiAgICAgICAgICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZENoICE9PSBjaClcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpXG4gICAgICAgICAgICAgICAgICAgIGFwaS5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgICAgICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZVZub2RlcyhlbG0sIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgYXBpLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgICAgICAgIGFwaS5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihob29rKSAmJiBpc0RlZihpID0gaG9vay5wb3N0cGF0Y2gpKSB7XG4gICAgICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoKG9sZFZub2RlLCB2bm9kZSkge1xuICAgICAgICB2YXIgaSwgZWxtLCBwYXJlbnQ7XG4gICAgICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5wcmUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBjYnMucHJlW2ldKCk7XG4gICAgICAgIGlmICghaXNWbm9kZShvbGRWbm9kZSkpIHtcbiAgICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgICAgICBwYXJlbnQgPSBhcGkucGFyZW50Tm9kZShlbG0pO1xuICAgICAgICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50LCB2bm9kZS5lbG0sIGFwaS5uZXh0U2libGluZyhlbG0pKTtcbiAgICAgICAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50LCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWVbaV0uZGF0YS5ob29rLmluc2VydChpbnNlcnRlZFZub2RlUXVldWVbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucG9zdC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGNicy5wb3N0W2ldKCk7XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICB9O1xufVxuZXhwb3J0cy5pbml0ID0gaW5pdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNuYWJiZG9tLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS9zbmFiYmRvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHZub2RlXzEgPSByZXF1aXJlKFwiLi92bm9kZVwiKTtcbnZhciBodG1sZG9tYXBpXzEgPSByZXF1aXJlKFwiLi9odG1sZG9tYXBpXCIpO1xuZnVuY3Rpb24gdG9WTm9kZShub2RlLCBkb21BcGkpIHtcbiAgICB2YXIgYXBpID0gZG9tQXBpICE9PSB1bmRlZmluZWQgPyBkb21BcGkgOiBodG1sZG9tYXBpXzEuZGVmYXVsdDtcbiAgICB2YXIgdGV4dDtcbiAgICBpZiAoYXBpLmlzRWxlbWVudChub2RlKSkge1xuICAgICAgICB2YXIgaWQgPSBub2RlLmlkID8gJyMnICsgbm9kZS5pZCA6ICcnO1xuICAgICAgICB2YXIgY24gPSBub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgdmFyIGMgPSBjbiA/ICcuJyArIGNuLnNwbGl0KCcgJykuam9pbignLicpIDogJyc7XG4gICAgICAgIHZhciBzZWwgPSBhcGkudGFnTmFtZShub2RlKS50b0xvd2VyQ2FzZSgpICsgaWQgKyBjO1xuICAgICAgICB2YXIgYXR0cnMgPSB7fTtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgICAgIHZhciBuYW1lXzE7XG4gICAgICAgIHZhciBpID0gdm9pZCAwLCBuID0gdm9pZCAwO1xuICAgICAgICB2YXIgZWxtQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgIHZhciBlbG1DaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgZm9yIChpID0gMCwgbiA9IGVsbUF0dHJzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgbmFtZV8xID0gZWxtQXR0cnNbaV0ubm9kZU5hbWU7XG4gICAgICAgICAgICBpZiAobmFtZV8xICE9PSAnaWQnICYmIG5hbWVfMSAhPT0gJ2NsYXNzJykge1xuICAgICAgICAgICAgICAgIGF0dHJzW25hbWVfMV0gPSBlbG1BdHRyc1tpXS5ub2RlVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMCwgbiA9IGVsbUNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0b1ZOb2RlKGVsbUNoaWxkcmVuW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZub2RlXzEuZGVmYXVsdChzZWwsIHsgYXR0cnM6IGF0dHJzIH0sIGNoaWxkcmVuLCB1bmRlZmluZWQsIG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcGkuaXNUZXh0KG5vZGUpKSB7XG4gICAgICAgIHRleHQgPSBhcGkuZ2V0VGV4dENvbnRlbnQobm9kZSk7XG4gICAgICAgIHJldHVybiB2bm9kZV8xLmRlZmF1bHQodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGV4dCwgbm9kZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFwaS5pc0NvbW1lbnQobm9kZSkpIHtcbiAgICAgICAgdGV4dCA9IGFwaS5nZXRUZXh0Q29udGVudChub2RlKTtcbiAgICAgICAgcmV0dXJuIHZub2RlXzEuZGVmYXVsdCgnIScsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0ZXh0LCB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXzEuZGVmYXVsdCgnJywge30sIFtdLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy50b1ZOb2RlID0gdG9WTm9kZTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvVk5vZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3Zub2RlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zbmFiYmRvbS90b3Zub2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgaXNQYXR0ZXJuLCBpc1JvdXRlRGVmaW5pdGlvbiwgdHJhdmVyc2VSb3V0ZXMsIGlzTm90TnVsbCwgc3BsaXRQYXRoLCBpc1BhcmFtLCBleHRyYWN0UGFydGlhbCwgdW5wcmVmaXhlZCwgfSBmcm9tICcuL3V0aWwnO1xuZnVuY3Rpb24gc3dpdGNoUGF0aElucHV0R3VhcmQocGF0aCwgcm91dGVzKSB7XG4gICAgaWYgKCFpc1BhdHRlcm4ocGF0aCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgcGFyYW1ldGVyIHRvIHN3aXRjaFBhdGggbXVzdCBiZSBhIHJvdXRlIHBhdGguXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzUm91dGVEZWZpbml0aW9uKHJvdXRlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vjb25kIHBhcmFtZXRlciB0byBzd2l0Y2hQYXRoIG11c3QgYmUgYW4gb2JqZWN0IFwiICtcbiAgICAgICAgICAgIFwiY29udGFpbmluZyByb3V0ZSBwYXR0ZXJucy5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVQYXRoKHNvdXJjZVBhdGgsIG1hdGNoZWRQYXRoKSB7XG4gICAgdmFyIHNvdXJjZVBhcnRzID0gc3BsaXRQYXRoKHNvdXJjZVBhdGgpO1xuICAgIHZhciBtYXRjaGVkUGFydHMgPSBzcGxpdFBhdGgobWF0Y2hlZFBhdGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hlZFBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChtYXRjaGVkUGFydHNbaV0gIT09IHNvdXJjZVBhcnRzW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCIvXCIgKyBleHRyYWN0UGFydGlhbChzb3VyY2VQYXRoLCBtYXRjaGVkUGF0aCk7XG59XG5mdW5jdGlvbiBiZXR0ZXJNYXRjaChjYW5kaWRhdGUsIHJlZmVyZW5jZSkge1xuICAgIGlmICghaXNOb3ROdWxsKGNhbmRpZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzTm90TnVsbChyZWZlcmVuY2UpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbGlkYXRlUGF0aChjYW5kaWRhdGUsIHJlZmVyZW5jZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gY2FuZGlkYXRlLmxlbmd0aCA+PSByZWZlcmVuY2UubGVuZ3RoO1xufVxuZnVuY3Rpb24gbWF0Y2hlc1dpdGhQYXJhbXMoc291cmNlUGF0aCwgcGF0dGVybikge1xuICAgIHZhciBzb3VyY2VQYXJ0cyA9IHNwbGl0UGF0aChzb3VyY2VQYXRoKTtcbiAgICB2YXIgcGF0dGVyblBhcnRzID0gc3BsaXRQYXRoKHBhdHRlcm4pO1xuICAgIHZhciBwYXJhbXMgPSBwYXR0ZXJuUGFydHNcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocGFydCwgaSkgeyByZXR1cm4gaXNQYXJhbShwYXJ0KSA/IHNvdXJjZVBhcnRzW2ldIDogbnVsbDsgfSlcbiAgICAgICAgLmZpbHRlcihpc05vdE51bGwpO1xuICAgIHZhciBtYXRjaGVkID0gcGF0dGVyblBhcnRzXG4gICAgICAgIC5ldmVyeShmdW5jdGlvbiAocGFydCwgaSkgeyByZXR1cm4gaXNQYXJhbShwYXJ0KSB8fCBwYXJ0ID09PSBzb3VyY2VQYXJ0c1tpXTsgfSk7XG4gICAgcmV0dXJuIG1hdGNoZWQgPyBwYXJhbXMgOiBbXTtcbn1cbmZ1bmN0aW9uIGdldFBhcmFtRm5WYWx1ZShwYXJhbUZuLCBwYXJhbXMpIHtcbiAgICB2YXIgX3BhcmFtRm4gPSBpc1JvdXRlRGVmaW5pdGlvbihwYXJhbUZuKSA/IHBhcmFtRm5bXCIvXCJdIDogcGFyYW1GbjtcbiAgICByZXR1cm4gdHlwZW9mIF9wYXJhbUZuID09PSBcImZ1bmN0aW9uXCIgPyBfcGFyYW1Gbi5hcHBseSh2b2lkIDAsIHBhcmFtcykgOiBfcGFyYW1Gbjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlKF9hKSB7XG4gICAgdmFyIHNvdXJjZVBhdGggPSBfYS5zb3VyY2VQYXRoLCBtYXRjaGVkUGF0aCA9IF9hLm1hdGNoZWRQYXRoLCBtYXRjaGVkVmFsdWUgPSBfYS5tYXRjaGVkVmFsdWUsIHJvdXRlcyA9IF9hLnJvdXRlcztcbiAgICB2YXIgcGF0aCA9IG1hdGNoZWRQYXRoID8gdmFsaWRhdGVQYXRoKHNvdXJjZVBhdGgsIG1hdGNoZWRQYXRoKSA6IG51bGw7XG4gICAgdmFyIHZhbHVlID0gbWF0Y2hlZFZhbHVlO1xuICAgIGlmICghcGF0aCkge1xuICAgICAgICBwYXRoID0gcm91dGVzW1wiKlwiXSA/IHNvdXJjZVBhdGggOiBudWxsO1xuICAgICAgICB2YWx1ZSA9IHBhdGggPyByb3V0ZXNbXCIqXCJdIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHsgcGF0aDogcGF0aCwgdmFsdWU6IHZhbHVlIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzd2l0Y2hQYXRoKHNvdXJjZVBhdGgsIHJvdXRlcykge1xuICAgIHN3aXRjaFBhdGhJbnB1dEd1YXJkKHNvdXJjZVBhdGgsIHJvdXRlcyk7XG4gICAgdmFyIG1hdGNoZWRQYXRoID0gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFZhbHVlID0gbnVsbDtcbiAgICB0cmF2ZXJzZVJvdXRlcyhyb3V0ZXMsIGZ1bmN0aW9uIG1hdGNoUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgICAgIGlmIChzb3VyY2VQYXRoLnNlYXJjaChwYXR0ZXJuKSA9PT0gMCAmJiBiZXR0ZXJNYXRjaChwYXR0ZXJuLCBtYXRjaGVkUGF0aCkpIHtcbiAgICAgICAgICAgIG1hdGNoZWRQYXRoID0gcGF0dGVybjtcbiAgICAgICAgICAgIG1hdGNoZWRWYWx1ZSA9IHJvdXRlc1twYXR0ZXJuXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyYW1zID0gbWF0Y2hlc1dpdGhQYXJhbXMoc291cmNlUGF0aCwgcGF0dGVybikuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDAgJiYgYmV0dGVyTWF0Y2goc291cmNlUGF0aCwgbWF0Y2hlZFBhdGgpKSB7XG4gICAgICAgICAgICBtYXRjaGVkUGF0aCA9IGV4dHJhY3RQYXJ0aWFsKHNvdXJjZVBhdGgsIHBhdHRlcm4pO1xuICAgICAgICAgICAgbWF0Y2hlZFZhbHVlID0gZ2V0UGFyYW1GblZhbHVlKHJvdXRlc1twYXR0ZXJuXSwgcGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSb3V0ZURlZmluaXRpb24ocm91dGVzW3BhdHRlcm5dKSAmJiBwYXJhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlUGF0aCAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBzd2l0Y2hQYXRoKHVucHJlZml4ZWQoc291cmNlUGF0aCwgcGF0dGVybikgfHwgXCIvXCIsIHJvdXRlc1twYXR0ZXJuXSk7XG4gICAgICAgICAgICAgICAgdmFyIG5lc3RlZFBhdGggPSBwYXR0ZXJuICsgY2hpbGQucGF0aDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQucGF0aCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICBiZXR0ZXJNYXRjaChuZXN0ZWRQYXRoLCBtYXRjaGVkUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFBhdGggPSBuZXN0ZWRQYXRoO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkVmFsdWUgPSBjaGlsZC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsaWRhdGUoeyBzb3VyY2VQYXRoOiBzb3VyY2VQYXRoLCBtYXRjaGVkUGF0aDogbWF0Y2hlZFBhdGgsIG1hdGNoZWRWYWx1ZTogbWF0Y2hlZFZhbHVlLCByb3V0ZXM6IHJvdXRlcyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zd2l0Y2gtcGF0aC9saWIvZXMyMDE1L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzUGF0dGVybihjYW5kaWRhdGUpIHtcbiAgICByZXR1cm4gY2FuZGlkYXRlLmNoYXJBdCgwKSA9PT0gXCIvXCIgfHwgY2FuZGlkYXRlID09PSBcIipcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JvdXRlRGVmaW5pdGlvbihjYW5kaWRhdGUpIHtcbiAgICByZXR1cm4gIWNhbmRpZGF0ZSB8fCB0eXBlb2YgY2FuZGlkYXRlICE9PSBcIm9iamVjdFwiID9cbiAgICAgICAgZmFsc2UgOiBpc1BhdHRlcm4oT2JqZWN0LmtleXMoY2FuZGlkYXRlKVswXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJhdmVyc2VSb3V0ZXMocm91dGVzLCBjYWxsYmFjaykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocm91dGVzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSBrZXlzW2ldO1xuICAgICAgICBpZiAocGF0dGVybiA9PT0gXCIqXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FsbGJhY2socGF0dGVybik7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTm90TnVsbChjYW5kaWRhdGUpIHtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0UGF0aChwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gISFzOyB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcmFtKGNhbmRpZGF0ZSkge1xuICAgIHJldHVybiBjYW5kaWRhdGUubWF0Y2goLzpcXHcrLykgIT09IG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFBhcnRpYWwoc291cmNlUGF0aCwgcGF0dGVybikge1xuICAgIHZhciBwYXR0ZXJuUGFydHMgPSBzcGxpdFBhdGgocGF0dGVybik7XG4gICAgdmFyIHNvdXJjZVBhcnRzID0gc3BsaXRQYXRoKHNvdXJjZVBhdGgpO1xuICAgIHZhciBtYXRjaGVkUGFydHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdHRlcm5QYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBtYXRjaGVkUGFydHMucHVzaChzb3VyY2VQYXJ0c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRjaGVkUGFydHMuZmlsdGVyKGlzTm90TnVsbCkuam9pbihcIi9cIik7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5wcmVmaXhlZChmdWxsU3RyaW5nLCBwcmVmaXgpIHtcbiAgICByZXR1cm4gZnVsbFN0cmluZy5zcGxpdChwcmVmaXgpWzFdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3dpdGNoLXBhdGgvbGliL2VzMjAxNS91dGlsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9pbmRleCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3N5bWJvbC1vYnNlcnZhYmxlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3BvbnlmaWxsID0gcmVxdWlyZSgnLi9wb255ZmlsbCcpO1xuXG52YXIgX3BvbnlmaWxsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BvbnlmaWxsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgcm9vdDsgLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9ICgwLCBfcG9ueWZpbGwyWydkZWZhdWx0J10pKHJvb3QpO1xuZXhwb3J0c1snZGVmYXVsdCddID0gcmVzdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zeW1ib2wtb2JzZXJ2YWJsZS9saWIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGw7XG5mdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgX1N5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgX1N5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChfU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IF9TeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gX1N5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0X1N5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zeW1ib2wtb2JzZXJ2YWJsZS9saWIvcG9ueWZpbGwuanNcbi8vIG1vZHVsZSBpZCA9IDE0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiEgdGV0aGVyIDEuNC4wICovXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5UZXRoZXIgPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbnZhciBUZXRoZXJCYXNlID0gdW5kZWZpbmVkO1xuaWYgKHR5cGVvZiBUZXRoZXJCYXNlID09PSAndW5kZWZpbmVkJykge1xuICBUZXRoZXJCYXNlID0geyBtb2R1bGVzOiBbXSB9O1xufVxuXG52YXIgemVyb0VsZW1lbnQgPSBudWxsO1xuXG4vLyBTYW1lIGFzIG5hdGl2ZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QsIGV4Y2VwdCBpdCB0YWtlcyBpbnRvIGFjY291bnQgcGFyZW50IDxmcmFtZT4gb2Zmc2V0c1xuLy8gaWYgdGhlIGVsZW1lbnQgbGllcyB3aXRoaW4gYSBuZXN0ZWQgZG9jdW1lbnQgKDxmcmFtZT4gb3IgPGlmcmFtZT4tbGlrZSkuXG5mdW5jdGlvbiBnZXRBY3R1YWxCb3VuZGluZ0NsaWVudFJlY3Qobm9kZSkge1xuICB2YXIgYm91bmRpbmdSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAvLyBUaGUgb3JpZ2luYWwgb2JqZWN0IHJldHVybmVkIGJ5IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyBpbW11dGFibGUsIHNvIHdlIGNsb25lIGl0XG4gIC8vIFdlIGNhbid0IHVzZSBleHRlbmQgYmVjYXVzZSB0aGUgcHJvcGVydGllcyBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgb2JqZWN0IGJ5IGhhc093blByb3BlcnR5IGluIElFOVxuICB2YXIgcmVjdCA9IHt9O1xuICBmb3IgKHZhciBrIGluIGJvdW5kaW5nUmVjdCkge1xuICAgIHJlY3Rba10gPSBib3VuZGluZ1JlY3Rba107XG4gIH1cblxuICBpZiAobm9kZS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCkge1xuICAgIHZhciBfZnJhbWVFbGVtZW50ID0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmZyYW1lRWxlbWVudDtcbiAgICBpZiAoX2ZyYW1lRWxlbWVudCkge1xuICAgICAgdmFyIGZyYW1lUmVjdCA9IGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdChfZnJhbWVFbGVtZW50KTtcbiAgICAgIHJlY3QudG9wICs9IGZyYW1lUmVjdC50b3A7XG4gICAgICByZWN0LmJvdHRvbSArPSBmcmFtZVJlY3QudG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IGZyYW1lUmVjdC5sZWZ0O1xuICAgICAgcmVjdC5yaWdodCArPSBmcmFtZVJlY3QubGVmdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50cyhlbCkge1xuICAvLyBJbiBmaXJlZm94IGlmIHRoZSBlbCBpcyBpbnNpZGUgYW4gaWZyYW1lIHdpdGggZGlzcGxheTogbm9uZTsgd2luZG93LmdldENvbXB1dGVkU3R5bGUoKSB3aWxsIHJldHVybiBudWxsO1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKSB8fCB7fTtcbiAgdmFyIHBvc2l0aW9uID0gY29tcHV0ZWRTdHlsZS5wb3NpdGlvbjtcbiAgdmFyIHBhcmVudHMgPSBbXTtcblxuICBpZiAocG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gW2VsXTtcbiAgfVxuXG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKChwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSkgJiYgcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgIHZhciBzdHlsZSA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBhcmVudCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc3R5bGUgPT09IG51bGwpIHtcbiAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgfVxuXG4gICAgdmFyIF9zdHlsZSA9IHN0eWxlO1xuICAgIHZhciBvdmVyZmxvdyA9IF9zdHlsZS5vdmVyZmxvdztcbiAgICB2YXIgb3ZlcmZsb3dYID0gX3N0eWxlLm92ZXJmbG93WDtcbiAgICB2YXIgb3ZlcmZsb3dZID0gX3N0eWxlLm92ZXJmbG93WTtcblxuICAgIGlmICgvKGF1dG98c2Nyb2xsKS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICAgIGlmIChwb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyB8fCBbJ3JlbGF0aXZlJywgJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihzdHlsZS5wb3NpdGlvbikgPj0gMCkge1xuICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwYXJlbnRzLnB1c2goZWwub3duZXJEb2N1bWVudC5ib2R5KTtcblxuICAvLyBJZiB0aGUgbm9kZSBpcyB3aXRoaW4gYSBmcmFtZSwgYWNjb3VudCBmb3IgdGhlIHBhcmVudCB3aW5kb3cgc2Nyb2xsXG4gIGlmIChlbC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCkge1xuICAgIHBhcmVudHMucHVzaChlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KTtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnRzO1xufVxuXG52YXIgdW5pcXVlSWQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiArK2lkO1xuICB9O1xufSkoKTtcblxudmFyIHplcm9Qb3NDYWNoZSA9IHt9O1xudmFyIGdldE9yaWdpbiA9IGZ1bmN0aW9uIGdldE9yaWdpbigpIHtcbiAgLy8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHVuZm9ydHVuYXRlbHkgdG9vIGFjY3VyYXRlLiAgSXQgaW50cm9kdWNlcyBhIHBpeGVsIG9yIHR3byBvZlxuICAvLyBqaXR0ZXIgYXMgdGhlIHVzZXIgc2Nyb2xscyB0aGF0IG1lc3NlcyB3aXRoIG91ciBhYmlsaXR5IHRvIGRldGVjdCBpZiB0d28gcG9zaXRpb25zXG4gIC8vIGFyZSBlcXVpdmlsYW50IG9yIG5vdC4gIFdlIHBsYWNlIGFuIGVsZW1lbnQgYXQgdGhlIHRvcCBsZWZ0IG9mIHRoZSBwYWdlIHRoYXQgd2lsbFxuICAvLyBnZXQgdGhlIHNhbWUgaml0dGVyLCBzbyB3ZSBjYW4gY2FuY2VsIHRoZSB0d28gb3V0LlxuICB2YXIgbm9kZSA9IHplcm9FbGVtZW50O1xuICBpZiAoIW5vZGUgfHwgIWRvY3VtZW50LmJvZHkuY29udGFpbnMobm9kZSkpIHtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGV0aGVyLWlkJywgdW5pcXVlSWQoKSk7XG4gICAgZXh0ZW5kKG5vZGUuc3R5bGUsIHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcblxuICAgIHplcm9FbGVtZW50ID0gbm9kZTtcbiAgfVxuXG4gIHZhciBpZCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRldGhlci1pZCcpO1xuICBpZiAodHlwZW9mIHplcm9Qb3NDYWNoZVtpZF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgemVyb1Bvc0NhY2hlW2lkXSA9IGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdChub2RlKTtcblxuICAgIC8vIENsZWFyIHRoZSBjYWNoZSB3aGVuIHRoaXMgcG9zaXRpb24gY2FsbCBpcyBkb25lXG4gICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgZGVsZXRlIHplcm9Qb3NDYWNoZVtpZF07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gemVyb1Bvc0NhY2hlW2lkXTtcbn07XG5cbmZ1bmN0aW9uIHJlbW92ZVV0aWxFbGVtZW50cygpIHtcbiAgaWYgKHplcm9FbGVtZW50KSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh6ZXJvRWxlbWVudCk7XG4gIH1cbiAgemVyb0VsZW1lbnQgPSBudWxsO1xufTtcblxuZnVuY3Rpb24gZ2V0Qm91bmRzKGVsKSB7XG4gIHZhciBkb2MgPSB1bmRlZmluZWQ7XG4gIGlmIChlbCA9PT0gZG9jdW1lbnQpIHtcbiAgICBkb2MgPSBkb2N1bWVudDtcbiAgICBlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuICB9XG5cbiAgdmFyIGRvY0VsID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuICB2YXIgYm94ID0gZ2V0QWN0dWFsQm91bmRpbmdDbGllbnRSZWN0KGVsKTtcblxuICB2YXIgb3JpZ2luID0gZ2V0T3JpZ2luKCk7XG5cbiAgYm94LnRvcCAtPSBvcmlnaW4udG9wO1xuICBib3gubGVmdCAtPSBvcmlnaW4ubGVmdDtcblxuICBpZiAodHlwZW9mIGJveC53aWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBib3gud2lkdGggPSBkb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRoIC0gYm94LmxlZnQgLSBib3gucmlnaHQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBib3guaGVpZ2h0ID09PSAndW5kZWZpbmVkJykge1xuICAgIGJveC5oZWlnaHQgPSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCAtIGJveC50b3AgLSBib3guYm90dG9tO1xuICB9XG5cbiAgYm94LnRvcCA9IGJveC50b3AgLSBkb2NFbC5jbGllbnRUb3A7XG4gIGJveC5sZWZ0ID0gYm94LmxlZnQgLSBkb2NFbC5jbGllbnRMZWZ0O1xuICBib3gucmlnaHQgPSBkb2MuYm9keS5jbGllbnRXaWR0aCAtIGJveC53aWR0aCAtIGJveC5sZWZ0O1xuICBib3guYm90dG9tID0gZG9jLmJvZHkuY2xpZW50SGVpZ2h0IC0gYm94LmhlaWdodCAtIGJveC50b3A7XG5cbiAgcmV0dXJuIGJveDtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsKSB7XG4gIHJldHVybiBlbC5vZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG52YXIgX3Njcm9sbEJhclNpemUgPSBudWxsO1xuZnVuY3Rpb24gZ2V0U2Nyb2xsQmFyU2l6ZSgpIHtcbiAgaWYgKF9zY3JvbGxCYXJTaXplKSB7XG4gICAgcmV0dXJuIF9zY3JvbGxCYXJTaXplO1xuICB9XG4gIHZhciBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpbm5lci5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgaW5uZXIuc3R5bGUuaGVpZ2h0ID0gJzIwMHB4JztcblxuICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZXh0ZW5kKG91dGVyLnN0eWxlLCB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgIHdpZHRoOiAnMjAwcHgnLFxuICAgIGhlaWdodDogJzE1MHB4JyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfSk7XG5cbiAgb3V0ZXIuYXBwZW5kQ2hpbGQoaW5uZXIpO1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuXG4gIHZhciB3aWR0aENvbnRhaW5lZCA9IGlubmVyLm9mZnNldFdpZHRoO1xuICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICB2YXIgd2lkdGhTY3JvbGwgPSBpbm5lci5vZmZzZXRXaWR0aDtcblxuICBpZiAod2lkdGhDb250YWluZWQgPT09IHdpZHRoU2Nyb2xsKSB7XG4gICAgd2lkdGhTY3JvbGwgPSBvdXRlci5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuXG4gIHZhciB3aWR0aCA9IHdpZHRoQ29udGFpbmVkIC0gd2lkdGhTY3JvbGw7XG5cbiAgX3Njcm9sbEJhclNpemUgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiB3aWR0aCB9O1xuICByZXR1cm4gX3Njcm9sbEJhclNpemU7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgdmFyIG91dCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gIHZhciBhcmdzID0gW107XG5cbiAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcblxuICBhcmdzLnNsaWNlKDEpLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChvYmopIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKCh7fSkuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBvdXRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgbmFtZSkge1xuICBpZiAodHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG4gICAgICBpZiAoY2xzLnRyaW0oKSkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF58ICknICsgbmFtZS5zcGxpdCgnICcpLmpvaW4oJ3wnKSArICcoIHwkKScsICdnaScpO1xuICAgIHZhciBjbGFzc05hbWUgPSBnZXRDbGFzc05hbWUoZWwpLnJlcGxhY2UocmVnZXgsICcgJyk7XG4gICAgc2V0Q2xhc3NOYW1lKGVsLCBjbGFzc05hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgZWwuY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG5hbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcbiAgICAgIGlmIChjbHMudHJpbSgpKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZW1vdmVDbGFzcyhlbCwgbmFtZSk7XG4gICAgdmFyIGNscyA9IGdldENsYXNzTmFtZShlbCkgKyAoJyAnICsgbmFtZSk7XG4gICAgc2V0Q2xhc3NOYW1lKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgZWwuY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSk7XG4gIH1cbiAgdmFyIGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShlbCk7XG4gIHJldHVybiBuZXcgUmVnRXhwKCcoXnwgKScgKyBuYW1lICsgJyggfCQpJywgJ2dpJykudGVzdChjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRDbGFzc05hbWUoZWwpIHtcbiAgLy8gQ2FuJ3QgdXNlIGp1c3QgU1ZHQW5pbWF0ZWRTdHJpbmcgaGVyZSBzaW5jZSBub2RlcyB3aXRoaW4gYSBGcmFtZSBpbiBJRSBoYXZlXG4gIC8vIGNvbXBsZXRlbHkgc2VwYXJhdGVseSBTVkdBbmltYXRlZFN0cmluZyBiYXNlIGNsYXNzZXNcbiAgaWYgKGVsLmNsYXNzTmFtZSBpbnN0YW5jZW9mIGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuU1ZHQW5pbWF0ZWRTdHJpbmcpIHtcbiAgICByZXR1cm4gZWwuY2xhc3NOYW1lLmJhc2VWYWw7XG4gIH1cbiAgcmV0dXJuIGVsLmNsYXNzTmFtZTtcbn1cblxuZnVuY3Rpb24gc2V0Q2xhc3NOYW1lKGVsLCBjbGFzc05hbWUpIHtcbiAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMoZWwsIGFkZCwgYWxsKSB7XG4gIC8vIE9mIHRoZSBzZXQgb2YgJ2FsbCcgY2xhc3Nlcywgd2UgbmVlZCB0aGUgJ2FkZCcgY2xhc3NlcywgYW5kIG9ubHkgdGhlXG4gIC8vICdhZGQnIGNsYXNzZXMgdG8gYmUgc2V0LlxuICBhbGwuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG4gICAgaWYgKGFkZC5pbmRleE9mKGNscykgPT09IC0xICYmIGhhc0NsYXNzKGVsLCBjbHMpKSB7XG4gICAgICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGFkZC5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcbiAgICBpZiAoIWhhc0NsYXNzKGVsLCBjbHMpKSB7XG4gICAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGVmZXJyZWQgPSBbXTtcblxudmFyIGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZm4pIHtcbiAgZGVmZXJyZWQucHVzaChmbik7XG59O1xuXG52YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgdmFyIGZuID0gdW5kZWZpbmVkO1xuICB3aGlsZSAoZm4gPSBkZWZlcnJlZC5wb3AoKSkge1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBFdmVudGVkID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXZlbnRlZCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRlZCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRXZlbnRlZCwgW3tcbiAgICBrZXk6ICdvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBoYW5kbGVyLCBjdHgpIHtcbiAgICAgIHZhciBvbmNlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhcmd1bWVudHNbM107XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kaW5ncyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5iaW5kaW5ncyA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzW2V2ZW50XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5iaW5kaW5nc1tldmVudF0gPSBbXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYmluZGluZ3NbZXZlbnRdLnB1c2goeyBoYW5kbGVyOiBoYW5kbGVyLCBjdHg6IGN0eCwgb25jZTogb25jZSB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvbmNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25jZShldmVudCwgaGFuZGxlciwgY3R4KSB7XG4gICAgICB0aGlzLm9uKGV2ZW50LCBoYW5kbGVyLCBjdHgsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29mZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudCwgaGFuZGxlcikge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdGhpcy5iaW5kaW5nc1tldmVudF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkZWxldGUgdGhpcy5iaW5kaW5nc1tldmVudF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5iaW5kaW5nc1tldmVudF0ubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuYmluZGluZ3NbZXZlbnRdW2ldLmhhbmRsZXIgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ3NbZXZlbnRdLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKytpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3RyaWdnZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGluZ3MgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuYmluZGluZ3NbZXZlbnRdKSB7XG4gICAgICAgIHZhciBpID0gMDtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5iaW5kaW5nc1tldmVudF0ubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIF9iaW5kaW5ncyRldmVudCRpID0gdGhpcy5iaW5kaW5nc1tldmVudF1baV07XG4gICAgICAgICAgdmFyIGhhbmRsZXIgPSBfYmluZGluZ3MkZXZlbnQkaS5oYW5kbGVyO1xuICAgICAgICAgIHZhciBjdHggPSBfYmluZGluZ3MkZXZlbnQkaS5jdHg7XG4gICAgICAgICAgdmFyIG9uY2UgPSBfYmluZGluZ3MkZXZlbnQkaS5vbmNlO1xuXG4gICAgICAgICAgdmFyIGNvbnRleHQgPSBjdHg7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKTtcblxuICAgICAgICAgIGlmIChvbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRXZlbnRlZDtcbn0pKCk7XG5cblRldGhlckJhc2UuVXRpbHMgPSB7XG4gIGdldEFjdHVhbEJvdW5kaW5nQ2xpZW50UmVjdDogZ2V0QWN0dWFsQm91bmRpbmdDbGllbnRSZWN0LFxuICBnZXRTY3JvbGxQYXJlbnRzOiBnZXRTY3JvbGxQYXJlbnRzLFxuICBnZXRCb3VuZHM6IGdldEJvdW5kcyxcbiAgZ2V0T2Zmc2V0UGFyZW50OiBnZXRPZmZzZXRQYXJlbnQsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICB1cGRhdGVDbGFzc2VzOiB1cGRhdGVDbGFzc2VzLFxuICBkZWZlcjogZGVmZXIsXG4gIGZsdXNoOiBmbHVzaCxcbiAgdW5pcXVlSWQ6IHVuaXF1ZUlkLFxuICBFdmVudGVkOiBFdmVudGVkLFxuICBnZXRTY3JvbGxCYXJTaXplOiBnZXRTY3JvbGxCYXJTaXplLFxuICByZW1vdmVVdGlsRWxlbWVudHM6IHJlbW92ZVV0aWxFbGVtZW50c1xufTtcbi8qIGdsb2JhbHMgVGV0aGVyQmFzZSwgcGVyZm9ybWFuY2UgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10pIF9pWydyZXR1cm4nXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7IH0gfTsgfSkoKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3g2LCBfeDcsIF94OCkgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeDYsIHByb3BlcnR5ID0gX3g3LCByZWNlaXZlciA9IF94ODsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeDYgPSBwYXJlbnQ7IF94NyA9IHByb3BlcnR5OyBfeDggPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaWYgKHR5cGVvZiBUZXRoZXJCYXNlID09PSAndW5kZWZpbmVkJykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IGluY2x1ZGUgdGhlIHV0aWxzLmpzIGZpbGUgYmVmb3JlIHRldGhlci5qcycpO1xufVxuXG52YXIgX1RldGhlckJhc2UkVXRpbHMgPSBUZXRoZXJCYXNlLlV0aWxzO1xudmFyIGdldFNjcm9sbFBhcmVudHMgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRTY3JvbGxQYXJlbnRzO1xudmFyIGdldEJvdW5kcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldEJvdW5kcztcbnZhciBnZXRPZmZzZXRQYXJlbnQgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRPZmZzZXRQYXJlbnQ7XG52YXIgZXh0ZW5kID0gX1RldGhlckJhc2UkVXRpbHMuZXh0ZW5kO1xudmFyIGFkZENsYXNzID0gX1RldGhlckJhc2UkVXRpbHMuYWRkQ2xhc3M7XG52YXIgcmVtb3ZlQ2xhc3MgPSBfVGV0aGVyQmFzZSRVdGlscy5yZW1vdmVDbGFzcztcbnZhciB1cGRhdGVDbGFzc2VzID0gX1RldGhlckJhc2UkVXRpbHMudXBkYXRlQ2xhc3NlcztcbnZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xudmFyIGZsdXNoID0gX1RldGhlckJhc2UkVXRpbHMuZmx1c2g7XG52YXIgZ2V0U2Nyb2xsQmFyU2l6ZSA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldFNjcm9sbEJhclNpemU7XG52YXIgcmVtb3ZlVXRpbEVsZW1lbnRzID0gX1RldGhlckJhc2UkVXRpbHMucmVtb3ZlVXRpbEVsZW1lbnRzO1xuXG5mdW5jdGlvbiB3aXRoaW4oYSwgYikge1xuICB2YXIgZGlmZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IDEgOiBhcmd1bWVudHNbMl07XG5cbiAgcmV0dXJuIGEgKyBkaWZmID49IGIgJiYgYiA+PSBhIC0gZGlmZjtcbn1cblxudmFyIHRyYW5zZm9ybUtleSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIHZhciB0cmFuc2Zvcm1zID0gWyd0cmFuc2Zvcm0nLCAnV2Via2l0VHJhbnNmb3JtJywgJ09UcmFuc2Zvcm0nLCAnTW96VHJhbnNmb3JtJywgJ21zVHJhbnNmb3JtJ107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBrZXkgPSB0cmFuc2Zvcm1zW2ldO1xuICAgIGlmIChlbC5zdHlsZVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59KSgpO1xuXG52YXIgdGV0aGVycyA9IFtdO1xuXG52YXIgcG9zaXRpb24gPSBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgdGV0aGVycy5mb3JFYWNoKGZ1bmN0aW9uICh0ZXRoZXIpIHtcbiAgICB0ZXRoZXIucG9zaXRpb24oZmFsc2UpO1xuICB9KTtcbiAgZmx1c2goKTtcbn07XG5cbmZ1bmN0aW9uIG5vdygpIHtcbiAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gIH1cbiAgcmV0dXJuICtuZXcgRGF0ZSgpO1xufVxuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgbGFzdENhbGwgPSBudWxsO1xuICB2YXIgbGFzdER1cmF0aW9uID0gbnVsbDtcbiAgdmFyIHBlbmRpbmdUaW1lb3V0ID0gbnVsbDtcblxuICB2YXIgdGljayA9IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgaWYgKHR5cGVvZiBsYXN0RHVyYXRpb24gIT09ICd1bmRlZmluZWQnICYmIGxhc3REdXJhdGlvbiA+IDE2KSB7XG4gICAgICAvLyBXZSB2b2x1bnRhcmlseSB0aHJvdHRsZSBvdXJzZWx2ZXMgaWYgd2UgY2FuJ3QgbWFuYWdlIDYwZnBzXG4gICAgICBsYXN0RHVyYXRpb24gPSBNYXRoLm1pbihsYXN0RHVyYXRpb24gLSAxNiwgMjUwKTtcblxuICAgICAgLy8gSnVzdCBpbiBjYXNlIHRoaXMgaXMgdGhlIGxhc3QgZXZlbnQsIHJlbWVtYmVyIHRvIHBvc2l0aW9uIGp1c3Qgb25jZSBtb3JlXG4gICAgICBwZW5kaW5nVGltZW91dCA9IHNldFRpbWVvdXQodGljaywgMjUwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGxhc3RDYWxsICE9PSAndW5kZWZpbmVkJyAmJiBub3coKSAtIGxhc3RDYWxsIDwgMTApIHtcbiAgICAgIC8vIFNvbWUgYnJvd3NlcnMgY2FsbCBldmVudHMgYSBsaXR0bGUgdG9vIGZyZXF1ZW50bHksIHJlZnVzZSB0byBydW4gbW9yZSB0aGFuIGlzIHJlYXNvbmFibGVcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGVuZGluZ1RpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHBlbmRpbmdUaW1lb3V0KTtcbiAgICAgIHBlbmRpbmdUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBsYXN0Q2FsbCA9IG5vdygpO1xuICAgIHBvc2l0aW9uKCk7XG4gICAgbGFzdER1cmF0aW9uID0gbm93KCkgLSBsYXN0Q2FsbDtcbiAgfTtcblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIFsncmVzaXplJywgJ3Njcm9sbCcsICd0b3VjaG1vdmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRpY2spO1xuICAgIH0pO1xuICB9XG59KSgpO1xuXG52YXIgTUlSUk9SX0xSID0ge1xuICBjZW50ZXI6ICdjZW50ZXInLFxuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnXG59O1xuXG52YXIgTUlSUk9SX1RCID0ge1xuICBtaWRkbGU6ICdtaWRkbGUnLFxuICB0b3A6ICdib3R0b20nLFxuICBib3R0b206ICd0b3AnXG59O1xuXG52YXIgT0ZGU0VUX01BUCA9IHtcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBtaWRkbGU6ICc1MCUnLFxuICBjZW50ZXI6ICc1MCUnLFxuICBib3R0b206ICcxMDAlJyxcbiAgcmlnaHQ6ICcxMDAlJ1xufTtcblxudmFyIGF1dG9Ub0ZpeGVkQXR0YWNobWVudCA9IGZ1bmN0aW9uIGF1dG9Ub0ZpeGVkQXR0YWNobWVudChhdHRhY2htZW50LCByZWxhdGl2ZVRvQXR0YWNobWVudCkge1xuICB2YXIgbGVmdCA9IGF0dGFjaG1lbnQubGVmdDtcbiAgdmFyIHRvcCA9IGF0dGFjaG1lbnQudG9wO1xuXG4gIGlmIChsZWZ0ID09PSAnYXV0bycpIHtcbiAgICBsZWZ0ID0gTUlSUk9SX0xSW3JlbGF0aXZlVG9BdHRhY2htZW50LmxlZnRdO1xuICB9XG5cbiAgaWYgKHRvcCA9PT0gJ2F1dG8nKSB7XG4gICAgdG9wID0gTUlSUk9SX1RCW3JlbGF0aXZlVG9BdHRhY2htZW50LnRvcF07XG4gIH1cblxuICByZXR1cm4geyBsZWZ0OiBsZWZ0LCB0b3A6IHRvcCB9O1xufTtcblxudmFyIGF0dGFjaG1lbnRUb09mZnNldCA9IGZ1bmN0aW9uIGF0dGFjaG1lbnRUb09mZnNldChhdHRhY2htZW50KSB7XG4gIHZhciBsZWZ0ID0gYXR0YWNobWVudC5sZWZ0O1xuICB2YXIgdG9wID0gYXR0YWNobWVudC50b3A7XG5cbiAgaWYgKHR5cGVvZiBPRkZTRVRfTUFQW2F0dGFjaG1lbnQubGVmdF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGVmdCA9IE9GRlNFVF9NQVBbYXR0YWNobWVudC5sZWZ0XTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgT0ZGU0VUX01BUFthdHRhY2htZW50LnRvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdG9wID0gT0ZGU0VUX01BUFthdHRhY2htZW50LnRvcF07XG4gIH1cblxuICByZXR1cm4geyBsZWZ0OiBsZWZ0LCB0b3A6IHRvcCB9O1xufTtcblxuZnVuY3Rpb24gYWRkT2Zmc2V0KCkge1xuICB2YXIgb3V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgb2Zmc2V0cyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG9mZnNldHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBvZmZzZXRzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgdG9wID0gX3JlZi50b3A7XG4gICAgdmFyIGxlZnQgPSBfcmVmLmxlZnQ7XG5cbiAgICBpZiAodHlwZW9mIHRvcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRvcCA9IHBhcnNlRmxvYXQodG9wLCAxMCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxlZnQgPSBwYXJzZUZsb2F0KGxlZnQsIDEwKTtcbiAgICB9XG5cbiAgICBvdXQudG9wICs9IHRvcDtcbiAgICBvdXQubGVmdCArPSBsZWZ0O1xuICB9KTtcblxuICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBvZmZzZXRUb1B4KG9mZnNldCwgc2l6ZSkge1xuICBpZiAodHlwZW9mIG9mZnNldC5sZWZ0ID09PSAnc3RyaW5nJyAmJiBvZmZzZXQubGVmdC5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgb2Zmc2V0LmxlZnQgPSBwYXJzZUZsb2F0KG9mZnNldC5sZWZ0LCAxMCkgLyAxMDAgKiBzaXplLndpZHRoO1xuICB9XG4gIGlmICh0eXBlb2Ygb2Zmc2V0LnRvcCA9PT0gJ3N0cmluZycgJiYgb2Zmc2V0LnRvcC5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgb2Zmc2V0LnRvcCA9IHBhcnNlRmxvYXQob2Zmc2V0LnRvcCwgMTApIC8gMTAwICogc2l6ZS5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG52YXIgcGFyc2VPZmZzZXQgPSBmdW5jdGlvbiBwYXJzZU9mZnNldCh2YWx1ZSkge1xuICB2YXIgX3ZhbHVlJHNwbGl0ID0gdmFsdWUuc3BsaXQoJyAnKTtcblxuICB2YXIgX3ZhbHVlJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF92YWx1ZSRzcGxpdCwgMik7XG5cbiAgdmFyIHRvcCA9IF92YWx1ZSRzcGxpdDJbMF07XG4gIHZhciBsZWZ0ID0gX3ZhbHVlJHNwbGl0MlsxXTtcblxuICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xufTtcbnZhciBwYXJzZUF0dGFjaG1lbnQgPSBwYXJzZU9mZnNldDtcblxudmFyIFRldGhlckNsYXNzID0gKGZ1bmN0aW9uIChfRXZlbnRlZCkge1xuICBfaW5oZXJpdHMoVGV0aGVyQ2xhc3MsIF9FdmVudGVkKTtcblxuICBmdW5jdGlvbiBUZXRoZXJDbGFzcyhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXRoZXJDbGFzcyk7XG5cbiAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihUZXRoZXJDbGFzcy5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLmJpbmQodGhpcyk7XG5cbiAgICB0ZXRoZXJzLnB1c2godGhpcyk7XG5cbiAgICB0aGlzLmhpc3RvcnkgPSBbXTtcblxuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zLCBmYWxzZSk7XG5cbiAgICBUZXRoZXJCYXNlLm1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlKSB7XG4gICAgICBpZiAodHlwZW9mIG1vZHVsZS5pbml0aWFsaXplICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtb2R1bGUuaW5pdGlhbGl6ZS5jYWxsKF90aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMucG9zaXRpb24oKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUZXRoZXJDbGFzcywgW3tcbiAgICBrZXk6ICdnZXRDbGFzcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENsYXNzKCkge1xuICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/ICcnIDogYXJndW1lbnRzWzBdO1xuICAgICAgdmFyIGNsYXNzZXMgPSB0aGlzLm9wdGlvbnMuY2xhc3NlcztcblxuICAgICAgaWYgKHR5cGVvZiBjbGFzc2VzICE9PSAndW5kZWZpbmVkJyAmJiBjbGFzc2VzW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGFzc2VzW2tleV07XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5jbGFzc1ByZWZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsYXNzUHJlZml4ICsgJy0nICsga2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRPcHRpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMV07XG5cbiAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgb2Zmc2V0OiAnMCAwJyxcbiAgICAgICAgdGFyZ2V0T2Zmc2V0OiAnMCAwJyxcbiAgICAgICAgdGFyZ2V0QXR0YWNobWVudDogJ2F1dG8gYXV0bycsXG4gICAgICAgIGNsYXNzUHJlZml4OiAndGV0aGVyJ1xuICAgICAgfTtcblxuICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgdmFyIF9vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgdmFyIGVsZW1lbnQgPSBfb3B0aW9ucy5lbGVtZW50O1xuICAgICAgdmFyIHRhcmdldCA9IF9vcHRpb25zLnRhcmdldDtcbiAgICAgIHZhciB0YXJnZXRNb2RpZmllciA9IF9vcHRpb25zLnRhcmdldE1vZGlmaWVyO1xuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICB0aGlzLnRhcmdldE1vZGlmaWVyID0gdGFyZ2V0TW9kaWZpZXI7XG5cbiAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgICAgICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIHRoaXMudGFyZ2V0TW9kaWZpZXIgPSAndmlzaWJsZSc7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0ID09PSAnc2Nyb2xsLWhhbmRsZScpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB0aGlzLnRhcmdldE1vZGlmaWVyID0gJ3Njcm9sbC1oYW5kbGUnO1xuICAgICAgfVxuXG4gICAgICBbJ2VsZW1lbnQnLCAndGFyZ2V0J10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXMyW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXRoZXIgRXJyb3I6IEJvdGggZWxlbWVudCBhbmQgdGFyZ2V0IG11c3QgYmUgZGVmaW5lZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpczJba2V5XS5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgX3RoaXMyW2tleV0gPSBfdGhpczJba2V5XVswXTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoaXMyW2tleV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgX3RoaXMyW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKF90aGlzMltrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGFkZENsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZWxlbWVudCcpKTtcbiAgICAgIGlmICghKHRoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcbiAgICAgICAgYWRkQ2xhc3ModGhpcy50YXJnZXQsIHRoaXMuZ2V0Q2xhc3MoJ3RhcmdldCcpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYXR0YWNobWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RldGhlciBFcnJvcjogWW91IG11c3QgcHJvdmlkZSBhbiBhdHRhY2htZW50Jyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudGFyZ2V0QXR0YWNobWVudCA9IHBhcnNlQXR0YWNobWVudCh0aGlzLm9wdGlvbnMudGFyZ2V0QXR0YWNobWVudCk7XG4gICAgICB0aGlzLmF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQodGhpcy5vcHRpb25zLmF0dGFjaG1lbnQpO1xuICAgICAgdGhpcy5vZmZzZXQgPSBwYXJzZU9mZnNldCh0aGlzLm9wdGlvbnMub2Zmc2V0KTtcbiAgICAgIHRoaXMudGFyZ2V0T2Zmc2V0ID0gcGFyc2VPZmZzZXQodGhpcy5vcHRpb25zLnRhcmdldE9mZnNldCk7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zY3JvbGxQYXJlbnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudGFyZ2V0TW9kaWZpZXIgPT09ICdzY3JvbGwtaGFuZGxlJykge1xuICAgICAgICB0aGlzLnNjcm9sbFBhcmVudHMgPSBbdGhpcy50YXJnZXRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnRzID0gZ2V0U2Nyb2xsUGFyZW50cyh0aGlzLnRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKHRoaXMub3B0aW9ucy5lbmFibGVkID09PSBmYWxzZSkpIHtcbiAgICAgICAgdGhpcy5lbmFibGUocG9zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUYXJnZXRCb3VuZHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUYXJnZXRCb3VuZHMoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0TW9kaWZpZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0aGlzLnRhcmdldE1vZGlmaWVyID09PSAndmlzaWJsZScpIHtcbiAgICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRvcDogcGFnZVlPZmZzZXQsIGxlZnQ6IHBhZ2VYT2Zmc2V0LCBoZWlnaHQ6IGlubmVySGVpZ2h0LCB3aWR0aDogaW5uZXJXaWR0aCB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYm91bmRzID0gZ2V0Qm91bmRzKHRoaXMudGFyZ2V0KTtcblxuICAgICAgICAgICAgdmFyIG91dCA9IHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiBib3VuZHMuaGVpZ2h0LFxuICAgICAgICAgICAgICB3aWR0aDogYm91bmRzLndpZHRoLFxuICAgICAgICAgICAgICB0b3A6IGJvdW5kcy50b3AsXG4gICAgICAgICAgICAgIGxlZnQ6IGJvdW5kcy5sZWZ0XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5taW4ob3V0LmhlaWdodCwgYm91bmRzLmhlaWdodCAtIChwYWdlWU9mZnNldCAtIGJvdW5kcy50b3ApKTtcbiAgICAgICAgICAgIG91dC5oZWlnaHQgPSBNYXRoLm1pbihvdXQuaGVpZ2h0LCBib3VuZHMuaGVpZ2h0IC0gKGJvdW5kcy50b3AgKyBib3VuZHMuaGVpZ2h0IC0gKHBhZ2VZT2Zmc2V0ICsgaW5uZXJIZWlnaHQpKSk7XG4gICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5taW4oaW5uZXJIZWlnaHQsIG91dC5oZWlnaHQpO1xuICAgICAgICAgICAgb3V0LmhlaWdodCAtPSAyO1xuXG4gICAgICAgICAgICBvdXQud2lkdGggPSBNYXRoLm1pbihvdXQud2lkdGgsIGJvdW5kcy53aWR0aCAtIChwYWdlWE9mZnNldCAtIGJvdW5kcy5sZWZ0KSk7XG4gICAgICAgICAgICBvdXQud2lkdGggPSBNYXRoLm1pbihvdXQud2lkdGgsIGJvdW5kcy53aWR0aCAtIChib3VuZHMubGVmdCArIGJvdW5kcy53aWR0aCAtIChwYWdlWE9mZnNldCArIGlubmVyV2lkdGgpKSk7XG4gICAgICAgICAgICBvdXQud2lkdGggPSBNYXRoLm1pbihpbm5lcldpZHRoLCBvdXQud2lkdGgpO1xuICAgICAgICAgICAgb3V0LndpZHRoIC09IDI7XG5cbiAgICAgICAgICAgIGlmIChvdXQudG9wIDwgcGFnZVlPZmZzZXQpIHtcbiAgICAgICAgICAgICAgb3V0LnRvcCA9IHBhZ2VZT2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG91dC5sZWZ0IDwgcGFnZVhPZmZzZXQpIHtcbiAgICAgICAgICAgICAgb3V0LmxlZnQgPSBwYWdlWE9mZnNldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXRNb2RpZmllciA9PT0gJ3Njcm9sbC1oYW5kbGUnKSB7XG4gICAgICAgICAgdmFyIGJvdW5kcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICAgICAgaWYgKHRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICAgICAgICBib3VuZHMgPSB7XG4gICAgICAgICAgICAgIGxlZnQ6IHBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgICB0b3A6IHBhZ2VZT2Zmc2V0LFxuICAgICAgICAgICAgICBoZWlnaHQ6IGlubmVySGVpZ2h0LFxuICAgICAgICAgICAgICB3aWR0aDogaW5uZXJXaWR0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm91bmRzID0gZ2V0Qm91bmRzKHRhcmdldCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuXG4gICAgICAgICAgdmFyIGhhc0JvdHRvbVNjcm9sbCA9IHRhcmdldC5zY3JvbGxXaWR0aCA+IHRhcmdldC5jbGllbnRXaWR0aCB8fCBbc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WF0uaW5kZXhPZignc2Nyb2xsJykgPj0gMCB8fCB0aGlzLnRhcmdldCAhPT0gZG9jdW1lbnQuYm9keTtcblxuICAgICAgICAgIHZhciBzY3JvbGxCb3R0b20gPSAwO1xuICAgICAgICAgIGlmIChoYXNCb3R0b21TY3JvbGwpIHtcbiAgICAgICAgICAgIHNjcm9sbEJvdHRvbSA9IDE1O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBoZWlnaHQgPSBib3VuZHMuaGVpZ2h0IC0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJUb3BXaWR0aCkgLSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKSAtIHNjcm9sbEJvdHRvbTtcblxuICAgICAgICAgIHZhciBvdXQgPSB7XG4gICAgICAgICAgICB3aWR0aDogMTUsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAqIDAuOTc1ICogKGhlaWdodCAvIHRhcmdldC5zY3JvbGxIZWlnaHQpLFxuICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGggLSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlckxlZnRXaWR0aCkgLSAxNVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgZml0QWRqID0gMDtcbiAgICAgICAgICBpZiAoaGVpZ2h0IDwgNDA4ICYmIHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICBmaXRBZGogPSAtMC4wMDAxMSAqIE1hdGgucG93KGhlaWdodCwgMikgLSAwLjAwNzI3ICogaGVpZ2h0ICsgMjIuNTg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5tYXgob3V0LmhlaWdodCwgMjQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzY3JvbGxQZXJjZW50YWdlID0gdGhpcy50YXJnZXQuc2Nyb2xsVG9wIC8gKHRhcmdldC5zY3JvbGxIZWlnaHQgLSBoZWlnaHQpO1xuICAgICAgICAgIG91dC50b3AgPSBzY3JvbGxQZXJjZW50YWdlICogKGhlaWdodCAtIG91dC5oZWlnaHQgLSBmaXRBZGopICsgYm91bmRzLnRvcCArIHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyVG9wV2lkdGgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5tYXgob3V0LmhlaWdodCwgMjQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXRCb3VuZHModGhpcy50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NsZWFyQ2FjaGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckNhY2hlKCkge1xuICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjYWNoZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhY2hlKGssIGdldHRlcikge1xuICAgICAgLy8gTW9yZSB0aGFuIG9uZSBtb2R1bGUgd2lsbCBvZnRlbiBuZWVkIHRoZSBzYW1lIERPTSBpbmZvLCBzb1xuICAgICAgLy8gd2Uga2VlcCBhIGNhY2hlIHdoaWNoIGlzIGNsZWFyZWQgb24gZWFjaCBwb3NpdGlvbiBjYWxsXG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2NhY2hlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2NhY2hlW2tdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLl9jYWNoZVtrXSA9IGdldHRlci5jYWxsKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVba107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBwb3MgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzBdO1xuXG4gICAgICBpZiAoISh0aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG4gICAgICAgIGFkZENsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmdldENsYXNzKCdlbmFibGVkJykpO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3ModGhpcy5lbGVtZW50LCB0aGlzLmdldENsYXNzKCdlbmFibGVkJykpO1xuICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgdGhpcy5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50ICE9PSBfdGhpczMudGFyZ2V0Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgICBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgX3RoaXMzLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwb3MpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHJlbW92ZUNsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmdldENsYXNzKCdlbmFibGVkJykpO1xuICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50LCB0aGlzLmdldENsYXNzKCdlbmFibGVkJykpO1xuICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zY3JvbGxQYXJlbnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzNC5wb3NpdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuXG4gICAgICB0ZXRoZXJzLmZvckVhY2goZnVuY3Rpb24gKHRldGhlciwgaSkge1xuICAgICAgICBpZiAodGV0aGVyID09PSBfdGhpczUpIHtcbiAgICAgICAgICB0ZXRoZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgZWxlbWVudHMgd2Ugd2VyZSB1c2luZyBmb3IgY29udmVuaWVuY2UgZnJvbSB0aGUgRE9NXG4gICAgICBpZiAodGV0aGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVtb3ZlVXRpbEVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlQXR0YWNoQ2xhc3NlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUF0dGFjaENsYXNzZXMoZWxlbWVudEF0dGFjaCwgdGFyZ2V0QXR0YWNoKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgZWxlbWVudEF0dGFjaCA9IGVsZW1lbnRBdHRhY2ggfHwgdGhpcy5hdHRhY2htZW50O1xuICAgICAgdGFyZ2V0QXR0YWNoID0gdGFyZ2V0QXR0YWNoIHx8IHRoaXMudGFyZ2V0QXR0YWNobWVudDtcbiAgICAgIHZhciBzaWRlcyA9IFsnbGVmdCcsICd0b3AnLCAnYm90dG9tJywgJ3JpZ2h0JywgJ21pZGRsZScsICdjZW50ZXInXTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLmxlbmd0aCkge1xuICAgICAgICAvLyB1cGRhdGVBdHRhY2hDbGFzc2VzIGNhbiBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgaW4gYSBwb3NpdGlvbiBjYWxsLCBzb1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIGNsZWFuIHVwIGFmdGVyIG91cnNlbHZlcyBzdWNoIHRoYXQgd2hlbiB0aGUgbGFzdCBkZWZlciBnZXRzXG4gICAgICAgIC8vIHJhbiBpdCBkb2Vzbid0IGFkZCBhbnkgZXh0cmEgY2xhc3NlcyBmcm9tIHByZXZpb3VzIGNhbGxzLlxuICAgICAgICB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLnNwbGljZSgwLCB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyA9IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFkZCA9IHRoaXMuX2FkZEF0dGFjaENsYXNzZXM7XG5cbiAgICAgIGlmIChlbGVtZW50QXR0YWNoLnRvcCkge1xuICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCdlbGVtZW50LWF0dGFjaGVkJykgKyAnLScgKyBlbGVtZW50QXR0YWNoLnRvcCk7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudEF0dGFjaC5sZWZ0KSB7XG4gICAgICAgIGFkZC5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ2VsZW1lbnQtYXR0YWNoZWQnKSArICctJyArIGVsZW1lbnRBdHRhY2gubGVmdCk7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0QXR0YWNoLnRvcCkge1xuICAgICAgICBhZGQucHVzaCh0aGlzLmdldENsYXNzKCd0YXJnZXQtYXR0YWNoZWQnKSArICctJyArIHRhcmdldEF0dGFjaC50b3ApO1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldEF0dGFjaC5sZWZ0KSB7XG4gICAgICAgIGFkZC5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ3RhcmdldC1hdHRhY2hlZCcpICsgJy0nICsgdGFyZ2V0QXR0YWNoLmxlZnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWxsID0gW107XG4gICAgICBzaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgICAgIGFsbC5wdXNoKF90aGlzNi5nZXRDbGFzcygnZWxlbWVudC1hdHRhY2hlZCcpICsgJy0nICsgc2lkZSk7XG4gICAgICAgIGFsbC5wdXNoKF90aGlzNi5nZXRDbGFzcygndGFyZ2V0LWF0dGFjaGVkJykgKyAnLScgKyBzaWRlKTtcbiAgICAgIH0pO1xuXG4gICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiBfdGhpczYuX2FkZEF0dGFjaENsYXNzZXMgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXM2LmVsZW1lbnQsIF90aGlzNi5fYWRkQXR0YWNoQ2xhc3NlcywgYWxsKTtcbiAgICAgICAgaWYgKCEoX3RoaXM2Lm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgdXBkYXRlQ2xhc3NlcyhfdGhpczYudGFyZ2V0LCBfdGhpczYuX2FkZEF0dGFjaENsYXNzZXMsIGFsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgX3RoaXM2Ll9hZGRBdHRhY2hDbGFzc2VzO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgZmx1c2hDaGFuZ2VzID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgLy8gZmx1c2hDaGFuZ2VzIGNvbW1pdHMgdGhlIGNoYW5nZXMgaW1tZWRpYXRlbHksIGxlYXZlIHRydWUgdW5sZXNzIHlvdSBhcmUgcG9zaXRpb25pbmcgbXVsdGlwbGVcbiAgICAgIC8vIHRldGhlcnMgKGluIHdoaWNoIGNhc2UgY2FsbCBUZXRoZXIuVXRpbHMuZmx1c2ggeW91cnNlbGYgd2hlbiB5b3UncmUgZG9uZSlcblxuICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcblxuICAgICAgLy8gVHVybiAnYXV0bycgYXR0YWNobWVudHMgaW50byB0aGUgYXBwcm9wcmlhdGUgY29ybmVyIG9yIGVkZ2VcbiAgICAgIHZhciB0YXJnZXRBdHRhY2htZW50ID0gYXV0b1RvRml4ZWRBdHRhY2htZW50KHRoaXMudGFyZ2V0QXR0YWNobWVudCwgdGhpcy5hdHRhY2htZW50KTtcblxuICAgICAgdGhpcy51cGRhdGVBdHRhY2hDbGFzc2VzKHRoaXMuYXR0YWNobWVudCwgdGFyZ2V0QXR0YWNobWVudCk7XG5cbiAgICAgIHZhciBlbGVtZW50UG9zID0gdGhpcy5jYWNoZSgnZWxlbWVudC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRCb3VuZHMoX3RoaXM3LmVsZW1lbnQpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciB3aWR0aCA9IGVsZW1lbnRQb3Mud2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudFBvcy5oZWlnaHQ7XG5cbiAgICAgIGlmICh3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDAgJiYgdHlwZW9mIHRoaXMubGFzdFNpemUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBfbGFzdFNpemUgPSB0aGlzLmxhc3RTaXplO1xuXG4gICAgICAgIC8vIFdlIGNhY2hlIHRoZSBoZWlnaHQgYW5kIHdpZHRoIHRvIG1ha2UgaXQgcG9zc2libGUgdG8gcG9zaXRpb24gZWxlbWVudHMgdGhhdCBhcmVcbiAgICAgICAgLy8gZ2V0dGluZyBoaWRkZW4uXG4gICAgICAgIHdpZHRoID0gX2xhc3RTaXplLndpZHRoO1xuICAgICAgICBoZWlnaHQgPSBfbGFzdFNpemUuaGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYXN0U2l6ZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0UG9zID0gdGhpcy5jYWNoZSgndGFyZ2V0LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNy5nZXRUYXJnZXRCb3VuZHMoKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHRhcmdldFNpemUgPSB0YXJnZXRQb3M7XG5cbiAgICAgIC8vIEdldCBhbiBhY3R1YWwgcHggb2Zmc2V0IGZyb20gdGhlIGF0dGFjaG1lbnRcbiAgICAgIHZhciBvZmZzZXQgPSBvZmZzZXRUb1B4KGF0dGFjaG1lbnRUb09mZnNldCh0aGlzLmF0dGFjaG1lbnQpLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7XG4gICAgICB2YXIgdGFyZ2V0T2Zmc2V0ID0gb2Zmc2V0VG9QeChhdHRhY2htZW50VG9PZmZzZXQodGFyZ2V0QXR0YWNobWVudCksIHRhcmdldFNpemUpO1xuXG4gICAgICB2YXIgbWFudWFsT2Zmc2V0ID0gb2Zmc2V0VG9QeCh0aGlzLm9mZnNldCwgeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xuICAgICAgdmFyIG1hbnVhbFRhcmdldE9mZnNldCA9IG9mZnNldFRvUHgodGhpcy50YXJnZXRPZmZzZXQsIHRhcmdldFNpemUpO1xuXG4gICAgICAvLyBBZGQgdGhlIG1hbnVhbGx5IHByb3ZpZGVkIG9mZnNldFxuICAgICAgb2Zmc2V0ID0gYWRkT2Zmc2V0KG9mZnNldCwgbWFudWFsT2Zmc2V0KTtcbiAgICAgIHRhcmdldE9mZnNldCA9IGFkZE9mZnNldCh0YXJnZXRPZmZzZXQsIG1hbnVhbFRhcmdldE9mZnNldCk7XG5cbiAgICAgIC8vIEl0J3Mgbm93IG91ciBnb2FsIHRvIG1ha2UgKGVsZW1lbnQgcG9zaXRpb24gKyBvZmZzZXQpID09ICh0YXJnZXQgcG9zaXRpb24gKyB0YXJnZXQgb2Zmc2V0KVxuICAgICAgdmFyIGxlZnQgPSB0YXJnZXRQb3MubGVmdCArIHRhcmdldE9mZnNldC5sZWZ0IC0gb2Zmc2V0LmxlZnQ7XG4gICAgICB2YXIgdG9wID0gdGFyZ2V0UG9zLnRvcCArIHRhcmdldE9mZnNldC50b3AgLSBvZmZzZXQudG9wO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFRldGhlckJhc2UubW9kdWxlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgX21vZHVsZTIgPSBUZXRoZXJCYXNlLm1vZHVsZXNbaV07XG4gICAgICAgIHZhciByZXQgPSBfbW9kdWxlMi5wb3NpdGlvbi5jYWxsKHRoaXMsIHtcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIHRhcmdldEF0dGFjaG1lbnQ6IHRhcmdldEF0dGFjaG1lbnQsXG4gICAgICAgICAgdGFyZ2V0UG9zOiB0YXJnZXRQb3MsXG4gICAgICAgICAgZWxlbWVudFBvczogZWxlbWVudFBvcyxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICB0YXJnZXRPZmZzZXQ6IHRhcmdldE9mZnNldCxcbiAgICAgICAgICBtYW51YWxPZmZzZXQ6IG1hbnVhbE9mZnNldCxcbiAgICAgICAgICBtYW51YWxUYXJnZXRPZmZzZXQ6IG1hbnVhbFRhcmdldE9mZnNldCxcbiAgICAgICAgICBzY3JvbGxiYXJTaXplOiBzY3JvbGxiYXJTaXplLFxuICAgICAgICAgIGF0dGFjaG1lbnQ6IHRoaXMuYXR0YWNobWVudFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmV0ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcmV0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvcCA9IHJldC50b3A7XG4gICAgICAgICAgbGVmdCA9IHJldC5sZWZ0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGRlc2NyaWJlIHRoZSBwb3NpdGlvbiB0aHJlZSBkaWZmZXJlbnQgd2F5cyB0byBnaXZlIHRoZSBvcHRpbWl6ZXJcbiAgICAgIC8vIGEgY2hhbmNlIHRvIGRlY2lkZSB0aGUgYmVzdCBwb3NzaWJsZSB3YXkgdG8gcG9zaXRpb24gdGhlIGVsZW1lbnRcbiAgICAgIC8vIHdpdGggdGhlIGZld2VzdCByZXBhaW50cy5cbiAgICAgIHZhciBuZXh0ID0ge1xuICAgICAgICAvLyBJdCdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBwYWdlIChhYnNvbHV0ZSBwb3NpdGlvbmluZyB3aGVuXG4gICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIGEgY2hpbGQgb2YgdGhlIGJvZHkpXG4gICAgICAgIHBhZ2U6IHtcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gSXQncyBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQgKGZpeGVkIHBvc2l0aW9uaW5nKVxuICAgICAgICB2aWV3cG9ydDoge1xuICAgICAgICAgIHRvcDogdG9wIC0gcGFnZVlPZmZzZXQsXG4gICAgICAgICAgYm90dG9tOiBwYWdlWU9mZnNldCAtIHRvcCAtIGhlaWdodCArIGlubmVySGVpZ2h0LFxuICAgICAgICAgIGxlZnQ6IGxlZnQgLSBwYWdlWE9mZnNldCxcbiAgICAgICAgICByaWdodDogcGFnZVhPZmZzZXQgLSBsZWZ0IC0gd2lkdGggKyBpbm5lcldpZHRoXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBkb2MgPSB0aGlzLnRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgdmFyIHdpbiA9IGRvYy5kZWZhdWx0VmlldztcblxuICAgICAgdmFyIHNjcm9sbGJhclNpemUgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAod2luLmlubmVySGVpZ2h0ID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgc2Nyb2xsYmFyU2l6ZSA9IHRoaXMuY2FjaGUoJ3Njcm9sbGJhci1zaXplJywgZ2V0U2Nyb2xsQmFyU2l6ZSk7XG4gICAgICAgIG5leHQudmlld3BvcnQuYm90dG9tIC09IHNjcm9sbGJhclNpemUuaGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICBpZiAod2luLmlubmVyV2lkdGggPiBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSB7XG4gICAgICAgIHNjcm9sbGJhclNpemUgPSB0aGlzLmNhY2hlKCdzY3JvbGxiYXItc2l6ZScsIGdldFNjcm9sbEJhclNpemUpO1xuICAgICAgICBuZXh0LnZpZXdwb3J0LnJpZ2h0IC09IHNjcm9sbGJhclNpemUud2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChbJycsICdzdGF0aWMnXS5pbmRleE9mKGRvYy5ib2R5LnN0eWxlLnBvc2l0aW9uKSA9PT0gLTEgfHwgWycnLCAnc3RhdGljJ10uaW5kZXhPZihkb2MuYm9keS5wYXJlbnRFbGVtZW50LnN0eWxlLnBvc2l0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgLy8gQWJzb2x1dGUgcG9zaXRpb25pbmcgaW4gdGhlIGJvZHkgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGUgcGFnZSwgbm90IHRoZSAnaW5pdGlhbCBjb250YWluaW5nIGJsb2NrJ1xuICAgICAgICBuZXh0LnBhZ2UuYm90dG9tID0gZG9jLmJvZHkuc2Nyb2xsSGVpZ2h0IC0gdG9wIC0gaGVpZ2h0O1xuICAgICAgICBuZXh0LnBhZ2UucmlnaHQgPSBkb2MuYm9keS5zY3JvbGxXaWR0aCAtIGxlZnQgLSB3aWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMub3B0aW1pemF0aW9ucyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5vcHRpb25zLm9wdGltaXphdGlvbnMubW92ZUVsZW1lbnQgIT09IGZhbHNlICYmICEodHlwZW9mIHRoaXMudGFyZ2V0TW9kaWZpZXIgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSBfdGhpczcuY2FjaGUoJ3RhcmdldC1vZmZzZXRwYXJlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KF90aGlzNy50YXJnZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBvZmZzZXRQb3NpdGlvbiA9IF90aGlzNy5jYWNoZSgndGFyZ2V0LW9mZnNldHBhcmVudC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Qm91bmRzKG9mZnNldFBhcmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIG9mZnNldFBhcmVudFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpO1xuICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnRTaXplID0gb2Zmc2V0UG9zaXRpb247XG5cbiAgICAgICAgICB2YXIgb2Zmc2V0Qm9yZGVyID0ge307XG4gICAgICAgICAgWydUb3AnLCAnTGVmdCcsICdCb3R0b20nLCAnUmlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgICAgICAgICBvZmZzZXRCb3JkZXJbc2lkZS50b0xvd2VyQ2FzZSgpXSA9IHBhcnNlRmxvYXQob2Zmc2V0UGFyZW50U3R5bGVbJ2JvcmRlcicgKyBzaWRlICsgJ1dpZHRoJ10pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgb2Zmc2V0UG9zaXRpb24ucmlnaHQgPSBkb2MuYm9keS5zY3JvbGxXaWR0aCAtIG9mZnNldFBvc2l0aW9uLmxlZnQgLSBvZmZzZXRQYXJlbnRTaXplLndpZHRoICsgb2Zmc2V0Qm9yZGVyLnJpZ2h0O1xuICAgICAgICAgIG9mZnNldFBvc2l0aW9uLmJvdHRvbSA9IGRvYy5ib2R5LnNjcm9sbEhlaWdodCAtIG9mZnNldFBvc2l0aW9uLnRvcCAtIG9mZnNldFBhcmVudFNpemUuaGVpZ2h0ICsgb2Zmc2V0Qm9yZGVyLmJvdHRvbTtcblxuICAgICAgICAgIGlmIChuZXh0LnBhZ2UudG9wID49IG9mZnNldFBvc2l0aW9uLnRvcCArIG9mZnNldEJvcmRlci50b3AgJiYgbmV4dC5wYWdlLmJvdHRvbSA+PSBvZmZzZXRQb3NpdGlvbi5ib3R0b20pIHtcbiAgICAgICAgICAgIGlmIChuZXh0LnBhZ2UubGVmdCA+PSBvZmZzZXRQb3NpdGlvbi5sZWZ0ICsgb2Zmc2V0Qm9yZGVyLmxlZnQgJiYgbmV4dC5wYWdlLnJpZ2h0ID49IG9mZnNldFBvc2l0aW9uLnJpZ2h0KSB7XG4gICAgICAgICAgICAgIC8vIFdlJ3JlIHdpdGhpbiB0aGUgdmlzaWJsZSBwYXJ0IG9mIHRoZSB0YXJnZXQncyBzY3JvbGwgcGFyZW50XG4gICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBvZmZzZXRQYXJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IG9mZnNldFBhcmVudC5zY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgICAgIC8vIEl0J3MgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHRhcmdldCdzIG9mZnNldCBwYXJlbnQgKGFic29sdXRlIHBvc2l0aW9uaW5nIHdoZW5cbiAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgaXMgbW92ZWQgdG8gYmUgYSBjaGlsZCBvZiB0aGUgdGFyZ2V0J3Mgb2Zmc2V0IHBhcmVudCkuXG4gICAgICAgICAgICAgIG5leHQub2Zmc2V0ID0ge1xuICAgICAgICAgICAgICAgIHRvcDogbmV4dC5wYWdlLnRvcCAtIG9mZnNldFBvc2l0aW9uLnRvcCArIHNjcm9sbFRvcCAtIG9mZnNldEJvcmRlci50b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogbmV4dC5wYWdlLmxlZnQgLSBvZmZzZXRQb3NpdGlvbi5sZWZ0ICsgc2Nyb2xsTGVmdCAtIG9mZnNldEJvcmRlci5sZWZ0XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBjb3VsZCBhbHNvIHRyYXZlbCB1cCB0aGUgRE9NIGFuZCB0cnkgZWFjaCBjb250YWluaW5nIGNvbnRleHQsIHJhdGhlciB0aGFuIG9ubHlcbiAgICAgIC8vIGxvb2tpbmcgYXQgdGhlIGJvZHksIGJ1dCB3ZSdyZSBnb25uYSBnZXQgZGltaW5pc2hpbmcgcmV0dXJucy5cblxuICAgICAgdGhpcy5tb3ZlKG5leHQpO1xuXG4gICAgICB0aGlzLmhpc3RvcnkudW5zaGlmdChuZXh0KTtcblxuICAgICAgaWYgKHRoaXMuaGlzdG9yeS5sZW5ndGggPiAzKSB7XG4gICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsdXNoQ2hhbmdlcykge1xuICAgICAgICBmbHVzaCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBUSEUgSVNTVUVcbiAgfSwge1xuICAgIGtleTogJ21vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlKHBvcykge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIGlmICghKHR5cGVvZiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSAhPT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNhbWUgPSB7fTtcblxuICAgICAgZm9yICh2YXIgdHlwZSBpbiBwb3MpIHtcbiAgICAgICAgc2FtZVt0eXBlXSA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwb3NbdHlwZV0pIHtcbiAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5oaXN0b3J5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSB0aGlzLmhpc3RvcnlbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBvaW50W3R5cGVdICE9PSAndW5kZWZpbmVkJyAmJiAhd2l0aGluKHBvaW50W3R5cGVdW2tleV0sIHBvc1t0eXBlXVtrZXldKSkge1xuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgIHNhbWVbdHlwZV1ba2V5XSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjc3MgPSB7IHRvcDogJycsIGxlZnQ6ICcnLCByaWdodDogJycsIGJvdHRvbTogJycgfTtcblxuICAgICAgdmFyIHRyYW5zY3JpYmUgPSBmdW5jdGlvbiB0cmFuc2NyaWJlKF9zYW1lLCBfcG9zKSB7XG4gICAgICAgIHZhciBoYXNPcHRpbWl6YXRpb25zID0gdHlwZW9mIF90aGlzOC5vcHRpb25zLm9wdGltaXphdGlvbnMgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICB2YXIgZ3B1ID0gaGFzT3B0aW1pemF0aW9ucyA/IF90aGlzOC5vcHRpb25zLm9wdGltaXphdGlvbnMuZ3B1IDogbnVsbDtcbiAgICAgICAgaWYgKGdwdSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgeVBvcyA9IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgeFBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoX3NhbWUudG9wKSB7XG4gICAgICAgICAgICBjc3MudG9wID0gMDtcbiAgICAgICAgICAgIHlQb3MgPSBfcG9zLnRvcDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzLmJvdHRvbSA9IDA7XG4gICAgICAgICAgICB5UG9zID0gLV9wb3MuYm90dG9tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfc2FtZS5sZWZ0KSB7XG4gICAgICAgICAgICBjc3MubGVmdCA9IDA7XG4gICAgICAgICAgICB4UG9zID0gX3Bvcy5sZWZ0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc3MucmlnaHQgPSAwO1xuICAgICAgICAgICAgeFBvcyA9IC1fcG9zLnJpZ2h0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSkge1xuICAgICAgICAgICAgLy8gSHViU3BvdC90ZXRoZXIjMjA3XG4gICAgICAgICAgICB2YXIgcmV0aW5hID0gd2luZG93Lm1hdGNoTWVkaWEoJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDEuM2RwcHgpJykubWF0Y2hlcyB8fCB3aW5kb3cubWF0Y2hNZWRpYSgnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuMyknKS5tYXRjaGVzO1xuICAgICAgICAgICAgaWYgKCFyZXRpbmEpIHtcbiAgICAgICAgICAgICAgeFBvcyA9IE1hdGgucm91bmQoeFBvcyk7XG4gICAgICAgICAgICAgIHlQb3MgPSBNYXRoLnJvdW5kKHlQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNzc1t0cmFuc2Zvcm1LZXldID0gJ3RyYW5zbGF0ZVgoJyArIHhQb3MgKyAncHgpIHRyYW5zbGF0ZVkoJyArIHlQb3MgKyAncHgpJztcblxuICAgICAgICAgIGlmICh0cmFuc2Zvcm1LZXkgIT09ICdtc1RyYW5zZm9ybScpIHtcbiAgICAgICAgICAgIC8vIFRoZSBaIHRyYW5zZm9ybSB3aWxsIGtlZXAgdGhpcyBpbiB0aGUgR1BVIChmYXN0ZXIsIGFuZCBwcmV2ZW50cyBhcnRpZmFjdHMpLFxuICAgICAgICAgICAgLy8gYnV0IElFOSBkb2Vzbid0IHN1cHBvcnQgM2QgdHJhbnNmb3JtcyBhbmQgd2lsbCBjaG9rZS5cbiAgICAgICAgICAgIGNzc1t0cmFuc2Zvcm1LZXldICs9IFwiIHRyYW5zbGF0ZVooMClcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKF9zYW1lLnRvcCkge1xuICAgICAgICAgICAgY3NzLnRvcCA9IF9wb3MudG9wICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzLmJvdHRvbSA9IF9wb3MuYm90dG9tICsgJ3B4JztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3NhbWUubGVmdCkge1xuICAgICAgICAgICAgY3NzLmxlZnQgPSBfcG9zLmxlZnQgKyAncHgnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc3MucmlnaHQgPSBfcG9zLnJpZ2h0ICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtb3ZlZCA9IGZhbHNlO1xuICAgICAgaWYgKChzYW1lLnBhZ2UudG9wIHx8IHNhbWUucGFnZS5ib3R0b20pICYmIChzYW1lLnBhZ2UubGVmdCB8fCBzYW1lLnBhZ2UucmlnaHQpKSB7XG4gICAgICAgIGNzcy5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIHRyYW5zY3JpYmUoc2FtZS5wYWdlLCBwb3MucGFnZSk7XG4gICAgICB9IGVsc2UgaWYgKChzYW1lLnZpZXdwb3J0LnRvcCB8fCBzYW1lLnZpZXdwb3J0LmJvdHRvbSkgJiYgKHNhbWUudmlld3BvcnQubGVmdCB8fCBzYW1lLnZpZXdwb3J0LnJpZ2h0KSkge1xuICAgICAgICBjc3MucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgICAgICB0cmFuc2NyaWJlKHNhbWUudmlld3BvcnQsIHBvcy52aWV3cG9ydCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzYW1lLm9mZnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgc2FtZS5vZmZzZXQudG9wICYmIHNhbWUub2Zmc2V0LmxlZnQpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSBfdGhpczguY2FjaGUoJ3RhcmdldC1vZmZzZXRwYXJlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KF90aGlzOC50YXJnZXQpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGdldE9mZnNldFBhcmVudChfdGhpczguZWxlbWVudCkgIT09IG9mZnNldFBhcmVudCkge1xuICAgICAgICAgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczguZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF90aGlzOC5lbGVtZW50KTtcbiAgICAgICAgICAgICAgb2Zmc2V0UGFyZW50LmFwcGVuZENoaWxkKF90aGlzOC5lbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyYW5zY3JpYmUoc2FtZS5vZmZzZXQsIHBvcy5vZmZzZXQpO1xuICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNzcy5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIHRyYW5zY3JpYmUoeyB0b3A6IHRydWUsIGxlZnQ6IHRydWUgfSwgcG9zLnBhZ2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW1vdmVkKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYm9keUVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuYm9keUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50SXNCb2R5ID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgY3VycmVudE5vZGUgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgICB3aGlsZSAoY3VycmVudE5vZGUgJiYgY3VycmVudE5vZGUubm9kZVR5cGUgPT09IDEgJiYgY3VycmVudE5vZGUudGFnTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSkucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICAgIG9mZnNldFBhcmVudElzQm9keSA9IGZhbHNlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghb2Zmc2V0UGFyZW50SXNCb2R5KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBbnkgY3NzIGNoYW5nZSB3aWxsIHRyaWdnZXIgYSByZXBhaW50LCBzbyBsZXQncyBhdm9pZCBvbmUgaWYgbm90aGluZyBjaGFuZ2VkXG4gICAgICB2YXIgd3JpdGVDU1MgPSB7fTtcbiAgICAgIHZhciB3cml0ZSA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIga2V5IGluIGNzcykge1xuICAgICAgICB2YXIgdmFsID0gY3NzW2tleV07XG4gICAgICAgIHZhciBlbFZhbCA9IHRoaXMuZWxlbWVudC5zdHlsZVtrZXldO1xuXG4gICAgICAgIGlmIChlbFZhbCAhPT0gdmFsKSB7XG4gICAgICAgICAgd3JpdGUgPSB0cnVlO1xuICAgICAgICAgIHdyaXRlQ1NTW2tleV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHdyaXRlKSB7XG4gICAgICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBleHRlbmQoX3RoaXM4LmVsZW1lbnQuc3R5bGUsIHdyaXRlQ1NTKTtcbiAgICAgICAgICBfdGhpczgudHJpZ2dlcigncmVwb3NpdGlvbmVkJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUZXRoZXJDbGFzcztcbn0pKEV2ZW50ZWQpO1xuXG5UZXRoZXJDbGFzcy5tb2R1bGVzID0gW107XG5cblRldGhlckJhc2UucG9zaXRpb24gPSBwb3NpdGlvbjtcblxudmFyIFRldGhlciA9IGV4dGVuZChUZXRoZXJDbGFzcywgVGV0aGVyQmFzZSk7XG4vKiBnbG9iYWxzIFRldGhlckJhc2UgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10pIF9pWydyZXR1cm4nXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7IH0gfTsgfSkoKTtcblxudmFyIF9UZXRoZXJCYXNlJFV0aWxzID0gVGV0aGVyQmFzZS5VdGlscztcbnZhciBnZXRCb3VuZHMgPSBfVGV0aGVyQmFzZSRVdGlscy5nZXRCb3VuZHM7XG52YXIgZXh0ZW5kID0gX1RldGhlckJhc2UkVXRpbHMuZXh0ZW5kO1xudmFyIHVwZGF0ZUNsYXNzZXMgPSBfVGV0aGVyQmFzZSRVdGlscy51cGRhdGVDbGFzc2VzO1xudmFyIGRlZmVyID0gX1RldGhlckJhc2UkVXRpbHMuZGVmZXI7XG5cbnZhciBCT1VORFNfRk9STUFUID0gWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXTtcblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdSZWN0KHRldGhlciwgdG8pIHtcbiAgaWYgKHRvID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgIHRvID0gdGV0aGVyLnNjcm9sbFBhcmVudHNbMF07XG4gIH0gZWxzZSBpZiAodG8gPT09ICd3aW5kb3cnKSB7XG4gICAgdG8gPSBbcGFnZVhPZmZzZXQsIHBhZ2VZT2Zmc2V0LCBpbm5lcldpZHRoICsgcGFnZVhPZmZzZXQsIGlubmVySGVpZ2h0ICsgcGFnZVlPZmZzZXRdO1xuICB9XG5cbiAgaWYgKHRvID09PSBkb2N1bWVudCkge1xuICAgIHRvID0gdG8uZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0by5ub2RlVHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5vZGUgPSB0bztcbiAgICAgIHZhciBzaXplID0gZ2V0Qm91bmRzKHRvKTtcbiAgICAgIHZhciBwb3MgPSBzaXplO1xuICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0byk7XG5cbiAgICAgIHRvID0gW3Bvcy5sZWZ0LCBwb3MudG9wLCBzaXplLndpZHRoICsgcG9zLmxlZnQsIHNpemUuaGVpZ2h0ICsgcG9zLnRvcF07XG5cbiAgICAgIC8vIEFjY291bnQgYW55IHBhcmVudCBGcmFtZXMgc2Nyb2xsIG9mZnNldFxuICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgdmFyIHdpbiA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAgICAgdG9bMF0gKz0gd2luLnBhZ2VYT2Zmc2V0O1xuICAgICAgICB0b1sxXSArPSB3aW4ucGFnZVlPZmZzZXQ7XG4gICAgICAgIHRvWzJdICs9IHdpbi5wYWdlWE9mZnNldDtcbiAgICAgICAgdG9bM10gKz0gd2luLnBhZ2VZT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICBCT1VORFNfRk9STUFULmZvckVhY2goZnVuY3Rpb24gKHNpZGUsIGkpIHtcbiAgICAgICAgc2lkZSA9IHNpZGVbMF0udG9VcHBlckNhc2UoKSArIHNpZGUuc3Vic3RyKDEpO1xuICAgICAgICBpZiAoc2lkZSA9PT0gJ1RvcCcgfHwgc2lkZSA9PT0gJ0xlZnQnKSB7XG4gICAgICAgICAgdG9baV0gKz0gcGFyc2VGbG9hdChzdHlsZVsnYm9yZGVyJyArIHNpZGUgKyAnV2lkdGgnXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9baV0gLT0gcGFyc2VGbG9hdChzdHlsZVsnYm9yZGVyJyArIHNpZGUgKyAnV2lkdGgnXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cblRldGhlckJhc2UubW9kdWxlcy5wdXNoKHtcbiAgcG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKF9yZWYpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuICAgIHZhciBsZWZ0ID0gX3JlZi5sZWZ0O1xuICAgIHZhciB0YXJnZXRBdHRhY2htZW50ID0gX3JlZi50YXJnZXRBdHRhY2htZW50O1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuY29uc3RyYWludHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBfY2FjaGUgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRCb3VuZHMoX3RoaXMuZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGVpZ2h0ID0gX2NhY2hlLmhlaWdodDtcbiAgICB2YXIgd2lkdGggPSBfY2FjaGUud2lkdGg7XG5cbiAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwICYmIHR5cGVvZiB0aGlzLmxhc3RTaXplICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIF9sYXN0U2l6ZSA9IHRoaXMubGFzdFNpemU7XG5cbiAgICAgIC8vIEhhbmRsZSB0aGUgaXRlbSBnZXR0aW5nIGhpZGRlbiBhcyBhIHJlc3VsdCBvZiBvdXIgcG9zaXRpb25pbmcgd2l0aG91dCBnbGl0Y2hpbmdcbiAgICAgIC8vIHRoZSBjbGFzc2VzIGluIGFuZCBvdXRcbiAgICAgIHdpZHRoID0gX2xhc3RTaXplLndpZHRoO1xuICAgICAgaGVpZ2h0ID0gX2xhc3RTaXplLmhlaWdodDtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U2l6ZSA9IHRoaXMuY2FjaGUoJ3RhcmdldC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZ2V0VGFyZ2V0Qm91bmRzKCk7XG4gICAgfSk7XG5cbiAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGFyZ2V0U2l6ZS5oZWlnaHQ7XG4gICAgdmFyIHRhcmdldFdpZHRoID0gdGFyZ2V0U2l6ZS53aWR0aDtcblxuICAgIHZhciBhbGxDbGFzc2VzID0gW3RoaXMuZ2V0Q2xhc3MoJ3Bpbm5lZCcpLCB0aGlzLmdldENsYXNzKCdvdXQtb2YtYm91bmRzJyldO1xuXG4gICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgIHZhciBvdXRPZkJvdW5kc0NsYXNzID0gY29uc3RyYWludC5vdXRPZkJvdW5kc0NsYXNzO1xuICAgICAgdmFyIHBpbm5lZENsYXNzID0gY29uc3RyYWludC5waW5uZWRDbGFzcztcblxuICAgICAgaWYgKG91dE9mQm91bmRzQ2xhc3MpIHtcbiAgICAgICAgYWxsQ2xhc3Nlcy5wdXNoKG91dE9mQm91bmRzQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBpbm5lZENsYXNzKSB7XG4gICAgICAgIGFsbENsYXNzZXMucHVzaChwaW5uZWRDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhbGxDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xuICAgICAgWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXS5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgICAgIGFsbENsYXNzZXMucHVzaChjbHMgKyAnLScgKyBzaWRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGFkZENsYXNzZXMgPSBbXTtcblxuICAgIHZhciB0QXR0YWNobWVudCA9IGV4dGVuZCh7fSwgdGFyZ2V0QXR0YWNobWVudCk7XG4gICAgdmFyIGVBdHRhY2htZW50ID0gZXh0ZW5kKHt9LCB0aGlzLmF0dGFjaG1lbnQpO1xuXG4gICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgIHZhciB0byA9IGNvbnN0cmFpbnQudG87XG4gICAgICB2YXIgYXR0YWNobWVudCA9IGNvbnN0cmFpbnQuYXR0YWNobWVudDtcbiAgICAgIHZhciBwaW4gPSBjb25zdHJhaW50LnBpbjtcblxuICAgICAgaWYgKHR5cGVvZiBhdHRhY2htZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhdHRhY2htZW50ID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VBdHRhY2hYID0gdW5kZWZpbmVkLFxuICAgICAgICAgIGNoYW5nZUF0dGFjaFkgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoYXR0YWNobWVudC5pbmRleE9mKCcgJykgPj0gMCkge1xuICAgICAgICB2YXIgX2F0dGFjaG1lbnQkc3BsaXQgPSBhdHRhY2htZW50LnNwbGl0KCcgJyk7XG5cbiAgICAgICAgdmFyIF9hdHRhY2htZW50JHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9hdHRhY2htZW50JHNwbGl0LCAyKTtcblxuICAgICAgICBjaGFuZ2VBdHRhY2hZID0gX2F0dGFjaG1lbnQkc3BsaXQyWzBdO1xuICAgICAgICBjaGFuZ2VBdHRhY2hYID0gX2F0dGFjaG1lbnQkc3BsaXQyWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hhbmdlQXR0YWNoWCA9IGNoYW5nZUF0dGFjaFkgPSBhdHRhY2htZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgYm91bmRzID0gZ2V0Qm91bmRpbmdSZWN0KF90aGlzLCB0byk7XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAndGFyZ2V0JyB8fCBjaGFuZ2VBdHRhY2hZID09PSAnYm90aCcpIHtcbiAgICAgICAgaWYgKHRvcCA8IGJvdW5kc1sxXSAmJiB0QXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgdG9wICs9IHRhcmdldEhlaWdodDtcbiAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b3AgKyBoZWlnaHQgPiBib3VuZHNbM10gJiYgdEF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuICAgICAgICAgIHRvcCAtPSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZUF0dGFjaFkgPT09ICd0b2dldGhlcicpIHtcbiAgICAgICAgaWYgKHRBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICBpZiAoZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJyAmJiB0b3AgPCBib3VuZHNbMV0pIHtcbiAgICAgICAgICAgIHRvcCArPSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcblxuICAgICAgICAgICAgdG9wICs9IGhlaWdodDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICd0b3AnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQudG9wID09PSAndG9wJyAmJiB0b3AgKyBoZWlnaHQgPiBib3VuZHNbM10gJiYgdG9wIC0gKGhlaWdodCAtIHRhcmdldEhlaWdodCkgPj0gYm91bmRzWzFdKSB7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0IC0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cbiAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0QXR0YWNobWVudC50b3AgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcgJiYgdG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdKSB7XG4gICAgICAgICAgICB0b3AgLT0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG5cbiAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcbiAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScgJiYgdG9wIDwgYm91bmRzWzFdICYmIHRvcCArIChoZWlnaHQgKiAyIC0gdGFyZ2V0SGVpZ2h0KSA8PSBib3VuZHNbM10pIHtcbiAgICAgICAgICAgIHRvcCArPSBoZWlnaHQgLSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAndG9wJztcblxuICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRBdHRhY2htZW50LnRvcCA9PT0gJ21pZGRsZScpIHtcbiAgICAgICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcbiAgICAgICAgICB9IGVsc2UgaWYgKHRvcCA8IGJvdW5kc1sxXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB0b3AgKz0gaGVpZ2h0O1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VBdHRhY2hYID09PSAndGFyZ2V0JyB8fCBjaGFuZ2VBdHRhY2hYID09PSAnYm90aCcpIHtcbiAgICAgICAgaWYgKGxlZnQgPCBib3VuZHNbMF0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgbGVmdCArPSB0YXJnZXRXaWR0aDtcbiAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZWZ0ICsgd2lkdGggPiBib3VuZHNbMl0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIGxlZnQgLT0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlQXR0YWNoWCA9PT0gJ3RvZ2V0aGVyJykge1xuICAgICAgICBpZiAobGVmdCA8IGJvdW5kc1swXSAmJiB0QXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgbGVmdCArPSB0YXJnZXRXaWR0aDtcbiAgICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuXG4gICAgICAgICAgICBsZWZ0ICs9IHdpZHRoO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgbGVmdCArPSB0YXJnZXRXaWR0aDtcbiAgICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuXG4gICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSAmJiB0QXR0YWNobWVudC5sZWZ0ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgbGVmdCAtPSB0YXJnZXRXaWR0aDtcbiAgICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG5cbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGxlZnQgLT0gdGFyZ2V0V2lkdGg7XG4gICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXG4gICAgICAgICAgICBsZWZ0ICs9IHdpZHRoO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodEF0dGFjaG1lbnQubGVmdCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdICYmIGVBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGVmdCA8IGJvdW5kc1swXSAmJiBlQXR0YWNobWVudC5sZWZ0ID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBsZWZ0ICs9IHdpZHRoO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZUF0dGFjaFkgPT09ICdlbGVtZW50JyB8fCBjaGFuZ2VBdHRhY2hZID09PSAnYm90aCcpIHtcbiAgICAgICAgaWYgKHRvcCA8IGJvdW5kc1sxXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgdG9wICs9IGhlaWdodDtcbiAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAndG9wJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b3AgKyBoZWlnaHQgPiBib3VuZHNbM10gJiYgZUF0dGFjaG1lbnQudG9wID09PSAndG9wJykge1xuICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZUF0dGFjaFggPT09ICdlbGVtZW50JyB8fCBjaGFuZ2VBdHRhY2hYID09PSAnYm90aCcpIHtcbiAgICAgICAgaWYgKGxlZnQgPCBib3VuZHNbMF0pIHtcbiAgICAgICAgICBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgbGVmdCArPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZWZ0ICsgd2lkdGggPiBib3VuZHNbMl0pIHtcbiAgICAgICAgICBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBpbiA9IHBpbi5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICAgIHJldHVybiBwLnRyaW0oKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBpbiA9PT0gdHJ1ZSkge1xuICAgICAgICBwaW4gPSBbJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbSddO1xuICAgICAgfVxuXG4gICAgICBwaW4gPSBwaW4gfHwgW107XG5cbiAgICAgIHZhciBwaW5uZWQgPSBbXTtcbiAgICAgIHZhciBvb2IgPSBbXTtcblxuICAgICAgaWYgKHRvcCA8IGJvdW5kc1sxXSkge1xuICAgICAgICBpZiAocGluLmluZGV4T2YoJ3RvcCcpID49IDApIHtcbiAgICAgICAgICB0b3AgPSBib3VuZHNbMV07XG4gICAgICAgICAgcGlubmVkLnB1c2goJ3RvcCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9vYi5wdXNoKCd0b3AnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdKSB7XG4gICAgICAgIGlmIChwaW4uaW5kZXhPZignYm90dG9tJykgPj0gMCkge1xuICAgICAgICAgIHRvcCA9IGJvdW5kc1szXSAtIGhlaWdodDtcbiAgICAgICAgICBwaW5uZWQucHVzaCgnYm90dG9tJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb29iLnB1c2goJ2JvdHRvbScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdKSB7XG4gICAgICAgIGlmIChwaW4uaW5kZXhPZignbGVmdCcpID49IDApIHtcbiAgICAgICAgICBsZWZ0ID0gYm91bmRzWzBdO1xuICAgICAgICAgIHBpbm5lZC5wdXNoKCdsZWZ0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb29iLnB1c2goJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdKSB7XG4gICAgICAgIGlmIChwaW4uaW5kZXhPZigncmlnaHQnKSA+PSAwKSB7XG4gICAgICAgICAgbGVmdCA9IGJvdW5kc1syXSAtIHdpZHRoO1xuICAgICAgICAgIHBpbm5lZC5wdXNoKCdyaWdodCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9vYi5wdXNoKCdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW5uZWQubGVuZ3RoKSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHBpbm5lZENsYXNzID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMub3B0aW9ucy5waW5uZWRDbGFzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBpbm5lZENsYXNzID0gX3RoaXMub3B0aW9ucy5waW5uZWRDbGFzcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGlubmVkQ2xhc3MgPSBfdGhpcy5nZXRDbGFzcygncGlubmVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKHBpbm5lZENsYXNzKTtcbiAgICAgICAgICBwaW5uZWQuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKHBpbm5lZENsYXNzICsgJy0nICsgc2lkZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvb2IubGVuZ3RoKSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG9vYkNsYXNzID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMub3B0aW9ucy5vdXRPZkJvdW5kc0NsYXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb29iQ2xhc3MgPSBfdGhpcy5vcHRpb25zLm91dE9mQm91bmRzQ2xhc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9vYkNsYXNzID0gX3RoaXMuZ2V0Q2xhc3MoJ291dC1vZi1ib3VuZHMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZGRDbGFzc2VzLnB1c2gob29iQ2xhc3MpO1xuICAgICAgICAgIG9vYi5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgICAgICAgICBhZGRDbGFzc2VzLnB1c2gob29iQ2xhc3MgKyAnLScgKyBzaWRlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbm5lZC5pbmRleE9mKCdsZWZ0JykgPj0gMCB8fCBwaW5uZWQuaW5kZXhPZigncmlnaHQnKSA+PSAwKSB7XG4gICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSB0QXR0YWNobWVudC5sZWZ0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocGlubmVkLmluZGV4T2YoJ3RvcCcpID49IDAgfHwgcGlubmVkLmluZGV4T2YoJ2JvdHRvbScpID49IDApIHtcbiAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gdEF0dGFjaG1lbnQudG9wID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0QXR0YWNobWVudC50b3AgIT09IHRhcmdldEF0dGFjaG1lbnQudG9wIHx8IHRBdHRhY2htZW50LmxlZnQgIT09IHRhcmdldEF0dGFjaG1lbnQubGVmdCB8fCBlQXR0YWNobWVudC50b3AgIT09IF90aGlzLmF0dGFjaG1lbnQudG9wIHx8IGVBdHRhY2htZW50LmxlZnQgIT09IF90aGlzLmF0dGFjaG1lbnQubGVmdCkge1xuICAgICAgICBfdGhpcy51cGRhdGVBdHRhY2hDbGFzc2VzKGVBdHRhY2htZW50LCB0QXR0YWNobWVudCk7XG4gICAgICAgIF90aGlzLnRyaWdnZXIoJ3VwZGF0ZScsIHtcbiAgICAgICAgICBhdHRhY2htZW50OiBlQXR0YWNobWVudCxcbiAgICAgICAgICB0YXJnZXRBdHRhY2htZW50OiB0QXR0YWNobWVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghKF90aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXMudGFyZ2V0LCBhZGRDbGFzc2VzLCBhbGxDbGFzc2VzKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXMuZWxlbWVudCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xuICB9XG59KTtcbi8qIGdsb2JhbHMgVGV0aGVyQmFzZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfVGV0aGVyQmFzZSRVdGlscyA9IFRldGhlckJhc2UuVXRpbHM7XG52YXIgZ2V0Qm91bmRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0Qm91bmRzO1xudmFyIHVwZGF0ZUNsYXNzZXMgPSBfVGV0aGVyQmFzZSRVdGlscy51cGRhdGVDbGFzc2VzO1xudmFyIGRlZmVyID0gX1RldGhlckJhc2UkVXRpbHMuZGVmZXI7XG5cblRldGhlckJhc2UubW9kdWxlcy5wdXNoKHtcbiAgcG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKF9yZWYpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuICAgIHZhciBsZWZ0ID0gX3JlZi5sZWZ0O1xuXG4gICAgdmFyIF9jYWNoZSA9IHRoaXMuY2FjaGUoJ2VsZW1lbnQtYm91bmRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldEJvdW5kcyhfdGhpcy5lbGVtZW50KTtcbiAgICB9KTtcblxuICAgIHZhciBoZWlnaHQgPSBfY2FjaGUuaGVpZ2h0O1xuICAgIHZhciB3aWR0aCA9IF9jYWNoZS53aWR0aDtcblxuICAgIHZhciB0YXJnZXRQb3MgPSB0aGlzLmdldFRhcmdldEJvdW5kcygpO1xuXG4gICAgdmFyIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgICB2YXIgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG5cbiAgICB2YXIgYWJ1dHRlZCA9IFtdO1xuICAgIGlmICh0b3AgPD0gdGFyZ2V0UG9zLmJvdHRvbSAmJiBib3R0b20gPj0gdGFyZ2V0UG9zLnRvcCkge1xuICAgICAgWydsZWZ0JywgJ3JpZ2h0J10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICB2YXIgdGFyZ2V0UG9zU2lkZSA9IHRhcmdldFBvc1tzaWRlXTtcbiAgICAgICAgaWYgKHRhcmdldFBvc1NpZGUgPT09IGxlZnQgfHwgdGFyZ2V0UG9zU2lkZSA9PT0gcmlnaHQpIHtcbiAgICAgICAgICBhYnV0dGVkLnB1c2goc2lkZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChsZWZ0IDw9IHRhcmdldFBvcy5yaWdodCAmJiByaWdodCA+PSB0YXJnZXRQb3MubGVmdCkge1xuICAgICAgWyd0b3AnLCAnYm90dG9tJ10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICB2YXIgdGFyZ2V0UG9zU2lkZSA9IHRhcmdldFBvc1tzaWRlXTtcbiAgICAgICAgaWYgKHRhcmdldFBvc1NpZGUgPT09IHRvcCB8fCB0YXJnZXRQb3NTaWRlID09PSBib3R0b20pIHtcbiAgICAgICAgICBhYnV0dGVkLnB1c2goc2lkZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBhbGxDbGFzc2VzID0gW107XG4gICAgdmFyIGFkZENsYXNzZXMgPSBbXTtcblxuICAgIHZhciBzaWRlcyA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107XG4gICAgYWxsQ2xhc3Nlcy5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ2FidXR0ZWQnKSk7XG4gICAgc2lkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgYWxsQ2xhc3Nlcy5wdXNoKF90aGlzLmdldENsYXNzKCdhYnV0dGVkJykgKyAnLScgKyBzaWRlKTtcbiAgICB9KTtcblxuICAgIGlmIChhYnV0dGVkLmxlbmd0aCkge1xuICAgICAgYWRkQ2xhc3Nlcy5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ2FidXR0ZWQnKSk7XG4gICAgfVxuXG4gICAgYWJ1dHRlZC5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgICBhZGRDbGFzc2VzLnB1c2goX3RoaXMuZ2V0Q2xhc3MoJ2FidXR0ZWQnKSArICctJyArIHNpZGUpO1xuICAgIH0pO1xuXG4gICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCEoX3RoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcbiAgICAgICAgdXBkYXRlQ2xhc3NlcyhfdGhpcy50YXJnZXQsIGFkZENsYXNzZXMsIGFsbENsYXNzZXMpO1xuICAgICAgfVxuICAgICAgdXBkYXRlQ2xhc3NlcyhfdGhpcy5lbGVtZW50LCBhZGRDbGFzc2VzLCBhbGxDbGFzc2VzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbi8qIGdsb2JhbHMgVGV0aGVyQmFzZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWydyZXR1cm4nXSkgX2lbJ3JldHVybiddKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UnKTsgfSB9OyB9KSgpO1xuXG5UZXRoZXJCYXNlLm1vZHVsZXMucHVzaCh7XG4gIHBvc2l0aW9uOiBmdW5jdGlvbiBwb3NpdGlvbihfcmVmKSB7XG4gICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuICAgIHZhciBsZWZ0ID0gX3JlZi5sZWZ0O1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hpZnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2hpZnQgPSB0aGlzLm9wdGlvbnMuc2hpZnQ7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuc2hpZnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNoaWZ0ID0gdGhpcy5vcHRpb25zLnNoaWZ0LmNhbGwodGhpcywgeyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9KTtcbiAgICB9XG5cbiAgICB2YXIgc2hpZnRUb3AgPSB1bmRlZmluZWQsXG4gICAgICAgIHNoaWZ0TGVmdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHNoaWZ0ID09PSAnc3RyaW5nJykge1xuICAgICAgc2hpZnQgPSBzaGlmdC5zcGxpdCgnICcpO1xuICAgICAgc2hpZnRbMV0gPSBzaGlmdFsxXSB8fCBzaGlmdFswXTtcblxuICAgICAgdmFyIF9zaGlmdCA9IHNoaWZ0O1xuXG4gICAgICB2YXIgX3NoaWZ0MiA9IF9zbGljZWRUb0FycmF5KF9zaGlmdCwgMik7XG5cbiAgICAgIHNoaWZ0VG9wID0gX3NoaWZ0MlswXTtcbiAgICAgIHNoaWZ0TGVmdCA9IF9zaGlmdDJbMV07XG5cbiAgICAgIHNoaWZ0VG9wID0gcGFyc2VGbG9hdChzaGlmdFRvcCwgMTApO1xuICAgICAgc2hpZnRMZWZ0ID0gcGFyc2VGbG9hdChzaGlmdExlZnQsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hpZnRUb3AgPSBzaGlmdC50b3A7XG4gICAgICBzaGlmdExlZnQgPSBzaGlmdC5sZWZ0O1xuICAgIH1cblxuICAgIHRvcCArPSBzaGlmdFRvcDtcbiAgICBsZWZ0ICs9IHNoaWZ0TGVmdDtcblxuICAgIHJldHVybiB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH07XG4gIH1cbn0pO1xucmV0dXJuIFRldGhlcjtcblxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3RldGhlci9kaXN0L2pzL3RldGhlci5qc1xuLy8gbW9kdWxlIGlkID0gMTQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIGEsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEJyZWFkY3J1bWIge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpIHtcbiAgICBsZXQgYmFzaWNzID0gY3JlYXRlQmFzaWNFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgY29udGVudCA9IGNyZWF0ZUNvbnRlbnRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgdmFyaWF0aW9ucyA9IGNyZWF0ZVZhcmlhdGlvbkV4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZShiYXNpY3MsIGNvbnRlbnQsIHZhcmlhdGlvbnMpLm1hcChcbiAgICAgIChbYmFzaWNzLCBjb250ZW50LCB2YXJpYXRpb25zXSkgPT5cbiAgICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImFydGljbGVcIiB9IH0sIFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkh1Z2UgfSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBtYWluOiBcIkJyZWFkY3J1bWJcIixcbiAgICAgICAgICAgICAgICAgIHN1YnRleHQ6IFwiQSBicmVhZGNydW1iIGlzIHVzZWQgdG8gc2hvdyBoaWVyYXJjaHkgYmV0d2VlbiBjb250ZW50XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29udGFpbmVyLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlR5cGVzXCIpXS5jb25jYXQoYmFzaWNzKSksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkNvbnRlbnRcIildLmNvbmNhdChjb250ZW50KSksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlZhcmlhdGlvbnNcIildLmNvbmNhdCh2YXJpYXRpb25zKSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIHJvdXRlcjogeHMubmV2ZXIoKVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCYXNpY0V4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKFtcbiAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgeyB0ZXh0OiBcIlN0b3JlXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgIHsgdGV4dDogXCJULVNoaXJ0XCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoW1xuICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICB7IHRleHQ6IFwiU3RvcmVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgeyB0ZXh0OiBcIlQtU2hpcnRcIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgIF0pYCxcbiAgICAgIGhlYWRlcjogXCJCcmVhZGNydW1iXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHN0YW5kYXJkIGJyZWFkY3J1bWIuXCJcbiAgICB9KTtcbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFuZ2xlUmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJTdG9yZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJULVNoaXJ0XCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFuZ2xlUmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJTdG9yZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJULVNoaXJ0XCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIHJldHVybiB4cy5jb21iaW5lKGV4MS5ET00sIGV4Mi5ET00pO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbnRlbnRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlW10+IHtcbiAgICBsZXQgZXgxID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkRpdmlkZXJcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgYnJlYWRjcnVtYiBjYW4gY29udGFpbiBhIGRpdmlkZXIgdG8gc2hvdyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gc2VjdGlvbnMsIHRoaXMgY2FuIGJlIGZvcm1hdHRlZCBhcyBhbiBpY29uIG9yIHRleHQuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgZGl2aWRlcjogXCJ8XCIgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBkaXZpZGVyOiBcInxcIiB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU2VjdGlvblwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBicmVhZGNydW1iIGNhbiBjb250YWluIHNlY3Rpb25zIHRoYXQgY2FuIGVpdGhlciBiZSBmb3JtYXR0ZWQgYXMgYSBsaW5rIG9yIHRleHQuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQW5nbGVSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiU2VhcmNoXCIsIGFjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BbmdsZVJpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJTZWFyY2hcIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiTGlua1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBzZWN0aW9uIG1heSBiZSBsaW5rYWJsZSBvciBjb250YWluIGEgbGluay5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BbmdsZVJpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFtcIlNlYXJjaCBmb3I6IFwiLCBhKFwicGFwZXIgdG93ZWxzXCIpXSwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgIF1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFuZ2xlUmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogW1wiU2VhcmNoIGZvcjogXCIsIGEoXCJwYXBlciB0b3dlbHNcIildLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgXVxuICAgICAgfSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIHhzLmNvbWJpbmUoZXgxLkRPTSwgZXgyLkRPTSwgZXgzLkRPTSwgZXg0LkRPTSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlVmFyaWF0aW9uRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTaXplXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGJyZWFkY3J1bWIgY2FuIHZhcnkgaW4gc2l6ZS5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLk1pbmksIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5NaW5pLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pO1xuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5UaW55LCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuVGlueSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTtcbiAgICBsZXQgZXgzID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuU21hbGwsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5TbWFsbCwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTsgbGV0IGV4NCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLk1lZGl1bSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLk1lZGl1bSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTsgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkxhcmdlLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuTGFyZ2UsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSlgXG4gICAgfSk7XG4gICAgbGV0IGV4NiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkJpZywgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkJpZywgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KWBcbiAgICB9KTsgbGV0IGV4NyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkh1Z2UsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLkJyZWFkY3J1bWIucmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5IdWdlLCBkaXZpZGVyOiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5BcnJvd1JpZ2h0KSB9LFxuICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgeyB0ZXh0OiBcIkhvbWVcIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUmVnaXN0cmF0aW9uXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlBlcnNvbmFsIEluZm9ybWF0aW9uXCIsIGFjdGl2ZTogdHJ1ZSB9XG4gICAgICAgIF1cbiAgICAgIH0pYFxuICAgIH0pOyBsZXQgZXg4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5CcmVhZGNydW1iLnJlbmRlcih7XG4gICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuTWFzc2l2ZSwgZGl2aWRlcjogVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuQXJyb3dSaWdodCkgfSxcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHsgdGV4dDogXCJIb21lXCIsIGhyZWY6IFwiI1wiIH0sXG4gICAgICAgICAgeyB0ZXh0OiBcIlJlZ2lzdHJhdGlvblwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJQZXJzb25hbCBJbmZvcm1hdGlvblwiLCBhY3RpdmU6IHRydWUgfVxuICAgICAgICBdXG4gICAgICB9KSksXG4gICAgICBjb2RlOiBgVUkuQnJlYWRjcnVtYi5yZW5kZXIoe1xuICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLk1hc3NpdmUsIGRpdmlkZXI6IFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkFycm93UmlnaHQpIH0sXG4gICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICB7IHRleHQ6IFwiSG9tZVwiLCBocmVmOiBcIiNcIiB9LFxuICAgICAgICAgIHsgdGV4dDogXCJSZWdpc3RyYXRpb25cIiwgaHJlZjogXCIjXCIgfSxcbiAgICAgICAgICB7IHRleHQ6IFwiUGVyc29uYWwgSW5mb3JtYXRpb25cIiwgYWN0aXZlOiB0cnVlIH1cbiAgICAgICAgXVxuICAgICAgfSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIHhzLmNvbWJpbmUoZXgxLkRPTSwgZXgyLkRPTSwgZXgzLkRPTSwgZXg0LkRPTSwgZXg1LkRPTSwgZXg2LkRPTSwgZXg3LkRPTSwgZXg4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2JyZWFkY3J1bWIudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29udGVudCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGZpZWxkRXhhbXBsZXMgPSBjcmVhdGVGaWVsZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBmaWVsZHNFeGFtcGxlcyA9IGNyZWF0ZUZpZWxkc0V4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCB0ZXh0YXJlYUV4YW1wbGVzID0gY3JlYXRlVGV4dEFyZWFFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgY2hlY2tib3hFeGFtcGxlcyA9IGNyZWF0ZUNoZWNrYm94RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHJhZGlvQ2hlY2tib3hFeGFtcGxlcyA9IGNyZWF0ZVJhZGlvQ2hlY2tib3hFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZHJvcGRvd25FeGFtcGxlcyA9IGNyZWF0ZURyb3Bkb3duRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IG11bHRpcGxlU2VsZWN0RXhhbXBsZXMgPSBjcmVhdGVNdWx0aXBsZVNlbGVjdEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBtZXNzYWdlRXhhbXBsZXMgPSBjcmVhdGVNZXNzYWdlRXhhbXBsZXMoc291cmNlcyk7XG4gICAgcmV0dXJuIHhzLmNvbWJpbmUuYXBwbHkobnVsbCwgW10uY29uY2F0KFxuICAgICAgZmllbGRFeGFtcGxlcywgZmllbGRzRXhhbXBsZXMsIHRleHRhcmVhRXhhbXBsZXMsXG4gICAgICBjaGVja2JveEV4YW1wbGVzLCByYWRpb0NoZWNrYm94RXhhbXBsZXMsIGRyb3Bkb3duRXhhbXBsZXMsXG4gICAgICBtdWx0aXBsZVNlbGVjdEV4YW1wbGVzLCBtZXNzYWdlRXhhbXBsZXNcbiAgICApLm1hcCh4ID0+IHguRE9NKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGaWVsZEV4YW1wbGVzKHNvdXJjZXMpIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRmllbGRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZmllbGQgaXMgYSBmb3JtIGVsZW1lbnQgY29udGFpbmluZyBhIGxhYmVsIGFuZCBhbiBpbnB1dFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiVXNlciBJbnB1dFwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoKV0gfSB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJVc2VyIElucHV0XCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcigpXX19KVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleF07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlRmllbGRzRXhhbXBsZXMoc291cmNlcykge1xuXG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJGaWVsZHNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc2V0IG9mIGZpZWxkcyBjYW4gYXBwZWFyIGdyb3VwZWQgdG9nZXRoZXJcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkZpcnN0IG5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXSB9IH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiTWlkZGxlIG5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIiB9KV0gfSB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkxhc3QgbmFtZVwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV0gfSB9KVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIkZpcnN0IG5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV19fSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIk1pZGRsZSBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIn0pXX19KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHsgbGFiZWw6IFwiTGFzdCBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV19fSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuXG4gICAgfSk7XG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJGaXJzdCBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV0gfSB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIk1pZGRsZSBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIk1pZGRsZSBOYW1lXCIgfSldIH0gfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJMYXN0IG5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldIH0gfSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIkZpcnN0IG5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV19fSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IGxhYmVsOiBcIk1pZGRsZSBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIn0pXX19KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHsgbGFiZWw6IFwiTGFzdCBuYW1lXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV19fSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7IGlubGluZTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IHdpZHRoOiA4IH0sXG4gICAgICAgICAgICBjb250ZW50OiB7IGxhYmVsOiBcIk5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXSB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IHdpZHRoOiAzIH0sXG4gICAgICAgICAgICBjb250ZW50OiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwiIH0pXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyB3aWR0aDogNSB9LFxuICAgICAgICAgICAgY29udGVudDogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2lubGluZTogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHt3aWR0aDogOH0sXG4gICAgICAgICAgICBjb250ZW50OiB7IGxhYmVsOiBcIk5hbWVcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCJ9KV19XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7d2lkdGg6IDN9LFxuICAgICAgICAgICAgY29udGVudDogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwifSldXG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7d2lkdGg6IDV9LFxuICAgICAgICAgICAgY29udGVudDogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4MSwgZXgyLCBleDNdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVRleHRBcmVhRXhhbXBsZXMoc291cmNlcykge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJUZXh0IEFyZWFcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgdGV4dGFyZWEgY2FuIGJlIHVzZWQgdG8gYWxsb3cgZm9yIGV4dGVuZGVkIHVzZXIgaW5wdXQuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJUZXh0XCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyByb3dzOiAxMCB9KV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIlNob3J0IHRleHRcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHJvd3M6IDIgfSldXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IFxuICAgICAgICAgIGxhYmVsOiBcIlRleHRcIixcbiAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3Jvd3M6IDEwfSldXG4gICAgICAgIH19KSxcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7IFxuICAgICAgICAgIGxhYmVsOiBcIlNob3J0IHRleHRcIixcbiAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3Jvd3M6IDJ9KV1cbiAgICAgICAgfX0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVDaGVja2JveEV4YW1wbGVzKHNvdXJjZXMpIHtcbiAgICBsZXQgZXhhbXBsZSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJDaGVja2JveFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBmb3JtIGNhbiBjb250YWluIGEgY2hlY2tib3hcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBpbmxpbmU6IHRydWUgfSwgW1VJLkNoZWNrYm94LnJlbmRlcihcIkNoZWNrYm94XCIpXSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGlubGluZTogdHJ1ZSB9LCBbVUkuQ2hlY2tib3gucmVuZGVyKHsgc2xpZGVyOiB0cnVlIH0sIFwiU2xpZGVyXCIpXSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGlubGluZTogdHJ1ZSB9LCBbVUkuQ2hlY2tib3gucmVuZGVyKHsgdG9nZ2xlOiB0cnVlIH0sIFwiVG9nZ2xlXCIpXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7aW5saW5lOiB0cnVlfSwgW1VJLkNoZWNrYm94LnJlbmRlcihcIkNoZWNrYm94XCIpXSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7aW5saW5lOiB0cnVlfSwgW1VJLkNoZWNrYm94LnJlbmRlcih7c2xpZGVyOiB0cnVlfSwgXCJTbGlkZXJcIildKSxcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtpbmxpbmU6IHRydWV9LCBbVUkuQ2hlY2tib3gucmVuZGVyKHt0b2dnbGU6IHRydWV9LCBcIlRvZ2dsZVwiKV0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4YW1wbGVdO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUmFkaW9DaGVja2JveEV4YW1wbGVzKHNvdXJjZXMpIHtcbiAgICBsZXQgZXhhbXBsZSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJSYWRpbyBDaGVja2JveFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBmb3JtIGNhbiBjb250YWluIGEgcmFkaW8gY2hlY2tib3hcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBpbmxpbmU6IHRydWUgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJTZWxlY3QgeW91ciBmYXZvdXJpdGUgZnJ1aXQ6XCIsXG4gICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgcmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIiB9LCBcIkFwcGxlc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJPcmFuZ2VzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgcmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIiB9LCBcIlBlYXJzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgcmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIiB9LCBcIkdyYXBlZnJ1aXRcIildKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7IGdyb3VwZWQ6IHRydWUgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJTZWxlY3QgeW91ciBmYXZvdXJpdGUgZnJ1aXQ6XCIsXG4gICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgcmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIiB9LCBcIkFwcGxlc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7IHJhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCIgfSwgXCJPcmFuZ2VzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgcmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIiB9LCBcIlBlYXJzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgcmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIiB9LCBcIkdyYXBlZnJ1aXRcIildKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7IGlubGluZTogdHJ1ZSB9LFxuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIlNlbGVjdCB5b3VyIGZhdm91cml0ZSBmcnVpdDpcIixcbiAgICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoe3JhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCJ9LCBcIkFwcGxlc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7cmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIn0sIFwiT3Jhbmdlc1wiKV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcih7cmFkaW86IHRydWUsIG5hbWU6IFwiZnJ1aXRcIn0sIFwiUGVhcnNcIildKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoe3JhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCJ9LCBcIkdyYXBlZnJ1aXRcIildKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7IGdyb3VwZWQ6IHRydWUgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJTZWxlY3QgeW91ciBmYXZvdXJpdGUgZnJ1aXQ6XCIsXG4gICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHtyYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwifSwgXCJBcHBsZXNcIildKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoe3JhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCJ9LCBcIk9yYW5nZXNcIildKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoe3JhZGlvOiB0cnVlLCBuYW1lOiBcImZydWl0XCJ9LCBcIlBlYXJzXCIpXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHtyYWRpbzogdHJ1ZSwgbmFtZTogXCJmcnVpdFwifSwgXCJHcmFwZWZydWl0XCIpXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4YW1wbGVdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZURyb3Bkb3duRXhhbXBsZXMoc291cmNlcykge1xuICAgIGxldCBkZGxHZW5kZXIgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBkZWZhdWx0OiBcIkdlbmRlclwiLCBzZWxlY3Rpb246IHRydWUgfSksXG4gICAgICBjb250ZW50JDogeHMub2YoW1xuICAgICAgICB7IG1haW46IFwiTWFsZVwiLCB2YWx1ZTogXCJNYWxlXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZlbWFsZVwiLCB2YWx1ZTogXCJGZW1hbGVcIiB9XG4gICAgICBdKVxuICAgIH0pO1xuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRHJvcGRvd25cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZm9ybSBjYW4gY29udGFpbiBhIGRyb3Bkb3duXCIsXG4gICAgICBWTm9kZSQ6IGRkbEdlbmRlci5ET00ubWFwKGRkbEdlbmRlciA9PiBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiR2VuZGVyXCIsIG1haW46IGRkbEdlbmRlciB9IH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgbGV0IGRkbEdlbmRlciA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7ZGVmYXVsdDogXCJHZW5kZXJcIiwgc2VsZWN0aW9uOiB0cnVlfSksXG4gICAgICBjb250ZW50JDogeHMub2YoW1xuICAgICAgICB7bWFpbjogXCJNYWxlXCIsIHZhbHVlOiBcIk1hbGVcIn0sXG4gICAgICAgIHttYWluOiBcIkZlbWFsZVwiLCB2YWx1ZTogXCJGZW1hbGVcIn1cbiAgICAgIF0pXG4gICAgfSk7XG4gICAgbGV0IHZUcmVlJCA9IGRkbEdlbmRlci5ET00ubWFwKFxuICAgICAgICBkZGxHZW5kZXIgPT4gVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHtsYWJlbDogXCJHZW5kZXJcIiwgbWFpbjogZGRsR2VuZGVyfX0pXG4gICAgICBdKVxuICAgICk7YFxuICAgIH0pO1xuXG4gICAgbGV0IGNvdW50cmllcyA9IFtcIlVuaXRlZCBTdGF0ZXNcIiwgXCJUaGUgTmV0aGVybGFuZHNcIiwgXCJCZWxnaXVtXCIsIFwiR2VybWFueVwiLCBcIkZyYW5jZVwiXTtcbiAgICBsZXQgZGRsQ291bnRyaWVzID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgc2VsZWN0aW9uOiB0cnVlLCBzZWFyY2g6IHRydWUgfSksXG4gICAgICBjb250ZW50JDogeHMub2YoY291bnRyaWVzLm1hcChjb3VudHJ5ID0+ICh7IG1haW46IGNvdW50cnksIHZhbHVlOiBjb3VudHJ5IH0pKSlcbiAgICB9KTtcbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiBkZGxDb3VudHJpZXMuRE9NLm1hcChkZGxDb3VudHJpZXMgPT4gVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkNvdW50cnlcIiwgbWFpbjogZGRsQ291bnRyaWVzIH0gfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBsZXQgY291bnRyaWVzID0gW1wiVW5pdGVkIFN0YXRlc1wiLCBcIlRoZSBOZXRoZXJsYW5kc1wiLCBcIkJlbGdpdW1cIiwgXCJHZXJtYW55XCIsIFwiRnJhbmNlXCJdO1xuICAgIGxldCBkZGxDb3VudHJpZXMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBzZWxlY3Rpb246IHRydWUsIHNlYXJjaDogdHJ1ZSB9KSxcbiAgICAgIGNvbnRlbnQkOiB4cy5vZihjb3VudHJpZXMubWFwKGNvdW50cnkgPT4gKHsgbWFpbjogY291bnRyeSwgdmFsdWU6IGNvdW50cnkgfSkpKVxuICAgIH0pXG4gICAgbGV0IHZUcmVlJDogZGRsQ291bnRyaWVzLkRPTS5tYXAoXG4gICAgICBkZGxDb3VudHJpZXMgPT4gVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHsgbGFiZWw6IFwiQ291bnRyeVwiLCBtYWluOiBkZGxDb3VudHJpZXN9fSlcbiAgICAgIF0pXG4gICAgKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbZXgxLCBleDJdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU11bHRpcGxlU2VsZWN0RXhhbXBsZXMoc291cmNlcykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZXNzYWdlRXhhbXBsZXMoc291cmNlcykge1xuICAgIGxldCBleGFtcGxlID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIk1lc3NhZ2VcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZm9ybSBjYW4gY29udGFpbiBhIG1lc3NhZ2VcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHsgY29sb3I6IFVJLkNvbG9yLkVycm9yIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaGVhZGVyOiBcIldlIGhhZCBzb21lIGlzc3Vlc1wiLFxuICAgICAgICAgICAgYm9keTogW1VJLkxpc3QucmVuZGVyKHsgYnVsbGV0ZWQ6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiUGxlYXNlIGVudGVyIHlvdXIgZmlyc3QgbmFtZVwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQbGVhc2UgZW50ZXIgeW91ciBsYXN0IG5hbWVcIiB9XG4gICAgICAgICAgICBdKV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHsgY29sb3I6IFVJLkNvbG9yLkVycm9yIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaGVhZGVyOiBcIldlIGhhZCBzb21lIGlzc3Vlc1wiLFxuICAgICAgICAgICAgYm9keTogW1VJLkxpc3QucmVuZGVyKHsgYnVsbGV0ZWQ6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiUGxlYXNlIGVudGVyIHlvdXIgZmlyc3QgbmFtZVwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQbGVhc2UgZW50ZXIgeW91ciBsYXN0IG5hbWVcIiB9XG4gICAgICAgICAgICBdKV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4YW1wbGVdO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL2NvbnRlbnQudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmllbGRzVmFyaWF0aW9ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGVxdWFsV2lkdGhFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJFdmVubHkgRGl2aWRlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiRmllbGRzIGNhbiBoYXZlIHRoZWlyIHdpZHRocyBkaXZpZGVkIGV2ZW5seVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJNaWRkbGUgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIk1pZGRsZSBuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIk1pZGRsZSBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBncm91cGVkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiR3JvdXBlZCBmaWVsZHNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkZpZWxkcyBjYW4gc2hvdyByZWxhdGVkIGNob2ljZXNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZ3JvdXBlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyBuYW1lOiBcImZydWl0XCIsIHJhZGlvOiB0cnVlIH0sIFwiQXBwbGVzXCIpXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyBuYW1lOiBcImZydWl0XCIsIHJhZGlvOiB0cnVlIH0sIFwiT3Jhbmdlc1wiKV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIlBlYXJzXCIpXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyBuYW1lOiBcImZydWl0XCIsIHJhZGlvOiB0cnVlIH0sIFwiR3JhcGVmcnVpdFwiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZ3JvdXBlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyBuYW1lOiBcImZydWl0XCIsIHJhZGlvOiB0cnVlIH0sIFwiQXBwbGVzXCIpXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyBuYW1lOiBcImZydWl0XCIsIHJhZGlvOiB0cnVlIH0sIFwiT3Jhbmdlc1wiKV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKHsgbmFtZTogXCJmcnVpdFwiLCByYWRpbzogdHJ1ZSB9LCBcIlBlYXJzXCIpXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoeyBuYW1lOiBcImZydWl0XCIsIHJhZGlvOiB0cnVlIH0sIFwiR3JhcGVmcnVpdFwiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBpbmxpbmVFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJJbmxpbmVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk11bHRpcGxlIGZpZWxkcyBtYXkgYmUgaW5saW5lIGluIGEgcm93XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHsgaW5saW5lOiB0cnVlIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiUGhvbmUgTnVtYmVyXCIsXG4gICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIih4eHgpXCJ9KV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJ4eHhcIn0pXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcInh4eHhcIn0pXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBpbmxpbmU6IHRydWUgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJQaG9uZSBOdW1iZXJcIixcbiAgICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiKHh4eClcIn0pXSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcInh4eFwifSldKSxcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwieHh4eFwifSldKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUoZXF1YWxXaWR0aEV4LkRPTSwgZ3JvdXBlZEV4LkRPTSwgaW5saW5lRXguRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS9maWVsZHN2YXJpYXRpb25zLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEZpZWxkVmFyaWF0aW9ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGlubGluZUV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIklubGluZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBmaWVsZCBjYW4gaGF2ZSBpdHMgbGFiZWwgbmV4dCB0byBpbnN0ZWFkIG9mIGFib3ZlIGl0LlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHsgaW5saW5lOiB0cnVlIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiRnVsbCBuYW1lXCIsXG4gICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGdWxsIE5hbWVcIiB9KV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7aW5saW5lOiB0cnVlfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJGdWxsIG5hbWVcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRnVsbCBOYW1lXCJ9KV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCB3aWR0aEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIldpZHRoXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZpZWxkIGNhbiBzcGVjaWZ5IGl0cyB3aWR0aCBpbiBncmlkIGNvbHVtbnNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgd2lkdGg6IDYgfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IHdpZHRoOiA0IH0sXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIk1pZGRsZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyB3aWR0aDogNiB9LFxuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAyIH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjIgV2lkZVwiIH0pXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDEyIH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjEyIFdpZGVcIiB9KV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAyIH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjIgV2lkZVwiIH0pXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiA4IH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjggV2lkZVwiIH0pXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDYgfSwgW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiNiBXaWRlXCIgfSldKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIyIFdpZGVcIiB9KV0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgd2lkdGg6IDYgfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IHdpZHRoOiA0IH0sXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIk1pZGRsZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyB3aWR0aDogNiB9LFxuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IG5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAyIH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjIgV2lkZVwiIH0pXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDEyIH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjEyIFdpZGVcIiB9KV0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiAyIH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjIgV2lkZVwiIH0pXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IHdpZHRoOiA4IH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIjggV2lkZVwiIH0pXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDYgfSwgW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiNiBXaWRlXCIgfSldKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogMiB9LCBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCIyIFdpZGVcIiB9KV0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCByZXF1aXJlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOlwiUmVxdWlyZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZmllbGQgY2FuIHNob3cgdGhhdCBpbnB1dCBpcyBtYW5kZXRvcnlcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzOiB7cmVxdWlyZWQ6IHRydWV9LFxuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIkZ1bGwgbmFtZVwiLFxuICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJGdWxsIE5hbWVcIn0pXVxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgVGVybXMgYW5kIENvbmRpdGlvbnNcIildKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczoge3JlcXVpcmVkOiB0cnVlfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJGdWxsIG5hbWVcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRnVsbCBOYW1lXCJ9KV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIFRlcm1zIGFuZCBDb25kaXRpb25zXCIpXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUoaW5saW5lRXguRE9NLCB3aWR0aEV4LkRPTSwgcmVxdWlyZWRFeC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL2ZpZWxkdmFyaWF0aW9ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBGb3JtVmFyaWF0aW9ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGVxdWFsV2lkdGhFeGFtcGxlID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkVxdWFsIFdpZHRoXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJGb3JtcyBjYW4gYXV0b21hdGljYWxseSBkaXZpZGUgZmllbGRzIHRvIGJlIGVxdWFsIHdpZHRoXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIlVzZXJuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlVzZXJuYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiUGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgdHlwZTogXCJwYXNzd29yZFwiLCBwbGFjZWhvbGRlcjogXCJQYXNzd29yZFwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBuYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJNaWRkbGUgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJNaWRkbGUgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgbmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7XG4gICAgICAgICAgICBsYWJlbDogXCJVc2VybmFtZVwiLFxuICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJVc2VybmFtZVwifSldXG4gICAgICAgICAgfX0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiUGFzc3dvcmRcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7dHlwZTogXCJwYXNzd29yZFwiLCBwbGFjZWhvbGRlcjogXCJQYXNzd29yZFwifSldXG4gICAgICAgICAgfX0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IG5hbWVcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldXG4gICAgICAgICAgfX0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7Y29udGVudDoge1xuICAgICAgICAgICAgbGFiZWw6IFwiTWlkZGxlIG5hbWVcIixcbiAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTWlkZGxlIE5hbWVcIn0pXVxuICAgICAgICAgIH19KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgbmFtZVwiLFxuICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgIH19KVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgaW52ZXJ0ZWRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJJbnZlcnRlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBmb3JtIG9uIGEgZGFyayBiYWNrZ3JvdW5kIG1heSBoYXZlIHRvIGludmVydCBpdHMgY29sb3Igc2NoZW1lXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLlNlZ21lbnQucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Gb3JtLnJlbmRlcih7IGludmVydGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBuYW1lXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtpbmxpbmU6IHRydWV9LCBbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgVGVybXMgYW5kIENvbmRpdGlvbnNcIildKSxcbiAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuU2VnbWVudC5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkZvcm0ucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IG5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2lubGluZTogdHJ1ZX0sIFtVSS5DaGVja2JveC5yZW5kZXIoXCJJIGFncmVlIHRvIHRoZSBUZXJtcyBhbmQgQ29uZGl0aW9uc1wiKV0pLFxuICAgICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KGNyZWF0ZVNpemVWYXJpYXRpb25zKHNvdXJjZXMpLCBlcXVhbFdpZHRoRXhhbXBsZSwgaW52ZXJ0ZWRFeCk7XG4gICAgcmV0dXJuIHhzLmNvbWJpbmUuYXBwbHkobnVsbCwgZXhhbXBsZXMubWFwKGV4ID0+IGV4LkRPTSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2l6ZVZhcmlhdGlvbnMoc291cmNlcykge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTaXplXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZvcm0gY2FuIHZhcnkgaW4gc2l6ZVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwibWluaVwiIH0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoe3NpemU6IFwibWluaVwifSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwidGlueVwiIH0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoe3NpemU6IFwidGlueVwifSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgZXgzID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwic21hbGxcIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHtzaXplOiBcInNtYWxsXCJ9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKHsgc2l6ZTogXCJtZWRpdW1cIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYG1lZGl1bWBcbiAgICB9KTtcbiAgICBsZXQgZXg1ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwibGFyZ2VcIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHtzaXplOiBcImxhcmdlXCJ9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIGxldCBleDYgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkZvcm0ucmVuZGVyKHsgc2l6ZTogXCJiaWdcIiB9LCBbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKHtzaXplOiBcImJpZ1wifSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgZXg3ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwiaHVnZVwiIH0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoe3NpemU6IFwiaHVnZVwifSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgZXg4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcih7IHNpemU6IFwibWFzc2l2ZVwiIH0sIFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJGaXJzdCBOYW1lXCIgfSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRm9ybS5yZW5kZXIoe3NpemU6IFwibWFzc2l2ZVwifSwgW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIn0pXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LCBleDIsIGV4MywgZXg0LCBleDUsIGV4NiwgZXg3LCBleDhdO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL2Zvcm12YXJpYXRpb25zLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgVHlwZXMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgQ29udGVudCB9IGZyb20gXCIuL2NvbnRlbnRcIjtcbmltcG9ydCB7IFN0YXRlcyB9IGZyb20gXCIuL3N0YXRlc1wiO1xuaW1wb3J0IHsgRm9ybVZhcmlhdGlvbnMgfSBmcm9tIFwiLi9mb3JtdmFyaWF0aW9uc1wiO1xuaW1wb3J0IHsgRmllbGRWYXJpYXRpb25zIH0gZnJvbSBcIi4vZmllbGR2YXJpYXRpb25zXCI7XG5pbXBvcnQgeyBGaWVsZHNWYXJpYXRpb25zIH0gZnJvbSBcIi4vZmllbGRzdmFyaWF0aW9uc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEZvcm0ge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpIHtcbiAgICBsZXQgdHlwZXMgPSBUeXBlcy5ydW4oc291cmNlcyk7XG4gICAgbGV0IGNvbnRlbnQgPSBDb250ZW50LnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgc3RhdGVzID0gU3RhdGVzLnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgZm9ybVZhcmlhdGlvbnMgPSBGb3JtVmFyaWF0aW9ucy5ydW4oc291cmNlcyk7XG4gICAgbGV0IGZpZWxkVmFyaWF0aW9ucyA9IEZpZWxkVmFyaWF0aW9ucy5ydW4oc291cmNlcyk7XG4gICAgbGV0IGZpZWxkc1ZhcmlhdGlvbnMgPSBGaWVsZHNWYXJpYXRpb25zLnJ1bihzb3VyY2VzKTtcblxuICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUodHlwZXMsIGNvbnRlbnQsIHN0YXRlcywgZm9ybVZhcmlhdGlvbnMsIGZpZWxkVmFyaWF0aW9ucywgZmllbGRzVmFyaWF0aW9ucykubWFwKFxuICAgICAgKFt0eXBlcywgY29udGVudCwgc3RhdGVzLCBmb3JtVmFyaWF0aW9ucywgZmllbGRWYXJpYXRpb25zLCBmaWVsZHNWYXJpYXRpb25zXSkgPT5cbiAgICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImFydGljbGVcIiB9IH0sIFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkh1Z2UgfSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBtYWluOiBcIkZvcm1cIixcbiAgICAgICAgICAgICAgICAgIHN1YnRleHQ6IFwiQSBmb3JtIGRpc3BsYXlzIGEgc2V0IG9mIHJlbGF0ZWQgdXNlciBpbnB1dCBmaWVsZHMgaW4gYSBzdHJ1Y3R1cmVkIHdheVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiVHlwZXNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQodHlwZXMpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiQ29udGVudFwiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdChjb250ZW50KVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlN0YXRlc1wiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdChzdGF0ZXMpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiRm9ybSBWYXJpYXRpb25zXCIpXVxuICAgICAgICAgICAgICAuY29uY2F0KGZvcm1WYXJpYXRpb25zKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkZpZWxkIFZhcmlhdGlvbnNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoZmllbGRWYXJpYXRpb25zKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkdyb3VwIFZhcmlhdGlvbnNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoZmllbGRzVmFyaWF0aW9ucylcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSlcbiAgICApIGFzIFN0cmVhbTxWTm9kZT47XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgcm91dGVyOiB4cy5uZXZlcigpXG4gICAgfTtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL2luZGV4LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0YXRlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGxvYWRpbmdFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJMb2FkaW5nXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJJZiBhIGZvcm0gaXMgaW4gbG9hZGluZyBzdGF0ZSwgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IHNob3cgYSBsb2FkaW5nIGluZGljYXRvci5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoe2xvYWRpbmc6IHRydWV9LCBbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiRW1haWxcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKCldIH0gfSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXRcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcih7bG9hZGluZzogdHJ1ZX0sIFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJFbWFpbFwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoKV0gfSB9KSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGRkbEdlbmRlciA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7IGRlZmF1bHQ6IFwiR2VuZGVyXCIsIHNlbGVjdGlvbjogdHJ1ZSB9KSxcbiAgICAgIGNvbnRlbnQkOiB4cy5vZihbXG4gICAgICAgIHsgbWFpbjogXCJNYWxlXCIsIHZhbHVlOiBcIk1hbGVcIiB9LFxuICAgICAgICB7IG1haW46IFwiRmVtYWxlXCIsIHZhbHVlOiBcIkZlbWFsZVwiIH1cbiAgICAgIF0pXG4gICAgfSk7XG4gICAgbGV0IGZpZWxkRXJyb3JFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJGaWVsZCBFcnJvclwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiSW5kaXZpZHVhbCBmaWVsZHMgbWF5IGRpc3BsYXkgYW4gZXJyb3Igc3RhdGVcIixcbiAgICAgIFZOb2RlJDogZGRsR2VuZGVyLkRPTS5tYXAoXG4gICAgICAgIGRkbEdlbmRlciA9PiBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7ZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgIHByb3BzOiB7ZXJyb3I6IHRydWV9LFxuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHtlcnJvcjogdHJ1ZX0sXG4gICAgICAgICAgICBjb250ZW50OiB7bGFiZWw6IFwiR2VuZGVyXCIsIG1haW46IGRkbEdlbmRlcn1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHtlcnJvcjogdHJ1ZX0sXG4gICAgICAgICAgICBjb250ZW50OiBbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgVGVybXMgYW5kIENvbmRpdGlvbnNcIildXG4gICAgICAgICAgfSksXG4gICAgICAgIF0pXG4gICAgICApLFxuICAgICAgY29kZTogYGxldCBkZGxHZW5kZXIgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBkZWZhdWx0OiBcIkdlbmRlclwiLCBzZWxlY3Rpb246IHRydWUgfSksXG4gICAgICBjb250ZW50JDogeHMub2YoW1xuICAgICAgICB7IG1haW46IFwiTWFsZVwiLCB2YWx1ZTogXCJNYWxlXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZlbWFsZVwiLCB2YWx1ZTogXCJGZW1hbGVcIiB9XG4gICAgICBdKVxuICAgIH0pO1xuICAgIGxldCB2VHJlZSQgPSBkZGxHZW5kZXIuRE9NLm1hcChcbiAgICAgIGRkbEdlbmRlciA9PiBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7ZXJyb3I6IHRydWV9LFxuICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczoge2Vycm9yOiB0cnVlfSxcbiAgICAgICAgICBjb250ZW50OiB7bGFiZWw6IFwiR2VuZGVyXCIsIG1haW46IGRkbEdlbmRlcn1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgcHJvcHM6IHtlcnJvcjogdHJ1ZX0sXG4gICAgICAgICAgY29udGVudDogW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIFRlcm1zIGFuZCBDb25kaXRpb25zXCIpXVxuICAgICAgICB9KSxcbiAgICAgIF0pXG4gICAgKWBcbiAgICB9KTtcbiAgICBcbiAgICBsZXQgZGlzYWJsZWRGaWVsZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkRpc2FibGVkIEZpZWxkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJJbmRpdmlkdWFsIGZpZWxkcyBtYXkgYmUgZGlzYWJsZWRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBwcm9wczogeyBkaXNhYmxlZDogdHJ1ZX0sXG4gICAgICAgICAgICBjb250ZW50OiB7IFxuICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7ZGlzYWJsZWQ6IHRydWUsIHBsYWNlaG9sZGVyOiBcIkRpc2FibGVkXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgZGlzYWJsZWQ6IHRydWV9LFxuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7ZGlzYWJsZWQ6IHRydWUsIHBsYWNlaG9sZGVyOiBcIkRpc2FibGVkXCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGRzLnJlbmRlcih7ZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgcHJvcHM6IHsgZGlzYWJsZWQ6IHRydWV9LFxuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe2Rpc2FibGVkOiB0cnVlLCBwbGFjZWhvbGRlcjogXCJEaXNhYmxlZFwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiB7IGRpc2FibGVkOiB0cnVlfSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkxhc3QgTmFtZVwiLFxuICAgICAgICAgICAgICBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe2Rpc2FibGVkOiB0cnVlLCBwbGFjZWhvbGRlcjogXCJEaXNhYmxlZFwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHJlYWRPbmx5RXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUmVhZC1Pbmx5IEZpZWxkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJJbnZpZHVhbCBmaWVsZHMgbWF5IGJlIHJlYWQgb25seVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtyZWFkb25seTogdHJ1ZSwgcGxhY2Vob2xkZXI6IFwiUmVhZCBPbmx5XCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cmVhZG9ubHk6IHRydWUsIHBsYWNlaG9sZGVyOiBcIlJlYWQgT25seVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHsgXG4gICAgICAgICAgICAgIGxhYmVsOiBcIkZpcnN0IE5hbWVcIixcbiAgICAgICAgICAgICAgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtyZWFkb25seTogdHJ1ZSwgcGxhY2Vob2xkZXI6IFwiUmVhZCBPbmx5XCJ9KV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgY29udGVudDogeyBcbiAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7cmVhZG9ubHk6IHRydWUsIHBsYWNlaG9sZGVyOiBcIlJlYWQgT25seVwifSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUobG9hZGluZ0V4LkRPTSwgZmllbGRFcnJvckV4LkRPTSwgZGlzYWJsZWRGaWVsZEV4LkRPTSwgcmVhZE9ubHlFeC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9mb3JtL3N0YXRlcy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBUeXBlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkZvcm1cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZm9ybVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5Gb3JtLnJlbmRlcihbXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiRmlyc3QgTmFtZVwiLCBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KSB9IH0pLFxuICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkxhc3QgTmFtZVwiLCBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pIH0gfSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgVGVybXMgYW5kIENvbmRpdGlvbnNcIildKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcihcIlN1Ym1pdFwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJGaXJzdCBOYW1lXCIsIG1haW46IFVJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwiIH0pIH0gfSksXG4gICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiTGFzdCBOYW1lXCIsIG1haW46IFVJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTGFzdCBOYW1lXCIgfSkgfSB9KSxcbiAgICAgICAgVUkuRmllbGQucmVuZGVyKFtVSS5DaGVja2JveC5yZW5kZXIoXCJJIGFncmVlIHRvIHRoZSBUZXJtcyBhbmQgQ29uZGl0aW9uc1wiKV0pLFxuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0XCIpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgc3RhdGVzID0gW1wiQWxhYmFtYVwiLCBcIkFsYXNrYVwiLCBcIkFyaXpvbmFcIiwgXCJBcmthbnNhc1wiLCBcIkNhbGlmb3JuaWFcIiwgXCJDb2xvcmFkb1wiLCBcIkNvbm5lY3RpY3V0XCIsIFwiRGVsYXdhcmVcIl07XG4gICAgbGV0IGRkbFN0YXRlcyA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7IHNlbGVjdGlvbjogdHJ1ZSB9KSxcbiAgICAgIGNvbnRlbnQkOiB4cy5vZihzdGF0ZXMubWFwKHN0YXRlID0+ICh7IG1haW46IHN0YXRlLCB2YWx1ZTogc3RhdGUgfSkpKVxuICAgIH0pO1xuICAgIGxldCBjb3VudHJpZXMgPSBbXCJVbml0ZWQgU3RhdGVzXCIsIFwiVGhlIE5ldGhlcmxhbmRzXCIsIFwiQmVsZ2l1bVwiLCBcIkdlcm1hbnlcIiwgXCJGcmFuY2VcIl07XG4gICAgbGV0IGRkbENvdW50cmllcyA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7IHNlbGVjdGlvbjogdHJ1ZSwgc2VhcmNoOiB0cnVlIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKGNvdW50cmllcy5tYXAoY291bnRyeSA9PiAoeyBtYWluOiBjb3VudHJ5LCB2YWx1ZTogY291bnRyeSB9KSkpXG4gICAgfSk7XG4gICAgbGV0IGNhcmRzID0gW1wiVmlzYVwiLCBcIkFtZXJpY2FuIEV4cHJlc3NcIiwgXCJEaXNjb3ZlclwiXTtcbiAgICBsZXQgZGRsQ2FyZHMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBzZWxlY3Rpb246IHRydWUgfSksXG4gICAgICBjb250ZW50JDogeHMub2YoY2FyZHMubWFwKGNhcmQgPT4gKHsgbWFpbjogY2FyZCwgdmFsdWU6IGNhcmQgfSkpKVxuICAgIH0pO1xuICAgIGxldCBtb250aHMgPSBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXTtcbiAgICBsZXQgZGRsTW9udGhzID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgc2VsZWN0aW9uOiB0cnVlLCBzZWFyY2g6IHRydWUsIHNpemU6IFVJLlNpemUuRmx1aWQgfSksXG4gICAgICBjb250ZW50JDogeHMub2YobW9udGhzLm1hcChtb250aCA9PiAoeyBtYWluOiBtb250aCwgdmFsdWU6IG1vbnRoIH0pKSlcbiAgICB9KTtcbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5jb21iaW5lKGRkbFN0YXRlcy5ET00sIGRkbENvdW50cmllcy5ET00sIGRkbENhcmRzLkRPTSwgZGRsTW9udGhzLkRPTSkubWFwKFxuICAgICAgICAoW2RkbFN0YXRlcywgZGRsQ291bnRyaWVzLCBkZGxDYXJkcywgZGRsTW9udGhzXSkgPT4gVUkuRm9ybS5yZW5kZXIoW1xuICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSB9LCBcIlNoaXBwaW5nIEluZm9ybWF0aW9uXCIpLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBcIk5hbWVcIiwgbWFpbjogW1xuICAgICAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KSksXG4gICAgICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJMYXN0IE5hbWVcIiB9KSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbGFiZWw6IFwiQmlsbGluZyBhZHJlc3NcIiwgbWFpbjogW1xuICAgICAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDEyIH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlN0cmVldCBBZHJlc3NcIiB9KV0pLFxuICAgICAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiQXB0ICNcIiB9KV0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiU3RhdGVcIiwgbWFpbjogZGRsU3RhdGVzIH0gfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBjb250ZW50OiB7IGxhYmVsOiBcIkNvdW50cnlcIiwgbWFpbjogZGRsQ291bnRyaWVzIH0gfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUgfSwgXCJCaWxsaW5nIEluZm9ybWF0aW9uXCIpLFxuICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGNvbnRlbnQ6IHsgbGFiZWw6IFwiQ2FyZCBUeXBlXCIsIG1haW46IGRkbENhcmRzIH0gfSksXG4gICAgICAgICAgVUkuRmllbGRzLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyBwcm9wczogeyB3aWR0aDogNyB9LCBjb250ZW50OiB7IGxhYmVsOiBcIkNhcmQgTnVtYmVyXCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkNhcmQgI1wiIH0pXSB9IH0pLFxuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgcHJvcHM6IHsgd2lkdGg6IDMgfSwgY29udGVudDogeyBsYWJlbDogXCJDVkNcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiQ1ZDXCIgfSldIH0gfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBwcm9wczogeyB3aWR0aDogNiB9LCBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiRXhwaXJhdGlvblwiLCBtYWluOiBbXG4gICAgICAgICAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbZGRsTW9udGhzXSksXG4gICAgICAgICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihbVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJZZWFyXCIgfSldKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlIH0sIFwiUmVjZWlwdFwiKSxcbiAgICAgICAgICAvL1RPRE8gTXVsdGlwbGUgZHJvcGRvd24gZXhhbXBsZSxcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5DaGVja2JveC5yZW5kZXIoeyB0b2dnbGU6IHRydWUgfSwgXCJEbyBub3QgaW5jbHVkZSBhIHJlY2VpcHQgaW4gdGhlIHBhY2thZ2VcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiU3VibWl0IG9yZGVyXCIpXG4gICAgICAgIF0pXG4gICAgICApLFxuICAgICAgY29kZTogYGxldCBzdGF0ZXMgPSBbXCJBbGFiYW1hXCIsIFwiQWxhc2thXCIsIFwiQXJpem9uYVwiLCBcIkFya2Fuc2FzXCIsIFwiQ2FsaWZvcm5pYVwiLCBcIkNvbG9yYWRvXCIsIFwiQ29ubmVjdGljdXRcIiwgXCJEZWxhd2FyZVwiXTtcbiAgICAgIGxldCBkZGxTdGF0ZXMgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgICBwcm9wcyQ6IHhzLm9mKHtzZWxlY3Rpb246IHRydWV9KSxcbiAgICAgICAgY29udGVudCQ6IHhzLm9mKHN0YXRlcy5tYXAoc3RhdGUgPT4gKHttYWluOiBzdGF0ZSwgdmFsdWU6IHN0YXRlfSkpKVxuICAgICAgfSk7XG4gICAgICBsZXQgY291bnRyaWVzID0gW1wiVW5pdGVkIFN0YXRlc1wiLCBcIlRoZSBOZXRoZXJsYW5kc1wiLCBcIkJlbGdpdW1cIiwgXCJHZXJtYW55XCIsIFwiRnJhbmNlXCJdO1xuICAgICAgbGV0IGRkbENvdW50cmllcyA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHByb3BzJDogeHMub2Yoe3NlbGVjdGlvbjogdHJ1ZSwgc2VhcmNoOiB0cnVlfSksXG4gICAgICAgIGNvbnRlbnQkOiB4cy5vZihjb3VudHJpZXMubWFwKGNvdW50cnkgPT4gKHttYWluOiBjb3VudHJ5LCB2YWx1ZTogY291bnRyeX0pKSlcbiAgICAgIH0pO1xuICAgICAgbGV0IGNhcmRzID0gW1wiVmlzYVwiLCBcIkFtZXJpY2FuIEV4cHJlc3NcIiwgXCJEaXNjb3ZlclwiXTtcbiAgICAgIGxldCBkZGxDYXJkcyA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHByb3BzJDogeHMub2Yoe3NlbGVjdGlvbjogdHJ1ZX0pLFxuICAgICAgICBjb250ZW50JDogeHMub2YoY2FyZHMubWFwKGNhcmQgPT4gKHttYWluOiBjYXJkLCB2YWx1ZTogY2FyZH0pKSlcbiAgICAgIH0pO1xuICAgICAgbGV0IG1vbnRocyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdO1xuICAgICAgbGV0IGRkbE1vbnRocyA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHByb3BzJDogeHMub2Yoe3NlbGVjdGlvbjogdHJ1ZSwgc2VhcmNoOiB0cnVlLCBzaXplOiBVSS5TaXplLkZsdWlkfSksXG4gICAgICAgIGNvbnRlbnQkOiB4cy5vZihtb250aHMubWFwKG1vbnRoID0+ICh7bWFpbjogbW9udGgsIHZhbHVlOiBtb250aH0pKSlcbiAgICAgIH0pO1xuICAgICAgbGV0IHZUcmVlJDogeHMuY29tYmluZShkZGxTdGF0ZXMuRE9NLCBkZGxDb3VudHJpZXMuRE9NLCBkZGxDYXJkcy5ET00sIGRkbE1vbnRocy5ET00pLm1hcChcbiAgICAgICAgKFtkZGxTdGF0ZXMsIGRkbENvdW50cmllcywgZGRsQ2FyZHMsIGRkbE1vbnRoc10pID0+IFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHtkaXZpZGluZzogdHJ1ZX0sIFwiU2hpcHBpbmcgSW5mb3JtYXRpb25cIiksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJOYW1lXCIsIG1haW46IFtcbiAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcihVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiRmlyc3QgTmFtZVwifSkpLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwifSkpXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF19fSksXG4gICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgY29udGVudDogeyBsYWJlbDogXCJCaWxsaW5nIGFkcmVzc1wiLCBtYWluOiBbXG4gICAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKFtcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHsgd2lkdGg6IDEyfSwgW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJTdHJlZXQgQWRyZXNzXCJ9KV0pLFxuICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoeyB3aWR0aDogNH0sIFtVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiQXB0ICNcIn0pXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXX19KSxcbiAgICAgICAgICBVSS5GaWVsZHMucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7bGFiZWw6IFwiU3RhdGVcIiwgbWFpbjogZGRsU3RhdGVzfX0pLFxuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtjb250ZW50OiB7bGFiZWw6IFwiQ291bnRyeVwiLCBtYWluOiBkZGxDb3VudHJpZXN9fSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHtkaXZpZGluZzogdHJ1ZX0sIFwiQmlsbGluZyBJbmZvcm1hdGlvblwiKSxcbiAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe2NvbnRlbnQ6IHsgbGFiZWw6IFwiQ2FyZCBUeXBlXCIsIG1haW46IGRkbENhcmRzfX0pLFxuICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtwcm9wczoge3dpZHRoOiA3fSwgY29udGVudDogeyBsYWJlbDogXCJDYXJkIE51bWJlclwiLCBtYWluOiBbVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIkNhcmQgI1wifSldfX0pLFxuICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtwcm9wczoge3dpZHRoOiAzfSwgY29udGVudDogeyBsYWJlbDogXCJDVkNcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJDVkNcIn0pXX19KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7cHJvcHM6IHt3aWR0aDogNn0sIGNvbnRlbnQ6IHsgbGFiZWw6IFwiRXhwaXJhdGlvblwiLCBtYWluOiBbXG4gICAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoe2VxdWFsV2lkdGg6IHRydWV9LCBbXG4gICAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKFtkZGxNb250aHNdKSxcbiAgICAgICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoW1VJLlRleHRib3gucmVuZGVyKHtwbGFjZWhvbGRlcjogXCJZZWFyXCJ9KV0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdfX0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7ZGl2aWRpbmc6IHRydWV9LCBcIlJlY2VpcHRcIiksXG4gICAgICAgICAgLy9UT0RPIE11bHRpcGxlIGRyb3Bkb3duIGV4YW1wbGUsXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ2hlY2tib3gucmVuZGVyKHt0b2dnbGU6IHRydWV9LCBcIkRvIG5vdCBpbmNsdWRlIGEgcmVjZWlwdCBpbiB0aGUgcGFja2FnZVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJTdWJtaXQgb3JkZXJcIilcbiAgICAgICAgXSlcbiAgICAgIClgXG4gICAgfSk7XG4gICAgcmV0dXJuIHhzLmNvbWJpbmUoZXguRE9NLCBleDIuRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZm9ybS90eXBlcy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBwLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBDb250ZW50IHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKTogU3RyZWFtPFZOb2RlW10+IHtcbiAgICBsZXQgcm93c0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlJvd3NcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcm93IGlzIGEgaG9yaXpvbnRhbCBncm91cGluZyBvZiBjb2x1bW5zXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksIFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksIFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLCBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksIFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgY29sdW1uc0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbHVtbnNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbHVtbnMgZWFjaCBjb250YWluIGd1dHRlcnMgZ2l2aW5nIHRoZW0gZXF1YWwgc3BhY2luZyBmcm9tIG90aGVyIGNvbHVtbnMuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDh9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZShyb3dzRXguRE9NLCBjb2x1bW5zRXguRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9kZWZpbml0aW9uL2NvbnRlbnQudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgVHlwZXMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgQ29udGVudCB9IGZyb20gXCIuL2NvbnRlbnRcIjtcbmltcG9ydCB7IFZhcmlhdGlvbnN9IGZyb20gXCIuL3ZhcmlhdGlvbnNcIjtcbmltcG9ydCB7IFJlc3BvbnNpdmVWYXJpYXRpb25zfSBmcm9tIFwiLi9yZXNwb25zaXZlVmFyaWF0aW9uc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIERlZmluaXRpb24ge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+IHtcbiAgICBsZXQgdHlwZXMgPSBUeXBlcy5ydW4oc291cmNlcyk7XG4gICAgbGV0IGNvbnRlbnQgPSBDb250ZW50LnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgdmFyaWF0aW9ucyA9IFZhcmlhdGlvbnMucnVuKHNvdXJjZXMpO1xuICAgIGxldCByZXNwb25zaXZlID0gUmVzcG9uc2l2ZVZhcmlhdGlvbnMucnVuKHNvdXJjZXMpO1xuXG4gICAgbGV0IHZUcmVlJCA9IHhzLmNvbWJpbmUodHlwZXMsIGNvbnRlbnQsIHZhcmlhdGlvbnMsIHJlc3BvbnNpdmUpLm1hcChcbiAgICAgIChbdHlwZXMsIGNvbnRlbnQsIHZhcmlhdGlvbnMsIHJlc3BvbnNpdmVdKSA9PiBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJUeXBlc1wiKV1cbiAgICAgICAgICAuY29uY2F0KHR5cGVzKVxuICAgICAgICApLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkNvbnRlbnRcIildXG4gICAgICAgICAgLmNvbmNhdChjb250ZW50KVxuICAgICAgICApLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlZhcmlhdGlvbnNcIildXG4gICAgICAgICAgLmNvbmNhdCh2YXJpYXRpb25zKVxuICAgICAgICApLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlJlc3BvbnNpdmUgVmFyaWFudHNcIildXG4gICAgICAgICAgLmNvbmNhdChyZXNwb25zaXZlKVxuICAgICAgICApLFxuICAgICAgXSlcbiAgICApO1xuICAgIHJldHVybiB2VHJlZSQ7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi9pbmRleC50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBwLCBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNpdmVWYXJpYXRpb25zIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKTogU3RyZWFtPFZOb2RlW10+IHtcbiAgICBsZXQgZG91YmxpbmdFeCA9IGNyZWF0ZURvdWJsaW5nRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHN0YWNrYWJsZUV4ID0gY3JlYXRlU3RhY2thYmxlRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHJldmVyc2VkRXggPSBjcmVhdGVSZXZlcnNlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBkZXZpY2VWaXNpYmlsaXR5RXggPSBjcmVhdGVEZXZpY2VWaXNpYmxpdHlFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgcmVzcG9uc2l2ZVdpZHRoRXggPSBjcmVhdGVSZXNwb25zaXZlV2l0aEV4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KGRvdWJsaW5nRXgsIHN0YWNrYWJsZUV4LCByZXZlcnNlZEV4LCBkZXZpY2VWaXNpYmlsaXR5RXgsIHJlc3BvbnNpdmVXaWR0aEV4KTtcbiAgICByZXR1cm4geHMuY29tYmluZS5hcHBseShudWxsLCBleGFtcGxlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVEb3VibGluZ0V4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuXG4gICAgbGV0IGRvdWJsaW5nRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRG91YmxpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJBIGdyaWQgY2FuIGRvdWJsZSBpdHMgY29sdW1uIHdpZHRoIG9uIHRhYmxldCBhbmQgbW9iaWxlIHNpemVzXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5JbmZvIH0sIFwiQSBncmlkIHdpbGwgcm91bmQgaXRzIGNvbHVtbnMgdG8gdGhlIGNsb3Nlc3QgcmVhc29uYWJsZSB2YWx1ZSB3aGVuIGRvdWJsaW5nLCBmb3IgZXhhbXBsZSBhIGZpdmUgY29sdW1uIGdyaWQgd2lsbCB1c2UgMiBtb2JpbGUsIDMgdGFibGV0LCA1IGRlc2t0b3AuIFRvIGZvcmNlIDEgY29sdW1uIG9uIG1vYmlsZSB5b3UgY2FuIGFkZCBzdGFja2FibGVcIilcbiAgICAgIF0sXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDUsIGRvdWJsaW5nOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7d2lkdGg6IDUsIGRvdWJsaW5nOiB0cnVlfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW2RvdWJsaW5nRXguRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0YWNrYWJsZUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBzdGFja2FibGVFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTdGFja2FibGVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJBIGdyaWQgY2FuIGhhdmUgaXRzIGNvbHVtbnMgc3RhY2sgb24tdG9wIG9mIGVhY2ggb3RoZXIgYWZ0ZXIgcmVhY2hpbmcgbW9iaWxlIGJyZWFrcG9pbnRzXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5JbmZvIH0sIFwiVG8gc2VlIGEgZ3JpZCBzdGFjaywgdHJ5IHJlc2l6aW5nIHlvdXIgYnJvd3NlciB0byBhIHNtYWxsIHdpZHRoXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAyLCBzdGFja2FibGU6IHRydWUgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG4gICAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG4gICAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgc3RhY2thYmxlOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFtcblxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbc3RhY2thYmxlRXguRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJldmVyc2VkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IHJldmVyc2VkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUmV2ZXJzZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJBIGdyaWQgb3Igcm93IGNhbiBzcGVjaWZ5IHRoYXQgaXRzIGNvbHVtbnMgc2hvdWxkIHJldmVyc2Ugb3JkZXIgYXQgZGlmZmVyZW50IGRldmljZSBzaXplc1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuSW5mbyB9LCBcIlJldmVyc2VkIGdyaWRzIGFyZSBjb21wYXRpYmxlIHdpdGggZGl2aWRlZCBncmlkcyBhbmQgb3RoZXIgY29tcGxleCBncmlkIHR5cGVzLlwiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyByZXZlcnNlZENvbXB1dGVyOiB0cnVlLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBBIEZvdXJ0aFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBBIFRoaXJkXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEEgU2Vjb25kXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEEgRmlyc3RcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBCIEZvdXJ0aFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBCIFRoaXJkXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEIgU2Vjb25kXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIEIgRmlyc3RcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgcmV2ZXJzZWRUYWJsZXQ6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlRhYmxldCBBIEZvdXJ0aFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgQSBUaGlyZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgQSBTZWNvbmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IEEgRmlyc3RcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyByZXZlcnNlZE1vYmlsZTogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIEEgRm91cnRoXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIk1vYmlsZSBBIFRoaXJkXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIk1vYmlsZSBBIFNlY29uZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgQSBGaXJzdFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHsgcmV2ZXJzZWRDb21wdXRlcjogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQSBGb3VydGhcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQSBUaGlyZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBBIFNlY29uZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBBIEZpcnN0XCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQiBGb3VydGhcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgQiBUaGlyZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBCIFNlY29uZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBCIEZpcnN0XCIpXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcih7IHJldmVyc2VkVGFibGV0OiB0cnVlLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgQSBGb3VydGhcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IEEgVGhpcmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGFibGV0IEEgU2Vjb25kXCIpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlRhYmxldCBBIEZpcnN0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgcmV2ZXJzZWRNb2JpbGU6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIk1vYmlsZSBBIEZvdXJ0aFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgQSBUaGlyZFwiKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgQSBTZWNvbmRcIiksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiTW9iaWxlIEEgRmlyc3RcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCByZXZlcnNlZEV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB2ZXJ0UmV2ZXJzZWRDb21wdXRlcjogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBSb3cgNFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIFJvdyAzXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgUm93IDJcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBSb3cgMVwiKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHsgdmVydFJldmVyc2VkQ29tcHV0ZXI6IHRydWUsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgUm93IDRcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJDb21wdXRlciBSb3cgM1wiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkNvbXB1dGVyIFJvdyAyXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiQ29tcHV0ZXIgUm93IDFcIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHJldmVyc2VkRXgzID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHZlcnRSZXZlcnNlZFRhYmxldDogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDRcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDNcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDJcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDFcIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHZlcnRSZXZlcnNlZFRhYmxldDogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDRcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDNcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDJcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJUYWJsZXQgUm93IDFcIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHJldmVyc2VkRXg0ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHZlcnRSZXZlcnNlZE1vYmlsZTogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDRcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDNcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDJcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDFcIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHZlcnRSZXZlcnNlZE1vYmlsZTogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDRcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDNcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDJcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJNb2JpbGUgUm93IDFcIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFtyZXZlcnNlZEV4LkRPTSwgcmV2ZXJzZWRFeDIuRE9NLCByZXZlcnNlZEV4My5ET00sIHJldmVyc2VkRXg0LkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlRGV2aWNlVmlzaWJsaXR5RXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IHZpc2liaWxpdHlFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJEZXZpY2UgVmlzaWJpbGl0eVwiLFxuICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgcChcIkEgY29sdW1ucyBvciByb3cgY2FuIGFwcGVhciBvbmx5IGZvciBhIHNwZWNpZmljIGRldmljZSwgb3Igc2NyZWVuIHNpemVzXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5JbmZvIH0sIFwiU2VlIGNvbnRhaW5lciBkb2N1bWVudGF0aW9uIGZvciBpbmZvcm1hdGlvbiBvbiBicmVha3BvaW50IGNhbGN1bGF0aW9uc1wiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDIsIGxhcmdlc2NyZWVuT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkxhcmdlIFNjcmVlblwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJMYXJnZSBTY3JlZW5cIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAyLCBtb2JpbGVPbmx5OiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiTW9iaWxlXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIk1vYmlsZVwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBjb21wdXRlck9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBtb2JpbGVPbmx5OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGFibGV0IGFuZCBNb2JpbGVcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiQWxsIFNpemVzXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkFsbCBTaXplc1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQsIGNvbXB1dGVyT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogMywgdGFibGV0T25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRhYmxldFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJUYWJsZXRcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGFibGV0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDIsIGxhcmdlc2NyZWVuT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkxhcmdlIFNjcmVlblwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJMYXJnZSBTY3JlZW5cIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAyLCBtb2JpbGVPbmx5OiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiTW9iaWxlXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIk1vYmlsZVwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBjb21wdXRlck9ubHk6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJDb21wdXRlclwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBtb2JpbGVPbmx5OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGFibGV0IGFuZCBNb2JpbGVcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiQWxsIFNpemVzXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkFsbCBTaXplc1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQsIGNvbXB1dGVyT25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIkNvbXB1dGVyXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogMywgdGFibGV0T25seTogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRhYmxldFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJUYWJsZXRcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGFibGV0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbdmlzaWJpbGl0eUV4LkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlUmVzcG9uc2l2ZVdpdGhFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgd2lkdGhFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJSZXNwb25zaXZlIFdpZHRoXCIsXG4gICAgICBkZXNjcmlwdGlvbjogW1xuICAgICAgICBwKFwiQSBjb2x1bW4gY2FuIHNwZWNpZnkgYSB3aWR0aCBmb3IgYSBzcGVjaWZpYyBkZXZpY2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLkluZm8gfSwgXCJJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSBhIHJlc3BvbnNpdmUgcGF0dGVybiBsaWtlIGRvdWJsaW5nIG9yIHN0YWNrYWJsZSB0byByZWR1Y2UgY29tcGxleGl0eSB3aGVuIGRlc2lnbmluZyByZXNwb25zaXZlbHksIGhvd2V2ZXIgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHNwZWNpZnlpbmcgZXhhY3Qgd2lkdGhzIGZvciBzY3JlZW4gc2l6ZXMgbWF5IGJlIG5lY2Vzc2FyeS5cIlxuICAgICAgICApXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBtb2JpbGU6IDE2LCB0YWJsZXQ6IDgsIGNvbXB1dGVyOiA0IH0sIFtcbiAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IG1vYmlsZTogMTYsIHRhYmxldDogOCwgY29tcHV0ZXI6IDQgfSwgW1xuICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgbW9iaWxlOiAxNiwgdGFibGV0OiA4LCBjb21wdXRlcjogNCB9LCBbXG4gICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBtb2JpbGU6IDE2LCB0YWJsZXQ6IDgsIGNvbXB1dGVyOiA0IH0sIFtcbiAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IG1vYmlsZTogMTYsIHRhYmxldDogOCwgY29tcHV0ZXI6IDQgfSwgW1xuICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXG4gICAgICAgIF0pLFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7bW9iaWxlOiAxNiwgdGFibGV0OiA4LCBjb21wdXRlcjogNH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHttb2JpbGU6IDE2LCB0YWJsZXQ6IDgsIGNvbXB1dGVyOiA0fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe21vYmlsZTogMTYsIHRhYmxldDogOCwgY29tcHV0ZXI6IDR9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7bW9iaWxlOiAxNiwgdGFibGV0OiA4LCBjb21wdXRlcjogNH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHttb2JpbGU6IDE2LCB0YWJsZXQ6IDgsIGNvbXB1dGVyOiA0fSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHdpZHRoRXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCwgbGFyZ2VzY3JlZW46IDIgfSwgW1xuICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQsIGxhcmdlc2NyZWVuOiAyIH0sIFtcbiAgICAgICAgICBwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0LCBsYXJnZXNjcmVlbjogMiB9LCBbXG4gICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCwgbGFyZ2VzY3JlZW46IDIgfSwgW1xuICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXG4gICAgICAgIF0pLFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDQsIGxhcmdlc2NyZWVuOiAyfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0LCBsYXJnZXNjcmVlbjogMn0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogNCwgbGFyZ2VzY3JlZW46IDJ9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDQsIGxhcmdlc2NyZWVuOiAyfSksXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbd2lkdGhFeC5ET00sIHdpZHRoRXgyLkRPTV07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi9yZXNwb25zaXZlVmFyaWF0aW9ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBwLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBUeXBlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGJhc2ljRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogW1wiR3JpZFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIkZsZXhib3hcIildLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBiYXNpYyBncmlkXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGRpdmlkZWRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogW1wiRGl2aWRlZFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuU2Vjb25kYXJ5IH0sIFwiUmVxdWlyZXMgcm93c1wiKV0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQgY2FuIGhhdmUgZGl2aWRlcnMgYmV0d2VlbiBpdHMgY29sdW1uc1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAzLCBkaXZpZGVkOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7d2lkdGg6IDMsIGRpdmlkZWQ6IHRydWV9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgdmVydGljYWxFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogW1wiVmVydGljYWwgRGl2aWRlZFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuU2Vjb25kYXJ5IH0sIFwiUmVxdWlyZXMgUm93c1wiKV0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQgY2FuIGhhdmUgZGl2aWRlcnMgYmV0d2VlbiByb3dzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgdmVydGljYWxseURpdmlkZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDIgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogMyB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHZlcnRpY2FsbHlEaXZpZGVkOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiAyIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgY2VsbGVkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFtcIkNlbGxlZFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuU2Vjb25kYXJ5IH0sIFwiUmVxdWlyZXMgUm93c1wiKV0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQgY2FuIGhhdmUgcm93cyBkaXZpZGVkIGludG8gY2VsbHNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBjZWxsZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxMyB9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLCAgICAgICAgICBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe2NlbGxlZDogdHJ1ZX0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTN9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogM30pXG4gICAgICAgIF0pLFxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IGludENlbGxlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBbXCJJbnRlcm5hbGx5IENlbGxlZFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuU2Vjb25kYXJ5IH0sIFwiUmVxdWlyZXMgUm93c1wiKV0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQgY2FuIGhhdmUgcm93cyBkaXZpc2lvbnMgb25seSBiZXR3ZWVuIGludGVybmFsIHJvd3NcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBpbnRDZWxsZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksICAgICAgICAgIFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxMH0sIFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMyB9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLCAgICAgICAgICBcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGludENlbGxlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMyB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEwIH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMyB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTAgfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAzIH0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGJhc2ljRXguRE9NLCBkaXZpZGVkRXguRE9NLCB2ZXJ0aWNhbEV4LkRPTSwgY2VsbGVkRXguRE9NLCBpbnRDZWxsZWRFeC5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9ncmlkL2RlZmluaXRpb24vdHlwZXMudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUsIHAsIGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBWYXJpYXRpb25zIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKTogU3RyZWFtPFZOb2RlW10+IHtcblxuICAgIGxldCBmbG9hdGVkRXggPSBjcmVhdGVGbG9hdGVkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHdpZHRoRXggPSBjcmVhdGVXaWR0aEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBjb3VudEV4ID0gY3JlYXRlQ291bnRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZXF1YWxXaWR0aEV4ID0gY3JlYXRlRXF1YWxXaWR0aEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBzdHJldGNoZWRFeCA9IGNyZWF0ZVN0cmV0Y2hlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBwYWRkZWRFeCA9IGNyZWF0ZVBhZGRlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCByZWxheGVkRXggPSBjcmVhdGVSZWxheGVkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGNlbnRlcmVkRXggPSBjcmVhdGVDZW50ZXJlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCB0ZXh0RXggPSBjcmVhdGVUZXh0QWxpZ25tZW50RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGFsaWdubWVudEV4ID0gY3JlYXRlQWxpZ25tZW50RXhhbXBsZXMoc291cmNlcyk7XG5cbiAgICBsZXQgZXhhbXBsZXMgPSBbXS5jb25jYXQoZmxvYXRlZEV4LCB3aWR0aEV4LCBjb3VudEV4LCBlcXVhbFdpZHRoRXgsXG4gICAgICBzdHJldGNoZWRFeCwgcGFkZGVkRXgsIHJlbGF4ZWRFeCwgY2VudGVyZWRFeCwgdGV4dEV4LFxuICAgICAgYWxpZ25tZW50RXgpO1xuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIGV4YW1wbGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZsb2F0ZWRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZmxvYXRlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkZsb2F0ZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgY29sdW1uIGNhbiBzaXQgZmx1c2ggYWdhaW5zdCB0aGUgbGVmdCBvciByaWdodCBlZGdlIG9mIGEgcm93XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IGZsb2F0OiBcImxlZnRcIiwgd2lkdGg6IDUgfSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyBmbG9hdDogXCJyaWdodFwiLCB3aWR0aDogNSB9LCBbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe2Zsb2F0OiBcImxlZnRcIiwgd2lkdGg6IDV9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7ZmxvYXQ6IFwicmlnaHRcIiwgd2lkdGg6IDV9KSxcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZmxvYXRlZEV4LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVXaWR0aEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCB3aWR0aEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbHVtbiBXaWR0aFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBjb2x1bW4gY2FuIHZhcnkgaW4gd2lkdGggdGFraW5nIHVwIG1vcmUgdGhhbiBhIHNpbmdsZSBncmlkIGNvbHVtbi5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA5IH0sIFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDMgfSwgW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA0fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA5fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFt3aWR0aEV4LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb3VudEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBjb3VudEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbHVtbiBDb3VudFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNhbiBoYXZlIGEgZGlmZmVyZW50IG51bWJlciBvZiBjb2x1bW5zIHBlciByb3dcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiA1IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvdW50RXguRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVxdWFsV2lkdGhFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXF1YWxXaWR0aEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkVxdWFsIFdpZHRoXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGdyaWQgY2FuIGF1dG9tYXRpY2FsbHkgcmVzaXplIGFsbCBlbGVtZW50cyB0byBzcGxpdCB0aGUgYXZhaWxhYmxlIHdpZHRoIGV2ZW5seVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogOCB9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjNcIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIilcbiAgICAgICAgXSksIFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogOH0sIFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgXSksIFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjNcIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGVxdWFsV2lkdGhFeDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiM1wiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCI0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiM1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjNcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiNFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjNcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCBbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtlcXVhbFdpZHRoRXguRE9NLCBlcXVhbFdpZHRoRXgyLkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTdHJldGNoZWRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgc3RyZXRjaGVkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU3RyZXRjaGVkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHJvdyBjYW4gc3RyZXRjaCBpdHMgY29udGVudHMgdG8gdGFrZSB1cCB0aGUgZW50aXJlIGNvbHVtbiBoZWlnaHRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMywgZGl2aWRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBzdHJldGNoZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiM1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe3dpZHRoOiAzLCBkaXZpZGVkOiB0cnVlfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgc3RyZXRjaGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksIFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIzXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHN0cmV0Y2hlZEV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHN0cmV0Y2hlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDYgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDYgfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBzdHJldGNoZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIxXCIpLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCIyXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA2IH0sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMVwiKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiMlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNiB9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjFcIiksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIjJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtzdHJldGNoZWRFeC5ET00sIHN0cmV0Y2hlZEV4Mi5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUGFkZGVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IHBhZGRlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlBhZGRlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgcChcIkEgZ3JpZCBjYW4gcHJlc2VydmUgaXRzIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIGd1dHRlcnMgb24gZmlyc3QgYW5kIGxhc3QgY29sdW1uc1wiKSxcbiAgICAgICAgcChcIlRoZSBmb2xsb3dpbmcgZ3JpZCBoYXMgdmVydGljYWwgYW5kIGhvcml6b250YWwgZ3V0dGVyc1wiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuRGl2aWRlci5yZW5kZXIoKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgcGFkZGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW3AoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBDdWl1cyBxdWlkZW0sIHF1b25pYW0gU3RvaWN1cyBmdWl0LCBzZW50ZW50aWEgY29uZGVtbmF0YSBtaWhpIHZpZGV0dXIgZXNzZSBpbmFuaXRhcyBpc3RhIHZlcmJvcnVtLiBJc3RhbSB2b2x1cHRhdGVtIHBlcnBldHVhbSBxdWlzIHBvdGVzdCBwcmFlc3RhcmUgc2FwaWVudGk/XCIpXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5EaXZpZGVyLnJlbmRlcigpLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAyLCBwYWRkZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSlgXG4gICAgfSk7XG4gICAgbGV0IHBhZGRlZEV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBmb2xsb3dpbmcgZ3JpZCBoYXMgdmVydGljYWwgZ3V0dGVycy5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuRGl2aWRlci5yZW5kZXIoKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgdmVydGljYWxseVBhZGRlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRGl2aWRlci5yZW5kZXIoKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgdmVydGljYWxseVBhZGRlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKWBcbiAgICB9KTtcbiAgICBsZXQgcGFkZGVkRXgzID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgZGVzY3JpcHRpb246IFwiVGhlIGZvbGxvd2luZyBncmlkIGhhcyBob3Jpem9udGFsIGd1dHRlcnMuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLkRpdmlkZXIucmVuZGVyKCksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDIsIGhvcml6b250YWxseVBhZGRlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEN1aXVzIHF1aWRlbSwgcXVvbmlhbSBTdG9pY3VzIGZ1aXQsIHNlbnRlbnRpYSBjb25kZW1uYXRhIG1paGkgdmlkZXR1ciBlc3NlIGluYW5pdGFzIGlzdGEgdmVyYm9ydW0uIElzdGFtIHZvbHVwdGF0ZW0gcGVycGV0dWFtIHF1aXMgcG90ZXN0IHByYWVzdGFyZSBzYXBpZW50aT9cIildKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtwKFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VpdXMgcXVpZGVtLCBxdW9uaWFtIFN0b2ljdXMgZnVpdCwgc2VudGVudGlhIGNvbmRlbW5hdGEgbWloaSB2aWRldHVyIGVzc2UgaW5hbml0YXMgaXN0YSB2ZXJib3J1bS4gSXN0YW0gdm9sdXB0YXRlbSBwZXJwZXR1YW0gcXVpcyBwb3Rlc3QgcHJhZXN0YXJlIHNhcGllbnRpP1wiKV0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuRGl2aWRlci5yZW5kZXIoKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiwgaG9yaXpvbnRhbGx5UGFkZGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFtwYWRkZWRFeC5ET00sIHBhZGRlZEV4Mi5ET00sIHBhZGRlZEV4My5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUmVsYXhlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCByZWxheGVkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUmVsYXhlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNhbiBpbmNyZWFzZSBpdHMgZ3V0dGVycyB0byBhbGxvdyBmb3IgbW9yZSBuZWdhdGl2ZSBzcGFjZVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHJlbGF4ZWQ6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe3JlbGF4ZWQ6IHRydWUsIHdpZHRoOiA0fSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHJlbGF4ZWRFeDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgdmVyeVJlbGF4ZWQ6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe3ZlcnlSZWxheGVkOiB0cnVlLCB3aWR0aDogNH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW3JlbGF4ZWRFeC5ET00sIHJlbGF4ZWRFeDIuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNlbnRlcmVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGNlbnRlcmVkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiQ2VudGVyZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZ3JpZCBjYW4gaGF2ZSBpdHMgY29sdW1ucyBjZW50ZXJlZFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAyLCBjZW50ZXJlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiA0LCBjZW50ZXJlZDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHt3aWR0aDogMiwgY2VudGVyZWQ6IHRydWV9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7d2lkdGg6NCwgY2VudGVyZWQ6IHRydWV9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksICAgICAgICBcbiAgICAgICAgVUkuUm93LnJlbmRlcih7d2lkdGg6NH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbY2VudGVyZWRFeC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGV4dEFsaWdubWVudEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCB0ZXh0RXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiVGV4dCBBbGlnbm1lbnRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZ3JpZCwgcm93LCBvciBjb2x1bW4gY2FuIHNwZWNpZnkgaXRzIHRleHQgYWxpZ25tZW50XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgdGV4dEFsaWdubWVudDogXCJjZW50ZXJcIiB9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogMyB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiQ2F0c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiRG9nc1wiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQb29kbGVcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQ29ja2Vyc3BhbmllbFwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiTW9ua2V5c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHRleHRBbGlnbm1lbnQ6IFwiY2VudGVyXCJ9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoe3dpZHRoOiAzfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkNhdHNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkRvZ3NcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUG9vZGxlXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkNvY2tlcnNwYW5pZWxcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIk1vbmtleXNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCB0ZXh0RXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHRleHRBbGlnbm1lbnQ6IFwiY2VudGVyXCIgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBtYWluOiBcIkNhdHNcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB0ZXh0QWxpZ25tZW50OiBcImxlZnRcIiB9LCBbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiRG9nc1wiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQb29kbGVcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQ29ja2Vyc3BhbmllbFwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiTW9ua2V5c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB0ZXh0QWxpZ25tZW50OiBcImp1c3RpZmllZFwiIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiSnVzdGlmaWVkIGNvbnRlbnQgZml0cyBleGFjdGx5IGluc2lkZSB0aGUgZ3JpZCBjb2x1bW4sIHRha2luZyB1cCB0aGUgZW50aXJlIHdpZHRoIGZyb20gb25lIHNpZGUgdG8gdGhlIG90aGVyLiBKdXN0aWZpZWQgY29udGVudCBmaXRzIGV4YWN0bHkgaW5zaWRlIHRoZSBncmlkIGNvbHVtbiwgdGFraW5nIHVwIHRoZSBlbnRpcmUgd2lkdGggZnJvbSBvbmUgc2lkZSB0byB0aGUgb3RoZXIuIEp1c3RpZmllZCBjb250ZW50IGZpdHMgZXhhY3RseSBpbnNpZGUgdGhlIGdyaWQgY29sdW1uLCB0YWtpbmcgdXAgdGhlIGVudGlyZSB3aWR0aCBmcm9tIG9uZSBzaWRlIHRvIHRoZSBvdGhlci4gSnVzdGlmaWVkIGNvbnRlbnQgZml0cyBleGFjdGx5IGluc2lkZSB0aGUgZ3JpZCBjb2x1bW4sIHRha2luZyB1cCB0aGUgZW50aXJlIHdpZHRoIGZyb20gb25lIHNpZGUgdG8gdGhlIG90aGVyLiBKdXN0aWZpZWQgY29udGVudCBmaXRzIGV4YWN0bHkgaW5zaWRlIHRoZSBncmlkIGNvbHVtbiwgdGFraW5nIHVwIHRoZSBlbnRpcmUgd2lkdGggZnJvbSBvbmUgc2lkZSB0byB0aGUgb3RoZXIuXCIpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyB0ZXh0QWxpZ25tZW50OiBcImNlbnRlclwifSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHt3aWR0aDogM30sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJDYXRzXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0ZXh0QWxpZ25tZW50OiBcImxlZnRcIn0sIFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJEb2dzXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlBvb2RsZVwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJDb2NrZXJzcGFuaWVsXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJNb25rZXlzXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKSwgXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoe3RleHRBbGlnbm1lbnQ6IFwianVzdGlmaWVkXCJ9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkp1c3RpZmllZCBjb250ZW50IGZpdHMgZXhhY3RseSBpbnNpZGUgdGhlIGdyaWQgY29sdW1uLCB0YWtpbmcgdXAgdGhlIGVudGlyZSB3aWR0aCBmcm9tIG9uZSBzaWRlIHRvIHRoZSBvdGhlci4gSnVzdGlmaWVkIGNvbnRlbnQgZml0cyBleGFjdGx5IGluc2lkZSB0aGUgZ3JpZCBjb2x1bW4sIHRha2luZyB1cCB0aGUgZW50aXJlIHdpZHRoIGZyb20gb25lIHNpZGUgdG8gdGhlIG90aGVyLiBKdXN0aWZpZWQgY29udGVudCBmaXRzIGV4YWN0bHkgaW5zaWRlIHRoZSBncmlkIGNvbHVtbiwgdGFraW5nIHVwIHRoZSBlbnRpcmUgd2lkdGggZnJvbSBvbmUgc2lkZSB0byB0aGUgb3RoZXIuIEp1c3RpZmllZCBjb250ZW50IGZpdHMgZXhhY3RseSBpbnNpZGUgdGhlIGdyaWQgY29sdW1uLCB0YWtpbmcgdXAgdGhlIGVudGlyZSB3aWR0aCBmcm9tIG9uZSBzaWRlIHRvIHRoZSBvdGhlci4gSnVzdGlmaWVkIGNvbnRlbnQgZml0cyBleGFjdGx5IGluc2lkZSB0aGUgZ3JpZCBjb2x1bW4sIHRha2luZyB1cCB0aGUgZW50aXJlIHdpZHRoIGZyb20gb25lIHNpZGUgdG8gdGhlIG90aGVyLlwiKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgdGV4dEV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB0ZXh0QWxpZ25tZW50OiBcInJpZ2h0XCIsIHdpZHRoOiAzIH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiQ2F0c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiRG9nc1wiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQb29kbGVcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQ29ja2Vyc3BhbmllbFwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiTW9ua2V5c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHRleHRBbGlnbm1lbnQ6IFwicmlnaHRcIiwgd2lkdGg6IDMgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJDYXRzXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJEb2dzXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlBvb2RsZVwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJDb2NrZXJzcGFuaWVsXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSwgXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiTW9ua2V5c1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbdGV4dEV4LkRPTSwgdGV4dEV4Mi5ET00sIHRleHRFeDMuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFsaWdubWVudEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBhbGlnbm1lbnRFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJWZXJ0aWNhbCBBbGlnbm1lbnRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZ3JpZCwgcm93LCBvciBjb2x1bW4gY2FuIHNwZWNpZnkgaXRzIHZlcnRpY2FsIGFsaWdubWVudCB0byBoYXZlIGFsbCBpdHMgY29sdW1ucyB2ZXJ0aWNhbGx5IGNlbnRlcmVkLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IGFsaWdubWVudDogXCJtaWRkbGVcIiwgY2VudGVyZWQ6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIiksXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGFsaWdubWVudDogXCJtaWRkbGVcIiwgY2VudGVyZWQ6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKSxcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBhbGlnbm1lbnRFeDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgY2VudGVyZWQ6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGFsaWdubWVudDogXCJ0b3BcIiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKSxcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBhbGlnbm1lbnQ6IFwibWlkZGxlXCIgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIiksXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgYWxpZ25tZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpLFxuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHsgY2VudGVyZWQ6IHRydWUsIHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGFsaWdubWVudDogXCJ0b3BcIiB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpLFxuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgYWxpZ25tZW50OiBcIm1pZGRsZVwiIH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIiksXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoeyBzaXplOiBVSS5TaXplLkZsdWlkIH0sIFwiXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyBhbGlnbm1lbnQ6IFwiYm90dG9tXCIgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHsgc2l6ZTogVUkuU2l6ZS5GbHVpZCB9LCBcIlwiKSxcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7IHNpemU6IFVJLlNpemUuRmx1aWQgfSwgXCJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW2FsaWdubWVudEV4LkRPTSwgYWxpZ25tZW50RXgyLkRPTV07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvZGVmaW5pdGlvbi92YXJpYXRpb25zLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgT3ZlcnZpZXcgfSBmcm9tIFwiLi9vdmVydmlld1wiO1xuaW1wb3J0IHsgRGVmaW5pdGlvbiB9IGZyb20gXCIuL2RlZmluaXRpb25cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBHcmlkIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKSB7XG4gICAgbGV0IG92ZXJ2aWV3ID0gT3ZlcnZpZXcucnVuKHNvdXJjZXMpO1xuICAgIGxldCBkZWZpbml0aW9uID0gRGVmaW5pdGlvbi5ydW4oc291cmNlcyk7XG5cbiAgICBsZXQgdGFicyA9IFVJLlRhYnMucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBsYWJlbHM6IFtcIk92ZXJ2aWV3XCIsIFwiRGVmaW5pdGlvblwiXSxcbiAgICAgIGNvbnRlbnQ6IFtvdmVydmlldy5tYXAobyA9PiBbb10pLCBkZWZpbml0aW9uLm1hcChvID0+IFtvXSldLFxuICAgICAgbWVudVByb3BzJDogeHMub2YoeyBlcXVhbFdpZHRoOiB0cnVlIH0pLFxuICAgICAgc2VnbWVudFByb3BzJDogeHMub2YoeyBiYXNpYzogdHJ1ZSB9KVxuICAgIH0pO1xuXG5cbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHRhYnMuRE9NKS5tYXAoXG4gICAgICAoW3RhYnNdKSA9PlxuICAgICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiYXJ0aWNsZVwiIH0gfSwgW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29udGFpbmVyLnJlbmRlcihbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoe1xuICAgICAgICAgICAgICAgIHByb3BzOiB7IHNpemU6IFVJLlNpemUuSHVnZSB9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICAgIG1haW46IFwiR3JpZFwiLFxuICAgICAgICAgICAgICAgICAgc3VidGV4dDogXCJBIGdyaWQgaXMgdXNlZCB0byBoYXJtb25pemUgbmVnYXRpdmUgc3BhY2UgaW4gYSBsYXlvdXRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29udGFpbmVyLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5EaXZpZGVyLnJlbmRlcih7IGhpZGRlbjogdHJ1ZSB9KSxcbiAgICAgICAgICAgIHRhYnNcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICkgYXMgU3RyZWFtPFZOb2RlPjtcbiAgICByZXR1cm4ge1xuICAgICAgRE9NOiB2VHJlZSQsXG4gICAgICByb3V0ZXI6IHhzLm5ldmVyKClcbiAgICB9O1xuICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29sdW1ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGZsb3dFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkF1dG9tYXRpYyBGbG93XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJNb3N0IGdyaWRzIGRvIG5vdCBuZWVkIHRvIHNwZWNpZnkgcm93cy4gQ29udGVudCB3aWxsIGF1dG9tYXRpY2FsbHkgZmxvdyB0byB0aGUgbmV4dCByb3cgd2hlbiBhbGwgdGhlIGdyaWQgY29sdW1ucyBhcmUgdGFrZW4gaW4gdGhlIGN1cnJlbnQgcm93LlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgY29udGVudEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbHVtbiBDb250ZW50XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJTaW5jZSBjb2x1bW5zIHVzZSBwYWRkaW5nIHRvIGNyZWF0ZSBndXR0ZXJzLCBjb250ZW50IHN0eWxpbmdzIHNob3VsZCBub3QgYmUgYXBwbGllZCBkaXJlY3RseSB0byBjb2x1bW5zLCBidXQgdG8gZWxlbWVudHMgaW5zaWRlIG9mIGNvbHVtbnMuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoXCJcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKFwiXCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcihcIlwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCB3aWR0aEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiQ29sdW1uIFdpZHRoc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQ29sdW1uIHdpZHRocyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSB3aWR0aCBwcm9wZXJ0eS4gSWYgYSBjb2x1bW4gY2Fubm90IGZpdCBpbiBhIHJvdyBpdCB3aWxsIGF1dG9tYXRpY2FsbHkgZmxvdyB0byB0aGUgbmV4dCByb3dcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDggfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogOCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxMCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA2IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTIgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMn0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDE0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDE2fSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA4IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDggfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogMTAgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNiB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEyIH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDJ9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxNn0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGZsb3dFeC5ET00sIGNvbnRlbnRFeC5ET00sIHdpZHRoRXguRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvZ3JpZC9vdmVydmlldy9jb2x1bW5zLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEludHJvZHVjdGlvbn0gZnJvbSBcIi4vaW50cm9kdWN0aW9uXCI7XG5pbXBvcnQgeyBDb2x1bW5zIH0gZnJvbSBcIi4vY29sdW1uc1wiO1xuaW1wb3J0IHsgUm93cyB9IGZyb20gXCIuL3Jvd3NcIjtcbmltcG9ydCB7IFZhcnlpbmdHcmlkc30gZnJvbSBcIi4vdmFyeWluZ0dyaWRzXCI7XG5pbXBvcnQgeyBSZXNwb25zaXZlR3JpZHMgfSBmcm9tIFwiLi9yZXNwb25zaXZlR3JpZHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBPdmVydmlldyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZT4ge1xuICAgIGxldCBpbnRybyA9IEludHJvZHVjdGlvbi5ydW4oc291cmNlcyk7XG4gICAgbGV0IGNvbHVtbnMgPSBDb2x1bW5zLnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgcm93cyA9IFJvd3MucnVuKHNvdXJjZXMpO1xuICAgIGxldCB2YXJ5aW5nR3JpZHMgPSBWYXJ5aW5nR3JpZHMucnVuKHNvdXJjZXMpO1xuICAgIGxldCByZXNwb25zaXZlR3JpZHMgPSBSZXNwb25zaXZlR3JpZHMucnVuKHNvdXJjZXMpO1xuXG4gICAgbGV0IHZUcmVlJCA9IHhzLmNvbWJpbmUoaW50cm8sIGNvbHVtbnMsIHJvd3MsIHZhcnlpbmdHcmlkcywgcmVzcG9uc2l2ZUdyaWRzKS5tYXAoXG4gICAgICAoW2ludHJvLCBjb2x1bW5zLCByb3dzLCB2YXJ5aW5nR3JpZHMsIHJlc3BvbnNpdmVHcmlkc10pID0+IFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkludHJvZHVjdGlvblwiKV1cbiAgICAgICAgICAuY29uY2F0KGludHJvKVxuICAgICAgICApLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIkNvbHVtbnNcIildXG4gICAgICAgICAgLmNvbmNhdChjb2x1bW5zKVxuICAgICAgICApLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlJvd3NcIildXG4gICAgICAgICAgLmNvbmNhdChyb3dzKVxuICAgICAgICApLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlZhcnlpbmcgR3JpZHNcIildXG4gICAgICAgICAgLmNvbmNhdCh2YXJ5aW5nR3JpZHMpXG4gICAgICAgICksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiUmVzcG9uc2l2ZSBHcmlkc1wiKV1cbiAgICAgICAgICAuY29uY2F0KHJlc3BvbnNpdmVHcmlkcylcbiAgICAgICAgKVxuICAgICAgXSlcbiAgICApO1xuICAgIHJldHVybiB2VHJlZSQ7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgcCwgYSwgaSwgZGl2LCBjb2RlLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBJbnRyb2R1Y3Rpb24ge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBncmlkRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJHcmlkc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFtwKFtcIkEgZ3JpZCBpcyBhIHN0cnVjdHVyZSB3aXRoIGEgXCIsIGEoeyBhdHRyczogeyBocmVmOiBcImh0dHA6Ly85OWRlc2lnbnMuY29tL2Rlc2lnbmVyLWJsb2cvMjAxMy8wMy8yMS9oaXN0b3J5LW9mLXRoZS1ncmlkLXBhcnQtMS9cIiB9IH0sIFwibG9uZyBoaXN0b3J5XCIpLCBcIiB1c2VkIHRvIGFsaWduIG5lZ2F0aXZlIHNwYWNlIGluIGRlc2lnbnMuXCJdKSxcbiAgICAgIHAoXCJVc2luZyBhIGdyaWQgbWFrZXMgY29udGVudCBhcHBlYXIgdG8gZmxvdyBtb3JlIG5hdHVyYWxseSBvbiB5b3VyIHBhZ2UuXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDR9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDR9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDR9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDR9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgY29sdW1uc0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiQ29sdW1uc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgcChcIkdyaWRzIGRpdmlkZSBob3Jpem9udGFsIHNwYWNlIGludG8gaW5kaXZpc2libGUgdW5pdHMgY2FsbGVkIFxcXCJjb2x1bW5zXFxcIi4gQWxsIGNvbHVtbnMgaW4gYSBncmlkIG11c3Qgc3BlY2lmeSB0aGVpciB3aWR0aCBhcyBwcm9wb3J0aW9uIG9mIHRoZSB0b3RhbCBhdmFpbGFibGUgcm93IHdpZHRoLlwiKSxcbiAgICAgICAgcChcIkFsbCBncmlkIHN5c3RlbXMgY2hvb3NlcyBhbiBhcmJpdHJhcnkgY29sdW1uIGNvdW50IHRvIGFsbG93IHBlciByb3cuIFNlbWFudGljJ3MgZGVmYXVsdCB0aGVtZSB1c2VzIDE2IGNvbHVtbnMuXCIpLFxuICAgICAgICBwKFtcIlRoZSBleGFtcGxlIGJlbG93IHNob3dzIGZvdXIgZm91ciB3aWRlIGNvbHVtbnMgd2lsbCBmaXQgaW4gdGhlIGZpcnN0IHJvdywgXCIsIGNvZGUoXCIxNiAvIDQgPSA0XCIpLCBcIiBhbmQgdGhyZWUgdmFyaW91cyBzaXplZCBjb2x1bW5zIGluIHRoZSBzZWNvbmQgcm93LiBcIiwgY29kZShcIjIgKyA4ICsgNiA9IDE2XCIpXSksXG4gICAgICAgIHAoXCJUaGUgZGVmYXVsdCBjb2x1bW4gY291bnQsIGFuZCBvdGhlciBhcmJpdHJhcnkgZmVhdHVyZXMgb2YgZ3JpZHMgY2FuIGJlIGNoYW5nZWQgYnkgYWRqdXN0aW5nIFNlbWFudGljIFVJJ3MgdW5kZXJseWluZyB0aGVtaW5nIHZhcmlhYmxlcy5cIilcbiAgICAgIF0sXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDIgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogOCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA2IH0pLFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDIgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogOCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA2IH0pLFxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgcm93c0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiUm93c1wiLFxuICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgcChcIlJvd3MgYXJlIGdyb3VwcyBvZiBjb2x1bW5zIHdoaWNoIGFyZSBhbGlnbmVkIGhvcml6b250YWxseS5cIiksXG4gICAgICAgIHAoW1wiUm93cyBjYW4gZWl0aGVyIGJlIFwiLCBpKFwiZXhwbGljaXRcIiksIFwiIG1hcmtlZCB3aXRoIGFuIGFkZGl0aW9uYWwgcm93IGVsZW1lbnQsIG9yIFwiLCBpKFwiaW1wbGljaXRcIiksIFwiLCBhdXRvbWF0aWNhbGx5IG9jY3VycmluZyB3aGVuIG5vIG1vcmUgc3BhY2UgaXMgbGVmdCBpbiBhIHByZXZpb3VzIHJvdy5cIl0pXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGd1dHRlcnNFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkd1dHRlcnNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoW1wiR3JpZCBjb2x1bW5zIGFyZSBzZXBhcmF0ZWQgYnkgYXJlYXMgb2Ygd2hpdGUgc3BhY2UgcmVmZXJyZWQgdG8gYXMgXFxcImd1dHRlcnNcXFwiLiBHdXR0ZXJzIGltcHJvdmUgbGVnaWJpbGl0eSBieSBwcm92aWRpbmcsIFwiLFxuICAgICAgICAgIGEoeyBhdHRyczogeyBocmVmOiBcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05lZ2F0aXZlX3NwYWNlXCIgfSB9LCBcIm5lZ2F0aXZlIHNwYWNlXCIpLCBcIiBiZXR3ZWVuIHBhZ2UgZWxlbWVudHMuXCJdKSxcbiAgICAgICAgcChcIkd1dHRlcnMgcmVtYWluIGEgY29uc3RhbnQgc2l6ZSByZWdhcmRsZXNzIG9mIHRoZSB3aWR0aCBvZiB0aGUgZ3JpZCwgb3IgaG93IG1hbnkgY29sdW1ucyBhcmUgaW4gYSByb3cuIFRvIGluY3JlYXNlIHRoZSBzaXplIG9mIGd1dHRlcnMgaW4gYSBwYXJ0aWN1bGFyIGdyaWQsIHlvdSBjYW4gdXNlIGEgcmVsYXhlZCBncmlkIHZhcmlhdGlvbi5cIilcbiAgICAgIF0sXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHtyZWxheGVkOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKHtyZWxheGVkOiB0cnVlfSwgW1xuICAgICAgICAgIFVJLlJvdy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgICBdKVxuICAgICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBuZWdNYXJnaW5zRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJOZWdhdGl2ZSBtYXJnaW5zXCIsXG4gICAgICBkZXNjcmlwdGlvbjogW3AoW1wiU2luY2UgYWxsIGdyaWQgY29sdW1ucyBpbmNsdWRlIGd1dHRlcnMsIGdyaWRzIHVzZSBcIiwgYSh7YXR0cnM6IHtocmVmOiBcImh0dHBzOi8vY3Nzd2l6YXJkcnkuY29tLzIwMTEvMDgvYnVpbGRpbmctYmV0dGVyLWdyaWQtc3lzdGVtcy9cIn19LCBcIm5lZ2F0aXZlIG1hcmdpbnNcIiksIFxuICAgICAgXCIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGZpcnN0IGFuZCBsYXN0IGNvbHVtbnMgc2l0IGZsdXNoIHdpdGggY29udGVudCBvdXRzaWRlIHRoZSBncmlkLlwiXSksXG4gICAgICAgIHAoXCJJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUsIHlvdSBjYW4gc2VlIGV2ZW4gdGhvdWdoIHRoZSB0b3Agcm93IGhhcyBwYWRkaW5nLCB0aGUgYXR0YWNoZWQgYnV0dG9uIHN0aWxsIHNpdHMgZmx1c2ggd2l0aCB0aGUgZWRnZSBvZiB0aGUgZ3JpZC5cIiksXG4gICAgICAgIHAoXCJJbiBzb21lIGNhc2VzIHlvdSBtYXkgd2FudCB0byBhdm9pZCB1c2luZyBuZWdhdGl2ZSBtYXJnaW5zLiBZb3UgY2FuIGRvIHRoaXMgYnkgdXNpbmcgYSBwYWRkZWQgZ3JpZCB2YXJpYXRpb24uXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5CdXR0b24ucmVuZGVyKHthdHRhY2htZW50OiBVSS5BdHRhY2htZW50LlRvcH0sIFwiQnV0dG9uIGJlZm9yZSBncmlkXCIpLFxuICAgICAgICBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDE2fSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDZ9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxNn0pLFxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQnV0dG9uLnJlbmRlcih7YXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Cb3R0b219LCBcIkJ1dHRvbiBhZnRlciBncmlkXCIpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuQnV0dG9uLnJlbmRlcih7YXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Ub3B9LCBcIkJ1dHRvbiBiZWZvcmUgZ3JpZFwiKSxcbiAgICAgICAgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxNn0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxMH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA2fSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTZ9KSxcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoe2F0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuQm90dG9tfSwgXCJCdXR0b24gYWZ0ZXIgZ3JpZFwiKWBcbiAgICB9KTtcblxuICAgIGxldCBjb250YWluZXJFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkNvbnRhaW5lciBncmlkc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFtcbiAgICAgICAgcChcIkdyaWRzIGFyZSBmbHVpZCBhbmQgd2lsbCBhdXRvbWF0aWNhbGx5IGZsb3cgaW4gc2l6ZSB0byB0YWtlIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSB3aWR0aC5cIiksXG4gICAgICAgIHAoXCJDb250YWluZXJzIGFyZSBlbGVtZW50cyBkZXNpZ25lZCB0byBsaW1pdCBwYWdlIGNvbnRlbnQgdG8gYSByZWFzb25hYmxlIG1heGltdW0gd2lkdGggZm9yIGRpc3BsYXkgYmFzZWQgb24gdGhlIHNpemUgb2YgdGhlIHVzZXIncyBzY3JlZW4uXCIpLFxuICAgICAgICBwKFwiVXNpbmcgYSBncmlkIGNvbnRhaW5lciBpcyB0aGUgYmVzdCB3YXkgdG8gaW5jbHVkZSB0b3AtbGV2ZWwgcGFnZSBjb250ZW50IGluc2lkZSBhIGdyaWQuXCIpXG4gICAgICBdLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7Y29udGFpbmVyOiB0cnVlfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTZ9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHtjb250YWluZXI6IHRydWV9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxNn0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGdyaWRFeC5ET00sIGNvbHVtbnNFeC5ET00sIHJvd3NFeC5ET00sIGd1dHRlcnNFeC5ET00sIG5lZ01hcmdpbnNFeC5ET00sIGNvbnRhaW5lckV4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvaW50cm9kdWN0aW9uLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNpdmVHcmlkcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGNvbnRhaW5lckV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiQ29udGFpbmVyc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBncmlkIGNvbnRhaW5lciB2YXJpYW50IGNhbiBiZSB1c2VkIHRvIHByb3ZpZGUgYSByZXNwb25zaXZlLCBmaXhlZCB3aWR0aCBjb250YWluZXIgZm9yIHdyYXBwaW5nIHRoZSBjb250ZW50cyBvZiBhIHBhZ2UuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgY29udGFpbmVyOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7Y29udGFpbmVyOiB0cnVlfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNCB9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgc3RhY2thYmxlRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJTdGFja2FibGVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc3RhY2thYmxlIGdyaWQgd2lsbCBhdXRvbWF0aWNhbGx5IHN0YWNrIHJvd3MgdG8gYSBzaW5nbGUgY29sdW1ucyBvbiBtb2JpbGUgZGV2aWNlc1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHN0YWNrYWJsZTogdHJ1ZSwgd2lkdGg6IDQgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHN0YWNrYWJsZTogdHJ1ZSwgd2lkdGg6IDQgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHJldmVyc2VFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJSZXZlcnNlIE9yZGVyXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJTZW1hbnRpYyBpbmNsdWRlcyBzcGVjaWFsIHJldmVyc2VkIHZhcmlhdGlvbnMgdGhhdCBhbGxvdyB5b3UgdG8gcmV2ZXJzZSB0aGUgb3JkZXIgb2YgY29sdW1ucyBvciByb3dzIGJ5IGRldmljZVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcih7IHJldmVyc2VkTW9iaWxlOiB0cnVlLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIkZpcnN0XCIpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiU2Vjb25kXCIpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFwiVGhpcmRcIiksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoeyByZXZlcnNlZE1vYmlsZTogdHJ1ZSwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoXCJGaXJzdFwiKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlNlY29uZFwiKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihcIlRoaXJkXCIpLFxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZG91YmxpbmdFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkRvdWJsaW5nXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGRvdWJsaW5nIGdyaWQgd2lsbCBkb3VibGUgY29sdW1uIHdpZHRocyBmb3IgZWFjaCBkZXZpY2UganVtcC5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZG91Ymxpbmc6IHRydWUsIHdpZHRoOiA4IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZG91Ymxpbmc6IHRydWUsIHdpZHRoOiA2IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGRvdWJsaW5nOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZG91Ymxpbmc6IHRydWUsIHdpZHRoOiA4IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZG91Ymxpbmc6IHRydWUsIHdpZHRoOiA2IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGRvdWJsaW5nOiB0cnVlLCB3aWR0aDogNCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBtYW51YWxFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIk1hbnVhbCBUd2Vha3NcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkFsdGhvdWdoIGRlc2lnbiBwYXR0ZXJucyBsaWtlIGRvdWJsaW5nIG9yIHN0YWNrYWJsZSBhcmUgdXNlZnVsIGF0IHNpbXBsaWZ5aW5nIHJlc3BvbnNpdmUgc3R5bGluZywgeW91IGNhbiBhbHNvIG1hbnVhbGx5IHR3ZWFrIGRldmljZSBwcmVzZW50YXRpb24gYnkgc3BlY2lmeWluZyB0aGUgd2lkdGggZm9yIGEgZGV2aWNldHlwZSBvbiBjb2x1bW5zIG9yIHNldHRpbmcgdGhlIGRldmljZSBvbmx5IHByb3BlcnRpZXMgb24gZ3JpZHMsIHJvd3Mgb3IgY29sdW1ucy5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoe2NlbnRlcmVkOiB0cnVlfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHtjb21wdXRlck9ubHk6IHRydWV9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0YWJsZXQ6IDYsIGNvbXB1dGVyOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3RhYmxldDogNiwgY29tcHV0ZXI6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7dGFibGV0OiA2LCBjb21wdXRlcjogOH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0YWJsZXQ6IDYsIGNvbXB1dGVyOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3RhYmxldDogNiwgY29tcHV0ZXI6IDh9KSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7Y2VudGVyZWQ6IHRydWV9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoe2NvbXB1dGVyT25seTogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3RhYmxldDogNiwgY29tcHV0ZXI6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7dGFibGV0OiA2LCBjb21wdXRlcjogOH0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt0YWJsZXQ6IDYsIGNvbXB1dGVyOiA4fSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3RhYmxldDogNiwgY29tcHV0ZXI6IDh9KSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7dGFibGV0OiA2LCBjb21wdXRlcjogOH0pLFxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZShjb250YWluZXJFeC5ET00sIHN0YWNrYWJsZUV4LkRPTSwgcmV2ZXJzZUV4LkRPTSwgZG91YmxpbmdFeC5ET00sIG1hbnVhbEV4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvcmVzcG9uc2l2ZUdyaWRzLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IHAsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFJvd3Mge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuICAgIGxldCBncm91cGluZ0V4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiR3JvdXBpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJvdyB3cmFwcGVycyBhbGxvdyB5b3UgdG8gYXBwbHkgdmFyaWF0aW9ucyB0byBhIGdyb3VwIG9mIGNvbHVtbnMuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgd2lkdGg6IDIgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuR3JpZC5yZW5kZXIoe3dpZHRoOiA0fSwgW1xuICAgICAgICBVSS5Sb3cucmVuZGVyKHt3aWR0aDogMn0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgY2xlYXJFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaGVhZGVyOiBcIkNsZWFyaW5nIENvbnRlbnRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJvdyB3cmFwcGVycyB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYXIgcHJldmlvdXMgY29sdW1ucywgbWFraW5nIHRoZW0gdXNlZnVsIHdoZW4gdXNpbmcgZmxvYXRlZCB2YXJpYXRpb25zLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IGZsb2F0OiBcImxlZnRcIiB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgZmxvYXQ6IFwicmlnaHRcIiB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogOH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA1fSlcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IGZsb2F0OiBcImxlZnRcIiB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgZmxvYXQ6IFwicmlnaHRcIiB9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogOH0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA1fSlcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IHNwZWNpYWxFeCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTcGVjaWFsIEdyaWRzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBZGRpdGlvbmFsbHksIHNvbWUgdHlwZXMgb2YgZ3JpZHMsIGxpa2UgZGl2aWRlZCBvciBjZWxsZWQgcmVxdWlyZSByb3cgd3JhcHBlcnMgdG8gYXBwbHkgZm9ybWF0dGluZyBjb3JyZWN0bHkuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKHtpbnRDZWxsZWQ6IHRydWV9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSwgW1xuICAgICAgICAgICAgVUkuSW1hZ2UucmVuZGVyKHtzaXplOiBVSS5TaXplLkZsdWlkfSxcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMwJnR4dD1QbGFjZWhvbGRlciZ3PTEwMDAmaD0xMDAwXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSwgW1xuICAgICAgICAgICAgcChcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIER1aXMgYXQgcHVydXMgbmliaC4gQ3JhcyBtZXR1cyBudWxsYSwgdmVzdGlidWx1bSBpbiBhdWN0b3IgYWMsIGZlcm1lbnR1bSB2aXRhZSB0ZWxsdXMuIERvbmVjIHNlZCBhbGlxdWFtIG5pc2wuIFNlZCBldSBsZW8gaWQgZXN0IHByZXRpdW0gZXVpc21vZC4gTnVsbGEgaWQganVzdG8gYXQgbWkgdmVuZW5hdGlzIHZvbHV0cGF0LiBGdXNjZSBuaXNpIGxlbywgcGxhY2VyYXQgaWQgY29uZGltZW50dW0gYSwgYWNjdW1zYW4gdml0YWUgdG9ydG9yLiBOdW5jIG1hZ25hIG51bmMsIHZlbmVuYXRpcyBuZWMgZWxlbWVudHVtIGV1LCB1bHRyaWNlcyBpbiBzZW0uIE1hZWNlbmFzIHRpbmNpZHVudCBzZW1wZXIgbW9sZXN0aWUuIE51bGxhIG5lYyBuZXF1ZSBzaXQgYW1ldCBsaWJlcm8gbW9sZXN0aWUgZmV1Z2lhdC4gQ3JhcyBpZCBtZXR1cyB2ZWxpdC4gTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gTnVsbGFtIGxvYm9ydGlzIGFyY3Ugbm9uIGxlbyBwb3J0YSB1dCBldWlzbW9kIGFudGUgbHVjdHVzLiBQcmFlc2VudCBlbGVtZW50dW0gc29kYWxlcyBkb2xvciBpZCBzY2VsZXJpc3F1ZS5cIilcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogM30sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogM30sIFtcbiAgICAgICAgICAgIFVJLkltYWdlLnJlbmRlcih7c2l6ZTogVUkuU2l6ZS5GbHVpZH0sXCJodHRwczovL3BsYWNlaG9sZGl0LmltZ2l4Lm5ldC9+dGV4dD90eHRzaXplPTMzMCZ0eHQ9UGxhY2Vob2xkZXImdz0xMDAwJmg9MTAwMFwiKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAxMH0sIFtcbiAgICAgICAgICAgIHAoXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBEdWlzIGF0IHB1cnVzIG5pYmguIENyYXMgbWV0dXMgbnVsbGEsIHZlc3RpYnVsdW0gaW4gYXVjdG9yIGFjLCBmZXJtZW50dW0gdml0YWUgdGVsbHVzLiBEb25lYyBzZWQgYWxpcXVhbSBuaXNsLiBTZWQgZXUgbGVvIGlkIGVzdCBwcmV0aXVtIGV1aXNtb2QuIE51bGxhIGlkIGp1c3RvIGF0IG1pIHZlbmVuYXRpcyB2b2x1dHBhdC4gRnVzY2UgbmlzaSBsZW8sIHBsYWNlcmF0IGlkIGNvbmRpbWVudHVtIGEsIGFjY3Vtc2FuIHZpdGFlIHRvcnRvci4gTnVuYyBtYWduYSBudW5jLCB2ZW5lbmF0aXMgbmVjIGVsZW1lbnR1bSBldSwgdWx0cmljZXMgaW4gc2VtLiBNYWVjZW5hcyB0aW5jaWR1bnQgc2VtcGVyIG1vbGVzdGllLiBOdWxsYSBuZWMgbmVxdWUgc2l0IGFtZXQgbGliZXJvIG1vbGVzdGllIGZldWdpYXQuIENyYXMgaWQgbWV0dXMgdmVsaXQuIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIE51bGxhbSBsb2JvcnRpcyBhcmN1IG5vbiBsZW8gcG9ydGEgdXQgZXVpc21vZCBhbnRlIGx1Y3R1cy4gUHJhZXNlbnQgZWxlbWVudHVtIHNvZGFsZXMgZG9sb3IgaWQgc2NlbGVyaXNxdWUuXCIpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9LCBbXG4gICAgICAgICAgICBVSS5JbWFnZS5yZW5kZXIoe3NpemU6IFVJLlNpemUuRmx1aWR9LFwiaHR0cHM6Ly9wbGFjZWhvbGRpdC5pbWdpeC5uZXQvfnRleHQ/dHh0c2l6ZT0zMzAmdHh0PVBsYWNlaG9sZGVyJnc9MTAwMCZoPTEwMDBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKHtpbnRDZWxsZWQ6IHRydWV9LCBbXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiAzfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEwfSksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcihbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDN9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9KSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogM30pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lKGdyb3VwaW5nRXguRE9NLCBjbGVhckV4LkRPTSwgc3BlY2lhbEV4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvcm93cy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFZhcnlpbmdHcmlkcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IG5lc3RlZEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiTmVzdGluZyBHcmlkc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiR3JpZHMgY2FuIGJlIHBsYWNlZCBpbnNpZGUgb2Ygb3RoZXIgZ3JpZHMsIGxldHRpbmcgeW91IHN1Yi1kaXZpZGUgY29sdW1ucy5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyB3aWR0aDogMiB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoW1xuICAgICAgICAgIFVJLkdyaWQucmVuZGVyKHsgd2lkdGg6IDMgfSwgW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcihbXG4gICAgICAgICAgVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiAxMCB9KSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoeyB3aWR0aDogNiB9KSxcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IHdpZHRoOiAyfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHtcbiAgICAgICAgICBVSS5HcmlkLnJlbmRlcih7d2lkdGg6IDN9LCBbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgXSlcbiAgICAgICAgfSksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKFtcbiAgICAgICAgICBVSS5HcmlkLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTB9KSxcbiAgICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoe3dpZHRoOiA2fSksXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICBdKWBcbiAgICB9KS5ET00ubWFwKGV4ID0+IGRpdihcIi5zcGVjaWFsXCIsIFtleF0pKTtcblxuICAgIGxldCBjb2xDb3VudEV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICBoZWFkZXI6IFwiQXV0b21hdGljIENvbHVtbiBDb3VudFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiVGhlIGVxdWFsV2lkdGggdmFyaWF0aW9uIHdpbGwgYXV0b21hdGljYWxseSBkaXZpZGUgY29sdW1uIHdpZHRoIGV2ZW5seS4gVGhpcyBpcyB1c2VmdWwgd2l0aCBkeW5hbWljIGNvbnRlbnQgd2hlcmUgeW91IGRvIG5vdCBrbm93IHRoZSBjb2x1bW4gY291bnQgaW4gYWR2YW5jZS5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKClcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBVSS5Sb3cucmVuZGVyKHsgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKVxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgY2VudGVyaW5nRXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIGhlYWRlcjogXCJDZW50ZXJpbmcgQ29udGVudFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiSWYgYSByb3cgZG9lcyBub3QgdGFrZSB1cCBhbGwgc2l4dGVlbiBncmlkIGNvbHVtbnMsIHlvdSBjYW4gdXNlIGEgY2VudGVyZWQgdmFyaWF0aW9uIHRvIGNlbnRlciB0aGUgY29sdW1uIGNvbnRlbnRzIGluc2lkZSB0aGUgZ3JpZC5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoeyBjZW50ZXJlZDogdHJ1ZSwgd2lkdGg6IDIgfSwgW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgIFVJLlJvdy5yZW5kZXIoeyB3aWR0aDogNCB9LCBbXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5HcmlkLnJlbmRlcih7IGNlbnRlcmVkOiB0cnVlLCB3aWR0aDogMiB9LCBbXG4gICAgICAgIFVJLkNvbHVtbi5yZW5kZXIoKSxcbiAgICAgICAgVUkuUm93LnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKCksXG4gICAgICAgICAgVUkuQ29sdW1uLnJlbmRlcigpLFxuICAgICAgICBdKVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4geHMuY29tYmluZShuZXN0ZWRFeCwgY29sQ291bnRFeC5ET00sIGNlbnRlcmluZ0V4LkRPTSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL2dyaWQvb3ZlcnZpZXcvdmFyeWluZ0dyaWRzLnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vYnJlYWRjcnVtYlwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZm9ybVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ3JpZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWVudVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWVzc2FnZVwiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgcCwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29udGVudCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGhlYWRlckV4ID0gY3JlYXRlSGVhZGVyRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHRleHRFeCA9IGNyZWF0ZVRleHRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgaW5wdXRFeCA9IGNyZWF0ZUlucHV0RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGJ1dHRvbkV4ID0gY3JlYXRlQnV0dG9uRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGxpbmtFeCA9IGNyZWF0ZUxpbmtFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZHJvcGRvd25FeCA9IGNyZWF0ZURyb3Bkb3duRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHBvcHVwRXggPSBjcmVhdGVQb3B1cEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBzZWFyY2hFeCA9IGNyZWF0ZVNlYXJjaEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBtZW51RXggPSBjcmVhdGVNZW51RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHN1Yk1lbnVFeCA9IGNyZWF0ZVN1Yk1lbnVFeGFtcGxlcyhzb3VyY2VzKTtcblxuICAgIGxldCBleGFtcGxlcyA9IFtdLmNvbmNhdChoZWFkZXJFeCwgdGV4dEV4LCBpbnB1dEV4LCBidXR0b25FeCxcbiAgICAgIGxpbmtFeCwgZHJvcGRvd25FeCwgcG9wdXBFeCwgc2VhcmNoRXgsIG1lbnVFeCwgc3ViTWVudUV4KTtcblxuXG5cbiAgICByZXR1cm4geHMuY29tYmluZS5hcHBseShudWxsLCBleGFtcGxlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIZWFkZXJFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiSGVhZGVyXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lbnUgaXRlbSBtYXkgaW5jbHVkZSBhIGhlYWRlciBvciBtYXkgaXRzZWxmIGJlIGEgaGVhZGVyXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKFtcbiAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiT3VyIGNvbXBhbnlcIiB9LFxuICAgICAgICB7IG1haW46IFwiQWJvdXQgdXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiSm9ic1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJMb2NhdGlvbnNcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7aGVhZGVyOiB0cnVlLCBtYWluOiBcIk91ciBjb21wYW55XCJ9LFxuICAgICAgICB7bWFpbjogXCJBYm91dCB1c1wifSxcbiAgICAgICAge21haW46IFwiSm9ic1wifSxcbiAgICAgICAge21haW46IFwiTG9jYXRpb25zXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiUHJvZHVjdHNcIixcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc3VibWVudTogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJFbnRlcnByaXNlXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIkNvbnN1bWVyXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJDTVMgU29sdXRpb25zXCIsXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiUmFpbHNcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUHl0aG9uXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlBIUFwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiSG9zdGluZ1wiLFxuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzdWJtZW51OiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlNoYXJlZFwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJEZWRpY2F0ZWRcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIlN1cHBvcnRcIixcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc3VibWVudTogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJFLW1haWwgU3VwcG9ydFwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJGQVFzXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAge1xuICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIlByb2R1Y3RzXCIsXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiRW50ZXJwcmlzZVwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJDb25zdW1lclwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiQ01TIFNvbHV0aW9uc1wiLFxuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBzdWJtZW51OiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlJhaWxzXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlB5dGhvblwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJQSFBcIiB9XG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIkhvc3RpbmdcIixcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgc3VibWVudTogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJTaGFyZWRcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiRGVkaWNhdGVkXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgICB7IG1haW46IFwiRS1tYWlsIFN1cHBvcnRcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiRkFRc1wiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVUZXh0RXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlRleHRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgdmVydGljYWwgbWVudSBpdGVtIGNhbiBpbmNsdWRlIGFueSB0eXBlIG9mIHRleHQgY29udGVudC5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKFwiUHJvbW90aW9uc1wiKSxcbiAgICAgICAgICAgIHAoXCJDaGVjayBvdXQgb3VyIG5ldyBwcm9tb3Rpb25zXCIpLFxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoXCJDb3Vwb25zXCIpLFxuICAgICAgICAgICAgcChcIkNoZWNrIG91dCBvdXIgY29sbGVjdGlvbiBvZiBjb3Vwb25zXCIpLFxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoXCJSZWJhdGVzXCIpLFxuICAgICAgICAgICAgcChcIlZpc2l0IG91ciByZWJhdGUgZm9ydW0gZm9yIGluZm9ybWF0aW9uIG9uIGNsYWltaW5nIHJlYmF0ZXNcIiksXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKFwiUHJvbW90aW9uc1wiKSxcbiAgICAgICAgICAgIHAoXCJDaGVjayBvdXQgb3VyIG5ldyBwcm9tb3Rpb25zXCIpLFxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoXCJDb3Vwb25zXCIpLFxuICAgICAgICAgICAgcChcIkNoZWNrIG91dCBvdXIgY29sbGVjdGlvbiBvZiBjb3Vwb25zXCIpLFxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoXCJSZWJhdGVzXCIpLFxuICAgICAgICAgICAgcChcIlZpc2l0IG91ciByZWJhdGUgZm9ydW0gZm9yIGluZm9ybWF0aW9uIG9uIGNsYWltaW5nIHJlYmF0ZXNcIiksXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSW5wdXRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiSW5wdXRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBpdGVtIGNhbiBjb250YWluIGFuIGlucHV0IGluc2lkZSBvZiBpdFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uXCIsIGljb246IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5TZWFyY2gpXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtcbiAgICAgICAgICAgIFVJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiTmF2aWdhdGUgdG8uLlwiLCByaWdodENvbnRlbnQ6IHRydWUsIGFjdGlvbjogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkJ1dHRvbi5yZW5kZXIoXCJHb1wiKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHttYWluOiBbXG4gICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIlNlYXJjaC4uXCIsIGljb246IHRydWV9LCBbXG4gICAgICAgICAgICBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5TZWFyY2gpXG4gICAgICAgICAgXSlcbiAgICAgICAgXX0sIHtmbG9hdDogXCJyaWdodFwiLCBtYWluOiBbXG4gICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoe3BsYWNlaG9sZGVyOiBcIk5hdmlnYXRlIHRvLi5cIiwgcmlnaHRDb250ZW50OiB0cnVlLCBhY3Rpb246IHRydWV9LCBbXG4gICAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKFwiR29cIilcbiAgICAgICAgICBdKVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQnV0dG9uRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkJ1dHRvblwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGl0ZW0gY2FuIGNvbnRhaW4gYSBidXR0b24gaW5zaWRlIG9mIGl0XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKFtcbiAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiU2lnbiB1cFwiKV0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcihcIkxvZy1pblwiKV0gfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKFtcbiAgICAgICAge21haW46IFtVSS5CdXR0b24ucmVuZGVyKHtjb2xvcjogVUkuQ29sb3IuUHJpbWFyeX0sIFwiU2lnbiB1cFwiKV19LFxuICAgICAgICB7bWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoXCJMb2ctaW5cIildfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTGlua0V4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJMaW5rIEl0ZW1cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBtYXkgY29udGFpbiBhIGxpbmsgaXRlbSwgb3IgYW4gaXRlbSBmb3JtYXR0ZWQgYXMgaWYgaXQgaXMgYSBsaW5rLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBocmVmOiBcIiNcIiwgbWFpbjogXCJWaXNpdCBnb29nbGVcIiB9LFxuICAgICAgICB7IGxpbms6IHRydWUsIG1haW46IFwiSmF2YXNjcmlwdCBsaW5rXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHt2ZXJ0aWNhbDogdHJ1ZX0sIFtcbiAgICAgICAge2hyZWY6IFwiI1wiLCBtYWluOiBcIlZpc2l0IGdvb2dsZVwifSxcbiAgICAgICAge2xpbms6IHRydWUsIG1haW46IFwiSmF2YXNjcmlwdCBsaW5rXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlRHJvcGRvd25FeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICAvLyBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgLy8gICBoZWFkZXI6IFwiXCIsXG4gICAgLy8gICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAvLyAgIFZOb2RlJDogeHMub2YoKSxcbiAgICAvLyAgIGNvZGU6IGBgXG4gICAgLy8gfSk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVBvcHVwRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgLy8gbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgIC8vICAgaGVhZGVyOiBcIlwiLFxuICAgIC8vICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgLy8gICBWTm9kZSQ6IHhzLm9mKCksXG4gICAgLy8gICBjb2RlOiBgYFxuICAgIC8vIH0pO1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVTZWFyY2hFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICAvLyBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgLy8gICBoZWFkZXI6IFwiXCIsXG4gICAgLy8gICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAvLyAgIFZOb2RlJDogeHMub2YoKSxcbiAgICAvLyAgIGNvZGU6IGBgXG4gICAgLy8gfSk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lbnVFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiTWVudVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBjb250YWluIGFub3RoZXIgbWVudSBncm91cCBpbiB0aGUgc2FtZSBsZXZlbCBhcyBtZW51IGl0ZW1zLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHsgbWFpbjogXCJCcm93c2VcIiB9LFxuICAgICAgICB7IG1haW46IFwiU3VibWl0XCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgICAgeyBtYWluOiBcIlNpZ24gVXBcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIkhlbHBcIiB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7IG1haW46IFwiQnJvd3NlXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlN1Ym1pdFwiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogXCJTaWduIFVwXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJIZWxwXCIgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVN1Yk1lbnVFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU3ViIE1lbnVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBpdGVtIG1heSBjb250YWluIGFub3RoZXIgbWVudSBuZXN0ZWQgaW5zaWRlIHRoYXQgYWN0cyBhcyBhIGdyb3VwZWQgc3ViLW1lbnUuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJTZWFyY2guLi5cIiB9KVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiSG9tZVwiLFxuICAgICAgICAgICAgVUkuTWVudS5yZW5kZXIoe3N1Ym1lbnU6IHRydWV9LCBbXG4gICAgICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIlNlYXJjaFwiIH0sXG4gICAgICAgICAgICAgIHsgbWFpbjogXCJBZGRcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiUmVtb3ZlXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkdyaWRMYXlvdXQpLCBcIkJyb3dzZVwiXSB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiTW9yZVwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFVJLlRleHRib3gucmVuZGVyKHsgcGxhY2Vob2xkZXI6IFwiU2VhcmNoLi4uXCIgfSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBcIkhvbWVcIixcbiAgICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHtzdWJtZW51OiB0cnVlfSwgW1xuICAgICAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWFyY2hcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiQWRkXCIgfSxcbiAgICAgICAgICAgICAgeyBtYWluOiBcIlJlbW92ZVwiIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HcmlkTGF5b3V0KSwgXCJCcm93c2VcIl0gfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vcmVcIiB9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lbnUvY29udGVudC50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IFR5cGVzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbnRlbnQgfSBmcm9tIFwiLi9jb250ZW50XCI7XG5pbXBvcnQgeyBTdGF0ZXMgfSBmcm9tIFwiLi9zdGF0ZXNcIjtcbmltcG9ydCB7IFZhcmlhdGlvbnMgfSBmcm9tIFwiLi92YXJpYXRpb25zXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTWVudSB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcykge1xuICAgIGxldCB0eXBlcyA9IFR5cGVzLnJ1bihzb3VyY2VzKTtcbiAgICBsZXQgY29udGVudCA9IENvbnRlbnQucnVuKHNvdXJjZXMpO1xuICAgIGxldCBzdGF0ZXMgPSBTdGF0ZXMucnVuKHNvdXJjZXMpO1xuICAgIGxldCB2YXJpYXRpb25zID0gVmFyaWF0aW9ucy5ydW4oc291cmNlcyk7XG5cbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHR5cGVzLCBjb250ZW50LCBzdGF0ZXMsIHZhcmlhdGlvbnMpLm1hcChcbiAgICAgIChbdHlwZXMsIGNvbnRlbnQsIHN0YXRlcywgdmFyaWF0aW9uc10pID0+XG4gICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJhcnRpY2xlXCIgfSB9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sXG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbWFpbjogXCJNZW51XCIsXG4gICAgICAgICAgICAgICAgICBzdWJ0ZXh0OiBcIkEgbWVudSBkaXNwbGF5cyBncm91cGVkIG5hdmlnYXRpb24gYWN0aW9uc1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIFVJLkNvbnRhaW5lci5yZW5kZXIoW1xuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiVHlwZXNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQodHlwZXMpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiQ29udGVudFwiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdChjb250ZW50KVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlN0YXRlc1wiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdChzdGF0ZXMpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBiYXNpYzogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkhlYWRlci5yZW5kZXIoeyBkaXZpZGluZzogdHJ1ZSwgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sIFwiVmFyaWF0aW9uc1wiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdCh2YXJpYXRpb25zKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSlcbiAgICApIGFzIFN0cmVhbTxWTm9kZT47XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgcm91dGVyOiB4cy5uZXZlcigpXG4gICAgfTtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZW51L2luZGV4LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IHAsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0YXRlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkhvdmVyXCIsXG4gICAgICBkZXNjcmlwdGlvbjogW1xuICAgICAgICBwKFwiQSBtZW51IGl0ZW0gY2FuIGJlIGhvdmVyZWRcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLldhcm5pbmcgfSwgXCJNZW51IGl0ZW1zIGFyZSBvbmx5IGhvdmVyYWJsZSBpZiB0aGV5IGhhdmUgdGhlIGhyZWYgb3IgbGluayBwcm9wZXJ0eS5cIilcbiAgICAgIF0sXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgY29tcGFjdDogdHJ1ZSB9LCBbXG4gICAgICAgIHsgaHJlZjogXCIjXCIsIG1haW46IFwiQSBsaW5rXCIgfSxcbiAgICAgICAgeyBsaW5rOiB0cnVlLCBtYWluOiBcImRpdiBsaW5rXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtjb21wYWN0OiB0cnVlfSwgW1xuICAgICAgICB7aHJlZjogXCIjXCIsIG1haW46IFwiQSBsaW5rXCJ9LFxuICAgICAgICB7bGluazogdHJ1ZSwgbWFpbjogXCJkaXYgbGlua1wifVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkFjdGl2ZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGl0ZW0gY2FuIGJlIGFjdGl2ZVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IGNvbXBhY3Q6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJMaW5rXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtjb21wYWN0OiB0cnVlfSwgW1xuICAgICAgICB7YWN0aXZlOiB0cnVlLCBtYWluOiBcIkxpbmtcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhzLmNvbWJpbmUoZXguRE9NLCBleDIuRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS9zdGF0ZXMudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBUeXBlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGJhc2ljRXggPSBjcmVhdGVCYXNpY0V4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBzZWNvbmRhcnlFeCA9IGNyZWF0ZVNlY29uZGFyeUV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBwb2ludGluZ0V4ID0gY3JlYXRlUG9pbnRpbmdFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgdGFidWxhckV4ID0gY3JlYXRlVGFidWxhckV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCB0ZXh0RXggPSBjcmVhdGVUZXh0RXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHZlcnRpY2FsRXggPSBjcmVhdGVWZXJ0aWNhbEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBwYWdpbmF0aW9uRXggPSBjcmVhdGVQYWdpbmF0aW9uRXhhbXBsZXMoc291cmNlcyk7XG5cbiAgICBsZXQgZXhhbXBsZXMgPSBbXS5jb25jYXQoYmFzaWNFeCwgc2Vjb25kYXJ5RXgsIHBvaW50aW5nRXgsIHRhYnVsYXJFeCxcbiAgICAgIHRleHRFeCwgdmVydGljYWxFeCwgcGFnaW5hdGlvbkV4KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIGV4YW1wbGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJhc2ljRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIk1lbnVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJFZGl0b3JpYWxzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlJldmlld3NcIiB9LFxuICAgICAgICB7IG1haW46IFwiVXBjb21pbmcgRXZlbnRzXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtlcXVhbFdpZHRoOiB0cnVlfSwgW1xuICAgICAgICB7YWN0aXZlOiB0cnVlLCBtYWluOiBcIkVkaXRvcmlhbHNcIn0sXG4gICAgICAgIHttYWluOiBcIlJldmlld3NcIn0sXG4gICAgICAgIHttYWluOiBcIlVwY29taW5nIEV2ZW50c1wifVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICAvL1RvZG8gYWRkIHBvcHVwIGV4YW1wbGVcbiAgICBsZXQgZGRsTmF2aWdhdGlvbiA9IFVJLkRyb3Bkb3duLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiB4cy5vZih7IHN0YXRpYzogXCJNb3JlXCIgfSksXG4gICAgICBjb250ZW50JDogeHMub2YoW1xuICAgICAgICB7IG1haW46IFwiQXBwbGljYXRpb25zXCIsIHZhbHVlOiBcImFwcGxpY2F0aW9uc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJJbnRlcm5hdGlvbmFsIFN0dWRlbnRzXCIsIHZhbHVlOiBcImludGVybmF0aW9uYWxcIiB9LFxuICAgICAgICB7IG1haW46IFwiU2Nob2xhcnNoaXBzXCIsIHZhbHVlOiBcInNjaG9sYXJzaGlwc1wiIH1cbiAgICAgIF0pXG4gICAgfSk7XG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMuY29tYmluZShkZGxOYXZpZ2F0aW9uLkRPTSkubWFwKFxuICAgICAgICAoW2RkbE5hdmlnYXRpb25dKSA9PiBVSS5NZW51LnJlbmRlcih7IHRleHQ6IHRydWUgfSwgW1xuICAgICAgICAgIHsgbWFpbjogW1VJLkltYWdlLnJlbmRlcihcImh0dHBzOi8vcGxhY2Vob2xkaXQuaW1naXgubmV0L350ZXh0P3R4dHNpemU9MzMmdHh0PUxvZ28mdz04MCZoPTgwXCIpXSB9LFxuICAgICAgICAgIHsgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW2RkbE5hdmlnYXRpb25dIH1cbiAgICAgICAgXSlcbiAgICAgICksXG4gICAgICBjb2RlOiBgbGV0IGRkbE5hdmlnYXRpb24gPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2Yoe3N0YXRpYzogXCJNb3JlXCJ9KSxcbiAgICAgIGNvbnRlbnQkOiB4cy5vZihbXG4gICAgICAgIHsgbWFpbjogXCJBcHBsaWNhdGlvbnNcIiwgdmFsdWU6IFwiYXBwbGljYXRpb25zXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkludGVybmF0aW9uYWwgU3R1ZGVudHNcIiwgdmFsdWU6IFwiaW50ZXJuYXRpb25hbFwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJTY2hvbGFyc2hpcHNcIiwgdmFsdWU6IFwic2Nob2xhcnNoaXBzXCIgfVxuICAgICAgXSlcbiAgICB9KTtcbiAgICBsZXQgdlRyZWUkID0geHMuY29tYmluZShkZGxOYXZpZ2F0aW9uLkRPTSkubWFwKFxuICAgICAgKFtkZGxOYXZpZ2F0aW9uXSkgPT4gVUkuTWVudS5yZW5kZXIoe3RleHQ6IHRydWV9LCBbXG4gICAgICAgIHttYWluOiBbVUkuSW1hZ2UucmVuZGVyKFwiXCIpXX0sXG4gICAgICAgIHtmbG9hdDogXCJyaWdodFwiLCBtYWluOiBbZGRsTmF2aWdhdGlvbl19XG4gICAgICBdKVxuICAgIClgXG4gICAgfSk7XG5cbiAgICAvL1RvZG8gZHJvcGRvd24gbWVudSdzXG4gICAgbGV0IGRkbE5hdmlnYXRpb24yID0gVUkuRHJvcGRvd24ucnVuKHtcbiAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICBwcm9wcyQ6IHhzLm9mKHsgc2ltcGxlOiB0cnVlLCBkZWZhdWx0OiBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5XcmVuY2gpIH0pLFxuICAgICAgY29udGVudCQ6IHhzLm9mKFtcbiAgICAgICAgeyBtYWluOiBcIk5ldy4uLlwiLCB2YWx1ZTogXCJuZXdcIiB9LFxuICAgICAgICB7IG1haW46IFwiT3Blbi4uLlwiLCB2YWx1ZTogXCJvcGVuXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNhdmUuLi5cIiwgdmFsdWU6IFwic2F2ZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJFZGl0IHBlcm1pc3Npb25zLi4uXCIsIHZhbHVlOiBcInBlcm1pc3Npb25zXCIgfSxcbiAgICAgICAgeyBkaXZpZGVyOiB0cnVlIH0sXG4gICAgICAgIHsgbWFpbjogXCJFeHBvcnRcIiwgaGVhZGVyT25seTogdHJ1ZSB9LFxuICAgICAgICB7IG1haW46IFwiU2hhcmUuLi5cIiwgdmFsdWU6IFwiXCIgfVxuICAgICAgXSksXG4gICAgICBhcmdzOiB7XG4gICAgICAgIHN0YXRpYzogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLmNvbWJpbmUoZGRsTmF2aWdhdGlvbjIuRE9NKS5tYXAoXG4gICAgICAgIChbZGRsTmF2aWdhdGlvbl0pID0+IGRpdihbXG4gICAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcInRvcFwiIH0sIFtcbiAgICAgICAgICAgIHsgaWNvbjogdHJ1ZSwgZHJvcGRvd246IHRydWUsIG1haW46IGRkbE5hdmlnYXRpb24gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW1VJLlRleHRib3gucmVuZGVyKHsgaWNvbjogdHJ1ZSwgdHJhbnNwYXJlbnQ6IHRydWUgfSwgW1xuICAgICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgICAgXSldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50LkJvdHRvbSB9KVxuICAgICAgICBdKVxuICAgICAgKSxcbiAgICAgIGNvZGU6IGBsZXQgZGRsTmF2aWdhdGlvbjIgPSBVSS5Ecm9wZG93bi5ydW4oe1xuICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgIHByb3BzJDogeHMub2YoeyBzaW1wbGU6IHRydWUsIGRlZmF1bHQ6IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5XcmVuY2gpXSB9KSxcbiAgICAgIGNvbnRlbnQkOiB4cy5vZihbXG4gICAgICAgIHsgbWFpbjogXCJOZXcuLi5cIiwgdmFsdWU6IFwibmV3XCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk9wZW4uLi5cIiwgdmFsdWU6IFwib3BlblwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJTYXZlLi4uXCIsIHZhbHVlOiBcInNhdmVcIiB9LFxuICAgICAgICB7IG1haW46IFwiRWRpdCBwZXJtaXNzaW9ucy4uLlwiLCB2YWx1ZTogXCJwZXJtaXNzaW9uc1wiIH0sXG4gICAgICAgIHsgZGl2aWRlcjogdHJ1ZSB9LFxuICAgICAgICB7IG1haW46IFwiRXhwb3J0XCIsIGhlYWRlck9ubHk6IHRydWUgfSxcbiAgICAgICAgeyBtYWluOiBcIlNoYXJlLi4uXCIsIHZhbHVlOiBcIlwiIH1cbiAgICAgIF0pLFxuICAgICAgYXJnczoge1xuICAgICAgICBzdGF0aWM6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgdlRyZWUkID0geHMuY29tYmluZShkZGxOYXZpZ2F0aW9uMi5ET00pLm1hcChcbiAgICAgIChbZGRsTmF2aWdhdGlvbl0pID0+IGRpdihbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgYXR0YWNobWVudDogXCJ0b3BcIiB9LCBbXG4gICAgICAgICAgeyBpY29uOiB0cnVlLCBkcm9wZG93bjogdHJ1ZSwgbWFpbjogZGRsTmF2aWdhdGlvbiB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtVSS5UZXh0Ym94LnJlbmRlcih7IGljb246IHRydWUsIHRyYW5zcGFyZW50OiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuU2VhcmNoKVxuICAgICAgICAgICAgXSldXG4gICAgICAgICAgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50LkJvdHRvbSB9KVxuICAgICAgXSlgXG4gICAgfSk7XG5cblxuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NLCBleDMuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNlY29uZGFyeUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTZWNvbmRhcnkgTWVudVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGNhbiBhZGp1c3QgaXRzIGFwcGVhcmFuY2UgdG8gZGUtZW1waGFzaXplIGl0cyBjb250ZW50c1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNlY29uZGFyeTogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmbG9hdDogXCJyaWdodFwiLCBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uLlwiLCBpY29uOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuU2VhcmNoKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHsgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogXCJMb2dvdXRcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBzZWNvbmRhcnk6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtcbiAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7cGxhY2Vob2xkZXI6IFwiU2VhcmNoLi4uXCIsIGljb246IHRydWV9LCBbXG4gICAgICAgICAgICBVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5TZWFyY2gpXG4gICAgICAgICAgXSlcbiAgICAgICAgXX0sXG4gICAgICAgIHsgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogXCJMb2dvdXRcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY3JlYXRlUG9pbnRpbmdFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUG9pbnRpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBjYW4gcG9pbnQgdG8gc2hvdyBpdHMgcmVsYXRpb25zaGlwIHRvIG5lYXJieSBjb250ZW50XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbVUkuTWVudS5yZW5kZXIoeyBwb2ludGluZzogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmbG9hdDogXCJyaWdodFwiLCBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uLlwiLCBpY29uOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuU2VhcmNoKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pLFxuICAgICAgVUkuU2VnbWVudC5yZW5kZXIoKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogW1xuICAgICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoeyBwbGFjZWhvbGRlcjogXCJTZWFyY2guLi5cIiwgaWNvbjogdHJ1ZSB9LCBbXG4gICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSxcbiAgICAgIFVJLlNlZ21lbnQucmVuZGVyKClgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1VJLk1lbnUucmVuZGVyKHsgcG9pbnRpbmc6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICAgIHsgZmxvYXQ6IFwicmlnaHRcIiwgbWFpbjogXCJMb2dvdXRcIiB9XG4gICAgICBdKSxcbiAgICAgIFVJLlNlZ21lbnQucmVuZGVyKClcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHBvaW50aW5nOiB0cnVlLCBzZWNvbmRhcnk6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFwiTG9nb3V0XCIgfVxuICAgICAgXSksXG4gICAgICBVSS5TZWdtZW50LnJlbmRlcigpYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NXTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY3JlYXRlVGFidWxhckV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJUYWJ1bGFyXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lbnUgY2FuIGJlIGZvcm1hdHRlZCB0byBzaG93IHRhYnMgb2YgaW5mb3JtYXRpb25cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB0YWJ1bGFyOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgeyBtYWluOiBcIlBob3Rvc1wiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiQmlvXCIsIGFjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICB7IG1haW46IFwiUGhvdG9zXCIgfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5NZW51LnJlbmRlcih7IHRhYnVsYXI6IHRydWUsIGF0dGFjaG1lbnQ6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIHsgbWFpbjogXCJCaW9cIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlBob3Rvc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Cb3R0b20gfSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHRhYnVsYXI6IHRydWUsIGF0dGFjaG1lbnQ6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIHsgbWFpbjogXCJCaW9cIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlBob3Rvc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHthdHRhY2htZW50OiBVSS5BdHRhY2htZW50LkJvdHRvbX0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50LlRvcCB9KSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyB0YWJ1bGFyOiB0cnVlLCBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IG1haW46IFwiQWN0aXZlIHByb2plY3RcIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlByb2plY3QgIzJcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJQcm9qZWN0ICMzXCIgfSxcbiAgICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbHVzKSwgXCJOZXcgVGFiXCJdIH1cbiAgICAgICAgXSksXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuU2VnbWVudC5yZW5kZXIoeyBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50LlRvcCB9KSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyB0YWJ1bGFyOiB0cnVlLCBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IG1haW46IFwiQWN0aXZlIHByb2plY3RcIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgeyBtYWluOiBcIlByb2plY3QgIzJcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJQcm9qZWN0ICMzXCIgfSxcbiAgICAgICAgICB7IGZsb2F0OiBcInJpZ2h0XCIsIG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbHVzKSwgXCJOZXcgVGFiXCJdfVxuICAgICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCBzaXplOiBcImZsdWlkXCIsIHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJQaWNzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJDb21wYW5pZXNcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIkxpbmtzXCIgfVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEyLCBzdHJldGNoZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGhpcyBpcyBhbiBzdHJldGNoZWQgZ3JpZCBjb2x1bW4uIFRoaXMgc2VnbWVudCB3aWxsIGFsd2F5cyBtYXRjaCB0aGUgdGFiIGhlaWdodFwiKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCBzaXplOiBcImZsdWlkXCIsIHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJQaWNzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJDb21wYW5pZXNcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIkxpbmtzXCIgfVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHt3aWR0aDogMTIsIHN0cmV0Y2hlZDogdHJ1ZX0sIFtcbiAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcihcIlRoaXMgaXMgYW4gc3RyZXRjaGVkIGdyaWQgY29sdW1uLiBUaGlzIHNlZ21lbnQgd2lsbCBhbHdheXMgbWF0Y2ggdGhlIHRhYiBoZWlnaHRcIilcbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuR3JpZC5yZW5kZXIoW1xuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDEyLCBzdHJldGNoZWQ6IHRydWUgfSwgW1xuICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKFwiVGhpcyBpcyBhbiBzdHJldGNoZWQgZ3JpZCBjb2x1bW4uIFRoaXMgc2VnbWVudCB3aWxsIGFsd2F5cyBtYXRjaCB0aGUgdGFiIGhlaWdodFwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7IHdpZHRoOiA0IH0sIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCBzaXplOiBcImZsdWlkXCIsIHRhYnVsYXI6IHRydWUsIHJpZ2h0OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIHsgbWFpbjogXCJCaW9cIiwgYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG1haW46IFwiUGljc1wiIH0sXG4gICAgICAgICAgICB7IG1haW46IFwiQ29tcGFuaWVzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJMaW5rc1wiIH1cbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLkdyaWQucmVuZGVyKFtcbiAgICAgICAgVUkuQ29sdW1uLnJlbmRlcih7d2lkdGg6IDEyLCBzdHJldGNoZWQ6IHRydWV9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoXCJUaGlzIGlzIGFuIHN0cmV0Y2hlZCBncmlkIGNvbHVtbi4gVGhpcyBzZWdtZW50IHdpbGwgYWx3YXlzIG1hdGNoIHRoZSB0YWIgaGVpZ2h0XCIpXG4gICAgICAgIF0pLFxuICAgICAgICBVSS5Db2x1bW4ucmVuZGVyKHsgd2lkdGg6IDQgfSwgW1xuICAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHNpemU6IFwiZmx1aWRcIiwgdGFidWxhcjogdHJ1ZSwgcmlnaHQ6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIkJpb1wiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJQaWNzXCIgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJDb21wYW5pZXNcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIkxpbmtzXCIgfVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NLCBleDMuRE9NLCBleDQuRE9NLCBleDUuRE9NXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVRleHRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiVGV4dFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGNhbiBiZSBmb3JtYXR0ZWQgZm9yIHRleHQgY29udGVudFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHRleHQ6IHRydWUgfSwgW1xuICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJTb3J0IGJ5XCIgfSxcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiQ2xvc2VzdFwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IENvbW1lbnRzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vc3QgUG9wdWxhclwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHRleHQ6IHRydWUgfSwgW1xuICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJFZGl0b3JpYWxzXCIgfSxcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiQ2xvc2VzdFwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IENvbW1lbnRzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vc3QgUG9wdWxhclwifVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG5cblxuICBmdW5jdGlvbiBjcmVhdGVWZXJ0aWNhbEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJWZXJ0aWNhbCBNZW51XCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHZlcnRpY2FsIG1lbnUgZGlzcGxheXMgZWxlbWVudHMgdmVydGljYWxseS5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogW1xuICAgICAgICAgICAgXCJJbmJveFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBsZWZ0UG9pbnRpbmc6IHRydWUsIGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiMVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiU3BhbVwiLCBVSS5MYWJlbC5yZW5kZXIoXCI1MVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiVXBkYXRlc1wiLCBVSS5MYWJlbC5yZW5kZXIoXCIxXCIpXG4gICAgICAgICAgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgVUkuVGV4dGJveC5yZW5kZXIoeyB0cmFuc3BhcmVudDogdHJ1ZSwgaWNvbjogdHJ1ZSwgcGxhY2Vob2xkZXI6IFwiU2VhcmNoIG1haWwuLi5cIiB9LCBbXG4gICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogW1xuICAgICAgICAgICAgXCJJbmJveFwiLCBVSS5MYWJlbC5yZW5kZXIoeyBsZWZ0UG9pbnRpbmc6IHRydWUsIGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiMVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgIFwiU3BhbVwiLCBVSS5MYWJlbC5yZW5kZXIoXCI1MVwiKVxuICAgICAgICAgIF1cbiAgICAgICAgfSx7XG4gICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgXCJVcGRhdGVzXCIsIFVJLkxhYmVsLnJlbmRlcihcIjFcIilcbiAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5UZXh0Ym94LnJlbmRlcih7dHJhbnNwYXJlbnQ6IHRydWUsIGljb246IHRydWUsIHBsYWNlaG9sZGVyOiBcIlNlYXJjaCBtYWlsLi4uXCJ9LCBbXG4gICAgICAgICAgICAgIFVJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlNlYXJjaClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgc2Vjb25kYXJ5OiB0cnVlLCB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkFjY291bnRcIiB9LFxuICAgICAgICB7IG1haW46IFwiU2V0dGluZ3NcIiB9LFxuICAgICAgICB7IG1haW46IFwiRGlzcGxheSBPcHRpb25zXCIgfSxcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHNlY29uZGFyeTogdHJ1ZSwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJBY2NvdW50XCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNldHRpbmdzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkRpc3BsYXkgT3B0aW9uc1wiIH0sXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHRleHQ6IHRydWUgfSwgW1xuICAgICAgICB7IGhlYWRlcjogdHJ1ZSwgbWFpbjogXCJTb3J0IGJ5XCIgfSxcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiQ2xvc2VzdFwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IENvbW1lbnRzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1vc3QgUG9wdWxhclwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IHZlcnRpY2FsOiB0cnVlLCB0ZXh0OiB0cnVlIH0sIFtcbiAgICAgICAgeyBoZWFkZXI6IHRydWUsIG1haW46IFwiRWRpdG9yaWFsc1wiIH0sXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkNsb3Nlc3RcIiB9LFxuICAgICAgICB7IG1haW46IFwiTW9zdCBDb21tZW50c1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNb3N0IFBvcHVsYXJcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9LFxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHBvaW50aW5nOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfSxcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBzZWNvbmRhcnk6IHRydWUsIHZlcnRpY2FsOiB0cnVlLCBwb2ludGluZzogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBzZWNvbmRhcnk6IHRydWUsIHZlcnRpY2FsOiB0cnVlLCBwb2ludGluZzogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH0sXG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NLCBleDMuRE9NLCBleDQuRE9NLCBleDUuRE9NXTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY3JlYXRlUGFnaW5hdGlvbkV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJQYWdpbmF0aW9uXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHBhZ2luYXRpb24gbWVudSBpcyBzcGVjaWFsbHkgZm9ybWF0dGVkIHRvIHByZXNlbnQgbGlua3MgdG8gcGFnZXMgb2YgY29udGVudFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHBhZ2luYXRpb246IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCIxXCIgfSxcbiAgICAgICAgeyBkaXNhYmxlZDogdHJ1ZSwgbWFpbjogXCIuLi5cIiB9LFxuICAgICAgICB7IG1haW46IFwiMTBcIiB9LFxuICAgICAgICB7IG1haW46IFwiMTFcIiB9LFxuICAgICAgICB7IG1haW46IFwiMTJcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBwYWdpbmF0aW9uOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiMVwiIH0sXG4gICAgICAgIHsgZGlzYWJsZWQ6IHRydWUsIG1haW46IFwiLi4uXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIjEwXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIjExXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIjEyXCIgfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZW51L3R5cGVzLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IHAsIGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRXhhbXBsZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmFyaWF0aW9ucyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IHN0YWNrYWJsZUV4ID0gY3JlYXRlU3RhY2thYmxlRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGludmVydGVkRXggPSBjcmVhdGVJbnZlcnRlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBjb2xvcmVkRXggPSBjcmVhdGVDb2xvcmVkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGljb25zRXggPSBjcmVhdGVJY29uc0V4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBsYWJlbGxlZEljb25zRXggPSBjcmVhdGVMYWJlbGVkSWNvbnNFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZmx1aWRFeCA9IGNyZWF0ZUZsdWlkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IGNvbXBhY3RFeCA9IGNyZWF0ZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZXF1YWxXaWR0aEV4ID0gY3JlYXRlRXF1YWxXaWR0aEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBwb2ludGluZ0V4ID0gY3JlYXRlUG9pbnRpbmdFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgYXR0YWNoZWRFeCA9IGNyZWF0ZUF0dGFjaGVkRXhhbXBsZXMoc291cmNlcyk7XG4gICAgbGV0IHNpemVFeCA9IGNyZWF0ZVNpemVFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgZml0dGVkRXggPSBjcmVhdGVGaXR0ZWRFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgYm9yZGVybGVzc0V4ID0gY3JlYXRlQm9yZGVybGVzc0V4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KHN0YWNrYWJsZUV4LCBpbnZlcnRlZEV4LCBjb2xvcmVkRXgsXG4gICAgICBpY29uc0V4LCBsYWJlbGxlZEljb25zRXgsIGZsdWlkRXgsIGNvbXBhY3RFeCwgZXF1YWxXaWR0aEV4LFxuICAgICAgcG9pbnRpbmdFeCwgYXR0YWNoZWRFeCwgc2l6ZUV4LCBmaXR0ZWRFeCwgYm9yZGVybGVzc0V4KTtcblxuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIGV4YW1wbGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0YWNrYWJsZUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJTdGFja2FibGVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBbXG4gICAgICAgIHAoXCJBIG1lbnUgY2FuIHN0YWNrIGF0IG1vYmlsZSByZXNvbHV0aW9uc1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuSW5mbyB9LCBcIlN0YWNrYWJsZSBtZW51cyBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIG9ubHkgc2ltcGxlIG1lbnUgY29udGVudC4gU3RhY2tlZCBtZW51cyB3aWxsIG5vdCByZXBsaWNhdGUgYWxsIGFkZGl0aW9uYWwgc3R5bGluZ3MgZm9yIHZlcnRpY2FsIG1lbnVzIGxpa2UgYWRqdXN0aW5nIGRyb3Bkb3duIHBvc2l0aW9uLlwiKVxuICAgICAgXSxcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7IG1haW46IFwiRmVhdHVyZXNcIiB9LFxuICAgICAgICB7IG1haW46IFwiVGVzdGltb25pYWxzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNpZ24taW5cIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7bWFpbjogXCJGZWF0dXJlc1wifSxcbiAgICAgICAge21haW46IFwiVGVzdGltb25pYWxzXCJ9LFxuICAgICAgICB7bWFpbjogXCJTaWduLWluXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJJbnZlcnRlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBoYXZlIGl0cyBjb2xvcnMgaW52ZXJ0ZWQgdG8gc2hvdyBncmVhdGVyIGNvbnRyYXN0XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2ludmVydGVkOiB0cnVlfSwgW1xuICAgICAgICB7YWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIn0sXG4gICAgICAgIHttYWluOiBcIk1lc3NhZ2VzXCJ9LFxuICAgICAgICB7bWFpbjogXCJGcmllbmRzXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtpbnZlcnRlZDogdHJ1ZSwgdmVydGljYWw6IHRydWV9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHttYWluOiBcIkZyaWVuZHNcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtpbnZlcnRlZDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUsIHZlcnRpY2FsOiB0cnVlfSwgW1xuICAgICAgICB7YWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIn0sXG4gICAgICAgIHttYWluOiBcIk1lc3NhZ2VzXCJ9LFxuICAgICAgICB7bWFpbjogXCJGcmllbmRzXCJ9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLlNlZ21lbnQucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUgfSwgW1xuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGludmVydGVkOiB0cnVlLCBzZWNvbmRhcnk6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuU2VnbWVudC5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSlcbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuU2VnbWVudC5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuU2VnbWVudC5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIHNlY29uZGFyeTogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTSwgZXgyLkRPTSwgZXgzLkRPTSwgZXg0LkRPTSwgZXg1LkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb2xvcmVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbG9yZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkFkZGl0aW9uYWwgY29sb3JzIGNhbiBiZSBzcGVjaWZpZWRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgY29sb3I6IFwicHJpbWFyeVwiLCBtYWluOiBcIlByaW1hcnlcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcInNlY29uZGFyeVwiLCBtYWluOiBcIlNlY29uZGFyeVwiIH0sXG4gICAgICAgIHsgY29sb3I6IFwic3VjY2Vzc1wiLCBtYWluOiBcIlN1Y2Nlc3NcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcImluZm9cIiwgbWFpbjogXCJJbmZvXCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJ3YXJuaW5nXCIsIG1haW46IFwiV2FybmluZ1wiIH0sXG4gICAgICAgIHsgY29sb3I6IFwiZXJyb3JcIiwgbWFpbjogXCJFcnJvclwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogXCJQcmltYXJ5XCJ9LFxuICAgICAgICB7Y29sb3I6IFwic2Vjb25kYXJ5XCIsIG1haW46IFwiU2Vjb25kYXJ5XCJ9LFxuICAgICAgICB7Y29sb3I6IFwic3VjY2Vzc1wiLCBtYWluOiBcIlN1Y2Nlc3NcIn0sXG4gICAgICAgIHtjb2xvcjogXCJpbmZvXCIsIG1haW46IFwiSW5mb1wifSxcbiAgICAgICAge2NvbG9yOiBcIndhcm5pbmdcIiwgbWFpbjogXCJXYXJuaW5nXCJ9LFxuICAgICAgICB7Y29sb3I6IFwiZXJyb3JcIiwgbWFpbjogXCJFcnJvclwifVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcInByaW1hcnlcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgY29sb3I6IFwic2Vjb25kYXJ5XCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcInN1Y2Nlc3NcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgY29sb3I6IFwiaW5mb1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJ3YXJuaW5nXCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcImVycm9yXCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJwcmltYXJ5XCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcInNlY29uZGFyeVwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJzdWNjZXNzXCIsIGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIkZyaWVuZHNcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5NZW51LnJlbmRlcih7IGNvbG9yOiBcImluZm9cIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgY29sb3I6IFwid2FybmluZ1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBjb2xvcjogXCJlcnJvclwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDMgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGVzZSBjb2xvcnMgY2FuIGFsc28gYmUgaW52ZXJ0ZWRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBjb2xvcjogXCJwcmltYXJ5XCIsIG1haW46IFwiUHJpbWFyeVwiIH0sXG4gICAgICAgIHsgY29sb3I6IFwic2Vjb25kYXJ5XCIsIG1haW46IFwiU2Vjb25kYXJ5XCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJzdWNjZXNzXCIsIG1haW46IFwiU3VjY2Vzc1wiIH0sXG4gICAgICAgIHsgY29sb3I6IFwiaW5mb1wiLCBtYWluOiBcIkluZm9cIiB9LFxuICAgICAgICB7IGNvbG9yOiBcIndhcm5pbmdcIiwgbWFpbjogXCJXYXJuaW5nXCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJlcnJvclwiLCBtYWluOiBcIkVycm9yXCIgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtpbnZlcnRlZDogdHJ1ZX0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgbWFpbjogXCJQcmltYXJ5XCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJzZWNvbmRhcnlcIiwgbWFpbjogXCJTZWNvbmRhcnlcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcInN1Y2Nlc3NcIiwgbWFpbjogXCJTdWNjZXNzXCIgfSxcbiAgICAgICAgeyBjb2xvcjogXCJpbmZvXCIsIG1haW46IFwiSW5mb1wiIH0sXG4gICAgICAgIHsgY29sb3I6IFwid2FybmluZ1wiLCBtYWluOiBcIldhcm5pbmdcIiB9LFxuICAgICAgICB7IGNvbG9yOiBcImVycm9yXCIsIG1haW46IFwiRXJyb3JcIiB9XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInNlY29uZGFyeVwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwic3VjY2Vzc1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiaW5mb1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwid2FybmluZ1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiZXJyb3JcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGAgICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInByaW1hcnlcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgaW52ZXJ0ZWQ6IHRydWUsIGNvbG9yOiBcInNlY29uZGFyeVwiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwic3VjY2Vzc1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiaW5mb1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwid2FybmluZ1wiLCBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJGcmllbmRzXCIgfVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBpbnZlcnRlZDogdHJ1ZSwgY29sb3I6IFwiZXJyb3JcIiwgZXF1YWxXaWR0aDogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiRnJpZW5kc1wiIH1cbiAgICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET00sIGV4My5ET00sIGV4NC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSWNvbnNFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiSWNvbnNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBtYXkgaGF2ZSBqdXN0IGljb25zXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaWNvbjogdHJ1ZSB9LCBbXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkdhbWVwYWQpXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSldIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpXSB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2ljb246IHRydWV9LCBbXG4gICAgICAgIHttYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCldfSxcbiAgICAgICAge21haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSldfSxcbiAgICAgICAge21haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KV19XG4gICAgICBdKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgaWNvbjogdHJ1ZSwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKV0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KV0gfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgaWNvbjogdHJ1ZSwgdmVydGljYWw6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKV0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KV0gfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTGFiZWxlZEljb25zRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkxhYmVsZWQgSWNvblwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBoYXZlIGxhYmVsZWQgaWNvbnNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7bGFiZWxlZEljb25zOiB0cnVlfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCksIFwiR2FtZXNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpLCBcIkNoYW5uZWxzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpLCBcIlZpZGVvc1wiXSB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCksIFwiR2FtZXNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpLCBcIkNoYW5uZWxzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpLCBcIlZpZGVvc1wiXSB9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTSwgZXgyLkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGbHVpZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJGbHVpZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSB2ZXJ0aWNhbCBtZW51IG1heSB0YWtlIHRoZSBzaXplIG9mIGl0cyBjb250YWluZXIuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgZmx1aWQ6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiUnVuXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIldhbGtcIiB9LFxuICAgICAgICB7IG1haW46IFwiQmlrZVwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7Zmx1aWQ6IHRydWV9LCBbXG4gICAgICAgIHttYWluOiBcIlJ1blwifSxcbiAgICAgICAge21haW46IFwiV2Fsa1wifSxcbiAgICAgICAge21haW46IFwiQmlrZVwifVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiQ29tcGFjdFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGNhbiB0YWtlIHVwIG9ubHkgdGhlIHNwYWNlIG5lY2Vzc2FyeSB0byBmaXQgaXRzIGNvbnRlbnRcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIGNvbXBhY3Q6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7bGFiZWxlZEljb25zOiB0cnVlLCBjb21wYWN0OiB0cnVlfSwgW1xuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5HYW1lcGFkKSwgXCJHYW1lc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5WaWRlb0NhbWVyYSksIFwiQ2hhbm5lbHNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuUGxheSksIFwiVmlkZW9zXCJdIH1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBsYWJlbGVkSWNvbnM6IHRydWUsIGNvbXBhY3Q6IHRydWUsIHZlcnRpY2FsOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuR2FtZXBhZCksIFwiR2FtZXNcIl0gfSxcbiAgICAgICAgeyBtYWluOiBbVUkuSWNvbi5yZW5kZXIoVUkuSWNvblR5cGUuVmlkZW9DYW1lcmEpLCBcIkNoYW5uZWxzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlBsYXkpLCBcIlZpZGVvc1wiXSB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2xhYmVsZWRJY29uczogdHJ1ZSwgY29tcGFjdDogdHJ1ZSwgdmVydGljYWw6IHRydWV9LCBbXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLkdhbWVwYWQpLCBcIkdhbWVzXCJdIH0sXG4gICAgICAgIHsgbWFpbjogW1VJLkljb24ucmVuZGVyKFVJLkljb25UeXBlLlZpZGVvQ2FtZXJhKSwgXCJDaGFubmVsc1wiXSB9LFxuICAgICAgICB7IG1haW46IFtVSS5JY29uLnJlbmRlcihVSS5JY29uVHlwZS5QbGF5KSwgXCJWaWRlb3NcIl0gfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRXF1YWxXaWR0aEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJFcXVhbCBXaWR0aFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBkaXZpZGUgaXRzIGl0ZW1zIGV2ZW5seVwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IGVxdWFsV2lkdGg6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiQnV5XCIgfSxcbiAgICAgICAgeyBtYWluOiBcIlNlbGxcIiB9LFxuICAgICAgICB7IG1haW46IFwiUmVudFwiIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7ZXF1YWxXaWR0aDogdHJ1ZX0sIFtcbiAgICAgICAge21haW46IFwiQnV5XCJ9LFxuICAgICAgICB7bWFpbjogXCJTZWxsXCJ9LFxuICAgICAgICB7bWFpbjogXCJSZW50XCJ9XG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4LkRPTV07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlUG9pbnRpbmdFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiUG9pbnRpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgdmVydGljYWwgbWVudSBjYW4gcG9pbnQgdG8gY29udGVudCBhZGphY2VudCB0byBpdHNlbGYgdG8gc2hvdyBvd25lcnNoaXBcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSwgcG9pbnRpbmc6IHRydWUgfSwgW1xuICAgICAgICB7IG1haW46IFwiU2l0ZSBUaXRsZVwiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXI6IHRydWUsIG1haW46IFtcIkdyb3VwZWQgU2VjdGlvblwiLCBVSS5NZW51LnJlbmRlcih7IHN1Ym1lbnU6IHRydWUgfSwgW1xuICAgICAgICAgICAgeyBtYWluOiBcIlN1YnNlY3Rpb24gMVwiIH0sXG4gICAgICAgICAgICB7IG1haW46IFwiU3Vic2VjdGlvbiAyXCIsIGFjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIlN1YnNlY3Rpb24gM1wiIH1cbiAgICAgICAgICBdKV1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHsgdmVydGljYWw6IHRydWUsIHBvaW50aW5nOiB0cnVlIH0sIFtcbiAgICAgICAgeyBtYWluOiBcIlNpdGUgVGl0bGVcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyOiB0cnVlLCBtYWluOiBbXCJHcm91cGVkIFNlY3Rpb25cIiwgVUkuTWVudS5yZW5kZXIoeyBzdWJtZW51OiB0cnVlIH0sIFtcbiAgICAgICAgICAgIHsgbWFpbjogXCJTdWJzZWN0aW9uIDFcIiB9LFxuICAgICAgICAgICAgeyBtYWluOiBcIlN1YnNlY3Rpb24gMlwiLCBhY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbWFpbjogXCJTdWJzZWN0aW9uIDNcIiB9XG4gICAgICAgICAgXSldXG4gICAgICAgIH1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVBdHRhY2hlZEV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJBdHRhY2hlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG1heSBiZSBhdHRhY2hlZCB0byBvdGhlciBjb250ZW50IHNlZ21lbnRzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLk1lbnUucmVuZGVyKHsgYXR0YWNobWVudDogXCJ0b3BcIiwgdGFidWxhcjogdHJ1ZSB9LCBbXG4gICAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiVGFiIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJUYWIgMlwiIH1cbiAgICAgICAgXSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Cb3R0b20gfSwgW1xuICAgICAgICAgIHAoXCJUaGVyZSBhcmUgbWFueSB2YXJpYXRpb25zIG9mIHBhc3NhZ2VzIG9mIExvcmVtIElwc3VtIGF2YWlsYWJsZSwgYnV0IHRoZSBtYWpvcml0eSBoYXZlIHN1ZmZlcmVkIGFsdGVyYXRpb24gaW4gc29tZSBmb3JtLCBieSBpbmplY3RlZCBodW1vdXIsIG9yIHJhbmRvbWlzZWQgd29yZHMgd2hpY2ggZG9uJ3QgbG9vayBldmVuIHNsaWdodGx5IGJlbGlldmFibGUuIElmIHlvdSBhcmUgZ29pbmcgdG8gdXNlIGEgcGFzc2FnZSBvZiBMb3JlbSBJcHN1bSwgeW91IG5lZWQgdG8gYmUgc3VyZSB0aGVyZSBpc24ndCBhbnl0aGluZyBlbWJhcnJhc3NpbmcgaGlkZGVuIGluIHRoZSBtaWRkbGUgb2YgdGV4dC4gQWxsIHRoZSBMb3JlbSBJcHN1bSBnZW5lcmF0b3JzIG9uIHRoZSBJbnRlcm5ldCB0ZW5kIHRvIHJlcGVhdCBwcmVkZWZpbmVkIGNodW5rcyBhcyBuZWNlc3NhcnksIG1ha2luZyB0aGlzIHRoZSBmaXJzdCB0cnVlIGdlbmVyYXRvciBvbiB0aGUgSW50ZXJuZXQuIEl0IHVzZXMgYSBkaWN0aW9uYXJ5IG9mIG92ZXIgMjAwIExhdGluIHdvcmRzLCBjb21iaW5lZCB3aXRoIGEgaGFuZGZ1bCBvZiBtb2RlbCBzZW50ZW5jZSBzdHJ1Y3R1cmVzLCB0byBnZW5lcmF0ZSBMb3JlbSBJcHN1bSB3aGljaCBsb29rcyByZWFzb25hYmxlLiBUaGUgZ2VuZXJhdGVkIExvcmVtIElwc3VtIGlzIHRoZXJlZm9yZSBhbHdheXMgZnJlZSBmcm9tIHJlcGV0aXRpb24sIGluamVjdGVkIGh1bW91ciwgb3Igbm9uLWNoYXJhY3RlcmlzdGljIHdvcmRzIGV0Yy5cIilcbiAgICAgICAgXSlcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFwidG9wXCIsIHRhYnVsYXI6IHRydWUgfSwgW1xuICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIlRhYiAxXCIgfSxcbiAgICAgICAgICB7IG1haW46IFwiVGFiIDJcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuQm90dG9tIH0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcInRvcFwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuTm9uZSB9LCBbXG4gICAgICAgICAgcChcIlRoZXJlIGFyZSBtYW55IHZhcmlhdGlvbnMgb2YgcGFzc2FnZXMgb2YgTG9yZW0gSXBzdW0gYXZhaWxhYmxlLCBidXQgdGhlIG1ham9yaXR5IGhhdmUgc3VmZmVyZWQgYWx0ZXJhdGlvbiBpbiBzb21lIGZvcm0sIGJ5IGluamVjdGVkIGh1bW91ciwgb3IgcmFuZG9taXNlZCB3b3JkcyB3aGljaCBkb24ndCBsb29rIGV2ZW4gc2xpZ2h0bHkgYmVsaWV2YWJsZS4gSWYgeW91IGFyZSBnb2luZyB0byB1c2UgYSBwYXNzYWdlIG9mIExvcmVtIElwc3VtLCB5b3UgbmVlZCB0byBiZSBzdXJlIHRoZXJlIGlzbid0IGFueXRoaW5nIGVtYmFycmFzc2luZyBoaWRkZW4gaW4gdGhlIG1pZGRsZSBvZiB0ZXh0LiBBbGwgdGhlIExvcmVtIElwc3VtIGdlbmVyYXRvcnMgb24gdGhlIEludGVybmV0IHRlbmQgdG8gcmVwZWF0IHByZWRlZmluZWQgY2h1bmtzIGFzIG5lY2Vzc2FyeSwgbWFraW5nIHRoaXMgdGhlIGZpcnN0IHRydWUgZ2VuZXJhdG9yIG9uIHRoZSBJbnRlcm5ldC4gSXQgdXNlcyBhIGRpY3Rpb25hcnkgb2Ygb3ZlciAyMDAgTGF0aW4gd29yZHMsIGNvbWJpbmVkIHdpdGggYSBoYW5kZnVsIG9mIG1vZGVsIHNlbnRlbmNlIHN0cnVjdHVyZXMsIHRvIGdlbmVyYXRlIExvcmVtIElwc3VtIHdoaWNoIGxvb2tzIHJlYXNvbmFibGUuIFRoZSBnZW5lcmF0ZWQgTG9yZW0gSXBzdW0gaXMgdGhlcmVmb3JlIGFsd2F5cyBmcmVlIGZyb20gcmVwZXRpdGlvbiwgaW5qZWN0ZWQgaHVtb3VyLCBvciBub24tY2hhcmFjdGVyaXN0aWMgd29yZHMgZXRjLlwiKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pXG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcInRvcFwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pLFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuTm9uZSB9KSxcbiAgICAgICAgVUkuTWVudS5yZW5kZXIoeyBhdHRhY2htZW50OiBcImJvdHRvbVwiIH0sIFtcbiAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJTZWN0aW9uIDFcIiB9LFxuICAgICAgICAgIHsgbWFpbjogXCJTZWN0aW9uIDJcIiB9XG4gICAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NLCBleDIuRE9NXTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVTaXplRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIlNpemVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVudSBjYW4gdmFyeSBpbiBzaXplXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogXCJtaW5pXCIgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiU2lnbiB1cFwiKV0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtzaXplOiBcIm1pbmlcIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXgyID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNpemU6IFwidGlueVwiIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIlNpZ24gdXBcIildIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7c2l6ZTogXCJ0aW55XCJ9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHtyaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICB7bWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoe2NvbG9yOiBVSS5Db2xvci5QcmltYXJ5fSwgXCJTaWduIHVwXCIpXX1cbiAgICAgICAgXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBzaXplOiBcInNtYWxsXCIgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiU2lnbiB1cFwiKV0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtzaXplOiBcInNtYWxsXCJ9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHtyaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICB7bWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoe2NvbG9yOiBVSS5Db2xvci5QcmltYXJ5fSwgXCJTaWduIHVwXCIpXX1cbiAgICAgICAgXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4NCA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoeyBzaXplOiBcIm1lZGl1bVwiIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIlNpZ24gdXBcIildIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7c2l6ZTogXCJtZWRpdW1cIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXg1ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNpemU6IFwibGFyZ2VcIiB9LCBbXG4gICAgICAgIHsgYWN0aXZlOiB0cnVlLCBtYWluOiBcIkhvbWVcIiB9LFxuICAgICAgICB7IG1haW46IFwiTWVzc2FnZXNcIiB9LFxuICAgICAgICB7XG4gICAgICAgICAgcmlnaHRNZW51OiB0cnVlLCBtYWluOiBbXG4gICAgICAgICAgICB7IG1haW46IFtVSS5CdXR0b24ucmVuZGVyKHsgY29sb3I6IFVJLkNvbG9yLlByaW1hcnkgfSwgXCJTaWduIHVwXCIpXSB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe3NpemU6IFwibGFyZ2VcIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG5cbiAgICBsZXQgZXg3ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZW51LnJlbmRlcih7IHNpemU6IFwiaHVnZVwiIH0sIFtcbiAgICAgICAgeyBhY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwiIH0sXG4gICAgICAgIHsgbWFpbjogXCJNZXNzYWdlc1wiIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICAgIHsgbWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoeyBjb2xvcjogVUkuQ29sb3IuUHJpbWFyeSB9LCBcIlNpZ24gdXBcIildIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcih7c2l6ZTogXCJodWdlXCJ9LCBbXG4gICAgICAgIHthY3RpdmU6IHRydWUsIG1haW46IFwiSG9tZVwifSxcbiAgICAgICAge21haW46IFwiTWVzc2FnZXNcIn0sXG4gICAgICAgIHtyaWdodE1lbnU6IHRydWUsIG1haW46IFtcbiAgICAgICAgICB7bWFpbjogW1VJLkJ1dHRvbi5yZW5kZXIoe2NvbG9yOiBVSS5Db2xvci5QcmltYXJ5fSwgXCJTaWduIHVwXCIpXX1cbiAgICAgICAgXX1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIGxldCBleDggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHsgc2l6ZTogXCJtYXNzaXZlXCIgfSwgW1xuICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCIgfSxcbiAgICAgICAgeyBtYWluOiBcIk1lc3NhZ2VzXCIgfSxcbiAgICAgICAge1xuICAgICAgICAgIHJpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgICAgeyBtYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7IGNvbG9yOiBVSS5Db2xvci5QcmltYXJ5IH0sIFwiU2lnbiB1cFwiKV0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lbnUucmVuZGVyKHtzaXplOiBcIm1hc3NpdmVcIn0sIFtcbiAgICAgICAge2FjdGl2ZTogdHJ1ZSwgbWFpbjogXCJIb21lXCJ9LFxuICAgICAgICB7bWFpbjogXCJNZXNzYWdlc1wifSxcbiAgICAgICAge3JpZ2h0TWVudTogdHJ1ZSwgbWFpbjogW1xuICAgICAgICAgIHttYWluOiBbVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFVJLkNvbG9yLlByaW1hcnl9LCBcIlNpZ24gdXBcIildfVxuICAgICAgICBdfVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET00sIGV4Mi5ET00sIGV4My5ET00sIGV4NC5ET00sIGV4NS5ET00sIGV4Ny5ET00sIGV4OC5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRml0dGVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkZpdHRlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IGl0ZW0gb3IgbWVudSBjYW4gcmVtb3ZlIGVsZW1lbnQgcGFkZGluZywgdmVydGljYWxseSBvciBob3Jpem9udGFsbHlcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVudS5yZW5kZXIoW1xuICAgICAgICB7Zml0dGVkOiB0cnVlLCBtYWluOiBcIk5vIHBhZGRpbmcgd2hhdHNvZXZlclwifSxcbiAgICAgICAge2hvcml6b250YWxseUZpdHRlZDogdHJ1ZSwgbWFpbjogXCJObyBob3Jpem9udGFsIHBhZGRpbmdcIn0sXG4gICAgICAgIHt2ZXJ0aWNhbGx5Rml0dGVkOiB0cnVlLCBtYWluOiBcIk5vIHZlcnRpY2FsIHBhZGRpbmdcIn1cbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZW51LnJlbmRlcihbXG4gICAgICAgIHtmaXR0ZWQ6IHRydWUsIG1haW46IFwiTm8gcGFkZGluZyB3aGF0c29ldmVyXCJ9LFxuICAgICAgICB7aG9yaXpvbnRhbGx5Rml0dGVkOiB0cnVlLCBtYWluOiBcIk5vIGhvcml6b250YWwgcGFkZGluZ1wifSxcbiAgICAgICAge3ZlcnRpY2FsbHlGaXR0ZWQ6IHRydWUsIG1haW46IFwiTm8gdmVydGljYWwgcGFkZGluZ1wifVxuICAgICAgXSlgXG4gICAgfSk7XG4gICAgcmV0dXJuIFtleC5ET01dO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJvcmRlcmxlc3NFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXggPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiQm9yZGVybGVzc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZW51IG9yIG1lbnUgaXRlbSBjYW4gaGF2ZSBubyBib3JkZXJzXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lbnUucmVuZGVyKHtib3JkZXJsZXNzOiB0cnVlfSwgW1xuICAgICAgICB7bWFpbjogXCIxXCJ9LFxuICAgICAgICB7bWFpbjogXCIyXCJ9LFxuICAgICAgICB7bWFpbjogXCIzXCJ9LFxuICAgICAgICB7bWFpbjogXCI0XCJ9LFxuICAgICAgICB7bWFpbjogXCI1XCJ9LFxuICAgICAgICB7bWFpbjogXCI2XCJ9XG4gICAgICBdKSksXG4gICAgICBjb2RlOiBgVUkuTWVudS5yZW5kZXIoe2JvcmRlcmxlc3M6IHRydWV9LCBbXG4gICAgICAgIHttYWluOiBcIjFcIn0sXG4gICAgICAgIHttYWluOiBcIjJcIn0sXG4gICAgICAgIHttYWluOiBcIjNcIn0sXG4gICAgICAgIHttYWluOiBcIjRcIn0sXG4gICAgICAgIHttYWluOiBcIjVcIn0sXG4gICAgICAgIHttYWluOiBcIjZcIn1cbiAgICAgIF0pYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXguRE9NXTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVudS92YXJpYXRpb25zLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgVHlwZXMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgU3RhdGVzIH0gZnJvbSBcIi4vc3RhdGVzXCI7XG5pbXBvcnQgeyBWYXJpYXRpb25zIH0gZnJvbSBcIi4vdmFyaWF0aW9uc1wiO1xuZXhwb3J0IG5hbWVzcGFjZSBNZXNzYWdlIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKSB7XG4gICAgbGV0IHR5cGVzID0gVHlwZXMucnVuKHNvdXJjZXMpO1xuICAgIGxldCBzdGF0ZXMgPSBTdGF0ZXMucnVuKHNvdXJjZXMpO1xuICAgIGxldCB2YXJpYXRpb25zID0gVmFyaWF0aW9ucy5ydW4oc291cmNlcyk7XG5cbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHR5cGVzLCBzdGF0ZXMsIHZhcmlhdGlvbnMpLm1hcChcbiAgICAgIChbdHlwZXMsIHN0YXRlcywgdmFyaWF0aW9uc10pID0+XG4gICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJhcnRpY2xlXCIgfSB9LCBbXG4gICAgICAgICAgVUkuU2VnbWVudC5yZW5kZXIoeyB2ZXJ0aWNhbDogdHJ1ZSB9LCBbXG4gICAgICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHsgc2l6ZTogVUkuU2l6ZS5IdWdlIH0sXG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbWFpbjogXCJNZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICBzdWJ0ZXh0OiBcIkEgbWVzc2FnZSBkaXNwbGF5cyBpbmZvcm1hdGlvbiB0aGF0IGV4cGxhaW5zIG5lYXJieSBjb250ZW50XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgVUkuQ29udGFpbmVyLnJlbmRlcihbXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJUeXBlc1wiKV1cbiAgICAgICAgICAgICAgLmNvbmNhdCh0eXBlcylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGJhc2ljOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuSGVhZGVyLnJlbmRlcih7IGRpdmlkaW5nOiB0cnVlLCBzaXplOiBVSS5TaXplLkh1Z2UgfSwgXCJTdGF0ZXNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQoc3RhdGVzKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYmFzaWM6IHRydWUgfSwgW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHsgZGl2aWRpbmc6IHRydWUsIHNpemU6IFVJLlNpemUuSHVnZSB9LCBcIlZhcmlhdGlvbnNcIildXG4gICAgICAgICAgICAgIC5jb25jYXQodmFyaWF0aW9ucylcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSlcbiAgICApIGFzIFN0cmVhbTxWTm9kZT47XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgcm91dGVyOiB4cy5uZXZlcigpXG4gICAgfTtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL2luZGV4LnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uLy4uL3VpXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0YXRlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJIaWRkZW5cIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gYmUgaGlkZGVuXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lc3NhZ2UucmVuZGVyKHtoaWRkZW46IHRydWV9LCBcIllvdSBjYW4ndCBzZWUgbWUhXCIpKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7aGlkZGVuOiB0cnVlfSwgXCJZb3UgY2FuJ3Qgc2VlIG1lIVwiKWBcbiAgICB9KTtcblxuICAgIGxldCBleDIgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiVmlzaWJsZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZXNzYWdlIGNhbiBiZSBzZXQgdG8gdmlzaWJsZSB0byBmb3JjZSBpdHNlbGYgdG8gYmUgc2hvd24uXCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lc3NhZ2UucmVuZGVyKHtmb3JjZVZpc2libGU6IHRydWV9LCBcIllvdSBjYW4gYWx3YXlzIHNlZSBtZS5cIikpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtmb3JjZVZpc2libGU6IHRydWV9LCBcIllvdSBjYW4gYWx3YXlzIHNlZSBtZS5cIilgXG4gICAgfSk7XG5cblxuICAgIHJldHVybiB4cy5jb21iaW5lKGV4MS5ET00sIGV4Mi5ET00pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9jb2xsZWN0aW9ucy9tZXNzYWdlL3N0YXRlcy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBFeGFtcGxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBUeXBlcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcyk6IFN0cmVhbTxWTm9kZVtdPiB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJNZXNzYWdlXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGJhc2ljIG1lc3NhZ2VcIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVzc2FnZS5yZW5kZXIoe1xuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgaGVhZGVyOiBcIkNoYW5nZXMgaW4gU2VydmljZVwiLFxuICAgICAgICAgIG1haW46IFwiV2UganVzdCB1cGRhdGVkIG91ciBwcml2YWN5IHBvbGljeSBoZXJlIHRvIGJldHRlciBzZXJ2aWNlIG91ciBjdXN0b21lcnMuIFdlIHJlY29tbWVuZCByZXZpZXdpbmcgdGhlIGNoYW5nZXMuXCJcbiAgICAgICAgfVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIGhlYWRlcjogXCJDaGFuZ2VzIGluIFNlcnZpY2VcIixcbiAgICAgICAgICBtYWluOiBcIldlIGp1c3QgdXBkYXRlZCBvdXIgcHJpdmFjeSBwb2xpY3kgaGVyZSB0byBiZXR0ZXIgc2VydmljZSBvdXIgY3VzdG9tZXJzLiBXZSByZWNvbW1lbmQgcmV2aWV3aW5nIHRoZSBjaGFuZ2VzLlwiXG4gICAgICAgIH1cbiAgICAgIH0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MiA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJMaXN0IG1lc3NhZ2VcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSB3aXRoIGEgbGlzdFwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBoZWFkZXI6IFwiTmV3IFNpdGUgRmVhdHVyZXNcIixcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5MaXN0LnJlbmRlcih7IGJ1bGxldGVkOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgeyBtYWluOiBcIllvdSBjYW4gbm93IGhhdmUgY292ZXIgaW1hZ2VzIG9uIGJsb2cgcGFnZXNcIiB9LFxuICAgICAgICAgICAgICB7IG1haW46IFwiRHJhZnRzIHdpbGwgbm93IGF1dG8tc2F2ZSB3aGlsZSB3cml0aW5nXCIgfVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBoZWFkZXI6IFwiTmV3IFNpdGUgRmVhdHVyZXNcIixcbiAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICBVSS5MaXN0LnJlbmRlcih7YnVsbGV0ZWQ6IHRydWV9LCBbXG4gICAgICAgICAgICAgIHttYWluOiBcIllvdSBjYW4gbm93IGhhdmUgY292ZXIgaW1hZ2VzIG9uIGJsb2cgcGFnZXNcIn0sXG4gICAgICAgICAgICAgIHttYWluOiBcIkRyYWZ0cyB3aWxsIG5vdyBhdXRvLXNhdmUgd2hpbGUgd3JpdGluZ1wifVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0pYFxuICAgIH0pO1xuXG4gICAgbGV0IGV4MyA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogW1wiSWNvbiBNZXNzYWdlXCIsIFVJLkxhYmVsLnJlbmRlcih7Y29sb3I6IFwicHJpbWFyeVwifSwgXCJmbGV4Ym94XCIpXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gY29udGFpbiBhbiBpY29uLlwiLFxuICAgICAgVk5vZGUkOiB4cy5vZihVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBpY29uOiBbVUkuSWNvbi5yZW5kZXIoXCJpbmJveFwiKV0sXG4gICAgICAgICAgaGVhZGVyOiBcIkhhdmUgeW91IGhlYXJkIGFib3V0IG91ciBtYWlsaW5nIGxpc3Q/XCIsXG4gICAgICAgICAgbWFpbjogXCJHZXQgdGhlIGJlc3QgbmV3cyBpbiB5b3VyIGUtbWFpbCBldmVyeSBkYXkuXCJcbiAgICAgICAgfVxuICAgICAgfSkpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIGljb246IFtVSS5JY29uLnJlbmRlcihcImluYm94XCIpXSxcbiAgICAgICAgICBoZWFkZXI6IFwiSGF2ZSB5b3UgaGVhcmQgYWJvdXQgb3VyIG1haWxpbmcgbGlzdD9cIixcbiAgICAgICAgICBtYWluOiBcIkdldCB0aGUgYmVzdCBuZXdzIGluIHlvdXIgZS1tYWlsIGV2ZXJ5IGRheS5cIlxuICAgICAgICB9XG4gICAgICB9KWBcbiAgICB9KTtcblxuICAgIGxldCBleDQgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBWTm9kZSQ6IHhzLm9mKFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIGljb246IFtVSS5JY29uLnJlbmRlcih7bG9hZGluZzogdHJ1ZX0sIFwibm90Y2hlZCBjaXJjbGVcIildLFxuICAgICAgICAgIGhlYWRlcjogXCJKdXN0IG9uZSBzZWNvbmRcIixcbiAgICAgICAgICBtYWluOiBcIldlJ3JlIGZldGNoaW5nIHRoYXQgY29udGVudCBmb3IgeW91LlwiXG4gICAgICAgIH1cbiAgICAgIH0pKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBpY29uOiBbVUkuSWNvbi5yZW5kZXIoe2xvYWRpbmc6IHRydWV9LCBcIm5vdGNoZWQgY2lyY2xlXCIpXSxcbiAgICAgICAgICBoZWFkZXI6IFwiSnVzdCBvbmUgc2Vjb25kXCIsXG4gICAgICAgICAgbWFpbjogXCJXZSdyZSBmZXRjaGluZyB0aGF0IGNvbnRlbnQgZm9yIHlvdS5cIlxuICAgICAgICB9XG4gICAgICB9KWBcbiAgICB9KTtcblxuICAgIGxldCBtc2cgPSBVSS5NZXNzYWdlLnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgY29udGVudCQ6IHhzLm9mKHtcbiAgICAgICAgaGVhZGVyOiBcIldlbGNvbWUgYmFjayFcIixcbiAgICAgICAgbWFpbjogXCJUaGlzIGlzIGEgc3BlY2lhbCBub3RpZmljYXRpb24gd2hpY2ggeW91IGNhbiBkaXNtaXNzIGlmIHlvdSdyZSBib3JlZCB3aXRoIGl0LlwiXG4gICAgICB9KSwgYXJnczoge1xuICAgICAgICBjbG9zZWFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgZXg1ID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkRpc21pc3NhYmxlIEJsb2NrXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJBIG1lc3NhZ2UgdGhhdCB0aGUgdXNlciBjYW4gY2hvb3NlIHRvIGhpZGVcIixcbiAgICAgIFZOb2RlJDogbXNnLkRPTSxcbiAgICAgIGNvZGU6IGBsZXQgbXNnID0gVUkuTWVzc2FnZS5ydW4oe1xuICAgICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgICBjb250ZW50JDogeHMub2Yoe1xuICAgICAgICAgIGhlYWRlcjogXCJXZWxjb21lIGJhY2shXCIsXG4gICAgICAgICAgbWFpbjogXCJUaGlzIGlzIGEgc3BlY2lhbCBub3RpZmljYXRpb24gd2hpY2ggeW91IGNhbiBkaXNtaXNzIGlmIHlvdSdyZSBib3JlZCB3aXRoIGl0LlwiXG4gICAgICAgIH0pLCBhcmdzOiB7XG4gICAgICAgICAgY2xvc2VhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO2BcbiAgICB9KTtcblxuXG5cbiAgICByZXR1cm4geHMuY29tYmluZShleDEuRE9NLCBleDIuRE9NLCBleDMuRE9NLCBleDQuRE9NLCBleDUuRE9NKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29sbGVjdGlvbnMvbWVzc2FnZS90eXBlcy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi8uLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIGEsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEV4YW1wbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFZhcmlhdGlvbnMge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGVbXT4ge1xuXG4gICAgbGV0IGZsb2F0aW5nRXggPSBtYWtlRmxvYXRpbmdFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgY29tcGFjdEV4ID0gbWFrZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTtcbiAgICBsZXQgYXR0YWNoZWRFeCA9IG1ha2VBdHRhY2hlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBjb2xvcmVkRXggPSBtYWtlQ29sb3JlZEV4YW1wbGVzKHNvdXJjZXMpO1xuICAgIGxldCBzaXplRXggPSBtYWtlU2l6ZUV4YW1wbGVzKHNvdXJjZXMpO1xuXG4gICAgbGV0IGV4YW1wbGVzID0gW10uY29uY2F0KGZsb2F0aW5nRXgsIGNvbXBhY3RFeCwgYXR0YWNoZWRFeCwgY29sb3JlZEV4LCBzaXplRXgpO1xuICAgIHJldHVybiB4cy5jb21iaW5lLmFwcGx5KG51bGwsIGV4YW1wbGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VGbG9hdGluZ0V4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiRmxvYXRpbmdcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gZmxvYXQgYWJvdmUgY29udGVudCB0aGF0IGl0IGlzIHJlbGF0ZWQgdG9cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVzc2FnZS5yZW5kZXIoeyBmbG9hdGluZzogdHJ1ZSB9LCBcIldheSB0byBnbyFcIikpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtmbG9hdGluZzogdHJ1ZX0sIFwiV2F5IHRvIGdvIVwiKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4MS5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUNvbXBhY3RFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXgxID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbXBhY3RcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gb25seSB0YWtlIHVwIHRoZSB3aWR0aCBvZiBpdHMgY29udGVudC5cIixcbiAgICAgIFZOb2RlJDogeHMub2YoVUkuTWVzc2FnZS5yZW5kZXIoeyBjb21wYWN0OiB0cnVlIH0sIFwiR2V0IGFsbCB0aGUgYmVzdCBpbnZlbnRpb25zIGluIHlvdXIgZS1tYWlsIGV2ZXJ5IGRheS4gU2lnbiB1cCBub3chXCIpKSxcbiAgICAgIGNvZGU6IGBVSS5NZXNzYWdlLnJlbmRlcih7aGlkZGVuOiB0cnVlfSwgXCJHZXQgYWxsIHRoZSBiZXN0IGludmVudGlvbnMgaW4geW91ciBlLW1haWwgZXZlcnkgZGF5LiBTaWduIHVwIG5vdyFcIilgXG4gICAgfSk7XG5cbiAgICByZXR1cm4gW2V4MS5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUF0dGFjaGVkRXhhbXBsZXMoc291cmNlcyk6IFN0cmVhbTxWTm9kZT5bXSB7XG4gICAgbGV0IGV4MSA9IEV4YW1wbGUucnVuKHNvdXJjZXMsIHtcbiAgICAgIGhlYWRlcjogXCJBdHRhY2hlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZXNzYWdlIGNhbiBiZSBmb3JtYXR0ZWQgdG8gYXR0YWNoIGl0c2VsZiB0byBvdGhlciBjb250ZW50XCIsXG4gICAgICBWTm9kZSQ6IHhzLm9mKGRpdihbXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBhdHRhY2htZW50OiBcInRvcFwiIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaGVhZGVyOiBcIldlbGNvbWUgdG8gb3VyIHNpdGUhXCIsXG4gICAgICAgICAgICBtYWluOiBcIkZpbGwgb3V0IHRoZSBmb3JtIGJlbG93IHRvIHNpZ24tdXAgZm9yIGEgbmV3IGFjY291bnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogXCJub25lXCIgfSwgW1xuICAgICAgICAgIFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlVzZXJuYW1lXCIgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHR5cGU6IFwicGFzc3dvcmRcIiB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7IGlubGluZTogdHJ1ZSB9LCBbVUkuQ2hlY2tib3gucmVuZGVyKFwiSSBhZ3JlZSB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMuXCIpXSksXG4gICAgICAgICAgICBVSS5CdXR0b24ucmVuZGVyKHsgY29sb3I6IFwicHJpbWFyeVwiIH0sIFwiU3VibWl0XCIpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBhdHRhY2htZW50OiBcImJvdHRvbVwiLCBjb2xvcjogXCJ3YXJuaW5nXCIgfSxcbiAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICBpY29uOiBbVUkuSWNvbi5yZW5kZXIoXCJoZWxwXCIpXSxcbiAgICAgICAgICAgIG1haW46IFtcIkFscmVhZHkgc2lnbmVkIHVwPyBcIiwgYSh7IGF0dHJzOiB7IGhyZWY6IFwiI1wiIH0gfSwgXCJMb2dpbiBoZXJlXCIpLCBcIiBpbnN0ZWFkXCJdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFVJLk1lc3NhZ2UucmVuZGVyKHtcbiAgICAgICAgICBwcm9wczogeyBhdHRhY2htZW50OiBcInRvcFwiIH0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaGVhZGVyOiBcIldlbGNvbWUgdG8gb3VyIHNpdGUhXCIsXG4gICAgICAgICAgICBtYWluOiBcIkZpbGwgb3V0IHRoZSBmb3JtIGJlbG93IHRvIHNpZ24tdXAgZm9yIGEgbmV3IGFjY291bnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFVJLlNlZ21lbnQucmVuZGVyKHsgYXR0YWNobWVudDogXCJub25lXCIgfSwgW1xuICAgICAgICAgIFVJLkZvcm0ucmVuZGVyKFtcbiAgICAgICAgICAgIFVJLkZpZWxkcy5yZW5kZXIoeyBlcXVhbFdpZHRoOiB0cnVlIH0sIFtcbiAgICAgICAgICAgICAgVUkuRmllbGQucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBsYWJlbDogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkZpcnN0IE5hbWVcIiB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiTGFzdCBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIkxhc3QgTmFtZVwiIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHBsYWNlaG9sZGVyOiBcIlVzZXJuYW1lXCIgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBVSS5GaWVsZC5yZW5kZXIoe1xuICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICBtYWluOiBVSS5UZXh0Ym94LnJlbmRlcih7IHR5cGU6IFwicGFzc3dvcmRcIiB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFVJLkZpZWxkLnJlbmRlcih7aW5saW5lOiB0cnVlfSwgW1VJLkNoZWNrYm94LnJlbmRlcihcIkkgYWdyZWUgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zLlwiKV0pLFxuICAgICAgICAgICAgVUkuQnV0dG9uLnJlbmRlcih7Y29sb3I6IFwicHJpbWFyeVwifSwgXCJTdWJtaXRcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoe1xuICAgICAgICAgIHByb3BzIDoge2F0dGFjaG1lbnQ6IFwiYm90dG9tXCIsIGNvbG9yOiBcIndhcm5pbmdcIn0sXG4gICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgaWNvbjogW1VJLkljb24ucmVuZGVyKFwiaGVscFwiKV0sXG4gICAgICAgICAgICBtYWluOiBbXCJBbHJlYWR5IHNpZ25lZCB1cD9cIiwgYSh7YXR0cnM6IHtocmVmOiBcIiNcIn19LCBcIkxvZ2luIGhlcmVcIiksIFwiIGluc3RlYWRcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKWBcbiAgICB9KTtcbiAgICByZXR1cm4gW2V4MS5ET01dO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUNvbG9yZWRFeGFtcGxlcyhzb3VyY2VzKTogU3RyZWFtPFZOb2RlPltdIHtcbiAgICBsZXQgZXgxID0gRXhhbXBsZS5ydW4oc291cmNlcywge1xuICAgICAgaGVhZGVyOiBcIkNvbG9yZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbWVzc2FnZSBjYW4gYmUgZm9ybWF0dGVkIHRvIGJlIGRpZmZlcmVudCBjb2xvcnNcIixcbiAgICAgIFZOb2RlJDogeHMub2YoZGl2KFtcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogXCJwcmltYXJ5XCIgfSwgXCJQcmltYXJ5XCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcInNlY29uZGFyeVwiIH0sIFwiU2Vjb25kYXJ5XCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcInN1Y2Nlc3NcIiB9LCBcIlN1Y2Nlc3NcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwiaW5mb1wiIH0sIFwiSW5mb1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogXCJ3YXJuaW5nXCIgfSwgXCJXYXJuaW5nXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcImVycm9yXCIgfSwgXCJFcnJvclwiKVxuICAgICAgXSkpLFxuICAgICAgY29kZTogYFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcInByaW1hcnlcIiB9LCBcIlByaW1hcnlcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwic2Vjb25kYXJ5XCIgfSwgXCJTZWNvbmRhcnlcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwic3VjY2Vzc1wiIH0sIFwiU3VjY2Vzc1wiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBjb2xvcjogXCJpbmZvXCIgfSwgXCJJbmZvXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IGNvbG9yOiBcIndhcm5pbmdcIiB9LCBcIldhcm5pbmdcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgY29sb3I6IFwiZXJyb3JcIiB9LCBcIkVycm9yXCIpYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXgxLkRPTV07XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlU2l6ZUV4YW1wbGVzKHNvdXJjZXMpOiBTdHJlYW08Vk5vZGU+W10ge1xuICAgIGxldCBleDEgPSBFeGFtcGxlLnJ1bihzb3VyY2VzLCB7XG4gICAgICBoZWFkZXI6IFwiU2l6ZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQSBtZXNzYWdlIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplc1wiLFxuICAgICAgVk5vZGUkOiB4cy5vZihkaXYoW1xuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwibWluaVwiIH0sIFwiVGhpcyBpcyBhIG1pbmkgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcInRpbnlcIiB9LCBcIlRoaXMgaXMgYSB0aW55IG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJzbWFsbFwiIH0sIFwiVGhpcyBpcyBhIHNtYWxsIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJtZWRpdW1cIiB9LCBcIlRoaXMgaXMgYSBtZWRpdW0gbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcImxhcmdlXCIgfSwgXCJUaGlzIGlzIGEgbGFyZ2UgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcImJpZ1wiIH0sIFwiVGhpcyBpcyBhIGJpZyBtZXNzYWdlXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwiaHVnZVwiIH0sIFwiVGhpcyBpcyBhIGh1Z2UgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcIm1hc3NpdmVcIiB9LCBcIlRoaXMgaXMgYSBtYXNzaXZlIG1lc3NhZ2VcIilcbiAgICAgIF0pKSxcbiAgICAgIGNvZGU6IGBcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcIm1pbmlcIiB9LCBcIlRoaXMgaXMgYSBtaW5pIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJ0aW55XCIgfSwgXCJUaGlzIGlzIGEgdGlueSBtZXNzYWdlXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwic21hbGxcIiB9LCBcIlRoaXMgaXMgYSBzbWFsbCBtZXNzYWdlXCIpLFxuICAgICAgICBVSS5NZXNzYWdlLnJlbmRlcih7IHNpemU6IFwibWVkaXVtXCIgfSwgXCJUaGlzIGlzIGEgbWVkaXVtIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJsYXJnZVwiIH0sIFwiVGhpcyBpcyBhIGxhcmdlIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJiaWdcIiB9LCBcIlRoaXMgaXMgYSBiaWcgbWVzc2FnZVwiKSxcbiAgICAgICAgVUkuTWVzc2FnZS5yZW5kZXIoeyBzaXplOiBcImh1Z2VcIiB9LCBcIlRoaXMgaXMgYSBodWdlIG1lc3NhZ2VcIiksXG4gICAgICAgIFVJLk1lc3NhZ2UucmVuZGVyKHsgc2l6ZTogXCJtYXNzaXZlXCIgfSwgXCJUaGlzIGlzIGEgbWFzc2l2ZSBtZXNzYWdlXCIpYFxuICAgIH0pO1xuICAgIHJldHVybiBbZXgxLkRPTV07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2NvbGxlY3Rpb25zL21lc3NhZ2UvdmFyaWF0aW9ucy50cyIsImltcG9ydCAqIGFzIFVJIGZyb20gXCIuLi91aVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBkaXYsIHAsIHByZSwgY29kZSwgVk5vZGUsIGJyLCB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgaXNvbGF0ZSBmcm9tIFwiQGN5Y2xlL2lzb2xhdGVcIjtcbmRlY2xhcmUgdmFyIGhsanM6IGFueTtcblxuZXhwb3J0IG5hbWVzcGFjZSBFeGFtcGxlIHtcbiAgZXhwb3J0IGludGVyZmFjZSBBcmd1bWVudHMge1xuICAgIFZOb2RlJDogU3RyZWFtPFZOb2RlPjtcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgaGVhZGVyPzogVUkuRE9NQ29udGVudDtcbiAgICBkZXNjcmlwdGlvbj86IFVJLkRPTUNvbnRlbnQ7XG4gICAgaGlnaGxpZ2h0ZWQ/OiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlcywgYXJnczogQXJndW1lbnRzKTogeyBET006IFN0cmVhbTxWTm9kZT4gfSB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzKSB7XG4gICAgICAvL1Nob3cgY29kZSBpY29uXG4gICAgICBsZXQgYnRuU2hvdyA9IFVJLkljb24ucnVuKHtcbiAgICAgICAgRE9NOiBzb3VyY2VzLkRPTSxcbiAgICAgICAgY29udGVudCQ6IHhzLm9mKFVJLkljb25UeXBlLkNvZGUpXG4gICAgICB9KTtcbiAgICAgIGxldCB0cmFuc2l0aW9uJCA9IGJ0blNob3cuZXZlbnRzKFwiY2xpY2tcIikuZm9sZCgocHJldiwgbikgPT4gIXByZXYsIGZhbHNlKS5kcm9wKDEpLm1hcChcbiAgICAgICAgbiA9PiAoe1xuICAgICAgICAgIGFuaW1hdGlvbjogVUkuQW5pbWF0aW9uLlNsaWRlLFxuICAgICAgICAgIGRpcmVjdGlvbjogbiA/IFVJLkRpcmVjdGlvbi5JbiA6IFVJLkRpcmVjdGlvbi5PdXRcbiAgICAgICAgfSlcbiAgICAgICkuc3RhcnRXaXRoKHtcbiAgICAgICAgYW5pbWF0aW9uOiBVSS5BbmltYXRpb24uTm9uZSxcbiAgICAgICAgZGlyZWN0aW9uOiBVSS5EaXJlY3Rpb24uT3V0XG4gICAgICB9KTtcblxuICAgICAgLy9TbGlkaW5nIGNvZGUgdmlld1xuICAgICAgbGV0IGNvZGVsaW5lcyA9IGFyZ3MuY29kZS5zcGxpdCgvXFxyP1xcbi8pO1xuICAgICAgLy9UcmltIGxlYWRpbmcgd2hpdGVzcGFjZVxuICAgICAgbGV0IGJhc2VXaGl0ZXNwYWNlID0gY29kZWxpbmVzLmxlbmd0aCA+IDEgPyBjb3VudExlYWRpbmdXaGl0ZXNwYWNlKGNvZGVsaW5lc1sxXSkgLSAyIDogMDtcbiAgICAgIGNvZGVsaW5lcyA9IGNvZGVsaW5lcy5tYXAoKGxpbmUsIGkpID0+IGkgPT09IDAgPyBsaW5lIDogbGluZS5zdWJzdHJpbmcoYmFzZVdoaXRlc3BhY2UpKTtcbiAgICAgIGxldCBjb2RlJCA9IHhzLm9mKFxuICAgICAgICBVSS5TZWdtZW50LnJlbmRlcih7IGF0dGFjaG1lbnQ6IFVJLkF0dGFjaG1lbnQuQm90dG9tIH0sIFtwcmUoW1xuICAgICAgICAgIGNvZGUoe1xuICAgICAgICAgICAgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImphdmFzY3JpcHRcIiB9LCBob29rOiB7XG4gICAgICAgICAgICAgIGluc2VydDogKHZub2RlKSA9PiB7IGhsanMuaGlnaGxpZ2h0QmxvY2sodm5vZGUuZWxtKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGNvZGVsaW5lcy5tYXAobGluZSA9PiBbbGluZSwgYnIoKV0pLnJlZHVjZSgoYWNjLCBuKSA9PiBhY2MuY29uY2F0KG4pLCBbXSkpXG4gICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgICAgbGV0IGFuaW1hdGVkQ29kZSQgPSBVSS5UcmFuc2l0aW9uLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHRhcmdldCQ6IGNvZGUkLFxuICAgICAgICB0cmFuc2l0aW9uJDogdHJhbnNpdGlvbiRcbiAgICAgIH0pO1xuXG4gICAgICAvL0V4YW1wbGUgYmFyXG4gICAgICBsZXQgdG9wJCA9IHhzLmNvbWJpbmUodHJhbnNpdGlvbiQsIGFyZ3MuVk5vZGUkKS5tYXAoKFthbmltYXRpb24sIG9ial0pID0+IHtcbiAgICAgICAgbGV0IGlzQWN0aXZlID0gYW5pbWF0aW9uLmRpcmVjdGlvbiA9PT0gVUkuRGlyZWN0aW9uLkluO1xuICAgICAgICBsZXQgZWxlbSA9IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogaXNBY3RpdmUgPyBcInVpIHRvcCBhdHRhY2hlZCBzZWdtZW50IGNvZGVcIiA6IFwiY29kZVwiIH0gfSwgW1xuICAgICAgICAgIGlzQWN0aXZlID8gVUkuTGFiZWwucmVuZGVyKHsgYXR0YWNobWVudDogVUkuQXR0YWNobWVudC5Ub3AgfSwgW1xuICAgICAgICAgICAgXCJFeGFtcGxlXCJcbiAgICAgICAgICBdKSA6IGRpdih7IHN0eWxlOiB7IGRpc3BsYXk6IFwibm9uZVwiIH0sIHByb3BzOiB7IGNsYXNzTmFtZTogXCJcIiB9IH0pLFxuICAgICAgICAgIG9ialxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICB9KTtcbiAgICAgIGxldCB2VHJlZSQgPSB4cy5jb21iaW5lKGJ0blNob3cuRE9NLCBhbmltYXRlZENvZGUkLkRPTSwgdG9wJCkubWFwKFxuICAgICAgICAoW2J0blNob3csIGNvZGUsIHRvcF0pID0+IHtcbiAgICAgICAgICBsZXQgY29udGVudCA9IFtidG5TaG93LCB0b3AsIGNvZGVdO1xuICAgICAgICAgIGlmICh0eXBlb2YgKGFyZ3MuZGVzY3JpcHRpb24pICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gdHlwZW9mIChhcmdzLmRlc2NyaXB0aW9uKSA9PT0gXCJzdHJpbmdcIiA/IFtwKGFyZ3MuZGVzY3JpcHRpb24pXS5jb25jYXQoY29udGVudCkgOiBbXS5jb25jYXQoYXJncy5kZXNjcmlwdGlvbiwgY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgKGFyZ3MuaGVhZGVyKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgY29udGVudCA9IFtVSS5IZWFkZXIucmVuZGVyKGFyZ3MuaGVhZGVyKV0uY29uY2F0KGNvbnRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBhcmdzLmhpZ2hsaWdodGVkID8gXCJoaWdobGlnaHRlZCBleGFtcGxlXCIgOiBcImV4YW1wbGVcIiB9IH0sIGNvbnRlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogdlRyZWUkXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4pO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cbiAgZnVuY3Rpb24gY291bnRMZWFkaW5nV2hpdGVzcGFjZShzdHJpbmc6IHN0cmluZykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc3RyaW5nW2ldICE9PSBcIiBcIiAmJiBzdHJpbmdbaV0gIT09IFwiXFx0XCIpIHtcbiAgICAgICAgcmV0dXJuIChpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChzdHJpbmcubGVuZ3RoKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvY29tcG9uZW50cy9leGFtcGxlLnRzIiwiaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4uL3VpXCI7XG5pbXBvcnQgeHMgZnJvbSBcInhzdHJlYW1cIjtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtdmFyaWFibGVcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEluZGV4IHtcbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzKSB7XG4gICAgY29uc3QgdlRyZWUkID0geHMub2YoXG4gICAgICBkaXYoXCIuY2VudGVyZWRcIiwgW1xuICAgICAgICBVSS5Db250YWluZXIucmVuZGVyKFtcbiAgICAgICAgICBVSS5HcmlkLnJlbmRlcih7IGNlbnRlcmVkOiB0cnVlIH0sIFtcbiAgICAgICAgICAgIFVJLlJvdy5yZW5kZXIoW1xuICAgICAgICAgICAgICBVSS5IZWFkZXIucmVuZGVyKHtcbiAgICAgICAgICAgICAgICBwcm9wczogeyBzaXplOiBVSS5TaXplLkh1Z2UgfSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICBtYWluOiBcIldlbGNvbWUuXCIsXG4gICAgICAgICAgICAgICAgICBzdWJ0ZXh0OiBcIkF0IHRoZSBtb21lbnQgdGhlIGRvY3MgYXJlIGEgV0lQLiBQbGFubmVkIHBhZ2VzIGFyZSBzY2FmZm9sZGVkIGluIHRoZSBzaWRlbWVudS5cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIERPTTogdlRyZWUkLFxuICAgICAgcm91dGVyOiB4cy5uZXZlcigpXG4gICAgfTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvaW5kZXgvaW5kZXgudHMiLCIvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLXZhcmlhYmxlXG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtdmFyaWFibGVcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgU2lkZWJhciB9IGZyb20gXCIuL3NpZGViYXJcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBMYXlvdXQge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IGFueSwgcGFnZTogYW55KSB7XG5cbiAgICAvKioqIENyZWF0ZSBjb21wb25lbnRzICoqKi9cbiAgICBsZXQgc2lkZWJhciA9IFNpZGViYXIucnVuKHNvdXJjZXMpO1xuICAgIC8qKiogQ29tcG9zZSB2aWV3ICoqKi9cbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHNpZGViYXIuRE9NLCBwYWdlLkRPTSwpXG4gICAgICAubWFwKChbc2lkZWJhciwgcGFnZV0pID0+XG4gICAgICAgIGRpdihcIi5mdWxsLmhlaWdodFwiLCBbXG4gICAgICAgICAgZGl2KFwiLmNvbnRlbnQucHVzaGVyXCIsIFtcbiAgICAgICAgICAgIHNpZGViYXIsXG4gICAgICAgICAgICBwYWdlXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIHJvdXRlcjogcGFnZS5yb3V0ZXJcbiAgICB9O1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kb2NzLXNyYy9sYXlvdXQvaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi4vLi4vdWlcIjtcbmltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IHsgZGl2fSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFNpZGViYXIge1xuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXMpIHtcbiAgICBsZXQgY3VycmVudFBhZ2UkID0gc291cmNlcy5yb3V0ZXIubWFwKHggPT4geC5wYXRobmFtZSkgYXMgU3RyZWFtPHN0cmluZz47XG4gICAgbGV0IHByZWZpeCA9IFwiL2N5Y2xlLXNlbWFudGljLXVpXCI7XG4gICAgY29uc3QgdlRyZWUkID0gY3VycmVudFBhZ2UkLm1hcChwYWdlID0+XG4gICAgICBkaXYoXCIubGVmdC5tZW51XCIsIFtcbiAgICAgICAgZGl2KFwiLmZpeGVkXCIsIFtcbiAgICAgICAgICBVSS5NZW51LnJlbmRlcih7XG4gICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSwgaW52ZXJ0ZWQ6IHRydWUsXG4gICAgICAgICAgICBhdHRhY2htZW50OiBVSS5BdHRhY2htZW50Lk5vbmUsIHNpemU6IFVJLlNpemUuRmx1aWRcbiAgICAgICAgICB9LCBbe1xuICAgICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgICAgbWFpbjogW1wiSW50cm9kdWN0aW9uXCIsIFVJLk1lbnUucmVuZGVyKFxuICAgICAgICAgICAgICB7IHN1Ym1lbnU6IHRydWUsIH0sIFt7XG4gICAgICAgICAgICAgICAgbGluazogdHJ1ZSwgaHJlZjogcHJlZml4ICsgXCIvXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvXCIgfHwgcGFnZSA9PT0gcHJlZml4ICsgXCIvaG9tZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQWJvdXRcIlxuICAgICAgICAgICAgICB9XSldXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgICBtYWluOiBbXCJFbGVtZW50c1wiLCBVSS5NZW51LnJlbmRlcihcbiAgICAgICAgICAgICAgeyBzdWJtZW51OiB0cnVlLCB9LCBbe1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2J1dHRvblwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2J1dHRvblwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQnV0dG9uXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2NvbnRhaW5lclwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2NvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQ29udGFpbmVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2RpdmlkZXJcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9kaXZpZGVyXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJEaXZpZGVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2hlYWRlclwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2hlYWRlclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiSGVhZGVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2ljb25cIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9pY29uXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJJY29uXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2ltYWdlXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvZWxlbWVudHMvaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIkltYWdlXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2xhYmVsXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvZWxlbWVudHMvbGFiZWxcIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIkxhYmVsXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2xpc3RcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9saXN0XCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJMaXN0XCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL2xvYWRlclwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2VsZW1lbnRzL2xvYWRlclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTG9hZGVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL3NlZ21lbnRcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9zZWdtZW50XCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJTZWdtZW50XCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL3N0ZXBcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy9zdGVwXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJTdGVwXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL2VsZW1lbnRzL3RleHRib3hcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9lbGVtZW50cy90ZXh0Ym94XCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJUZXh0Ym94XCJcbiAgICAgICAgICAgICAgfV0pXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgICAgbWFpbjogW1wiQ29sbGVjdGlvbnNcIiwgVUkuTWVudS5yZW5kZXIoXG4gICAgICAgICAgICAgIHsgc3VibWVudTogdHJ1ZSwgfSwgW3tcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9icmVhZGNydW1iXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvYnJlYWRjcnVtYlwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQnJlYWRjcnVtYlwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9mb3JtXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvZm9ybVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiRm9ybVwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9ncmlkXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvZ3JpZFwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiR3JpZFwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9tZW51XCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvbWVudVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTWVudVwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9tZXNzYWdlXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvbWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTWVzc2FnZVwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9jb2xsZWN0aW9ucy90YWJsZVwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL2NvbGxlY3Rpb25zL3RhYmxlXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJUYWJsZVwiXG4gICAgICAgICAgICAgIH1dKV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIG1haW46IFtcIk1vZHVsZXNcIiwgVUkuTWVudS5yZW5kZXIoXG4gICAgICAgICAgICAgIHsgc3VibWVudTogdHJ1ZSwgfSwgW3tcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9tb2R1bGVzL2NoZWNrYm94XCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvbW9kdWxlcy9jaGVja2JveFwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiQ2hlY2tib3hcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbGluazogdHJ1ZSwgaHJlZjogcHJlZml4ICsgXCIvbW9kdWxlcy9kaW1tZXJcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL2RpbW1lclwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiRGltbWVyXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL21vZHVsZXMvZHJvcGRvd25cIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL2Ryb3Bkb3duXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJEcm9wZG93blwiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9tb2R1bGVzL21vZGFsXCIsIGFjdGl2ZTogcGFnZSA9PT0gcHJlZml4ICsgXCIvbW9kdWxlcy9tb2RhbFwiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiTW9kYWxcIlxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgbGluazogdHJ1ZSwgaHJlZjogcHJlZml4ICsgXCIvbW9kdWxlcy9wb3B1cFwiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL21vZHVsZXMvcG9wdXBcIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIlBvcHVwXCJcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL21vZHVsZXMvcHJvZ3Jlc3NcIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL3Byb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgbWFpbjogXCJQcm9ncmVzc1wiXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBsaW5rOiB0cnVlLCBocmVmOiBwcmVmaXggKyBcIi9tb2R1bGVzL3RyYW5zaXRpb25cIiwgYWN0aXZlOiBwYWdlID09PSBwcmVmaXggKyBcIi9tb2R1bGVzL3RyYW5zaXRpb25cIixcbiAgICAgICAgICAgICAgICBtYWluOiBcIlRyYW5zaXRpb25cIlxuICAgICAgICAgICAgICB9XSldXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBoZWFkZXI6IHRydWUsXG4gICAgICAgICAgICBtYWluOiBbXCJWaWV3c1wiLCBVSS5NZW51LnJlbmRlcihcbiAgICAgICAgICAgICAgeyBzdWJtZW51OiB0cnVlLCB9LCBbe1xuICAgICAgICAgICAgICAgIGxpbms6IHRydWUsIGhyZWY6IHByZWZpeCArIFwiL3ZpZXdzL3N0YXRpc3RpY1wiLCBhY3RpdmU6IHBhZ2UgPT09IHByZWZpeCArIFwiL3ZpZXdzL3N0YXRpc3RpY1wiLFxuICAgICAgICAgICAgICAgIG1haW46IFwiU3RhdGlzdGljXCJcbiAgICAgICAgICAgICAgfV0pXVxuICAgICAgICAgIH1dKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIHJvdXRlcjogeHMubmV2ZXIoKVxuICAgIH07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL2xheW91dC9zaWRlYmFyL2luZGV4LnRzIiwiaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeHMsIHtTdHJlYW0sIE1lbW9yeVN0cmVhbX0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7RE9NU291cmNlfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHN3aXRjaFBhdGggZnJvbSBcInN3aXRjaC1wYXRoXCI7XG5cbmludGVyZmFjZSBDb21wb25lbnRSb3V0ZXJTb3VyY2VzIHtcbiAgcm91dGVzOiBhbnk7XG4gIHJvdXRlcjogTWVtb3J5U3RyZWFtPExvY2F0aW9uPjtcbiAgRE9NOiBET01Tb3VyY2U7XG59XG5cbmNvbnN0IGNhbGxQYWdlID0gZnVuY3Rpb24gKHNvdXJjZXM6IENvbXBvbmVudFJvdXRlclNvdXJjZXMpIHtcbiAgcmV0dXJuICh7dmFsdWV9KSA9PiB7XG4gICAgY29uc3QgaXNvbGF0ZWRQYWdlID0gaXNvbGF0ZSh2YWx1ZSkoc291cmNlcykgYXMgYW55O1xuICAgIHJldHVybiBpc29sYXRlZFBhZ2U7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBwcm9wT3JOZXZlcihrZXk6IHN0cmluZywgeDogT2JqZWN0KSB7XG4gIGlmICh4Lmhhc093blByb3BlcnR5KGtleSkpe1xuICAgIHJldHVybiB4W2tleV07XG4gIH1cbiAgcmV0dXJuIHhzLm5ldmVyKCk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5CeUtleShrZXk6IHN0cmluZywgc3RyZWFtOiBTdHJlYW08YW55Pikge1xuICAgIHJldHVybiBzdHJlYW0ubWFwKHggPT4gcHJvcE9yTmV2ZXIoa2V5LCB4KSkuZmxhdHRlbigpO1xufVxuXG5mdW5jdGlvbiBDb21wb25lbnRSb3V0ZXIgKHNvdXJjZXM6IENvbXBvbmVudFJvdXRlclNvdXJjZXMpIHtcbiAgXG4gIGNvbnN0IGNvbXBvbmVudCQgPSBcbiAgc291cmNlcy5yb3V0ZXIubWFwKGwgPT4gc3dpdGNoUGF0aChsLnBhdGhuYW1lLCBzb3VyY2VzLnJvdXRlcykpXG4gICAgLm1hcChyb3V0ZSA9PiBjYWxsUGFnZShzb3VyY2VzKShyb3V0ZSkpXG4gICAgLnJlbWVtYmVyKCk7XG4gIGNvbnN0IHBsdWNrID0ga2V5ID0+IGZsYXR0ZW5CeUtleShrZXksIGNvbXBvbmVudCQpO1xuICBjb25zdCBzaW5rcyA9IHtcbiAgICBwbHVjazogcGx1Y2ssXG4gICAgRE9NOiBwbHVjayhcIkRPTVwiKSxcbiAgICByb3V0ZXI6IHBsdWNrKFwicm91dGVyXCIpLFxuICB9O1xuICByZXR1cm4gc2lua3M7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNvdXJjZXMgPT4gaXNvbGF0ZShDb21wb25lbnRSb3V0ZXIpKHNvdXJjZXMpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZG9jcy1zcmMvcm91dGVyLnRzIiwiLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC12YXJpYWJsZVxuaW1wb3J0IHsgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCB7IEluZGV4IH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7IEJyZWFkY3J1bWIsIEZvcm0sIEdyaWQsIE1lbnUsIE1lc3NhZ2V9IGZyb20gXCIuL2NvbGxlY3Rpb25zXCI7XG5cblxubGV0IHByZWZpeCA9IFwiL2N5Y2xlLXNlbWFudGljLXVpXCI7XG5sZXQgcm91dGVzID0ge1xuICBcIi9cIjogSW5kZXgucnVuLFxufTtcbnJvdXRlc1twcmVmaXggKyBcIi9cIl0gPSBJbmRleC5ydW47XG5yb3V0ZXNbcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvYnJlYWRjcnVtYlwiXSA9IEJyZWFkY3J1bWIucnVuO1xucm91dGVzW3ByZWZpeCArIFwiL2NvbGxlY3Rpb25zL2Zvcm1cIl0gPSBGb3JtLnJ1bjtcbnJvdXRlc1twcmVmaXggKyBcIi9jb2xsZWN0aW9ucy9ncmlkXCJdID0gR3JpZC5ydW47XG5yb3V0ZXNbcHJlZml4ICsgXCIvY29sbGVjdGlvbnMvbWVudVwiXSA9IE1lbnUucnVuO1xucm91dGVzW3ByZWZpeCArIFwiL2NvbGxlY3Rpb25zL21lc3NhZ2VcIl0gPSBNZXNzYWdlLnJ1bjtcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2RvY3Mtc3JjL3JvdXRlcy50cyIsImltcG9ydCB7IGRpdiwgYSwgc3BhbiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIERPTUNvbnRlbnQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IFNpemUgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgZ2V0U2NvcGV9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEJyZWFkY3J1bWIge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBkaXZpZGVyOiBWTm9kZSB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCB0eXBlIENvbnRlbnQgPSBBcnJheTxQYXJ0aWFsPEJyZWFkQ3J1bWJJdGVtPj47XG4gIGV4cG9ydCBpbnRlcmZhY2UgQnJlYWRDcnVtYkl0ZW0ge1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcbiAgICB0ZXh0OiBET01Db250ZW50O1xuICAgIGhyZWY6IHN0cmluZztcbiAgfVxuICBleHBvcnQgdHlwZSBCcmVhZGNydW1iQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIEJyZWFkY3J1bWJTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgQ29udGVudCwgQ29udGVudE9iajxDb250ZW50Pj47XG4gIFxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPiB8IENvbnRlbnQgfCBCcmVhZGNydW1iQXJncywgYXJnMj86IENvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChicmVhZGNydW1iLCBtYWtlSXNBcmdzKGlzQ29udGVudCksaXNDb250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IEJyZWFkY3J1bWJTb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSkgOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBicmVhZGNydW1iLCBcIi5icmVhZGNydW1iXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJyZWFkY3J1bWIoYXJnczogQnJlYWRjcnVtYkFyZ3MpIDogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge2RpdmlkZXI6IFwiL1wifTtcbiAgICBsZXQgY29udGVudCA9IFtdO1xuICAgIGlmKGFyZ3MuY29udGVudCkge1xuICAgICAgaWYgKGlzQ29udGVudChhcmdzLmNvbnRlbnQpKSB7XG4gICAgICAgIGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQ7XG4gICAgICB9IGVsc2UgaWYgKGlzQ29udGVudChhcmdzLmNvbnRlbnQubWFpbikpIHtcbiAgICAgICAgY29udGVudCA9IGFyZ3MuY29udGVudC5tYWluO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXByb3BzLmRpdmlkZXIpIHtcbiAgICAgIHByb3BzLmRpdmlkZXIgPSBcIi9cIjtcbiAgICB9XG4gICAgbGV0IGNoaWxkcmVuID0gY29udGVudC5tYXAoYyA9PiBbXG4gICAgICBzZWN0aW9uKGMpLCBkaXZpZGVyKHByb3BzKVxuICAgIF0pLnJlZHVjZSgoYSwgbikgPT4gYS5jb25jYXQobiksIFtdKTtcbiAgICBjaGlsZHJlbi5zcGxpY2UoLTEsIDEpO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzTmFtZShwcm9wcykgfSB9LCBjaGlsZHJlbik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZSArIFwiIGJyZWFkY3J1bWJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlY3Rpb24oc2VjdGlvbjogUGFydGlhbDxCcmVhZENydW1iSXRlbT4pOiBWTm9kZSB7XG4gICAgcmV0dXJuIHNlY3Rpb24uYWN0aXZlXG4gICAgICA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJhY3RpdmUgc2VjdGlvblwiIH0gfSwgc2VjdGlvbi50ZXh0KVxuICAgICAgOiBzZWN0aW9uLmhyZWYgXG4gICAgICAgID8gYSh7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJzZWN0aW9uXCIsIGhyZWY6IHNlY3Rpb24uaHJlZiB9IH0sIHNlY3Rpb24udGV4dClcbiAgICAgICAgOiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwic2VjdGlvblwiIH0gfSwgc2VjdGlvbi50ZXh0KTtcbiAgfVxuICBmdW5jdGlvbiBkaXZpZGVyKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IFZOb2RlIHtcbiAgICBpZiAodHlwZW9mIChwcm9wcy5kaXZpZGVyKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHNwYW4oeyBwcm9wczogeyBjbGFzc05hbWU6IFwiZGl2aWRlclwiIH0gfSwgcHJvcHMuZGl2aWRlcik7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXZpZGVyLmRhdGEucHJvcHMuY2xhc3NOYW1lLmluZGV4T2YoXCJ1aVwiKSAhPT0gLTEpIHtcbiAgICAgIHByb3BzLmRpdmlkZXIuZGF0YS5wcm9wcy5jbGFzc05hbWUgPSBwcm9wcy5kaXZpZGVyLmRhdGEucHJvcHMuY2xhc3NOYW1lLnN1YnN0cmluZygzKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpdmlkZXIuZGF0YS5wcm9wcy5jbGFzc05hbWUuaW5kZXhPZihcImRpdmlkZXJcIikgPT09IC0xKSB7XG4gICAgICBwcm9wcy5kaXZpZGVyLmRhdGEucHJvcHMuY2xhc3NOYW1lICs9IFwiIGRpdmlkZXJcIjtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzLmRpdmlkZXI7XG4gIH1cblxuICBmdW5jdGlvbiBpc0NvbnRlbnQob2JqKTogb2JqIGlzIENvbnRlbnQge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2JyZWFkY3J1bWIvaW5kZXgudHMiLCJpbXBvcnQgeyBkaXYsIGxhYmVsLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgRE9NQ29udGVudCwgaXNET01Db250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBudW1Ub1RleHQsIGdldFNjb3BlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBGaWVsZCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaW5saW5lOiBib29sZWFuO1xuICAgIGNlbnRlcmVkOiBib29sZWFuO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIGVycm9yOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgRmllbGRDb250ZW50T2JqIHtcbiAgICBtYWluOiBET01Db250ZW50O1xuICAgIGxhYmVsOiBET01Db250ZW50O1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgRmllbGRBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgRmllbGRDb250ZW50T2JqPjtcbiAgZXhwb3J0IHR5cGUgRmllbGRTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgRmllbGRDb250ZW50T2JqPjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQgfCBGaWVsZEFyZ3MsIGFyZzI/OiBET01Db250ZW50KTogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoZmllbGQsIGlzQXJncywgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogRmllbGRTb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGZpZWxkLCBcIi5maWVsZFwiLCBzY29wZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmaWVsZChhcmdzOiBGaWVsZEFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gdHlwZW9mIChhcmdzLnByb3BzKSA9PT0gXCJ1bmRlZmluZWRcIiA/IHt9IDogYXJncy5wcm9wcztcbiAgICBsZXQgbGJsID0gXCJcIiBhcyBET01Db250ZW50O1xuICAgIGxldCBjb250ZW50ID0gW10gYXMgRE9NQ29udGVudDtcbiAgICBpZiAodHlwZW9mIChhcmdzLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoaXNET01Db250ZW50KGFyZ3MuY29udGVudCkpIHtcbiAgICAgICAgY29udGVudCA9IGFyZ3MuY29udGVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxibCA9IGFyZ3MuY29udGVudC5sYWJlbCA/IGFyZ3MuY29udGVudC5sYWJlbCA6IFwiXCI7XG4gICAgICAgIGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQubWFpbiA/IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBbXS5jb25jYXQobGJsID8gbGFiZWwobGJsKSA6IFtdLCBjb250ZW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMud2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMud2lkdGgpICsgXCIgd2lkZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW5saW5lKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW5saW5lXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jZW50ZXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNlbnRlcmVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5lcnJvcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGVycm9yXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZXF1aXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJlcXVpcmVkXCI7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBmaWVsZFwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FyZ3Mob2JqKTogb2JqIGlzIEZpZWxkQXJncyB7XG4gICAgcmV0dXJuIG9iaiAmJiAoXG4gICAgICB0eXBlb2YgKG9iai5wcm9wcykgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgICh0eXBlb2YgKG9iai5jb250ZW50KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcbiAgICAgICAgKGlzRE9NQ29udGVudChvYmouY29udGVudCkgfHwgaXNET01Db250ZW50KG9iai5jb250ZW50Lm1haW4pIHx8IGlzRE9NQ29udGVudChvYmouY29udGVudC5sYWJlbCkpXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2Zvcm0vZmllbGQudHMiLCJpbXBvcnQgeyBkaXYsIGxhYmVsLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgRE9NQ29udGVudCwgaXNET01Db250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBudW1Ub1RleHQsIGdldFNjb3BlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBGaWVsZHMge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBlcXVhbFdpZHRoOiBib29sZWFuO1xuICAgIGdyb3VwZWQ6IGJvb2xlYW47XG4gICAgaW5saW5lOiBib29sZWFuO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgRmllbGRzQ29udGVudE9iaiB7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBsYWJlbDogRE9NQ29udGVudDtcbiAgfVxuICBleHBvcnQgdHlwZSBGaWVsZHNBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgRmllbGRzQ29udGVudE9iaj47XG4gIGV4cG9ydCB0eXBlIEZpZWxkc1NvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBGaWVsZHNDb250ZW50T2JqPjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQgfCBGaWVsZHNBcmdzLCBhcmcyPzogRE9NQ29udGVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KGZpZWxkcywgaXNBcmdzLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBGaWVsZHNTb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGZpZWxkcywgXCIuZmllbGRzXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpZWxkcyhhcmdzOiBGaWVsZHNBcmdzKSB7XG4gICAgbGV0IHByb3BzID0gdHlwZW9mIChhcmdzLnByb3BzKSA9PT0gXCJ1bmRlZmluZWRcIiA/IHt9IDogYXJncy5wcm9wcztcbiAgICBsZXQgbGJsID0gXCJcIiBhcyBET01Db250ZW50O1xuICAgIGxldCBjb250ZW50ID0gW10gYXMgRE9NQ29udGVudDtcbiAgICBpZiAodHlwZW9mIChhcmdzLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoaXNET01Db250ZW50KGFyZ3MuY29udGVudCkpIHtcbiAgICAgICAgY29udGVudCA9IGFyZ3MuY29udGVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxibCA9IGFyZ3MuY29udGVudC5sYWJlbCA/IGFyZ3MuY29udGVudC5sYWJlbCA6IFwiXCI7XG4gICAgICAgIGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQubWFpbiA/IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcywgY29udGVudCkgfSB9LCBbXS5jb25jYXQobGJsID8gbGFiZWwobGJsKSA6IFtdLCBjb250ZW50KSk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4sIGNvbnRlbnQpIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5lcXVhbFdpZHRoICYmIGNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICBjbGFzc05hbWUgKz0gbnVtVG9UZXh0KGNvbnRlbnQubGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmlubGluZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGlubGluZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZ3JvdXBlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGdyb3VwZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJlcXVpcmVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmVxdWlyZWRcIjtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIGZpZWxkc1wiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbiAgZnVuY3Rpb24gaXNBcmdzKG9iaik6IG9iaiBpcyBGaWVsZHNBcmdzIHtcbiAgICByZXR1cm4gb2JqICYmIChcbiAgICAgIHR5cGVvZiAob2JqLnByb3BzKSAhPT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICAgKHR5cGVvZiAob2JqLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIFxuICAgICAgICAoaXNET01Db250ZW50KG9iai5jb250ZW50KSB8fCBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQubWFpbikgfHwgaXNET01Db250ZW50KG9iai5jb250ZW50LmxhYmVsKSlcbiAgICAgIClcbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvZm9ybS9maWVsZHMudHMiLCJpbXBvcnQgeyBTaXplIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBkaXYsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb250ZW50T2JqLCBET01Db250ZW50LCBpc0RPTUNvbnRlbnQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgRm9ybSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGVxdWFsV2lkdGg6IGJvb2xlYW47XG4gICAgaW52ZXJ0ZWQ6IGJvb2xlYW47XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCB0eXBlIEZvcm1BcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIEZvcm1Tb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFBhcnRpYWw8UHJvcHM+IHwgRE9NQ29udGVudCB8IEZvcm1BcmdzLCBhcmcyPzogRE9NQ29udGVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KGZvcm0sIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogRm9ybVNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgZm9ybSwgXCIuZm9ybVwiLCBzY29wZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtKGFyZ3M6IEZvcm1BcmdzKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgbGV0IHByb3BzID0gdHlwZW9mKGFyZ3MucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBjb250ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5sb2FkaW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbG9hZGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZXF1YWxXaWR0aCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGVxdWFsIHdpZHRoXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIGZvcm1cIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvZm9ybS9mb3JtLnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vZm9ybVwiXG5leHBvcnQgKiBmcm9tIFwiLi9maWVsZFwiXG5leHBvcnQgKiBmcm9tIFwiLi9maWVsZHNcIlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2Zvcm0vaW5kZXgudHMiLCJcbmltcG9ydCB7IGRpdiwgVk5vZGUgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbnRlbnRPYmosIERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBWZXJ0aWNhbEFsaWdubWVudCwgVGV4dEFsaWdubWVudCwgU2l6ZSwgRmxvYXQgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IG51bVRvVGV4dCwgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBDb2x1bW4ge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBzdHJldGNoZWQ6IHRydWU7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBtb2JpbGU6IG51bWJlcjtcbiAgICB0YWJsZXQ6IG51bWJlcjtcbiAgICBjb21wdXRlcjogbnVtYmVyO1xuICAgIGxhcmdlc2NyZWVuOiBudW1iZXI7XG4gICAgbW9iaWxlT25seTogYm9vbGVhbjtcbiAgICB0YWJsZXRPbmx5OiBib29sZWFuO1xuICAgIGNvbXB1dGVyT25seTogYm9vbGVhbjtcbiAgICBsYXJnZXNjcmVlbk9ubHk6IGJvb2xlYW47XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBhbGlnbm1lbnQ6IFZlcnRpY2FsQWxpZ25tZW50IHwgc3RyaW5nO1xuICAgIHRleHRBbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgQ29sdW1uQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBDb2x1bW5Tb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50IHwgQ29sdW1uQXJncywgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChjb2x1bW4sIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IENvbHVtblNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgY29sdW1uLCBcIi5jb2x1bW5cIiwgc2NvcGUpO1xuICB9XG5cblxuICBmdW5jdGlvbiBjb2x1bW4oYXJnczogQ29sdW1uQXJncykge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIGNvbnRlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMud2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMud2lkdGgpICsgXCIgd2lkZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubW9iaWxlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gbnVtVG9UZXh0KHByb3BzLm1vYmlsZSkgKyBcIiB3aWRlIG1vYmlsZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFibGV0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gbnVtVG9UZXh0KHByb3BzLnRhYmxldCkgKyBcIiB3aWRlIHRhYmxldFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29tcHV0ZXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMuY29tcHV0ZXIpICsgXCIgd2lkZSBjb21wdXRlclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFyZ2VzY3JlZW4pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQocHJvcHMubGFyZ2VzY3JlZW4pICsgXCIgd2lkZSBsYXJnZSBzY3JlZW5cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLm1vYmlsZU9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBtb2JpbGUgb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFibGV0T25seSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhYmxldCBvbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wdXRlck9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb21wdXRlciBvbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sYXJnZXNjcmVlbk9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsYXJnZSBzY3JlZW4gb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc3RyZXRjaGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgc3RyZXRjaGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFZlcnRpY2FsQWxpZ25tZW50LlRvQ2xhc3NuYW1lKHByb3BzLmFsaWdubWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnRleHRBbGlnbm1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gVGV4dEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy50ZXh0QWxpZ25tZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuZmxvYXQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gRmxvYXQuVG9DbGFzc25hbWUocHJvcHMuZmxvYXQpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgY29sdW1uXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL2dyaWQvY29sdW1uLnRzIiwiaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgQ29udGVudE9iaiwgRE9NQ29udGVudCwgaXNET01Db250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25tZW50LCBUZXh0QWxpZ25tZW50IH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBudW1Ub1RleHQsIGdldFNjb3BlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgR3JpZCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgZXF1YWxXaWR0aDogYm9vbGVhbjtcbiAgICBkaXZpZGVkOiBib29sZWFuO1xuICAgIHZlcnRpY2FsbHlEaXZpZGVkOiBib29sZWFuO1xuICAgIGNvbnRhaW5lcjogYm9vbGVhbjtcbiAgICBjZWxsZWQ6IGJvb2xlYW47XG4gICAgaW50Q2VsbGVkOiBib29sZWFuO1xuICAgIHBhZGRlZDogYm9vbGVhbjtcbiAgICB2ZXJ0aWNhbGx5UGFkZGVkOiBib29sZWFuO1xuICAgIGhvcml6b250YWxseVBhZGRlZDogYm9vbGVhbjtcbiAgICByZWxheGVkOiBib29sZWFuO1xuICAgIHZlcnlSZWxheGVkOiBib29sZWFuO1xuICAgIGNlbnRlcmVkOiBib29sZWFuO1xuICAgIHN0YWNrYWJsZTogYm9vbGVhbjtcbiAgICBkb3VibGluZzogYm9vbGVhbjtcbiAgICByZXZlcnNlZE1vYmlsZTogYm9vbGVhbjtcbiAgICByZXZlcnNlZFRhYmxldDogYm9vbGVhbjtcbiAgICByZXZlcnNlZENvbXB1dGVyOiBib29sZWFuO1xuICAgIHJldmVyc2VkTGFyZ2VzY3JlZW46IGJvb2xlYW47XG4gICAgdmVydFJldmVyc2VkTW9iaWxlOiBib29sZWFuO1xuICAgIHZlcnRSZXZlcnNlZFRhYmxldDogYm9vbGVhbjtcbiAgICB2ZXJ0UmV2ZXJzZWRDb21wdXRlcjogYm9vbGVhbjtcbiAgICB2ZXJ0UmV2ZXJzZWRMYXJnZXNjcmVlbjogYm9vbGVhbjtcbiAgICBtb2JpbGVPbmx5OiBib29sZWFuO1xuICAgIHRhYmxldE9ubHk6IGJvb2xlYW47XG4gICAgY29tcHV0ZXJPbmx5OiBib29sZWFuO1xuICAgIGxhcmdlc2NyZWVuT25seTogYm9vbGVhbjtcbiAgICBhbGlnbm1lbnQ6IFZlcnRpY2FsQWxpZ25tZW50IHwgc3RyaW5nO1xuICAgIHRleHRBbGlnbm1lbnQ6IFRleHRBbGlnbm1lbnQgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBHcmlkQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBHcmlkU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQgfCBHcmlkQXJncywgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChncmlkLCBtYWtlSXNBcmdzKGlzRE9NQ29udGVudCksIGlzRE9NQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBHcmlkU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBncmlkLCBcIi5ncmlkXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBncmlkKGFyZ3M6IEdyaWRBcmdzKTogVk5vZGUge1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIGxldCBwcm9wcyA9IHR5cGVvZiAoYXJncy5wcm9wcykgIT09IFwidW5kZWZpbmVkXCIgPyBhcmdzLnByb3BzIDoge307XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzLCBjb250ZW50KSB9IH0sIGNvbnRlbnQpO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+LCBjb250ZW50OiBET01Db250ZW50KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5lcXVhbFdpZHRoKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZXF1YWwgd2lkdGhcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpdmlkZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXZpZGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0aWNhbGx5RGl2aWRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsbHkgZGl2aWRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29udGFpbmVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29udGFpbmVyXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jZWxsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjZWxsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludENlbGxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludGVybmFsbHkgY2VsbGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5wYWRkZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBwYWRkZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnRpY2FsbHlQYWRkZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2ZXJ0aWNhbGx5IHBhZGRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaG9yaXpvbnRhbGx5UGFkZGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaG9yaXpvbnRhbGx5IHBhZGRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmVsYXhlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJlbGF4ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnlSZWxheGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmVyeSByZWxheGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jZW50ZXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNlbnRlcmVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zdGFja2FibGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzdGFja2FibGVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRvdWJsaW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZG91YmxpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJldmVyc2VkTW9iaWxlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbW9iaWxlIHJldmVyc2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZXZlcnNlZFRhYmxldCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhYmxldCByZXZlcnNlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmV2ZXJzZWRDb21wdXRlcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNvbXB1dGVyIHJldmVyc2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZXZlcnNlZExhcmdlc2NyZWVuKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGFyZ2Ugc2NyZWVuIHJldmVyc2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0UmV2ZXJzZWRNb2JpbGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBtb2JpbGUgdmVydGljYWxseSByZXZlcnNlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVydFJldmVyc2VkVGFibGV0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdGFibGV0IHZlcnRpY2FsbHkgcmV2ZXJzZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnRSZXZlcnNlZENvbXB1dGVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcHV0ZXIgdmVydGljYWxseSByZXZlcnNlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVydFJldmVyc2VkTGFyZ2VzY3JlZW4pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsYXJnZSBzY3JlZW4gdmVydGljYWxseSByZXZlcnNlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubW9iaWxlT25seSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIG1vYmlsZSBvbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy50YWJsZXRPbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdGFibGV0IG9ubHlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNvbXB1dGVyT25seSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNvbXB1dGVyIG9ubHlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmxhcmdlc2NyZWVuT25seSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxhcmdlIHNjcmVlbiBvbmx5XCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmFsaWdubWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBWZXJ0aWNhbEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hbGlnbm1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy50ZXh0QWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFRleHRBbGlnbm1lbnQuVG9DbGFzc25hbWUocHJvcHMudGV4dEFsaWdubWVudCk7XG4gICAgfVxuICAgIGlmIChwcm9wcy53aWR0aCkge1xuICAgICAgY2xhc3NOYW1lICs9IG51bVRvVGV4dChwcm9wcy53aWR0aCkgKyBcIiBjb2x1bW5cIjtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIGdyaWRcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvZ3JpZC9ncmlkLnRzIiwiZXhwb3J0ICogZnJvbSBcIi4vZ3JpZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm93XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb2x1bW5cIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb2xsZWN0aW9ucy9ncmlkL2luZGV4LnRzIiwiaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcywgU3R5bGVBbmRDb250ZW50QXJncywgQ29udGVudE9iaiwgRE9NQ29udGVudCwgaXNET01Db250ZW50IH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IFRleHRBbGlnbm1lbnQsIFZlcnRpY2FsQWxpZ25tZW50fSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IG51bVRvVGV4dCwgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBSb3cge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGRvdWJsaW5nOiBib29sZWFuO1xuICAgIGNlbnRlcmVkOiBib29sZWFuO1xuICAgIHN0cmV0Y2hlZDogYm9vbGVhbjtcbiAgICBtb2JpbGVPbmx5OiBib29sZWFuO1xuICAgIHRhYmxldE9ubHk6IGJvb2xlYW47XG4gICAgY29tcHV0ZXJPbmx5OiBib29sZWFuO1xuICAgIGxhcmdlc2NyZWVuT25seTogYm9vbGVhbjtcbiAgICBlcXVhbFdpZHRoOiBib29sZWFuO1xuICAgIGFsaWdubWVudDogVmVydGljYWxBbGlnbm1lbnQgfCBzdHJpbmc7XG4gICAgdGV4dEFsaWdubWVudDogVGV4dEFsaWdubWVudCB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFJvd0FyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcbiAgZXhwb3J0IHR5cGUgUm93U291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFBhcnRpYWw8UHJvcHM+fERPTUNvbnRlbnR8Um93QXJncywgYXJnMj86IERPTUNvbnRlbnQpIDogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQocm93LCBtYWtlSXNBcmdzKGlzRE9NQ29udGVudCksIGlzRE9NQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBSb3dTb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSkgOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCByb3csIFwiLnJvd1wiLCBzY29wZSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcm93KGFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW46IFtdO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcywgY29udGVudCkgfSB9LCBjb250ZW50KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+LCBjb250ZW50OiBET01Db250ZW50KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5kb3VibGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRvdWJsaW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jZW50ZXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNlbnRlcmVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zdHJldGNoZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzdHJldGNoZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLm1vYmlsZU9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBtb2JpbGUgb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFibGV0T25seSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhYmxldCBvbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wdXRlck9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb21wdXRlciBvbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sYXJnZXNjcmVlbk9ubHkpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBsYXJnZSBzY3JlZW4gb25seVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZXF1YWxXaWR0aCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGVxdWFsIHdpZHRoXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy53aWR0aCkge1xuICAgICAgY2xhc3NOYW1lICs9IG51bVRvVGV4dChwcm9wcy53aWR0aCkgKyBcIiBjb2x1bW5cIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZihwcm9wcy50ZXh0QWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFRleHRBbGlnbm1lbnQuVG9DbGFzc25hbWUocHJvcHMudGV4dEFsaWdubWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YocHJvcHMuYWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFZlcnRpY2FsQWxpZ25tZW50LlRvQ2xhc3NuYW1lKHByb3BzLmFsaWdubWVudCk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiByb3dcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvZ3JpZC9yb3cudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9icmVhZGNydW1iXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mb3JtXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ncmlkXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZW51XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tZXNzYWdlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90YWJsZVwiO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb2xsZWN0aW9ucy9pbmRleC50cyIsImltcG9ydCB4cywgeyBTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeyBkaXYsIHAsIFZOb2RlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vLi4vZWxlbWVudHMvaWNvblwiO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9tb2R1bGVzL3RyYW5zaXRpb25cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgU3R5bGVBbmRDb250ZW50QXJncywgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IFNpemUsIENvbG9yLCBBdHRhY2htZW50LCBBbmltYXRpb24sIERpcmVjdGlvbiwgSWNvblR5cGUgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IGdldFNjb3BlfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBNZXNzYWdlIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgaWNvbjogYm9vbGVhbjtcbiAgICBmbG9hdGluZzogYm9vbGVhbjtcbiAgICBjb21wYWN0OiBib29sZWFuO1xuICAgIGhpZGRlbjogYm9vbGVhbjtcbiAgICBmb3JjZVZpc2libGU6IGJvb2xlYW47XG4gICAgYXR0YWNobWVudDogQXR0YWNobWVudCB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIENvbnRlbnQge1xuICAgIGljb246IERPTUNvbnRlbnQ7XG4gICAgaGVhZGVyOiBET01Db250ZW50O1xuICAgIG1haW46IERPTUNvbnRlbnQ7XG4gIH1cblxuICBleHBvcnQgdHlwZSBNZXNzYWdlQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnQ+O1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZVNvdXJjZXMgZXh0ZW5kcyBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50PiB7XG4gICAgYXJncz86IHtcbiAgICAgIGNsb3NlYWJsZT86IHRydWUsXG4gICAgICBvbiQ/OiBTdHJlYW08Ym9vbGVhbj5cbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50IHwgTWVzc2FnZUFyZ3MsIGFyZzI/OiBET01Db250ZW50KTogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQobWVzc2FnZSwgaXNBcmdzLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBNZXNzYWdlU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBNZXNzYWdlU291cmNlcykge1xuICAgICAgbGV0IHByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7fSk7XG4gICAgICBsZXQgY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JC5tYXAoYyA9PiBpc0RPTUNvbnRlbnQoYykgPyB7IG1haW46IGMgfSA6IGMpIDogeHMub2YoeyBtYWluOiBbXSB9KTtcbiAgICAgIGxldCBvbiQgPSBzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLm9uJCA/IHNvdXJjZXMuYXJncy5vbiQgOiB4cy5vZih0cnVlKTtcblxuICAgICAgbGV0IHZUcmVlJDpTdHJlYW08Vk5vZGU+LCBhY3RpdmUkOlN0cmVhbTxib29sZWFuPiwgaWNvbjpDb21wb25lbnRTaW5rcztcbiAgICAgIGlmIChzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLmNsb3NlYWJsZSkge1xuICAgICAgICBpY29uID0gSWNvbi5ydW4oeyBET006IHNvdXJjZXMuRE9NLCBjb250ZW50JDogeHMub2YoSWNvblR5cGUuQ2xvc2UpIH0sIHNjb3BlKTtcbiAgICAgICAgY29uc3QgY2xvc2UkID0gaWNvbi5ldmVudHMoXCJjbGlja1wiKS5tYXBUbyhmYWxzZSk7XG4gICAgICAgIHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBjb250ZW50JCwgaWNvbi5ET00pXG4gICAgICAgICAgLm1hcCgoW3Byb3BzLCBjb250ZW50LCBjbG9zZUljb25dKSA9PiBtZXNzYWdlKHsgcHJvcHMsIGNvbnRlbnQgfSwgY2xvc2VJY29uKSk7XG4gICAgICAgIGFjdGl2ZSQgPSB4cy5tZXJnZShvbiQsIGNsb3NlJCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2VHJlZSQgPSB4cy5jb21iaW5lKHByb3BzJCwgY29udGVudCQpLm1hcCgoW3Byb3BzLCBjb250ZW50XSkgPT4gbWVzc2FnZSh7IHByb3BzLCBjb250ZW50IH0pKTtcbiAgICAgICAgYWN0aXZlJCA9IG9uJDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyYW5zaXRpb24kID0gYWN0aXZlJC5mb2xkKChwcmV2QW5pbSwgYWN0aXZlKSA9PiBwcmV2QW5pbS5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5Ob25lXG4gICAgICAgID8geyBhbmltYXRpb246IEFuaW1hdGlvbi5Ob25lLCBkaXJlY3Rpb246IGFjdGl2ZSA/IERpcmVjdGlvbi5JbiA6IERpcmVjdGlvbi5PdXQgfVxuICAgICAgICA6IHsgYW5pbWF0aW9uOiBBbmltYXRpb24uRmFkZSwgZGlyZWN0aW9uOiBhY3RpdmUgPyBEaXJlY3Rpb24uSW4gOiBEaXJlY3Rpb24uT3V0IH1cbiAgICAgICAgLCB7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogRGlyZWN0aW9uLk5vbmUgfSk7XG4gICAgICAgIFxuICAgICAgY29uc3QgYW5pbWF0aW9uID0gVHJhbnNpdGlvbi5ydW4oeyBET006IHNvdXJjZXMuRE9NLCB0YXJnZXQkOiB2VHJlZSQsIHRyYW5zaXRpb24kIH0sIHNjb3BlKTtcbiAgICAgIFxuICAgICAgbGV0IGV2dDtcbiAgICAgIGlmIChzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLmNsb3NlYWJsZSkge1xuICAgICAgICBldnQgPSAodHlwZSkgPT4geHMubWVyZ2Uoc291cmNlcy5ET00uc2VsZWN0KFwiLm1lc3NhZ2VcIikuZXZlbnRzKHR5cGUpLCBpY29uLmV2ZW50cyh0eXBlKSwgYW5pbWF0aW9uLmV2ZW50cyh0eXBlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldnQgPSAodHlwZSkgPT4gc291cmNlcy5ET00uc2VsZWN0KFwiLm1lc3NhZ2VcIikuZXZlbnRzKHR5cGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBET006IGFuaW1hdGlvbi5ET00sXG4gICAgICAgIGV2ZW50czogZXZ0XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoc2NvcGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtYWluKHNvdXJjZXMpO1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVzc2FnZShhcmdzOiBNZXNzYWdlQXJncywgY2xvc2VJY29uPzogVk5vZGUpIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyB7IG1haW46IGFyZ3MuY29udGVudCB9IDogYXJncy5jb250ZW50IDogeyBtYWluOiBbXSB9O1xuICAgIGlmIChjb250ZW50Lmljb24pIHtcbiAgICAgIHByb3BzLmljb24gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChjb250ZW50Lm1haW4pID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb250ZW50Lm1haW4gPSBbcChjb250ZW50Lm1haW4pXTtcbiAgICB9XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIFtdLmNvbmNhdChcbiAgICAgIGNvbnRlbnQuaWNvbiA/IGNvbnRlbnQuaWNvbiA6IFtdLCBjbG9zZUljb24gPyBjbG9zZUljb24gOiBbXSxcbiAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJjb250ZW50XCIgfSB9LCBbXS5jb25jYXQoXG4gICAgICAgIGNvbnRlbnQuaGVhZGVyID8gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImhlYWRlclwiIH0gfSwgY29udGVudC5oZWFkZXIpIDogW10sXG4gICAgICAgIGNvbnRlbnQubWFpblxuICAgICAgKSlcbiAgICApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLmljb24pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpY29uXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5mbG9hdGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGZsb2F0aW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb21wYWN0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGFjdFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZm9yY2VWaXNpYmxlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmlzaWJsZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaGlkZGVuKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaGlkZGVuXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmF0dGFjaG1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQXR0YWNobWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hdHRhY2htZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBDb2xvci5Ub0NsYXNzbmFtZShwcm9wcy5jb2xvcik7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBtZXNzYWdlXCI7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJncyhvYmopOiBvYmogaXMgTWVzc2FnZUFyZ3Mge1xuICAgIHJldHVybiB0eXBlb2YgKG9iaikgIT09IFwidW5kZWZpbmVkXCIgJiYgKHR5cGVvZiAob2JqLnByb3BzKSAhPT0gXCJ1bmRlZmluZWRcIiB8fCBpc0NvbnRlbnQob2JqLmNvbnRlbnQpIHx8IGlzRE9NQ29udGVudChvYmouY29udGVudCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDb250ZW50KGNvbnRlbnQpOiBjb250ZW50IGlzIENvbnRlbnQge1xuICAgIHJldHVybiBjb250ZW50ICE9PSB1bmRlZmluZWQgJiYgKGlzRE9NQ29udGVudChjb250ZW50Lmljb24pIHx8IGlzRE9NQ29udGVudChjb250ZW50LmhlYWRlcikgfHwgaXNET01Db250ZW50KGNvbnRlbnQubWFpbikpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29sbGVjdGlvbnMvbWVzc2FnZS9pbmRleC50cyIsImltcG9ydCB7IFZOb2RlLCB0YWJsZSwgdHIsIHRoLCB0ZCwgdGhlYWQsIHRib2R5LCB0Zm9vdCB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTaXplLCBDb2xvciB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVGFibGUge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBzaW5nbGVMaW5lOiBib29sZWFuO1xuICAgIGZpeGVkOiBib29sZWFuO1xuICAgIHNlbGVjdGFibGU6IGJvb2xlYW47XG4gICAgc3RyaXBlZDogYm9vbGVhbjtcbiAgICBjZWxsZWQ6IGJvb2xlYW47XG4gICAgYmFzaWM6IGJvb2xlYW47XG4gICAgdmVyeUJhc2ljOiBib29sZWFuO1xuICAgIGNvbGxhcHNpbmc6IGJvb2xlYW47XG4gICAgcGFkZGVkOiBib29sZWFuO1xuICAgIHZlcnlQYWRkZWQ6IGJvb2xlYW47XG4gICAgY29tcGFjdDogYm9vbGVhbjtcbiAgICB2ZXJ5Q29tcGFjdDogYm9vbGVhbjtcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIENvbnRlbnQge1xuICAgIGhlYWRlcjogQXJyYXk8RE9NQ29udGVudD47XG4gICAgbWFpbjogQXJyYXk8QXJyYXk8RE9NQ29udGVudD4+O1xuICAgIGZvb3RlcjogQXJyYXk8RE9NQ29udGVudD4gfCBET01Db250ZW50O1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgVGFibGVBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgQXJyYXk8QXJyYXk8RE9NQ29udGVudD4+LCBDb250ZW50PjtcbiAgZXhwb3J0IHR5cGUgVGFibGVTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgQXJyYXk8QXJyYXk8RE9NQ29udGVudD4+LCBDb250ZW50PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQYXJ0aWFsPFByb3BzPiB8IEFycmF5PEFycmF5PERPTUNvbnRlbnQ+PiB8IFRhYmxlQXJncywgYXJnMj86IEFycmF5PEFycmF5PERPTUNvbnRlbnQ+Pik6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KHRhYmxlUiwgaXNBcmdzLCBpc01haW4sIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBUYWJsZVNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgdGFibGVSLCBcIi50YWJsZVwiLCBzY29wZSk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHRhYmxlUihhcmdzOiBUYWJsZUFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogeyBtYWluOiBhcmdzLmNvbnRlbnQgfSA6IHsgbWFpbjogW10gfTtcbiAgICBsZXQgaGVhZGVyID0gY29udGVudC5oZWFkZXIgPyB0aGVhZChbdHIoY29udGVudC5oZWFkZXIubWFwKGggPT4gdGgoaCkpKV0pIDogW107XG4gICAgbGV0IGZvb3RlcjtcbiAgICBpZiAoaXNET01Db250ZW50KGNvbnRlbnQuZm9vdGVyKSkge1xuICAgICAgZm9vdGVyID0gdGZvb3QoY29udGVudC5mb290ZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvb3RlciA9IGNvbnRlbnQuZm9vdGVyID8gdGZvb3QoW3RyKGNvbnRlbnQuZm9vdGVyLm1hcChmID0+IHRoKGYpKSldKSA6IFtdO1xuICAgIH1cblxuICAgIHJldHVybiB0YWJsZSh7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIFtdLmNvbmNhdChcbiAgICAgIGhlYWRlcixcbiAgICAgIHRib2R5KGNvbnRlbnQubWFpbi5tYXAociA9PiB0cihyLm1hcChjID0+IHRkKGMpKSkpKSxcbiAgICAgIGZvb3RlclxuICAgICkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPikge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLnNpbmdsZUxpbmUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzaW5nbGUgbGluZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZml4ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXhlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc2VsZWN0YWJsZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNlbGVjdGFibGVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnN0cmlwZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzdHJpcGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jZWxsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjZWxsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmJhc2ljKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYmFzaWNcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnlCYXNpYykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnkgYmFzaWNcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNvbGxhcHNpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb2xsYXBzaW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5wYWRkZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBwYWRkZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnlQYWRkZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB2ZXJ5IHBhZGRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29tcGFjdCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNvbXBhY3RcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZlcnlDb21wYWN0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmVyeSBjb21wYWN0XCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgdGFibGVcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBcmdzKG9iaik6IG9iaiBpcyBUYWJsZUFyZ3Mge1xuICAgIHJldHVybiB0eXBlb2YgKG9iaikgIT09IFwidW5kZWZpbmVkXCIgJiYgKFxuICAgICAgdHlwZW9mIChvYmoucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICAodHlwZW9mIChvYmouY29udGVudCkgIT09IFwidW5kZWZpbmVkXCIgJiYgKGlzQ29udGVudChvYmouY29udGVudCkgfHwgaXNNYWluKG9iai5jb250ZW50KSkpXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ29udGVudChjb250ZW50KTogY29udGVudCBpcyBQYXJ0aWFsPENvbnRlbnQ+IHtcbiAgICByZXR1cm4gY29udGVudCAhPT0gdW5kZWZpbmVkICYmIChcbiAgICAgICg8Q29udGVudD5jb250ZW50KS5tYWluICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICgoPENvbnRlbnQ+Y29udGVudCkuaGVhZGVyICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgKDxDb250ZW50PmNvbnRlbnQpLmZvb3RlciAhPT0gdW5kZWZpbmVkKSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc01haW4ob2JqKTogb2JqIGlzIEFycmF5PEFycmF5PERPTUNvbnRlbnQ+PiB7XG4gICAgcmV0dXJuIHR5cGVvZiAob2JqKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvYmogaW5zdGFuY2VvZiBBcnJheTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbGxlY3Rpb25zL3RhYmxlL2luZGV4LnRzIiwiaW1wb3J0IHsgZGl2LCBhLCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNpbmtzLCBDb21wb25lbnRTb3VyY2VzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBDb2xvciwgU2l6ZSwgQXR0YWNobWVudCwgRmxvYXQgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJ1blByb3BzQW5kQ29udGVudCwgcmVuZGVyUHJvcHNBbmRDb250ZW50IH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgZ2V0U2NvcGV9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEJ1dHRvbiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGFuaW1hdGVkOiBib29sZWFuO1xuICAgIHZlcnRpY2FsQW5pbWF0ZWQ6IGJvb2xlYW47XG4gICAgbGFiZWxlZDogYm9vbGVhbjtcbiAgICByaWdodGxhYmVsZWQ6IGJvb2xlYW47XG4gICAgaWNvbjogYm9vbGVhbjtcbiAgICBiYXNpYzogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBjb21wYWN0OiBib29sZWFuO1xuICAgIGNpcmN1bGFyOiBib29sZWFuO1xuICAgIGZsdWlkOiBib29sZWFuO1xuICAgIGhyZWY6IHN0cmluZztcbiAgICBhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudE9iaiB7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBoaWRkZW46IERPTUNvbnRlbnQ7XG4gIH1cblxuICBleHBvcnQgdHlwZSBCdXR0b25BcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iaj47XG4gIGV4cG9ydCB0eXBlIEJ1dHRvblNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBCdXR0b25BcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50LCBhcmcyPzogRE9NQ29udGVudCkge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoYnV0dG9uLCBpc0FyZ3MsIGlzRE9NQ29udGVudCwgYXJnMSwgYXJnMik7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBCdXR0b25Tb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGJ1dHRvbiwgXCIuYnV0dG9uXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1dHRvbihhcmdzOiBCdXR0b25BcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IHsgbWFpbjogYXJncy5jb250ZW50IH0gOiBhcmdzLmNvbnRlbnQgOiB7IG1haW46IFtdIH07XG4gICAgbGV0IGNoaWxkcmVuID0gY29udGVudC5oaWRkZW5cbiAgICAgID8gW2Rpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJ2aXNpYmxlIGNvbnRlbnRcIiB9IH0sIGNvbnRlbnQubWFpbiksXG4gICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiaGlkZGVuIGNvbnRlbnRcIiB9IH0sIGNvbnRlbnQuaGlkZGVuKV1cbiAgICAgIDogY29udGVudC5tYWluO1xuICAgIHJldHVybiBwcm9wcy5ocmVmXG4gICAgICA/IGEoeyBwcm9wczogeyBocmVmOiBwcm9wcy5ocmVmLCBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBjaGlsZHJlbilcbiAgICAgIDogZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuYW5pbWF0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBhbmltYXRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudmVydGljYWxBbmltYXRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsIGFuaW1hdGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sYWJlbGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbGFiZWxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucmlnaHRsYWJlbGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmlnaHQgbGFiZWxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaWNvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGljb25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmJhc2ljKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYmFzaWNcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludmVydGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW52ZXJ0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmFjdGl2ZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGFjdGl2ZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubG9hZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxvYWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNvbXBhY3QpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb21wYWN0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jaXJjdWxhcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNpcmN1bGFyXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5mbHVpZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGZsdWlkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmF0dGFjaG1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQXR0YWNobWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hdHRhY2htZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5mbG9hdCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBGbG9hdC5Ub0NsYXNzbmFtZShwcm9wcy5mbG9hdCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIGJ1dHRvblwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FyZ3Mob2JqKTogb2JqIGlzIEJ1dHRvbkFyZ3Mge1xuICAgIHJldHVybiB0eXBlb2YgKG9iaikgIT09IFwidW5kZWZpbmVkXCIgJiYgKFxuICAgICAgdHlwZW9mIChvYmoucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQpIHx8ICh0eXBlb2YgKG9iai5jb250ZW50KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoXG4gICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudC5tYWluKSB8fCBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQuaGlkZGVuKVxuICAgICAgKSlcbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvYnV0dG9uL2luZGV4LnRzIiwiaW1wb3J0IHtkaXYsIFZOb2RlfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHtET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQge3JlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgZ2V0U2NvcGV9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIENvbnRhaW5lciB7XG4gIGV4cG9ydCB0eXBlIENvbnRhaW5lckFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPE9iamVjdCwgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIENvbnRhaW5lclNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPE9iamVjdCwgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSkgOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBjb250YWluZXIsIFwiLmNvbnRhaW5lclwiLCBzY29wZSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBDb250YWluZXJBcmdzIHwgRE9NQ29udGVudCkgOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChjb250YWluZXIsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRhaW5lcihhcmdzOiBDb250YWluZXJBcmdzKSA6IFZOb2RlIHtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW4gOiBbXTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcInVpIGNvbnRhaW5lclwifX0sIGNvbnRlbnQpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvY29udGFpbmVyL2luZGV4LnRzIiwiaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbnRlbnRPYmosIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIHJ1blByb3BzQW5kQ29udGVudCwgbWFrZUlzQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcbmltcG9ydCB7IGdldFNjb3BlfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBEaXZpZGVyIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgaG9yaXpvbnRhbDogYm9vbGVhbjtcbiAgICB2ZXJ0aWNhbDogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBmaXR0ZWQ6IGJvb2xlYW47XG4gICAgaGlkZGVuOiBib29sZWFuO1xuICAgIHNlY3Rpb246IGJvb2xlYW47XG4gICAgY2xlYXJpbmc6IGJvb2xlYW47XG4gICAgaGVhZGVyOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgRGl2aWRlckFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcbiAgZXhwb3J0IHR5cGUgRGl2aWRlclNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IERpdmlkZXJTb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIGRpdmlkZXIsIFwiLmRpdmlkZXJcIiwgc2NvcGUpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogRGl2aWRlckFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KTogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoZGl2aWRlciwgbWFrZUlzQXJncyhpc0RPTUNvbnRlbnQpLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGl2aWRlcihhcmdzOiBEaXZpZGVyQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzTmFtZShwcm9wcykgfSB9LCBjb250ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLnZlcnRpY2FsKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmVydGljYWxcIjtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmhvcml6b250YWwpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBob3Jpem9udGFsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5maXR0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmaXR0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmhpZGRlbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhpZGRlblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc2VjdGlvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNlY3Rpb25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNsZWFyaW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2xlYXJpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmhlYWRlcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhlYWRlclwiO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgZGl2aWRlclwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9kaXZpZGVyL2luZGV4LnRzIiwiaW1wb3J0IHsgZGl2LCBWTm9kZSB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQge1NpemUsICBBdHRhY2htZW50LCAgRmxvYXQsIFRleHRBbGlnbm1lbnQsIENvbG9yfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50IH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgZ2V0U2NvcGV9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIEhlYWRlciB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGljb246IGJvb2xlYW47XG4gICAgZGl2aWRlcjogYm9vbGVhbjtcbiAgICBkaXZpZGluZzogYm9vbGVhbjtcbiAgICBibG9jazogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nO1xuICAgIGZsb2F0OiBGbG9hdCB8IHN0cmluZztcbiAgICB0ZXh0QWxpZ25tZW50OiBUZXh0QWxpZ25tZW50IHwgc3RyaW5nO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudE9iaiB7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBzdWJ0ZXh0OiBET01Db250ZW50O1xuICAgIGljb246IERPTUNvbnRlbnQ7XG4gIH1cblxuICBleHBvcnQgdHlwZSBIZWFkZXJBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iaj47XG4gIGV4cG9ydCB0eXBlIEhlYWRlclNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPjtcblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IEhlYWRlclNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgaGVhZGVyLCBcIi5oZWFkZXJcIiwgc2NvcGUpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogSGVhZGVyQXJncyB8IFBhcnRpYWw8UHJvcHM+IHwgRE9NQ29udGVudCwgYXJnMj86IERPTUNvbnRlbnQpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChoZWFkZXIsIGlzQXJncywgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRlcihhcmdzOiBIZWFkZXJBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IHsgbWFpbjogYXJncy5jb250ZW50IH0gOiBhcmdzLmNvbnRlbnQgOiB7IG1haW46IFtdIH07XG4gICAgbGV0IGNoaWxkcmVuID0gW10uY29uY2F0KFxuICAgICAgY29udGVudC5tYWluID8gY29udGVudC5tYWluIDogW10sXG4gICAgICBjb250ZW50LnN1YnRleHQgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwic3ViIGhlYWRlclwiIH0gfSwgY29udGVudC5zdWJ0ZXh0KSA6IFtdXG4gICAgKTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgY29udGVudC5pY29uXG4gICAgICA/IFtdLmNvbmNhdChjb250ZW50Lmljb24sIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJjb250ZW50XCIgfSB9LCBjaGlsZHJlbikpXG4gICAgICA6IGNoaWxkcmVuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLmljb24pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpY29uXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXZpZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpdmlkaW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXZpZGVyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGl2aWRlclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYmxvY2spIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBibG9ja1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmF0dGFjaG1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQXR0YWNobWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hdHRhY2htZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuZmxvYXQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gRmxvYXQuVG9DbGFzc25hbWUocHJvcHMuZmxvYXQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy50ZXh0QWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFRleHRBbGlnbm1lbnQuVG9DbGFzc25hbWUocHJvcHMudGV4dEFsaWdubWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIGhlYWRlclwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FyZ3Mob2JqKTogb2JqIGlzIEhlYWRlckFyZ3Mge1xuICAgIHJldHVybiAodHlwZW9mIChvYmopICE9PSBcInVuZGVmaW5lZFwiKSAmJiAoXG4gICAgICB0eXBlb2Yob2JqLnByb3BzKSAhPT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICAgaXNET01Db250ZW50KG9iai5jb250ZW50KSB8fCAoXG4gICAgICAgIHR5cGVvZiAob2JqLmNvbnRlbnQpICE9PSBcInVuZGVmaW5lZFwiICYmIChcbiAgICAgICAgICBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQubWFpbikgfHxcbiAgICAgICAgICBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQuaWNvbikgfHxcbiAgICAgICAgICBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQuc3VidGV4dClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9oZWFkZXIvaW5kZXgudHMiLCJpbXBvcnQgeyBWTm9kZSwgYSwgaW1nIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzLCBDb250ZW50T2JqIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTaXplLCBWZXJ0aWNhbEFsaWdubWVudCwgRmxvYXQgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJ1blByb3BzQW5kQ29udGVudCwgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgZ2V0U2NvcGV9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuZXhwb3J0IG5hbWVzcGFjZSBJbWFnZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGhyZWY6IHN0cmluZztcbiAgICBoaWRkZW46IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgYXZhdGFyOiBib29sZWFuO1xuICAgIGJvcmRlcmVkOiBib29sZWFuO1xuICAgIHNwYWNlZDogYm9vbGVhbjtcbiAgICBjaXJjdWxhcjogYm9vbGVhbjtcbiAgICByb3VuZGVkOiBib29sZWFuO1xuICAgIGZsb2F0OiBGbG9hdCB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICAgIGFsaWdubWVudDogVmVydGljYWxBbGlnbm1lbnQgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBJbWFnZUFyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBzdHJpbmcsIENvbnRlbnRPYmo8c3RyaW5nPj47XG4gIGV4cG9ydCB0eXBlIEltYWdlU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIHN0cmluZywgQ29udGVudE9iajxzdHJpbmc+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IEltYWdlU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBpbWFnZSwgXCIuaW1hZ2VcIiwgc2NvcGUpO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IEltYWdlQXJncyB8IFBhcnRpYWw8UHJvcHM+IHwgc3RyaW5nLCBhcmcyPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChpbWFnZSwgbWFrZUlzQXJncyhpc1VybCksIGlzVXJsLCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbWFnZShhcmdzOiBJbWFnZUFyZ3MpOiBWTm9kZSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzVXJsKGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFwiXCI7XG4gICAgbGV0IGltYWdlID0gaW1nKHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpLCBzcmM6IGNvbnRlbnQgfSB9KTtcbiAgICByZXR1cm4gcHJvcHMuaHJlZiA/IGEoeyBwcm9wczogeyBocmVmOiBwcm9wcy5ocmVmIH0gfSwgaW1hZ2UpIDogaW1hZ2U7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuaHJlZikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxpbmtcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmhpZGRlbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhpZGRlblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYXZhdGFyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYXZhdGFyXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5ib3JkZXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGJvcmRlcmVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zcGFjZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzcGFjZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNpcmN1bGFyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2lyY3VsYXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJvdW5kZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByb3VuZGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmZsb2F0KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEZsb2F0LlRvQ2xhc3NuYW1lKHByb3BzLmZsb2F0KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5hbGlnbm1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gVmVydGljYWxBbGlnbm1lbnQuVG9DbGFzc25hbWUocHJvcHMuYWxpZ25tZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZSArIFwiIGltYWdlXCI7XG4gIH1cblxuICBmdW5jdGlvbiBpc1VybChvYmopOiBvYmogaXMgc3RyaW5nIHtcbiAgICByZXR1cm4gdHlwZW9mIChvYmopID09PSBcInN0cmluZ1wiO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvaW1hZ2UvaW5kZXgudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9idXR0b25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbnRhaW5lclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGl2aWRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaGVhZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pY29uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbWFnZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGFiZWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpc3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xvYWRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VnbWVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3RlcHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RleHRib3hcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9pbmRleC50cyIsImltcG9ydCB7IFNpemUsIEF0dGFjaG1lbnQsIENvbG9yfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IFZOb2RlLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGFiZWwge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBjaXJjdWxhcjogYm9vbGVhbjtcbiAgICBlbXB0eTogYm9vbGVhbjtcbiAgICBwb2ludGluZzogYm9vbGVhbjtcbiAgICBsZWZ0UG9pbnRpbmc6IGJvb2xlYW47XG4gICAgcmlnaHRQb2ludGluZzogYm9vbGVhbjtcbiAgICBiYXNpYzogYm9vbGVhbjtcbiAgICBsZWZ0Q29ybmVyOiBib29sZWFuO1xuICAgIHJpZ2h0Q29ybmVyOiBib29sZWFuO1xuICAgIHRhZzogYm9vbGVhbjtcbiAgICByaWJib246IGJvb2xlYW47XG4gICAgcmlnaHRSaWJib246IGJvb2xlYW47XG4gICAgaG9yaXpvbnRhbDogYm9vbGVhbjtcbiAgICBmbG9hdGluZzogYm9vbGVhbjtcbiAgICBhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50T2JqIHtcbiAgICBtYWluOiBET01Db250ZW50O1xuICAgIGRldGFpbDogRE9NQ29udGVudDtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIExhYmVsQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+O1xuICBleHBvcnQgdHlwZSBMYWJlbFNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPjtcblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IExhYmVsU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBsYWJlbCwgXCIubGFiZWxcIiwgc2NvcGUpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogTGFiZWxBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50LCBhcmcyPzogRE9NQ29udGVudCkge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQobGFiZWwsIGlzQXJncywgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhYmVsKGFyZ3M6IExhYmVsQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyB7IG1haW46IGFyZ3MuY29udGVudCB9IDogYXJncy5jb250ZW50IDogeyBtYWluOiBbXSB9O1xuICAgIGxldCBjaGlsZHJlbiA9IFtdLmNvbmNhdChjb250ZW50Lm1haW4gPyBjb250ZW50Lm1haW4gOiBbXSwgY29udGVudC5kZXRhaWwgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiZGV0YWlsXCIgfSB9LCBjb250ZW50LmRldGFpbCkgOiBbXSk7XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIGNoaWxkcmVuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLmNpcmN1bGFyKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2lyY3VsYXJcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVtcHR5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZW1wdHlcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnBvaW50aW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcG9pbnRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmxlZnRQb2ludGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxlZnQgcG9pbnRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJpZ2h0UG9pbnRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByaWdodCBwb2ludGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuYmFzaWMpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBiYXNpY1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGVmdENvcm5lcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxlZnQgY29ybmVyXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yaWdodENvcm5lcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJpZ2h0IGNvcm5lclwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGFnKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdGFnXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yaWJib24pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByaWJib25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJpZ2h0UmliYm9uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmlnaHQgcmliYm9uXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5ob3Jpem9udGFsKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaG9yaXpvbnRhbFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZmxvYXRpbmcpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmbG9hdGluZ1wiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5hdHRhY2htZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEF0dGFjaG1lbnQuVG9DbGFzc25hbWUocHJvcHMuYXR0YWNobWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBjbGFzc05hbWUgKz0gXCIgbGFiZWxcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBcmdzKG9iaik6IG9iaiBpcyBMYWJlbEFyZ3Mge1xuICAgIHJldHVybiB0eXBlb2YgKG9iaikgIT09IFwidW5kZWZpbmVkXCIgJiYgKFxuICAgICAgdHlwZW9mIChvYmoucHJvcHMpICE9PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICB0eXBlb2YgKG9iai5jb250ZW50KSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoXG4gICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudCkgfHwgKFxuICAgICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudC5tYWluKSB8fCBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQuZGV0YWlsKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VsZW1lbnRzL2xhYmVsL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGUsIGEsIGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeyBTaXplLCAgVmVydGljYWxBbGlnbm1lbnQsIEZsb2F0IH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBDb250ZW50T2JqLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGlzdCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGJ1bGxldGVkOiBib29sZWFuO1xuICAgIG9yZGVyZWQ6IGJvb2xlYW47XG4gICAgaG9yaXpvbnRhbDogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBzZWxlY3Rpb246IGJvb2xlYW47XG4gICAgYW5pbWF0ZWQ6IGJvb2xlYW47XG4gICAgcmVsYXhlZDogYm9vbGVhbjtcbiAgICBkaXZpZGVkOiBib29sZWFuO1xuICAgIGNlbGxlZDogYm9vbGVhbjtcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICAgIGFsaWdubWVudDogVmVydGljYWxBbGlnbm1lbnQgfCBzdHJpbmc7XG4gICAgZmxvYXQ6IEZsb2F0IHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgTGlzdEl0ZW0ge1xuICAgIGxlZnQ6IERPTUNvbnRlbnQ7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBpY29uOiBET01Db250ZW50O1xuICAgIHJpZ2h0OiBET01Db250ZW50O1xuICAgIGhlYWRlcjogRE9NQ29udGVudDtcbiAgICBkZXNjcmlwdGlvbjogRE9NQ29udGVudDtcbiAgICBocmVmOiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBDb250ZW50ID0gQXJyYXk8UGFydGlhbDxMaXN0SXRlbT4+O1xuICBleHBvcnQgdHlwZSBMaXN0QXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIENvbnRlbnQsIENvbnRlbnRPYmo8Q29udGVudD4+O1xuICBleHBvcnQgdHlwZSBMaXN0U291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIENvbnRlbnQsIENvbnRlbnRPYmo8Q29udGVudD4+O1xuIFxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBMaXN0QXJncyB8IFBhcnRpYWw8UHJvcHM+IHwgQ29udGVudCwgYXJnMj86IENvbnRlbnQpIDogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQobGlzdCwgbWFrZUlzQXJncyhpc0NvbnRlbnQpLCBpc0NvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBMaXN0U291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBsaXN0LCBcIi5saXN0XCIsIHNjb3BlKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBsaXN0KGFyZ3M6IExpc3RBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0NvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sXG4gICAgICBjb250ZW50Lm1hcCgoe2hlYWRlciwgaWNvbiwgbWFpbiwgZGVzY3JpcHRpb24sIGhyZWYsIGxlZnQsIHJpZ2h0fSkgPT4ge1xuICAgICAgICBsZXQgbCA9IGxlZnQgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwibGVmdCBmbG9hdGVkIGNvbnRlbnRcIiB9IH0sIGxlZnQpIDogW107XG4gICAgICAgIGxldCByID0gcmlnaHQgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwicmlnaHQgZmxvYXRlZCBjb250ZW50XCIgfSB9LCByaWdodCkgOiBbXTtcbiAgICAgICAgbGV0IGggPSBoZWFkZXIgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiaGVhZGVyXCIgfSB9LCBoZWFkZXIpIDogW107XG4gICAgICAgIGxldCBkID0gZGVzY3JpcHRpb24gPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiZGVzY3JpcHRpb25cIiB9IH0sIGRlc2NyaXB0aW9uKSA6IFtdO1xuICAgICAgICBsZXQgaSA9IGljb24gPyBpY29uIDogW107XG4gICAgICAgIGxldCBjID0gKGhlYWRlciB8fCBkZXNjcmlwdGlvbikgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiY29udGVudFwiIH0gfSwgW10uY29uY2F0KGgsIGQsIG1haW4pKSA6IG1haW47XG4gICAgICAgIGxldCBjaGlsZHJlbiA9IFtdLmNvbmNhdChsLCBpLCBjLCByKTtcbiAgICAgICAgcmV0dXJuIGhyZWZcbiAgICAgICAgICA/IGEoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiaXRlbVwiLCBocmVmOiBocmVmIH0gfSwgY2hpbGRyZW4pXG4gICAgICAgICAgOiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiaXRlbVwiIH0gfSwgY2hpbGRyZW4pO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuYnVsbGV0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBidWxsZXRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMub3JkZXJlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIG9yZGVyZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmhvcml6b250YWwpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBob3Jpem9udGFsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zZWxlY3Rpb24pIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzZWxlY3Rpb25cIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmFuaW1hdGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYW5pbWF0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJlbGF4ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiByZWxheGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXZpZGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGl2aWRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2VsbGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2VsbGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnNpemUpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gU2l6ZS5Ub0NsYXNzbmFtZShwcm9wcy5zaXplKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYWxpZ25tZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFZlcnRpY2FsQWxpZ25tZW50LlRvQ2xhc3NuYW1lKHByb3BzLmFsaWdubWVudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmZsb2F0KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEZsb2F0LlRvQ2xhc3NuYW1lKHByb3BzLmZsb2F0KTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIGxpc3RcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDb250ZW50KG9iaik6IG9iaiBpcyBDb250ZW50IHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgQXJyYXk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9saXN0L2luZGV4LnRzIiwiaW1wb3J0IHhzLCB7IFN0cmVhbSB9IGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgaXNvbGF0ZSBmcm9tIFwiQGN5Y2xlL2lzb2xhdGVcIjtcbmltcG9ydCB7IFZOb2RlLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRGltbWVyIH0gZnJvbSBcIi4uLy4uL21vZHVsZXMvZGltbWVyXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIENvbXBvbmVudFNpbmtzLCBDb250ZW50T2JqIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBTaXplIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBjYXBpdGFsaXplLCBnZXRTY29wZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5cbmV4cG9ydCBuYW1lc3BhY2UgTG9hZGVyIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgdHlwZTogTG9hZGVyVHlwZSB8IHN0cmluZztcbiAgICBjZW50ZXJlZDogYm9vbGVhbjtcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgaW5kZXRlcm1pbmF0ZTogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICB0ZXh0OiBib29sZWFuO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBMb2FkZXJBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG5cbiAgZXhwb3J0IGludGVyZmFjZSBMb2FkZXJTb3VyY2VzIGV4dGVuZHMgQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj4ge1xuICAgIGFyZ3M/OiB7XG4gICAgICBlbGVtZW50JD86IFN0cmVhbTxWTm9kZT47XG4gICAgICBvbiQ/OiBTdHJlYW08Ym9vbGVhbj47XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IExvYWRlckFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChsb2FkZXIsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogTG9hZGVyU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBMb2FkZXJTb3VyY2VzKSB7XG4gICAgICBzb3VyY2VzLnByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7IHR5cGU6IExvYWRlclR5cGUuUGFnZSB9KTtcbiAgICAgIHNvdXJjZXMuY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JCA6IHhzLm9mKHVuZGVmaW5lZCk7XG5cbiAgICAgIGNvbnN0IG9uJCA9IHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3Mub24kID8gc291cmNlcy5hcmdzLm9uJCA6IHhzLm9mKHRydWUpO1xuICAgICAgY29uc3QgcHJvcHMkID0gc291cmNlcy5wcm9wcyQucmVtZW1iZXIoKTtcbiAgICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBzb3VyY2VzLmNvbnRlbnQkKVxuICAgICAgICAubWFwKChbcHJvcHMsIGNvbnRlbnRdKSA9PiBsb2FkZXIoeyBwcm9wcywgY29udGVudCB9KVxuICAgICAgICApO1xuICAgICAgY29uc3QgdGFyZ2V0JCA9IHByb3BzJC5tYXAocHJvcHMgPT4gcHJvcHMudHlwZSA9PT0gTG9hZGVyVHlwZS5QYWdlID8geHMub2YoXCJwYWdlXCIpIDogc291cmNlcy5hcmdzLmVsZW1lbnQkKS5mbGF0dGVuPFZOb2RlIHwgc3RyaW5nPigpO1xuICAgICAgY29uc3QgZGltbWVyID0gRGltbWVyLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHByb3BzJDogcHJvcHMkLm1hcChwcm9wcyA9PiAoeyBpbnZlcnRlZDogcHJvcHMuaW52ZXJ0ZWQgfSkpLFxuICAgICAgICBjb250ZW50JDogdlRyZWUkLm1hcCh2ID0+IFt2XSksXG4gICAgICAgIGFyZ3M6IHsgb24kLCB0YXJnZXQkIH1cbiAgICAgIH0sIHNjb3BlKTtcbiAgICAgIGNvbnN0IHJlc3VsdCQgPSBwcm9wcyQubWFwKFxuICAgICAgICBwcm9wcyA9PiBwcm9wcy50eXBlID09PSBMb2FkZXJUeXBlLklubGluZSA/IHZUcmVlJCA6IGRpbW1lci5ET01cbiAgICAgICkuZmxhdHRlbigpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgRE9NOiByZXN1bHQkLFxuICAgICAgICBldmVudHM6ICh0eXBlKSA9PiB4cy5tZXJnZShzb3VyY2VzLkRPTS5zZWxlY3QoXCIubG9hZGVyXCIpLmV2ZW50cyh0eXBlKSwgZGltbWVyLmV2ZW50cyh0eXBlKSlcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChzY29wZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG1haW4oc291cmNlcyk7XG4gICAgfVxuICAgIGNvbnN0IGlzb2xhdGVkTWFpbiA9IGlzb2xhdGUobWFpbiwgc2NvcGUpO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkZXIoYXJnczogTG9hZGVyQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBjb250ZW50KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5hY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBhY3RpdmVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNlbnRlcmVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2VudGVyZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbmRldGVybWluYXRlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy50ZXh0KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdGV4dFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBMb2FkZXJUeXBlLlRvQ2xhc3NuYW1lKHR5cGVvZiAocHJvcHMudHlwZSkgIT09IFwidW5kZWZpbmVkXCIgPyBwcm9wcy50eXBlIDogTG9hZGVyVHlwZS5QYWdlKTtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgZXhwb3J0IGVudW0gTG9hZGVyVHlwZSB7XG4gICAgSW5saW5lLCBQYWdlLCBDb250ZW50XG4gIH1cbiAgZXhwb3J0IG5hbWVzcGFjZSBMb2FkZXJUeXBlIHtcbiAgICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKGF0dGFjaG1lbnRzdHJpbmc6IExvYWRlclR5cGUgfCBzdHJpbmcpOiBMb2FkZXJUeXBlIHtcbiAgICAgIHJldHVybiB0eXBlb2YgKGF0dGFjaG1lbnRzdHJpbmcpID09PSBcIm51bWJlclwiXG4gICAgICAgID8gYXR0YWNobWVudHN0cmluZ1xuICAgICAgICA6IExvYWRlclR5cGVbY2FwaXRhbGl6ZShhdHRhY2htZW50c3RyaW5nKV07XG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZSh0eXBlOiBMb2FkZXJUeXBlIHwgc3RyaW5nKSB7XG4gICAgICB0eXBlID0gTG9hZGVyVHlwZS5Ub0VudW0odHlwZSk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBMb2FkZXJUeXBlLklubGluZTogcmV0dXJuIFwiIGlubGluZSBsb2FkZXJcIjtcbiAgICAgICAgY2FzZSBMb2FkZXJUeXBlLlBhZ2U6IHJldHVybiBcIiBsb2FkZXJcIjtcbiAgICAgICAgY2FzZSBMb2FkZXJUeXBlLkNvbnRlbnQ6IHJldHVybiBcIiBsb2FkZXJcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy9sb2FkZXIvaW5kZXgudHMiLCJpbXBvcnQgeyBWTm9kZSwgZGl2IH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgU3R5bGVBbmRDb250ZW50QXJncywgQ29udGVudE9iaiwgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbG9yLCBBdHRhY2htZW50LCBGbG9hdCwgVGV4dEFsaWdubWVudCB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgcmVuZGVyUHJvcHNBbmRDb250ZW50LCBydW5Qcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgU2VnbWVudCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIHJhaXNlZDogYm9vbGVhbjtcbiAgICBzdGFja2VkOiBib29sZWFuO1xuICAgIHRhbGxTdGFja2VkOiBib29sZWFuO1xuICAgIHBpbGVkOiBib29sZWFuO1xuICAgIHZlcnRpY2FsOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgaW52ZXJ0ZWQ6IGJvb2xlYW47XG4gICAgcGFkZGVkOiBib29sZWFuO1xuICAgIHZlcnlQYWRkZWQ6IGJvb2xlYW47XG4gICAgY29tcGFjdDogYm9vbGVhbjtcbiAgICBjaXJjdWxhcjogYm9vbGVhbjtcbiAgICBjbGVhcmluZzogYm9vbGVhbjtcbiAgICBiYXNpYzogYm9vbGVhbjtcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gICAgYXR0YWNobWVudDogQXR0YWNobWVudCB8IHN0cmluZztcbiAgICBmbG9hdDogRmxvYXQgfCBzdHJpbmc7XG4gICAgdGV4dEFsaWdubWVudDogVGV4dEFsaWdubWVudCB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFNlZ21lbnRBcmdzID0gU3R5bGVBbmRDb250ZW50QXJnczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG4gIGV4cG9ydCB0eXBlIFNlZ21lbnRTb3VyY2VzID0gQ29tcG9uZW50U291cmNlczxQcm9wcywgRE9NQ29udGVudCwgQ29udGVudE9iajxET01Db250ZW50Pj47XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihhcmcxPzogU2VnbWVudEFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KTogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoc2VnbWVudCwgbWFrZUlzQXJncyhpc0RPTUNvbnRlbnQpLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBTZWdtZW50U291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgcmV0dXJuIHJ1blByb3BzQW5kQ29udGVudChzb3VyY2VzLCBzZWdtZW50LCBcIi5zZWdtZW50XCIsIHNjb3BlKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc2VnbWVudChhcmdzOiBTZWdtZW50QXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIHJldHVybiBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBjb250ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLnJhaXNlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJhaXNlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc3RhY2tlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHN0YWNrZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRhbGxTdGFja2VkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdGFsbCBzdGFja2VkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5waWxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHBpbGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sb2FkaW5nKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgbG9hZGluZ1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMucGFkZGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcGFkZGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ5UGFkZGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgdmVyeSBwYWRkZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNvbXBhY3QpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBjb21wYWN0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jaXJjdWxhcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNpcmN1bGFyXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jbGVhcmluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGNsZWFyaW5nXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5iYXNpYykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGJhc2ljXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuYXR0YWNobWVudCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBBdHRhY2htZW50LlRvQ2xhc3NuYW1lKHByb3BzLmF0dGFjaG1lbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5mbG9hdCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBGbG9hdC5Ub0NsYXNzbmFtZShwcm9wcy5mbG9hdCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLnRleHRBbGlnbm1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gVGV4dEFsaWdubWVudC5Ub0NsYXNzbmFtZShwcm9wcy50ZXh0QWxpZ25tZW50KTtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIHNlZ21lbnRcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvZWxlbWVudHMvc2VnbWVudC9pbmRleC50cyIsImltcG9ydCB7IFZOb2RlLCBkaXYsIGEgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgQ29udGVudE9iaiwgU3R5bGVBbmRDb250ZW50QXJncywgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IFNpemUsICBBdHRhY2htZW50fSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IG51bVRvVGV4dCwgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFN0ZXBzIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgdmVydGljYWw6IGJvb2xlYW47XG4gICAgc3RhY2thYmxlOiBib29sZWFuO1xuICAgIGVxdWFsV2lkdGg6IGJvb2xlYW47XG4gICAgZmx1aWQ6IGJvb2xlYW47XG4gICAgc2l6ZTogU2l6ZSB8IHN0cmluZztcbiAgICBhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nO1xuICB9XG4gIGV4cG9ydCB0eXBlIENvbnRlbnQgPSBBcnJheTxQYXJ0aWFsPFN0ZXBJdGVtPj47XG4gIGV4cG9ydCBpbnRlcmZhY2UgU3RlcEl0ZW0ge1xuICAgIGljb246IERPTUNvbnRlbnQ7XG4gICAgaGVhZGVyOiBET01Db250ZW50O1xuICAgIGRlc2NyaXB0aW9uOiBET01Db250ZW50O1xuICAgIGNvbXBsZXRlZDogYm9vbGVhbjtcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbGluazogYm9vbGVhbjtcbiAgICBocmVmOiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBTdGVwQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIENvbnRlbnQsIENvbnRlbnRPYmo8Q29udGVudD4+O1xuICBleHBvcnQgdHlwZSBTdGVwU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIENvbnRlbnQsIENvbnRlbnRPYmo8Q29udGVudD4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFN0ZXBBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBDb250ZW50LCBhcmcyPzogQ29udGVudCkge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoc3RlcHMsIG1ha2VJc0FyZ3MoaXNDb250ZW50KSwgaXNDb250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogU3RlcFNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgc3RlcHMsIFwiLnN0ZXBzXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXBzKGFyZ3M6IFN0ZXBBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0NvbnRlbnQoYXJncy5jb250ZW50KSA/IGFyZ3MuY29udGVudCA6IGFyZ3MuY29udGVudC5tYWluIDogW107XG4gICAgcmV0dXJuIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzLCBjb250ZW50Lmxlbmd0aCkgfSB9LCBjb250ZW50Lm1hcChzdGVwSXRlbSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcEl0ZW0oaXRlbTogU3RlcEl0ZW0sIGk6IG51bWJlcik6IFZOb2RlIHtcbiAgICBsZXQgaWNvbiA9IGl0ZW0uaWNvbiA/IGl0ZW0uaWNvbiA6IFtdO1xuICAgIGxldCBoZWFkZXIgPSBpdGVtLmhlYWRlciA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJ0aXRsZVwiIH0gfSwgaXRlbS5oZWFkZXIpIDogW107XG4gICAgbGV0IGRlc2NyaXB0aW9uID0gaXRlbS5kZXNjcmlwdGlvbiA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJkZXNjcmlwdGlvblwiIH0gfSwgaXRlbS5kZXNjcmlwdGlvbikgOiBbXTtcbiAgICBsZXQgY29udGVudCA9IFtdLmNvbmNhdChoZWFkZXIsIGRlc2NyaXB0aW9uKTtcbiAgICBsZXQgY2hpbGRyZW4gPSBbXS5jb25jYXQoaWNvbiwgY29udGVudC5sZW5ndGggPiAwID8gW2Rpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJjb250ZW50XCIgfX0sIGNvbnRlbnQpXSA6IFtdKTtcbiAgICByZXR1cm4gaXRlbS5ocmVmIFxuICAgICAgPyBhKHtwcm9wczogeyBpZDogaSwgY2xhc3NOYW1lOiBnZXRTdGVwQ2xhc3NuYW1lKGl0ZW0pLCBocmVmOiBpdGVtLmhyZWZ9fSwgY2hpbGRyZW4pXG4gICAgICA6IGRpdih7cHJvcHM6IHsgaWQ6IGksIGNsYXNzTmFtZTogZ2V0U3RlcENsYXNzbmFtZShpdGVtKX19LCBjaGlsZHJlbik7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4sIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnRpY2FsXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zdGFja2FibGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBzdGFja2FibGVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmZsdWlkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZmx1aWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVxdWFsV2lkdGgpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBudW1Ub1RleHQobGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5hdHRhY2htZW50KSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IEF0dGFjaG1lbnQuVG9DbGFzc25hbWUocHJvcHMuYXR0YWNobWVudCk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBzdGVwc1wiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdGVwQ2xhc3NuYW1lKGl0ZW06IFN0ZXBJdGVtKSA6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwiXCI7XG4gICAgaWYgKGl0ZW0uYWN0aXZlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCJhY3RpdmVcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0uY29tcGxldGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY29tcGxldGVkXCI7XG4gICAgfVxuICAgIGlmIChpdGVtLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKGl0ZW0ubGluaykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxpbmtcIjtcbiAgICB9XG4gICAgY2xhc3NOYW1lICs9IFwiIHN0ZXBcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG4gIGZ1bmN0aW9uIGlzQ29udGVudChvYmopIDogb2JqIGlzIENvbnRlbnQge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2VsZW1lbnRzL3N0ZXBzL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGUsIGRpdiwgaW5wdXQsIHRleHRhcmVhIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IHhzIGZyb20gXCJ4c3RyZWFtXCI7XG5pbXBvcnQgeyBET01Db250ZW50LCBpc0RPTUNvbnRlbnQsIENvbnRlbnRPYmosIFN0eWxlQW5kQ29udGVudEFyZ3MsIENvbXBvbmVudFNvdXJjZXMsIFZhbHVlQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IENvbG9yLCBTaXplIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgVGV4dGJveCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBpY29uOiBib29sZWFuO1xuICAgIGxhYmVsZWQ6IGJvb2xlYW47XG4gICAgYWN0aW9uOiBib29sZWFuO1xuICAgIGxlZnRDb250ZW50OiBib29sZWFuO1xuICAgIHJpZ2h0Q29udGVudDogYm9vbGVhbjtcbiAgICB0cmFuc3BhcmVudDogYm9vbGVhbjtcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgICBmb2N1czogYm9vbGVhbjtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIHJvd3M6IG51bWJlcjtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgY29sb3I6IENvbG9yIHwgc3RyaW5nO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBUZXh0Ym94QXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBUZXh0Ym94U291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFRleHRib3hBcmdzIHwgUGFydGlhbDxQcm9wcz4gfCBET01Db250ZW50LCBhcmcyPzogRE9NQ29udGVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KHRleHRib3gsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogVGV4dGJveFNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogVmFsdWVDb21wb25lbnRTaW5rczxzdHJpbmc+IHtcbiAgICBmdW5jdGlvbiBtYWluKHNvdXJjZXM6IFRleHRib3hTb3VyY2VzKSB7XG4gICAgICBzb3VyY2VzLnByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7fSk7XG4gICAgICBzb3VyY2VzLmNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQgOiB4cy5vZihbXSk7XG5cbiAgICAgIGNvbnN0IGV2dCA9ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIuaW5wdXRcIikuZXZlbnRzKHR5cGUpO1xuICAgICAgY29uc3QgcHJvcHMkID0gc291cmNlcy5wcm9wcyQucmVtZW1iZXIoKTtcbiAgICAgIGNvbnN0IHZhbHVlJCA9IGV2dChcImlucHV0XCIpLm1hcChldiA9PiAoZXYudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKTtcbiAgICAgIGNvbnN0IHZ0cmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBzb3VyY2VzLmNvbnRlbnQkKS5tYXAoXG4gICAgICAgIChbcHJvcHMsIGNvbnRlbnRdKSA9PiB0ZXh0Ym94KHsgcHJvcHMsIGNvbnRlbnQgfSlcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogdnRyZWUkLFxuICAgICAgICBldmVudHM6IGV2dCxcbiAgICAgICAgdmFsdWUkXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoc2NvcGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtYWluKHNvdXJjZXMpO1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGV4dGJveChhcmdzOiBUZXh0Ym94QXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHt9O1xuICAgIGxldCBjb250ZW50ID0gYXJncy5jb250ZW50ID8gaXNET01Db250ZW50KGFyZ3MuY29udGVudCkgPyBhcmdzLmNvbnRlbnQgOiBhcmdzLmNvbnRlbnQubWFpbiA6IFtdO1xuICAgIGxldCB0ZXh0Ym94ID0gcHJvcHMucm93c1xuICAgICAgPyB0ZXh0YXJlYSh7IGF0dHJzOiB7IHJvd3M6IHByb3BzLnJvd3MsIHJlYWRvbmx5OiBwcm9wcy5yZWFkb25seSwgcGxhY2Vob2xkZXI6IHByb3BzLnBsYWNlaG9sZGVyIH0sIHByb3BzOiB7IHZhbHVlOiBwcm9wcy52YWx1ZSB9IH0pXG4gICAgICA6IGlucHV0KHsgYXR0cnM6IHsgcmVhZG9ubHk6IHByb3BzLnJlYWRvbmx5LCB0eXBlOiBwcm9wcy50eXBlID8gcHJvcHMudHlwZSA6IFwidGV4dFwiLCBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXIgfSwgcHJvcHM6IHsgdmFsdWU6IHByb3BzLnZhbHVlIH0gfSk7XG4gICAgcmV0dXJuIHByb3BzLnJpZ2h0Q29udGVudFxuICAgICAgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzbmFtZShwcm9wcykgfSB9LCBbXS5jb25jYXQodGV4dGJveCwgY29udGVudCkpXG4gICAgICA6IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9IH0sIFtdLmNvbmNhdChjb250ZW50LCB0ZXh0Ym94KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc25hbWUocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NOYW1lID0gXCJ1aVwiO1xuICAgIGlmIChwcm9wcy5sZWZ0Q29udGVudCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxlZnRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnJpZ2h0Q29udGVudCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJpZ2h0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pY29uKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaWNvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubGFiZWxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxhYmVsZWRcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmFjdGlvbikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGFjdGlvblwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMudHJhbnNwYXJlbnQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0cmFuc3BhcmVudFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBpbnZlcnRlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZm9jdXMpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBmb2N1c1wiO1xuICAgIH1cbiAgICBpZiAocHJvcHMubG9hZGluZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGxvYWRpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRpc2FibGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuY29sb3IpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQ29sb3IuVG9DbGFzc25hbWUocHJvcHMuY29sb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5zaXplKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IFNpemUuVG9DbGFzc25hbWUocHJvcHMuc2l6ZSk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBpbnB1dFwiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbGVtZW50cy90ZXh0Ym94L2luZGV4LnRzIiwiZXhwb3J0IG5hbWVzcGFjZSBJY29uVHlwZSB7XG4gIGV4cG9ydCBmdW5jdGlvbiBUb0NsYXNzbmFtZSh0eXBlOiBJY29uVHlwZSB8IHN0cmluZykge1xuICAgIGlmICh0eXBlb2YodHlwZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBcIiBcIiArIHR5cGU7XG4gICAgfVxuICAgIGlmICh0eXBlIDwgMClcbiAgICB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgbGV0IG5hbWUgPSBJY29uVHlwZVt0eXBlXTtcbiAgICByZXR1cm4gXCIgXCIgKyBuYW1lLm1hdGNoKC9bQS1aXVthLXpdKy9nKS5qb2luKFwiIFwiKS50b0xvd2VyQ2FzZSgpO1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIEljb25UeXBlIHtcbiAgU2VhcmNoLFxuICBNYWlsT3V0bGluZSxcbiAgRXh0ZXJuYWwsXG4gIFNpZ25hbCxcbiAgU2V0dGluZyxcbiAgSG9tZSxcbiAgSW5ib3gsXG4gIEJyb3dzZXIsXG4gIFRhZyxcbiAgVGFncyxcbiAgQ2FsZW5kYXIsXG4gIENvbW1lbnQsXG4gIENvbW1lbnRzLFxuICBTaG9wLFxuICBQcml2YWN5LFxuICBTZXR0aW5ncyxcbiAgVHJvcGh5LFxuICBQYXltZW50LFxuICBGZWVkLFxuICBBbGFybU91dGxpbmUsXG4gIFRhc2tzLFxuICBDbG91ZCxcbiAgTGFiLFxuICBNYWlsLFxuICBJZGVhLFxuICBEYXNoYm9hcmQsXG4gIFNpdGVtYXAsXG4gIEFsYXJtLFxuICBUZXJtaW5hbCxcbiAgQ29kZSxcbiAgUHJvdGVjdCxcbiAgQ2FsZW5kYXJPdXRsaW5lLFxuICBUaWNrZXQsXG4gIEV4dGVybmFsU3F1YXJlLFxuICBNYXAsXG4gIEJ1ZyxcbiAgTWFpbFNxdWFyZSxcbiAgSGlzdG9yeSxcbiAgT3B0aW9ucyxcbiAgQ29tbWVudE91dGxpbmUsXG4gIENvbW1lbnRzT3V0bGluZSxcbiAgVGV4dFRlbGVwaG9uZSxcbiAgRmluZCxcbiAgV2lmaSxcbiAgQWxhcm1TbGFzaCxcbiAgQWxhcm1TbGFzaE91dGxpbmUsXG4gIENvcHlyaWdodCxcbiAgQXQsXG4gIEV5ZWRyb3BwZXIsXG4gIFBhaW50QnJ1c2gsXG4gIEhlYXJ0YmVhdCxcbiAgRG93bmxvYWQsXG4gIFJlcGVhdCxcbiAgUmVmcmVzaCxcbiAgTG9jayxcbiAgQm9va21hcmssXG4gIFByaW50LFxuICBXcml0ZSxcbiAgVGhlbWUsXG4gIEFkanVzdCxcbiAgRWRpdCxcbiAgRXh0ZXJuYWxTaGFyZSxcbiAgQmFuLFxuICBNYWlsRm9yd2FyZCxcbiAgU2hhcmUsXG4gIEV4cGFuZCxcbiAgQ29tcHJlc3MsXG4gIFVuaGlkZSxcbiAgSGlkZSxcbiAgUmFuZG9tLFxuICBSZXR3ZWV0LFxuICBTaWduT3V0LFxuICBQaW4sXG4gIFNpZ25JbixcbiAgVXBsb2FkLFxuICBDYWxsLFxuICBDYWxsU3F1YXJlLFxuICBSZW1vdmVCb29rbWFyayxcbiAgVW5sb2NrLFxuICBDb25maWd1cmUsXG4gIEZpbHRlcixcbiAgV2l6YXJkLFxuICBVbmRvLFxuICBFeGNoYW5nZSxcbiAgQ2xvdWREb3dubG9hZCxcbiAgQ2xvdWRVcGxvYWQsXG4gIFJlcGx5LFxuICBSZXBseUFsbCxcbiAgRXJhc2UsXG4gIFVubG9ja0FsdGVybmF0ZSxcbiAgQXJjaGl2ZSxcbiAgVHJhbnNsYXRlLFxuICBSZWN5Y2xlLFxuICBTZW5kLFxuICBTZW5kT3V0bGluZSxcbiAgU2hhcmVBbHRlcm5hdGUsXG4gIFNoYXJlQWx0ZXJuYXRlU3F1YXJlLFxuICBXYWl0LFxuICBXcml0ZVNxdWFyZSxcbiAgU2hhcmVTcXVhcmUsXG4gIEFkZFRvQ2FydCxcbiAgSW5DYXJ0LFxuICBBZGRVc2VyLFxuICBSZW1vdmVVc2VyLFxuICBIZWxwQ2lyY2xlLFxuICBJbmZvQ2lyY2xlLFxuICBXYXJuaW5nLFxuICBXYXJuaW5nQ2lyY2xlLFxuICBXYXJuaW5nU2lnbixcbiAgSGVscCxcbiAgSW5mbyxcbiAgQW5ub3VuY2VtZW50LFxuICBCaXJ0aGRheSxcbiAgVXNlcnMsXG4gIERvY3RvcixcbiAgQ2hpbGQsXG4gIFVzZXIsXG4gIEhhbmRpY2FwLFxuICBTdHVkZW50LFxuICBTcHksXG4gIEdyaWRMYXlvdXQsXG4gIExpc3RMYXlvdXQsXG4gIEJsb2NrTGF5b3V0LFxuICBab29tLFxuICBab29tT3V0LFxuICBSZXNpemVWZXJ0aWNhbCxcbiAgUmVzaXplSG9yaXpvbnRhbCxcbiAgTWF4aW1pemUsXG4gIENyb3AsXG4gIEZlbWFsZSxcbiAgTWFsZSxcbiAgV29tYW4sXG4gIE1hbixcbiAgTm9uQmluYXJ5VHJhbnNnZW5kZXIsXG4gIEludGVyZ2VuZGVyLFxuICBUcmFuc2dlbmRlcixcbiAgTGVzYmlhbixcbiAgR2F5LFxuICBIZXRlcm9zZXh1YWwsXG4gIE90aGVyR2VuZGVyLFxuICBPdGhlckdlbmRlclZlcnRpY2FsLFxuICBPdGhlckdlbmRlckhvcml6b250YWwsXG4gIE5ldXRlcixcbiAgQ29ja3RhaWwsXG4gIFJvYWQsXG4gIEZsYWcsXG4gIEJvb2ssXG4gIEdpZnQsXG4gIExlYWYsXG4gIEZpcmUsXG4gIFBsYW5lLFxuICBNYWduZXQsXG4gIExlZ2FsLFxuICBMZW1vbixcbiAgV29ybGQsXG4gIFRyYXZlbCxcbiAgU2hpcHBpbmcsXG4gIE1vbmV5LFxuICBMaWdodG5pbmcsXG4gIFJhaW4sXG4gIFRyZWF0bWVudCxcbiAgU3VpdGNhc2UsXG4gIEJhcixcbiAgRmxhZ091dGxpbmUsXG4gIEZsYWdDaGVja2VyZWQsXG4gIFB1enpsZSxcbiAgRmlyZUV4dGluZ3Vpc2hlcixcbiAgUm9ja2V0LFxuICBBbmNob3IsXG4gIEJ1bGxzZXllLFxuICBTdW4sXG4gIE1vb24sXG4gIEZheCxcbiAgTGlmZVJpbmcsXG4gIEJvbWIsXG4gIFNvY2NlcixcbiAgQ2FsY3VsYXRvcixcbiAgRGlhbW9uZCxcbiAgQ3Jvc3NoYWlycyxcbiAgQXN0ZXJpc2ssXG4gIENlcnRpZmljYXRlLFxuICBDaXJjbGUsXG4gIFF1b3RlTGVmdCxcbiAgUXVvdGVSaWdodCxcbiAgRWxsaXBzaXNIb3Jpem9udGFsLFxuICBFbGxpcHNpc1ZlcnRpY2FsLFxuICBDdWJlLFxuICBDdWJlcyxcbiAgQ2lyY2xlTm90Y2hlZCxcbiAgQ2lyY2xlVGhpbixcbiAgU3F1YXJlT3V0bGluZSxcbiAgU3F1YXJlLFxuICBDaGVja21hcmssXG4gIFJlbW92ZSxcbiAgQ2hlY2ttYXJrQm94LFxuICBNb3ZlLFxuICBBZGRDaXJjbGUsXG4gIE1pbnVzQ2lyY2xlLFxuICBSZW1vdmVDaXJjbGUsXG4gIENoZWNrQ2lyY2xlLFxuICBSZW1vdmVDaXJjbGVPdXRsaW5lLFxuICBDaGVja0NpcmNsZU91dGxpbmUsXG4gIFBsdXMsXG4gIE1pbnVzLFxuICBBZGRTcXVhcmUsXG4gIFJhZGlvLFxuICBTZWxlY3RlZFJhZGlvLFxuICBNaW51c1NxdWFyZSxcbiAgTWludXNTcXVhcmVPdXRsaW5lLFxuICBDaGVja1NxdWFyZSxcbiAgUGx1c1NxdWFyZU91dGxpbmUsXG4gIFRvZ2dsZU9mZixcbiAgVG9nZ2xlT24sXG4gIEZpbG0sXG4gIFNvdW5kLFxuICBQaG90byxcbiAgQmFyQ2hhcnQsXG4gIENhbWVyYVJldHJvLFxuICBOZXdzcGFwZXIsXG4gIEFyZWFDaGFydCxcbiAgUGllQ2hhcnQsXG4gIExpbmVDaGFydCxcbiAgQXJyb3dDaXJjbGVPdXRsaW5lRG93bixcbiAgQXJyb3dDaXJjbGVPdXRsaW5lVXAsXG4gIENoZXZyb25MZWZ0LFxuICBDaGV2cm9uUmlnaHQsXG4gIEFycm93TGVmdCxcbiAgQXJyb3dSaWdodCxcbiAgQXJyb3dVcCxcbiAgQXJyb3dEb3duLFxuICBDaGV2cm9uVXAsXG4gIENoZXZyb25Eb3duLFxuICBQb2ludGluZ1JpZ2h0LFxuICBQb2ludGluZ0xlZnQsXG4gIFBvaW50aW5nVXAsXG4gIFBvaW50aW5nRG93bixcbiAgQXJyb3dDaXJjbGVMZWZ0LFxuICBBcnJvd0NpcmNsZVJpZ2h0LFxuICBBcnJvd0NpcmNsZVVwLFxuICBBcnJvd0NpcmNsZURvd24sXG4gIENhcmV0RG93bixcbiAgQ2FyZXRVcCxcbiAgQ2FyZXRMZWZ0LFxuICBDYXJldFJpZ2h0LFxuICBBbmdsZURvdWJsZUxlZnQsXG4gIEFuZ2xlRG91YmxlUmlnaHQsXG4gIEFuZ2xlRG91YmxlVXAsXG4gIEFuZ2xlRG91YmxlRG93bixcbiAgQW5nbGVMZWZ0LFxuICBBbmdsZVJpZ2h0LFxuICBBbmdsZVVwLFxuICBBbmdsZURvd24sXG4gIENoZXZyb25DaXJjbGVMZWZ0LFxuICBDaGV2cm9uQ2lyY2xlUmlnaHQsXG4gIENoZXZyb25DaXJjbGVVcCxcbiAgQ2hldnJvbkNpcmNsZURvd24sXG4gIFRvZ2dsZURvd24sXG4gIFRvZ2dsZVVwLFxuICBUb2dnbGVSaWdodCxcbiAgTG9uZ0Fycm93RG93bixcbiAgTG9uZ0Fycm93VXAsXG4gIExvbmdBcnJvd0xlZnQsXG4gIExvbmdBcnJvd1JpZ2h0LFxuICBBcnJvd0NpcmNsZU91dGxpbmVSaWdodCxcbiAgQXJyb3dDaXJjbGVPdXRsaW5lTGVmdCxcbiAgVG9nZ2xlTGVmdCxcbiAgUG93ZXIsXG4gIFRyYXNoLFxuICBUcmFzaE91dGxpbmUsXG4gIERpc2tPdXRsaW5lLFxuICBEZXNrdG9wLFxuICBMYXB0b3AsXG4gIFRhYmxldCxcbiAgTW9iaWxlLFxuICBHYW1lLFxuICBLZXlib2FyZCxcbiAgUGx1ZyxcbiAgRm9sZGVyLFxuICBGb2xkZXJPcGVuLFxuICBMZXZlbFVwLFxuICBMZXZlbERvd24sXG4gIEZpbGUsXG4gIEZpbGVPdXRsaW5lLFxuICBGaWxlVGV4dCxcbiAgRmlsZVRleHRPdXRsaW5lLFxuICBGb2xkZXJPdXRsaW5lLFxuICBGb2xkZXJPcGVuT3V0bGluZSxcbiAgRmlsZVBkZk91dGxpbmUsXG4gIEZpbGVXb3JkT3V0bGluZSxcbiAgRmlsZUV4Y2VsT3V0bGluZSxcbiAgRmlsZVBvd2VycG9pbnRPdXRsaW5lLFxuICBGaWxlSW1hZ2VPdXRsaW5lLFxuICBGaWxlQXJjaGl2ZU91dGxpbmUsXG4gIEZpbGVBdWRpb091dGxpbmUsXG4gIEZpbGVWaWRlb091dGxpbmUsXG4gIEZpbGVDb2RlT3V0bGluZSxcbiAgQmFyY29kZSxcbiAgUXJjb2RlLFxuICBGb3JrLFxuICBIdG1sNSxcbiAgQ3NzMyxcbiAgUnNzLFxuICBSc3NTcXVhcmUsXG4gIE9wZW5pZCxcbiAgRGF0YWJhc2UsXG4gIFNlcnZlcixcbiAgSGVhcnQsXG4gIFN0YXIsXG4gIEVtcHR5U3RhcixcbiAgVGh1bWJzT3V0bGluZVVwLFxuICBUaHVtYnNPdXRsaW5lRG93bixcbiAgU3RhckhhbGYsXG4gIEVtcHR5SGVhcnQsXG4gIFNtaWxlLFxuICBGcm93bixcbiAgTWVoLFxuICBTdGFySGFsZkVtcHR5LFxuICBUaHVtYnNVcCxcbiAgVGh1bWJzRG93bixcbiAgTXVzaWMsXG4gIFZpZGVvUGxheU91dGxpbmUsXG4gIFZvbHVtZU9mZixcbiAgVm9sdW1lRG93bixcbiAgVm9sdW1lVXAsXG4gIFJlY29yZCxcbiAgU3RlcEJhY2t3YXJkLFxuICBGYXN0QmFja3dhcmQsXG4gIEJhY2t3YXJkLFxuICBQbGF5LFxuICBQYXVzZSxcbiAgU3RvcCxcbiAgRm9yd2FyZCxcbiAgRmFzdEZvcndhcmQsXG4gIFN0ZXBGb3J3YXJkLFxuICBFamVjdCxcbiAgVW5tdXRlLFxuICBNdXRlLFxuICBWaWRlb1BsYXksXG4gIENsb3NlZENhcHRpb25pbmcsXG4gIE1hcmtlcixcbiAgQ29mZmVlLFxuICBGb29kLFxuICBCdWlsZGluZ091dGxpbmUsXG4gIEhvc3BpdGFsLFxuICBFbWVyZ2VuY3ksXG4gIEZpcnN0QWlkLFxuICBNaWxpdGFyeSxcbiAgSCxcbiAgTG9jYXRpb25BcnJvdyxcbiAgU3BhY2VTaHV0dGxlLFxuICBVbml2ZXJzaXR5LFxuICBCdWlsZGluZyxcbiAgUGF3LFxuICBTcG9vbixcbiAgQ2FyLFxuICBUYXhpLFxuICBUcmVlLFxuICBCaWN5Y2xlLFxuICBCdXMsXG4gIFNoaXAsXG4gIE1vdG9yY3ljbGUsXG4gIFN0cmVldFZpZXcsXG4gIEhvdGVsLFxuICBUcmFpbixcbiAgU3Vid2F5LFxuICBUYWJsZSxcbiAgQ29sdW1ucyxcbiAgU29ydCxcbiAgU29ydEFzY2VuZGluZyxcbiAgU29ydERlc2NlbmRpbmcsXG4gIFNvcnRBbHBoYWJldEFzY2VuZGluZyxcbiAgU29ydEFscGhhYmV0RGVzY2VuZGluZyxcbiAgU29ydENvbnRlbnRBc2NlbmRpbmcsXG4gIFNvcnRDb250ZW50RGVzY2VuZGluZyxcbiAgU29ydE51bWVyaWNBc2NlbmRpbmcsXG4gIFNvcnROdW1lcmljRGVzY2VuZGluZyxcbiAgRm9udCxcbiAgQm9sZCxcbiAgSXRhbGljLFxuICBUZXh0SGVpZ2h0LFxuICBUZXh0V2lkdGgsXG4gIEFsaWduTGVmdCxcbiAgQWxpZ25DZW50ZXIsXG4gIEFsaWduUmlnaHQsXG4gIEFsaWduSnVzdGlmeSxcbiAgTGlzdCxcbiAgT3V0ZGVudCxcbiAgSW5kZW50LFxuICBMaW5raWZ5LFxuICBDdXQsXG4gIENvcHksXG4gIEF0dGFjaCxcbiAgU2F2ZSxcbiAgQ29udGVudCxcbiAgVW5vcmRlcmVkTGlzdCxcbiAgT3JkZXJlZExpc3QsXG4gIFN0cmlrZXRocm91Z2gsXG4gIFVuZGVybGluZSxcbiAgUGFzdGUsXG4gIFVubGluayxcbiAgU3VwZXJzY3JpcHQsXG4gIFN1YnNjcmlwdCxcbiAgSGVhZGVyLFxuICBQYXJhZ3JhcGgsXG4gIEV1cm8sXG4gIFBvdW5kLFxuICBEb2xsYXIsXG4gIFJ1cGVlLFxuICBZZW4sXG4gIFJ1YmxlLFxuICBXb24sXG4gIExpcmEsXG4gIFNoZWtlbCxcbiAgUGF5cGFsLFxuICBQYXlwYWxDYXJkLFxuICBHb29nbGVXYWxsZXQsXG4gIFZpc2EsXG4gIE1hc3RlcmNhcmQsXG4gIERpc2NvdmVyLFxuICBBbWVyaWNhbkV4cHJlc3MsXG4gIFN0cmlwZSxcbiAgVHdpdHRlclNxdWFyZSxcbiAgRmFjZWJvb2tTcXVhcmUsXG4gIExpbmtlZGluU3F1YXJlLFxuICBHaXRodWJTcXVhcmUsXG4gIFR3aXR0ZXIsXG4gIEZhY2Vib29rLFxuICBHaXRodWIsXG4gIFBpbnRlcmVzdCxcbiAgUGludGVyZXN0U3F1YXJlLFxuICBHb29nbGVQbHVzU3F1YXJlLFxuICBHb29nbGVQbHVzLFxuICBMaW5rZWRpbixcbiAgR2l0aHViQWx0ZXJuYXRlLFxuICBNYXhjZG4sXG4gIEJpdGNvaW4sXG4gIFlvdXR1YmVTcXVhcmUsXG4gIFlvdXR1YmUsXG4gIFhpbmcsXG4gIFhpbmdTcXVhcmUsXG4gIFlvdXR1YmVQbGF5LFxuICBEcm9wYm94LFxuICBTdGFja092ZXJmbG93LFxuICBJbnN0YWdyYW0sXG4gIEZsaWNrcixcbiAgQWRuLFxuICBCaXRidWNrZXQsXG4gIEJpdGJ1Y2tldFNxdWFyZSxcbiAgVHVtYmxyLFxuICBUdW1ibHJTcXVhcmUsXG4gIEFwcGxlLFxuICBXaW5kb3dzLFxuICBBbmRyb2lkLFxuICBMaW51eCxcbiAgRHJpYmJibGUsXG4gIFNreXBlLFxuICBGb3Vyc3F1YXJlLFxuICBUcmVsbG8sXG4gIEdpdHRpcCxcbiAgVmssXG4gIFdlaWJvLFxuICBSZW5yZW4sXG4gIFBhZ2VsaW5lcyxcbiAgU3RhY2tFeGNoYW5nZSxcbiAgVmltZW8sXG4gIFNsYWNrLFxuICBXb3JkcHJlc3MsXG4gIFlhaG9vLFxuICBHb29nbGUsXG4gIFJlZGRpdCxcbiAgUmVkZGl0U3F1YXJlLFxuICBTdHVtYmxldXBvbkNpcmNsZSxcbiAgU3R1bWJsZXVwb24sXG4gIERlbGljaW91cyxcbiAgRGlnZyxcbiAgUGllZFBpcGVyLFxuICBQaWVkUGlwZXJBbHRlcm5hdGUsXG4gIERydXBhbCxcbiAgSm9vbWxhLFxuICBCZWhhbmNlLFxuICBCZWhhbmNlU3F1YXJlLFxuICBTdGVhbSxcbiAgU3RlYW1TcXVhcmUsXG4gIFNwb3RpZnksXG4gIERldmlhbnRhcnQsXG4gIFNvdW5kY2xvdWQsXG4gIFZpbmUsXG4gIENvZGVwZW4sXG4gIEpzZmlkZGxlLFxuICBSZWJlbCxcbiAgRW1waXJlLFxuICBHaXRTcXVhcmUsXG4gIEdpdCxcbiAgSGFja2VyTmV3cyxcbiAgVGVuY2VudFdlaWJvLFxuICBRcSxcbiAgV2VjaGF0LFxuICBTbGlkZXNoYXJlLFxuICBUd2l0Y2gsXG4gIFllbHAsXG4gIExhc3RmbSxcbiAgTGFzdGZtU3F1YXJlLFxuICBJb3hob3N0LFxuICBBbmdlbGxpc3QsXG4gIE1lYW5wYXRoLFxuICBCdXlzZWxsYWRzLFxuICBDb25uZWN0ZGV2ZWxvcCxcbiAgRGFzaGN1YmUsXG4gIEZvcnVtYmVlLFxuICBMZWFucHViLFxuICBTZWxsc3ksXG4gIFNoaXJ0c2luYnVsayxcbiAgU2ltcGx5YnVpbHQsXG4gIFNreWF0bGFzLFxuICBXaGF0c2FwcCxcbiAgVmlhY29pbixcbiAgTWVkaXVtLFxuICBMaWtlLFxuICBGYXZvcml0ZSxcbiAgVmlkZW8sXG4gIENoZWNrLFxuICBDbG9zZSxcbiAgQ2FuY2VsLFxuICBEZWxldGUsXG4gIFgsXG4gIFVzZXJUaW1lcyxcbiAgVXNlckNsb3NlLFxuICBVc2VyQ2FuY2VsLFxuICBVc2VyRGVsZXRlLFxuICBVc2VyWCxcbiAgWm9vbUluLFxuICBNYWduaWZ5LFxuICBTaHV0ZG93bixcbiAgQ2xvY2ssXG4gIFRpbWUsXG4gIFBsYXlDaXJjbGVPdXRsaW5lLFxuICBIZWFkcGhvbmUsXG4gIENhbWVyYSxcbiAgVmlkZW9DYW1lcmEsXG4gIFBpY3R1cmUsXG4gIFBlbmNpbCxcbiAgQ29tcG9zZSxcbiAgUG9pbnQsXG4gIFRpbnQsXG4gIFNpZ251cCxcbiAgUGx1c0NpcmNsZSxcbiAgRG9udCxcbiAgTWluaW1pemUsXG4gIEFkZCxcbiAgRXllLFxuICBBdHRlbnRpb24sXG4gIENhcnQsXG4gIFNodWZmbGUsXG4gIFRhbGssXG4gIENoYXQsXG4gIFNob3BwaW5nQ2FydCxcbiAgQmFyR3JhcGgsXG4gIEFyZWFHcmFwaCxcbiAgUGllR3JhcGgsXG4gIExpbmVHcmFwaCxcbiAgS2V5LFxuICBDb2dzLFxuICBEaXNjdXNzaW9ucyxcbiAgTGlrZU91dGxpbmUsXG4gIERpc2xpa2VPdXRsaW5lLFxuICBIZWFydE91dGxpbmUsXG4gIExvZ091dCxcbiAgVGh1bWJUYWNrLFxuICBXaW5uZXIsXG4gIEJvb2ttYXJrT3V0bGluZSxcbiAgUGhvbmUsXG4gIFBob25lU3F1YXJlLFxuICBDcmVkaXRDYXJkLFxuICBIZGRPdXRsaW5lLFxuICBCdWxsaG9ybixcbiAgQmVsbCxcbiAgQmVsbE91dGxpbmUsXG4gIEJlbGxTbGFzaCxcbiAgQmVsbFNsYXNoT3V0bGluZSxcbiAgSGFuZE91dGxpbmVSaWdodCxcbiAgSGFuZE91dGxpbmVMZWZ0LFxuICBIYW5kT3V0bGluZVVwLFxuICBIYW5kT3V0bGluZURvd24sXG4gIEdsb2JlLFxuICBXcmVuY2gsXG4gIEJyaWVmY2FzZSxcbiAgR3JvdXAsXG4gIEZsYXNrLFxuICBTaWRlYmFyLFxuICBCYXJzLFxuICBMaXN0VWwsXG4gIExpc3RPbCxcbiAgTnVtYmVyZWRMaXN0LFxuICBNYWdpYyxcbiAgVHJ1Y2ssXG4gIEN1cnJlbmN5LFxuICBUcmlhbmdsZURvd24sXG4gIERyb3Bkb3duLFxuICBUcmlhbmdsZVVwLFxuICBUcmlhbmdsZUxlZnQsXG4gIFRyaWFuZ2xlUmlnaHQsXG4gIEVudmVsb3BlLFxuICBDb252ZXJzYXRpb24sXG4gIFVtYnJlbGxhLFxuICBDbGlwYm9hcmQsXG4gIExpZ2h0YnVsYixcbiAgQW1idWxhbmNlLFxuICBNZWRraXQsXG4gIEZpZ2h0ZXJKZXQsXG4gIEJlZXIsXG4gIFBsdXNTcXVhcmUsXG4gIENvbXB1dGVyLFxuICBDaXJjbGVPdXRsaW5lLFxuICBJbnRlcnNleCxcbiAgQXNleHVhbCxcbiAgU3Bpbm5lcixcbiAgR2FtZXBhZCxcbiAgU3RhckhhbGZGdWxsLFxuICBRdWVzdGlvbixcbiAgRXJhc2VyLFxuICBNaWNyb3Bob25lLFxuICBNaWNyb3Bob25lU2xhc2gsXG4gIFNoaWVsZCxcbiAgVGFyZ2V0LFxuICBQbGF5Q2lyY2xlLFxuICBQZW5jaWxTcXVhcmUsXG4gIENvbXBhc3MsXG4gIEFtZXgsXG4gIEV1cixcbiAgR2JwLFxuICBVc2QsXG4gIElucixcbiAgQ255LFxuICBSbWIsXG4gIEpweSxcbiAgUm91YmxlLFxuICBSdWIsXG4gIEtydyxcbiAgQnRjLFxuICBTaGVxZWwsXG4gIElscyxcbiAgVHJ5LFxuICBaaXAsXG4gIERvdENpcmNsZU91dGxpbmUsXG4gIFNsaWRlcnMsXG4gIFdpLFxuICBHcmFkdWF0aW9uLFxuICBXZWl4aW4sXG4gIEJpbm9jdWxhcnMsXG4gIEdyYXRpcGF5LFxuICBHZW5kZXJsZXNzLFxuICBUZWxldHlwZSxcbiAgUG93ZXJDb3JkLFxuICBUdHksXG4gIENjLFxuICBQbHVzQ2FydCxcbiAgQXJyb3dEb3duQ2FydCxcbiAgRGV0ZWN0aXZlLFxuICBWZW51cyxcbiAgTWFycyxcbiAgTWVyY3VyeSxcbiAgVmVudXNEb3VibGUsXG4gIEZlbWFsZUhvbW9zZXh1YWwsXG4gIE1hcnNEb3VibGUsXG4gIE1hbGVIb21vc2V4dWFsLFxuICBWZW51c01hcnMsXG4gIE1hcnNTdHJva2UsXG4gIE1hcnNBbHRlcm5hdGUsXG4gIE1hcnNWZXJ0aWNhbCxcbiAgTWFyc0hvcml6b250YWwsXG4gIE1hcnNTdHJva2VWZXJ0aWNhbCxcbiAgTWFyc1N0cm9rZUhvcml6b250YWwsXG4gIEZhY2Vib29rT2ZmaWNpYWwsXG4gIFBpbnRlcmVzdE9mZmljaWFsLFxuICBCZWRcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9lbnVtcy9pY29uVHlwZS50cyIsImltcG9ydCB4cyBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgeyBWTm9kZSwgaW5wdXQsIGxhYmVsLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBDb250ZW50T2JqLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb21wb25lbnRTb3VyY2VzLCBWYWx1ZUNvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9wc0FuZENvbnRlbnQsIG1ha2VJc0FyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2hlY2tib3gge1xuICBleHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgY2hlY2tlZDogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBmaXR0ZWQ6IGJvb2xlYW47XG4gICAgcmFkaW86IGJvb2xlYW47XG4gICAgdG9nZ2xlOiBib29sZWFuO1xuICAgIHNsaWRlcjogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIENoZWNrYm94QXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBDaGVja2JveFNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBDaGVja2JveEFyZ3N8UGFydGlhbDxQcm9wcz58RE9NQ29udGVudCwgYXJnMj86IERPTUNvbnRlbnQpIDogVk5vZGUge1xuICAgIHJldHVybiByZW5kZXJQcm9wc0FuZENvbnRlbnQoY2hlY2tib3gsIG1ha2VJc0FyZ3MoaXNET01Db250ZW50KSwgaXNET01Db250ZW50LCBhcmcxLCBhcmcyKTtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IENoZWNrYm94U291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpIDogVmFsdWVDb21wb25lbnRTaW5rczxib29sZWFuPiB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBDaGVja2JveFNvdXJjZXMpIHtcbiAgICAgIHNvdXJjZXMucHJvcHMkID0gc291cmNlcy5wcm9wcyQgPyBzb3VyY2VzLnByb3BzJCA6IHhzLm9mKHt9KTtcbiAgICAgIHNvdXJjZXMuY29udGVudCQgPSBzb3VyY2VzLmNvbnRlbnQkID8gc291cmNlcy5jb250ZW50JCA6IHhzLm9mKFwiXCIpO1xuICAgICAgY29uc3QgZXZ0ID0gKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChcIi5jaGVja2JveFwiKS5ldmVudHModHlwZSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHByb3BzJCA9IHNvdXJjZXMucHJvcHMkLnJlbWVtYmVyKCk7XG4gICAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHByb3BzJCwgc291cmNlcy5jb250ZW50JCkubWFwKFxuICAgICAgICAoW3Byb3BzLCBjb250ZW50XSkgPT4gY2hlY2tib3goe3Byb3BzLCBjb250ZW50fSlcbiAgICAgICk7XG4gICAgICBjb25zdCB2YWx1ZSQgPSBldnQoXCJjbGlja1wiKS5tYXAoZXZ0ID0+IChldnQuc3JjRWxlbWVudCBhcyBhbnkpLmNoZWNrZWQpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBET006IHZUcmVlJCxcbiAgICAgICAgZXZlbnRzOiBldnQsXG4gICAgICAgIHZhbHVlJFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHNjb3BlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbWFpbihzb3VyY2VzKTtcbiAgICB9XG4gICAgY29uc3QgaXNvbGF0ZWRNYWluID0gaXNvbGF0ZShtYWluLCBzY29wZSk7XG4gICAgcmV0dXJuIGlzb2xhdGVkTWFpbihzb3VyY2VzKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY2hlY2tib3goYXJnczogQ2hlY2tib3hBcmdzKSB7XG4gICAgbGV0IHByb3BzID0gYXJncy5wcm9wcyA/IGFyZ3MucHJvcHMgOiB7fTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW4gOiBbXTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc05hbWUocHJvcHMpIH0gfSwgW1xuICAgICAgaW5wdXQoe1xuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHR5cGU6IHByb3BzLnJhZGlvID8gXCJyYWRpb1wiIDogXCJjaGVja2JveFwiLFxuICAgICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgICAgY2hlY2tlZDogcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICBkaXNhYmxlZDogcHJvcHMucmVhZG9ubHkgfHwgcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBsYWJlbCh7IHByb3BzOiB7IGZvcjogcHJvcHMubmFtZSB9IH0sIHByb3BzLmZpdHRlZCA/IFwiXCIgOiBjb250ZW50KVxuICAgIF0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLnJlYWRvbmx5KSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgcmVhZC1vbmx5XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jaGVja2VkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgY2hlY2tlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZml0dGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgZml0dGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5yYWRpbykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHJhZGlvXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy50b2dnbGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0b2dnbGVcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnNsaWRlcikge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHNsaWRlclwiO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NOYW1lICsgXCIgY2hlY2tib3hcIjtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvY2hlY2tib3gvaW5kZXgudHMiLCJpbXBvcnQgeHMsIHsgU3RyZWFtLCBNZW1vcnlTdHJlYW0gfSBmcm9tIFwieHN0cmVhbVwiO1xuaW1wb3J0IGlzb2xhdGUgZnJvbSBcIkBjeWNsZS9pc29sYXRlXCI7XG5pbXBvcnQgZGVsYXkgZnJvbSBcInhzdHJlYW0vZXh0cmEvZGVsYXlcIjtcbmltcG9ydCB7IGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5cbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7IGNyZWF0ZVRyYW5zaXRpb24kLCBnZXRDbGFzc05hbWUsIGdldFRleHQgfSBmcm9tIFwiLi9jb21tb25cIjtcbmltcG9ydCB7IE1lbnUgfSBmcm9tIFwiLi4vLi4vY29sbGVjdGlvbnMvbWVudVwiO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gXCIuLi8uLi9lbGVtZW50cy9pY29uXCI7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL21vZHVsZXMvdHJhbnNpdGlvblwiO1xuaW1wb3J0IHsgVmFsdWVDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgSWNvblR5cGUsIERpcmVjdGlvbiB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBydW48Vj4oc291cmNlczogRHJvcGRvd24uRHJvcGRvd25Tb3VyY2VzPFY+LCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSk6IFZhbHVlQ29tcG9uZW50U2lua3M8Vj4ge1xuICBmdW5jdGlvbiBtYWluKHNvdXJjZXM6IERyb3Bkb3duLkRyb3Bkb3duU291cmNlczxWPikge1xuICAgIC8qKiogTWFpbiBzdHJlYW1zICoqKi9cbiAgICBjb25zdCBldnQgPSAodHlwZSkgPT4gc291cmNlcy5ET00uc2VsZWN0KFwiLmRyb3Bkb3duXCIpLmV2ZW50cyh0eXBlKTtcbiAgICBjb25zdCBjb250ZW50JCA9IHNvdXJjZXMuY29udGVudCQgPyBzb3VyY2VzLmNvbnRlbnQkLm1hcChjID0+IGMgaW5zdGFuY2VvZiBBcnJheSA/IGMgOiBjLm1haW4pIDogeHMub2YoW10pIGFzIFN0cmVhbTxEcm9wZG93bi5Db250ZW50PFY+PjtcbiAgICBjb25zdCBwcm9wcyQgPSBzb3VyY2VzLnByb3BzJCA/IHNvdXJjZXMucHJvcHMkLnJlbWVtYmVyKCkgOiB4cy5vZih7fSkgYXMgTWVtb3J5U3RyZWFtPFBhcnRpYWw8RHJvcGRvd24uUHJvcHM+PjtcblxuICAgIGNvbnN0IHZhbHVlJHByb3h5ID0geHMuY3JlYXRlKCkgYXMgU3RyZWFtPFY+O1xuICAgIGNvbnN0IGluaXRpYWxWYWx1ZSQgPSBwcm9wcyQubWFwKHByb3BzID0+IHByb3BzLmluaXRpYWwpLnJlbWVtYmVyKCk7XG4gICAgY29uc3QgdmFsdWUkID0gaW5pdGlhbFZhbHVlJC5tYXAodmFsdWUgPT4gdmFsdWUkcHJveHkuc3RhcnRXaXRoKHZhbHVlKSkuZmxhdHRlbigpLnJlbWVtYmVyKCk7XG5cbiAgICBjb25zdCBtZW51SXRlbXMkID0geHMuY29tYmluZShjb250ZW50JCwgdmFsdWUkKS5tYXAoXG4gICAgICAoW2NvbnRlbnQsIHZhbHVlXSkgPT4gY29udGVudC5tYXAoXG4gICAgICAgIGl0ZW0gPT4gaXRlbS52YWx1ZSA9PT0gdmFsdWUgPyBPYmplY3QuYXNzaWduKHt9LCBpdGVtLCB7IGFjdGl2ZTogdHJ1ZSB9KSA6IGl0ZW1cbiAgICAgIClcbiAgICApLnJlbWVtYmVyKCk7XG4gICAgY29uc3QgYWN0aXZlSXRlbSQgPSBtZW51SXRlbXMkLm1hcChjb250ZW50ID0+IGNvbnRlbnQuZmlsdGVyKGl0ZW0gPT4gaXRlbS5hY3RpdmUpWzBdKTtcbiAgICBjb25zdCBtZW51ID0gTWVudS5ydW48RHJvcGRvd24uRHJvcGRvd25JdGVtPFY+Pih7IERPTTogc291cmNlcy5ET00sIHByb3BzJDogeHMub2YoeyBzdWJtZW51OiB0cnVlIH0pLCBjb250ZW50JDogbWVudUl0ZW1zJCB9LCBzY29wZSk7XG4gICAgdmFsdWUkcHJveHkuaW1pdGF0ZShtZW51LnZhbHVlJC5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKSk7XG5cbiAgICBsZXQgdHJhbnNpdGlvbiQgPSBjcmVhdGVUcmFuc2l0aW9uJChldnQsIHNvdXJjZXMuYXJncyk7XG5cbiAgICBjb25zdCBhY3RpdmUkID0geHMubWVyZ2UoXG4gICAgICB0cmFuc2l0aW9uJC5maWx0ZXIoeCA9PiB4LmRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLkluKS5tYXBUbyh0cnVlKSxcbiAgICAgIHRyYW5zaXRpb24kLmZpbHRlcih4ID0+IHguZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uT3V0KS5jb21wb3NlKGRlbGF5KDI1MCkpLm1hcFRvKGZhbHNlKVxuICAgICkgYXMgU3RyZWFtPGJvb2xlYW4+O1xuICAgIGNvbnN0IGFuaW1hdGVkTWVudSA9IFRyYW5zaXRpb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgdGFyZ2V0JDogbWVudS5ET00sIHRyYW5zaXRpb24kIH0sIHNjb3BlKTtcbiAgICBjb25zdCB2VHJlZSQgPSB4cy5jb21iaW5lKHByb3BzJCwgYWN0aXZlJCwgYW5pbWF0ZWRNZW51LkRPTSwgYWN0aXZlSXRlbSQpLm1hcChcbiAgICAgIChbcHJvcHMsIGlzQWN0aXZlLCBtZW51LCBhY3RpdmVJdGVtXSkgPT4gZGl2KFxuICAgICAgICB7IHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NOYW1lKGlzQWN0aXZlID8gXCJ1aSBhY3RpdmVcIiA6IFwidWlcIiwgcHJvcHMpIH0gfSwgW10uY29uY2F0KFxuICAgICAgICAgIGdldFRleHQoYWN0aXZlSXRlbSwgcHJvcHMsIHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3Muc3RhdGljKSxcbiAgICAgICAgICAhcHJvcHMuc2ltcGxlID8gSWNvbi5yZW5kZXIoSWNvblR5cGUuRHJvcGRvd24pIDogW10sXG4gICAgICAgICAgbWVudVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgRE9NOiB2VHJlZSQsXG4gICAgICBldmVudHM6ICh0eXBlKSA9PiB4cy5tZXJnZShldnQodHlwZSksIG1lbnUuZXZlbnRzKHR5cGUpLCBhbmltYXRlZE1lbnUuZXZlbnRzKHR5cGUpKSxcbiAgICAgIHZhbHVlJDogbWVudS52YWx1ZSQubWFwKGl0ZW0gPT4gaXRlbS52YWx1ZSlcbiAgICB9O1xuICB9XG4gIGlmIChzY29wZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBtYWluKHNvdXJjZXMpO1xuICB9XG4gIGNvbnN0IGlzb2xhdGVkTWFpbiA9IGlzb2xhdGUobWFpbiwgc2NvcGUpO1xuICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9kcm9wZG93bi9kcm9wZG93bi50cyIsIlxuXG5pbXBvcnQgeyBET01Db250ZW50LCBDb250ZW50T2JqLCBDb21wb25lbnRTb3VyY2VzLCBWYWx1ZUNvbXBvbmVudFNpbmtzfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IGdldFNjb3BlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgeyBDb2xvciwgU2l6ZSB9IGZyb20gXCIuLi8uLi9lbnVtc1wiO1xuaW1wb3J0IHsgTWVudSB9IGZyb20gXCIuLi8uLi9jb2xsZWN0aW9ucy9tZW51XCI7XG5pbXBvcnQgc2VhcmNoRHJvcGRvd24gZnJvbSBcIi4vc2VhcmNoZHJvcGRvd25cIjtcbmltcG9ydCBkcm9wZG93biBmcm9tIFwiLi9kcm9wZG93blwiO1xuXG5cblxuZXhwb3J0IG5hbWVzcGFjZSBEcm9wZG93biB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIHJpZ2h0QWxpZ25lZDogYm9vbGVhbjtcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgaW5pdGlhbDogYW55O1xuICAgIHNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICBzaW1wbGU6IGJvb2xlYW47XG4gICAgaW5saW5lOiBib29sZWFuO1xuICAgIGZsb2F0aW5nOiBib29sZWFuO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgc2Nyb2xsaW5nOiBib29sZWFuO1xuICAgIGNvbXBhY3Q6IGJvb2xlYW47XG4gICAgcG9pbnRpbmc6IGJvb2xlYW47XG4gICAgZGVmYXVsdDogRE9NQ29udGVudDtcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgfVxuICBleHBvcnQgdHlwZSBDb250ZW50PFY+ID0gQXJyYXk8UGFydGlhbDxEcm9wZG93bkl0ZW08Vj4+PjtcbiAgZXhwb3J0IGludGVyZmFjZSBEcm9wZG93bkl0ZW08Vj4gZXh0ZW5kcyBNZW51Lk1lbnVJdGVtIHtcbiAgICB2YWx1ZTogVjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duU291cmNlczxWPiBleHRlbmRzIENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIENvbnRlbnQ8Vj4sIENvbnRlbnRPYmo8Q29udGVudDxWPj4+IHtcbiAgICBhcmdzPzoge1xuICAgICAgc2VhcmNoPzogYm9vbGVhbjtcbiAgICAgIHN0YXRpYz86IGJvb2xlYW47XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW48Vj4oc291cmNlczogRHJvcGRvd25Tb3VyY2VzPFY+LCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSk6IFZhbHVlQ29tcG9uZW50U2lua3M8Vj4ge1xuICAgIGlmIChzb3VyY2VzLmFyZ3MgJiYgc291cmNlcy5hcmdzLnNlYXJjaCkge1xuICAgICAgcmV0dXJuIHNlYXJjaERyb3Bkb3duPFY+KHNvdXJjZXMsIHNjb3BlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRyb3Bkb3duPFY+KHNvdXJjZXMsIHNjb3BlKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2Ryb3Bkb3duL2luZGV4LnRzIiwiaW1wb3J0IHhzLCB7IFN0cmVhbSwgTWVtb3J5U3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IGRlbGF5IGZyb20gXCJ4c3RyZWFtL2V4dHJhL2RlbGF5XCI7XG5pbXBvcnQgeyBWTm9kZSwgZGl2LCBpbnB1dCB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5cbmltcG9ydCB7IERyb3Bkb3duIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7IGdldENsYXNzTmFtZSwgZ2V0VGV4dCwgaXNNZW51SXRlbSwgY3JlYXRlVHJhbnNpdGlvbiQgfSBmcm9tIFwiLi9jb21tb25cIjtcblxuaW1wb3J0IHsgTWVudSB9IGZyb20gXCIuLi8uLi9jb2xsZWN0aW9ucy9tZW51XCI7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSBcIi4uLy4uL2VsZW1lbnRzL2ljb25cIjtcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy90cmFuc2l0aW9uXCI7XG5pbXBvcnQgeyBpc1ZOb2RlLCBWYWx1ZUNvbXBvbmVudFNpbmtzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5pbXBvcnQgeyBJY29uVHlwZSwgRGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBnZXRTY29wZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcnVuPFY+KHNvdXJjZXM6IERyb3Bkb3duLkRyb3Bkb3duU291cmNlczxWPiwgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBWYWx1ZUNvbXBvbmVudFNpbmtzPFY+IHtcbiAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBEcm9wZG93bi5Ecm9wZG93blNvdXJjZXM8Vj4pIHtcbiAgICAvKioqIE1haW4gc3RyZWFtcyAqKiovXG4gICAgY29uc3QgZXZ0ID0gKHR5cGUpID0+IHNvdXJjZXMuRE9NLnNlbGVjdChcIi5kcm9wZG93blwiKS5ldmVudHModHlwZSk7XG4gICAgY29uc3QgY29udGVudCQgPSAoc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQubWFwKGMgPT4gYyBpbnN0YW5jZW9mIEFycmF5ID8gYyA6IGMubWFpbikgOiB4cy5vZihbXSkpIGFzIFN0cmVhbTxEcm9wZG93bi5Db250ZW50PFY+PjtcbiAgICBjb25zdCBwcm9wcyQgPSAoc291cmNlcy5wcm9wcyQgPyBzb3VyY2VzLnByb3BzJC5yZW1lbWJlcigpIDogeHMub2Yoe30pKSBhcyBNZW1vcnlTdHJlYW08UGFydGlhbDxEcm9wZG93bi5Qcm9wcz4+O1xuXG4gICAgY29uc3QgdmFsdWUkcHJveHkgPSB4cy5jcmVhdGUoKSBhcyBTdHJlYW08Vj47XG4gICAgY29uc3QgaW5pdGlhbFZhbHVlJCA9IHByb3BzJC5tYXAocHJvcHMgPT4gcHJvcHMuaW5pdGlhbCkucmVtZW1iZXIoKTtcbiAgICBjb25zdCB2YWx1ZSQgPSBpbml0aWFsVmFsdWUkLm1hcCh2YWx1ZSA9PiB2YWx1ZSRwcm94eS5zdGFydFdpdGgodmFsdWUpKS5mbGF0dGVuKCkucmVtZW1iZXIoKTtcblxuICAgIGNvbnN0IGlucHV0JCA9IHNvdXJjZXMuRE9NLnNlbGVjdChcImlucHV0XCIpLmV2ZW50cyhcImtleXVwXCIpXG4gICAgICAubWFwKGV2ID0+IChldi50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpO1xuICAgIGNvbnN0IGZpbHRlciQgPSB4cy5tZXJnZShpbnB1dCQsIHZhbHVlJHByb3h5Lm1hcCh2ID0+IFwiXCIpKS5zdGFydFdpdGgoXCJcIikgYXMgU3RyZWFtPHN0cmluZz47XG5cbiAgICAvKiogQ3JlYXRlIG1lbnUgY29tcG9uZW50ICoqL1xuICAgIGNvbnN0IG1lbnVJdGVtcyQgPSB4cy5jb21iaW5lKGNvbnRlbnQkLCB2YWx1ZSQpLm1hcChcbiAgICAgIChbY29udGVudCwgdmFsdWVdKSA9PiBjb250ZW50Lm1hcChcbiAgICAgICAgaXRlbSA9PiBpdGVtLnZhbHVlID09PSB2YWx1ZSA/IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0sIHsgYWN0aXZlOiB0cnVlIH0pIDogaXRlbVxuICAgICAgKVxuICAgICkucmVtZW1iZXIoKTtcbiAgICBjb25zdCBhY3RpdmVJdGVtJCA9IG1lbnVJdGVtcyQubWFwKGNvbnRlbnQgPT4gY29udGVudC5maWx0ZXIoaXRlbSA9PiBpdGVtLmFjdGl2ZSlbMF0pO1xuICAgIGNvbnN0IGZpbHRlcmVkSXRlbXMkID0geHMuY29tYmluZShjb250ZW50JCwgZmlsdGVyJCkubWFwKFxuICAgICAgKFtjb250ZW50LCBmaWx0ZXJdKSA9PiBjb250ZW50LmZpbHRlcihjID0+IGZpbHRlckNvbnRlbnQoYywgZmlsdGVyKSlcbiAgICApLnJlbWVtYmVyKCk7XG4gICAgY29uc3QgbWVudSA9IE1lbnUucnVuPERyb3Bkb3duLkRyb3Bkb3duSXRlbTxWPj4oeyBET006IHNvdXJjZXMuRE9NLCBwcm9wcyQ6IHhzLm9mKHsgc3VibWVudTogdHJ1ZSB9KSwgY29udGVudCQ6IGZpbHRlcmVkSXRlbXMkIH0sIHNjb3BlKTtcblxuICAgIGNvbnN0IGlucHV0RW50ZXIkID0gc291cmNlcy5ET00uc2VsZWN0KFwiaW5wdXRcIikuZXZlbnRzKFwia2V5cHJlc3NcIikgYXMgU3RyZWFtPEtleWJvYXJkRXZlbnQ+O1xuICAgIGNvbnN0IGVudGVyVmFsdWUkID0gaW5wdXRFbnRlciQubWFwKGV2dCA9PlxuICAgICAgKGV2dC5jaGFyQ29kZSA9PT0gMTMgfHwgZXZ0LmNoYXJDb2RlID09PSA5KSA/IGZpbHRlcmVkSXRlbXMkLm1hcChpdGVtcyA9PiBpdGVtc1swXSkudGFrZSgxKSA6IHhzLm5ldmVyKClcbiAgICApLmZsYXR0ZW4oKTtcblxuICAgIHZhbHVlJHByb3h5LmltaXRhdGUoeHMubWVyZ2UobWVudS52YWx1ZSQsIGVudGVyVmFsdWUkKS5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKSk7XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uJCA9IGNyZWF0ZVRyYW5zaXRpb24kKGV2dCwgc291cmNlcy5hcmdzKTtcbiAgICBjb25zdCBhY3RpdmUkID0geHMubWVyZ2UoXG4gICAgICB0cmFuc2l0aW9uJC5maWx0ZXIoeCA9PiB4LmRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLkluKS5tYXBUbyh0cnVlKSxcbiAgICAgIHRyYW5zaXRpb24kLmZpbHRlcih4ID0+IHguZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uT3V0KS5jb21wb3NlKGRlbGF5KDI1MCkpLm1hcFRvKGZhbHNlKVxuICAgICkgYXMgU3RyZWFtPGJvb2xlYW4+O1xuICAgIGNvbnN0IGFuaW1hdGVkTWVudSA9IFRyYW5zaXRpb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgdGFyZ2V0JDogbWVudS5ET00sIHRyYW5zaXRpb24kIH0sIHNjb3BlKTtcblxuICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBhY3RpdmUkLCBhbmltYXRlZE1lbnUuRE9NLCBmaWx0ZXIkLCBhY3RpdmVJdGVtJCkubWFwKFxuICAgICAgKFtwcm9wcywgaXNBY3RpdmUsIG1lbnUsIGZpbHRlciwgYWN0aXZlSXRlbV0pID0+IGRpdihcbiAgICAgICAgeyBwcm9wczogeyBjbGFzc05hbWU6IGdldENsYXNzTmFtZShpc0FjdGl2ZSA/IFwidWkgYWN0aXZlIHNlYXJjaCBcIiA6IFwidWkgc2VhcmNoXCIsIHByb3BzKSB9IH0sIFtdLmNvbmNhdChcbiAgICAgICAgICBpbnB1dCh7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJzZWFyY2hcIiwgdmFsdWU6IGZpbHRlciB9IH0pLFxuICAgICAgICAgIGdldFRleHQoYWN0aXZlSXRlbSwgcHJvcHMsIHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3Muc3RhdGljLCBmaWx0ZXIpLFxuICAgICAgICAgICFwcm9wcy5zaW1wbGUgPyBJY29uLnJlbmRlcihJY29uVHlwZS5Ecm9wZG93bikgOiBbXSxcbiAgICAgICAgICBtZW51XG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIGV2ZW50czogKHR5cGUpID0+IHhzLm1lcmdlKGV2dCh0eXBlKSwgbWVudS5ldmVudHModHlwZSksIGFuaW1hdGVkTWVudS5ldmVudHModHlwZSkpLFxuICAgICAgdmFsdWUkOiB2YWx1ZSRwcm94eVxuICAgIH07XG4gIH1cbiAgaWYgKHNjb3BlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG1haW4oc291cmNlcyk7XG4gIH1cbiAgY29uc3QgaXNvbGF0ZWRNYWluID0gaXNvbGF0ZShtYWluLCBzY29wZSk7XG4gIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRlbnQ8Vj4oaXRlbTogUGFydGlhbDxEcm9wZG93bi5Ecm9wZG93bkl0ZW08Vj4+LCBmaWx0ZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBmdW5jdGlvbiBmKG5vZGU6IFZOb2RlIHwgc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiAobm9kZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBub2RlID09PSBmaWx0ZXI7XG4gICAgfVxuICAgIGlmIChub2RlLnRleHQpIHtcbiAgICAgIHJldHVybiBub2RlLnRleHQuaW5kZXhPZihmaWx0ZXIpICE9PSAtMSB8fCAhZmlsdGVyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvciAobGV0IGMgaW4gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBpZiAoZihjKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgKGl0ZW0ubWFpbikgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgKGl0ZW0ubWFpbikgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gKGl0ZW0ubWFpbiBhcyBzdHJpbmcpLmluZGV4T2YoZmlsdGVyKSAhPT0gLTEgfHwgIWZpbHRlcjtcbiAgfVxuICBlbHNlIGlmIChpc1ZOb2RlKGl0ZW0ubWFpbikpIHtcbiAgICByZXR1cm4gZihpdGVtLm1haW4pO1xuICB9XG4gIGVsc2UgaWYgKGl0ZW0ubWFpbiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgZm9yIChsZXQgYyBvZiBpdGVtLm1haW4pIHtcbiAgICAgIGlmIChpc01lbnVJdGVtKGMpKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJDb250ZW50KGMsIGZpbHRlcik7XG4gICAgICB9XG4gICAgICBpZiAoZihjKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvZHJvcGRvd24vc2VhcmNoZHJvcGRvd24udHMiLCJleHBvcnQgKiBmcm9tIFwiLi9jaGVja2JveFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGltbWVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kcm9wZG93blwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbW9kYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvcHVwXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wcm9ncmVzc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGFic1wiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvaW5kZXgudHMiLCJpbXBvcnQgaXNvbGF0ZSBmcm9tIFwiQGN5Y2xlL2lzb2xhdGVcIjtcbmltcG9ydCB7IFZOb2RlLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHhzLCB7IFN0cmVhbSwgTWVtb3J5U3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcblxuaW1wb3J0IHsgSWNvblR5cGUsIERpcmVjdGlvbiwgQW5pbWF0aW9uIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBEaW1tZXIgfSBmcm9tIFwiLi4vLi4vbW9kdWxlcy9kaW1tZXJcIjtcbmltcG9ydCB7IEljb24gfSBmcm9tIFwiLi4vLi4vZWxlbWVudHMvaWNvblwiO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9tb2R1bGVzL3RyYW5zaXRpb25cIjtcbmltcG9ydCB7IERPTUNvbnRlbnQsIGlzRE9NQ29udGVudCwgQ29tcG9uZW50U291cmNlcywgQ29tcG9uZW50U2lua3MgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcbmltcG9ydCB7IGdldFNjb3BlfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBNb2RhbCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudE9iaiB7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBoZWFkZXI6IERPTUNvbnRlbnQ7XG4gICAgYWN0aW9uczogRE9NQ29udGVudDtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIE1vZGFsU291cmNlcyBleHRlbmRzIENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+IHtcbiAgICBhcmdzPzoge1xuICAgICAgb24kPzogU3RyZWFtPGJvb2xlYW4+O1xuICAgICAgdGFyZ2V0JD86IFN0cmVhbTxWTm9kZT47XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBydW4oc291cmNlczogTW9kYWxTb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSkgOiBDb21wb25lbnRTaW5rcyB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBNb2RhbFNvdXJjZXMpIHtcbiAgICAgIGNvbnN0IHByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7fSkgYXMgU3RyZWFtPFBhcnRpYWw8UHJvcHM+PjtcbiAgICAgIGNvbnN0IGNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQubWFwKGMgPT4gaXNET01Db250ZW50KGMpID8geyBtYWluOiBjIH0gOiBjKSA6IHhzLm9mKHsgbWFpbjogW10gfSk7XG4gICAgICBjb25zdCB0YXJnZXQkID0gc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy50YXJnZXQkID8gc291cmNlcy5hcmdzLnRhcmdldCQgOiB4cy5vZihcInBhZ2VcIik7XG4gICAgICBjb25zdCBzaG93JD0gc291cmNlcy5hcmdzICYmIHNvdXJjZXMuYXJncy5vbiQgPyBzb3VyY2VzLmFyZ3Mub24kIDogeHMub2YodHJ1ZSk7XG5cbiAgICAgIGNvbnN0IGNsb3NlSWNvbiA9IEljb24ucnVuKHsgRE9NOiBzb3VyY2VzLkRPTSwgcHJvcHMkOiB4cy5vZih7IGxpbms6IHRydWUgfSksIGNvbnRlbnQkOiB4cy5vZihJY29uVHlwZS5DbG9zZSkgfSwgc2NvcGUpO1xuICAgICAgY29uc3QgY2xvc2UkID0gY2xvc2VJY29uLmV2ZW50cyhcImNsaWNrXCIpLm1hcFRvKGZhbHNlKTtcblxuICAgICAgLyoqKiBSZW5kZXIgbW9kYWwgKioqL1xuICAgICAgbGV0IGRpbW1lcmNsaWNrJHByb3h5ID0geHMuY3JlYXRlKCkgYXMgU3RyZWFtPGJvb2xlYW4+O1xuICAgICAgY29uc3Qgb24kID0geHMubWVyZ2Uoc2hvdyQsIGRpbW1lcmNsaWNrJHByb3h5LCBjbG9zZSQpLnJlbWVtYmVyKCkgYXMgTWVtb3J5U3RyZWFtPGJvb2xlYW4+O1xuICAgICAgY29uc3QgbW9kYWwkID0geHMuY29tYmluZShjb250ZW50JCwgY2xvc2VJY29uLkRPTSkubWFwKFxuICAgICAgICAoW2NvbnRlbnQsIGljb25dKSA9PlxuICAgICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJ1aSBzY3JvbGxpbmcgYWN0aXZlIG1vZGFsXCIgfSB9LCBbXS5jb25jYXQoXG4gICAgICAgICAgICBpY29uLFxuICAgICAgICAgICAgY29udGVudC5oZWFkZXIgPyBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwiaGVhZGVyXCIgfSB9LCBjb250ZW50LmhlYWRlcikgOiBbXSxcbiAgICAgICAgICAgIGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJjb250ZW50XCIgfSB9LCBjb250ZW50Lm1haW4pLFxuICAgICAgICAgICAgY29udGVudC5hY3Rpb25zID8gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImFjdGlvbnNcIiB9IH0sIGNvbnRlbnQuYWN0aW9ucykgOiBbXVxuICAgICAgICAgICkpXG4gICAgICApLnJlbWVtYmVyKCk7XG5cbiAgICAgIC8qKiogQW5pbWF0aW9uICoqKi9cbiAgICAgIGNvbnN0IHRyYW5zaXRpb24kID0gb24kXG4gICAgICAgIC5mb2xkKChwcmV2QW5pbSwgYWN0aXZlKSA9PiBwcmV2QW5pbS5kaXJlY3Rpb24gPT09IERpcmVjdGlvbi5Ob25lXG4gICAgICAgICAgPyAoeyBhbmltYXRpb246IEFuaW1hdGlvbi5Ob25lLCBkaXJlY3Rpb246IGFjdGl2ZSA/IERpcmVjdGlvbi5JbiA6IERpcmVjdGlvbi5PdXQgfSlcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogQW5pbWF0aW9uLlNjYWxlLCBkaXJlY3Rpb246IGFjdGl2ZSA/IERpcmVjdGlvbi5JbiA6IERpcmVjdGlvbi5PdXRcbiAgICAgICAgICB9XG4gICAgICAgICwgKHsgYW5pbWF0aW9uOiBBbmltYXRpb24uTm9uZSwgZGlyZWN0aW9uOiBEaXJlY3Rpb24uTm9uZSB9KSk7XG4gICAgICBjb25zdCBhbmltYXRlZENvbnRlbnQgPSBUcmFuc2l0aW9uLnJ1bih7IERPTTogc291cmNlcy5ET00sIHRhcmdldCQ6IG1vZGFsJCwgdHJhbnNpdGlvbiQgfSwgc2NvcGUgPT09IG51bGwgPyBcInRyYW5zaXRpb25cIiA6IHNjb3BlICsgXCJfdHJhbnNpdGlvblwiKTtcblxuICAgICAgLyoqKiBBY3RpdmF0ZSBkaW1tZXIgKioqL1xuICAgICAgbGV0IGRpbW1lckNvbnRlbnQkID0gYW5pbWF0ZWRDb250ZW50LkRPTS5tYXAoeCA9PiBbeF0pO1xuICAgICAgY29uc3QgZGltbWVyID0gRGltbWVyLnJ1bih7XG4gICAgICAgIERPTTogc291cmNlcy5ET00sXG4gICAgICAgIHByb3BzJDogcHJvcHMkLm1hcCh4ID0+ICh7IGludmVydGVkOiB4LmludmVydGVkIH0pKSxcbiAgICAgICAgY29udGVudCQ6IGRpbW1lckNvbnRlbnQkLFxuICAgICAgICBhcmdzOiB7IHRhcmdldCQsIG9uJCB9XG4gICAgICB9LCBzY29wZSk7XG4gICAgICBjb25zdCBkaW1tZXJjbGljayQgPSBkaW1tZXIuZXZlbnRzKFwibW91c2Vkb3duXCIpXG4gICAgICAgIC5maWx0ZXIoZXZ0ID0+IGV2dC5zcmNFbGVtZW50ID09PSAoZXZ0IGFzIE1vdXNlRXZlbnQpLmN1cnJlbnRUYXJnZXQpXG4gICAgICAgIC5tYXBUbyhmYWxzZSk7XG4gICAgICBkaW1tZXJjbGljayRwcm94eS5pbWl0YXRlKGRpbW1lcmNsaWNrJCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogZGltbWVyLkRPTSxcbiAgICAgICAgZXZlbnRzOiAodHlwZSkgPT4geHMubWVyZ2Uoc291cmNlcy5ET00uc2VsZWN0KFwiLm1vZGFsXCIpLmV2ZW50cyh0eXBlKSwgZGltbWVyLmV2ZW50cyh0eXBlKSwgY2xvc2VJY29uLmV2ZW50cyh0eXBlKSlcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChzY29wZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG1haW4oc291cmNlcyk7XG4gICAgfVxuICAgIGNvbnN0IGlzb2xhdGVkTWFpbiA9IGlzb2xhdGUobWFpbiwgc2NvcGUpO1xuICAgIHJldHVybiBpc29sYXRlZE1haW4oc291cmNlcyk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL21vZGFsL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGUsIGRpdiB9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5pbXBvcnQgeHMsIHsgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCBpc29sYXRlIGZyb20gXCJAY3ljbGUvaXNvbGF0ZVwiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCJ4c3RyZWFtL2V4dHJhL2RlYm91bmNlXCI7XG5pbXBvcnQgZHJvcFJlcGVhdHMgZnJvbSBcInhzdHJlYW0vZXh0cmEvZHJvcFJlcGVhdHNcIjtcbmltcG9ydCBkZWxheSBmcm9tIFwieHN0cmVhbS9leHRyYS9kZWxheVwiO1xuaW1wb3J0ICogYXMgVGV0aGVyIGZyb20gXCJ0ZXRoZXJcIjtcblxuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgU2l6ZSwgQW5pbWF0aW9uLCBEaXJlY3Rpb24sIENvbG9yIH0gZnJvbSBcIi4uLy4uL2VudW1zXCI7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL21vZHVsZXMvdHJhbnNpdGlvblwiO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSwgZ2V0U2NvcGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuXG5leHBvcnQgbmFtZXNwYWNlIFBvcHVwIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgd2lkZTogYm9vbGVhbjtcbiAgICB2ZXJ5V2lkZTogYm9vbGVhbjtcbiAgICBmbG93aW5nOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIHNpemU6IFNpemUgfCBzdHJpbmc7XG4gICAgYXR0YWNobWVudDogUG9wdXAuQXR0YWNobWVudCB8IHN0cmluZztcbiAgICBjb2xvcjogQ29sb3IgfCBzdHJpbmc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50T2JqIHtcbiAgICBtYWluOiBET01Db250ZW50O1xuICAgIGhlYWRlcjogRE9NQ29udGVudDtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFBvcHVwU291cmNlcyBleHRlbmRzIENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+IHtcbiAgICBhcmdzOiB7XG4gICAgICB0YXJnZXQkOiBTdHJlYW08Vk5vZGUgfCBFbGVtZW50PixcbiAgICAgIG9uJD86IFN0cmVhbTxib29sZWFuPixcbiAgICAgIHRpbWVvdXQ6IG51bWJlclxuICAgIH07XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IFBvcHVwU291cmNlcywgc2NvcGU6IHN0cmluZyA9IGdldFNjb3BlKCkpOiBDb21wb25lbnRTaW5rcyB7XG4gICAgZnVuY3Rpb24gbWFpbihzb3VyY2VzOiBQb3B1cFNvdXJjZXMpIHtcbiAgICAgIGlmICghKHNvdXJjZXMuYXJncyAmJiBzb3VyY2VzLmFyZ3MudGFyZ2V0JCkpIHtcbiAgICAgICAgdGhyb3cgKFwiUG9wdXBzIG11c3QgYmUgYXR0YWNoZWQgdG8gYW4gZWxlbWVudFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb3BzJCA9IHNvdXJjZXMucHJvcHMkID8gc291cmNlcy5wcm9wcyQgOiB4cy5vZih7IGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQuQm90dG9tTGVmdCB9KTtcbiAgICAgIGNvbnN0IGNvbnRlbnQkID0gc291cmNlcy5jb250ZW50JCA/IHNvdXJjZXMuY29udGVudCQubWFwKGMgPT4gaXNET01Db250ZW50KGMpID8geyBtYWluOiBjIH0gOiBjKSA6IHhzLm9mKHsgbWFpbjogW10gfSk7XG4gICAgICBjb25zdCBvbiQgPSBzb3VyY2VzLmFyZ3Mub24kID8gc291cmNlcy5hcmdzLm9uJCA6IHhzLm9mKHRydWUpO1xuICAgICAgY29uc3QgdGltZW91dCA9IHNvdXJjZXMuYXJncy50aW1lb3V0ID09PSB2b2lkIDAgPyAxMDAwIDogIHNvdXJjZXMuYXJncy50aW1lb3V0OyBcbiAgICAgIGNvbnN0IGV2dCA9ICh0eXBlKSA9PiBzb3VyY2VzLkRPTS5zZWxlY3QoXCIucG9wdXBcIikuZXZlbnRzKHR5cGUpIGFzIFN0cmVhbTxFdmVudD47XG5cbiAgICAgIGNvbnN0IHZUcmVlJCA9IHhzLmNvbWJpbmUocHJvcHMkLCBjb250ZW50JCwgc291cmNlcy5hcmdzLnRhcmdldCQpLm1hcChcbiAgICAgICAgKFtwcm9wcywgY29udGVudCwgdGFyZ2V0XSkgPT4gcG9wdXAocHJvcHMsIGNvbnRlbnQsIHRhcmdldClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG1vdXNlZW50ZXIkcHJveHkgPSB4cy5jcmVhdGUoKSBhcyB4czxFdmVudD47XG4gICAgICBjb25zdCBtb3VzZWxlYXZlJHByb3h5ID0geHMuY3JlYXRlKCkgYXMgeHM8RXZlbnQ+O1xuICAgICAgY29uc3QgbW91c2VySW50ZXJhY3QkID0geHMubWVyZ2UobW91c2VsZWF2ZSRwcm94eSwgbW91c2VlbnRlciRwcm94eSlcbiAgICAgICAgLm1hcChldnQgPT4gZXZ0LnR5cGUgPT09IFwibW91c2VlbnRlclwiID8gRGlyZWN0aW9uLkluIDogRGlyZWN0aW9uLk91dClcbiAgICAgICAgLmNvbXBvc2UoZGVib3VuY2UoMjAwKSlcbiAgICAgICAgLmZpbHRlcihkaXIgPT4gZGlyID09PSBEaXJlY3Rpb24uT3V0KTtcbiAgICAgIGNvbnN0IGFjdGl2ZSQgPSBvbiQubWFwKGFjdGl2ZSA9PiBhY3RpdmUgPyBEaXJlY3Rpb24uSW4gOiBEaXJlY3Rpb24uT3V0KS5kcm9wKDEpO1xuICAgICAgY29uc3QgdGltZXIkID0gYWN0aXZlJC5tYXAoZGlyID0+IGRpciA9PT0gRGlyZWN0aW9uLk91dCA/IHhzLm5ldmVyKClcbiAgICAgICAgOiB0aW1lb3V0ID09PSBudWxsID8geHMubmV2ZXIoKSA6IHhzLm9mKERpcmVjdGlvbi5PdXQpLmNvbXBvc2UoZGVsYXkodGltZW91dCkpLmVuZFdoZW4obW91c2VlbnRlciRwcm94eSlcbiAgICAgICkuZmxhdHRlbigpO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbiQgPSB4cy5tZXJnZShhY3RpdmUkLCBtb3VzZXJJbnRlcmFjdCQsIHRpbWVyJClcbiAgICAgICAgLm1hcChkaXIgPT4gKHtcbiAgICAgICAgICBhbmltYXRpb246IEFuaW1hdGlvbi5GYWRlLFxuICAgICAgICAgIGRpcmVjdGlvbjogZGlyXG4gICAgICAgIH0pKVxuICAgICAgICAuY29tcG9zZShkcm9wUmVwZWF0cyhcbiAgICAgICAgICAoYSwgYikgPT4gKGEgYXMgYW55KS5kaXJlY3Rpb24gPT09IChiIGFzIGFueSkuZGlyZWN0aW9uXG4gICAgICAgICAgICAmJiAoYSBhcyBhbnkpLmFuaW1hdGlvbiA9PT0gKGIgYXMgYW55KS5hbmltYXRpb25cbiAgICAgICAgKSlcbiAgICAgICAgLnN0YXJ0V2l0aCh7IGFuaW1hdGlvbjogQW5pbWF0aW9uLk5vbmUsIGRpcmVjdGlvbjogRGlyZWN0aW9uLk91dCB9KSBhcyBTdHJlYW08YW55PjtcbiAgICAgIGNvbnN0IGFuaW1hdGVkUG9wdXAgPSBUcmFuc2l0aW9uLnJ1bih7IERPTTogc291cmNlcy5ET00sIHRhcmdldCQ6IHZUcmVlJCwgdHJhbnNpdGlvbiQgfSwgc2NvcGUpO1xuICAgICAgbW91c2VlbnRlciRwcm94eS5pbWl0YXRlKGFuaW1hdGVkUG9wdXAuZXZlbnRzKFwibW91c2VlbnRlclwiKSk7XG4gICAgICBtb3VzZWxlYXZlJHByb3h5LmltaXRhdGUoYW5pbWF0ZWRQb3B1cC5ldmVudHMoXCJtb3VzZWxlYXZlXCIpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIERPTTogYW5pbWF0ZWRQb3B1cC5ET00sXG4gICAgICAgIGV2ZW50czogKHR5cGUpID0+IHhzLm1lcmdlKGV2dCh0eXBlKSwgYW5pbWF0ZWRQb3B1cC5ldmVudHModHlwZSkpXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoc2NvcGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtYWluKHNvdXJjZXMpO1xuICAgIH1cbiAgICBjb25zdCBpc29sYXRlZE1haW4gPSBpc29sYXRlKG1haW4sIHNjb3BlKTtcbiAgICByZXR1cm4gaXNvbGF0ZWRNYWluKHNvdXJjZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wdXAocHJvcHM6IFBhcnRpYWw8UHJvcHM+LCBjb250ZW50OiBQYXJ0aWFsPENvbnRlbnRPYmo+LCB0YXJnZXQ6IFZOb2RlIHwgRWxlbWVudCk6IFZOb2RlIHtcbiAgICByZXR1cm4gZGl2KHtcbiAgICAgIHByb3BzOiB7IGNsYXNzTmFtZTogZ2V0Q2xhc3NuYW1lKHByb3BzKSB9LCBob29rOiB7XG4gICAgICAgIGluc2VydDogKHZub2RlKSA9PiB7XG4gICAgICAgICAgbmV3IFRldGhlcih7XG4gICAgICAgICAgICBlbGVtZW50OiB2bm9kZS5lbG0sXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldC5oYXNPd25Qcm9wZXJ0eShcImVsbVwiKSA/IHRhcmdldFtcImVsbVwiXSA6IHRhcmdldCxcbiAgICAgICAgICAgIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQuVG9PcHBvc2l0ZVRldGhlcihwcm9wcy5hdHRhY2htZW50KSxcbiAgICAgICAgICAgIHRhcmdldEF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQuVG9UZXRoZXIocHJvcHMuYXR0YWNobWVudClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIFtdLmNvbmNhdChcbiAgICAgIGNvbnRlbnQuaGVhZGVyID8gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImhlYWRlclwiIH0gfSwgY29udGVudC5oZWFkZXIpIDogW10sXG4gICAgICBjb250ZW50Lm1haW5cbiAgICApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzbmFtZShwcm9wczogUGFydGlhbDxQcm9wcz4pOiBzdHJpbmcge1xuICAgIGxldCBjbGFzc05hbWUgPSBcInVpXCI7XG4gICAgaWYgKHByb3BzLndpZGUpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB3aWRlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy52ZXJ5V2lkZSkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHZlcnkgd2lkZVwiO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZmxvd2luZykge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGZsb3dpbmdcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLmludmVydGVkKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgaW52ZXJ0ZWRcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBDb2xvci5Ub0NsYXNzbmFtZShwcm9wcy5jb2xvcik7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBBdHRhY2htZW50LlRvQ2xhc3NuYW1lKHByb3BzLmF0dGFjaG1lbnQpICsgXCIgcG9wdXBcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG4gIGV4cG9ydCBlbnVtIEF0dGFjaG1lbnQge1xuICAgIFRvcExlZnQsIFRvcE1pZGRsZSwgVG9wUmlnaHQsIExlZnRDZW50ZXIsIFJpZ2h0Q2VudGVyLFxuICAgIEJvdHRvbUxlZnQsIEJvdHRvbU1pZGRsZSwgQm90dG9tUmlnaHQsXG4gICAgQ2VudGVyXG4gIH1cbiAgZXhwb3J0IG5hbWVzcGFjZSBBdHRhY2htZW50IHtcbiAgICBleHBvcnQgZnVuY3Rpb24gVG9FbnVtKGF0dGFjaG1lbnRzdHJpbmc6IEF0dGFjaG1lbnQgfCBzdHJpbmcpOiBBdHRhY2htZW50IHtcbiAgICAgIGlmICh0eXBlb2YgKGF0dGFjaG1lbnRzdHJpbmcpID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBhdHRhY2htZW50c3RyaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEF0dGFjaG1lbnRbYXR0YWNobWVudHN0cmluZy5zcGxpdChcIiBcIikubWFwKGNhcGl0YWxpemUpLmpvaW4oXCJcIildO1xuICAgIH1cbiAgICBleHBvcnQgZnVuY3Rpb24gVG9DbGFzc25hbWUoYXR0YWNobWVudDogQXR0YWNobWVudCB8IHN0cmluZykge1xuICAgICAgYXR0YWNobWVudCA9IEF0dGFjaG1lbnQuVG9FbnVtKGF0dGFjaG1lbnQpO1xuICAgICAgc3dpdGNoIChhdHRhY2htZW50KSB7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Ub3BMZWZ0OiByZXR1cm4gXCIgdG9wIGxlZnRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcE1pZGRsZTogcmV0dXJuIFwiIHRvcCBjZW50ZXJcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcFJpZ2h0OiByZXR1cm4gXCIgdG9wIHJpZ2h0XCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5MZWZ0Q2VudGVyOiByZXR1cm4gXCIgbGVmdCBjZW50ZXJcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlJpZ2h0Q2VudGVyOiByZXR1cm4gXCIgcmlnaHQgY2VudGVyXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b21MZWZ0OiByZXR1cm4gXCIgYm90dG9tIGxlZnRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkJvdHRvbU1pZGRsZTogcmV0dXJuIFwiIGJvdHRvbSBjZW50ZXJcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkJvdHRvbVJpZ2h0OiByZXR1cm4gXCIgYm90dG9tIHJpZ2h0XCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5DZW50ZXI6IHJldHVybiBcIiBjZW50ZXJcIjtcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIFwiIGJvdHRvbSBsZWZ0XCI7XG4gICAgICB9XG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBUb1RldGhlcihhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nKSB7XG4gICAgICBhdHRhY2htZW50ID0gQXR0YWNobWVudC5Ub0VudW0oYXR0YWNobWVudCk7XG4gICAgICBzd2l0Y2ggKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcExlZnQ6IHJldHVybiBcInRvcCBsZWZ0XCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Ub3BNaWRkbGU6IHJldHVybiBcInRvcCBjZW50ZXJcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcFJpZ2h0OiByZXR1cm4gXCJ0b3AgcmlnaHRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkxlZnRDZW50ZXI6IHJldHVybiBcImxlZnQgbWlkZGxlXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5SaWdodENlbnRlcjogcmV0dXJuIFwicmlnaHQgbWlkZGxlXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b21MZWZ0OiByZXR1cm4gXCJib3R0b20gbGVmdFwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuQm90dG9tTWlkZGxlOiByZXR1cm4gXCJib3R0b20gY2VudGVyXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b21SaWdodDogcmV0dXJuIFwiYm90dG9tIHJpZ2h0XCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5DZW50ZXI6IHJldHVybiBcImNlbnRlclwiO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gXCJib3R0b20gbGVmdFwiO1xuICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgZnVuY3Rpb24gVG9PcHBvc2l0ZVRldGhlcihhdHRhY2htZW50OiBBdHRhY2htZW50IHwgc3RyaW5nKSB7XG4gICAgICBhdHRhY2htZW50ID0gQXR0YWNobWVudC5Ub0VudW0oYXR0YWNobWVudCk7XG4gICAgICBzd2l0Y2ggKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LlRvcExlZnQ6IHJldHVybiBcImJvdHRvbSByaWdodFwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuVG9wTWlkZGxlOiByZXR1cm4gXCJib3R0b20gY2VudGVyXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Ub3BSaWdodDogcmV0dXJuIFwiYm90dG9tIGxlZnRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkxlZnRDZW50ZXI6IHJldHVybiBcInJpZ2h0IG1pZGRsZVwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuUmlnaHRDZW50ZXI6IHJldHVybiBcImxlZnQgbWlkZGxlXCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5Cb3R0b21MZWZ0OiByZXR1cm4gXCJ0b3AgcmlnaHRcIjtcbiAgICAgICAgY2FzZSBBdHRhY2htZW50LkJvdHRvbU1pZGRsZTogcmV0dXJuIFwidG9wIGNlbnRlclwiO1xuICAgICAgICBjYXNlIEF0dGFjaG1lbnQuQm90dG9tUmlnaHQ6IHJldHVybiBcInRvcCBsZWZ0XCI7XG4gICAgICAgIGNhc2UgQXR0YWNobWVudC5DZW50ZXI6IHJldHVybiBcImNlbnRlclwiO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gXCJib3R0b20gbGVmdFwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvcG9wdXAvaW5kZXgudHMiLCJpbXBvcnQgeyBWTm9kZSwgZGl2IH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcblxuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBDb250ZW50T2JqLCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgU2l6ZSwgQXR0YWNobWVudCwgQ29sb3IgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50LCBtYWtlSXNBcmdzIH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xuaW1wb3J0IHsgZ2V0U2NvcGV9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFByb2dyZXNzIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgcHJvZ3Jlc3M6IG51bWJlcjtcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgaW52ZXJ0ZWQ6IGJvb2xlYW47XG4gICAgYXR0YWNobWVudDogQXR0YWNobWVudCB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFByb2dyZXNzQmFyQXJncyA9IFN0eWxlQW5kQ29udGVudEFyZ3M8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo8RE9NQ29udGVudD4+O1xuICBleHBvcnQgdHlwZSBQcm9ncmVzc0JhclNvdXJjZXMgPSBDb21wb25lbnRTb3VyY2VzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPERPTUNvbnRlbnQ+PjtcblxuICBleHBvcnQgZnVuY3Rpb24gcmVuZGVyKGFyZzE/OiBQcm9ncmVzc0JhckFyZ3MgfCBQYXJ0aWFsPFByb3BzPiB8IERPTUNvbnRlbnQsIGFyZzI/OiBET01Db250ZW50KSB7XG4gICAgcmV0dXJuIHJlbmRlclByb3BzQW5kQ29udGVudChwcm9ncmVzcywgbWFrZUlzQXJncyhpc0RPTUNvbnRlbnQpLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBQcm9ncmVzc0JhclNvdXJjZXMsIHNjb3BlOiBzdHJpbmcgPSBnZXRTY29wZSgpKTogQ29tcG9uZW50U2lua3Mge1xuICAgIHJldHVybiBydW5Qcm9wc0FuZENvbnRlbnQoc291cmNlcywgcHJvZ3Jlc3MsIFwiLnByb2dyZXNzXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2dyZXNzKGFyZ3M6IFByb2dyZXNzQmFyQXJncyk6IFZOb2RlIHtcbiAgICBsZXQgcHJvcHMgPSBhcmdzLnByb3BzID8gYXJncy5wcm9wcyA6IHsgcHJvZ3Jlc3M6IDAgfTtcbiAgICBsZXQgY29udGVudCA9IGFyZ3MuY29udGVudCA/IGlzRE9NQ29udGVudChhcmdzLmNvbnRlbnQpID8gYXJncy5jb250ZW50IDogYXJncy5jb250ZW50Lm1haW4gOiBbXTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgW1xuICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImJhclwiIH0sIHN0eWxlOiB7IHdpZHRoOiBwcm9wcy5wcm9ncmVzcyArIFwiJVwiIH0gfSwgW1xuICAgICAgICBkaXYoeyBwcm9wczogeyBjbGFzc05hbWU6IFwicHJvZ3Jlc3NcIiB9IH0sIFtwcm9wcy5wcm9ncmVzcyArIFwiJVwiXSlcbiAgICAgIF0pLFxuICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBcImxhYmVsXCIgfSB9LCBjb250ZW50KVxuICAgIF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuYWN0aXZlKSB7XG4gICAgICBjbGFzc05hbWUgKz0gXCIgYWN0aXZlXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGRpc2FibGVkXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmF0dGFjaG1lbnQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjbGFzc05hbWUgKz0gQXR0YWNobWVudC5Ub0NsYXNzbmFtZShwcm9wcy5hdHRhY2htZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5jb2xvcikgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBDb2xvci5Ub0NsYXNzbmFtZShwcm9wcy5jb2xvcik7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBwcm9ncmVzc1wiO1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3Byb2dyZXNzL2luZGV4LnRzIiwiaW1wb3J0IHhzLCB7IE1lbW9yeVN0cmVhbSwgU3RyZWFtIH0gZnJvbSBcInhzdHJlYW1cIjtcbmltcG9ydCBkcm9wUmVwZWF0cyBmcm9tIFwieHN0cmVhbS9leHRyYS9kcm9wUmVwZWF0c1wiO1xuaW1wb3J0IHsgZGl2LCBWTm9kZSwgRE9NU291cmNlIH0gZnJvbSBcIkBjeWNsZS9kb21cIjtcbmltcG9ydCB7TWVudSwgQXR0YWNobWVudCwgU2VnbWVudH0gZnJvbSBcIi4uLy4uL2luZGV4XCI7XG5pbXBvcnQge0RPTUNvbnRlbnR9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5cbmV4cG9ydCBuYW1lc3BhY2UgVGFicyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgVGFic1NvdXJjZXMge1xuICAgIERPTTogRE9NU291cmNlO1xuICAgIGxhYmVsczogc3RyaW5nW107XG4gICAgY29udGVudDogU3RyZWFtPERPTUNvbnRlbnQ+W107XG4gICAgYWN0aXZlPzogc3RyaW5nO1xuICAgIG1lbnVQcm9wcyQ/OiBTdHJlYW08UGFydGlhbDxNZW51LlByb3BzPj47XG4gICAgc2VnbWVudFByb3BzJD86IFN0cmVhbTxQYXJ0aWFsPFNlZ21lbnQuUHJvcHM+PjtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcnVuKHNvdXJjZXM6IFRhYnNTb3VyY2VzKSB7XG4gICAgbGV0IG1lbnVQcm9wcyQgPSBzb3VyY2VzLm1lbnVQcm9wcyQgPyBzb3VyY2VzLm1lbnVQcm9wcyQgOiB4cy5vZih7IHRhYnVsYXI6IHRydWUsIGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQuVG9wIH0pO1xuICAgIGxldCBzZWdtZW50UHJvcHMkID0gc291cmNlcy5zZWdtZW50UHJvcHMkID8gc291cmNlcy5zZWdtZW50UHJvcHMkIDogeHMub2Yoe2F0dGFjaG1lbnQ6IEF0dGFjaG1lbnQuQm90dG9tfSk7XG4gICAgbGV0IG1lbnVWYWx1ZSQgPSB4cy5jcmVhdGUoKSBhcyBTdHJlYW08c3RyaW5nPjtcbiAgICBsZXQgYWN0aXZlVGFiJCA9IG1lbnVWYWx1ZSQuc3RhcnRXaXRoKHNvdXJjZXMuYWN0aXZlID8gc291cmNlcy5hY3RpdmU6IHNvdXJjZXMubGFiZWxzWzBdKS5jb21wb3NlKGRyb3BSZXBlYXRzKCkpLnJlbWVtYmVyKCk7XG4gICAgbGV0IG1lbnUgPSBNZW51LnJ1bih7XG4gICAgICBET006IHNvdXJjZXMuRE9NLFxuICAgICAgcHJvcHMkOiBtZW51UHJvcHMkLFxuICAgICAgY29udGVudCQ6IGFjdGl2ZVRhYiQubWFwKGFjdGl2ZVRhYiA9PlxuICAgICAgICBzb3VyY2VzLmxhYmVscy5tYXAobGFiZWwgPT5cbiAgICAgICAgICAoe1xuICAgICAgICAgICAgbGluazogdHJ1ZSxcbiAgICAgICAgICAgIGFjdGl2ZTogYWN0aXZlVGFiID09PSBsYWJlbCxcbiAgICAgICAgICAgIG1haW46IGxhYmVsXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH0pO1xuICAgIG1lbnVWYWx1ZSQuaW1pdGF0ZShtZW51LnZhbHVlJC5tYXAoeCA9PiAoeCBhcyBhbnkpLmJvZHkpKTtcbiAgICBsZXQgdGFiQ29udGVudCQgPSBhY3RpdmVUYWIkLm1hcChcbiAgICAgIHRhYiA9PiB4cy5tZXJnZSh4cy5vZihbZGl2KCldKSwgc291cmNlcy5jb250ZW50W3NvdXJjZXMubGFiZWxzLmluZGV4T2YodGFiKV0pXG4gICAgKS5mbGF0dGVuKCk7XG4gICAgXG4gICAgY29uc3QgdlRyZWUkID0geHMuY29tYmluZShtZW51LkRPTSwgdGFiQ29udGVudCQsIHNlZ21lbnRQcm9wcyQpLm1hcChcbiAgICAgIChbbWVudSwgdGFiY29udGVudCwgc2VnbWVudFByb3BzXSkgPT4gZGl2KFtcbiAgICAgICAgbWVudSxcbiAgICAgICAgU2VnbWVudC5yZW5kZXIoc2VnbWVudFByb3BzLCB0YWJjb250ZW50KVxuICAgICAgXSlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBET006IHZUcmVlJCxcbiAgICAgIGFjdGl2ZSQ6IGFjdGl2ZVRhYiRcbiAgICB9O1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy90YWJzL2luZGV4LnRzIiwiaW1wb3J0IHsgVk5vZGV9IGZyb20gXCJAY3ljbGUvZG9tXCI7XG5cbmV4cG9ydCB0eXBlIERPTUNvbnRlbnQgPSBzdHJpbmcgfCBWTm9kZSB8IEFycmF5PHN0cmluZ3xWTm9kZT47XG5leHBvcnQgZnVuY3Rpb24gaXNET01Db250ZW50KGNvbnRlbnQpIDogY29udGVudCBpcyBET01Db250ZW50IHtcbiAgaWYgKCFjb250ZW50KXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZihjb250ZW50KSA9PT0gXCJzdHJpbmdcIil7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlzVk5vZGUoY29udGVudCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoY29udGVudCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgaWYgKGNvbnRlbnQubGVuZ3RoID09PSAwKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBpc1ZOb2RlKGNvbnRlbnRbMF0pIHx8IHR5cGVvZihjb250ZW50WzBdKSA9PT0gXCJzdHJpbmdcIiA7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWTm9kZShvYmopOiBvYmogaXMgVk5vZGUge1xuICAgIHJldHVybiBvYmogJiYgb2JqLnNlbCAhPT0gdW5kZWZpbmVkO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3R5cGVzL2RvbWNvbnRlbnQudHMiLCJleHBvcnQgKiBmcm9tIFwiLi9zdGF0aXN0aWNcIjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy92aWV3cy9pbmRleC50cyIsImltcG9ydCB7IFZOb2RlLCBkaXYgfSBmcm9tIFwiQGN5Y2xlL2RvbVwiO1xuaW1wb3J0IHsgRE9NQ29udGVudCwgaXNET01Db250ZW50LCBTdHlsZUFuZENvbnRlbnRBcmdzLCBDb21wb25lbnRTb3VyY2VzLCBDb21wb25lbnRTaW5rcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgQ29sb3IsICBGbG9hdCwgIFNpemUgfSBmcm9tIFwiLi4vLi4vZW51bXNcIjtcbmltcG9ydCB7IHJlbmRlclByb3BzQW5kQ29udGVudCwgcnVuUHJvcHNBbmRDb250ZW50fSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBnZXRTY29wZX0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgU3RhdGlzdGljIHtcbiAgZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gICAgdGV4dDogYm9vbGVhbjtcbiAgICBob3Jpem9udGFsOiBib29sZWFuO1xuICAgIGludmVydGVkOiBib29sZWFuO1xuICAgIGNvbG9yOiBDb2xvciB8IHN0cmluZztcbiAgICBzaXplOiBTaXplIHwgc3RyaW5nO1xuICAgIGZsb2F0OiBGbG9hdCB8IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudE9iaiB7XG4gICAgbWFpbjogRE9NQ29udGVudDtcbiAgICBsYWJlbDogRE9NQ29udGVudDtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFN0YXRpc3RpY0FyZ3MgPSBTdHlsZUFuZENvbnRlbnRBcmdzPFByb3BzLCBET01Db250ZW50LCBDb250ZW50T2JqPjtcbiAgZXhwb3J0IHR5cGUgU3RhdGlzdGljU291cmNlcyA9IENvbXBvbmVudFNvdXJjZXM8UHJvcHMsIERPTUNvbnRlbnQsIENvbnRlbnRPYmo+O1xuXG4gIGV4cG9ydCBmdW5jdGlvbiByZW5kZXIoYXJnMT86IFN0YXRpc3RpY0FyZ3N8UGFydGlhbDxQcm9wcz58RE9NQ29udGVudCwgYXJnMj86IERPTUNvbnRlbnQpIHtcbiAgICByZXR1cm4gcmVuZGVyUHJvcHNBbmRDb250ZW50KHN0YXRpc3RpYywgaXNBcmdzLCBpc0RPTUNvbnRlbnQsIGFyZzEsIGFyZzIpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJ1bihzb3VyY2VzOiBTdGF0aXN0aWNTb3VyY2VzLCBzY29wZTogc3RyaW5nID0gZ2V0U2NvcGUoKSk6IENvbXBvbmVudFNpbmtzIHtcbiAgICByZXR1cm4gcnVuUHJvcHNBbmRDb250ZW50KHNvdXJjZXMsIHN0YXRpc3RpYywgXCIuc3RhdGlzdGljXCIsIHNjb3BlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXRpc3RpYyhhcmdzOiBTdGF0aXN0aWNBcmdzKTogVk5vZGUge1xuICAgIGxldCBwcm9wcyA9IGFyZ3MucHJvcHMgPyBhcmdzLnByb3BzIDoge307XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzLmNvbnRlbnQgPyBpc0RPTUNvbnRlbnQoYXJncy5jb250ZW50KSA/IHttYWluOiBhcmdzLmNvbnRlbnR9IDogYXJncy5jb250ZW50IDoge21haW46IFtdfTtcbiAgICByZXR1cm4gZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBnZXRDbGFzc25hbWUocHJvcHMpIH0gfSwgW10uY29uY2F0KFxuICAgICAgZGl2KHsgcHJvcHM6IHsgY2xhc3NOYW1lOiBwcm9wcy50ZXh0ID8gXCJ0ZXh0IHZhbHVlXCIgOiBcInZhbHVlXCIgfSB9LCBjb250ZW50Lm1haW4pLFxuICAgICAgY29udGVudC5sYWJlbCA/IGRpdih7IHByb3BzOiB7IGNsYXNzTmFtZTogXCJsYWJlbFwiIH0gfSwgY29udGVudC5sYWJlbCkgOiBbXVxuICAgICkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NuYW1lKHByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHN0cmluZyB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwidWlcIjtcbiAgICBpZiAocHJvcHMuaG9yaXpvbnRhbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGhvcml6b250YWxcIjtcbiAgICB9XG4gICAgaWYgKHByb3BzLnRleHQpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiB0ZXh0XCI7XG4gICAgfVxuICAgIGlmIChwcm9wcy5pbnZlcnRlZCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIGludmVydGVkXCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByb3BzLmNvbG9yKSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2xhc3NOYW1lICs9IENvbG9yLlRvQ2xhc3NuYW1lKHByb3BzLmNvbG9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJvcHMuc2l6ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBTaXplLlRvQ2xhc3NuYW1lKHByb3BzLnNpemUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcm9wcy5mbG9hdCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBGbG9hdC5Ub0NsYXNzbmFtZShwcm9wcy5mbG9hdCk7XG4gICAgfVxuICAgIGNsYXNzTmFtZSArPSBcIiBzdGF0aXN0aWNcIjtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBcmdzKG9iaik6IG9iaiBpcyBTdGF0aXN0aWNBcmdzIHtcbiAgICByZXR1cm4gdHlwZW9mKG9iaikgIT09IFwidW5kZWZpbmVkXCIgJiYgKFxuICAgICAgdHlwZW9mKG9iai5wcm9wcykgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgIHR5cGVvZihvYmouY29udGVudCkgIT09IFwidW5kZWZpbmVkXCIgJiYgKFxuICAgICAgICBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQpIHx8XG4gICAgICAgIGlzRE9NQ29udGVudChvYmouY29udGVudC5tYWluKSB8fCBpc0RPTUNvbnRlbnQob2JqLmNvbnRlbnQubGFiZWwpXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3ZpZXdzL3N0YXRpc3RpYy9pbmRleC50cyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgdmFsdWVFcXVhbCA9IGZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShiKSB8fCBhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gdmFsdWVFcXVhbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdmFsdWUtZXF1YWwvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDIyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9